
SampleSD_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0810133c  0810133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810134c  0810134c  0001134c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101350  08101350  00011350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08101354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  10000010  08101364  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000007c  08101364  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013a6b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002152  00000000  00000000  00033aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c68  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b90  00000000  00000000  00036868  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003dae8  00000000  00000000  000373f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ab1a  00000000  00000000  00074ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00194af0  00000000  00000000  0007f9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  002144ea  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003318  00000000  00000000  00214568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101324 	.word	0x08101324

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08101324 	.word	0x08101324

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100310:	b480      	push	{r7}
 8100312:	b083      	sub	sp, #12
 8100314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100316:	4b0a      	ldr	r3, [pc, #40]	; (8100340 <MX_DMA_Init+0x30>)
 8100318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810031c:	4a08      	ldr	r2, [pc, #32]	; (8100340 <MX_DMA_Init+0x30>)
 810031e:	f043 0301 	orr.w	r3, r3, #1
 8100322:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100326:	4b06      	ldr	r3, [pc, #24]	; (8100340 <MX_DMA_Init+0x30>)
 8100328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810032c:	f003 0301 	and.w	r3, r3, #1
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]

}
 8100334:	bf00      	nop
 8100336:	370c      	adds	r7, #12
 8100338:	46bd      	mov	sp, r7
 810033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810033e:	4770      	bx	lr
 8100340:	58024400 	.word	0x58024400

08100344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100344:	b580      	push	{r7, lr}
 8100346:	b082      	sub	sp, #8
 8100348:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810034a:	4b1b      	ldr	r3, [pc, #108]	; (81003b8 <main+0x74>)
 810034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100350:	4a19      	ldr	r2, [pc, #100]	; (81003b8 <main+0x74>)
 8100352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810035a:	4b17      	ldr	r3, [pc, #92]	; (81003b8 <main+0x74>)
 810035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100364:	607b      	str	r3, [r7, #4]
 8100366:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100368:	2001      	movs	r0, #1
 810036a:	f000 fa8d 	bl	8100888 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810036e:	f000 fb13 	bl	8100998 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100372:	2201      	movs	r2, #1
 8100374:	2102      	movs	r1, #2
 8100376:	2000      	movs	r0, #0
 8100378:	f000 fa98 	bl	81008ac <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810037c:	4b0f      	ldr	r3, [pc, #60]	; (81003bc <main+0x78>)
 810037e:	681b      	ldr	r3, [r3, #0]
 8100380:	091b      	lsrs	r3, r3, #4
 8100382:	f003 030f 	and.w	r3, r3, #15
 8100386:	2b07      	cmp	r3, #7
 8100388:	d108      	bne.n	810039c <main+0x58>
 810038a:	4b0d      	ldr	r3, [pc, #52]	; (81003c0 <main+0x7c>)
 810038c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100390:	4a0b      	ldr	r2, [pc, #44]	; (81003c0 <main+0x7c>)
 8100392:	f043 0301 	orr.w	r3, r3, #1
 8100396:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810039a:	e007      	b.n	81003ac <main+0x68>
 810039c:	4b08      	ldr	r3, [pc, #32]	; (81003c0 <main+0x7c>)
 810039e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003a2:	4a07      	ldr	r2, [pc, #28]	; (81003c0 <main+0x7c>)
 81003a4:	f043 0301 	orr.w	r3, r3, #1
 81003a8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003ac:	f000 f906 	bl	81005bc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 81003b0:	f7ff ffae 	bl	8100310 <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003b4:	e7fe      	b.n	81003b4 <main+0x70>
 81003b6:	bf00      	nop
 81003b8:	58024400 	.word	0x58024400
 81003bc:	e000ed00 	.word	0xe000ed00
 81003c0:	58026400 	.word	0x58026400

081003c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81003c4:	b580      	push	{r7, lr}
 81003c6:	b082      	sub	sp, #8
 81003c8:	af00      	add	r7, sp, #0
 81003ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 81003cc:	687b      	ldr	r3, [r7, #4]
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	4a04      	ldr	r2, [pc, #16]	; (81003e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81003d2:	4293      	cmp	r3, r2
 81003d4:	d101      	bne.n	81003da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81003d6:	f000 f94f 	bl	8100678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81003da:	bf00      	nop
 81003dc:	3708      	adds	r7, #8
 81003de:	46bd      	mov	sp, r7
 81003e0:	bd80      	pop	{r7, pc}
 81003e2:	bf00      	nop
 81003e4:	40001400 	.word	0x40001400

081003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81003e8:	b480      	push	{r7}
 81003ea:	b083      	sub	sp, #12
 81003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81003ee:	4b0a      	ldr	r3, [pc, #40]	; (8100418 <HAL_MspInit+0x30>)
 81003f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81003f4:	4a08      	ldr	r2, [pc, #32]	; (8100418 <HAL_MspInit+0x30>)
 81003f6:	f043 0302 	orr.w	r3, r3, #2
 81003fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81003fe:	4b06      	ldr	r3, [pc, #24]	; (8100418 <HAL_MspInit+0x30>)
 8100400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100404:	f003 0302 	and.w	r3, r3, #2
 8100408:	607b      	str	r3, [r7, #4]
 810040a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810040c:	bf00      	nop
 810040e:	370c      	adds	r7, #12
 8100410:	46bd      	mov	sp, r7
 8100412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100416:	4770      	bx	lr
 8100418:	58024400 	.word	0x58024400

0810041c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810041c:	b580      	push	{r7, lr}
 810041e:	b090      	sub	sp, #64	; 0x40
 8100420:	af00      	add	r7, sp, #0
 8100422:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100424:	687b      	ldr	r3, [r7, #4]
 8100426:	2b0f      	cmp	r3, #15
 8100428:	d827      	bhi.n	810047a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 810042a:	2200      	movs	r2, #0
 810042c:	6879      	ldr	r1, [r7, #4]
 810042e:	2037      	movs	r0, #55	; 0x37
 8100430:	f000 f9ee 	bl	8100810 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8100434:	2037      	movs	r0, #55	; 0x37
 8100436:	f000 fa05 	bl	8100844 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 810043a:	4a29      	ldr	r2, [pc, #164]	; (81004e0 <HAL_InitTick+0xc4>)
 810043c:	687b      	ldr	r3, [r7, #4]
 810043e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8100440:	4b28      	ldr	r3, [pc, #160]	; (81004e4 <HAL_InitTick+0xc8>)
 8100442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100446:	4a27      	ldr	r2, [pc, #156]	; (81004e4 <HAL_InitTick+0xc8>)
 8100448:	f043 0320 	orr.w	r3, r3, #32
 810044c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100450:	4b24      	ldr	r3, [pc, #144]	; (81004e4 <HAL_InitTick+0xc8>)
 8100452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100456:	f003 0320 	and.w	r3, r3, #32
 810045a:	60fb      	str	r3, [r7, #12]
 810045c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810045e:	f107 0210 	add.w	r2, r7, #16
 8100462:	f107 0314 	add.w	r3, r7, #20
 8100466:	4611      	mov	r1, r2
 8100468:	4618      	mov	r0, r3
 810046a:	f000 fc5d 	bl	8100d28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810046e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100470:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100474:	2b00      	cmp	r3, #0
 8100476:	d106      	bne.n	8100486 <HAL_InitTick+0x6a>
 8100478:	e001      	b.n	810047e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810047a:	2301      	movs	r3, #1
 810047c:	e02b      	b.n	81004d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810047e:	f000 fc3d 	bl	8100cfc <HAL_RCC_GetPCLK1Freq>
 8100482:	63f8      	str	r0, [r7, #60]	; 0x3c
 8100484:	e004      	b.n	8100490 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100486:	f000 fc39 	bl	8100cfc <HAL_RCC_GetPCLK1Freq>
 810048a:	4603      	mov	r3, r0
 810048c:	005b      	lsls	r3, r3, #1
 810048e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8100492:	4a15      	ldr	r2, [pc, #84]	; (81004e8 <HAL_InitTick+0xcc>)
 8100494:	fba2 2303 	umull	r2, r3, r2, r3
 8100498:	0c9b      	lsrs	r3, r3, #18
 810049a:	3b01      	subs	r3, #1
 810049c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 810049e:	4b13      	ldr	r3, [pc, #76]	; (81004ec <HAL_InitTick+0xd0>)
 81004a0:	4a13      	ldr	r2, [pc, #76]	; (81004f0 <HAL_InitTick+0xd4>)
 81004a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 81004a4:	4b11      	ldr	r3, [pc, #68]	; (81004ec <HAL_InitTick+0xd0>)
 81004a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 81004aa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 81004ac:	4a0f      	ldr	r2, [pc, #60]	; (81004ec <HAL_InitTick+0xd0>)
 81004ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81004b0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 81004b2:	4b0e      	ldr	r3, [pc, #56]	; (81004ec <HAL_InitTick+0xd0>)
 81004b4:	2200      	movs	r2, #0
 81004b6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004b8:	4b0c      	ldr	r3, [pc, #48]	; (81004ec <HAL_InitTick+0xd0>)
 81004ba:	2200      	movs	r2, #0
 81004bc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 81004be:	480b      	ldr	r0, [pc, #44]	; (81004ec <HAL_InitTick+0xd0>)
 81004c0:	f000 fc74 	bl	8100dac <HAL_TIM_Base_Init>
 81004c4:	4603      	mov	r3, r0
 81004c6:	2b00      	cmp	r3, #0
 81004c8:	d104      	bne.n	81004d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 81004ca:	4808      	ldr	r0, [pc, #32]	; (81004ec <HAL_InitTick+0xd0>)
 81004cc:	f000 fcd0 	bl	8100e70 <HAL_TIM_Base_Start_IT>
 81004d0:	4603      	mov	r3, r0
 81004d2:	e000      	b.n	81004d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81004d4:	2301      	movs	r3, #1
}
 81004d6:	4618      	mov	r0, r3
 81004d8:	3740      	adds	r7, #64	; 0x40
 81004da:	46bd      	mov	sp, r7
 81004dc:	bd80      	pop	{r7, pc}
 81004de:	bf00      	nop
 81004e0:	10000008 	.word	0x10000008
 81004e4:	58024400 	.word	0x58024400
 81004e8:	431bde83 	.word	0x431bde83
 81004ec:	1000002c 	.word	0x1000002c
 81004f0:	40001400 	.word	0x40001400

081004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81004f4:	b480      	push	{r7}
 81004f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 81004f8:	bf00      	nop
 81004fa:	46bd      	mov	sp, r7
 81004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100500:	4770      	bx	lr

08100502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100502:	b480      	push	{r7}
 8100504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100506:	e7fe      	b.n	8100506 <HardFault_Handler+0x4>

08100508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100508:	b480      	push	{r7}
 810050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810050c:	e7fe      	b.n	810050c <MemManage_Handler+0x4>

0810050e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810050e:	b480      	push	{r7}
 8100510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100512:	e7fe      	b.n	8100512 <BusFault_Handler+0x4>

08100514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100514:	b480      	push	{r7}
 8100516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100518:	e7fe      	b.n	8100518 <UsageFault_Handler+0x4>

0810051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810051a:	b480      	push	{r7}
 810051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810051e:	bf00      	nop
 8100520:	46bd      	mov	sp, r7
 8100522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100526:	4770      	bx	lr

08100528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100528:	b480      	push	{r7}
 810052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810052c:	bf00      	nop
 810052e:	46bd      	mov	sp, r7
 8100530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100534:	4770      	bx	lr

08100536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100536:	b480      	push	{r7}
 8100538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810053a:	bf00      	nop
 810053c:	46bd      	mov	sp, r7
 810053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100542:	4770      	bx	lr

08100544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100544:	b480      	push	{r7}
 8100546:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100548:	bf00      	nop
 810054a:	46bd      	mov	sp, r7
 810054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100550:	4770      	bx	lr
	...

08100554 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8100554:	b580      	push	{r7, lr}
 8100556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8100558:	4802      	ldr	r0, [pc, #8]	; (8100564 <TIM7_IRQHandler+0x10>)
 810055a:	f000 fcbf 	bl	8100edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 810055e:	bf00      	nop
 8100560:	bd80      	pop	{r7, pc}
 8100562:	bf00      	nop
 8100564:	1000002c 	.word	0x1000002c

08100568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100568:	f8df d034 	ldr.w	sp, [pc, #52]	; 81005a0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 810056c:	f7ff feb4 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8100570:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8100572:	e003      	b.n	810057c <LoopCopyDataInit>

08100574 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100574:	4b0b      	ldr	r3, [pc, #44]	; (81005a4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8100576:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8100578:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810057a:	3104      	adds	r1, #4

0810057c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 810057c:	480a      	ldr	r0, [pc, #40]	; (81005a8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 810057e:	4b0b      	ldr	r3, [pc, #44]	; (81005ac <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8100580:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8100582:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100584:	d3f6      	bcc.n	8100574 <CopyDataInit>
  ldr  r2, =_sbss
 8100586:	4a0a      	ldr	r2, [pc, #40]	; (81005b0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8100588:	e002      	b.n	8100590 <LoopFillZerobss>

0810058a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810058a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 810058c:	f842 3b04 	str.w	r3, [r2], #4

08100590 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8100590:	4b08      	ldr	r3, [pc, #32]	; (81005b4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8100592:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8100594:	d3f9      	bcc.n	810058a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100596:	f000 fea1 	bl	81012dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810059a:	f7ff fed3 	bl	8100344 <main>
  bx  lr    
 810059e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005a0:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81005a4:	08101354 	.word	0x08101354
  ldr  r0, =_sdata
 81005a8:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81005ac:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 81005b0:	10000010 	.word	0x10000010
  ldr  r3, = _ebss
 81005b4:	1000007c 	.word	0x1000007c

081005b8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81005b8:	e7fe      	b.n	81005b8 <ADC3_IRQHandler>
	...

081005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81005bc:	b580      	push	{r7, lr}
 81005be:	b082      	sub	sp, #8
 81005c0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81005c2:	4b28      	ldr	r3, [pc, #160]	; (8100664 <HAL_Init+0xa8>)
 81005c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005c8:	4a26      	ldr	r2, [pc, #152]	; (8100664 <HAL_Init+0xa8>)
 81005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81005ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81005d2:	4b24      	ldr	r3, [pc, #144]	; (8100664 <HAL_Init+0xa8>)
 81005d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81005dc:	603b      	str	r3, [r7, #0]
 81005de:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81005e0:	4b21      	ldr	r3, [pc, #132]	; (8100668 <HAL_Init+0xac>)
 81005e2:	681b      	ldr	r3, [r3, #0]
 81005e4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81005e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81005ec:	4a1e      	ldr	r2, [pc, #120]	; (8100668 <HAL_Init+0xac>)
 81005ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81005f2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81005f4:	4b1c      	ldr	r3, [pc, #112]	; (8100668 <HAL_Init+0xac>)
 81005f6:	681b      	ldr	r3, [r3, #0]
 81005f8:	4a1b      	ldr	r2, [pc, #108]	; (8100668 <HAL_Init+0xac>)
 81005fa:	f043 0301 	orr.w	r3, r3, #1
 81005fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100600:	2003      	movs	r0, #3
 8100602:	f000 f8fa 	bl	81007fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100606:	f000 f9d5 	bl	81009b4 <HAL_RCC_GetSysClockFreq>
 810060a:	4601      	mov	r1, r0
 810060c:	4b15      	ldr	r3, [pc, #84]	; (8100664 <HAL_Init+0xa8>)
 810060e:	699b      	ldr	r3, [r3, #24]
 8100610:	0a1b      	lsrs	r3, r3, #8
 8100612:	f003 030f 	and.w	r3, r3, #15
 8100616:	4a15      	ldr	r2, [pc, #84]	; (810066c <HAL_Init+0xb0>)
 8100618:	5cd3      	ldrb	r3, [r2, r3]
 810061a:	f003 031f 	and.w	r3, r3, #31
 810061e:	fa21 f303 	lsr.w	r3, r1, r3
 8100622:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100624:	4b0f      	ldr	r3, [pc, #60]	; (8100664 <HAL_Init+0xa8>)
 8100626:	699b      	ldr	r3, [r3, #24]
 8100628:	f003 030f 	and.w	r3, r3, #15
 810062c:	4a0f      	ldr	r2, [pc, #60]	; (810066c <HAL_Init+0xb0>)
 810062e:	5cd3      	ldrb	r3, [r2, r3]
 8100630:	f003 031f 	and.w	r3, r3, #31
 8100634:	687a      	ldr	r2, [r7, #4]
 8100636:	fa22 f303 	lsr.w	r3, r2, r3
 810063a:	4a0d      	ldr	r2, [pc, #52]	; (8100670 <HAL_Init+0xb4>)
 810063c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810063e:	4b0c      	ldr	r3, [pc, #48]	; (8100670 <HAL_Init+0xb4>)
 8100640:	681b      	ldr	r3, [r3, #0]
 8100642:	4a0c      	ldr	r2, [pc, #48]	; (8100674 <HAL_Init+0xb8>)
 8100644:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100646:	2000      	movs	r0, #0
 8100648:	f7ff fee8 	bl	810041c <HAL_InitTick>
 810064c:	4603      	mov	r3, r0
 810064e:	2b00      	cmp	r3, #0
 8100650:	d001      	beq.n	8100656 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100652:	2301      	movs	r3, #1
 8100654:	e002      	b.n	810065c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100656:	f7ff fec7 	bl	81003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810065a:	2300      	movs	r3, #0
}
 810065c:	4618      	mov	r0, r3
 810065e:	3708      	adds	r7, #8
 8100660:	46bd      	mov	sp, r7
 8100662:	bd80      	pop	{r7, pc}
 8100664:	58024400 	.word	0x58024400
 8100668:	40024400 	.word	0x40024400
 810066c:	0810133c 	.word	0x0810133c
 8100670:	10000004 	.word	0x10000004
 8100674:	10000000 	.word	0x10000000

08100678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100678:	b480      	push	{r7}
 810067a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810067c:	4b06      	ldr	r3, [pc, #24]	; (8100698 <HAL_IncTick+0x20>)
 810067e:	781b      	ldrb	r3, [r3, #0]
 8100680:	461a      	mov	r2, r3
 8100682:	4b06      	ldr	r3, [pc, #24]	; (810069c <HAL_IncTick+0x24>)
 8100684:	681b      	ldr	r3, [r3, #0]
 8100686:	4413      	add	r3, r2
 8100688:	4a04      	ldr	r2, [pc, #16]	; (810069c <HAL_IncTick+0x24>)
 810068a:	6013      	str	r3, [r2, #0]
}
 810068c:	bf00      	nop
 810068e:	46bd      	mov	sp, r7
 8100690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100694:	4770      	bx	lr
 8100696:	bf00      	nop
 8100698:	1000000c 	.word	0x1000000c
 810069c:	10000078 	.word	0x10000078

081006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006a0:	b480      	push	{r7}
 81006a2:	b085      	sub	sp, #20
 81006a4:	af00      	add	r7, sp, #0
 81006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81006a8:	687b      	ldr	r3, [r7, #4]
 81006aa:	f003 0307 	and.w	r3, r3, #7
 81006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81006b0:	4b0c      	ldr	r3, [pc, #48]	; (81006e4 <__NVIC_SetPriorityGrouping+0x44>)
 81006b2:	68db      	ldr	r3, [r3, #12]
 81006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81006b6:	68ba      	ldr	r2, [r7, #8]
 81006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81006bc:	4013      	ands	r3, r2
 81006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81006c0:	68fb      	ldr	r3, [r7, #12]
 81006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006c4:	68bb      	ldr	r3, [r7, #8]
 81006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006d2:	4a04      	ldr	r2, [pc, #16]	; (81006e4 <__NVIC_SetPriorityGrouping+0x44>)
 81006d4:	68bb      	ldr	r3, [r7, #8]
 81006d6:	60d3      	str	r3, [r2, #12]
}
 81006d8:	bf00      	nop
 81006da:	3714      	adds	r7, #20
 81006dc:	46bd      	mov	sp, r7
 81006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e2:	4770      	bx	lr
 81006e4:	e000ed00 	.word	0xe000ed00

081006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006e8:	b480      	push	{r7}
 81006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006ec:	4b04      	ldr	r3, [pc, #16]	; (8100700 <__NVIC_GetPriorityGrouping+0x18>)
 81006ee:	68db      	ldr	r3, [r3, #12]
 81006f0:	0a1b      	lsrs	r3, r3, #8
 81006f2:	f003 0307 	and.w	r3, r3, #7
}
 81006f6:	4618      	mov	r0, r3
 81006f8:	46bd      	mov	sp, r7
 81006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006fe:	4770      	bx	lr
 8100700:	e000ed00 	.word	0xe000ed00

08100704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100704:	b480      	push	{r7}
 8100706:	b083      	sub	sp, #12
 8100708:	af00      	add	r7, sp, #0
 810070a:	4603      	mov	r3, r0
 810070c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810070e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100712:	2b00      	cmp	r3, #0
 8100714:	db0b      	blt.n	810072e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100716:	88fb      	ldrh	r3, [r7, #6]
 8100718:	f003 021f 	and.w	r2, r3, #31
 810071c:	4907      	ldr	r1, [pc, #28]	; (810073c <__NVIC_EnableIRQ+0x38>)
 810071e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100722:	095b      	lsrs	r3, r3, #5
 8100724:	2001      	movs	r0, #1
 8100726:	fa00 f202 	lsl.w	r2, r0, r2
 810072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810072e:	bf00      	nop
 8100730:	370c      	adds	r7, #12
 8100732:	46bd      	mov	sp, r7
 8100734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100738:	4770      	bx	lr
 810073a:	bf00      	nop
 810073c:	e000e100 	.word	0xe000e100

08100740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100740:	b480      	push	{r7}
 8100742:	b083      	sub	sp, #12
 8100744:	af00      	add	r7, sp, #0
 8100746:	4603      	mov	r3, r0
 8100748:	6039      	str	r1, [r7, #0]
 810074a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810074c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100750:	2b00      	cmp	r3, #0
 8100752:	db0a      	blt.n	810076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100754:	683b      	ldr	r3, [r7, #0]
 8100756:	b2da      	uxtb	r2, r3
 8100758:	490c      	ldr	r1, [pc, #48]	; (810078c <__NVIC_SetPriority+0x4c>)
 810075a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810075e:	0112      	lsls	r2, r2, #4
 8100760:	b2d2      	uxtb	r2, r2
 8100762:	440b      	add	r3, r1
 8100764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100768:	e00a      	b.n	8100780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810076a:	683b      	ldr	r3, [r7, #0]
 810076c:	b2da      	uxtb	r2, r3
 810076e:	4908      	ldr	r1, [pc, #32]	; (8100790 <__NVIC_SetPriority+0x50>)
 8100770:	88fb      	ldrh	r3, [r7, #6]
 8100772:	f003 030f 	and.w	r3, r3, #15
 8100776:	3b04      	subs	r3, #4
 8100778:	0112      	lsls	r2, r2, #4
 810077a:	b2d2      	uxtb	r2, r2
 810077c:	440b      	add	r3, r1
 810077e:	761a      	strb	r2, [r3, #24]
}
 8100780:	bf00      	nop
 8100782:	370c      	adds	r7, #12
 8100784:	46bd      	mov	sp, r7
 8100786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810078a:	4770      	bx	lr
 810078c:	e000e100 	.word	0xe000e100
 8100790:	e000ed00 	.word	0xe000ed00

08100794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100794:	b480      	push	{r7}
 8100796:	b089      	sub	sp, #36	; 0x24
 8100798:	af00      	add	r7, sp, #0
 810079a:	60f8      	str	r0, [r7, #12]
 810079c:	60b9      	str	r1, [r7, #8]
 810079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81007a0:	68fb      	ldr	r3, [r7, #12]
 81007a2:	f003 0307 	and.w	r3, r3, #7
 81007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81007a8:	69fb      	ldr	r3, [r7, #28]
 81007aa:	f1c3 0307 	rsb	r3, r3, #7
 81007ae:	2b04      	cmp	r3, #4
 81007b0:	bf28      	it	cs
 81007b2:	2304      	movcs	r3, #4
 81007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81007b6:	69fb      	ldr	r3, [r7, #28]
 81007b8:	3304      	adds	r3, #4
 81007ba:	2b06      	cmp	r3, #6
 81007bc:	d902      	bls.n	81007c4 <NVIC_EncodePriority+0x30>
 81007be:	69fb      	ldr	r3, [r7, #28]
 81007c0:	3b03      	subs	r3, #3
 81007c2:	e000      	b.n	81007c6 <NVIC_EncodePriority+0x32>
 81007c4:	2300      	movs	r3, #0
 81007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007c8:	f04f 32ff 	mov.w	r2, #4294967295
 81007cc:	69bb      	ldr	r3, [r7, #24]
 81007ce:	fa02 f303 	lsl.w	r3, r2, r3
 81007d2:	43da      	mvns	r2, r3
 81007d4:	68bb      	ldr	r3, [r7, #8]
 81007d6:	401a      	ands	r2, r3
 81007d8:	697b      	ldr	r3, [r7, #20]
 81007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007dc:	f04f 31ff 	mov.w	r1, #4294967295
 81007e0:	697b      	ldr	r3, [r7, #20]
 81007e2:	fa01 f303 	lsl.w	r3, r1, r3
 81007e6:	43d9      	mvns	r1, r3
 81007e8:	687b      	ldr	r3, [r7, #4]
 81007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007ec:	4313      	orrs	r3, r2
         );
}
 81007ee:	4618      	mov	r0, r3
 81007f0:	3724      	adds	r7, #36	; 0x24
 81007f2:	46bd      	mov	sp, r7
 81007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f8:	4770      	bx	lr

081007fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007fa:	b580      	push	{r7, lr}
 81007fc:	b082      	sub	sp, #8
 81007fe:	af00      	add	r7, sp, #0
 8100800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100802:	6878      	ldr	r0, [r7, #4]
 8100804:	f7ff ff4c 	bl	81006a0 <__NVIC_SetPriorityGrouping>
}
 8100808:	bf00      	nop
 810080a:	3708      	adds	r7, #8
 810080c:	46bd      	mov	sp, r7
 810080e:	bd80      	pop	{r7, pc}

08100810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100810:	b580      	push	{r7, lr}
 8100812:	b086      	sub	sp, #24
 8100814:	af00      	add	r7, sp, #0
 8100816:	4603      	mov	r3, r0
 8100818:	60b9      	str	r1, [r7, #8]
 810081a:	607a      	str	r2, [r7, #4]
 810081c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810081e:	f7ff ff63 	bl	81006e8 <__NVIC_GetPriorityGrouping>
 8100822:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100824:	687a      	ldr	r2, [r7, #4]
 8100826:	68b9      	ldr	r1, [r7, #8]
 8100828:	6978      	ldr	r0, [r7, #20]
 810082a:	f7ff ffb3 	bl	8100794 <NVIC_EncodePriority>
 810082e:	4602      	mov	r2, r0
 8100830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100834:	4611      	mov	r1, r2
 8100836:	4618      	mov	r0, r3
 8100838:	f7ff ff82 	bl	8100740 <__NVIC_SetPriority>
}
 810083c:	bf00      	nop
 810083e:	3718      	adds	r7, #24
 8100840:	46bd      	mov	sp, r7
 8100842:	bd80      	pop	{r7, pc}

08100844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100844:	b580      	push	{r7, lr}
 8100846:	b082      	sub	sp, #8
 8100848:	af00      	add	r7, sp, #0
 810084a:	4603      	mov	r3, r0
 810084c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810084e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100852:	4618      	mov	r0, r3
 8100854:	f7ff ff56 	bl	8100704 <__NVIC_EnableIRQ>
}
 8100858:	bf00      	nop
 810085a:	3708      	adds	r7, #8
 810085c:	46bd      	mov	sp, r7
 810085e:	bd80      	pop	{r7, pc}

08100860 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100860:	b480      	push	{r7}
 8100862:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100864:	4b07      	ldr	r3, [pc, #28]	; (8100884 <HAL_GetCurrentCPUID+0x24>)
 8100866:	681b      	ldr	r3, [r3, #0]
 8100868:	091b      	lsrs	r3, r3, #4
 810086a:	f003 030f 	and.w	r3, r3, #15
 810086e:	2b07      	cmp	r3, #7
 8100870:	d101      	bne.n	8100876 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100872:	2303      	movs	r3, #3
 8100874:	e000      	b.n	8100878 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100876:	2301      	movs	r3, #1
  }
}
 8100878:	4618      	mov	r0, r3
 810087a:	46bd      	mov	sp, r7
 810087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100880:	4770      	bx	lr
 8100882:	bf00      	nop
 8100884:	e000ed00 	.word	0xe000ed00

08100888 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100888:	b480      	push	{r7}
 810088a:	b083      	sub	sp, #12
 810088c:	af00      	add	r7, sp, #0
 810088e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100890:	4b05      	ldr	r3, [pc, #20]	; (81008a8 <HAL_HSEM_ActivateNotification+0x20>)
 8100892:	681a      	ldr	r2, [r3, #0]
 8100894:	4904      	ldr	r1, [pc, #16]	; (81008a8 <HAL_HSEM_ActivateNotification+0x20>)
 8100896:	687b      	ldr	r3, [r7, #4]
 8100898:	4313      	orrs	r3, r2
 810089a:	600b      	str	r3, [r1, #0]
#endif
}
 810089c:	bf00      	nop
 810089e:	370c      	adds	r7, #12
 81008a0:	46bd      	mov	sp, r7
 81008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a6:	4770      	bx	lr
 81008a8:	58026510 	.word	0x58026510

081008ac <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b084      	sub	sp, #16
 81008b0:	af00      	add	r7, sp, #0
 81008b2:	60f8      	str	r0, [r7, #12]
 81008b4:	460b      	mov	r3, r1
 81008b6:	607a      	str	r2, [r7, #4]
 81008b8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81008ba:	4b35      	ldr	r3, [pc, #212]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81008bc:	681b      	ldr	r3, [r3, #0]
 81008be:	f023 0201 	bic.w	r2, r3, #1
 81008c2:	4933      	ldr	r1, [pc, #204]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81008c4:	68fb      	ldr	r3, [r7, #12]
 81008c6:	4313      	orrs	r3, r2
 81008c8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81008ca:	687b      	ldr	r3, [r7, #4]
 81008cc:	2b00      	cmp	r3, #0
 81008ce:	d121      	bne.n	8100914 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81008d0:	f7ff ffc6 	bl	8100860 <HAL_GetCurrentCPUID>
 81008d4:	4603      	mov	r3, r0
 81008d6:	2b03      	cmp	r3, #3
 81008d8:	d154      	bne.n	8100984 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81008da:	4b2d      	ldr	r3, [pc, #180]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81008dc:	691b      	ldr	r3, [r3, #16]
 81008de:	4a2c      	ldr	r2, [pc, #176]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81008e0:	f023 0301 	bic.w	r3, r3, #1
 81008e4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008e6:	4b2b      	ldr	r3, [pc, #172]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81008e8:	691b      	ldr	r3, [r3, #16]
 81008ea:	4a2a      	ldr	r2, [pc, #168]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81008ec:	f043 0304 	orr.w	r3, r3, #4
 81008f0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81008f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81008f6:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81008fa:	7afb      	ldrb	r3, [r7, #11]
 81008fc:	2b01      	cmp	r3, #1
 81008fe:	d101      	bne.n	8100904 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100900:	bf30      	wfi
 8100902:	e000      	b.n	8100906 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100904:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100906:	4b23      	ldr	r3, [pc, #140]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100908:	691b      	ldr	r3, [r3, #16]
 810090a:	4a22      	ldr	r2, [pc, #136]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810090c:	f023 0304 	bic.w	r3, r3, #4
 8100910:	6113      	str	r3, [r2, #16]
 8100912:	e03a      	b.n	810098a <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100914:	687b      	ldr	r3, [r7, #4]
 8100916:	2b01      	cmp	r3, #1
 8100918:	d121      	bne.n	810095e <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810091a:	f7ff ffa1 	bl	8100860 <HAL_GetCurrentCPUID>
 810091e:	4603      	mov	r3, r0
 8100920:	2b01      	cmp	r3, #1
 8100922:	d131      	bne.n	8100988 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100924:	4b1a      	ldr	r3, [pc, #104]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100926:	695b      	ldr	r3, [r3, #20]
 8100928:	4a19      	ldr	r2, [pc, #100]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810092a:	f023 0302 	bic.w	r3, r3, #2
 810092e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100930:	4b18      	ldr	r3, [pc, #96]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100932:	691b      	ldr	r3, [r3, #16]
 8100934:	4a17      	ldr	r2, [pc, #92]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100936:	f043 0304 	orr.w	r3, r3, #4
 810093a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810093c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8100940:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100944:	7afb      	ldrb	r3, [r7, #11]
 8100946:	2b01      	cmp	r3, #1
 8100948:	d101      	bne.n	810094e <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810094a:	bf30      	wfi
 810094c:	e000      	b.n	8100950 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810094e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100950:	4b10      	ldr	r3, [pc, #64]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100952:	691b      	ldr	r3, [r3, #16]
 8100954:	4a0f      	ldr	r2, [pc, #60]	; (8100994 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8100956:	f023 0304 	bic.w	r3, r3, #4
 810095a:	6113      	str	r3, [r2, #16]
 810095c:	e015      	b.n	810098a <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810095e:	f7ff ff7f 	bl	8100860 <HAL_GetCurrentCPUID>
 8100962:	4603      	mov	r3, r0
 8100964:	2b03      	cmp	r3, #3
 8100966:	d106      	bne.n	8100976 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100968:	4b09      	ldr	r3, [pc, #36]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810096a:	691b      	ldr	r3, [r3, #16]
 810096c:	4a08      	ldr	r2, [pc, #32]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810096e:	f023 0304 	bic.w	r3, r3, #4
 8100972:	6113      	str	r3, [r2, #16]
 8100974:	e009      	b.n	810098a <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100976:	4b06      	ldr	r3, [pc, #24]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8100978:	695b      	ldr	r3, [r3, #20]
 810097a:	4a05      	ldr	r2, [pc, #20]	; (8100990 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810097c:	f023 0304 	bic.w	r3, r3, #4
 8100980:	6153      	str	r3, [r2, #20]
 8100982:	e002      	b.n	810098a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8100984:	bf00      	nop
 8100986:	e000      	b.n	810098a <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8100988:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810098a:	3710      	adds	r7, #16
 810098c:	46bd      	mov	sp, r7
 810098e:	bd80      	pop	{r7, pc}
 8100990:	58024800 	.word	0x58024800
 8100994:	e000ed00 	.word	0xe000ed00

08100998 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100998:	b580      	push	{r7, lr}
 810099a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810099c:	f7ff ff60 	bl	8100860 <HAL_GetCurrentCPUID>
 81009a0:	4603      	mov	r3, r0
 81009a2:	2b03      	cmp	r3, #3
 81009a4:	d101      	bne.n	81009aa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81009a6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81009a8:	e001      	b.n	81009ae <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81009aa:	bf40      	sev
    __WFE ();
 81009ac:	bf20      	wfe
}
 81009ae:	bf00      	nop
 81009b0:	bd80      	pop	{r7, pc}
	...

081009b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81009b4:	b480      	push	{r7}
 81009b6:	b089      	sub	sp, #36	; 0x24
 81009b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81009ba:	4baf      	ldr	r3, [pc, #700]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81009bc:	691b      	ldr	r3, [r3, #16]
 81009be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81009c2:	2b18      	cmp	r3, #24
 81009c4:	f200 814e 	bhi.w	8100c64 <HAL_RCC_GetSysClockFreq+0x2b0>
 81009c8:	a201      	add	r2, pc, #4	; (adr r2, 81009d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009ce:	bf00      	nop
 81009d0:	08100a35 	.word	0x08100a35
 81009d4:	08100c65 	.word	0x08100c65
 81009d8:	08100c65 	.word	0x08100c65
 81009dc:	08100c65 	.word	0x08100c65
 81009e0:	08100c65 	.word	0x08100c65
 81009e4:	08100c65 	.word	0x08100c65
 81009e8:	08100c65 	.word	0x08100c65
 81009ec:	08100c65 	.word	0x08100c65
 81009f0:	08100a5b 	.word	0x08100a5b
 81009f4:	08100c65 	.word	0x08100c65
 81009f8:	08100c65 	.word	0x08100c65
 81009fc:	08100c65 	.word	0x08100c65
 8100a00:	08100c65 	.word	0x08100c65
 8100a04:	08100c65 	.word	0x08100c65
 8100a08:	08100c65 	.word	0x08100c65
 8100a0c:	08100c65 	.word	0x08100c65
 8100a10:	08100a61 	.word	0x08100a61
 8100a14:	08100c65 	.word	0x08100c65
 8100a18:	08100c65 	.word	0x08100c65
 8100a1c:	08100c65 	.word	0x08100c65
 8100a20:	08100c65 	.word	0x08100c65
 8100a24:	08100c65 	.word	0x08100c65
 8100a28:	08100c65 	.word	0x08100c65
 8100a2c:	08100c65 	.word	0x08100c65
 8100a30:	08100a67 	.word	0x08100a67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a34:	4b90      	ldr	r3, [pc, #576]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a36:	681b      	ldr	r3, [r3, #0]
 8100a38:	f003 0320 	and.w	r3, r3, #32
 8100a3c:	2b00      	cmp	r3, #0
 8100a3e:	d009      	beq.n	8100a54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100a40:	4b8d      	ldr	r3, [pc, #564]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a42:	681b      	ldr	r3, [r3, #0]
 8100a44:	08db      	lsrs	r3, r3, #3
 8100a46:	f003 0303 	and.w	r3, r3, #3
 8100a4a:	4a8c      	ldr	r2, [pc, #560]	; (8100c7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8100a50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100a52:	e10a      	b.n	8100c6a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100a54:	4b89      	ldr	r3, [pc, #548]	; (8100c7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100a56:	61bb      	str	r3, [r7, #24]
    break;
 8100a58:	e107      	b.n	8100c6a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100a5a:	4b89      	ldr	r3, [pc, #548]	; (8100c80 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8100a5c:	61bb      	str	r3, [r7, #24]
    break;
 8100a5e:	e104      	b.n	8100c6a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100a60:	4b88      	ldr	r3, [pc, #544]	; (8100c84 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8100a62:	61bb      	str	r3, [r7, #24]
    break;
 8100a64:	e101      	b.n	8100c6a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100a66:	4b84      	ldr	r3, [pc, #528]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100a6a:	f003 0303 	and.w	r3, r3, #3
 8100a6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100a70:	4b81      	ldr	r3, [pc, #516]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100a74:	091b      	lsrs	r3, r3, #4
 8100a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100a7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100a7c:	4b7e      	ldr	r3, [pc, #504]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100a80:	f003 0301 	and.w	r3, r3, #1
 8100a84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100a86:	4b7c      	ldr	r3, [pc, #496]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100a8a:	08db      	lsrs	r3, r3, #3
 8100a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100a90:	68fa      	ldr	r2, [r7, #12]
 8100a92:	fb02 f303 	mul.w	r3, r2, r3
 8100a96:	ee07 3a90 	vmov	s15, r3
 8100a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100aa2:	693b      	ldr	r3, [r7, #16]
 8100aa4:	2b00      	cmp	r3, #0
 8100aa6:	f000 80da 	beq.w	8100c5e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8100aaa:	697b      	ldr	r3, [r7, #20]
 8100aac:	2b01      	cmp	r3, #1
 8100aae:	d05a      	beq.n	8100b66 <HAL_RCC_GetSysClockFreq+0x1b2>
 8100ab0:	2b01      	cmp	r3, #1
 8100ab2:	d302      	bcc.n	8100aba <HAL_RCC_GetSysClockFreq+0x106>
 8100ab4:	2b02      	cmp	r3, #2
 8100ab6:	d078      	beq.n	8100baa <HAL_RCC_GetSysClockFreq+0x1f6>
 8100ab8:	e099      	b.n	8100bee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100aba:	4b6f      	ldr	r3, [pc, #444]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100abc:	681b      	ldr	r3, [r3, #0]
 8100abe:	f003 0320 	and.w	r3, r3, #32
 8100ac2:	2b00      	cmp	r3, #0
 8100ac4:	d02d      	beq.n	8100b22 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100ac6:	4b6c      	ldr	r3, [pc, #432]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100ac8:	681b      	ldr	r3, [r3, #0]
 8100aca:	08db      	lsrs	r3, r3, #3
 8100acc:	f003 0303 	and.w	r3, r3, #3
 8100ad0:	4a6a      	ldr	r2, [pc, #424]	; (8100c7c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8100ad6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100ad8:	687b      	ldr	r3, [r7, #4]
 8100ada:	ee07 3a90 	vmov	s15, r3
 8100ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ae2:	693b      	ldr	r3, [r7, #16]
 8100ae4:	ee07 3a90 	vmov	s15, r3
 8100ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100af0:	4b61      	ldr	r3, [pc, #388]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100af8:	ee07 3a90 	vmov	s15, r3
 8100afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b04:	eddf 5a60 	vldr	s11, [pc, #384]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100b20:	e087      	b.n	8100c32 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b22:	693b      	ldr	r3, [r7, #16]
 8100b24:	ee07 3a90 	vmov	s15, r3
 8100b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b2c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8100c8c <HAL_RCC_GetSysClockFreq+0x2d8>
 8100b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b34:	4b50      	ldr	r3, [pc, #320]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b3c:	ee07 3a90 	vmov	s15, r3
 8100b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b48:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100b64:	e065      	b.n	8100c32 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100b66:	693b      	ldr	r3, [r7, #16]
 8100b68:	ee07 3a90 	vmov	s15, r3
 8100b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b70:	eddf 6a47 	vldr	s13, [pc, #284]	; 8100c90 <HAL_RCC_GetSysClockFreq+0x2dc>
 8100b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b78:	4b3f      	ldr	r3, [pc, #252]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b80:	ee07 3a90 	vmov	s15, r3
 8100b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b8c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ba4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100ba8:	e043      	b.n	8100c32 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100baa:	693b      	ldr	r3, [r7, #16]
 8100bac:	ee07 3a90 	vmov	s15, r3
 8100bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bb4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8100c94 <HAL_RCC_GetSysClockFreq+0x2e0>
 8100bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bbc:	4b2e      	ldr	r3, [pc, #184]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bc4:	ee07 3a90 	vmov	s15, r3
 8100bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bd0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100be8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100bec:	e021      	b.n	8100c32 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100bee:	693b      	ldr	r3, [r7, #16]
 8100bf0:	ee07 3a90 	vmov	s15, r3
 8100bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bf8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8100c90 <HAL_RCC_GetSysClockFreq+0x2dc>
 8100bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100c00:	4b1d      	ldr	r3, [pc, #116]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100c08:	ee07 3a90 	vmov	s15, r3
 8100c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c14:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8100c88 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100c30:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8100c32:	4b11      	ldr	r3, [pc, #68]	; (8100c78 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100c36:	0a5b      	lsrs	r3, r3, #9
 8100c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100c3c:	3301      	adds	r3, #1
 8100c3e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8100c40:	683b      	ldr	r3, [r7, #0]
 8100c42:	ee07 3a90 	vmov	s15, r3
 8100c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8100c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100c56:	ee17 3a90 	vmov	r3, s15
 8100c5a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8100c5c:	e005      	b.n	8100c6a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8100c5e:	2300      	movs	r3, #0
 8100c60:	61bb      	str	r3, [r7, #24]
    break;
 8100c62:	e002      	b.n	8100c6a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8100c64:	4b06      	ldr	r3, [pc, #24]	; (8100c80 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8100c66:	61bb      	str	r3, [r7, #24]
    break;
 8100c68:	bf00      	nop
  }

  return sysclockfreq;
 8100c6a:	69bb      	ldr	r3, [r7, #24]
}
 8100c6c:	4618      	mov	r0, r3
 8100c6e:	3724      	adds	r7, #36	; 0x24
 8100c70:	46bd      	mov	sp, r7
 8100c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c76:	4770      	bx	lr
 8100c78:	58024400 	.word	0x58024400
 8100c7c:	03d09000 	.word	0x03d09000
 8100c80:	003d0900 	.word	0x003d0900
 8100c84:	017d7840 	.word	0x017d7840
 8100c88:	46000000 	.word	0x46000000
 8100c8c:	4c742400 	.word	0x4c742400
 8100c90:	4a742400 	.word	0x4a742400
 8100c94:	4bbebc20 	.word	0x4bbebc20

08100c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8100c98:	b580      	push	{r7, lr}
 8100c9a:	b082      	sub	sp, #8
 8100c9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8100c9e:	f7ff fe89 	bl	81009b4 <HAL_RCC_GetSysClockFreq>
 8100ca2:	4601      	mov	r1, r0
 8100ca4:	4b11      	ldr	r3, [pc, #68]	; (8100cec <HAL_RCC_GetHCLKFreq+0x54>)
 8100ca6:	699b      	ldr	r3, [r3, #24]
 8100ca8:	0a1b      	lsrs	r3, r3, #8
 8100caa:	f003 030f 	and.w	r3, r3, #15
 8100cae:	4a10      	ldr	r2, [pc, #64]	; (8100cf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8100cb0:	5cd3      	ldrb	r3, [r2, r3]
 8100cb2:	f003 031f 	and.w	r3, r3, #31
 8100cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8100cba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100cbc:	4b0b      	ldr	r3, [pc, #44]	; (8100cec <HAL_RCC_GetHCLKFreq+0x54>)
 8100cbe:	699b      	ldr	r3, [r3, #24]
 8100cc0:	f003 030f 	and.w	r3, r3, #15
 8100cc4:	4a0a      	ldr	r2, [pc, #40]	; (8100cf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8100cc6:	5cd3      	ldrb	r3, [r2, r3]
 8100cc8:	f003 031f 	and.w	r3, r3, #31
 8100ccc:	687a      	ldr	r2, [r7, #4]
 8100cce:	fa22 f303 	lsr.w	r3, r2, r3
 8100cd2:	4a08      	ldr	r2, [pc, #32]	; (8100cf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8100cd4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100cd6:	4b07      	ldr	r3, [pc, #28]	; (8100cf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8100cd8:	681b      	ldr	r3, [r3, #0]
 8100cda:	4a07      	ldr	r2, [pc, #28]	; (8100cf8 <HAL_RCC_GetHCLKFreq+0x60>)
 8100cdc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8100cde:	4b05      	ldr	r3, [pc, #20]	; (8100cf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8100ce0:	681b      	ldr	r3, [r3, #0]
}
 8100ce2:	4618      	mov	r0, r3
 8100ce4:	3708      	adds	r7, #8
 8100ce6:	46bd      	mov	sp, r7
 8100ce8:	bd80      	pop	{r7, pc}
 8100cea:	bf00      	nop
 8100cec:	58024400 	.word	0x58024400
 8100cf0:	0810133c 	.word	0x0810133c
 8100cf4:	10000004 	.word	0x10000004
 8100cf8:	10000000 	.word	0x10000000

08100cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8100cfc:	b580      	push	{r7, lr}
 8100cfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8100d00:	f7ff ffca 	bl	8100c98 <HAL_RCC_GetHCLKFreq>
 8100d04:	4601      	mov	r1, r0
 8100d06:	4b06      	ldr	r3, [pc, #24]	; (8100d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8100d08:	69db      	ldr	r3, [r3, #28]
 8100d0a:	091b      	lsrs	r3, r3, #4
 8100d0c:	f003 0307 	and.w	r3, r3, #7
 8100d10:	4a04      	ldr	r2, [pc, #16]	; (8100d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8100d12:	5cd3      	ldrb	r3, [r2, r3]
 8100d14:	f003 031f 	and.w	r3, r3, #31
 8100d18:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8100d1c:	4618      	mov	r0, r3
 8100d1e:	bd80      	pop	{r7, pc}
 8100d20:	58024400 	.word	0x58024400
 8100d24:	0810133c 	.word	0x0810133c

08100d28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8100d28:	b480      	push	{r7}
 8100d2a:	b083      	sub	sp, #12
 8100d2c:	af00      	add	r7, sp, #0
 8100d2e:	6078      	str	r0, [r7, #4]
 8100d30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8100d32:	687b      	ldr	r3, [r7, #4]
 8100d34:	223f      	movs	r2, #63	; 0x3f
 8100d36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8100d38:	4b1a      	ldr	r3, [pc, #104]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d3a:	691b      	ldr	r3, [r3, #16]
 8100d3c:	f003 0207 	and.w	r2, r3, #7
 8100d40:	687b      	ldr	r3, [r7, #4]
 8100d42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8100d44:	4b17      	ldr	r3, [pc, #92]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d46:	699b      	ldr	r3, [r3, #24]
 8100d48:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8100d50:	4b14      	ldr	r3, [pc, #80]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d52:	699b      	ldr	r3, [r3, #24]
 8100d54:	f003 020f 	and.w	r2, r3, #15
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8100d5c:	4b11      	ldr	r3, [pc, #68]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d5e:	699b      	ldr	r3, [r3, #24]
 8100d60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8100d64:	687b      	ldr	r3, [r7, #4]
 8100d66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8100d68:	4b0e      	ldr	r3, [pc, #56]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d6a:	69db      	ldr	r3, [r3, #28]
 8100d6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8100d70:	687b      	ldr	r3, [r7, #4]
 8100d72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8100d74:	4b0b      	ldr	r3, [pc, #44]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d76:	69db      	ldr	r3, [r3, #28]
 8100d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8100d80:	4b08      	ldr	r3, [pc, #32]	; (8100da4 <HAL_RCC_GetClockConfig+0x7c>)
 8100d82:	6a1b      	ldr	r3, [r3, #32]
 8100d84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8100d88:	687b      	ldr	r3, [r7, #4]
 8100d8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8100d8c:	4b06      	ldr	r3, [pc, #24]	; (8100da8 <HAL_RCC_GetClockConfig+0x80>)
 8100d8e:	681b      	ldr	r3, [r3, #0]
 8100d90:	f003 020f 	and.w	r2, r3, #15
 8100d94:	683b      	ldr	r3, [r7, #0]
 8100d96:	601a      	str	r2, [r3, #0]
}
 8100d98:	bf00      	nop
 8100d9a:	370c      	adds	r7, #12
 8100d9c:	46bd      	mov	sp, r7
 8100d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da2:	4770      	bx	lr
 8100da4:	58024400 	.word	0x58024400
 8100da8:	52002000 	.word	0x52002000

08100dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8100dac:	b580      	push	{r7, lr}
 8100dae:	b082      	sub	sp, #8
 8100db0:	af00      	add	r7, sp, #0
 8100db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8100db4:	687b      	ldr	r3, [r7, #4]
 8100db6:	2b00      	cmp	r3, #0
 8100db8:	d101      	bne.n	8100dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8100dba:	2301      	movs	r3, #1
 8100dbc:	e049      	b.n	8100e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8100dbe:	687b      	ldr	r3, [r7, #4]
 8100dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8100dc4:	b2db      	uxtb	r3, r3
 8100dc6:	2b00      	cmp	r3, #0
 8100dc8:	d106      	bne.n	8100dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8100dca:	687b      	ldr	r3, [r7, #4]
 8100dcc:	2200      	movs	r2, #0
 8100dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8100dd2:	6878      	ldr	r0, [r7, #4]
 8100dd4:	f000 f841 	bl	8100e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	2202      	movs	r2, #2
 8100ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8100de0:	687b      	ldr	r3, [r7, #4]
 8100de2:	681a      	ldr	r2, [r3, #0]
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	3304      	adds	r3, #4
 8100de8:	4619      	mov	r1, r3
 8100dea:	4610      	mov	r0, r2
 8100dec:	f000 f9be 	bl	810116c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8100df0:	687b      	ldr	r3, [r7, #4]
 8100df2:	2201      	movs	r2, #1
 8100df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	2201      	movs	r2, #1
 8100dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	2201      	movs	r2, #1
 8100e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8100e08:	687b      	ldr	r3, [r7, #4]
 8100e0a:	2201      	movs	r2, #1
 8100e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8100e10:	687b      	ldr	r3, [r7, #4]
 8100e12:	2201      	movs	r2, #1
 8100e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	2201      	movs	r2, #1
 8100e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8100e20:	687b      	ldr	r3, [r7, #4]
 8100e22:	2201      	movs	r2, #1
 8100e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	2201      	movs	r2, #1
 8100e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8100e30:	687b      	ldr	r3, [r7, #4]
 8100e32:	2201      	movs	r2, #1
 8100e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	2201      	movs	r2, #1
 8100e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8100e40:	687b      	ldr	r3, [r7, #4]
 8100e42:	2201      	movs	r2, #1
 8100e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	2201      	movs	r2, #1
 8100e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8100e50:	2300      	movs	r3, #0
}
 8100e52:	4618      	mov	r0, r3
 8100e54:	3708      	adds	r7, #8
 8100e56:	46bd      	mov	sp, r7
 8100e58:	bd80      	pop	{r7, pc}

08100e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8100e5a:	b480      	push	{r7}
 8100e5c:	b083      	sub	sp, #12
 8100e5e:	af00      	add	r7, sp, #0
 8100e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8100e62:	bf00      	nop
 8100e64:	370c      	adds	r7, #12
 8100e66:	46bd      	mov	sp, r7
 8100e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e6c:	4770      	bx	lr
	...

08100e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8100e70:	b480      	push	{r7}
 8100e72:	b085      	sub	sp, #20
 8100e74:	af00      	add	r7, sp, #0
 8100e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8100e7e:	b2db      	uxtb	r3, r3
 8100e80:	2b01      	cmp	r3, #1
 8100e82:	d001      	beq.n	8100e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8100e84:	2301      	movs	r3, #1
 8100e86:	e021      	b.n	8100ecc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	2202      	movs	r2, #2
 8100e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	681b      	ldr	r3, [r3, #0]
 8100e94:	68da      	ldr	r2, [r3, #12]
 8100e96:	687b      	ldr	r3, [r7, #4]
 8100e98:	681b      	ldr	r3, [r3, #0]
 8100e9a:	f042 0201 	orr.w	r2, r2, #1
 8100e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	681b      	ldr	r3, [r3, #0]
 8100ea4:	689a      	ldr	r2, [r3, #8]
 8100ea6:	4b0c      	ldr	r3, [pc, #48]	; (8100ed8 <HAL_TIM_Base_Start_IT+0x68>)
 8100ea8:	4013      	ands	r3, r2
 8100eaa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100eac:	68fb      	ldr	r3, [r7, #12]
 8100eae:	2b06      	cmp	r3, #6
 8100eb0:	d00b      	beq.n	8100eca <HAL_TIM_Base_Start_IT+0x5a>
 8100eb2:	68fb      	ldr	r3, [r7, #12]
 8100eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8100eb8:	d007      	beq.n	8100eca <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8100eba:	687b      	ldr	r3, [r7, #4]
 8100ebc:	681b      	ldr	r3, [r3, #0]
 8100ebe:	681a      	ldr	r2, [r3, #0]
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	681b      	ldr	r3, [r3, #0]
 8100ec4:	f042 0201 	orr.w	r2, r2, #1
 8100ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8100eca:	2300      	movs	r3, #0
}
 8100ecc:	4618      	mov	r0, r3
 8100ece:	3714      	adds	r7, #20
 8100ed0:	46bd      	mov	sp, r7
 8100ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed6:	4770      	bx	lr
 8100ed8:	00010007 	.word	0x00010007

08100edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8100edc:	b580      	push	{r7, lr}
 8100ede:	b082      	sub	sp, #8
 8100ee0:	af00      	add	r7, sp, #0
 8100ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8100ee4:	687b      	ldr	r3, [r7, #4]
 8100ee6:	681b      	ldr	r3, [r3, #0]
 8100ee8:	691b      	ldr	r3, [r3, #16]
 8100eea:	f003 0302 	and.w	r3, r3, #2
 8100eee:	2b02      	cmp	r3, #2
 8100ef0:	d122      	bne.n	8100f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8100ef2:	687b      	ldr	r3, [r7, #4]
 8100ef4:	681b      	ldr	r3, [r3, #0]
 8100ef6:	68db      	ldr	r3, [r3, #12]
 8100ef8:	f003 0302 	and.w	r3, r3, #2
 8100efc:	2b02      	cmp	r3, #2
 8100efe:	d11b      	bne.n	8100f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	f06f 0202 	mvn.w	r2, #2
 8100f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	2201      	movs	r2, #1
 8100f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8100f10:	687b      	ldr	r3, [r7, #4]
 8100f12:	681b      	ldr	r3, [r3, #0]
 8100f14:	699b      	ldr	r3, [r3, #24]
 8100f16:	f003 0303 	and.w	r3, r3, #3
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	d003      	beq.n	8100f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8100f1e:	6878      	ldr	r0, [r7, #4]
 8100f20:	f000 f905 	bl	810112e <HAL_TIM_IC_CaptureCallback>
 8100f24:	e005      	b.n	8100f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8100f26:	6878      	ldr	r0, [r7, #4]
 8100f28:	f000 f8f7 	bl	810111a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100f2c:	6878      	ldr	r0, [r7, #4]
 8100f2e:	f000 f908 	bl	8101142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	2200      	movs	r2, #0
 8100f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	691b      	ldr	r3, [r3, #16]
 8100f3e:	f003 0304 	and.w	r3, r3, #4
 8100f42:	2b04      	cmp	r3, #4
 8100f44:	d122      	bne.n	8100f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	681b      	ldr	r3, [r3, #0]
 8100f4a:	68db      	ldr	r3, [r3, #12]
 8100f4c:	f003 0304 	and.w	r3, r3, #4
 8100f50:	2b04      	cmp	r3, #4
 8100f52:	d11b      	bne.n	8100f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	681b      	ldr	r3, [r3, #0]
 8100f58:	f06f 0204 	mvn.w	r2, #4
 8100f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8100f5e:	687b      	ldr	r3, [r7, #4]
 8100f60:	2202      	movs	r2, #2
 8100f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	681b      	ldr	r3, [r3, #0]
 8100f68:	699b      	ldr	r3, [r3, #24]
 8100f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8100f6e:	2b00      	cmp	r3, #0
 8100f70:	d003      	beq.n	8100f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8100f72:	6878      	ldr	r0, [r7, #4]
 8100f74:	f000 f8db 	bl	810112e <HAL_TIM_IC_CaptureCallback>
 8100f78:	e005      	b.n	8100f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8100f7a:	6878      	ldr	r0, [r7, #4]
 8100f7c:	f000 f8cd 	bl	810111a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100f80:	6878      	ldr	r0, [r7, #4]
 8100f82:	f000 f8de 	bl	8101142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	2200      	movs	r2, #0
 8100f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8100f8c:	687b      	ldr	r3, [r7, #4]
 8100f8e:	681b      	ldr	r3, [r3, #0]
 8100f90:	691b      	ldr	r3, [r3, #16]
 8100f92:	f003 0308 	and.w	r3, r3, #8
 8100f96:	2b08      	cmp	r3, #8
 8100f98:	d122      	bne.n	8100fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8100f9a:	687b      	ldr	r3, [r7, #4]
 8100f9c:	681b      	ldr	r3, [r3, #0]
 8100f9e:	68db      	ldr	r3, [r3, #12]
 8100fa0:	f003 0308 	and.w	r3, r3, #8
 8100fa4:	2b08      	cmp	r3, #8
 8100fa6:	d11b      	bne.n	8100fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8100fa8:	687b      	ldr	r3, [r7, #4]
 8100faa:	681b      	ldr	r3, [r3, #0]
 8100fac:	f06f 0208 	mvn.w	r2, #8
 8100fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	2204      	movs	r2, #4
 8100fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8100fb8:	687b      	ldr	r3, [r7, #4]
 8100fba:	681b      	ldr	r3, [r3, #0]
 8100fbc:	69db      	ldr	r3, [r3, #28]
 8100fbe:	f003 0303 	and.w	r3, r3, #3
 8100fc2:	2b00      	cmp	r3, #0
 8100fc4:	d003      	beq.n	8100fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8100fc6:	6878      	ldr	r0, [r7, #4]
 8100fc8:	f000 f8b1 	bl	810112e <HAL_TIM_IC_CaptureCallback>
 8100fcc:	e005      	b.n	8100fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8100fce:	6878      	ldr	r0, [r7, #4]
 8100fd0:	f000 f8a3 	bl	810111a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8100fd4:	6878      	ldr	r0, [r7, #4]
 8100fd6:	f000 f8b4 	bl	8101142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	2200      	movs	r2, #0
 8100fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8100fe0:	687b      	ldr	r3, [r7, #4]
 8100fe2:	681b      	ldr	r3, [r3, #0]
 8100fe4:	691b      	ldr	r3, [r3, #16]
 8100fe6:	f003 0310 	and.w	r3, r3, #16
 8100fea:	2b10      	cmp	r3, #16
 8100fec:	d122      	bne.n	8101034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	68db      	ldr	r3, [r3, #12]
 8100ff4:	f003 0310 	and.w	r3, r3, #16
 8100ff8:	2b10      	cmp	r3, #16
 8100ffa:	d11b      	bne.n	8101034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8100ffc:	687b      	ldr	r3, [r7, #4]
 8100ffe:	681b      	ldr	r3, [r3, #0]
 8101000:	f06f 0210 	mvn.w	r2, #16
 8101004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	2208      	movs	r2, #8
 810100a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810100c:	687b      	ldr	r3, [r7, #4]
 810100e:	681b      	ldr	r3, [r3, #0]
 8101010:	69db      	ldr	r3, [r3, #28]
 8101012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101016:	2b00      	cmp	r3, #0
 8101018:	d003      	beq.n	8101022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810101a:	6878      	ldr	r0, [r7, #4]
 810101c:	f000 f887 	bl	810112e <HAL_TIM_IC_CaptureCallback>
 8101020:	e005      	b.n	810102e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101022:	6878      	ldr	r0, [r7, #4]
 8101024:	f000 f879 	bl	810111a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101028:	6878      	ldr	r0, [r7, #4]
 810102a:	f000 f88a 	bl	8101142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810102e:	687b      	ldr	r3, [r7, #4]
 8101030:	2200      	movs	r2, #0
 8101032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8101034:	687b      	ldr	r3, [r7, #4]
 8101036:	681b      	ldr	r3, [r3, #0]
 8101038:	691b      	ldr	r3, [r3, #16]
 810103a:	f003 0301 	and.w	r3, r3, #1
 810103e:	2b01      	cmp	r3, #1
 8101040:	d10e      	bne.n	8101060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8101042:	687b      	ldr	r3, [r7, #4]
 8101044:	681b      	ldr	r3, [r3, #0]
 8101046:	68db      	ldr	r3, [r3, #12]
 8101048:	f003 0301 	and.w	r3, r3, #1
 810104c:	2b01      	cmp	r3, #1
 810104e:	d107      	bne.n	8101060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	681b      	ldr	r3, [r3, #0]
 8101054:	f06f 0201 	mvn.w	r2, #1
 8101058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810105a:	6878      	ldr	r0, [r7, #4]
 810105c:	f7ff f9b2 	bl	81003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	691b      	ldr	r3, [r3, #16]
 8101066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810106a:	2b80      	cmp	r3, #128	; 0x80
 810106c:	d10e      	bne.n	810108c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	68db      	ldr	r3, [r3, #12]
 8101074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101078:	2b80      	cmp	r3, #128	; 0x80
 810107a:	d107      	bne.n	810108c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	681b      	ldr	r3, [r3, #0]
 8101080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101086:	6878      	ldr	r0, [r7, #4]
 8101088:	f000 f914 	bl	81012b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	691b      	ldr	r3, [r3, #16]
 8101092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810109a:	d10e      	bne.n	81010ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	68db      	ldr	r3, [r3, #12]
 81010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81010a6:	2b80      	cmp	r3, #128	; 0x80
 81010a8:	d107      	bne.n	81010ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81010aa:	687b      	ldr	r3, [r7, #4]
 81010ac:	681b      	ldr	r3, [r3, #0]
 81010ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81010b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81010b4:	6878      	ldr	r0, [r7, #4]
 81010b6:	f000 f907 	bl	81012c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	691b      	ldr	r3, [r3, #16]
 81010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81010c4:	2b40      	cmp	r3, #64	; 0x40
 81010c6:	d10e      	bne.n	81010e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	68db      	ldr	r3, [r3, #12]
 81010ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81010d2:	2b40      	cmp	r3, #64	; 0x40
 81010d4:	d107      	bne.n	81010e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	681b      	ldr	r3, [r3, #0]
 81010da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81010de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81010e0:	6878      	ldr	r0, [r7, #4]
 81010e2:	f000 f838 	bl	8101156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81010e6:	687b      	ldr	r3, [r7, #4]
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	691b      	ldr	r3, [r3, #16]
 81010ec:	f003 0320 	and.w	r3, r3, #32
 81010f0:	2b20      	cmp	r3, #32
 81010f2:	d10e      	bne.n	8101112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	68db      	ldr	r3, [r3, #12]
 81010fa:	f003 0320 	and.w	r3, r3, #32
 81010fe:	2b20      	cmp	r3, #32
 8101100:	d107      	bne.n	8101112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	681b      	ldr	r3, [r3, #0]
 8101106:	f06f 0220 	mvn.w	r2, #32
 810110a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810110c:	6878      	ldr	r0, [r7, #4]
 810110e:	f000 f8c7 	bl	81012a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8101112:	bf00      	nop
 8101114:	3708      	adds	r7, #8
 8101116:	46bd      	mov	sp, r7
 8101118:	bd80      	pop	{r7, pc}

0810111a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810111a:	b480      	push	{r7}
 810111c:	b083      	sub	sp, #12
 810111e:	af00      	add	r7, sp, #0
 8101120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101122:	bf00      	nop
 8101124:	370c      	adds	r7, #12
 8101126:	46bd      	mov	sp, r7
 8101128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112c:	4770      	bx	lr

0810112e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810112e:	b480      	push	{r7}
 8101130:	b083      	sub	sp, #12
 8101132:	af00      	add	r7, sp, #0
 8101134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8101136:	bf00      	nop
 8101138:	370c      	adds	r7, #12
 810113a:	46bd      	mov	sp, r7
 810113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101140:	4770      	bx	lr

08101142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101142:	b480      	push	{r7}
 8101144:	b083      	sub	sp, #12
 8101146:	af00      	add	r7, sp, #0
 8101148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810114a:	bf00      	nop
 810114c:	370c      	adds	r7, #12
 810114e:	46bd      	mov	sp, r7
 8101150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101154:	4770      	bx	lr

08101156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101156:	b480      	push	{r7}
 8101158:	b083      	sub	sp, #12
 810115a:	af00      	add	r7, sp, #0
 810115c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810115e:	bf00      	nop
 8101160:	370c      	adds	r7, #12
 8101162:	46bd      	mov	sp, r7
 8101164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101168:	4770      	bx	lr
	...

0810116c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810116c:	b480      	push	{r7}
 810116e:	b085      	sub	sp, #20
 8101170:	af00      	add	r7, sp, #0
 8101172:	6078      	str	r0, [r7, #4]
 8101174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	681b      	ldr	r3, [r3, #0]
 810117a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810117c:	687b      	ldr	r3, [r7, #4]
 810117e:	4a40      	ldr	r2, [pc, #256]	; (8101280 <TIM_Base_SetConfig+0x114>)
 8101180:	4293      	cmp	r3, r2
 8101182:	d013      	beq.n	81011ac <TIM_Base_SetConfig+0x40>
 8101184:	687b      	ldr	r3, [r7, #4]
 8101186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810118a:	d00f      	beq.n	81011ac <TIM_Base_SetConfig+0x40>
 810118c:	687b      	ldr	r3, [r7, #4]
 810118e:	4a3d      	ldr	r2, [pc, #244]	; (8101284 <TIM_Base_SetConfig+0x118>)
 8101190:	4293      	cmp	r3, r2
 8101192:	d00b      	beq.n	81011ac <TIM_Base_SetConfig+0x40>
 8101194:	687b      	ldr	r3, [r7, #4]
 8101196:	4a3c      	ldr	r2, [pc, #240]	; (8101288 <TIM_Base_SetConfig+0x11c>)
 8101198:	4293      	cmp	r3, r2
 810119a:	d007      	beq.n	81011ac <TIM_Base_SetConfig+0x40>
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	4a3b      	ldr	r2, [pc, #236]	; (810128c <TIM_Base_SetConfig+0x120>)
 81011a0:	4293      	cmp	r3, r2
 81011a2:	d003      	beq.n	81011ac <TIM_Base_SetConfig+0x40>
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	4a3a      	ldr	r2, [pc, #232]	; (8101290 <TIM_Base_SetConfig+0x124>)
 81011a8:	4293      	cmp	r3, r2
 81011aa:	d108      	bne.n	81011be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81011ac:	68fb      	ldr	r3, [r7, #12]
 81011ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81011b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81011b4:	683b      	ldr	r3, [r7, #0]
 81011b6:	685b      	ldr	r3, [r3, #4]
 81011b8:	68fa      	ldr	r2, [r7, #12]
 81011ba:	4313      	orrs	r3, r2
 81011bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81011be:	687b      	ldr	r3, [r7, #4]
 81011c0:	4a2f      	ldr	r2, [pc, #188]	; (8101280 <TIM_Base_SetConfig+0x114>)
 81011c2:	4293      	cmp	r3, r2
 81011c4:	d01f      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011c6:	687b      	ldr	r3, [r7, #4]
 81011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81011cc:	d01b      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011ce:	687b      	ldr	r3, [r7, #4]
 81011d0:	4a2c      	ldr	r2, [pc, #176]	; (8101284 <TIM_Base_SetConfig+0x118>)
 81011d2:	4293      	cmp	r3, r2
 81011d4:	d017      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011d6:	687b      	ldr	r3, [r7, #4]
 81011d8:	4a2b      	ldr	r2, [pc, #172]	; (8101288 <TIM_Base_SetConfig+0x11c>)
 81011da:	4293      	cmp	r3, r2
 81011dc:	d013      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	4a2a      	ldr	r2, [pc, #168]	; (810128c <TIM_Base_SetConfig+0x120>)
 81011e2:	4293      	cmp	r3, r2
 81011e4:	d00f      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011e6:	687b      	ldr	r3, [r7, #4]
 81011e8:	4a29      	ldr	r2, [pc, #164]	; (8101290 <TIM_Base_SetConfig+0x124>)
 81011ea:	4293      	cmp	r3, r2
 81011ec:	d00b      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	4a28      	ldr	r2, [pc, #160]	; (8101294 <TIM_Base_SetConfig+0x128>)
 81011f2:	4293      	cmp	r3, r2
 81011f4:	d007      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	4a27      	ldr	r2, [pc, #156]	; (8101298 <TIM_Base_SetConfig+0x12c>)
 81011fa:	4293      	cmp	r3, r2
 81011fc:	d003      	beq.n	8101206 <TIM_Base_SetConfig+0x9a>
 81011fe:	687b      	ldr	r3, [r7, #4]
 8101200:	4a26      	ldr	r2, [pc, #152]	; (810129c <TIM_Base_SetConfig+0x130>)
 8101202:	4293      	cmp	r3, r2
 8101204:	d108      	bne.n	8101218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101206:	68fb      	ldr	r3, [r7, #12]
 8101208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810120c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810120e:	683b      	ldr	r3, [r7, #0]
 8101210:	68db      	ldr	r3, [r3, #12]
 8101212:	68fa      	ldr	r2, [r7, #12]
 8101214:	4313      	orrs	r3, r2
 8101216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101218:	68fb      	ldr	r3, [r7, #12]
 810121a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810121e:	683b      	ldr	r3, [r7, #0]
 8101220:	695b      	ldr	r3, [r3, #20]
 8101222:	4313      	orrs	r3, r2
 8101224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101226:	687b      	ldr	r3, [r7, #4]
 8101228:	68fa      	ldr	r2, [r7, #12]
 810122a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810122c:	683b      	ldr	r3, [r7, #0]
 810122e:	689a      	ldr	r2, [r3, #8]
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101234:	683b      	ldr	r3, [r7, #0]
 8101236:	681a      	ldr	r2, [r3, #0]
 8101238:	687b      	ldr	r3, [r7, #4]
 810123a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	4a10      	ldr	r2, [pc, #64]	; (8101280 <TIM_Base_SetConfig+0x114>)
 8101240:	4293      	cmp	r3, r2
 8101242:	d00f      	beq.n	8101264 <TIM_Base_SetConfig+0xf8>
 8101244:	687b      	ldr	r3, [r7, #4]
 8101246:	4a12      	ldr	r2, [pc, #72]	; (8101290 <TIM_Base_SetConfig+0x124>)
 8101248:	4293      	cmp	r3, r2
 810124a:	d00b      	beq.n	8101264 <TIM_Base_SetConfig+0xf8>
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	4a11      	ldr	r2, [pc, #68]	; (8101294 <TIM_Base_SetConfig+0x128>)
 8101250:	4293      	cmp	r3, r2
 8101252:	d007      	beq.n	8101264 <TIM_Base_SetConfig+0xf8>
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	4a10      	ldr	r2, [pc, #64]	; (8101298 <TIM_Base_SetConfig+0x12c>)
 8101258:	4293      	cmp	r3, r2
 810125a:	d003      	beq.n	8101264 <TIM_Base_SetConfig+0xf8>
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	4a0f      	ldr	r2, [pc, #60]	; (810129c <TIM_Base_SetConfig+0x130>)
 8101260:	4293      	cmp	r3, r2
 8101262:	d103      	bne.n	810126c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101264:	683b      	ldr	r3, [r7, #0]
 8101266:	691a      	ldr	r2, [r3, #16]
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	2201      	movs	r2, #1
 8101270:	615a      	str	r2, [r3, #20]
}
 8101272:	bf00      	nop
 8101274:	3714      	adds	r7, #20
 8101276:	46bd      	mov	sp, r7
 8101278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810127c:	4770      	bx	lr
 810127e:	bf00      	nop
 8101280:	40010000 	.word	0x40010000
 8101284:	40000400 	.word	0x40000400
 8101288:	40000800 	.word	0x40000800
 810128c:	40000c00 	.word	0x40000c00
 8101290:	40010400 	.word	0x40010400
 8101294:	40014000 	.word	0x40014000
 8101298:	40014400 	.word	0x40014400
 810129c:	40014800 	.word	0x40014800

081012a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81012a0:	b480      	push	{r7}
 81012a2:	b083      	sub	sp, #12
 81012a4:	af00      	add	r7, sp, #0
 81012a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81012a8:	bf00      	nop
 81012aa:	370c      	adds	r7, #12
 81012ac:	46bd      	mov	sp, r7
 81012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012b2:	4770      	bx	lr

081012b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81012b4:	b480      	push	{r7}
 81012b6:	b083      	sub	sp, #12
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81012bc:	bf00      	nop
 81012be:	370c      	adds	r7, #12
 81012c0:	46bd      	mov	sp, r7
 81012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c6:	4770      	bx	lr

081012c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81012c8:	b480      	push	{r7}
 81012ca:	b083      	sub	sp, #12
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81012d0:	bf00      	nop
 81012d2:	370c      	adds	r7, #12
 81012d4:	46bd      	mov	sp, r7
 81012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012da:	4770      	bx	lr

081012dc <__libc_init_array>:
 81012dc:	b570      	push	{r4, r5, r6, lr}
 81012de:	4e0d      	ldr	r6, [pc, #52]	; (8101314 <__libc_init_array+0x38>)
 81012e0:	4c0d      	ldr	r4, [pc, #52]	; (8101318 <__libc_init_array+0x3c>)
 81012e2:	1ba4      	subs	r4, r4, r6
 81012e4:	10a4      	asrs	r4, r4, #2
 81012e6:	2500      	movs	r5, #0
 81012e8:	42a5      	cmp	r5, r4
 81012ea:	d109      	bne.n	8101300 <__libc_init_array+0x24>
 81012ec:	4e0b      	ldr	r6, [pc, #44]	; (810131c <__libc_init_array+0x40>)
 81012ee:	4c0c      	ldr	r4, [pc, #48]	; (8101320 <__libc_init_array+0x44>)
 81012f0:	f000 f818 	bl	8101324 <_init>
 81012f4:	1ba4      	subs	r4, r4, r6
 81012f6:	10a4      	asrs	r4, r4, #2
 81012f8:	2500      	movs	r5, #0
 81012fa:	42a5      	cmp	r5, r4
 81012fc:	d105      	bne.n	810130a <__libc_init_array+0x2e>
 81012fe:	bd70      	pop	{r4, r5, r6, pc}
 8101300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8101304:	4798      	blx	r3
 8101306:	3501      	adds	r5, #1
 8101308:	e7ee      	b.n	81012e8 <__libc_init_array+0xc>
 810130a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810130e:	4798      	blx	r3
 8101310:	3501      	adds	r5, #1
 8101312:	e7f2      	b.n	81012fa <__libc_init_array+0x1e>
 8101314:	0810134c 	.word	0x0810134c
 8101318:	0810134c 	.word	0x0810134c
 810131c:	0810134c 	.word	0x0810134c
 8101320:	08101350 	.word	0x08101350

08101324 <_init>:
 8101324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101326:	bf00      	nop
 8101328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810132a:	bc08      	pop	{r3}
 810132c:	469e      	mov	lr, r3
 810132e:	4770      	bx	lr

08101330 <_fini>:
 8101330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101332:	bf00      	nop
 8101334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101336:	bc08      	pop	{r3}
 8101338:	469e      	mov	lr, r3
 810133a:	4770      	bx	lr
