
SampleSD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001511c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080153bc  080153bc  000253bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015578  08015578  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08015578  08015578  00025578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015580  08015580  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015580  08015580  00025580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015584  08015584  00025584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08015588  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00070f64  24000080  08015600  00030080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24070fe4  08015600  00030fe4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004434e  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006da0  00000000  00000000  000743f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b0  00000000  00000000  0007b198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020f8  00000000  00000000  0007d548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00048a72  00000000  00000000  0007f640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025864  00000000  00000000  000c80b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001c672e  00000000  00000000  000ed916  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002b4044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009824  00000000  00000000  002b40c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080153a4 	.word	0x080153a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	080153a4 	.word	0x080153a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007ce:	4a31      	ldr	r2, [pc, #196]	; (8000894 <MX_ADC3_Init+0xe0>)
 80007d0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007d8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC3_Init+0xdc>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC3_Init+0xdc>)
 8000800:	2200      	movs	r2, #0
 8000802:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_ADC3_Init+0xdc>)
 8000806:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ADC3_Init+0xdc>)
 800080e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC3_Init+0xdc>)
 8000816:	2203      	movs	r2, #3
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC3_Init+0xdc>)
 800081c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC3_Init+0xdc>)
 8000824:	2200      	movs	r2, #0
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC3_Init+0xdc>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC3_Init+0xdc>)
 8000832:	f001 fde1 	bl	80023f8 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 fde2 	bl	8001404 <Error_Handler>
  }

  if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED)!= HAL_OK)
 8000840:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000844:	2100      	movs	r1, #0
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_ADC3_Init+0xdc>)
 8000848:	f003 f94c 	bl	8003ae4 <HAL_ADCEx_Calibration_Start>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC3_Init+0xa2>
  {
	  Error_Handler();
 8000852:	f000 fdd7 	bl	8001404 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000856:	2301      	movs	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2306      	movs	r3, #6
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 800085e:	2304      	movs	r3, #4
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC3_Init+0xdc>)
 800087a:	f002 fad1 	bl	8002e20 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000884:	f000 fdbe 	bl	8001404 <Error_Handler>
  }

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24064b04 	.word	0x24064b04
 8000894:	58026000 	.word	0x58026000

08000898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a31      	ldr	r2, [pc, #196]	; (800096c <HAL_ADC_MspInit+0xd4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d15c      	bne.n	8000964 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a28      	ldr	r2, [pc, #160]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80008e6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80008ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80008ee:	f001 fb15 	bl	8001f1c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <HAL_ADC_MspInit+0xe0>)
 80008f6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 80008fa:	2273      	movs	r2, #115	; 0x73
 80008fc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800090c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000910:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000918:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800091c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000920:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000928:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800092c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000930:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000938:	480e      	ldr	r0, [pc, #56]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800093a:	f003 fac1 	bl	8003ec0 <HAL_DMA_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000944:	f000 fd5e 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800094c:	64da      	str	r2, [r3, #76]	; 0x4c
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2105      	movs	r1, #5
 8000958:	207f      	movs	r0, #127	; 0x7f
 800095a:	f003 fa11 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800095e:	207f      	movs	r0, #127	; 0x7f
 8000960:	f003 fa28 	bl	8003db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58026000 	.word	0x58026000
 8000970:	58024400 	.word	0x58024400
 8000974:	24064a8c 	.word	0x24064a8c
 8000978:	40020010 	.word	0x40020010

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_DMA_Init+0x5c>)
 8000984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <MX_DMA_Init+0x5c>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_DMA_Init+0x5c>)
 8000994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2105      	movs	r1, #5
 80009a4:	200b      	movs	r0, #11
 80009a6:	f003 f9eb 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009aa:	200b      	movs	r0, #11
 80009ac:	f003 fa02 	bl	8003db4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2105      	movs	r1, #5
 80009b4:	200c      	movs	r0, #12
 80009b6:	f003 f9e3 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009ba:	200c      	movs	r0, #12
 80009bc:	f003 f9fa 	bl	8003db4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2105      	movs	r1, #5
 80009c4:	200d      	movs	r0, #13
 80009c6:	f003 f9db 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80009ca:	200d      	movs	r0, #13
 80009cc:	f003 f9f2 	bl	8003db4 <HAL_NVIC_EnableIRQ>

}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	58024400 	.word	0x58024400

080009dc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80009ee:	2320      	movs	r3, #32
 80009f0:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80009f6:	e00b      	b.n	8000a10 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80009f8:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <SCB_InvalidateDCache_by_Addr+0x50>)
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4413      	add	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	dcf0      	bgt.n	80009f8 <SCB_InvalidateDCache_by_Addr+0x1c>
 8000a16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a1a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8000a1e:	bf00      	nop
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <vApplicationGetIdleTaskMemory+0x30>)
 8000a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000a4e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	240080a8 	.word	0x240080a8
 8000a60:	240080fc 	.word	0x240080fc

08000a64 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8000a64:	b5b0      	push	{r4, r5, r7, lr}
 8000a66:	b092      	sub	sp, #72	; 0x48
 8000a68:	af00      	add	r7, sp, #0

	osThreadDef(prod_task, vProducer, osPriorityHigh, 0, 9216 );
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_FREERTOS_Init+0x7c>)
 8000a6c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000a70:	461d      	mov	r5, r3
 8000a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	prodTaskHandle = osThreadCreate(osThread(prod_task), NULL);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f010 fc19 	bl	80112bc <osThreadCreate>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_FREERTOS_Init+0x80>)
 8000a8e:	601a      	str	r2, [r3, #0]

	osThreadDef(con_task, vConsumer, osPriorityHigh, 0, 10752 );
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_FREERTOS_Init+0x84>)
 8000a92:	f107 0410 	add.w	r4, r7, #16
 8000a96:	461d      	mov	r5, r3
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	conTaskHandle = osThreadCreate(osThread(con_task), NULL);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f010 fc06 	bl	80112bc <osThreadCreate>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_FREERTOS_Init+0x88>)
 8000ab4:	601a      	str	r2, [r3, #0]

	osMailQDef(mail, MAIL_SIZE, ADC_DATA);
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	60bb      	str	r3, [r7, #8]
    adcDataMailId = osMailCreate(osMailQ(mail), NULL);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f010 ff76 	bl	80119bc <osMailCreate>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_FREERTOS_Init+0x8c>)
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	3748      	adds	r7, #72	; 0x48
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	080153c8 	.word	0x080153c8
 8000ae4:	24064b6c 	.word	0x24064b6c
 8000ae8:	080153f0 	.word	0x080153f0
 8000aec:	24064b68 	.word	0x24064b68
 8000af0:	2406dc2c 	.word	0x2406dc2c

08000af4 <mountSDCard>:

void mountSDCard(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  if(f_mount(&FatFSInstance, SDPath, 1)==FR_OK)
 8000af8:	2201      	movs	r2, #1
 8000afa:	4915      	ldr	r1, [pc, #84]	; (8000b50 <mountSDCard+0x5c>)
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <mountSDCard+0x60>)
 8000afe:	f00f fbc9 	bl	8010294 <f_mount>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d120      	bne.n	8000b4a <mountSDCard+0x56>
  {
	  LED1_ON();
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0e:	4812      	ldr	r0, [pc, #72]	; (8000b58 <mountSDCard+0x64>)
 8000b10:	f006 f9c0 	bl	8006e94 <HAL_GPIO_WritePin>
	  if(f_open(&wavFile, WAV_FILE, FA_WRITE|FA_CREATE_ALWAYS) == FR_OK)
 8000b14:	220a      	movs	r2, #10
 8000b16:	4911      	ldr	r1, [pc, #68]	; (8000b5c <mountSDCard+0x68>)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <mountSDCard+0x6c>)
 8000b1a:	f00f fc1f 	bl	801035c <f_open>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d112      	bne.n	8000b4a <mountSDCard+0x56>
	  {
		  // Initialise the WAV Header
		  InitialiseWavEncoder(AUDIO_FREQ, wavHeaderBuff, &WaveFormat);
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <mountSDCard+0x70>)
 8000b26:	4910      	ldr	r1, [pc, #64]	; (8000b68 <mountSDCard+0x74>)
 8000b28:	4810      	ldr	r0, [pc, #64]	; (8000b6c <mountSDCard+0x78>)
 8000b2a:	f001 f825 	bl	8001b78 <InitialiseWavEncoder>
		  // Write header file
		  wav_write_result = f_write(&wavFile, wavHeaderBuff, 44,(void*)&bytes_written);
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <mountSDCard+0x7c>)
 8000b30:	222c      	movs	r2, #44	; 0x2c
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <mountSDCard+0x74>)
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <mountSDCard+0x6c>)
 8000b36:	f00f fde4 	bl	8010702 <f_write>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <mountSDCard+0x80>)
 8000b40:	701a      	strb	r2, [r3, #0]
		  // return size of file
		  file_size = bytes_written;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <mountSDCard+0x7c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <mountSDCard+0x84>)
 8000b48:	6013      	str	r3, [r2, #0]
	  }
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2406ef34 	.word	0x2406ef34
 8000b54:	24068bac 	.word	0x24068bac
 8000b58:	58022000 	.word	0x58022000
 8000b5c:	2406ec74 	.word	0x2406ec74
 8000b60:	2406dc44 	.word	0x2406dc44
 8000b64:	2406637c 	.word	0x2406637c
 8000b68:	24069be4 	.word	0x24069be4
 8000b6c:	0007a120 	.word	0x0007a120
 8000b70:	240080a4 	.word	0x240080a4
 8000b74:	2406dc34 	.word	0x2406dc34
 8000b78:	2406ec88 	.word	0x2406ec88

08000b7c <setFileName>:

void setFileName(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	// use RTC and waypoint index to write file name here
	waypoint_index++;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <setFileName+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <setFileName+0x20>)
 8000b88:	6013      	str	r3, [r2, #0]

	//TODO
	// format filename to include HHMMSSDDMMYYWaypoint.WAV
	snprintf(WAV_FILE, sizeof(WAV_FILE), "%d.wav", waypoint_index);
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <setFileName+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <setFileName+0x24>)
 8000b90:	2108      	movs	r1, #8
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <setFileName+0x28>)
 8000b94:	f013 fff6 	bl	8014b84 <sniprintf>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	240080a0 	.word	0x240080a0
 8000ba0:	0801540c 	.word	0x0801540c
 8000ba4:	2406ec74 	.word	0x2406ec74

08000ba8 <startADC>:

void startADC(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc_values, ADC_BUFFER_LENGTH) != HAL_OK)
 8000bac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb0:	4905      	ldr	r1, [pc, #20]	; (8000bc8 <startADC+0x20>)
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <startADC+0x24>)
 8000bb4:	f001 fdc0 	bl	8002738 <HAL_ADC_Start_DMA>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <startADC+0x1a>
	{
		//Error_Handler();
		Error();
 8000bbe:	f000 f835 	bl	8000c2c <Error>
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	240000a0 	.word	0x240000a0
 8000bcc:	24064b04 	.word	0x24064b04

08000bd0 <stopADC>:

void stopADC(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	if(HAL_ADC_Stop_DMA(&hadc3) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <stopADC+0x18>)
 8000bd6:	f001 fe73 	bl	80028c0 <HAL_ADC_Stop_DMA>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <stopADC+0x14>
	{
		Error_Handler();
 8000be0:	f000 fc10 	bl	8001404 <Error_Handler>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24064b04 	.word	0x24064b04

08000bec <vProducer>:

void vProducer(void const * argument)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6178      	str	r0, [r7, #20]
	for(;;)
	{
		prodEvent = osSignalWait(0x01, osWaitForever);
 8000bf4:	4c0c      	ldr	r4, [pc, #48]	; (8000c28 <vProducer+0x3c>)
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f010 fbe8 	bl	80113d4 <osSignalWait>
 8000c04:	463b      	mov	r3, r7
 8000c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(prodEvent.status == osEventSignal)
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <vProducer+0x3c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d1ee      	bne.n	8000bf4 <vProducer+0x8>
		{
			startADC();
 8000c16:	f7ff ffc7 	bl	8000ba8 <startADC>
			mountSDCard();
 8000c1a:	f7ff ff6b 	bl	8000af4 <mountSDCard>
			osThreadSuspend(NULL);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f011 f801 	bl	8011c26 <osThreadSuspend>
		prodEvent = osSignalWait(0x01, osWaitForever);
 8000c24:	e7e6      	b.n	8000bf4 <vProducer+0x8>
 8000c26:	bf00      	nop
 8000c28:	2406dc38 	.word	0x2406dc38

08000c2c <Error>:
}



void Error(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	LED4_ON();
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c36:	4802      	ldr	r0, [pc, #8]	; (8000c40 <Error+0x14>)
 8000c38:	f006 f92c 	bl	8006e94 <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58022000 	.word	0x58022000

08000c44 <vConsumer>:

void vConsumer(void const * argument)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6178      	str	r0, [r7, #20]
	ADC_DATA *rx_data;
	for(;;)
	{
		writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <vConsumer+0xf4>)
 8000c4e:	6819      	ldr	r1, [r3, #0]
 8000c50:	4c3a      	ldr	r4, [pc, #232]	; (8000d3c <vConsumer+0xf8>)
 8000c52:	463b      	mov	r3, r7
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f010 ff5b 	bl	8011b14 <osMailGet>
 8000c5e:	463b      	mov	r3, r7
 8000c60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(writeEvent.status == osEventMail)
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <vConsumer+0xf8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b20      	cmp	r3, #32
 8000c6e:	d12a      	bne.n	8000cc6 <vConsumer+0x82>
		{
			LED4_ON();
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c76:	4832      	ldr	r0, [pc, #200]	; (8000d40 <vConsumer+0xfc>)
 8000c78:	f006 f90c 	bl	8006e94 <HAL_GPIO_WritePin>
			// write Data to SD
			 rx_data =  writeEvent.value.p;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <vConsumer+0xf8>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	61fb      	str	r3, [r7, #28]
			 memcpy(sd_buff, rx_data->data, sizeof(sd_buff));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482e      	ldr	r0, [pc, #184]	; (8000d44 <vConsumer+0x100>)
 8000c8c:	f013 ff66 	bl	8014b5c <memcpy>
			 if(wav_write_result == FR_OK)
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <vConsumer+0x104>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d110      	bne.n	8000cba <vConsumer+0x76>
			 {
				 if( f_write(&wavFile, (uint8_t*)sd_buff, sizeof(sd_buff), (void*)&bytes_written) == FR_OK)
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <vConsumer+0x108>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9e:	4929      	ldr	r1, [pc, #164]	; (8000d44 <vConsumer+0x100>)
 8000ca0:	482b      	ldr	r0, [pc, #172]	; (8000d50 <vConsumer+0x10c>)
 8000ca2:	f00f fd2e 	bl	8010702 <f_write>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d106      	bne.n	8000cba <vConsumer+0x76>
					{
						file_size+=bytes_written;
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <vConsumer+0x110>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <vConsumer+0x108>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <vConsumer+0x110>)
 8000cb8:	6013      	str	r3, [r2, #0]
					}
			 }
		//  computeFFT();
			osMailFree(adcDataMailId, rx_data);
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <vConsumer+0xf4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	69f9      	ldr	r1, [r7, #28]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f010 ff9b 	bl	8011bfc <osMailFree>
		}
		consEvent = osSignalWait(0x02, 0);
 8000cc6:	4c24      	ldr	r4, [pc, #144]	; (8000d58 <vConsumer+0x114>)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f010 fb80 	bl	80113d4 <osSignalWait>
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(consEvent.status == osEventSignal)
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <vConsumer+0x114>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d1b2      	bne.n	8000c4c <vConsumer+0x8>
		{
			stopADC();
 8000ce6:	f7ff ff73 	bl	8000bd0 <stopADC>
			if(f_lseek(&wavFile, 0) == FR_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4818      	ldr	r0, [pc, #96]	; (8000d50 <vConsumer+0x10c>)
 8000cee:	f00f ff83 	bl	8010bf8 <f_lseek>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1a9      	bne.n	8000c4c <vConsumer+0x8>
			{
				WavHeaderUpdate(wavHeaderBuff, &WaveFormat, file_size);
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <vConsumer+0x110>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4917      	ldr	r1, [pc, #92]	; (8000d5c <vConsumer+0x118>)
 8000d00:	4817      	ldr	r0, [pc, #92]	; (8000d60 <vConsumer+0x11c>)
 8000d02:	f000 fef7 	bl	8001af4 <WavHeaderUpdate>
				// Update wav File
				if(f_write(&wavFile, wavHeaderBuff, sizeof(WaveFormat), (void*)&bytes_written)==FR_OK)
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <vConsumer+0x108>)
 8000d08:	222c      	movs	r2, #44	; 0x2c
 8000d0a:	4915      	ldr	r1, [pc, #84]	; (8000d60 <vConsumer+0x11c>)
 8000d0c:	4810      	ldr	r0, [pc, #64]	; (8000d50 <vConsumer+0x10c>)
 8000d0e:	f00f fcf8 	bl	8010702 <f_write>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d199      	bne.n	8000c4c <vConsumer+0x8>
				{
			  	// close file
				  f_close(&wavFile);
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <vConsumer+0x10c>)
 8000d1a:	f00f ff3e 	bl	8010b9a <f_close>
					LED4_OFF();
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <vConsumer+0xfc>)
 8000d26:	f006 f8b5 	bl	8006e94 <HAL_GPIO_WritePin>
					osThreadResume(prodTaskHandle);
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <vConsumer+0x120>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f010 ff86 	bl	8011c40 <osThreadResume>
		writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000d34:	e78a      	b.n	8000c4c <vConsumer+0x8>
 8000d36:	bf00      	nop
 8000d38:	2406dc2c 	.word	0x2406dc2c
 8000d3c:	2406ec7c 	.word	0x2406ec7c
 8000d40:	58022000 	.word	0x58022000
 8000d44:	24069c28 	.word	0x24069c28
 8000d48:	2406dc34 	.word	0x2406dc34
 8000d4c:	240080a4 	.word	0x240080a4
 8000d50:	2406dc44 	.word	0x2406dc44
 8000d54:	2406ec88 	.word	0x2406ec88
 8000d58:	2406ec8c 	.word	0x2406ec8c
 8000d5c:	2406637c 	.word	0x2406637c
 8000d60:	24069be4 	.word	0x24069be4
 8000d64:	24064b6c 	.word	0x24064b6c

08000d68 <HAL_ADC_ConvHalfCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	SCB_InvalidateDCache_by_Addr((uint32_t*)&adc_values[0], ADC_BUFFER_LENGTH);
 8000d70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d74:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000d76:	f7ff fe31 	bl	80009dc <SCB_InvalidateDCache_by_Addr>
	 prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d82:	4618      	mov	r0, r3
 8000d84:	f010 fe72 	bl	8011a6c <osMailAlloc>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000d8c:	601a      	str	r2, [r3, #0]
	 memcpy(prod_data->data, adc_values, sizeof(adc_values)/2);
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d96:	490f      	ldr	r1, [pc, #60]	; (8000dd4 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f013 fedf 	bl	8014b5c <memcpy>
	 mail_retval = osMailPut(adcDataMailId, prod_data);
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f010 fe75 	bl	8011a98 <osMailPut>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
	 if( mail_retval != osOK)
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_ADC_ConvHalfCpltCallback+0x62>
	 {
		  LED2_ON();
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000dc6:	f006 f865 	bl	8006e94 <HAL_GPIO_WritePin>
	 }



}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	240000a0 	.word	0x240000a0
 8000dd8:	2406dc2c 	.word	0x2406dc2c
 8000ddc:	2406dc30 	.word	0x2406dc30
 8000de0:	2406dc28 	.word	0x2406dc28
 8000de4:	58022000 	.word	0x58022000

08000de8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]


  SCB_InvalidateDCache_by_Addr((uint32_t *) &adc_values[ADC_BUFFER_LENGTH/2], ADC_BUFFER_LENGTH);
 8000df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df4:	4817      	ldr	r0, [pc, #92]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000df6:	f7ff fdf1 	bl	80009dc <SCB_InvalidateDCache_by_Addr>
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x70>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8000e02:	4618      	mov	r0, r3
 8000e04:	f010 fe32 	bl	8011a6c <osMailAlloc>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_ADC_ConvCpltCallback+0x74>)
 8000e0c:	601a      	str	r2, [r3, #0]
  memcpy(prod_data->data, adc_values + ADC_BUFFER_LENGTH/2, sizeof(adc_values)/2);
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_ADC_ConvCpltCallback+0x74>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f013 fe9e 	bl	8014b5c <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_ADC_ConvCpltCallback+0x74>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f010 fe34 	bl	8011a98 <osMailPut>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_ADC_ConvCpltCallback+0x78>)
 8000e36:	601a      	str	r2, [r3, #0]
  if( mail_retval != osOK)
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_ADC_ConvCpltCallback+0x78>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <HAL_ADC_ConvCpltCallback+0x64>
  {
	  LED2_ON();
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e48:	f006 f824 	bl	8006e94 <HAL_GPIO_WritePin>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	240040a0 	.word	0x240040a0
 8000e58:	2406dc2c 	.word	0x2406dc2c
 8000e5c:	2406dc30 	.word	0x2406dc30
 8000e60:	2406dc28 	.word	0x2406dc28
 8000e64:	58022000 	.word	0x58022000

08000e68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART8)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_UART_RxCpltCallback+0x48>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d115      	bne.n	8000ea6 <HAL_UART_RxCpltCallback+0x3e>
	{
		if(uart_rx_buffer == 0x31)
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_RxCpltCallback+0x4c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b31      	cmp	r3, #49	; 0x31
 8000e80:	d107      	bne.n	8000e92 <HAL_UART_RxCpltCallback+0x2a>
		{
			setFileName();
 8000e82:	f7ff fe7b 	bl	8000b7c <setFileName>
			osSignalSet(prodTaskHandle, 0x01);
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_UART_RxCpltCallback+0x50>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f010 fa61 	bl	8011354 <osSignalSet>
		}
		if(uart_rx_buffer == 0x32)
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_UART_RxCpltCallback+0x4c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b32      	cmp	r3, #50	; 0x32
 8000e98:	d105      	bne.n	8000ea6 <HAL_UART_RxCpltCallback+0x3e>
		{
			osSignalSet(conTaskHandle, 0x02);
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_UART_RxCpltCallback+0x54>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f010 fa57 	bl	8011354 <osSignalSet>
		}
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40007c00 	.word	0x40007c00
 8000eb4:	2406ec98 	.word	0x2406ec98
 8000eb8:	24064b6c 	.word	0x24064b6c
 8000ebc:	24064b68 	.word	0x24064b68

08000ec0 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b51      	ldr	r3, [pc, #324]	; (800101c <MX_GPIO_Init+0x15c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a4f      	ldr	r2, [pc, #316]	; (800101c <MX_GPIO_Init+0x15c>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b4d      	ldr	r3, [pc, #308]	; (800101c <MX_GPIO_Init+0x15c>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <MX_GPIO_Init+0x15c>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	4a48      	ldr	r2, [pc, #288]	; (800101c <MX_GPIO_Init+0x15c>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f04:	4b45      	ldr	r3, [pc, #276]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4a40      	ldr	r2, [pc, #256]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a39      	ldr	r2, [pc, #228]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	4a31      	ldr	r2, [pc, #196]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <MX_GPIO_Init+0x15c>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	482b      	ldr	r0, [pc, #172]	; (8001020 <MX_GPIO_Init+0x160>)
 8000f74:	f005 ff8e 	bl	8006e94 <HAL_GPIO_WritePin>
   GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4823      	ldr	r0, [pc, #140]	; (8001020 <MX_GPIO_Init+0x160>)
 8000f92:	f005 fdcf 	bl	8006b34 <HAL_GPIO_Init>

   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4820      	ldr	r0, [pc, #128]	; (8001020 <MX_GPIO_Init+0x160>)
 8000f9e:	f005 ff79 	bl	8006e94 <HAL_GPIO_WritePin>
   GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4819      	ldr	r0, [pc, #100]	; (8001020 <MX_GPIO_Init+0x160>)
 8000fbc:	f005 fdba 	bl	8006b34 <HAL_GPIO_Init>

   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc6:	4816      	ldr	r0, [pc, #88]	; (8001020 <MX_GPIO_Init+0x160>)
 8000fc8:	f005 ff64 	bl	8006e94 <HAL_GPIO_WritePin>
   GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd0:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_GPIO_Init+0x160>)
 8000fe6:	f005 fda5 	bl	8006b34 <HAL_GPIO_Init>


   HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <MX_GPIO_Init+0x160>)
 8000ff2:	f005 ff4f 	bl	8006e94 <HAL_GPIO_WritePin>
   GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffa:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_GPIO_Init+0x160>)
 8001010:	f005 fd90 	bl	8006b34 <HAL_GPIO_Init>

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024400 	.word	0x58024400
 8001020:	58022000 	.word	0x58022000

08001024 <SCB_EnableICache>:
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800102c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <SCB_EnableICache+0x3c>)
 8001032:	2200      	movs	r2, #0
 8001034:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800103c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <SCB_EnableICache+0x3c>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <SCB_EnableICache+0x3c>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800104c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001050:	f3bf 8f6f 	isb	sy
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <SCB_EnableDCache>:
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <SCB_EnableDCache+0x7c>)
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001072:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <SCB_EnableDCache+0x7c>)
 8001078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800107c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0b5b      	lsrs	r3, r3, #13
 8001082:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001086:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001090:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	015a      	lsls	r2, r3, #5
 8001096:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800109a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010a0:	490f      	ldr	r1, [pc, #60]	; (80010e0 <SCB_EnableDCache+0x7c>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	60fa      	str	r2, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e5      	bne.n	8001088 <SCB_EnableDCache+0x24>
 80010bc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <SCB_EnableDCache+0x7c>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <SCB_EnableDCache+0x7c>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6153      	str	r3, [r2, #20]
 80010cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d0:	f3bf 8f6f 	isb	sy
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010ea:	f000 f94b 	bl	8001384 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010ee:	f7ff ff99 	bl	8001024 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010f2:	f7ff ffb7 	bl	8001064 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80010f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80010fc:	bf00      	nop
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <main+0xb0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <main+0x30>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1e5a      	subs	r2, r3, #1
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dcf4      	bgt.n	80010fe <main+0x1a>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fe78 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f83e 	bl	8001198 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <main+0xb0>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <main+0xb0>)
 8001124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <main+0xb0>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800113a:	2000      	movs	r0, #0
 800113c:	f005 fec4 	bl	8006ec8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f005 feda 	bl	8006efc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114c:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800114e:	bf00      	nop
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <main+0xb0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d104      	bne.n	8001166 <main+0x82>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dcf4      	bgt.n	8001150 <main+0x6c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f7ff feab 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 800116a:	f7ff fc07 	bl	800097c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800116e:	f000 f951 	bl	8001414 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001172:	f00d f801 	bl	800e178 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001176:	f000 fb11 	bl	800179c <MX_TIM3_Init>
  MX_UART8_Init();
 800117a:	f000 fbb7 	bl	80018ec <MX_UART8_Init>
  MX_ADC3_Init();
 800117e:	f7ff fb19 	bl	80007b4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  Timer_Start();
 8001182:	f000 f8f1 	bl	8001368 <Timer_Start>
  // Init UART RX
  Init_UART_RX();
 8001186:	f000 f8dd 	bl	8001344 <Init_UART_RX>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800118a:	f7ff fc6b 	bl	8000a64 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800118e:	f010 f872 	bl	8011276 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001192:	e7fe      	b.n	8001192 <main+0xae>
 8001194:	58024400 	.word	0x58024400

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0cc      	sub	sp, #304	; 0x130
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011a2:	224c      	movs	r2, #76	; 0x4c
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f013 fce3 	bl	8014b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011b0:	2220      	movs	r2, #32
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f013 fcdc 	bl	8014b72 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	23c0      	movs	r3, #192	; 0xc0
 80011c0:	461a      	mov	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f013 fcd5 	bl	8014b72 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011c8:	2004      	movs	r0, #4
 80011ca:	f005 feab 	bl	8006f24 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <SystemClock_Config+0x19c>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a56      	ldr	r2, [pc, #344]	; (8001334 <SystemClock_Config+0x19c>)
 80011da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b54      	ldr	r3, [pc, #336]	; (8001334 <SystemClock_Config+0x19c>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80011e8:	463b      	mov	r3, r7
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	4b52      	ldr	r3, [pc, #328]	; (8001338 <SystemClock_Config+0x1a0>)
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <SystemClock_Config+0x1a0>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011f8:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <SystemClock_Config+0x1a0>)
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	f003 0201 	and.w	r2, r3, #1
 8001200:	463b      	mov	r3, r7
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	463b      	mov	r3, r7
 8001206:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001208:	bf00      	nop
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <SystemClock_Config+0x19c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001216:	d1f8      	bne.n	800120a <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001218:	4b48      	ldr	r3, [pc, #288]	; (800133c <SystemClock_Config+0x1a4>)
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f023 0303 	bic.w	r3, r3, #3
 8001220:	4a46      	ldr	r2, [pc, #280]	; (800133c <SystemClock_Config+0x1a4>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001260:	230c      	movs	r3, #12
 8001262:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001276:	4618      	mov	r0, r3
 8001278:	f005 feae 	bl	8006fd8 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001282:	f000 f8bf 	bl	8001404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	233f      	movs	r3, #63	; 0x3f
 8001288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2303      	movs	r3, #3
 800128e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001298:	2308      	movs	r3, #8
 800129a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800129e:	2340      	movs	r3, #64	; 0x40
 80012a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012a4:	2340      	movs	r3, #64	; 0x40
 80012a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fa9a 	bl	80077f8 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x136>
  {
    Error_Handler();
 80012ca:	f000 f89b 	bl	8001404 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SDMMC
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <SystemClock_Config+0x1a8>)
 80012d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2202      	movs	r2, #2
 80012d8:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	220c      	movs	r2, #12
 80012de:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2201      	movs	r2, #1
 80012e4:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2202      	movs	r2, #2
 80012ea:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2202      	movs	r2, #2
 80012f0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	22c0      	movs	r2, #192	; 0xc0
 80012f6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2220      	movs	r2, #32
 80012fc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fe32 	bl	8007f84 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x192>
  {
    Error_Handler();
 8001326:	f000 f86d 	bl	8001404 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	58024800 	.word	0x58024800
 8001338:	58000400 	.word	0x58000400
 800133c:	58024400 	.word	0x58024400
 8001340:	00090002 	.word	0x00090002

08001344 <Init_UART_RX>:

/* USER CODE BEGIN 4 */

void Init_UART_RX(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_DMA(&huart8, &uart_rx_buffer, 1) != HAL_OK )
 8001348:	2201      	movs	r2, #1
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <Init_UART_RX+0x1c>)
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <Init_UART_RX+0x20>)
 800134e:	f00a fddb 	bl	800bf08 <HAL_UART_Receive_DMA>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <Init_UART_RX+0x18>
	{
		Error_Handler();
 8001358:	f000 f854 	bl	8001404 <Error_Handler>
	}
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2406ec98 	.word	0x2406ec98
 8001364:	2406eea0 	.word	0x2406eea0

08001368 <Timer_Start>:

void Timer_Start(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <Timer_Start+0x18>)
 800136e:	f00a f921 	bl	800b5b4 <HAL_TIM_Base_Start>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <Timer_Start+0x14>
	{
		Error_Handler();
 8001378:	f000 f844 	bl	8001404 <Error_Handler>
	}
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2406ed64 	.word	0x2406ed64

08001384 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001396:	f002 fd1b 	bl	8003dd0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800139a:	2301      	movs	r3, #1
 800139c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800139e:	2300      	movs	r3, #0
 80013a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80013a2:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80013a6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80013a8:	2312      	movs	r3, #18
 80013aa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013b4:	2303      	movs	r3, #3
 80013b6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013c8:	463b      	mov	r3, r7
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fd34 	bl	8003e38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013d0:	2004      	movs	r0, #4
 80013d2:	f002 fd13 	bl	8003dfc <HAL_MPU_Enable>

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f2:	f000 fd45 	bl	8001e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40001000 	.word	0x40001000

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  // LED3_ON();
  /* USER CODE END Error_Handler_Debug */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <MX_SDMMC1_SD_Init+0x44>)
 800141c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 800142c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001430:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 800143a:	2202      	movs	r2, #2
 800143c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_SDMMC1_SD_Init+0x40>)
 8001440:	f008 fc90 	bl	8009d64 <HAL_SD_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800144a:	f7ff ffdb 	bl	8001404 <Error_Handler>
  }

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2406ec9c 	.word	0x2406ec9c
 8001458:	52007000 	.word	0x52007000

0800145c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2e      	ldr	r2, [pc, #184]	; (8001534 <HAL_SD_MspInit+0xd8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d155      	bne.n	800152a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_SD_MspInit+0xdc>)
 8001480:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001484:	4a2c      	ldr	r2, [pc, #176]	; (8001538 <HAL_SD_MspInit+0xdc>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_SD_MspInit+0xdc>)
 8001490:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_SD_MspInit+0xdc>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_SD_MspInit+0xdc>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_SD_MspInit+0xdc>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_SD_MspInit+0xdc>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_SD_MspInit+0xdc>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_SD_MspInit+0xdc>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 80014d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ea:	230c      	movs	r3, #12
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <HAL_SD_MspInit+0xe0>)
 80014f6:	f005 fb1d 	bl	8006b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fa:	2304      	movs	r3, #4
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800150a:	230c      	movs	r3, #12
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <HAL_SD_MspInit+0xe4>)
 8001516:	f005 fb0d 	bl	8006b34 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2107      	movs	r1, #7
 800151e:	2031      	movs	r0, #49	; 0x31
 8001520:	f002 fc2e 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001524:	2031      	movs	r0, #49	; 0x31
 8001526:	f002 fc45 	bl	8003db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	52007000 	.word	0x52007000
 8001538:	58024400 	.word	0x58024400
 800153c:	58020800 	.word	0x58020800
 8001540:	58020c00 	.word	0x58020c00

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x38>)
 800154c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_MspInit+0x38>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_MspInit+0x38>)
 800155c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	210f      	movs	r1, #15
 800156c:	f06f 0001 	mvn.w	r0, #1
 8001570:	f002 fc06 	bl	8003d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58024400 	.word	0x58024400

08001580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b090      	sub	sp, #64	; 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d827      	bhi.n	80015de <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800158e:	2200      	movs	r2, #0
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	2036      	movs	r0, #54	; 0x36
 8001594:	f002 fbf4 	bl	8003d80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001598:	2036      	movs	r0, #54	; 0x36
 800159a:	f002 fc0b 	bl	8003db4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_InitTick+0xc4>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_InitTick+0xc8>)
 80015a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015aa:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_InitTick+0xc8>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_InitTick+0xc8>)
 80015b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c2:	f107 0210 	add.w	r2, r7, #16
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f006 fc97 	bl	8007f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d106      	bne.n	80015ea <HAL_InitTick+0x6a>
 80015dc:	e001      	b.n	80015e2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e02b      	b.n	800163a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e2:	f006 fc61 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 80015e6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015e8:	e004      	b.n	80015f4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ea:	f006 fc5d 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 80015ee:	4603      	mov	r3, r0
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <HAL_InitTick+0xcc>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	0c9b      	lsrs	r3, r3, #18
 80015fe:	3b01      	subs	r3, #1
 8001600:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_InitTick+0xd0>)
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <HAL_InitTick+0xd4>)
 8001606:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_InitTick+0xd0>)
 800160a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_InitTick+0xd0>)
 8001612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001614:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_InitTick+0xd0>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_InitTick+0xd0>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001622:	480b      	ldr	r0, [pc, #44]	; (8001650 <HAL_InitTick+0xd0>)
 8001624:	f009 ff6e 	bl	800b504 <HAL_TIM_Base_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <HAL_InitTick+0xd0>)
 8001630:	f009 ffee 	bl	800b610 <HAL_TIM_Base_Start_IT>
 8001634:	4603      	mov	r3, r0
 8001636:	e000      	b.n	800163a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	3740      	adds	r7, #64	; 0x40
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	24000008 	.word	0x24000008
 8001648:	58024400 	.word	0x58024400
 800164c:	431bde83 	.word	0x431bde83
 8001650:	2406ed18 	.word	0x2406ed18
 8001654:	40001000 	.word	0x40001000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Stream0_IRQHandler+0x10>)
 8001692:	f003 ff3d 	bl	8005510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24064a8c 	.word	0x24064a8c

080016a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA1_Stream1_IRQHandler+0x10>)
 80016a6:	f003 ff33 	bl	8005510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2406edb0 	.word	0x2406edb0

080016b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA1_Stream2_IRQHandler+0x10>)
 80016ba:	f003 ff29 	bl	8005510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2406ee28 	.word	0x2406ee28

080016c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM3_IRQHandler+0x10>)
 80016ce:	f009 ffd5 	bl	800b67c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2406ed64 	.word	0x2406ed64

080016dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <SDMMC1_IRQHandler+0x10>)
 80016e2:	f008 fda1 	bl	800a228 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2406ec9c 	.word	0x2406ec9c

080016f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <TIM6_DAC_IRQHandler+0x14>)
 80016f6:	f009 ffc1 	bl	800b67c <HAL_TIM_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016fa:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM6_DAC_IRQHandler+0x14>)
 80016fc:	f009 ffbe 	bl	800b67c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2406ed18 	.word	0x2406ed18

08001708 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <UART8_IRQHandler+0x10>)
 800170e:	f00a fc83 	bl	800c018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2406eea0 	.word	0x2406eea0

0800171c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <ADC3_IRQHandler+0x10>)
 8001722:	f001 f92f 	bl	8002984 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24064b04 	.word	0x24064b04

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f013 f9d2 	bl	8014b08 <__errno>
 8001764:	4602      	mov	r2, r0
 8001766:	230c      	movs	r3, #12
 8001768:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	24080000 	.word	0x24080000
 8001790:	00000400 	.word	0x00000400
 8001794:	240148fc 	.word	0x240148fc
 8001798:	24070fe8 	.word	0x24070fe8

0800179c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b092      	sub	sp, #72	; 0x48
 80017a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitTypeDef clk_init_struct = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f013 f9d5 	bl	8014b72 <memset>


  uint32_t latency = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t timer_prescaler = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  // Get timer clock source frequency
	  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 80017d4:	463a      	mov	r2, r7
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 fb90 	bl	8007f00 <HAL_RCC_GetClockConfig>

	  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <MX_TIM3_Init+0x52>
	  {
		  timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 80017e6:	f006 fb5f 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 80017ea:	6478      	str	r0, [r7, #68]	; 0x44
 80017ec:	e004      	b.n	80017f8 <MX_TIM3_Init+0x5c>
	  }

	  else
	  {
		  timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80017ee:	f006 fb5b 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <MX_TIM3_Init+0xf4>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0f5b      	lsrs	r3, r3, #29
 8001802:	3301      	adds	r3, #1
 8001804:	643b      	str	r3, [r7, #64]	; 0x40



  htim3.Instance = TIM3;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_TIM3_Init+0xf8>)
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <MX_TIM3_Init+0xfc>)
 800180a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (timer_prescaler - 1);;
 800180c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180e:	3b01      	subs	r3, #1
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <MX_TIM3_Init+0xf8>)
 8001812:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_TIM3_Init+0xf8>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 800181a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <MX_TIM3_Init+0xf8>)
 800182e:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_TIM3_Init+0xf8>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_TIM3_Init+0xf8>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <MX_TIM3_Init+0xf8>)
 800183e:	f009 fe61 	bl	800b504 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001848:	f7ff fddc 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001856:	4619      	mov	r1, r3
 8001858:	480e      	ldr	r0, [pc, #56]	; (8001894 <MX_TIM3_Init+0xf8>)
 800185a:	f00a f82f 	bl	800b8bc <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8001864:	f7ff fdce 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001868:	2320      	movs	r3, #32
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <MX_TIM3_Init+0xf8>)
 8001878:	f00a fa50 	bl	800bd1c <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001882:	f7ff fdbf 	bl	8001404 <Error_Handler>
  }

}
 8001886:	bf00      	nop
 8001888:	3748      	adds	r7, #72	; 0x48
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	d1b8bacb 	.word	0xd1b8bacb
 8001894:	2406ed64 	.word	0x2406ed64
 8001898:	40000400 	.word	0x40000400

0800189c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_TIM_Base_MspInit+0x48>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d116      	bne.n	80018dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_Base_MspInit+0x4c>)
 80018b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_TIM_Base_MspInit+0x4c>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_TIM_Base_MspInit+0x4c>)
 80018c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2105      	movs	r1, #5
 80018d0:	201d      	movs	r0, #29
 80018d2:	f002 fa55 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d6:	201d      	movs	r0, #29
 80018d8:	f002 fa6c 	bl	8003db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */
  ;
  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40000400 	.word	0x40000400
 80018e8:	58024400 	.word	0x58024400

080018ec <MX_UART8_Init>:
DMA_HandleTypeDef hdma_uart8_rx;
DMA_HandleTypeDef hdma_uart8_tx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <MX_UART8_Init+0x90>)
 80018f2:	4a23      	ldr	r2, [pc, #140]	; (8001980 <MX_UART8_Init+0x94>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 921600;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <MX_UART8_Init+0x90>)
 80018f8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80018fc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_UART8_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_UART8_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <MX_UART8_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_UART8_Init+0x90>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_UART8_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_UART8_Init+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_UART8_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_UART8_Init+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_UART8_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <MX_UART8_Init+0x90>)
 8001936:	f00a fa97 	bl	800be68 <HAL_UART_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001940:	f7ff fd60 	bl	8001404 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001944:	2100      	movs	r1, #0
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_UART8_Init+0x90>)
 8001948:	f00b fd68 	bl	800d41c <HAL_UARTEx_SetTxFifoThreshold>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001952:	f7ff fd57 	bl	8001404 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001956:	2100      	movs	r1, #0
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <MX_UART8_Init+0x90>)
 800195a:	f00b fd9d 	bl	800d498 <HAL_UARTEx_SetRxFifoThreshold>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001964:	f7ff fd4e 	bl	8001404 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_UART8_Init+0x90>)
 800196a:	f00b fd1e 	bl	800d3aa <HAL_UARTEx_DisableFifoMode>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001974:	f7ff fd46 	bl	8001404 <Error_Handler>
  }

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2406eea0 	.word	0x2406eea0
 8001980:	40007c00 	.word	0x40007c00

08001984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_UART_MspInit+0x154>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f040 8093 	bne.w	8001ace <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_UART_MspInit+0x158>)
 80019aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ae:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <HAL_UART_MspInit+0x158>)
 80019b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019b8:	4b48      	ldr	r3, [pc, #288]	; (8001adc <HAL_UART_MspInit+0x158>)
 80019ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019c6:	4b45      	ldr	r3, [pc, #276]	; (8001adc <HAL_UART_MspInit+0x158>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	4a43      	ldr	r2, [pc, #268]	; (8001adc <HAL_UART_MspInit+0x158>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_UART_MspInit+0x158>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80019e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80019f6:	2308      	movs	r3, #8
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <HAL_UART_MspInit+0x15c>)
 8001a02:	f005 f897 	bl	8006b34 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream1;
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a08:	4a37      	ldr	r2, [pc, #220]	; (8001ae8 <HAL_UART_MspInit+0x164>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a0e:	2251      	movs	r2, #81	; 0x51
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a38:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a40:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001a48:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a4a:	f002 fa39 	bl	8003ec0 <HAL_DMA_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001a54:	f7ff fcd6 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a5c:	679a      	str	r2, [r3, #120]	; 0x78
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_UART_MspInit+0x160>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a66:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_UART_MspInit+0x16c>)
 8001a68:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a6c:	2252      	movs	r2, #82	; 0x52
 8001a6e:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a82:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001aa2:	4812      	ldr	r0, [pc, #72]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001aa4:	f002 fa0c 	bl	8003ec0 <HAL_DMA_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001aae:	f7ff fca9 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001ab6:	675a      	str	r2, [r3, #116]	; 0x74
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_UART_MspInit+0x168>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	2053      	movs	r0, #83	; 0x53
 8001ac4:	f002 f95c 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001ac8:	2053      	movs	r0, #83	; 0x53
 8001aca:	f002 f973 	bl	8003db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40007c00 	.word	0x40007c00
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58022400 	.word	0x58022400
 8001ae4:	2406edb0 	.word	0x2406edb0
 8001ae8:	40020028 	.word	0x40020028
 8001aec:	2406ee28 	.word	0x2406ee28
 8001af0:	40020040 	.word	0x40020040

08001af4 <WavHeaderUpdate>:
#include "wav.h"

 uint32_t WavHeaderUpdate(uint8_t* pHeader, WAV_Format* wavFormatStruct,  uint32_t file_size)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	// Rewrite the value of the sampling time here.
	uint32_t header_file_size = file_size - 8;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b08      	subs	r3, #8
 8001b04:	617b      	str	r3, [r7, #20]
	pHeader[4] = (uint8_t) (header_file_size);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
	pHeader[5] = (uint8_t) (header_file_size >> 8);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	0a1a      	lsrs	r2, r3, #8
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3305      	adds	r3, #5
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
	pHeader[6] = (uint8_t) (header_file_size >> 16);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	0c1a      	lsrs	r2, r3, #16
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3306      	adds	r3, #6
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]
	pHeader[7] = (uint8_t) (header_file_size >> 24);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	0e1a      	lsrs	r2, r3, #24
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3307      	adds	r3, #7
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]

	//rewrite the Value of sample data.
	uint32_t data_file_size = file_size - 44;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b2c      	subs	r3, #44	; 0x2c
 8001b38:	613b      	str	r3, [r7, #16]
	pHeader[40] = (uint8_t) (data_file_size);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3328      	adds	r3, #40	; 0x28
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
	pHeader[41] = (uint8_t) (data_file_size >> 8);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	0a1a      	lsrs	r2, r3, #8
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3329      	adds	r3, #41	; 0x29
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
	pHeader[42] = (uint8_t) (data_file_size >> 16);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	0c1a      	lsrs	r2, r3, #16
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	332a      	adds	r3, #42	; 0x2a
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
	pHeader[43] = (uint8_t) (data_file_size >> 24);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	0e1a      	lsrs	r2, r3, #24
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	332b      	adds	r3, #43	; 0x2b
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

	return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <InitialiseWavEncoder>:
 	* @param Freq: Sampling Frequency
 	* @param pHeader: Pointer to the WAV file header to be written
 	* @retval 0 if successful, !0 otherwise
   */
 uint32_t InitialiseWavEncoder(uint32_t Freq, uint8_t *pHeader, WAV_Format* WaveFormat)
 {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]

 	WaveFormat->SampleRate = Freq; // Audio sampling frequency @ 500KHz
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	619a      	str	r2, [r3, #24]
 	//WaveFormat.SampleRate = 44100;
 	WaveFormat->NumChannels = 1; // Stereo;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	82da      	strh	r2, [r3, #22]
 	WaveFormat->BitsPerSample = 16; // Useful bits per sample;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2210      	movs	r2, #16
 8001b94:	845a      	strh	r2, [r3, #34]	; 0x22
 	WaveFormat->FileSize = 0x003D0900; // 1.92MB Filesize - 8 bytes 8 bytes (which is size of "RIFF" + size of file header)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <InitialiseWavEncoder+0x78>)
 8001b9a:	605a      	str	r2, [r3, #4]
 	WaveFormat->SubChunk1Size = 16; // or should it be 16?
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	611a      	str	r2, [r3, #16]
 	WaveFormat->ByteRate =  WaveFormat->SampleRate * (WaveFormat->BitsPerSample/8) * (WaveFormat->NumChannels);  // Bytes per second which is sample rate * block aligj
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001baa:	08d2      	lsrs	r2, r2, #3
 8001bac:	b292      	uxth	r2, r2
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	8ad2      	ldrh	r2, [r2, #22]
 8001bb6:	fb02 f203 	mul.w	r2, r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	61da      	str	r2, [r3, #28]

 	WaveFormat->BlockAlign = WaveFormat->NumChannels * (WaveFormat->BitsPerSample/8); // number of bytes in a frame
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8ada      	ldrh	r2, [r3, #22]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	fb12 f303 	smulbb	r3, r2, r3
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	841a      	strh	r2, [r3, #32]

 	// Parse the rest of the data here.
 	// If function returns anything other than 1,
 	// break function.
 	 if(ProcessWavHeader(pHeader, WaveFormat) == 1)
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	f000 f80c 	bl	8001bf4 <ProcessWavHeader>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <InitialiseWavEncoder+0x6e>
 	 {
 		 return 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <InitialiseWavEncoder+0x70>
 	 }

 	 return 0;
 8001be6:	2300      	movs	r3, #0
 }
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	003d0900 	.word	0x003d0900

08001bf4 <ProcessWavHeader>:
 	*	 @param pheader: Wave Header Buffer to completed
 	*  @param wavFormatStruct: Pointer to the wave struct
   *  @retval 0 if passed, !0 otherwise
 	*/
 uint32_t ProcessWavHeader(uint8_t* pHeader, WAV_Format* wavFormatStruct)
 {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
 	 /***********Header*******************/
 	 //	Chunk which is always "RIFF"
 	 pHeader[0] = 'R';
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2252      	movs	r2, #82	; 0x52
 8001c02:	701a      	strb	r2, [r3, #0]
 	 pHeader[1] = 'I';
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3301      	adds	r3, #1
 8001c08:	2249      	movs	r2, #73	; 0x49
 8001c0a:	701a      	strb	r2, [r3, #0]
 	 pHeader[2] = 'F';
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	2246      	movs	r2, #70	; 0x46
 8001c12:	701a      	strb	r2, [r3, #0]
 	 pHeader[3] = 'F';
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3303      	adds	r3, #3
 8001c18:	2246      	movs	r2, #70	; 0x46
 8001c1a:	701a      	strb	r2, [r3, #0]

 	// File length : Total length minus 8 bytes. Can always write back after each recording session.
 	//4000000 bytes = 0x003D0900
    pHeader[4] = 0x00;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
 	 pHeader[5] = 0x00;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3305      	adds	r3, #5
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 	 pHeader[6] = 0x00;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3306      	adds	r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 	 pHeader[7] = 0x00;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3307      	adds	r3, #7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

 	// File Format: "Always "WAVE" for WAV files
 	 pHeader[8]  = 'W';
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	2257      	movs	r2, #87	; 0x57
 8001c42:	701a      	strb	r2, [r3, #0]
 	 pHeader[9]  = 'A';
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3309      	adds	r3, #9
 8001c48:	2241      	movs	r2, #65	; 0x41
 8001c4a:	701a      	strb	r2, [r3, #0]
 	 pHeader[10] = 'V';
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	330a      	adds	r3, #10
 8001c50:	2256      	movs	r2, #86	; 0x56
 8001c52:	701a      	strb	r2, [r3, #0]
 	 pHeader[11] = 'E';
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	330b      	adds	r3, #11
 8001c58:	2245      	movs	r2, #69	; 0x45
 8001c5a:	701a      	strb	r2, [r3, #0]

 	/*************Format Chunk*** add single space at end too ***/
 	 pHeader[12] = 'f';
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	2266      	movs	r2, #102	; 0x66
 8001c62:	701a      	strb	r2, [r3, #0]
 	 pHeader[13] = 'm';
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	330d      	adds	r3, #13
 8001c68:	226d      	movs	r2, #109	; 0x6d
 8001c6a:	701a      	strb	r2, [r3, #0]
 	 pHeader[14] = 't';
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	330e      	adds	r3, #14
 8001c70:	2274      	movs	r2, #116	; 0x74
 8001c72:	701a      	strb	r2, [r3, #0]
 	 pHeader[15] = ' ';
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	330f      	adds	r3, #15
 8001c78:	2220      	movs	r2, #32
 8001c7a:	701a      	strb	r2, [r3, #0]

 	 // chunk size in bytes, 0x10
 	 pHeader[16] = 0x10;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3310      	adds	r3, #16
 8001c80:	2210      	movs	r2, #16
 8001c82:	701a      	strb	r2, [r3, #0]
 	 pHeader[17] = 0x00;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3311      	adds	r3, #17
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
 	 pHeader[18] = 0x00;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3312      	adds	r3, #18
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
 	 pHeader[19] = 0x00;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3313      	adds	r3, #19
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

 	 // Audio Format. Always 1 for WAV files in PCM format
 	 pHeader[20] = 0x01;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 	 pHeader[21] = 0x00;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3315      	adds	r3, #21
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

 	 // Number of channels: Mono 0x01 or stereo 0x02. Pass Struct member through
 	 pHeader[22] = wavFormatStruct->NumChannels;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	8ada      	ldrh	r2, [r3, #22]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3316      	adds	r3, #22
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
 	 pHeader[23] = 0x00;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3317      	adds	r3, #23
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

 		// Sample Rate in Hz -- To be written in little Endian.
 		// 500000 =  0x0007A120 ==> [24] = 0x20, 27 = 0x00
 		// This masks the 32 bit integers into single bytes
 		// https://stackoverflow.com/questions/10493411/what-is-bit-masking
 	 pHeader[24] = (uint8_t) ((wavFormatStruct->SampleRate & 0xFFFF));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3318      	adds	r3, #24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
 	 pHeader[25] = (uint8_t) ((wavFormatStruct->SampleRate >> 8 )& 0xFFFF);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	0a1a      	lsrs	r2, r3, #8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3319      	adds	r3, #25
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
 	 pHeader[26] = (uint8_t) ((wavFormatStruct->SampleRate >> 16)& 0xFFFF);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	0c1a      	lsrs	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	331a      	adds	r3, #26
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]
 	 pHeader[27] = (uint8_t) ((wavFormatStruct->SampleRate >> 24 )& 0xFFFF);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	0e1a      	lsrs	r2, r3, #24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	331b      	adds	r3, #27
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

 	 /** Byte Rate***/
 	 pHeader[28] = (uint8_t) ((wavFormatStruct->ByteRate & 0xFFFF));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	331c      	adds	r3, #28
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
 	 pHeader[29] = (uint8_t) ((wavFormatStruct->ByteRate >> 8 )& 0xFFFF);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	0a1a      	lsrs	r2, r3, #8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	331d      	adds	r3, #29
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
 	 pHeader[30] = (uint8_t) ((wavFormatStruct->ByteRate >> 16)& 0xFFFF);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	0c1a      	lsrs	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	331e      	adds	r3, #30
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
 	 pHeader[31] = (uint8_t) ((wavFormatStruct->ByteRate >> 24 )& 0xFFFF);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	0e1a      	lsrs	r2, r3, #24
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	331f      	adds	r3, #31
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]


 	/** Block ALignment usually takes up one byte **/
 	pHeader[32] = wavFormatStruct->BlockAlign;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	8c1a      	ldrh	r2, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3320      	adds	r3, #32
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]
 	pHeader[33] = 0x00;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3321      	adds	r3, #33	; 0x21
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]

 	pHeader[32] = 0x04;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3320      	adds	r3, #32
 8001d44:	2204      	movs	r2, #4
 8001d46:	701a      	strb	r2, [r3, #0]
 	pHeader[33] = 0x00;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3321      	adds	r3, #33	; 0x21
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]

 	/**** Bits per sample **/
 	pHeader[34]  = wavFormatStruct->BitsPerSample;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3322      	adds	r3, #34	; 0x22
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
   pHeader[35]  = 0x00;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3323      	adds	r3, #35	; 0x23
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
 	//pHeader[34]  = 0x10;
   //pHeader[35]  = 0x00;

 	/***************Data Chunk ************************/
    // Always "data"
   pHeader[36]  = 'd';
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3324      	adds	r3, #36	; 0x24
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	701a      	strb	r2, [r3, #0]
   pHeader[37]  = 'a';
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3325      	adds	r3, #37	; 0x25
 8001d70:	2261      	movs	r2, #97	; 0x61
 8001d72:	701a      	strb	r2, [r3, #0]
   pHeader[38]  = 't';
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3326      	adds	r3, #38	; 0x26
 8001d78:	2274      	movs	r2, #116	; 0x74
 8001d7a:	701a      	strb	r2, [r3, #0]
   pHeader[39]  = 'a';
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3327      	adds	r3, #39	; 0x27
 8001d80:	2261      	movs	r2, #97	; 0x61
 8001d82:	701a      	strb	r2, [r3, #0]

 	// Data Length or number of element in sample data
 	  /* This variable will be written back at the end of the recording operation */
   pHeader[40]  = 0x00;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3328      	adds	r3, #40	; 0x28
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
   pHeader[41]  = 0x00;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3329      	adds	r3, #41	; 0x29
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
   pHeader[42]  = 0x00;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	332a      	adds	r3, #42	; 0x2a
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
   pHeader[43]  = 0x00;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	332b      	adds	r3, #43	; 0x2b
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

 	//upon success
 	return 0;
 8001da4:	2300      	movs	r3, #0

 }
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001db8:	f7fe fc62 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dbe:	e003      	b.n	8001dc8 <LoopCopyDataInit>

08001dc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001dc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dc6:	3104      	adds	r1, #4

08001dc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001dcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dd0:	d3f6      	bcc.n	8001dc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001dd4:	e002      	b.n	8001ddc <LoopFillZerobss>

08001dd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dd8:	f842 3b04 	str.w	r3, [r2], #4

08001ddc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001dde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001de0:	d3f9      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f012 fe97 	bl	8014b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7ff f97d 	bl	80010e4 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dec:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001df0:	08015588 	.word	0x08015588
  ldr  r0, =_sdata
 8001df4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001df8:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001dfc:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8001e00:	24070fe4 	.word	0x24070fe4

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f001 ffab 	bl	8003d6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e14:	f005 fea6 	bl	8007b64 <HAL_RCC_GetSysClockFreq>
 8001e18:	4601      	mov	r1, r0
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_Init+0x68>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <HAL_Init+0x6c>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8001e30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_Init+0x68>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_Init+0x6c>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_Init+0x70>)
 8001e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_Init+0x74>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fb94 	bl	8001580 <HAL_InitTick>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e002      	b.n	8001e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e62:	f7ff fb6f 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	58024400 	.word	0x58024400
 8001e74:	08015480 	.word	0x08015480
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24000000 	.word	0x24000000

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2400000c 	.word	0x2400000c
 8001ea4:	2406ef2c 	.word	0x2406ef2c

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2406ef2c 	.word	0x2406ef2c

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_Delay+0x40>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2400000c 	.word	0x2400000c

08001f04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetREVID+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	5c001000 	.word	0x5c001000

08001f1c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	58000400 	.word	0x58000400

08001f48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3360      	adds	r3, #96	; 0x60
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	611a      	str	r2, [r3, #16]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002022:	b480      	push	{r7}
 8002024:	b087      	sub	sp, #28
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3360      	adds	r3, #96	; 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	431a      	orrs	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	601a      	str	r2, [r3, #0]
  }
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3330      	adds	r3, #48	; 0x30
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	211f      	movs	r1, #31
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 011f 	and.w	r1, r3, #31
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002108:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002122:	b480      	push	{r7}
 8002124:	b087      	sub	sp, #28
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3314      	adds	r3, #20
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0e5b      	lsrs	r3, r3, #25
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	0d1b      	lsrs	r3, r3, #20
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2107      	movs	r1, #7
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	401a      	ands	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	0d1b      	lsrs	r3, r3, #20
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	431a      	orrs	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0318 	and.w	r3, r3, #24
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800219c:	40d9      	lsrs	r1, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	400b      	ands	r3, r1
 80021a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	000fffff 	.word	0x000fffff

080021c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 031f 	and.w	r3, r3, #31
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	5fffffc0 	.word	0x5fffffc0

0800221c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800222c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002230:	d101      	bne.n	8002236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LL_ADC_EnableInternalRegulator+0x24>)
 8002252:	4013      	ands	r3, r2
 8002254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	6fffffc0 	.word	0x6fffffc0

0800226c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <LL_ADC_Enable+0x24>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	7fffffc0 	.word	0x7fffffc0

080022bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <LL_ADC_Disable+0x24>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	f043 0202 	orr.w	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	7fffffc0 	.word	0x7fffffc0

080022e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <LL_ADC_IsEnabled+0x18>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_ADC_IsEnabled+0x1a>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d101      	bne.n	8002322 <LL_ADC_IsDisableOngoing+0x18>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_IsDisableOngoing+0x1a>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <LL_ADC_REG_StartConversion+0x24>)
 800233e:	4013      	ands	r3, r2
 8002340:	f043 0204 	orr.w	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	7fffffc0 	.word	0x7fffffc0

08002358 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <LL_ADC_REG_StopConversion+0x24>)
 8002366:	4013      	ands	r3, r2
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	7fffffc0 	.word	0x7fffffc0

08002380 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d101      	bne.n	8002398 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <LL_ADC_INJ_StopConversion+0x24>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	7fffffc0 	.word	0x7fffffc0

080023d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d101      	bne.n	80023e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e18e      	b.n	8002730 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fe fa39 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff feef 	bl	800221c <LL_ADC_IsDeepPowerDownEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fed5 	bl	80021f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff0a 	bl	800226c <LL_ADC_IsInternalRegulatorEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d113      	bne.n	8002486 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff feee 	bl	8002244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002468:	4b9a      	ldr	r3, [pc, #616]	; (80026d4 <HAL_ADC_Init+0x2dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	4a9a      	ldr	r2, [pc, #616]	; (80026d8 <HAL_ADC_Init+0x2e0>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002478:	e002      	b.n	8002480 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3b01      	subs	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f9      	bne.n	800247a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff feee 	bl	800226c <LL_ADC_IsInternalRegulatorEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff62 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80024bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8129 	bne.w	800271e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8125 	bne.w	800271e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024dc:	f043 0202 	orr.w	r2, r3, #2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fefb 	bl	80022e4 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d136      	bne.n	8002562 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a78      	ldr	r2, [pc, #480]	; (80026dc <HAL_ADC_Init+0x2e4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_Init+0x110>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a77      	ldr	r2, [pc, #476]	; (80026e0 <HAL_ADC_Init+0x2e8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d10e      	bne.n	8002526 <HAL_ADC_Init+0x12e>
 8002508:	4874      	ldr	r0, [pc, #464]	; (80026dc <HAL_ADC_Init+0x2e4>)
 800250a:	f7ff feeb 	bl	80022e4 <LL_ADC_IsEnabled>
 800250e:	4604      	mov	r4, r0
 8002510:	4873      	ldr	r0, [pc, #460]	; (80026e0 <HAL_ADC_Init+0x2e8>)
 8002512:	f7ff fee7 	bl	80022e4 <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	4323      	orrs	r3, r4
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e008      	b.n	8002538 <HAL_ADC_Init+0x140>
 8002526:	486f      	ldr	r0, [pc, #444]	; (80026e4 <HAL_ADC_Init+0x2ec>)
 8002528:	f7ff fedc 	bl	80022e4 <LL_ADC_IsEnabled>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a66      	ldr	r2, [pc, #408]	; (80026dc <HAL_ADC_Init+0x2e4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_ADC_Init+0x158>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_ADC_Init+0x2e8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_ADC_Init+0x15c>
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_ADC_Init+0x2f0>)
 8002552:	e000      	b.n	8002556 <HAL_ADC_Init+0x15e>
 8002554:	4a65      	ldr	r2, [pc, #404]	; (80026ec <HAL_ADC_Init+0x2f4>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7ff fcf3 	bl	8001f48 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002562:	f7ff fccf 	bl	8001f04 <HAL_GetREVID>
 8002566:	4602      	mov	r2, r0
 8002568:	f241 0303 	movw	r3, #4099	; 0x1003
 800256c:	429a      	cmp	r2, r3
 800256e:	d914      	bls.n	800259a <HAL_ADC_Init+0x1a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b10      	cmp	r3, #16
 8002576:	d110      	bne.n	800259a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7d5b      	ldrb	r3, [r3, #21]
 800257c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002582:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002588:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7f1b      	ldrb	r3, [r3, #28]
 800258e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002590:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002592:	f043 030c 	orr.w	r3, r3, #12
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e00d      	b.n	80025b6 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7d5b      	ldrb	r3, [r3, #21]
 800259e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7f1b      	ldrb	r3, [r3, #28]
 80025b0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7f1b      	ldrb	r3, [r3, #28]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d106      	bne.n	80025cc <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	045b      	lsls	r3, r3, #17
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_ADC_Init+0x2f8>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff febd 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002606:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fedf 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8002612:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d14a      	bne.n	80026b0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d147      	bne.n	80026b0 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7d1b      	ldrb	r3, [r3, #20]
 8002624:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_ADC_Init+0x2fc>)
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	69b9      	ldr	r1, [r7, #24]
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002648:	2b01      	cmp	r3, #1
 800264a:	d11b      	bne.n	8002684 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_ADC_Init+0x300>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002660:	3a01      	subs	r2, #1
 8002662:	0411      	lsls	r1, r2, #16
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002674:	430a      	orrs	r2, r1
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	611a      	str	r2, [r3, #16]
 8002682:	e007      	b.n	8002694 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f001 f8f0 	bl	8003890 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d121      	bne.n	80026fc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f023 010f 	bic.w	r1, r3, #15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
 80026d0:	e01c      	b.n	800270c <HAL_ADC_Init+0x314>
 80026d2:	bf00      	nop
 80026d4:	24000000 	.word	0x24000000
 80026d8:	053e2d63 	.word	0x053e2d63
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40022100 	.word	0x40022100
 80026e4:	58026000 	.word	0x58026000
 80026e8:	40022300 	.word	0x40022300
 80026ec:	58026300 	.word	0x58026300
 80026f0:	fff0c003 	.word	0xfff0c003
 80026f4:	ffffbffc 	.word	0xffffbffc
 80026f8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020f 	bic.w	r2, r2, #15
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f023 0303 	bic.w	r3, r3, #3
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
 800271c:	e007      	b.n	800272e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800272e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3724      	adds	r7, #36	; 0x24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_ADC_Start_DMA+0x168>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_ADC_Start_DMA+0x20>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a54      	ldr	r2, [pc, #336]	; (80028a4 <HAL_ADC_Start_DMA+0x16c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_ADC_Start_DMA+0x24>
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_ADC_Start_DMA+0x170>)
 800275a:	e000      	b.n	800275e <HAL_ADC_Start_DMA+0x26>
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_ADC_Start_DMA+0x174>)
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fd2e 	bl	80021c0 <LL_ADC_GetMultimode>
 8002764:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fe08 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 808c 	bne.w	8002890 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Start_DMA+0x4e>
 8002782:	2302      	movs	r3, #2
 8002784:	e087      	b.n	8002896 <HAL_ADC_Start_DMA+0x15e>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d170      	bne.n	8002882 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 ff05 	bl	80035b0 <ADC_Enable>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d163      	bne.n	8002878 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_ADC_Start_DMA+0x178>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a37      	ldr	r2, [pc, #220]	; (80028a4 <HAL_ADC_Start_DMA+0x16c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d002      	beq.n	80027d0 <HAL_ADC_Start_DMA+0x98>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_Start_DMA+0x9a>
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_ADC_Start_DMA+0x168>)
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d002      	beq.n	80027e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f023 0206 	bic.w	r2, r3, #6
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	659a      	str	r2, [r3, #88]	; 0x58
 8002804:	e002      	b.n	800280c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_ADC_Start_DMA+0x17c>)
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_ADC_Start_DMA+0x180>)
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_ADC_Start_DMA+0x184>)
 8002822:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	221c      	movs	r2, #28
 800282a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0210 	orr.w	r2, r2, #16
 8002842:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f7ff fc41 	bl	80020d6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3340      	adds	r3, #64	; 0x40
 800285e:	4619      	mov	r1, r3
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f001 fe88 	bl	8004578 <HAL_DMA_Start_IT>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fd5d 	bl	8002330 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002876:	e00d      	b.n	8002894 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002880:	e008      	b.n	8002894 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800288e:	e001      	b.n	8002894 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40022100 	.word	0x40022100
 80028a8:	40022300 	.word	0x40022300
 80028ac:	58026300 	.word	0x58026300
 80028b0:	fffff0fe 	.word	0xfffff0fe
 80028b4:	08003769 	.word	0x08003769
 80028b8:	08003841 	.word	0x08003841
 80028bc:	0800385d 	.word	0x0800385d

080028c0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Stop_DMA+0x16>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e04f      	b.n	8002976 <HAL_ADC_Stop_DMA+0xb6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028de:	2103      	movs	r1, #3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fdb1 	bl	8003448 <ADC_ConversionStop>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13d      	bne.n	800296c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0203 	bic.w	r2, r2, #3
 80028fe:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d10f      	bne.n	800292e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4618      	mov	r0, r3
 8002914:	f002 f89a 	bl	8004a4c <HAL_DMA_Abort>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0210 	bic.w	r2, r2, #16
 800293c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 feb7 	bl	80036b8 <ADC_Disable>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e002      	b.n	8002956 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 feb1 	bl	80036b8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_ADC_Stop_DMA+0xc0>)
 8002962:	4013      	ands	r3, r2
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	ffffeefe 	.word	0xffffeefe

08002984 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a87      	ldr	r2, [pc, #540]	; (8002bc4 <HAL_ADC_IRQHandler+0x240>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x30>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a86      	ldr	r2, [pc, #536]	; (8002bc8 <HAL_ADC_IRQHandler+0x244>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_IRQHandler+0x34>
 80029b4:	4b85      	ldr	r3, [pc, #532]	; (8002bcc <HAL_ADC_IRQHandler+0x248>)
 80029b6:	e000      	b.n	80029ba <HAL_ADC_IRQHandler+0x36>
 80029b8:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <HAL_ADC_IRQHandler+0x24c>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fc00 	bl	80021c0 <LL_ADC_GetMultimode>
 80029c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_ADC_IRQHandler+0x78>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f001 f904 	bl	8003bfc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x8c>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8083 	beq.w	8002b22 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d07d      	beq.n	8002b22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb08 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d062      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <HAL_ADC_IRQHandler+0x244>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_IRQHandler+0xda>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_IRQHandler+0xdc>
 8002a5e:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_ADC_IRQHandler+0x240>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d008      	beq.n	8002a7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d002      	beq.n	8002a7a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b09      	cmp	r3, #9
 8002a78:	d104      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	e00c      	b.n	8002a9e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a4f      	ldr	r2, [pc, #316]	; (8002bc8 <HAL_ADC_IRQHandler+0x244>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d002      	beq.n	8002a94 <HAL_ADC_IRQHandler+0x110>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_IRQHandler+0x112>
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <HAL_ADC_IRQHandler+0x240>)
 8002a96:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d135      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d12e      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fc60 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11a      	bne.n	8002afc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 020c 	bic.w	r2, r2, #12
 8002ad4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d112      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
 8002afa:	e00b      	b.n	8002b14 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fe f967 	bl	8000de8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADC_IRQHandler+0x1b2>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a0 	beq.w	8002c82 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 809a 	beq.w	8002c82 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fac6 	bl	80020fc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b70:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fa6e 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b7c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_ADC_IRQHandler+0x244>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d002      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x20a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e000      	b.n	8002b90 <HAL_ADC_IRQHandler+0x20c>
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_ADC_IRQHandler+0x240>)
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d008      	beq.n	8002baa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d002      	beq.n	8002baa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b07      	cmp	r3, #7
 8002ba8:	d104      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	e014      	b.n	8002bde <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <HAL_ADC_IRQHandler+0x244>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x250>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	e008      	b.n	8002bd6 <HAL_ADC_IRQHandler+0x252>
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40022100 	.word	0x40022100
 8002bcc:	40022300 	.word	0x40022300
 8002bd0:	58026300 	.word	0x58026300
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_ADC_IRQHandler+0x464>)
 8002bd6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10c      	bne.n	8002bfe <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d142      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03f      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13a      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d133      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d12e      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fbd8 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11a      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c34:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d112      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
 8002c5a:	e00b      	b.n	8002c74 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 ff99 	bl	8003bac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2260      	movs	r2, #96	; 0x60
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x32c>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8a8 	bl	8002df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <HAL_ADC_IRQHandler+0x35c>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 ff7f 	bl	8003bd4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x38c>
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 ff71 	bl	8003be8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d043      	beq.n	8002da2 <HAL_ADC_IRQHandler+0x41e>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03e      	beq.n	8002da2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	e021      	b.n	8002d76 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <HAL_ADC_IRQHandler+0x464>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x3c8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_ADC_IRQHandler+0x468>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x3cc>
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_ADC_IRQHandler+0x46c>)
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_IRQHandler+0x3ce>
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_ADC_IRQHandler+0x470>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa42 	bl	80021dc <LL_ADC_GetMultiDMATransfer>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e008      	b.n	8002d76 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002d72:	2301      	movs	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10e      	bne.n	8002d9a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f043 0202 	orr.w	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f839 	bl	8002e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2210      	movs	r2, #16
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d018      	beq.n	8002dde <HAL_ADC_IRQHandler+0x45a>
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d013      	beq.n	8002dde <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f043 0208 	orr.w	r2, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fef1 	bl	8003bc0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40022100 	.word	0x40022100
 8002df0:	40022300 	.word	0x40022300
 8002df4:	58026300 	.word	0x58026300

08002df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b099      	sub	sp, #100	; 0x64
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a99      	ldr	r2, [pc, #612]	; (80030a0 <HAL_ADC_ConfigChannel+0x280>)
 8002e3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x2a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e2e6      	b.n	8003418 <HAL_ADC_ConfigChannel+0x5f8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fa92 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 82cb 	bne.w	80033fa <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x62>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0e9b      	lsrs	r3, r3, #26
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	e00f      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x82>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	69d1      	ldr	r1, [r2, #28]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff f8de 	bl	800207e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fa5a 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fa7c 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 80b3 	bne.w	8003048 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 80af 	bne.w	8003048 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7ff f913 	bl	8002122 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002efc:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <HAL_ADC_ConfigChannel+0x284>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f08:	d10b      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x102>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	e01d      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x13e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x128>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	e00a      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x13e>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d027      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6919      	ldr	r1, [r3, #16]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f76:	f7ff f81b 	bl	8001fb0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6919      	ldr	r1, [r3, #16]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	7e5b      	ldrb	r3, [r3, #25]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x170>
 8002f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f8e:	e000      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x172>
 8002f90:	2300      	movs	r3, #0
 8002f92:	461a      	mov	r2, r3
 8002f94:	f7ff f845 	bl	8002022 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6919      	ldr	r1, [r3, #16]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	7e1b      	ldrb	r3, [r3, #24]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x18e>
 8002fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fac:	e000      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x190>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f7ff f81d 	bl	8001ff0 <LL_ADC_SetDataRightShift>
 8002fb6:	e047      	b.n	8003048 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fda:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ffe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003022:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	069b      	lsls	r3, r3, #26
 8003034:	429a      	cmp	r2, r3
 8003036:	d107      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003046:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f949 	bl	80022e4 <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 81d9 	bne.w	800340c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff f886 	bl	8002178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <HAL_ADC_ConfigChannel+0x280>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f040 8101 	bne.w	800327a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x288>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	3301      	adds	r3, #1
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2b09      	cmp	r3, #9
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e016      	b.n	80030ce <HAL_ADC_ConfigChannel+0x2ae>
 80030a0:	47ff0000 	.word	0x47ff0000
 80030a4:	5c001000 	.word	0x5c001000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	bf94      	ite	ls
 80030c8:	2301      	movls	r3, #1
 80030ca:	2300      	movhi	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d064      	beq.n	800319c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x2ce>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	3301      	adds	r3, #1
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ec:	e00e      	b.n	800310c <HAL_ADC_ConfigChannel+0x2ec>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_ADC_ConfigChannel+0x30c>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	e010      	b.n	800314e <HAL_ADC_ConfigChannel+0x32e>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	ea42 0103 	orr.w	r1, r2, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x354>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	3301      	adds	r3, #1
 8003166:	f003 021f 	and.w	r2, r3, #31
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	051b      	lsls	r3, r3, #20
 8003172:	e011      	b.n	8003198 <HAL_ADC_ConfigChannel+0x378>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003198:	430b      	orrs	r3, r1
 800319a:	e069      	b.n	8003270 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x398>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	069b      	lsls	r3, r3, #26
 80031b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b6:	e00e      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x3b6>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	61fb      	str	r3, [r7, #28]
  return result;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	069b      	lsls	r3, r3, #26
 80031d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x3d6>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	e010      	b.n	8003218 <HAL_ADC_ConfigChannel+0x3f8>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	617b      	str	r3, [r7, #20]
  return result;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	ea42 0103 	orr.w	r1, r2, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x424>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	3301      	adds	r3, #1
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	3b1e      	subs	r3, #30
 800323c:	051b      	lsls	r3, r3, #20
 800323e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003242:	e014      	b.n	800326e <HAL_ADC_ConfigChannel+0x44e>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	60fb      	str	r3, [r7, #12]
  return result;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	3b1e      	subs	r3, #30
 8003268:	051b      	lsls	r3, r3, #20
 800326a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800326e:	430b      	orrs	r3, r1
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	4619      	mov	r1, r3
 8003276:	f7fe ff54 	bl	8002122 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f280 80c4 	bge.w	800340c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a65      	ldr	r2, [pc, #404]	; (8003420 <HAL_ADC_ConfigChannel+0x600>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x478>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a64      	ldr	r2, [pc, #400]	; (8003424 <HAL_ADC_ConfigChannel+0x604>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x47c>
 8003298:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_ADC_ConfigChannel+0x608>)
 800329a:	e000      	b.n	800329e <HAL_ADC_ConfigChannel+0x47e>
 800329c:	4b63      	ldr	r3, [pc, #396]	; (800342c <HAL_ADC_ConfigChannel+0x60c>)
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fe78 	bl	8001f94 <LL_ADC_GetCommonPathInternalCh>
 80032a4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a5d      	ldr	r2, [pc, #372]	; (8003420 <HAL_ADC_ConfigChannel+0x600>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x49a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <HAL_ADC_ConfigChannel+0x604>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10e      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x4b8>
 80032ba:	4859      	ldr	r0, [pc, #356]	; (8003420 <HAL_ADC_ConfigChannel+0x600>)
 80032bc:	f7ff f812 	bl	80022e4 <LL_ADC_IsEnabled>
 80032c0:	4604      	mov	r4, r0
 80032c2:	4858      	ldr	r0, [pc, #352]	; (8003424 <HAL_ADC_ConfigChannel+0x604>)
 80032c4:	f7ff f80e 	bl	80022e4 <LL_ADC_IsEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4323      	orrs	r3, r4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e008      	b.n	80032ea <HAL_ADC_ConfigChannel+0x4ca>
 80032d8:	4855      	ldr	r0, [pc, #340]	; (8003430 <HAL_ADC_ConfigChannel+0x610>)
 80032da:	f7ff f803 	bl	80022e4 <LL_ADC_IsEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d07b      	beq.n	80033e6 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_ADC_ConfigChannel+0x614>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d12e      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x536>
 80032f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d129      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <HAL_ADC_ConfigChannel+0x610>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d17f      	bne.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a43      	ldr	r2, [pc, #268]	; (8003420 <HAL_ADC_ConfigChannel+0x600>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_ADC_ConfigChannel+0x500>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a42      	ldr	r2, [pc, #264]	; (8003424 <HAL_ADC_ConfigChannel+0x604>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x504>
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_ADC_ConfigChannel+0x608>)
 8003322:	e000      	b.n	8003326 <HAL_ADC_ConfigChannel+0x506>
 8003324:	4a41      	ldr	r2, [pc, #260]	; (800342c <HAL_ADC_ConfigChannel+0x60c>)
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f7fe fe1d 	bl	8001f6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003334:	4b40      	ldr	r3, [pc, #256]	; (8003438 <HAL_ADC_ConfigChannel+0x618>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	4a40      	ldr	r2, [pc, #256]	; (800343c <HAL_ADC_ConfigChannel+0x61c>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003346:	e002      	b.n	800334e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3b01      	subs	r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f9      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003354:	e05a      	b.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_ADC_ConfigChannel+0x620>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d11e      	bne.n	800339e <HAL_ADC_ConfigChannel+0x57e>
 8003360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d119      	bne.n	800339e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a30      	ldr	r2, [pc, #192]	; (8003430 <HAL_ADC_ConfigChannel+0x610>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d14b      	bne.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <HAL_ADC_ConfigChannel+0x600>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x568>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a28      	ldr	r2, [pc, #160]	; (8003424 <HAL_ADC_ConfigChannel+0x604>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_ADC_ConfigChannel+0x56c>
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_ADC_ConfigChannel+0x608>)
 800338a:	e000      	b.n	800338e <HAL_ADC_ConfigChannel+0x56e>
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_ADC_ConfigChannel+0x60c>)
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe fde9 	bl	8001f6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800339c:	e036      	b.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a28      	ldr	r2, [pc, #160]	; (8003444 <HAL_ADC_ConfigChannel+0x624>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d131      	bne.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
 80033a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12c      	bne.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_ADC_ConfigChannel+0x610>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d127      	bne.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_ADC_ConfigChannel+0x600>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x5b0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_ADC_ConfigChannel+0x604>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x5b4>
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_ADC_ConfigChannel+0x608>)
 80033d2:	e000      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5b6>
 80033d4:	4a15      	ldr	r2, [pc, #84]	; (800342c <HAL_ADC_ConfigChannel+0x60c>)
 80033d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fe fdc5 	bl	8001f6e <LL_ADC_SetCommonPathInternalCh>
 80033e4:	e012      	b.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033f8:	e008      	b.n	800340c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f043 0220 	orr.w	r2, r3, #32
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003418:	4618      	mov	r0, r3
 800341a:	3764      	adds	r7, #100	; 0x64
 800341c:	46bd      	mov	sp, r7
 800341e:	bd90      	pop	{r4, r7, pc}
 8003420:	40022000 	.word	0x40022000
 8003424:	40022100 	.word	0x40022100
 8003428:	40022300 	.word	0x40022300
 800342c:	58026300 	.word	0x58026300
 8003430:	58026000 	.word	0x58026000
 8003434:	cb840000 	.word	0xcb840000
 8003438:	24000000 	.word	0x24000000
 800343c:	053e2d63 	.word	0x053e2d63
 8003440:	c7520000 	.word	0xc7520000
 8003444:	cfb80000 	.word	0xcfb80000

08003448 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe ff8e 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8003464:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe ffb0 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8003470:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8090 	beq.w	80035a0 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02a      	beq.n	80034e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7d5b      	ldrb	r3, [r3, #21]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d126      	bne.n	80034e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7d1b      	ldrb	r3, [r3, #20]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d122      	bne.n	80034e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800349e:	2301      	movs	r3, #1
 80034a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034a2:	e014      	b.n	80034ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4a41      	ldr	r2, [pc, #260]	; (80035ac <ADC_ConversionStop+0x164>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d90d      	bls.n	80034c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e06c      	b.n	80035a2 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d1e3      	bne.n	80034a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2240      	movs	r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d014      	beq.n	8003514 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe ff46 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe ff03 	bl	800230a <LL_ADC_IsDisableOngoing>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe ff22 	bl	8002358 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d014      	beq.n	8003544 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe ff56 	bl	80023d0 <LL_ADC_INJ_IsConversionOngoing>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe feeb 	bl	800230a <LL_ADC_IsDisableOngoing>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe ff32 	bl	80023a8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d004      	beq.n	8003554 <ADC_ConversionStop+0x10c>
 800354a:	2b03      	cmp	r3, #3
 800354c:	d105      	bne.n	800355a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800354e:	230c      	movs	r3, #12
 8003550:	617b      	str	r3, [r7, #20]
        break;
 8003552:	e005      	b.n	8003560 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003554:	2308      	movs	r3, #8
 8003556:	617b      	str	r3, [r7, #20]
        break;
 8003558:	e002      	b.n	8003560 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800355a:	2304      	movs	r3, #4
 800355c:	617b      	str	r3, [r7, #20]
        break;
 800355e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003560:	f7fe fca2 	bl	8001ea8 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003566:	e014      	b.n	8003592 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003568:	f7fe fc9e 	bl	8001ea8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b05      	cmp	r3, #5
 8003574:	d90d      	bls.n	8003592 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e007      	b.n	80035a2 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e3      	bne.n	8003568 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	000cdbff 	.word	0x000cdbff

080035b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fe91 	bl	80022e4 <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d167      	bne.n	8003698 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <ADC_Enable+0xf4>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f043 0210 	orr.w	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e053      	b.n	800369a <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fe4c 	bl	8002294 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035fc:	f7fe fc54 	bl	8001ea8 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <ADC_Enable+0xf8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <ADC_Enable+0x66>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <ADC_Enable+0xfc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <ADC_Enable+0x6a>
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <ADC_Enable+0x100>)
 8003618:	e000      	b.n	800361c <ADC_Enable+0x6c>
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <ADC_Enable+0x104>)
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fdcf 	bl	80021c0 <LL_ADC_GetMultimode>
 8003622:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a20      	ldr	r2, [pc, #128]	; (80036ac <ADC_Enable+0xfc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d002      	beq.n	8003634 <ADC_Enable+0x84>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	e000      	b.n	8003636 <ADC_Enable+0x86>
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <ADC_Enable+0xf8>)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	4293      	cmp	r3, r2
 800363c:	d025      	beq.n	800368a <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d129      	bne.n	8003698 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003644:	e021      	b.n	800368a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fe4a 	bl	80022e4 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fe1a 	bl	8002294 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003660:	f7fe fc22 	bl	8001ea8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d90d      	bls.n	800368a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d1d6      	bne.n	8003646 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	8000003f 	.word	0x8000003f
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40022100 	.word	0x40022100
 80036b0:	40022300 	.word	0x40022300
 80036b4:	58026300 	.word	0x58026300

080036b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fe20 	bl	800230a <LL_ADC_IsDisableOngoing>
 80036ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fe07 	bl	80022e4 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d040      	beq.n	800375e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d13d      	bne.n	800375e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030d 	and.w	r3, r3, #13
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe fde1 	bl	80022bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2203      	movs	r2, #3
 8003700:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003702:	f7fe fbd1 	bl	8001ea8 <HAL_GetTick>
 8003706:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003708:	e022      	b.n	8003750 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e01c      	b.n	8003760 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003726:	f7fe fbbf 	bl	8001ea8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d90d      	bls.n	8003750 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0210 	orr.w	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e007      	b.n	8003760 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e3      	bne.n	8003726 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800377e:	2b00      	cmp	r3, #0
 8003780:	d14b      	bne.n	800381a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fc59 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d032      	beq.n	8003812 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d12b      	bne.n	8003812 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11f      	bne.n	8003812 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
 80037de:	e018      	b.n	8003812 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d111      	bne.n	8003812 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7fd fae8 	bl	8000de8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003818:	e00e      	b.n	8003838 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7ff faf0 	bl	8002e0c <HAL_ADC_ErrorCallback>
}
 800382c:	e004      	b.n	8003838 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7fd fa8a 	bl	8000d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fac2 	bl	8002e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a70      	ldr	r2, [pc, #448]	; (8003a60 <ADC_ConfigureBoostMode+0x1d0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <ADC_ConfigureBoostMode+0x1c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6f      	ldr	r2, [pc, #444]	; (8003a64 <ADC_ConfigureBoostMode+0x1d4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d109      	bne.n	80038c0 <ADC_ConfigureBoostMode+0x30>
 80038ac:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <ADC_ConfigureBoostMode+0x1d8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e008      	b.n	80038d2 <ADC_ConfigureBoostMode+0x42>
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <ADC_ConfigureBoostMode+0x1dc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01a      	beq.n	800390c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80038d6:	f004 fab7 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 80038da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e4:	d006      	beq.n	80038f4 <ADC_ConfigureBoostMode+0x64>
 80038e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ea:	d00b      	beq.n	8003904 <ADC_ConfigureBoostMode+0x74>
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f0:	d000      	beq.n	80038f4 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80038f2:	e05d      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	60fb      	str	r3, [r7, #12]
        break;
 8003902:	e055      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	60fb      	str	r3, [r7, #12]
        break;
 800390a:	e051      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800390c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003910:	f005 fa52 	bl	8008db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003914:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800391e:	d02a      	beq.n	8003976 <ADC_ConfigureBoostMode+0xe6>
 8003920:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003924:	d813      	bhi.n	800394e <ADC_ConfigureBoostMode+0xbe>
 8003926:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800392a:	d024      	beq.n	8003976 <ADC_ConfigureBoostMode+0xe6>
 800392c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003930:	d806      	bhi.n	8003940 <ADC_ConfigureBoostMode+0xb0>
 8003932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003936:	d01e      	beq.n	8003976 <ADC_ConfigureBoostMode+0xe6>
 8003938:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800393c:	d01b      	beq.n	8003976 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800393e:	e037      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003944:	d017      	beq.n	8003976 <ADC_ConfigureBoostMode+0xe6>
 8003946:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800394a:	d014      	beq.n	8003976 <ADC_ConfigureBoostMode+0xe6>
        break;
 800394c:	e030      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800394e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003952:	d021      	beq.n	8003998 <ADC_ConfigureBoostMode+0x108>
 8003954:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003958:	d806      	bhi.n	8003968 <ADC_ConfigureBoostMode+0xd8>
 800395a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800395e:	d013      	beq.n	8003988 <ADC_ConfigureBoostMode+0xf8>
 8003960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003964:	d014      	beq.n	8003990 <ADC_ConfigureBoostMode+0x100>
        break;
 8003966:	e023      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003968:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800396c:	d018      	beq.n	80039a0 <ADC_ConfigureBoostMode+0x110>
 800396e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003972:	d019      	beq.n	80039a8 <ADC_ConfigureBoostMode+0x118>
        break;
 8003974:	e01c      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	60fb      	str	r3, [r7, #12]
        break;
 8003986:	e013      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
        break;
 800398e:	e00f      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	60fb      	str	r3, [r7, #12]
        break;
 8003996:	e00b      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	60fb      	str	r3, [r7, #12]
        break;
 800399e:	e007      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	09db      	lsrs	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
        break;
 80039a6:	e003      	b.n	80039b0 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	60fb      	str	r3, [r7, #12]
        break;
 80039ae:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80039b0:	f7fe faa8 	bl	8001f04 <HAL_GetREVID>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d815      	bhi.n	80039ea <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <ADC_ConfigureBoostMode+0x1e0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d908      	bls.n	80039d8 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80039d6:	e03e      	b.n	8003a56 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e6:	609a      	str	r2, [r3, #8]
}
 80039e8:	e035      	b.n	8003a56 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a20      	ldr	r2, [pc, #128]	; (8003a74 <ADC_ConfigureBoostMode+0x1e4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d808      	bhi.n	8003a0a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	e025      	b.n	8003a56 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <ADC_ConfigureBoostMode+0x1e8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d80a      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	e016      	b.n	8003a56 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <ADC_ConfigureBoostMode+0x1ec>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d80a      	bhi.n	8003a46 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	e007      	b.n	8003a56 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a54:	609a      	str	r2, [r3, #8]
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40022100 	.word	0x40022100
 8003a68:	40022300 	.word	0x40022300
 8003a6c:	58026300 	.word	0x58026300
 8003a70:	01312d00 	.word	0x01312d00
 8003a74:	005f5e10 	.word	0x005f5e10
 8003a78:	00bebc20 	.word	0x00bebc20
 8003a7c:	017d7840 	.word	0x017d7840

08003a80 <LL_ADC_StartCalibration>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <LL_ADC_StartCalibration+0x38>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	3ffeffc0 	.word	0x3ffeffc0

08003abc <LL_ADC_IsCalibrationOnGoing>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad0:	d101      	bne.n	8003ad6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_ADCEx_Calibration_Start+0x1e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e04c      	b.n	8003b9c <HAL_ADCEx_Calibration_Start+0xb8>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fdd4 	bl	80036b8 <ADC_Disable>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d135      	bne.n	8003b86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ffa4 	bl	8003a80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b38:	e014      	b.n	8003b64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d90d      	bls.n	8003b64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f023 0312 	bic.w	r3, r3, #18
 8003b50:	f043 0210 	orr.w	r2, r3, #16
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e01b      	b.n	8003b9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ffa7 	bl	8003abc <LL_ADC_IsCalibrationOnGoing>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e2      	bne.n	8003b3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b78:	f023 0303 	bic.w	r3, r3, #3
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
 8003b84:	e005      	b.n	8003b92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	ffffeefd 	.word	0xffffeefd
 8003ba8:	25c3f7ff 	.word	0x25c3f7ff

08003bac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <__NVIC_SetPriorityGrouping>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <__NVIC_SetPriorityGrouping+0x40>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <__NVIC_SetPriorityGrouping+0x40>)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	60d3      	str	r3, [r2, #12]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00
 8003c54:	05fa0000 	.word	0x05fa0000

08003c58 <__NVIC_GetPriorityGrouping>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <__NVIC_GetPriorityGrouping+0x18>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0307 	and.w	r3, r3, #7
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_EnableIRQ>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db0b      	blt.n	8003c9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4907      	ldr	r1, [pc, #28]	; (8003cac <__NVIC_EnableIRQ+0x38>)
 8003c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2001      	movs	r0, #1
 8003c96:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	e000e100 	.word	0xe000e100

08003cb0 <__NVIC_SetPriority>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db0a      	blt.n	8003cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	490c      	ldr	r1, [pc, #48]	; (8003cfc <__NVIC_SetPriority+0x4c>)
 8003cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cd8:	e00a      	b.n	8003cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4908      	ldr	r1, [pc, #32]	; (8003d00 <__NVIC_SetPriority+0x50>)
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	440b      	add	r3, r1
 8003cee:	761a      	strb	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000e100 	.word	0xe000e100
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <NVIC_EncodePriority>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf28      	it	cs
 8003d22:	2304      	movcs	r3, #4
 8003d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d902      	bls.n	8003d34 <NVIC_EncodePriority+0x30>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3b03      	subs	r3, #3
 8003d32:	e000      	b.n	8003d36 <NVIC_EncodePriority+0x32>
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	401a      	ands	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	4313      	orrs	r3, r2
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff4c 	bl	8003c10 <__NVIC_SetPriorityGrouping>
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d8e:	f7ff ff63 	bl	8003c58 <__NVIC_GetPriorityGrouping>
 8003d92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	f7ff ffb3 	bl	8003d04 <NVIC_EncodePriority>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff82 	bl	8003cb0 <__NVIC_SetPriority>
}
 8003dac:	bf00      	nop
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff56 	bl	8003c74 <__NVIC_EnableIRQ>
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003dd4:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_MPU_Disable+0x24>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <HAL_MPU_Disable+0x24>)
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_MPU_Disable+0x28>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	605a      	str	r2, [r3, #4]
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00
 8003df8:	e000ed90 	.word	0xe000ed90

08003dfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_MPU_Enable+0x34>)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_MPU_Enable+0x38>)
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_MPU_Enable+0x38>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e1e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000ed90 	.word	0xe000ed90
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	785a      	ldrb	r2, [r3, #1]
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_MPU_ConfigRegion+0x84>)
 8003e46:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d029      	beq.n	8003ea4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <HAL_MPU_ConfigRegion+0x84>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7b1b      	ldrb	r3, [r3, #12]
 8003e5c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7adb      	ldrb	r3, [r3, #11]
 8003e62:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	7a9b      	ldrb	r3, [r3, #10]
 8003e6a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7b5b      	ldrb	r3, [r3, #13]
 8003e72:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7b9b      	ldrb	r3, [r3, #14]
 8003e7a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	7bdb      	ldrb	r3, [r3, #15]
 8003e82:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7a5b      	ldrb	r3, [r3, #9]
 8003e8a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7a1b      	ldrb	r3, [r3, #8]
 8003e92:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e94:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e9e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ea0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003ea2:	e005      	b.n	8003eb0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_MPU_ConfigRegion+0x84>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_MPU_ConfigRegion+0x84>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	611a      	str	r2, [r3, #16]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed90 	.word	0xe000ed90

08003ec0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7fd ffee 	bl	8001ea8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e316      	b.n	8004506 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a66      	ldr	r2, [pc, #408]	; (8004078 <HAL_DMA_Init+0x1b8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_DMA_Init+0x1bc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a63      	ldr	r2, [pc, #396]	; (8004080 <HAL_DMA_Init+0x1c0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a62      	ldr	r2, [pc, #392]	; (8004084 <HAL_DMA_Init+0x1c4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a60      	ldr	r2, [pc, #384]	; (8004088 <HAL_DMA_Init+0x1c8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5f      	ldr	r2, [pc, #380]	; (800408c <HAL_DMA_Init+0x1cc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_DMA_Init+0x1d0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5c      	ldr	r2, [pc, #368]	; (8004094 <HAL_DMA_Init+0x1d4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a5a      	ldr	r2, [pc, #360]	; (8004098 <HAL_DMA_Init+0x1d8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a59      	ldr	r2, [pc, #356]	; (800409c <HAL_DMA_Init+0x1dc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a57      	ldr	r2, [pc, #348]	; (80040a0 <HAL_DMA_Init+0x1e0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_DMA_Init+0x1e4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a54      	ldr	r2, [pc, #336]	; (80040a8 <HAL_DMA_Init+0x1e8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a53      	ldr	r2, [pc, #332]	; (80040ac <HAL_DMA_Init+0x1ec>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a51      	ldr	r2, [pc, #324]	; (80040b0 <HAL_DMA_Init+0x1f0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_DMA_Init+0xb8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a50      	ldr	r2, [pc, #320]	; (80040b4 <HAL_DMA_Init+0x1f4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <HAL_DMA_Init+0xbc>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_DMA_Init+0xbe>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 813b 	beq.w	80041fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a37      	ldr	r2, [pc, #220]	; (8004078 <HAL_DMA_Init+0x1b8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04a      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a36      	ldr	r2, [pc, #216]	; (800407c <HAL_DMA_Init+0x1bc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d045      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a34      	ldr	r2, [pc, #208]	; (8004080 <HAL_DMA_Init+0x1c0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d040      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a33      	ldr	r2, [pc, #204]	; (8004084 <HAL_DMA_Init+0x1c4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d03b      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a31      	ldr	r2, [pc, #196]	; (8004088 <HAL_DMA_Init+0x1c8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d036      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a30      	ldr	r2, [pc, #192]	; (800408c <HAL_DMA_Init+0x1cc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2e      	ldr	r2, [pc, #184]	; (8004090 <HAL_DMA_Init+0x1d0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02c      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2d      	ldr	r2, [pc, #180]	; (8004094 <HAL_DMA_Init+0x1d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d027      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2b      	ldr	r2, [pc, #172]	; (8004098 <HAL_DMA_Init+0x1d8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d022      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2a      	ldr	r2, [pc, #168]	; (800409c <HAL_DMA_Init+0x1dc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01d      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	; (80040a0 <HAL_DMA_Init+0x1e0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d018      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <HAL_DMA_Init+0x1e4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_DMA_Init+0x174>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <HAL_DMA_Init+0x1e8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a24      	ldr	r2, [pc, #144]	; (80040ac <HAL_DMA_Init+0x1ec>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_DMA_Init+0x174>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_DMA_Init+0x1f0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_DMA_Init+0x174>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <HAL_DMA_Init+0x1f4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <HAL_DMA_Init+0x186>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e007      	b.n	8004056 <HAL_DMA_Init+0x196>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004056:	e02f      	b.n	80040b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004058:	f7fd ff26 	bl	8001ea8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b05      	cmp	r3, #5
 8004064:	d928      	bls.n	80040b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2203      	movs	r2, #3
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e246      	b.n	8004506 <HAL_DMA_Init+0x646>
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1c8      	bne.n	8004058 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4b83      	ldr	r3, [pc, #524]	; (80042e0 <HAL_DMA_Init+0x420>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80040de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b04      	cmp	r3, #4
 800410a:	d107      	bne.n	800411c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	4313      	orrs	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <HAL_DMA_Init+0x424>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b71      	ldr	r3, [pc, #452]	; (80042e8 <HAL_DMA_Init+0x428>)
 8004122:	4013      	ands	r3, r2
 8004124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004128:	d328      	bcc.n	800417c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b28      	cmp	r3, #40	; 0x28
 8004130:	d903      	bls.n	800413a <HAL_DMA_Init+0x27a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b2e      	cmp	r3, #46	; 0x2e
 8004138:	d917      	bls.n	800416a <HAL_DMA_Init+0x2aa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b3e      	cmp	r3, #62	; 0x3e
 8004140:	d903      	bls.n	800414a <HAL_DMA_Init+0x28a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b42      	cmp	r3, #66	; 0x42
 8004148:	d90f      	bls.n	800416a <HAL_DMA_Init+0x2aa>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b46      	cmp	r3, #70	; 0x46
 8004150:	d903      	bls.n	800415a <HAL_DMA_Init+0x29a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b48      	cmp	r3, #72	; 0x48
 8004158:	d907      	bls.n	800416a <HAL_DMA_Init+0x2aa>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b4e      	cmp	r3, #78	; 0x4e
 8004160:	d905      	bls.n	800416e <HAL_DMA_Init+0x2ae>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b52      	cmp	r3, #82	; 0x52
 8004168:	d801      	bhi.n	800416e <HAL_DMA_Init+0x2ae>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_DMA_Init+0x2b0>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d117      	bne.n	80041d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f002 fb31 	bl	8006820 <DMA_CheckFifoParam>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e197      	b.n	8004506 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f002 fa6c 	bl	80066bc <DMA_CalcBaseAndBitshift>
 80041e4:	4603      	mov	r3, r0
 80041e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	223f      	movs	r2, #63	; 0x3f
 80041f2:	409a      	lsls	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	e0cd      	b.n	8004396 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3b      	ldr	r2, [pc, #236]	; (80042ec <HAL_DMA_Init+0x42c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_Init+0x38a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a39      	ldr	r2, [pc, #228]	; (80042f0 <HAL_DMA_Init+0x430>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_Init+0x38a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <HAL_DMA_Init+0x434>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_Init+0x38a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a36      	ldr	r2, [pc, #216]	; (80042f8 <HAL_DMA_Init+0x438>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_Init+0x38a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a35      	ldr	r2, [pc, #212]	; (80042fc <HAL_DMA_Init+0x43c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_Init+0x38a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a33      	ldr	r2, [pc, #204]	; (8004300 <HAL_DMA_Init+0x440>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_Init+0x38a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a32      	ldr	r2, [pc, #200]	; (8004304 <HAL_DMA_Init+0x444>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_Init+0x38a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a30      	ldr	r2, [pc, #192]	; (8004308 <HAL_DMA_Init+0x448>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_DMA_Init+0x38e>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_DMA_Init+0x390>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8097 	beq.w	8004384 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a24      	ldr	r2, [pc, #144]	; (80042ec <HAL_DMA_Init+0x42c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d021      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_DMA_Init+0x430>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01c      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <HAL_DMA_Init+0x434>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d017      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_DMA_Init+0x438>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d012      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_DMA_Init+0x43c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00d      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_DMA_Init+0x440>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d008      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_DMA_Init+0x444>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_Init+0x3e4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_DMA_Init+0x448>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_DMA_Init+0x44c>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d020      	beq.n	8004310 <HAL_DMA_Init+0x450>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d102      	bne.n	80042dc <HAL_DMA_Init+0x41c>
 80042d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042da:	e01a      	b.n	8004312 <HAL_DMA_Init+0x452>
 80042dc:	2300      	movs	r3, #0
 80042de:	e018      	b.n	8004312 <HAL_DMA_Init+0x452>
 80042e0:	fe10803f 	.word	0xfe10803f
 80042e4:	5c001000 	.word	0x5c001000
 80042e8:	ffff0000 	.word	0xffff0000
 80042ec:	58025408 	.word	0x58025408
 80042f0:	5802541c 	.word	0x5802541c
 80042f4:	58025430 	.word	0x58025430
 80042f8:	58025444 	.word	0x58025444
 80042fc:	58025458 	.word	0x58025458
 8004300:	5802546c 	.word	0x5802546c
 8004304:	58025480 	.word	0x58025480
 8004308:	58025494 	.word	0x58025494
 800430c:	fffe000f 	.word	0xfffe000f
 8004310:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d2      	ldr	r2, [r2, #12]
 8004316:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004340:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	4b6e      	ldr	r3, [pc, #440]	; (8004510 <HAL_DMA_Init+0x650>)
 8004358:	4413      	add	r3, r2
 800435a:	4a6e      	ldr	r2, [pc, #440]	; (8004514 <HAL_DMA_Init+0x654>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	009a      	lsls	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f002 f9a7 	bl	80066bc <DMA_CalcBaseAndBitshift>
 800436e:	4603      	mov	r3, r0
 8004370:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2201      	movs	r2, #1
 800437c:	409a      	lsls	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e008      	b.n	8004396 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2203      	movs	r2, #3
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0b7      	b.n	8004506 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5f      	ldr	r2, [pc, #380]	; (8004518 <HAL_DMA_Init+0x658>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d072      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_DMA_Init+0x65c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d06d      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a5c      	ldr	r2, [pc, #368]	; (8004520 <HAL_DMA_Init+0x660>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d068      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a5a      	ldr	r2, [pc, #360]	; (8004524 <HAL_DMA_Init+0x664>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d063      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a59      	ldr	r2, [pc, #356]	; (8004528 <HAL_DMA_Init+0x668>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d05e      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a57      	ldr	r2, [pc, #348]	; (800452c <HAL_DMA_Init+0x66c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d059      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a56      	ldr	r2, [pc, #344]	; (8004530 <HAL_DMA_Init+0x670>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d054      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a54      	ldr	r2, [pc, #336]	; (8004534 <HAL_DMA_Init+0x674>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d04f      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a53      	ldr	r2, [pc, #332]	; (8004538 <HAL_DMA_Init+0x678>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a51      	ldr	r2, [pc, #324]	; (800453c <HAL_DMA_Init+0x67c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a50      	ldr	r2, [pc, #320]	; (8004540 <HAL_DMA_Init+0x680>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <HAL_DMA_Init+0x684>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_DMA_Init+0x688>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_DMA_Init+0x68c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <HAL_DMA_Init+0x690>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a48      	ldr	r2, [pc, #288]	; (8004554 <HAL_DMA_Init+0x694>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a47      	ldr	r2, [pc, #284]	; (8004558 <HAL_DMA_Init+0x698>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a45      	ldr	r2, [pc, #276]	; (800455c <HAL_DMA_Init+0x69c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a44      	ldr	r2, [pc, #272]	; (8004560 <HAL_DMA_Init+0x6a0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a42      	ldr	r2, [pc, #264]	; (8004564 <HAL_DMA_Init+0x6a4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a41      	ldr	r2, [pc, #260]	; (8004568 <HAL_DMA_Init+0x6a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3f      	ldr	r2, [pc, #252]	; (800456c <HAL_DMA_Init+0x6ac>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a3e      	ldr	r2, [pc, #248]	; (8004570 <HAL_DMA_Init+0x6b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_Init+0x5c6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a3c      	ldr	r2, [pc, #240]	; (8004574 <HAL_DMA_Init+0x6b4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_DMA_Init+0x5ca>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_DMA_Init+0x5cc>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d032      	beq.n	80044f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f002 fa41 	bl	8006918 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d102      	bne.n	80044a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d010      	beq.n	80044e4 <HAL_DMA_Init+0x624>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d80c      	bhi.n	80044e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f002 fabe 	bl	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	e008      	b.n	80044f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	a7fdabf8 	.word	0xa7fdabf8
 8004514:	cccccccd 	.word	0xcccccccd
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	58025408 	.word	0x58025408
 800455c:	5802541c 	.word	0x5802541c
 8004560:	58025430 	.word	0x58025430
 8004564:	58025444 	.word	0x58025444
 8004568:	58025458 	.word	0x58025458
 800456c:	5802546c 	.word	0x5802546c
 8004570:	58025480 	.word	0x58025480
 8004574:	58025494 	.word	0x58025494

08004578 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e226      	b.n	80049e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_Start_IT+0x2a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e21f      	b.n	80049e2 <HAL_DMA_Start_IT+0x46a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f040 820a 	bne.w	80049cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a68      	ldr	r2, [pc, #416]	; (800476c <HAL_DMA_Start_IT+0x1f4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a66      	ldr	r2, [pc, #408]	; (8004770 <HAL_DMA_Start_IT+0x1f8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a65      	ldr	r2, [pc, #404]	; (8004774 <HAL_DMA_Start_IT+0x1fc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_DMA_Start_IT+0x200>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a62      	ldr	r2, [pc, #392]	; (800477c <HAL_DMA_Start_IT+0x204>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_DMA_Start_IT+0x208>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a5f      	ldr	r2, [pc, #380]	; (8004784 <HAL_DMA_Start_IT+0x20c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5d      	ldr	r2, [pc, #372]	; (8004788 <HAL_DMA_Start_IT+0x210>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a5c      	ldr	r2, [pc, #368]	; (800478c <HAL_DMA_Start_IT+0x214>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5a      	ldr	r2, [pc, #360]	; (8004790 <HAL_DMA_Start_IT+0x218>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a59      	ldr	r2, [pc, #356]	; (8004794 <HAL_DMA_Start_IT+0x21c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a57      	ldr	r2, [pc, #348]	; (8004798 <HAL_DMA_Start_IT+0x220>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a56      	ldr	r2, [pc, #344]	; (800479c <HAL_DMA_Start_IT+0x224>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a54      	ldr	r2, [pc, #336]	; (80047a0 <HAL_DMA_Start_IT+0x228>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a53      	ldr	r2, [pc, #332]	; (80047a4 <HAL_DMA_Start_IT+0x22c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_DMA_Start_IT+0xee>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a51      	ldr	r2, [pc, #324]	; (80047a8 <HAL_DMA_Start_IT+0x230>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <HAL_DMA_Start_IT+0x100>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e007      	b.n	8004688 <HAL_DMA_Start_IT+0x110>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f001 fe68 	bl	8006364 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a34      	ldr	r2, [pc, #208]	; (800476c <HAL_DMA_Start_IT+0x1f4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d04a      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a33      	ldr	r2, [pc, #204]	; (8004770 <HAL_DMA_Start_IT+0x1f8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d045      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a31      	ldr	r2, [pc, #196]	; (8004774 <HAL_DMA_Start_IT+0x1fc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d040      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a30      	ldr	r2, [pc, #192]	; (8004778 <HAL_DMA_Start_IT+0x200>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d03b      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2e      	ldr	r2, [pc, #184]	; (800477c <HAL_DMA_Start_IT+0x204>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d036      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a2d      	ldr	r2, [pc, #180]	; (8004780 <HAL_DMA_Start_IT+0x208>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d031      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <HAL_DMA_Start_IT+0x20c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02c      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <HAL_DMA_Start_IT+0x210>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d027      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a28      	ldr	r2, [pc, #160]	; (800478c <HAL_DMA_Start_IT+0x214>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d022      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a27      	ldr	r2, [pc, #156]	; (8004790 <HAL_DMA_Start_IT+0x218>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d01d      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a25      	ldr	r2, [pc, #148]	; (8004794 <HAL_DMA_Start_IT+0x21c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d018      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a24      	ldr	r2, [pc, #144]	; (8004798 <HAL_DMA_Start_IT+0x220>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <HAL_DMA_Start_IT+0x224>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <HAL_DMA_Start_IT+0x228>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <HAL_DMA_Start_IT+0x22c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_DMA_Start_IT+0x1bc>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <HAL_DMA_Start_IT+0x230>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_DMA_Start_IT+0x1c0>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_DMA_Start_IT+0x1c2>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d036      	beq.n	80047ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 021e 	bic.w	r2, r3, #30
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0216 	orr.w	r2, r2, #22
 8004750:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d03e      	beq.n	80047d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0208 	orr.w	r2, r2, #8
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e035      	b.n	80047d8 <HAL_DMA_Start_IT+0x260>
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 020e 	bic.w	r2, r3, #14
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 020a 	orr.w	r2, r2, #10
 80047be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0204 	orr.w	r2, r2, #4
 80047d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a83      	ldr	r2, [pc, #524]	; (80049ec <HAL_DMA_Start_IT+0x474>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d072      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a82      	ldr	r2, [pc, #520]	; (80049f0 <HAL_DMA_Start_IT+0x478>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d06d      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a80      	ldr	r2, [pc, #512]	; (80049f4 <HAL_DMA_Start_IT+0x47c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d068      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7f      	ldr	r2, [pc, #508]	; (80049f8 <HAL_DMA_Start_IT+0x480>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d063      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7d      	ldr	r2, [pc, #500]	; (80049fc <HAL_DMA_Start_IT+0x484>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d05e      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a7c      	ldr	r2, [pc, #496]	; (8004a00 <HAL_DMA_Start_IT+0x488>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d059      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a7a      	ldr	r2, [pc, #488]	; (8004a04 <HAL_DMA_Start_IT+0x48c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d054      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a79      	ldr	r2, [pc, #484]	; (8004a08 <HAL_DMA_Start_IT+0x490>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d04f      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a77      	ldr	r2, [pc, #476]	; (8004a0c <HAL_DMA_Start_IT+0x494>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d04a      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a76      	ldr	r2, [pc, #472]	; (8004a10 <HAL_DMA_Start_IT+0x498>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d045      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a74      	ldr	r2, [pc, #464]	; (8004a14 <HAL_DMA_Start_IT+0x49c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d040      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a73      	ldr	r2, [pc, #460]	; (8004a18 <HAL_DMA_Start_IT+0x4a0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d03b      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_DMA_Start_IT+0x4a4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d036      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a70      	ldr	r2, [pc, #448]	; (8004a20 <HAL_DMA_Start_IT+0x4a8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d031      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_DMA_Start_IT+0x4ac>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02c      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6d      	ldr	r2, [pc, #436]	; (8004a28 <HAL_DMA_Start_IT+0x4b0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d027      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a6b      	ldr	r2, [pc, #428]	; (8004a2c <HAL_DMA_Start_IT+0x4b4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d022      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6a      	ldr	r2, [pc, #424]	; (8004a30 <HAL_DMA_Start_IT+0x4b8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d01d      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a68      	ldr	r2, [pc, #416]	; (8004a34 <HAL_DMA_Start_IT+0x4bc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d018      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a67      	ldr	r2, [pc, #412]	; (8004a38 <HAL_DMA_Start_IT+0x4c0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a65      	ldr	r2, [pc, #404]	; (8004a3c <HAL_DMA_Start_IT+0x4c4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a64      	ldr	r2, [pc, #400]	; (8004a40 <HAL_DMA_Start_IT+0x4c8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a62      	ldr	r2, [pc, #392]	; (8004a44 <HAL_DMA_Start_IT+0x4cc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_DMA_Start_IT+0x350>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a61      	ldr	r2, [pc, #388]	; (8004a48 <HAL_DMA_Start_IT+0x4d0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_DMA_Start_IT+0x354>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_DMA_Start_IT+0x356>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01a      	beq.n	8004908 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004906:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a37      	ldr	r2, [pc, #220]	; (80049ec <HAL_DMA_Start_IT+0x474>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d04a      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a36      	ldr	r2, [pc, #216]	; (80049f0 <HAL_DMA_Start_IT+0x478>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d045      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a34      	ldr	r2, [pc, #208]	; (80049f4 <HAL_DMA_Start_IT+0x47c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d040      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <HAL_DMA_Start_IT+0x480>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d03b      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a31      	ldr	r2, [pc, #196]	; (80049fc <HAL_DMA_Start_IT+0x484>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d036      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <HAL_DMA_Start_IT+0x488>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d031      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2e      	ldr	r2, [pc, #184]	; (8004a04 <HAL_DMA_Start_IT+0x48c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02c      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <HAL_DMA_Start_IT+0x490>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <HAL_DMA_Start_IT+0x494>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <HAL_DMA_Start_IT+0x498>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a28      	ldr	r2, [pc, #160]	; (8004a14 <HAL_DMA_Start_IT+0x49c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <HAL_DMA_Start_IT+0x4a0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <HAL_DMA_Start_IT+0x4a4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <HAL_DMA_Start_IT+0x4a8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_DMA_Start_IT+0x4ac>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_Start_IT+0x430>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_DMA_Start_IT+0x4b0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d108      	bne.n	80049ba <HAL_DMA_Start_IT+0x442>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e012      	b.n	80049e0 <HAL_DMA_Start_IT+0x468>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e009      	b.n	80049e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40020010 	.word	0x40020010
 80049f0:	40020028 	.word	0x40020028
 80049f4:	40020040 	.word	0x40020040
 80049f8:	40020058 	.word	0x40020058
 80049fc:	40020070 	.word	0x40020070
 8004a00:	40020088 	.word	0x40020088
 8004a04:	400200a0 	.word	0x400200a0
 8004a08:	400200b8 	.word	0x400200b8
 8004a0c:	40020410 	.word	0x40020410
 8004a10:	40020428 	.word	0x40020428
 8004a14:	40020440 	.word	0x40020440
 8004a18:	40020458 	.word	0x40020458
 8004a1c:	40020470 	.word	0x40020470
 8004a20:	40020488 	.word	0x40020488
 8004a24:	400204a0 	.word	0x400204a0
 8004a28:	400204b8 	.word	0x400204b8
 8004a2c:	58025408 	.word	0x58025408
 8004a30:	5802541c 	.word	0x5802541c
 8004a34:	58025430 	.word	0x58025430
 8004a38:	58025444 	.word	0x58025444
 8004a3c:	58025458 	.word	0x58025458
 8004a40:	5802546c 	.word	0x5802546c
 8004a44:	58025480 	.word	0x58025480
 8004a48:	58025494 	.word	0x58025494

08004a4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a54:	f7fd fa28 	bl	8001ea8 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e2dc      	b.n	800501e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d008      	beq.n	8004a82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2280      	movs	r2, #128	; 0x80
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e2cd      	b.n	800501e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a76      	ldr	r2, [pc, #472]	; (8004c60 <HAL_DMA_Abort+0x214>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d04a      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a74      	ldr	r2, [pc, #464]	; (8004c64 <HAL_DMA_Abort+0x218>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d045      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a73      	ldr	r2, [pc, #460]	; (8004c68 <HAL_DMA_Abort+0x21c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d040      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a71      	ldr	r2, [pc, #452]	; (8004c6c <HAL_DMA_Abort+0x220>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d03b      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a70      	ldr	r2, [pc, #448]	; (8004c70 <HAL_DMA_Abort+0x224>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d036      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6e      	ldr	r2, [pc, #440]	; (8004c74 <HAL_DMA_Abort+0x228>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d031      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6d      	ldr	r2, [pc, #436]	; (8004c78 <HAL_DMA_Abort+0x22c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d02c      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6b      	ldr	r2, [pc, #428]	; (8004c7c <HAL_DMA_Abort+0x230>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d027      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <HAL_DMA_Abort+0x234>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a68      	ldr	r2, [pc, #416]	; (8004c84 <HAL_DMA_Abort+0x238>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a67      	ldr	r2, [pc, #412]	; (8004c88 <HAL_DMA_Abort+0x23c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <HAL_DMA_Abort+0x240>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a64      	ldr	r2, [pc, #400]	; (8004c90 <HAL_DMA_Abort+0x244>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a62      	ldr	r2, [pc, #392]	; (8004c94 <HAL_DMA_Abort+0x248>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a61      	ldr	r2, [pc, #388]	; (8004c98 <HAL_DMA_Abort+0x24c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_DMA_Abort+0xd6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5f      	ldr	r2, [pc, #380]	; (8004c9c <HAL_DMA_Abort+0x250>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_DMA_Abort+0xda>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_DMA_Abort+0xdc>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 021e 	bic.w	r2, r2, #30
 8004b3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e00a      	b.n	8004b6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 020e 	bic.w	r2, r2, #14
 8004b62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3c      	ldr	r2, [pc, #240]	; (8004c60 <HAL_DMA_Abort+0x214>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d072      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <HAL_DMA_Abort+0x218>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d06d      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a39      	ldr	r2, [pc, #228]	; (8004c68 <HAL_DMA_Abort+0x21c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d068      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a37      	ldr	r2, [pc, #220]	; (8004c6c <HAL_DMA_Abort+0x220>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d063      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a36      	ldr	r2, [pc, #216]	; (8004c70 <HAL_DMA_Abort+0x224>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d05e      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <HAL_DMA_Abort+0x228>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d059      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a33      	ldr	r2, [pc, #204]	; (8004c78 <HAL_DMA_Abort+0x22c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d054      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a31      	ldr	r2, [pc, #196]	; (8004c7c <HAL_DMA_Abort+0x230>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d04f      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <HAL_DMA_Abort+0x234>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d04a      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2e      	ldr	r2, [pc, #184]	; (8004c84 <HAL_DMA_Abort+0x238>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d045      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2d      	ldr	r2, [pc, #180]	; (8004c88 <HAL_DMA_Abort+0x23c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d040      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <HAL_DMA_Abort+0x240>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d03b      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <HAL_DMA_Abort+0x244>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d036      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <HAL_DMA_Abort+0x248>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d031      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <HAL_DMA_Abort+0x24c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d02c      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <HAL_DMA_Abort+0x250>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d027      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a24      	ldr	r2, [pc, #144]	; (8004ca0 <HAL_DMA_Abort+0x254>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d022      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <HAL_DMA_Abort+0x258>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01d      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <HAL_DMA_Abort+0x25c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d018      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_DMA_Abort+0x260>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_DMA_Abort+0x264>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_DMA_Abort+0x268>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_DMA_Abort+0x26c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_DMA_Abort+0x20e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_DMA_Abort+0x270>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d132      	bne.n	8004cc0 <HAL_DMA_Abort+0x274>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e031      	b.n	8004cc2 <HAL_DMA_Abort+0x276>
 8004c5e:	bf00      	nop
 8004c60:	40020010 	.word	0x40020010
 8004c64:	40020028 	.word	0x40020028
 8004c68:	40020040 	.word	0x40020040
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	40020070 	.word	0x40020070
 8004c74:	40020088 	.word	0x40020088
 8004c78:	400200a0 	.word	0x400200a0
 8004c7c:	400200b8 	.word	0x400200b8
 8004c80:	40020410 	.word	0x40020410
 8004c84:	40020428 	.word	0x40020428
 8004c88:	40020440 	.word	0x40020440
 8004c8c:	40020458 	.word	0x40020458
 8004c90:	40020470 	.word	0x40020470
 8004c94:	40020488 	.word	0x40020488
 8004c98:	400204a0 	.word	0x400204a0
 8004c9c:	400204b8 	.word	0x400204b8
 8004ca0:	58025408 	.word	0x58025408
 8004ca4:	5802541c 	.word	0x5802541c
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	58025444 	.word	0x58025444
 8004cb0:	58025458 	.word	0x58025458
 8004cb4:	5802546c 	.word	0x5802546c
 8004cb8:	58025480 	.word	0x58025480
 8004cbc:	58025494 	.word	0x58025494
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a6d      	ldr	r2, [pc, #436]	; (8004e90 <HAL_DMA_Abort+0x444>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04a      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6b      	ldr	r2, [pc, #428]	; (8004e94 <HAL_DMA_Abort+0x448>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d045      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6a      	ldr	r2, [pc, #424]	; (8004e98 <HAL_DMA_Abort+0x44c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d040      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <HAL_DMA_Abort+0x450>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d03b      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a67      	ldr	r2, [pc, #412]	; (8004ea0 <HAL_DMA_Abort+0x454>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d036      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a65      	ldr	r2, [pc, #404]	; (8004ea4 <HAL_DMA_Abort+0x458>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d031      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a64      	ldr	r2, [pc, #400]	; (8004ea8 <HAL_DMA_Abort+0x45c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d02c      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a62      	ldr	r2, [pc, #392]	; (8004eac <HAL_DMA_Abort+0x460>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d027      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a61      	ldr	r2, [pc, #388]	; (8004eb0 <HAL_DMA_Abort+0x464>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d022      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5f      	ldr	r2, [pc, #380]	; (8004eb4 <HAL_DMA_Abort+0x468>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01d      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5e      	ldr	r2, [pc, #376]	; (8004eb8 <HAL_DMA_Abort+0x46c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d018      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5c      	ldr	r2, [pc, #368]	; (8004ebc <HAL_DMA_Abort+0x470>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a5b      	ldr	r2, [pc, #364]	; (8004ec0 <HAL_DMA_Abort+0x474>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a59      	ldr	r2, [pc, #356]	; (8004ec4 <HAL_DMA_Abort+0x478>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <HAL_DMA_Abort+0x47c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_DMA_Abort+0x32a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <HAL_DMA_Abort+0x480>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <HAL_DMA_Abort+0x33c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	e007      	b.n	8004d98 <HAL_DMA_Abort+0x34c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d98:	e013      	b.n	8004dc2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d9a:	f7fd f885 	bl	8001ea8 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	d90c      	bls.n	8004dc2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2203      	movs	r2, #3
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e12d      	b.n	800501e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2f      	ldr	r2, [pc, #188]	; (8004e90 <HAL_DMA_Abort+0x444>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d04a      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	; (8004e94 <HAL_DMA_Abort+0x448>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d045      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <HAL_DMA_Abort+0x44c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d040      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <HAL_DMA_Abort+0x450>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d03b      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <HAL_DMA_Abort+0x454>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d036      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <HAL_DMA_Abort+0x458>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d031      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <HAL_DMA_Abort+0x45c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d02c      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_DMA_Abort+0x460>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d027      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <HAL_DMA_Abort+0x464>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <HAL_DMA_Abort+0x468>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <HAL_DMA_Abort+0x46c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <HAL_DMA_Abort+0x470>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <HAL_DMA_Abort+0x474>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <HAL_DMA_Abort+0x478>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_DMA_Abort+0x47c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_DMA_Abort+0x422>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <HAL_DMA_Abort+0x480>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <HAL_DMA_Abort+0x426>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_DMA_Abort+0x428>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02b      	beq.n	8004ed0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	223f      	movs	r2, #63	; 0x3f
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	e02a      	b.n	8004ee6 <HAL_DMA_Abort+0x49a>
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	40020070 	.word	0x40020070
 8004ea4:	40020088 	.word	0x40020088
 8004ea8:	400200a0 	.word	0x400200a0
 8004eac:	400200b8 	.word	0x400200b8
 8004eb0:	40020410 	.word	0x40020410
 8004eb4:	40020428 	.word	0x40020428
 8004eb8:	40020440 	.word	0x40020440
 8004ebc:	40020458 	.word	0x40020458
 8004ec0:	40020470 	.word	0x40020470
 8004ec4:	40020488 	.word	0x40020488
 8004ec8:	400204a0 	.word	0x400204a0
 8004ecc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2201      	movs	r2, #1
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a4f      	ldr	r2, [pc, #316]	; (8005028 <HAL_DMA_Abort+0x5dc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d072      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a4d      	ldr	r2, [pc, #308]	; (800502c <HAL_DMA_Abort+0x5e0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d06d      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a4c      	ldr	r2, [pc, #304]	; (8005030 <HAL_DMA_Abort+0x5e4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d068      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a4a      	ldr	r2, [pc, #296]	; (8005034 <HAL_DMA_Abort+0x5e8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d063      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a49      	ldr	r2, [pc, #292]	; (8005038 <HAL_DMA_Abort+0x5ec>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d05e      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a47      	ldr	r2, [pc, #284]	; (800503c <HAL_DMA_Abort+0x5f0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d059      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a46      	ldr	r2, [pc, #280]	; (8005040 <HAL_DMA_Abort+0x5f4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d054      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a44      	ldr	r2, [pc, #272]	; (8005044 <HAL_DMA_Abort+0x5f8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d04f      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_DMA_Abort+0x5fc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d04a      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a41      	ldr	r2, [pc, #260]	; (800504c <HAL_DMA_Abort+0x600>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d045      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a40      	ldr	r2, [pc, #256]	; (8005050 <HAL_DMA_Abort+0x604>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d040      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a3e      	ldr	r2, [pc, #248]	; (8005054 <HAL_DMA_Abort+0x608>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d03b      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3d      	ldr	r2, [pc, #244]	; (8005058 <HAL_DMA_Abort+0x60c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d036      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3b      	ldr	r2, [pc, #236]	; (800505c <HAL_DMA_Abort+0x610>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d031      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <HAL_DMA_Abort+0x614>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d02c      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a38      	ldr	r2, [pc, #224]	; (8005064 <HAL_DMA_Abort+0x618>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d027      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a37      	ldr	r2, [pc, #220]	; (8005068 <HAL_DMA_Abort+0x61c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d022      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a35      	ldr	r2, [pc, #212]	; (800506c <HAL_DMA_Abort+0x620>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01d      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a34      	ldr	r2, [pc, #208]	; (8005070 <HAL_DMA_Abort+0x624>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d018      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a32      	ldr	r2, [pc, #200]	; (8005074 <HAL_DMA_Abort+0x628>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a31      	ldr	r2, [pc, #196]	; (8005078 <HAL_DMA_Abort+0x62c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00e      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2f      	ldr	r2, [pc, #188]	; (800507c <HAL_DMA_Abort+0x630>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2e      	ldr	r2, [pc, #184]	; (8005080 <HAL_DMA_Abort+0x634>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_DMA_Abort+0x58a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_DMA_Abort+0x638>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Abort+0x58e>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_DMA_Abort+0x590>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fe8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005000:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800500a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	40020058 	.word	0x40020058
 8005038:	40020070 	.word	0x40020070
 800503c:	40020088 	.word	0x40020088
 8005040:	400200a0 	.word	0x400200a0
 8005044:	400200b8 	.word	0x400200b8
 8005048:	40020410 	.word	0x40020410
 800504c:	40020428 	.word	0x40020428
 8005050:	40020440 	.word	0x40020440
 8005054:	40020458 	.word	0x40020458
 8005058:	40020470 	.word	0x40020470
 800505c:	40020488 	.word	0x40020488
 8005060:	400204a0 	.word	0x400204a0
 8005064:	400204b8 	.word	0x400204b8
 8005068:	58025408 	.word	0x58025408
 800506c:	5802541c 	.word	0x5802541c
 8005070:	58025430 	.word	0x58025430
 8005074:	58025444 	.word	0x58025444
 8005078:	58025458 	.word	0x58025458
 800507c:	5802546c 	.word	0x5802546c
 8005080:	58025480 	.word	0x58025480
 8005084:	58025494 	.word	0x58025494

08005088 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e205      	b.n	80054a6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2280      	movs	r2, #128	; 0x80
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e1fa      	b.n	80054a6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a8c      	ldr	r2, [pc, #560]	; (80052e8 <HAL_DMA_Abort_IT+0x260>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d04a      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a8b      	ldr	r2, [pc, #556]	; (80052ec <HAL_DMA_Abort_IT+0x264>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d045      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a89      	ldr	r2, [pc, #548]	; (80052f0 <HAL_DMA_Abort_IT+0x268>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d040      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a88      	ldr	r2, [pc, #544]	; (80052f4 <HAL_DMA_Abort_IT+0x26c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d03b      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a86      	ldr	r2, [pc, #536]	; (80052f8 <HAL_DMA_Abort_IT+0x270>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d036      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a85      	ldr	r2, [pc, #532]	; (80052fc <HAL_DMA_Abort_IT+0x274>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d031      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a83      	ldr	r2, [pc, #524]	; (8005300 <HAL_DMA_Abort_IT+0x278>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02c      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a82      	ldr	r2, [pc, #520]	; (8005304 <HAL_DMA_Abort_IT+0x27c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d027      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a80      	ldr	r2, [pc, #512]	; (8005308 <HAL_DMA_Abort_IT+0x280>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d022      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a7f      	ldr	r2, [pc, #508]	; (800530c <HAL_DMA_Abort_IT+0x284>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d01d      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7d      	ldr	r2, [pc, #500]	; (8005310 <HAL_DMA_Abort_IT+0x288>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a7c      	ldr	r2, [pc, #496]	; (8005314 <HAL_DMA_Abort_IT+0x28c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7a      	ldr	r2, [pc, #488]	; (8005318 <HAL_DMA_Abort_IT+0x290>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a79      	ldr	r2, [pc, #484]	; (800531c <HAL_DMA_Abort_IT+0x294>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a77      	ldr	r2, [pc, #476]	; (8005320 <HAL_DMA_Abort_IT+0x298>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_DMA_Abort_IT+0xc8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a76      	ldr	r2, [pc, #472]	; (8005324 <HAL_DMA_Abort_IT+0x29c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_DMA_Abort_IT+0xcc>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_DMA_Abort_IT+0xce>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d065      	beq.n	8005226 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a60      	ldr	r2, [pc, #384]	; (80052e8 <HAL_DMA_Abort_IT+0x260>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d04a      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5e      	ldr	r2, [pc, #376]	; (80052ec <HAL_DMA_Abort_IT+0x264>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d045      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a5d      	ldr	r2, [pc, #372]	; (80052f0 <HAL_DMA_Abort_IT+0x268>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d040      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a5b      	ldr	r2, [pc, #364]	; (80052f4 <HAL_DMA_Abort_IT+0x26c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d03b      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a5a      	ldr	r2, [pc, #360]	; (80052f8 <HAL_DMA_Abort_IT+0x270>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d036      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a58      	ldr	r2, [pc, #352]	; (80052fc <HAL_DMA_Abort_IT+0x274>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d031      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a57      	ldr	r2, [pc, #348]	; (8005300 <HAL_DMA_Abort_IT+0x278>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d02c      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a55      	ldr	r2, [pc, #340]	; (8005304 <HAL_DMA_Abort_IT+0x27c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d027      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a54      	ldr	r2, [pc, #336]	; (8005308 <HAL_DMA_Abort_IT+0x280>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d022      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a52      	ldr	r2, [pc, #328]	; (800530c <HAL_DMA_Abort_IT+0x284>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01d      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a51      	ldr	r2, [pc, #324]	; (8005310 <HAL_DMA_Abort_IT+0x288>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d018      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a4f      	ldr	r2, [pc, #316]	; (8005314 <HAL_DMA_Abort_IT+0x28c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <HAL_DMA_Abort_IT+0x290>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a4c      	ldr	r2, [pc, #304]	; (800531c <HAL_DMA_Abort_IT+0x294>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a4b      	ldr	r2, [pc, #300]	; (8005320 <HAL_DMA_Abort_IT+0x298>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_DMA_Abort_IT+0x17a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a49      	ldr	r2, [pc, #292]	; (8005324 <HAL_DMA_Abort_IT+0x29c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d108      	bne.n	8005214 <HAL_DMA_Abort_IT+0x18c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	e147      	b.n	80054a4 <HAL_DMA_Abort_IT+0x41c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e13e      	b.n	80054a4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 020e 	bic.w	r2, r2, #14
 8005234:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_DMA_Abort_IT+0x260>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d04a      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a29      	ldr	r2, [pc, #164]	; (80052ec <HAL_DMA_Abort_IT+0x264>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d045      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a28      	ldr	r2, [pc, #160]	; (80052f0 <HAL_DMA_Abort_IT+0x268>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d040      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <HAL_DMA_Abort_IT+0x26c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d03b      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <HAL_DMA_Abort_IT+0x270>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d036      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a23      	ldr	r2, [pc, #140]	; (80052fc <HAL_DMA_Abort_IT+0x274>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a22      	ldr	r2, [pc, #136]	; (8005300 <HAL_DMA_Abort_IT+0x278>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d02c      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a20      	ldr	r2, [pc, #128]	; (8005304 <HAL_DMA_Abort_IT+0x27c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d027      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1f      	ldr	r2, [pc, #124]	; (8005308 <HAL_DMA_Abort_IT+0x280>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1d      	ldr	r2, [pc, #116]	; (800530c <HAL_DMA_Abort_IT+0x284>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01d      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <HAL_DMA_Abort_IT+0x288>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1a      	ldr	r2, [pc, #104]	; (8005314 <HAL_DMA_Abort_IT+0x28c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a19      	ldr	r2, [pc, #100]	; (8005318 <HAL_DMA_Abort_IT+0x290>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_DMA_Abort_IT+0x294>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a16      	ldr	r2, [pc, #88]	; (8005320 <HAL_DMA_Abort_IT+0x298>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_DMA_Abort_IT+0x24e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a14      	ldr	r2, [pc, #80]	; (8005324 <HAL_DMA_Abort_IT+0x29c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d128      	bne.n	8005328 <HAL_DMA_Abort_IT+0x2a0>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e027      	b.n	8005338 <HAL_DMA_Abort_IT+0x2b0>
 80052e8:	40020010 	.word	0x40020010
 80052ec:	40020028 	.word	0x40020028
 80052f0:	40020040 	.word	0x40020040
 80052f4:	40020058 	.word	0x40020058
 80052f8:	40020070 	.word	0x40020070
 80052fc:	40020088 	.word	0x40020088
 8005300:	400200a0 	.word	0x400200a0
 8005304:	400200b8 	.word	0x400200b8
 8005308:	40020410 	.word	0x40020410
 800530c:	40020428 	.word	0x40020428
 8005310:	40020440 	.word	0x40020440
 8005314:	40020458 	.word	0x40020458
 8005318:	40020470 	.word	0x40020470
 800531c:	40020488 	.word	0x40020488
 8005320:	400204a0 	.word	0x400204a0
 8005324:	400204b8 	.word	0x400204b8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5c      	ldr	r2, [pc, #368]	; (80054b0 <HAL_DMA_Abort_IT+0x428>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d072      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a5b      	ldr	r2, [pc, #364]	; (80054b4 <HAL_DMA_Abort_IT+0x42c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d06d      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a59      	ldr	r2, [pc, #356]	; (80054b8 <HAL_DMA_Abort_IT+0x430>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d068      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a58      	ldr	r2, [pc, #352]	; (80054bc <HAL_DMA_Abort_IT+0x434>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d063      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a56      	ldr	r2, [pc, #344]	; (80054c0 <HAL_DMA_Abort_IT+0x438>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d05e      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a55      	ldr	r2, [pc, #340]	; (80054c4 <HAL_DMA_Abort_IT+0x43c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d059      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a53      	ldr	r2, [pc, #332]	; (80054c8 <HAL_DMA_Abort_IT+0x440>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d054      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a52      	ldr	r2, [pc, #328]	; (80054cc <HAL_DMA_Abort_IT+0x444>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d04f      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a50      	ldr	r2, [pc, #320]	; (80054d0 <HAL_DMA_Abort_IT+0x448>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d04a      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4f      	ldr	r2, [pc, #316]	; (80054d4 <HAL_DMA_Abort_IT+0x44c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d045      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4d      	ldr	r2, [pc, #308]	; (80054d8 <HAL_DMA_Abort_IT+0x450>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d040      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4c      	ldr	r2, [pc, #304]	; (80054dc <HAL_DMA_Abort_IT+0x454>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d03b      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <HAL_DMA_Abort_IT+0x458>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d036      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a49      	ldr	r2, [pc, #292]	; (80054e4 <HAL_DMA_Abort_IT+0x45c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d031      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a47      	ldr	r2, [pc, #284]	; (80054e8 <HAL_DMA_Abort_IT+0x460>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d02c      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a46      	ldr	r2, [pc, #280]	; (80054ec <HAL_DMA_Abort_IT+0x464>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d027      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a44      	ldr	r2, [pc, #272]	; (80054f0 <HAL_DMA_Abort_IT+0x468>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d022      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a43      	ldr	r2, [pc, #268]	; (80054f4 <HAL_DMA_Abort_IT+0x46c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d01d      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a41      	ldr	r2, [pc, #260]	; (80054f8 <HAL_DMA_Abort_IT+0x470>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d018      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <HAL_DMA_Abort_IT+0x474>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3e      	ldr	r2, [pc, #248]	; (8005500 <HAL_DMA_Abort_IT+0x478>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00e      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3d      	ldr	r2, [pc, #244]	; (8005504 <HAL_DMA_Abort_IT+0x47c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d009      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a3b      	ldr	r2, [pc, #236]	; (8005508 <HAL_DMA_Abort_IT+0x480>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <HAL_DMA_Abort_IT+0x3a0>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3a      	ldr	r2, [pc, #232]	; (800550c <HAL_DMA_Abort_IT+0x484>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_DMA_Abort_IT+0x3a4>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_DMA_Abort_IT+0x3a6>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d028      	beq.n	8005484 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005440:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	2201      	movs	r2, #1
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005460:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005482:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40020010 	.word	0x40020010
 80054b4:	40020028 	.word	0x40020028
 80054b8:	40020040 	.word	0x40020040
 80054bc:	40020058 	.word	0x40020058
 80054c0:	40020070 	.word	0x40020070
 80054c4:	40020088 	.word	0x40020088
 80054c8:	400200a0 	.word	0x400200a0
 80054cc:	400200b8 	.word	0x400200b8
 80054d0:	40020410 	.word	0x40020410
 80054d4:	40020428 	.word	0x40020428
 80054d8:	40020440 	.word	0x40020440
 80054dc:	40020458 	.word	0x40020458
 80054e0:	40020470 	.word	0x40020470
 80054e4:	40020488 	.word	0x40020488
 80054e8:	400204a0 	.word	0x400204a0
 80054ec:	400204b8 	.word	0x400204b8
 80054f0:	58025408 	.word	0x58025408
 80054f4:	5802541c 	.word	0x5802541c
 80054f8:	58025430 	.word	0x58025430
 80054fc:	58025444 	.word	0x58025444
 8005500:	58025458 	.word	0x58025458
 8005504:	5802546c 	.word	0x5802546c
 8005508:	58025480 	.word	0x58025480
 800550c:	58025494 	.word	0x58025494

08005510 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800551c:	4b67      	ldr	r3, [pc, #412]	; (80056bc <HAL_DMA_IRQHandler+0x1ac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a67      	ldr	r2, [pc, #412]	; (80056c0 <HAL_DMA_IRQHandler+0x1b0>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	0a9b      	lsrs	r3, r3, #10
 8005528:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a5f      	ldr	r2, [pc, #380]	; (80056c4 <HAL_DMA_IRQHandler+0x1b4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a5d      	ldr	r2, [pc, #372]	; (80056c8 <HAL_DMA_IRQHandler+0x1b8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a5c      	ldr	r2, [pc, #368]	; (80056cc <HAL_DMA_IRQHandler+0x1bc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a5a      	ldr	r2, [pc, #360]	; (80056d0 <HAL_DMA_IRQHandler+0x1c0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a59      	ldr	r2, [pc, #356]	; (80056d4 <HAL_DMA_IRQHandler+0x1c4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a57      	ldr	r2, [pc, #348]	; (80056d8 <HAL_DMA_IRQHandler+0x1c8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a56      	ldr	r2, [pc, #344]	; (80056dc <HAL_DMA_IRQHandler+0x1cc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a54      	ldr	r2, [pc, #336]	; (80056e0 <HAL_DMA_IRQHandler+0x1d0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a53      	ldr	r2, [pc, #332]	; (80056e4 <HAL_DMA_IRQHandler+0x1d4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a51      	ldr	r2, [pc, #324]	; (80056e8 <HAL_DMA_IRQHandler+0x1d8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a50      	ldr	r2, [pc, #320]	; (80056ec <HAL_DMA_IRQHandler+0x1dc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a4e      	ldr	r2, [pc, #312]	; (80056f0 <HAL_DMA_IRQHandler+0x1e0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a4d      	ldr	r2, [pc, #308]	; (80056f4 <HAL_DMA_IRQHandler+0x1e4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a4b      	ldr	r2, [pc, #300]	; (80056f8 <HAL_DMA_IRQHandler+0x1e8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <HAL_DMA_IRQHandler+0x1ec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_IRQHandler+0xd2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a48      	ldr	r2, [pc, #288]	; (8005700 <HAL_DMA_IRQHandler+0x1f0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_DMA_IRQHandler+0xd6>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <HAL_DMA_IRQHandler+0xd8>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 842b 	beq.w	8005e44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2208      	movs	r2, #8
 80055f8:	409a      	lsls	r2, r3
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80a2 	beq.w	8005748 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2e      	ldr	r2, [pc, #184]	; (80056c4 <HAL_DMA_IRQHandler+0x1b4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d04a      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2d      	ldr	r2, [pc, #180]	; (80056c8 <HAL_DMA_IRQHandler+0x1b8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d045      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2b      	ldr	r2, [pc, #172]	; (80056cc <HAL_DMA_IRQHandler+0x1bc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d040      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <HAL_DMA_IRQHandler+0x1c0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d03b      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <HAL_DMA_IRQHandler+0x1c4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d036      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <HAL_DMA_IRQHandler+0x1c8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d031      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a25      	ldr	r2, [pc, #148]	; (80056dc <HAL_DMA_IRQHandler+0x1cc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02c      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a24      	ldr	r2, [pc, #144]	; (80056e0 <HAL_DMA_IRQHandler+0x1d0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d027      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_DMA_IRQHandler+0x1d4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <HAL_DMA_IRQHandler+0x1d8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d01d      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HAL_DMA_IRQHandler+0x1dc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <HAL_DMA_IRQHandler+0x1e0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_DMA_IRQHandler+0x1e4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <HAL_DMA_IRQHandler+0x1e8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a19      	ldr	r2, [pc, #100]	; (80056fc <HAL_DMA_IRQHandler+0x1ec>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x194>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a18      	ldr	r2, [pc, #96]	; (8005700 <HAL_DMA_IRQHandler+0x1f0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d12f      	bne.n	8005704 <HAL_DMA_IRQHandler+0x1f4>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e02e      	b.n	8005718 <HAL_DMA_IRQHandler+0x208>
 80056ba:	bf00      	nop
 80056bc:	24000000 	.word	0x24000000
 80056c0:	1b4e81b5 	.word	0x1b4e81b5
 80056c4:	40020010 	.word	0x40020010
 80056c8:	40020028 	.word	0x40020028
 80056cc:	40020040 	.word	0x40020040
 80056d0:	40020058 	.word	0x40020058
 80056d4:	40020070 	.word	0x40020070
 80056d8:	40020088 	.word	0x40020088
 80056dc:	400200a0 	.word	0x400200a0
 80056e0:	400200b8 	.word	0x400200b8
 80056e4:	40020410 	.word	0x40020410
 80056e8:	40020428 	.word	0x40020428
 80056ec:	40020440 	.word	0x40020440
 80056f0:	40020458 	.word	0x40020458
 80056f4:	40020470 	.word	0x40020470
 80056f8:	40020488 	.word	0x40020488
 80056fc:	400204a0 	.word	0x400204a0
 8005700:	400204b8 	.word	0x400204b8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf14      	ite	ne
 8005712:	2301      	movne	r3, #1
 8005714:	2300      	moveq	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0204 	bic.w	r2, r2, #4
 800572a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	2208      	movs	r2, #8
 8005736:	409a      	lsls	r2, r3
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	f043 0201 	orr.w	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d06e      	beq.n	800583c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a69      	ldr	r2, [pc, #420]	; (8005908 <HAL_DMA_IRQHandler+0x3f8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d04a      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a67      	ldr	r2, [pc, #412]	; (800590c <HAL_DMA_IRQHandler+0x3fc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d045      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a66      	ldr	r2, [pc, #408]	; (8005910 <HAL_DMA_IRQHandler+0x400>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d040      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a64      	ldr	r2, [pc, #400]	; (8005914 <HAL_DMA_IRQHandler+0x404>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d03b      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a63      	ldr	r2, [pc, #396]	; (8005918 <HAL_DMA_IRQHandler+0x408>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d036      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a61      	ldr	r2, [pc, #388]	; (800591c <HAL_DMA_IRQHandler+0x40c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d031      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a60      	ldr	r2, [pc, #384]	; (8005920 <HAL_DMA_IRQHandler+0x410>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d02c      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5e      	ldr	r2, [pc, #376]	; (8005924 <HAL_DMA_IRQHandler+0x414>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d027      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5d      	ldr	r2, [pc, #372]	; (8005928 <HAL_DMA_IRQHandler+0x418>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d022      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a5b      	ldr	r2, [pc, #364]	; (800592c <HAL_DMA_IRQHandler+0x41c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01d      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a5a      	ldr	r2, [pc, #360]	; (8005930 <HAL_DMA_IRQHandler+0x420>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d018      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a58      	ldr	r2, [pc, #352]	; (8005934 <HAL_DMA_IRQHandler+0x424>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a57      	ldr	r2, [pc, #348]	; (8005938 <HAL_DMA_IRQHandler+0x428>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00e      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a55      	ldr	r2, [pc, #340]	; (800593c <HAL_DMA_IRQHandler+0x42c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d009      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a54      	ldr	r2, [pc, #336]	; (8005940 <HAL_DMA_IRQHandler+0x430>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d004      	beq.n	80057fe <HAL_DMA_IRQHandler+0x2ee>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a52      	ldr	r2, [pc, #328]	; (8005944 <HAL_DMA_IRQHandler+0x434>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d10a      	bne.n	8005814 <HAL_DMA_IRQHandler+0x304>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e003      	b.n	800581c <HAL_DMA_IRQHandler+0x30c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	2201      	movs	r2, #1
 800582a:	409a      	lsls	r2, r3
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005834:	f043 0202 	orr.w	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	2204      	movs	r2, #4
 8005846:	409a      	lsls	r2, r3
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 808f 	beq.w	8005970 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <HAL_DMA_IRQHandler+0x3f8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d04a      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <HAL_DMA_IRQHandler+0x3fc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d045      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a29      	ldr	r2, [pc, #164]	; (8005910 <HAL_DMA_IRQHandler+0x400>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d040      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a27      	ldr	r2, [pc, #156]	; (8005914 <HAL_DMA_IRQHandler+0x404>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d03b      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a26      	ldr	r2, [pc, #152]	; (8005918 <HAL_DMA_IRQHandler+0x408>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d036      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <HAL_DMA_IRQHandler+0x40c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d031      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a23      	ldr	r2, [pc, #140]	; (8005920 <HAL_DMA_IRQHandler+0x410>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d02c      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a21      	ldr	r2, [pc, #132]	; (8005924 <HAL_DMA_IRQHandler+0x414>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d027      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a20      	ldr	r2, [pc, #128]	; (8005928 <HAL_DMA_IRQHandler+0x418>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1e      	ldr	r2, [pc, #120]	; (800592c <HAL_DMA_IRQHandler+0x41c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01d      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_DMA_IRQHandler+0x420>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_DMA_IRQHandler+0x424>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1a      	ldr	r2, [pc, #104]	; (8005938 <HAL_DMA_IRQHandler+0x428>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_DMA_IRQHandler+0x42c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a17      	ldr	r2, [pc, #92]	; (8005940 <HAL_DMA_IRQHandler+0x430>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x3e2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_DMA_IRQHandler+0x434>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d12a      	bne.n	8005948 <HAL_DMA_IRQHandler+0x438>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf14      	ite	ne
 8005900:	2301      	movne	r3, #1
 8005902:	2300      	moveq	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e023      	b.n	8005950 <HAL_DMA_IRQHandler+0x440>
 8005908:	40020010 	.word	0x40020010
 800590c:	40020028 	.word	0x40020028
 8005910:	40020040 	.word	0x40020040
 8005914:	40020058 	.word	0x40020058
 8005918:	40020070 	.word	0x40020070
 800591c:	40020088 	.word	0x40020088
 8005920:	400200a0 	.word	0x400200a0
 8005924:	400200b8 	.word	0x400200b8
 8005928:	40020410 	.word	0x40020410
 800592c:	40020428 	.word	0x40020428
 8005930:	40020440 	.word	0x40020440
 8005934:	40020458 	.word	0x40020458
 8005938:	40020470 	.word	0x40020470
 800593c:	40020488 	.word	0x40020488
 8005940:	400204a0 	.word	0x400204a0
 8005944:	400204b8 	.word	0x400204b8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2204      	movs	r2, #4
 800595e:	409a      	lsls	r2, r3
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	f043 0204 	orr.w	r2, r3, #4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2210      	movs	r2, #16
 800597a:	409a      	lsls	r2, r3
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80a6 	beq.w	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a85      	ldr	r2, [pc, #532]	; (8005ba0 <HAL_DMA_IRQHandler+0x690>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04a      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a83      	ldr	r2, [pc, #524]	; (8005ba4 <HAL_DMA_IRQHandler+0x694>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a82      	ldr	r2, [pc, #520]	; (8005ba8 <HAL_DMA_IRQHandler+0x698>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d040      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a80      	ldr	r2, [pc, #512]	; (8005bac <HAL_DMA_IRQHandler+0x69c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d03b      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a7f      	ldr	r2, [pc, #508]	; (8005bb0 <HAL_DMA_IRQHandler+0x6a0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d036      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a7d      	ldr	r2, [pc, #500]	; (8005bb4 <HAL_DMA_IRQHandler+0x6a4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a7c      	ldr	r2, [pc, #496]	; (8005bb8 <HAL_DMA_IRQHandler+0x6a8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d02c      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a7a      	ldr	r2, [pc, #488]	; (8005bbc <HAL_DMA_IRQHandler+0x6ac>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a79      	ldr	r2, [pc, #484]	; (8005bc0 <HAL_DMA_IRQHandler+0x6b0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a77      	ldr	r2, [pc, #476]	; (8005bc4 <HAL_DMA_IRQHandler+0x6b4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a76      	ldr	r2, [pc, #472]	; (8005bc8 <HAL_DMA_IRQHandler+0x6b8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a74      	ldr	r2, [pc, #464]	; (8005bcc <HAL_DMA_IRQHandler+0x6bc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a73      	ldr	r2, [pc, #460]	; (8005bd0 <HAL_DMA_IRQHandler+0x6c0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a71      	ldr	r2, [pc, #452]	; (8005bd4 <HAL_DMA_IRQHandler+0x6c4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a70      	ldr	r2, [pc, #448]	; (8005bd8 <HAL_DMA_IRQHandler+0x6c8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x516>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a6e      	ldr	r2, [pc, #440]	; (8005bdc <HAL_DMA_IRQHandler+0x6cc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d10a      	bne.n	8005a3c <HAL_DMA_IRQHandler+0x52c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e009      	b.n	8005a50 <HAL_DMA_IRQHandler+0x540>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d03e      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d018      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d108      	bne.n	8005a92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d024      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
 8005a90:	e01f      	b.n	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01b      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	e016      	b.n	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0208 	bic.w	r2, r2, #8
 8005ac0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2220      	movs	r2, #32
 8005adc:	409a      	lsls	r2, r3
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8110 	beq.w	8005d08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <HAL_DMA_IRQHandler+0x690>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d04a      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <HAL_DMA_IRQHandler+0x694>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d045      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_DMA_IRQHandler+0x698>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d040      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a28      	ldr	r2, [pc, #160]	; (8005bac <HAL_DMA_IRQHandler+0x69c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d03b      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <HAL_DMA_IRQHandler+0x6a0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d036      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a25      	ldr	r2, [pc, #148]	; (8005bb4 <HAL_DMA_IRQHandler+0x6a4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d031      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a23      	ldr	r2, [pc, #140]	; (8005bb8 <HAL_DMA_IRQHandler+0x6a8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d02c      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <HAL_DMA_IRQHandler+0x6ac>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d027      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <HAL_DMA_IRQHandler+0x6b0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d022      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1f      	ldr	r2, [pc, #124]	; (8005bc4 <HAL_DMA_IRQHandler+0x6b4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_DMA_IRQHandler+0x6b8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d018      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <HAL_DMA_IRQHandler+0x6bc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1a      	ldr	r2, [pc, #104]	; (8005bd0 <HAL_DMA_IRQHandler+0x6c0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <HAL_DMA_IRQHandler+0x6c4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_DMA_IRQHandler+0x6c8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x678>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a16      	ldr	r2, [pc, #88]	; (8005bdc <HAL_DMA_IRQHandler+0x6cc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d12b      	bne.n	8005be0 <HAL_DMA_IRQHandler+0x6d0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bf14      	ite	ne
 8005b96:	2301      	movne	r3, #1
 8005b98:	2300      	moveq	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	e02a      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x6e4>
 8005b9e:	bf00      	nop
 8005ba0:	40020010 	.word	0x40020010
 8005ba4:	40020028 	.word	0x40020028
 8005ba8:	40020040 	.word	0x40020040
 8005bac:	40020058 	.word	0x40020058
 8005bb0:	40020070 	.word	0x40020070
 8005bb4:	40020088 	.word	0x40020088
 8005bb8:	400200a0 	.word	0x400200a0
 8005bbc:	400200b8 	.word	0x400200b8
 8005bc0:	40020410 	.word	0x40020410
 8005bc4:	40020428 	.word	0x40020428
 8005bc8:	40020440 	.word	0x40020440
 8005bcc:	40020458 	.word	0x40020458
 8005bd0:	40020470 	.word	0x40020470
 8005bd4:	40020488 	.word	0x40020488
 8005bd8:	400204a0 	.word	0x400204a0
 8005bdc:	400204b8 	.word	0x400204b8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8087 	beq.w	8005d08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2220      	movs	r2, #32
 8005c04:	409a      	lsls	r2, r3
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d139      	bne.n	8005c8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0216 	bic.w	r2, r2, #22
 8005c24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <HAL_DMA_IRQHandler+0x736>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0208 	bic.w	r2, r2, #8
 8005c54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	223f      	movs	r2, #63	; 0x3f
 8005c60:	409a      	lsls	r2, r3
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 834a 	beq.w	8006314 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
          }
          return;
 8005c88:	e344      	b.n	8006314 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d018      	beq.n	8005cca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d02c      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	e027      	b.n	8005d08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d023      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
 8005cc8:	e01e      	b.n	8005d08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10f      	bne.n	8005cf8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0210 	bic.w	r2, r2, #16
 8005ce6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8306 	beq.w	800631e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8088 	beq.w	8005e30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2204      	movs	r2, #4
 8005d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a7a      	ldr	r2, [pc, #488]	; (8005f18 <HAL_DMA_IRQHandler+0xa08>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d04a      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a79      	ldr	r2, [pc, #484]	; (8005f1c <HAL_DMA_IRQHandler+0xa0c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d045      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a77      	ldr	r2, [pc, #476]	; (8005f20 <HAL_DMA_IRQHandler+0xa10>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d040      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a76      	ldr	r2, [pc, #472]	; (8005f24 <HAL_DMA_IRQHandler+0xa14>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d03b      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a74      	ldr	r2, [pc, #464]	; (8005f28 <HAL_DMA_IRQHandler+0xa18>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d036      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a73      	ldr	r2, [pc, #460]	; (8005f2c <HAL_DMA_IRQHandler+0xa1c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a71      	ldr	r2, [pc, #452]	; (8005f30 <HAL_DMA_IRQHandler+0xa20>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d02c      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a70      	ldr	r2, [pc, #448]	; (8005f34 <HAL_DMA_IRQHandler+0xa24>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d027      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6e      	ldr	r2, [pc, #440]	; (8005f38 <HAL_DMA_IRQHandler+0xa28>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a6d      	ldr	r2, [pc, #436]	; (8005f3c <HAL_DMA_IRQHandler+0xa2c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a6b      	ldr	r2, [pc, #428]	; (8005f40 <HAL_DMA_IRQHandler+0xa30>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a6a      	ldr	r2, [pc, #424]	; (8005f44 <HAL_DMA_IRQHandler+0xa34>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	; (8005f48 <HAL_DMA_IRQHandler+0xa38>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a67      	ldr	r2, [pc, #412]	; (8005f4c <HAL_DMA_IRQHandler+0xa3c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a65      	ldr	r2, [pc, #404]	; (8005f50 <HAL_DMA_IRQHandler+0xa40>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x8b8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a64      	ldr	r2, [pc, #400]	; (8005f54 <HAL_DMA_IRQHandler+0xa44>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_DMA_IRQHandler+0x8ca>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e007      	b.n	8005dea <HAL_DMA_IRQHandler+0x8da>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d307      	bcc.n	8005e06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f2      	bne.n	8005dea <HAL_DMA_IRQHandler+0x8da>
 8005e04:	e000      	b.n	8005e08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e06:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2203      	movs	r2, #3
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005e26:	e003      	b.n	8005e30 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8272 	beq.w	800631e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	e26c      	b.n	800631e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a43      	ldr	r2, [pc, #268]	; (8005f58 <HAL_DMA_IRQHandler+0xa48>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a42      	ldr	r2, [pc, #264]	; (8005f5c <HAL_DMA_IRQHandler+0xa4c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d01d      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a40      	ldr	r2, [pc, #256]	; (8005f60 <HAL_DMA_IRQHandler+0xa50>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <HAL_DMA_IRQHandler+0xa54>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <HAL_DMA_IRQHandler+0xa58>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <HAL_DMA_IRQHandler+0xa5c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_DMA_IRQHandler+0xa60>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x984>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a39      	ldr	r2, [pc, #228]	; (8005f74 <HAL_DMA_IRQHandler+0xa64>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d101      	bne.n	8005e98 <HAL_DMA_IRQHandler+0x988>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_DMA_IRQHandler+0x98a>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 823f 	beq.w	800631e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	409a      	lsls	r2, r3
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80cd 	beq.w	8006058 <HAL_DMA_IRQHandler+0xb48>
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80c7 	beq.w	8006058 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d049      	beq.n	8005f78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8210 	beq.w	8006318 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f00:	e20a      	b.n	8006318 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8206 	beq.w	8006318 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f14:	e200      	b.n	8006318 <HAL_DMA_IRQHandler+0xe08>
 8005f16:	bf00      	nop
 8005f18:	40020010 	.word	0x40020010
 8005f1c:	40020028 	.word	0x40020028
 8005f20:	40020040 	.word	0x40020040
 8005f24:	40020058 	.word	0x40020058
 8005f28:	40020070 	.word	0x40020070
 8005f2c:	40020088 	.word	0x40020088
 8005f30:	400200a0 	.word	0x400200a0
 8005f34:	400200b8 	.word	0x400200b8
 8005f38:	40020410 	.word	0x40020410
 8005f3c:	40020428 	.word	0x40020428
 8005f40:	40020440 	.word	0x40020440
 8005f44:	40020458 	.word	0x40020458
 8005f48:	40020470 	.word	0x40020470
 8005f4c:	40020488 	.word	0x40020488
 8005f50:	400204a0 	.word	0x400204a0
 8005f54:	400204b8 	.word	0x400204b8
 8005f58:	58025408 	.word	0x58025408
 8005f5c:	5802541c 	.word	0x5802541c
 8005f60:	58025430 	.word	0x58025430
 8005f64:	58025444 	.word	0x58025444
 8005f68:	58025458 	.word	0x58025458
 8005f6c:	5802546c 	.word	0x5802546c
 8005f70:	58025480 	.word	0x58025480
 8005f74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d160      	bne.n	8006044 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a8c      	ldr	r2, [pc, #560]	; (80061b8 <HAL_DMA_IRQHandler+0xca8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d04a      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a8a      	ldr	r2, [pc, #552]	; (80061bc <HAL_DMA_IRQHandler+0xcac>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d045      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a89      	ldr	r2, [pc, #548]	; (80061c0 <HAL_DMA_IRQHandler+0xcb0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d040      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a87      	ldr	r2, [pc, #540]	; (80061c4 <HAL_DMA_IRQHandler+0xcb4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d03b      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a86      	ldr	r2, [pc, #536]	; (80061c8 <HAL_DMA_IRQHandler+0xcb8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d036      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a84      	ldr	r2, [pc, #528]	; (80061cc <HAL_DMA_IRQHandler+0xcbc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d031      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a83      	ldr	r2, [pc, #524]	; (80061d0 <HAL_DMA_IRQHandler+0xcc0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d02c      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a81      	ldr	r2, [pc, #516]	; (80061d4 <HAL_DMA_IRQHandler+0xcc4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d027      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a80      	ldr	r2, [pc, #512]	; (80061d8 <HAL_DMA_IRQHandler+0xcc8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d022      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a7e      	ldr	r2, [pc, #504]	; (80061dc <HAL_DMA_IRQHandler+0xccc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d01d      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a7d      	ldr	r2, [pc, #500]	; (80061e0 <HAL_DMA_IRQHandler+0xcd0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d018      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a7b      	ldr	r2, [pc, #492]	; (80061e4 <HAL_DMA_IRQHandler+0xcd4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a7a      	ldr	r2, [pc, #488]	; (80061e8 <HAL_DMA_IRQHandler+0xcd8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00e      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a78      	ldr	r2, [pc, #480]	; (80061ec <HAL_DMA_IRQHandler+0xcdc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d009      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a77      	ldr	r2, [pc, #476]	; (80061f0 <HAL_DMA_IRQHandler+0xce0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d004      	beq.n	8006022 <HAL_DMA_IRQHandler+0xb12>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a75      	ldr	r2, [pc, #468]	; (80061f4 <HAL_DMA_IRQHandler+0xce4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d108      	bne.n	8006034 <HAL_DMA_IRQHandler+0xb24>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0208 	bic.w	r2, r2, #8
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e007      	b.n	8006044 <HAL_DMA_IRQHandler+0xb34>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0204 	bic.w	r2, r2, #4
 8006042:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8165 	beq.w	8006318 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006056:	e15f      	b.n	8006318 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	2202      	movs	r2, #2
 8006062:	409a      	lsls	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4013      	ands	r3, r2
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 80c5 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xce8>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80bf 	beq.w	80061f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2202      	movs	r2, #2
 8006084:	409a      	lsls	r2, r3
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d018      	beq.n	80060c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 813a 	beq.w	800631c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060b0:	e134      	b.n	800631c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8130 	beq.w	800631c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060c4:	e12a      	b.n	800631c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d168      	bne.n	80061a2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <HAL_DMA_IRQHandler+0xca8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d04a      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a37      	ldr	r2, [pc, #220]	; (80061bc <HAL_DMA_IRQHandler+0xcac>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d045      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a35      	ldr	r2, [pc, #212]	; (80061c0 <HAL_DMA_IRQHandler+0xcb0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d040      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <HAL_DMA_IRQHandler+0xcb4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d03b      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a32      	ldr	r2, [pc, #200]	; (80061c8 <HAL_DMA_IRQHandler+0xcb8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d036      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a31      	ldr	r2, [pc, #196]	; (80061cc <HAL_DMA_IRQHandler+0xcbc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d031      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <HAL_DMA_IRQHandler+0xcc0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d02c      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2e      	ldr	r2, [pc, #184]	; (80061d4 <HAL_DMA_IRQHandler+0xcc4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d027      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2c      	ldr	r2, [pc, #176]	; (80061d8 <HAL_DMA_IRQHandler+0xcc8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d022      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <HAL_DMA_IRQHandler+0xccc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d01d      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a29      	ldr	r2, [pc, #164]	; (80061e0 <HAL_DMA_IRQHandler+0xcd0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d018      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a28      	ldr	r2, [pc, #160]	; (80061e4 <HAL_DMA_IRQHandler+0xcd4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <HAL_DMA_IRQHandler+0xcd8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00e      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a25      	ldr	r2, [pc, #148]	; (80061ec <HAL_DMA_IRQHandler+0xcdc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d009      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a23      	ldr	r2, [pc, #140]	; (80061f0 <HAL_DMA_IRQHandler+0xce0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_DMA_IRQHandler+0xc60>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a22      	ldr	r2, [pc, #136]	; (80061f4 <HAL_DMA_IRQHandler+0xce4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <HAL_DMA_IRQHandler+0xc72>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0214 	bic.w	r2, r2, #20
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e007      	b.n	8006192 <HAL_DMA_IRQHandler+0xc82>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 020a 	bic.w	r2, r2, #10
 8006190:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80b8 	beq.w	800631c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b4:	e0b2      	b.n	800631c <HAL_DMA_IRQHandler+0xe0c>
 80061b6:	bf00      	nop
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	2208      	movs	r2, #8
 8006202:	409a      	lsls	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8088 	beq.w	800631e <HAL_DMA_IRQHandler+0xe0e>
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8082 	beq.w	800631e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a41      	ldr	r2, [pc, #260]	; (8006324 <HAL_DMA_IRQHandler+0xe14>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d04a      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3f      	ldr	r2, [pc, #252]	; (8006328 <HAL_DMA_IRQHandler+0xe18>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d045      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a3e      	ldr	r2, [pc, #248]	; (800632c <HAL_DMA_IRQHandler+0xe1c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d040      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a3c      	ldr	r2, [pc, #240]	; (8006330 <HAL_DMA_IRQHandler+0xe20>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d03b      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a3b      	ldr	r2, [pc, #236]	; (8006334 <HAL_DMA_IRQHandler+0xe24>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d036      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a39      	ldr	r2, [pc, #228]	; (8006338 <HAL_DMA_IRQHandler+0xe28>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d031      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a38      	ldr	r2, [pc, #224]	; (800633c <HAL_DMA_IRQHandler+0xe2c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d02c      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a36      	ldr	r2, [pc, #216]	; (8006340 <HAL_DMA_IRQHandler+0xe30>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d027      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a35      	ldr	r2, [pc, #212]	; (8006344 <HAL_DMA_IRQHandler+0xe34>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d022      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a33      	ldr	r2, [pc, #204]	; (8006348 <HAL_DMA_IRQHandler+0xe38>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a32      	ldr	r2, [pc, #200]	; (800634c <HAL_DMA_IRQHandler+0xe3c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d018      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_DMA_IRQHandler+0xe40>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2f      	ldr	r2, [pc, #188]	; (8006354 <HAL_DMA_IRQHandler+0xe44>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a2d      	ldr	r2, [pc, #180]	; (8006358 <HAL_DMA_IRQHandler+0xe48>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2c      	ldr	r2, [pc, #176]	; (800635c <HAL_DMA_IRQHandler+0xe4c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_DMA_IRQHandler+0xdaa>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <HAL_DMA_IRQHandler+0xe50>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <HAL_DMA_IRQHandler+0xdbc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 021c 	bic.w	r2, r2, #28
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e007      	b.n	80062dc <HAL_DMA_IRQHandler+0xdcc>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 020e 	bic.w	r2, r2, #14
 80062da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2201      	movs	r2, #1
 80062e6:	409a      	lsls	r2, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	e004      	b.n	800631e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006314:	bf00      	nop
 8006316:	e002      	b.n	800631e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006318:	bf00      	nop
 800631a:	e000      	b.n	800631e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800631c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40020010 	.word	0x40020010
 8006328:	40020028 	.word	0x40020028
 800632c:	40020040 	.word	0x40020040
 8006330:	40020058 	.word	0x40020058
 8006334:	40020070 	.word	0x40020070
 8006338:	40020088 	.word	0x40020088
 800633c:	400200a0 	.word	0x400200a0
 8006340:	400200b8 	.word	0x400200b8
 8006344:	40020410 	.word	0x40020410
 8006348:	40020428 	.word	0x40020428
 800634c:	40020440 	.word	0x40020440
 8006350:	40020458 	.word	0x40020458
 8006354:	40020470 	.word	0x40020470
 8006358:	40020488 	.word	0x40020488
 800635c:	400204a0 	.word	0x400204a0
 8006360:	400204b8 	.word	0x400204b8

08006364 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a84      	ldr	r2, [pc, #528]	; (8006594 <DMA_SetConfig+0x230>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d072      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a82      	ldr	r2, [pc, #520]	; (8006598 <DMA_SetConfig+0x234>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d06d      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a81      	ldr	r2, [pc, #516]	; (800659c <DMA_SetConfig+0x238>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d068      	beq.n	800646e <DMA_SetConfig+0x10a>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a7f      	ldr	r2, [pc, #508]	; (80065a0 <DMA_SetConfig+0x23c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d063      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a7e      	ldr	r2, [pc, #504]	; (80065a4 <DMA_SetConfig+0x240>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d05e      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a7c      	ldr	r2, [pc, #496]	; (80065a8 <DMA_SetConfig+0x244>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d059      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a7b      	ldr	r2, [pc, #492]	; (80065ac <DMA_SetConfig+0x248>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d054      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a79      	ldr	r2, [pc, #484]	; (80065b0 <DMA_SetConfig+0x24c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d04f      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a78      	ldr	r2, [pc, #480]	; (80065b4 <DMA_SetConfig+0x250>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d04a      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a76      	ldr	r2, [pc, #472]	; (80065b8 <DMA_SetConfig+0x254>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d045      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a75      	ldr	r2, [pc, #468]	; (80065bc <DMA_SetConfig+0x258>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d040      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a73      	ldr	r2, [pc, #460]	; (80065c0 <DMA_SetConfig+0x25c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d03b      	beq.n	800646e <DMA_SetConfig+0x10a>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a72      	ldr	r2, [pc, #456]	; (80065c4 <DMA_SetConfig+0x260>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d036      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a70      	ldr	r2, [pc, #448]	; (80065c8 <DMA_SetConfig+0x264>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d031      	beq.n	800646e <DMA_SetConfig+0x10a>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a6f      	ldr	r2, [pc, #444]	; (80065cc <DMA_SetConfig+0x268>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d02c      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a6d      	ldr	r2, [pc, #436]	; (80065d0 <DMA_SetConfig+0x26c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d027      	beq.n	800646e <DMA_SetConfig+0x10a>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a6c      	ldr	r2, [pc, #432]	; (80065d4 <DMA_SetConfig+0x270>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d022      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a6a      	ldr	r2, [pc, #424]	; (80065d8 <DMA_SetConfig+0x274>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01d      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a69      	ldr	r2, [pc, #420]	; (80065dc <DMA_SetConfig+0x278>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d018      	beq.n	800646e <DMA_SetConfig+0x10a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a67      	ldr	r2, [pc, #412]	; (80065e0 <DMA_SetConfig+0x27c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a66      	ldr	r2, [pc, #408]	; (80065e4 <DMA_SetConfig+0x280>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00e      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a64      	ldr	r2, [pc, #400]	; (80065e8 <DMA_SetConfig+0x284>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <DMA_SetConfig+0x10a>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a63      	ldr	r2, [pc, #396]	; (80065ec <DMA_SetConfig+0x288>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d004      	beq.n	800646e <DMA_SetConfig+0x10a>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a61      	ldr	r2, [pc, #388]	; (80065f0 <DMA_SetConfig+0x28c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d101      	bne.n	8006472 <DMA_SetConfig+0x10e>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <DMA_SetConfig+0x110>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006480:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006492:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3e      	ldr	r2, [pc, #248]	; (8006594 <DMA_SetConfig+0x230>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d04a      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a3d      	ldr	r2, [pc, #244]	; (8006598 <DMA_SetConfig+0x234>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d045      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a3b      	ldr	r2, [pc, #236]	; (800659c <DMA_SetConfig+0x238>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a3a      	ldr	r2, [pc, #232]	; (80065a0 <DMA_SetConfig+0x23c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d03b      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a38      	ldr	r2, [pc, #224]	; (80065a4 <DMA_SetConfig+0x240>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d036      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a37      	ldr	r2, [pc, #220]	; (80065a8 <DMA_SetConfig+0x244>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d031      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a35      	ldr	r2, [pc, #212]	; (80065ac <DMA_SetConfig+0x248>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02c      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <DMA_SetConfig+0x24c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d027      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a32      	ldr	r2, [pc, #200]	; (80065b4 <DMA_SetConfig+0x250>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a31      	ldr	r2, [pc, #196]	; (80065b8 <DMA_SetConfig+0x254>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2f      	ldr	r2, [pc, #188]	; (80065bc <DMA_SetConfig+0x258>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <DMA_SetConfig+0x25c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a2c      	ldr	r2, [pc, #176]	; (80065c4 <DMA_SetConfig+0x260>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a2b      	ldr	r2, [pc, #172]	; (80065c8 <DMA_SetConfig+0x264>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a29      	ldr	r2, [pc, #164]	; (80065cc <DMA_SetConfig+0x268>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <DMA_SetConfig+0x1d0>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a28      	ldr	r2, [pc, #160]	; (80065d0 <DMA_SetConfig+0x26c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <DMA_SetConfig+0x1d4>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <DMA_SetConfig+0x1d6>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d05a      	beq.n	80065f4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	223f      	movs	r2, #63	; 0x3f
 8006548:	409a      	lsls	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800655c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d108      	bne.n	8006580 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800657e:	e087      	b.n	8006690 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]
}
 8006590:	e07e      	b.n	8006690 <DMA_SetConfig+0x32c>
 8006592:	bf00      	nop
 8006594:	40020010 	.word	0x40020010
 8006598:	40020028 	.word	0x40020028
 800659c:	40020040 	.word	0x40020040
 80065a0:	40020058 	.word	0x40020058
 80065a4:	40020070 	.word	0x40020070
 80065a8:	40020088 	.word	0x40020088
 80065ac:	400200a0 	.word	0x400200a0
 80065b0:	400200b8 	.word	0x400200b8
 80065b4:	40020410 	.word	0x40020410
 80065b8:	40020428 	.word	0x40020428
 80065bc:	40020440 	.word	0x40020440
 80065c0:	40020458 	.word	0x40020458
 80065c4:	40020470 	.word	0x40020470
 80065c8:	40020488 	.word	0x40020488
 80065cc:	400204a0 	.word	0x400204a0
 80065d0:	400204b8 	.word	0x400204b8
 80065d4:	58025408 	.word	0x58025408
 80065d8:	5802541c 	.word	0x5802541c
 80065dc:	58025430 	.word	0x58025430
 80065e0:	58025444 	.word	0x58025444
 80065e4:	58025458 	.word	0x58025458
 80065e8:	5802546c 	.word	0x5802546c
 80065ec:	58025480 	.word	0x58025480
 80065f0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a28      	ldr	r2, [pc, #160]	; (800669c <DMA_SetConfig+0x338>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d022      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <DMA_SetConfig+0x33c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d01d      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a25      	ldr	r2, [pc, #148]	; (80066a4 <DMA_SetConfig+0x340>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d018      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a24      	ldr	r2, [pc, #144]	; (80066a8 <DMA_SetConfig+0x344>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a22      	ldr	r2, [pc, #136]	; (80066ac <DMA_SetConfig+0x348>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00e      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <DMA_SetConfig+0x34c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <DMA_SetConfig+0x350>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <DMA_SetConfig+0x2e0>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <DMA_SetConfig+0x354>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <DMA_SetConfig+0x2e4>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <DMA_SetConfig+0x2e6>
 8006648:	2300      	movs	r3, #0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d020      	beq.n	8006690 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2201      	movs	r2, #1
 8006658:	409a      	lsls	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d108      	bne.n	8006680 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	60da      	str	r2, [r3, #12]
}
 800667e:	e007      	b.n	8006690 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	58025408 	.word	0x58025408
 80066a0:	5802541c 	.word	0x5802541c
 80066a4:	58025430 	.word	0x58025430
 80066a8:	58025444 	.word	0x58025444
 80066ac:	58025458 	.word	0x58025458
 80066b0:	5802546c 	.word	0x5802546c
 80066b4:	58025480 	.word	0x58025480
 80066b8:	58025494 	.word	0x58025494

080066bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a42      	ldr	r2, [pc, #264]	; (80067d4 <DMA_CalcBaseAndBitshift+0x118>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d04a      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a41      	ldr	r2, [pc, #260]	; (80067d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d045      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a3f      	ldr	r2, [pc, #252]	; (80067dc <DMA_CalcBaseAndBitshift+0x120>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d040      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a3e      	ldr	r2, [pc, #248]	; (80067e0 <DMA_CalcBaseAndBitshift+0x124>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d03b      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a3c      	ldr	r2, [pc, #240]	; (80067e4 <DMA_CalcBaseAndBitshift+0x128>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d036      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3b      	ldr	r2, [pc, #236]	; (80067e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d031      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a39      	ldr	r2, [pc, #228]	; (80067ec <DMA_CalcBaseAndBitshift+0x130>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02c      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a38      	ldr	r2, [pc, #224]	; (80067f0 <DMA_CalcBaseAndBitshift+0x134>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d027      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a36      	ldr	r2, [pc, #216]	; (80067f4 <DMA_CalcBaseAndBitshift+0x138>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d022      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a35      	ldr	r2, [pc, #212]	; (80067f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d01d      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a33      	ldr	r2, [pc, #204]	; (80067fc <DMA_CalcBaseAndBitshift+0x140>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a32      	ldr	r2, [pc, #200]	; (8006800 <DMA_CalcBaseAndBitshift+0x144>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a30      	ldr	r2, [pc, #192]	; (8006804 <DMA_CalcBaseAndBitshift+0x148>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2f      	ldr	r2, [pc, #188]	; (8006808 <DMA_CalcBaseAndBitshift+0x14c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2d      	ldr	r2, [pc, #180]	; (800680c <DMA_CalcBaseAndBitshift+0x150>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <DMA_CalcBaseAndBitshift+0xa8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <DMA_CalcBaseAndBitshift+0x154>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d101      	bne.n	8006768 <DMA_CalcBaseAndBitshift+0xac>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <DMA_CalcBaseAndBitshift+0xae>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d024      	beq.n	80067b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	3b10      	subs	r3, #16
 8006776:	4a27      	ldr	r2, [pc, #156]	; (8006814 <DMA_CalcBaseAndBitshift+0x158>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	4a24      	ldr	r2, [pc, #144]	; (8006818 <DMA_CalcBaseAndBitshift+0x15c>)
 8006788:	5cd3      	ldrb	r3, [r2, r3]
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d908      	bls.n	80067a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	4b1f      	ldr	r3, [pc, #124]	; (800681c <DMA_CalcBaseAndBitshift+0x160>)
 800679e:	4013      	ands	r3, r2
 80067a0:	1d1a      	adds	r2, r3, #4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	659a      	str	r2, [r3, #88]	; 0x58
 80067a6:	e00d      	b.n	80067c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b1b      	ldr	r3, [pc, #108]	; (800681c <DMA_CalcBaseAndBitshift+0x160>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6593      	str	r3, [r2, #88]	; 0x58
 80067b6:	e005      	b.n	80067c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	aaaaaaab 	.word	0xaaaaaaab
 8006818:	08015490 	.word	0x08015490
 800681c:	fffffc00 	.word	0xfffffc00

08006820 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d120      	bne.n	8006876 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	2b03      	cmp	r3, #3
 800683a:	d858      	bhi.n	80068ee <DMA_CheckFifoParam+0xce>
 800683c:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <DMA_CheckFifoParam+0x24>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006855 	.word	0x08006855
 8006848:	08006867 	.word	0x08006867
 800684c:	08006855 	.word	0x08006855
 8006850:	080068ef 	.word	0x080068ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d048      	beq.n	80068f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006864:	e045      	b.n	80068f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800686e:	d142      	bne.n	80068f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006874:	e03f      	b.n	80068f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687e:	d123      	bne.n	80068c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	2b03      	cmp	r3, #3
 8006886:	d838      	bhi.n	80068fa <DMA_CheckFifoParam+0xda>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <DMA_CheckFifoParam+0x70>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068a7 	.word	0x080068a7
 8006898:	080068a1 	.word	0x080068a1
 800689c:	080068b9 	.word	0x080068b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
        break;
 80068a4:	e030      	b.n	8006908 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d025      	beq.n	80068fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068b6:	e022      	b.n	80068fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068c0:	d11f      	bne.n	8006902 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068c6:	e01c      	b.n	8006902 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d902      	bls.n	80068d6 <DMA_CheckFifoParam+0xb6>
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d003      	beq.n	80068dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80068d4:	e018      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
        break;
 80068da:	e015      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00e      	beq.n	8006906 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
    break;
 80068ec:	e00b      	b.n	8006906 <DMA_CheckFifoParam+0xe6>
        break;
 80068ee:	bf00      	nop
 80068f0:	e00a      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        break;
 80068f2:	bf00      	nop
 80068f4:	e008      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        break;
 80068f6:	bf00      	nop
 80068f8:	e006      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        break;
 80068fa:	bf00      	nop
 80068fc:	e004      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        break;
 80068fe:	bf00      	nop
 8006900:	e002      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
        break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <DMA_CheckFifoParam+0xe8>
    break;
 8006906:	bf00      	nop
    }
  }

  return status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop

08006918 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a38      	ldr	r2, [pc, #224]	; (8006a0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a36      	ldr	r2, [pc, #216]	; (8006a10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a35      	ldr	r2, [pc, #212]	; (8006a14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a33      	ldr	r2, [pc, #204]	; (8006a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a32      	ldr	r2, [pc, #200]	; (8006a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a30      	ldr	r2, [pc, #192]	; (8006a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2d      	ldr	r2, [pc, #180]	; (8006a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d101      	bne.n	800697a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	3b08      	subs	r3, #8
 8006988:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4b26      	ldr	r3, [pc, #152]	; (8006a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	2201      	movs	r2, #1
 80069ae:	409a      	lsls	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069b4:	e024      	b.n	8006a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	3b10      	subs	r3, #16
 80069be:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d806      	bhi.n	80069de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d902      	bls.n	80069de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3308      	adds	r3, #8
 80069dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a16      	ldr	r2, [pc, #88]	; (8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80069f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	58025408 	.word	0x58025408
 8006a10:	5802541c 	.word	0x5802541c
 8006a14:	58025430 	.word	0x58025430
 8006a18:	58025444 	.word	0x58025444
 8006a1c:	58025458 	.word	0x58025458
 8006a20:	5802546c 	.word	0x5802546c
 8006a24:	58025480 	.word	0x58025480
 8006a28:	58025494 	.word	0x58025494
 8006a2c:	cccccccd 	.word	0xcccccccd
 8006a30:	16009600 	.word	0x16009600
 8006a34:	58025880 	.word	0x58025880
 8006a38:	aaaaaaab 	.word	0xaaaaaaab
 8006a3c:	400204b8 	.word	0x400204b8
 8006a40:	4002040f 	.word	0x4002040f
 8006a44:	10008200 	.word	0x10008200
 8006a48:	40020880 	.word	0x40020880

08006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d04a      	beq.n	8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d847      	bhi.n	8006af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a25      	ldr	r2, [pc, #148]	; (8006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d022      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a24      	ldr	r2, [pc, #144]	; (8006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d01d      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d018      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d013      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00e      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d101      	bne.n	8006abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006abc:	2300      	movs	r3, #0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8006ad6:	e009      	b.n	8006aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006aea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2201      	movs	r2, #1
 8006af2:	409a      	lsls	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	58025408 	.word	0x58025408
 8006b08:	5802541c 	.word	0x5802541c
 8006b0c:	58025430 	.word	0x58025430
 8006b10:	58025444 	.word	0x58025444
 8006b14:	58025458 	.word	0x58025458
 8006b18:	5802546c 	.word	0x5802546c
 8006b1c:	58025480 	.word	0x58025480
 8006b20:	58025494 	.word	0x58025494
 8006b24:	1600963f 	.word	0x1600963f
 8006b28:	58025940 	.word	0x58025940
 8006b2c:	1000823f 	.word	0x1000823f
 8006b30:	40020940 	.word	0x40020940

08006b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b089      	sub	sp, #36	; 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b42:	4b89      	ldr	r3, [pc, #548]	; (8006d68 <HAL_GPIO_Init+0x234>)
 8006b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b46:	e194      	b.n	8006e72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	4013      	ands	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8186 	beq.w	8006e6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d00b      	beq.n	8006b80 <HAL_GPIO_Init+0x4c>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d007      	beq.n	8006b80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b74:	2b11      	cmp	r3, #17
 8006b76:	d003      	beq.n	8006b80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b12      	cmp	r3, #18
 8006b7e:	d130      	bne.n	8006be2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	4013      	ands	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0201 	and.w	r2, r3, #1
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	2203      	movs	r2, #3
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0xee>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b12      	cmp	r3, #18
 8006c20:	d123      	bne.n	8006c6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	08da      	lsrs	r2, r3, #3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3208      	adds	r2, #8
 8006c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	220f      	movs	r2, #15
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	08da      	lsrs	r2, r3, #3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3208      	adds	r2, #8
 8006c64:	69b9      	ldr	r1, [r7, #24]
 8006c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	2203      	movs	r2, #3
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f003 0203 	and.w	r2, r3, #3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80e0 	beq.w	8006e6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cac:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <HAL_GPIO_Init+0x238>)
 8006cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cb2:	4a2e      	ldr	r2, [pc, #184]	; (8006d6c <HAL_GPIO_Init+0x238>)
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cbc:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <HAL_GPIO_Init+0x238>)
 8006cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cca:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <HAL_GPIO_Init+0x23c>)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	089b      	lsrs	r3, r3, #2
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	220f      	movs	r2, #15
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43db      	mvns	r3, r3
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4013      	ands	r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a20      	ldr	r2, [pc, #128]	; (8006d74 <HAL_GPIO_Init+0x240>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d052      	beq.n	8006d9c <HAL_GPIO_Init+0x268>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <HAL_GPIO_Init+0x244>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d031      	beq.n	8006d62 <HAL_GPIO_Init+0x22e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1e      	ldr	r2, [pc, #120]	; (8006d7c <HAL_GPIO_Init+0x248>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d02b      	beq.n	8006d5e <HAL_GPIO_Init+0x22a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <HAL_GPIO_Init+0x24c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d025      	beq.n	8006d5a <HAL_GPIO_Init+0x226>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <HAL_GPIO_Init+0x250>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01f      	beq.n	8006d56 <HAL_GPIO_Init+0x222>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a1b      	ldr	r2, [pc, #108]	; (8006d88 <HAL_GPIO_Init+0x254>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d019      	beq.n	8006d52 <HAL_GPIO_Init+0x21e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a1a      	ldr	r2, [pc, #104]	; (8006d8c <HAL_GPIO_Init+0x258>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_GPIO_Init+0x21a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <HAL_GPIO_Init+0x25c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00d      	beq.n	8006d4a <HAL_GPIO_Init+0x216>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_GPIO_Init+0x260>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <HAL_GPIO_Init+0x212>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <HAL_GPIO_Init+0x264>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d101      	bne.n	8006d42 <HAL_GPIO_Init+0x20e>
 8006d3e:	2309      	movs	r3, #9
 8006d40:	e02d      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d42:	230a      	movs	r3, #10
 8006d44:	e02b      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d46:	2308      	movs	r3, #8
 8006d48:	e029      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d4a:	2307      	movs	r3, #7
 8006d4c:	e027      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d4e:	2306      	movs	r3, #6
 8006d50:	e025      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d52:	2305      	movs	r3, #5
 8006d54:	e023      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d56:	2304      	movs	r3, #4
 8006d58:	e021      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e01f      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e01d      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e01b      	b.n	8006d9e <HAL_GPIO_Init+0x26a>
 8006d66:	bf00      	nop
 8006d68:	58000080 	.word	0x58000080
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	58000400 	.word	0x58000400
 8006d74:	58020000 	.word	0x58020000
 8006d78:	58020400 	.word	0x58020400
 8006d7c:	58020800 	.word	0x58020800
 8006d80:	58020c00 	.word	0x58020c00
 8006d84:	58021000 	.word	0x58021000
 8006d88:	58021400 	.word	0x58021400
 8006d8c:	58021800 	.word	0x58021800
 8006d90:	58021c00 	.word	0x58021c00
 8006d94:	58022000 	.word	0x58022000
 8006d98:	58022400 	.word	0x58022400
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	f002 0203 	and.w	r2, r2, #3
 8006da4:	0092      	lsls	r2, r2, #2
 8006da6:	4093      	lsls	r3, r2
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dae:	4938      	ldr	r1, [pc, #224]	; (8006e90 <HAL_GPIO_Init+0x35c>)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	089b      	lsrs	r3, r3, #2
 8006db4:	3302      	adds	r3, #2
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	43db      	mvns	r3, r3
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	4013      	ands	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f47f ae63 	bne.w	8006b48 <HAL_GPIO_Init+0x14>
  }
}
 8006e82:	bf00      	nop
 8006e84:	3724      	adds	r7, #36	; 0x24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	58000400 	.word	0x58000400

08006e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	807b      	strh	r3, [r7, #2]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ea4:	787b      	ldrb	r3, [r7, #1]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006eb0:	e003      	b.n	8006eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006eb2:	887b      	ldrh	r3, [r7, #2]
 8006eb4:	041a      	lsls	r2, r3, #16
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	619a      	str	r2, [r3, #24]
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <HAL_HSEM_FastTake+0x2c>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3320      	adds	r3, #32
 8006ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eda:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <HAL_HSEM_FastTake+0x30>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e000      	b.n	8006ee6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	58026400 	.word	0x58026400
 8006ef8:	80000300 	.word	0x80000300

08006efc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006f06:	4906      	ldr	r1, [pc, #24]	; (8006f20 <HAL_HSEM_Release+0x24>)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	58026400 	.word	0x58026400

08006f24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006f2c:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	2b06      	cmp	r3, #6
 8006f36:	d00a      	beq.n	8006f4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f38:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d001      	beq.n	8006f4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e040      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e03e      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006f56:	491f      	ldr	r1, [pc, #124]	; (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f5e:	f7fa ffa3 	bl	8001ea8 <HAL_GetTick>
 8006f62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f64:	e009      	b.n	8006f7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f66:	f7fa ff9f 	bl	8001ea8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f74:	d901      	bls.n	8006f7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e028      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f7a:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f86:	d1ee      	bne.n	8006f66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b1e      	cmp	r3, #30
 8006f8c:	d008      	beq.n	8006fa0 <HAL_PWREx_ConfigSupply+0x7c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b2e      	cmp	r3, #46	; 0x2e
 8006f92:	d005      	beq.n	8006fa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b1d      	cmp	r3, #29
 8006f98:	d002      	beq.n	8006fa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8006f9e:	d114      	bne.n	8006fca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006fa0:	f7fa ff82 	bl	8001ea8 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fa6:	e009      	b.n	8006fbc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fa8:	f7fa ff7e 	bl	8001ea8 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fb6:	d901      	bls.n	8006fbc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e007      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc8:	d1ee      	bne.n	8006fa8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	58024800 	.word	0x58024800

08006fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	; 0x30
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e3ff      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8087 	beq.w	8007106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff8:	4b99      	ldr	r3, [pc, #612]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007002:	4b97      	ldr	r3, [pc, #604]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	2b10      	cmp	r3, #16
 800700c:	d007      	beq.n	800701e <HAL_RCC_OscConfig+0x46>
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	2b18      	cmp	r3, #24
 8007012:	d110      	bne.n	8007036 <HAL_RCC_OscConfig+0x5e>
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d10b      	bne.n	8007036 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800701e:	4b90      	ldr	r3, [pc, #576]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d06c      	beq.n	8007104 <HAL_RCC_OscConfig+0x12c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d168      	bne.n	8007104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e3d9      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703e:	d106      	bne.n	800704e <HAL_RCC_OscConfig+0x76>
 8007040:	4b87      	ldr	r3, [pc, #540]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a86      	ldr	r2, [pc, #536]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e02e      	b.n	80070ac <HAL_RCC_OscConfig+0xd4>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10c      	bne.n	8007070 <HAL_RCC_OscConfig+0x98>
 8007056:	4b82      	ldr	r3, [pc, #520]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a81      	ldr	r2, [pc, #516]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800705c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b7f      	ldr	r3, [pc, #508]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a7e      	ldr	r2, [pc, #504]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e01d      	b.n	80070ac <HAL_RCC_OscConfig+0xd4>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007078:	d10c      	bne.n	8007094 <HAL_RCC_OscConfig+0xbc>
 800707a:	4b79      	ldr	r3, [pc, #484]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a78      	ldr	r2, [pc, #480]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4b76      	ldr	r3, [pc, #472]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a75      	ldr	r2, [pc, #468]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800708c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e00b      	b.n	80070ac <HAL_RCC_OscConfig+0xd4>
 8007094:	4b72      	ldr	r3, [pc, #456]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a71      	ldr	r2, [pc, #452]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800709a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	4b6f      	ldr	r3, [pc, #444]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6e      	ldr	r2, [pc, #440]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80070a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d013      	beq.n	80070dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fa fef8 	bl	8001ea8 <HAL_GetTick>
 80070b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070bc:	f7fa fef4 	bl	8001ea8 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	; 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e38d      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ce:	4b64      	ldr	r3, [pc, #400]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f0      	beq.n	80070bc <HAL_RCC_OscConfig+0xe4>
 80070da:	e014      	b.n	8007106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fa fee4 	bl	8001ea8 <HAL_GetTick>
 80070e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070e4:	f7fa fee0 	bl	8001ea8 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b64      	cmp	r3, #100	; 0x64
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e379      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070f6:	4b5a      	ldr	r3, [pc, #360]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x10c>
 8007102:	e000      	b.n	8007106 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80ae 	beq.w	8007270 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007114:	4b52      	ldr	r3, [pc, #328]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800711c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800711e:	4b50      	ldr	r3, [pc, #320]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <HAL_RCC_OscConfig+0x162>
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	2b18      	cmp	r3, #24
 800712e:	d13a      	bne.n	80071a6 <HAL_RCC_OscConfig+0x1ce>
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d135      	bne.n	80071a6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800713a:	4b49      	ldr	r3, [pc, #292]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_RCC_OscConfig+0x17a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e34b      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007152:	f7fa fed7 	bl	8001f04 <HAL_GetREVID>
 8007156:	4602      	mov	r2, r0
 8007158:	f241 0303 	movw	r3, #4099	; 0x1003
 800715c:	429a      	cmp	r2, r3
 800715e:	d817      	bhi.n	8007190 <HAL_RCC_OscConfig+0x1b8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	d108      	bne.n	800717a <HAL_RCC_OscConfig+0x1a2>
 8007168:	4b3d      	ldr	r3, [pc, #244]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007170:	4a3b      	ldr	r2, [pc, #236]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007176:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007178:	e07a      	b.n	8007270 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	031b      	lsls	r3, r3, #12
 8007188:	4935      	ldr	r1, [pc, #212]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800718a:	4313      	orrs	r3, r2
 800718c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800718e:	e06f      	b.n	8007270 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007190:	4b33      	ldr	r3, [pc, #204]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	4930      	ldr	r1, [pc, #192]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a4:	e064      	b.n	8007270 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d045      	beq.n	800723a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071ae:	4b2c      	ldr	r3, [pc, #176]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f023 0219 	bic.w	r2, r3, #25
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	4929      	ldr	r1, [pc, #164]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fa fe72 	bl	8001ea8 <HAL_GetTick>
 80071c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071c8:	f7fa fe6e 	bl	8001ea8 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e307      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071da:	4b21      	ldr	r3, [pc, #132]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e6:	f7fa fe8d 	bl	8001f04 <HAL_GetREVID>
 80071ea:	4602      	mov	r2, r0
 80071ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d817      	bhi.n	8007224 <HAL_RCC_OscConfig+0x24c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b40      	cmp	r3, #64	; 0x40
 80071fa:	d108      	bne.n	800720e <HAL_RCC_OscConfig+0x236>
 80071fc:	4b18      	ldr	r3, [pc, #96]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007204:	4a16      	ldr	r2, [pc, #88]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800720a:	6053      	str	r3, [r2, #4]
 800720c:	e030      	b.n	8007270 <HAL_RCC_OscConfig+0x298>
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	031b      	lsls	r3, r3, #12
 800721c:	4910      	ldr	r1, [pc, #64]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800721e:	4313      	orrs	r3, r2
 8007220:	604b      	str	r3, [r1, #4]
 8007222:	e025      	b.n	8007270 <HAL_RCC_OscConfig+0x298>
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	490b      	ldr	r1, [pc, #44]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007234:	4313      	orrs	r3, r2
 8007236:	604b      	str	r3, [r1, #4]
 8007238:	e01a      	b.n	8007270 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a08      	ldr	r2, [pc, #32]	; (8007260 <HAL_RCC_OscConfig+0x288>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fa fe2f 	bl	8001ea8 <HAL_GetTick>
 800724a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800724c:	e00a      	b.n	8007264 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800724e:	f7fa fe2b 	bl	8001ea8 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d903      	bls.n	8007264 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e2c4      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
 8007260:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007264:	4ba4      	ldr	r3, [pc, #656]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ee      	bne.n	800724e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80a9 	beq.w	80073d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800727e:	4b9e      	ldr	r3, [pc, #632]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007286:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007288:	4b9b      	ldr	r3, [pc, #620]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d007      	beq.n	80072a4 <HAL_RCC_OscConfig+0x2cc>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b18      	cmp	r3, #24
 8007298:	d13a      	bne.n	8007310 <HAL_RCC_OscConfig+0x338>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d135      	bne.n	8007310 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072a4:	4b94      	ldr	r3, [pc, #592]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RCC_OscConfig+0x2e4>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	2b80      	cmp	r3, #128	; 0x80
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e296      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072bc:	f7fa fe22 	bl	8001f04 <HAL_GetREVID>
 80072c0:	4602      	mov	r2, r0
 80072c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d817      	bhi.n	80072fa <HAL_RCC_OscConfig+0x322>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d108      	bne.n	80072e4 <HAL_RCC_OscConfig+0x30c>
 80072d2:	4b89      	ldr	r3, [pc, #548]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072da:	4a87      	ldr	r2, [pc, #540]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80072dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072e2:	e075      	b.n	80073d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072e4:	4b84      	ldr	r3, [pc, #528]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	069b      	lsls	r3, r3, #26
 80072f2:	4981      	ldr	r1, [pc, #516]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072f8:	e06a      	b.n	80073d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072fa:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	061b      	lsls	r3, r3, #24
 8007308:	497b      	ldr	r1, [pc, #492]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800730a:	4313      	orrs	r3, r2
 800730c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800730e:	e05f      	b.n	80073d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d042      	beq.n	800739e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007318:	4b77      	ldr	r3, [pc, #476]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a76      	ldr	r2, [pc, #472]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800731e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007324:	f7fa fdc0 	bl	8001ea8 <HAL_GetTick>
 8007328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800732c:	f7fa fdbc 	bl	8001ea8 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e255      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800733e:	4b6e      	ldr	r3, [pc, #440]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800734a:	f7fa fddb 	bl	8001f04 <HAL_GetREVID>
 800734e:	4602      	mov	r2, r0
 8007350:	f241 0303 	movw	r3, #4099	; 0x1003
 8007354:	429a      	cmp	r2, r3
 8007356:	d817      	bhi.n	8007388 <HAL_RCC_OscConfig+0x3b0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	2b20      	cmp	r3, #32
 800735e:	d108      	bne.n	8007372 <HAL_RCC_OscConfig+0x39a>
 8007360:	4b65      	ldr	r3, [pc, #404]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007368:	4a63      	ldr	r2, [pc, #396]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800736a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736e:	6053      	str	r3, [r2, #4]
 8007370:	e02e      	b.n	80073d0 <HAL_RCC_OscConfig+0x3f8>
 8007372:	4b61      	ldr	r3, [pc, #388]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	069b      	lsls	r3, r3, #26
 8007380:	495d      	ldr	r1, [pc, #372]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007382:	4313      	orrs	r3, r2
 8007384:	604b      	str	r3, [r1, #4]
 8007386:	e023      	b.n	80073d0 <HAL_RCC_OscConfig+0x3f8>
 8007388:	4b5b      	ldr	r3, [pc, #364]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	061b      	lsls	r3, r3, #24
 8007396:	4958      	ldr	r1, [pc, #352]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007398:	4313      	orrs	r3, r2
 800739a:	60cb      	str	r3, [r1, #12]
 800739c:	e018      	b.n	80073d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800739e:	4b56      	ldr	r3, [pc, #344]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a55      	ldr	r2, [pc, #340]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80073a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073aa:	f7fa fd7d 	bl	8001ea8 <HAL_GetTick>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80073b2:	f7fa fd79 	bl	8001ea8 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e212      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073c4:	4b4c      	ldr	r3, [pc, #304]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f0      	bne.n	80073b2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d036      	beq.n	800744a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d019      	beq.n	8007418 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e4:	4b44      	ldr	r3, [pc, #272]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80073e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e8:	4a43      	ldr	r2, [pc, #268]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f0:	f7fa fd5a 	bl	8001ea8 <HAL_GetTick>
 80073f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f8:	f7fa fd56 	bl	8001ea8 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e1ef      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800740a:	4b3b      	ldr	r3, [pc, #236]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800740c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f0      	beq.n	80073f8 <HAL_RCC_OscConfig+0x420>
 8007416:	e018      	b.n	800744a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007418:	4b37      	ldr	r3, [pc, #220]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800741a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741c:	4a36      	ldr	r2, [pc, #216]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007424:	f7fa fd40 	bl	8001ea8 <HAL_GetTick>
 8007428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800742c:	f7fa fd3c 	bl	8001ea8 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e1d5      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800743e:	4b2e      	ldr	r3, [pc, #184]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d036      	beq.n	80074c4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d019      	beq.n	8007492 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800745e:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a25      	ldr	r2, [pc, #148]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007468:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800746a:	f7fa fd1d 	bl	8001ea8 <HAL_GetTick>
 800746e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007470:	e008      	b.n	8007484 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007472:	f7fa fd19 	bl	8001ea8 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e1b2      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007484:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <HAL_RCC_OscConfig+0x49a>
 8007490:	e018      	b.n	80074c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 8007498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800749c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800749e:	f7fa fd03 	bl	8001ea8 <HAL_GetTick>
 80074a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074a6:	f7fa fcff 	bl	8001ea8 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e198      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <HAL_RCC_OscConfig+0x520>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8085 	beq.w	80075dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074d2:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <HAL_RCC_OscConfig+0x524>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a09      	ldr	r2, [pc, #36]	; (80074fc <HAL_RCC_OscConfig+0x524>)
 80074d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074de:	f7fa fce3 	bl	8001ea8 <HAL_GetTick>
 80074e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074e4:	e00c      	b.n	8007500 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074e6:	f7fa fcdf 	bl	8001ea8 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b64      	cmp	r3, #100	; 0x64
 80074f2:	d905      	bls.n	8007500 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e178      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
 80074f8:	58024400 	.word	0x58024400
 80074fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007500:	4b96      	ldr	r3, [pc, #600]	; (800775c <HAL_RCC_OscConfig+0x784>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0ec      	beq.n	80074e6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0x54a>
 8007514:	4b92      	ldr	r3, [pc, #584]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007518:	4a91      	ldr	r2, [pc, #580]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	6713      	str	r3, [r2, #112]	; 0x70
 8007520:	e02d      	b.n	800757e <HAL_RCC_OscConfig+0x5a6>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x56c>
 800752a:	4b8d      	ldr	r3, [pc, #564]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	4a8c      	ldr	r2, [pc, #560]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	6713      	str	r3, [r2, #112]	; 0x70
 8007536:	4b8a      	ldr	r3, [pc, #552]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	4a89      	ldr	r2, [pc, #548]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800753c:	f023 0304 	bic.w	r3, r3, #4
 8007540:	6713      	str	r3, [r2, #112]	; 0x70
 8007542:	e01c      	b.n	800757e <HAL_RCC_OscConfig+0x5a6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b05      	cmp	r3, #5
 800754a:	d10c      	bne.n	8007566 <HAL_RCC_OscConfig+0x58e>
 800754c:	4b84      	ldr	r3, [pc, #528]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007550:	4a83      	ldr	r2, [pc, #524]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007552:	f043 0304 	orr.w	r3, r3, #4
 8007556:	6713      	str	r3, [r2, #112]	; 0x70
 8007558:	4b81      	ldr	r3, [pc, #516]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800755a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755c:	4a80      	ldr	r2, [pc, #512]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	6713      	str	r3, [r2, #112]	; 0x70
 8007564:	e00b      	b.n	800757e <HAL_RCC_OscConfig+0x5a6>
 8007566:	4b7e      	ldr	r3, [pc, #504]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	4a7d      	ldr	r2, [pc, #500]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	6713      	str	r3, [r2, #112]	; 0x70
 8007572:	4b7b      	ldr	r3, [pc, #492]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007576:	4a7a      	ldr	r2, [pc, #488]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007578:	f023 0304 	bic.w	r3, r3, #4
 800757c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d015      	beq.n	80075b2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007586:	f7fa fc8f 	bl	8001ea8 <HAL_GetTick>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800758c:	e00a      	b.n	80075a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800758e:	f7fa fc8b 	bl	8001ea8 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	f241 3288 	movw	r2, #5000	; 0x1388
 800759c:	4293      	cmp	r3, r2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e122      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a4:	4b6e      	ldr	r3, [pc, #440]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80075a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0ee      	beq.n	800758e <HAL_RCC_OscConfig+0x5b6>
 80075b0:	e014      	b.n	80075dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b2:	f7fa fc79 	bl	8001ea8 <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075b8:	e00a      	b.n	80075d0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ba:	f7fa fc75 	bl	8001ea8 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e10c      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075d0:	4b63      	ldr	r3, [pc, #396]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1ee      	bne.n	80075ba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8101 	beq.w	80077e8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075e6:	4b5e      	ldr	r3, [pc, #376]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075ee:	2b18      	cmp	r3, #24
 80075f0:	f000 80bc 	beq.w	800776c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	f040 8095 	bne.w	8007728 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075fe:	4b58      	ldr	r3, [pc, #352]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a57      	ldr	r2, [pc, #348]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fa fc4d 	bl	8001ea8 <HAL_GetTick>
 800760e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007612:	f7fa fc49 	bl	8001ea8 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0e2      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007624:	4b4e      	ldr	r3, [pc, #312]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007630:	4b4b      	ldr	r3, [pc, #300]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007634:	4b4b      	ldr	r3, [pc, #300]	; (8007764 <HAL_RCC_OscConfig+0x78c>)
 8007636:	4013      	ands	r3, r2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007640:	0112      	lsls	r2, r2, #4
 8007642:	430a      	orrs	r2, r1
 8007644:	4946      	ldr	r1, [pc, #280]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007646:	4313      	orrs	r3, r2
 8007648:	628b      	str	r3, [r1, #40]	; 0x28
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	3b01      	subs	r3, #1
 8007650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007658:	3b01      	subs	r3, #1
 800765a:	025b      	lsls	r3, r3, #9
 800765c:	b29b      	uxth	r3, r3
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	3b01      	subs	r3, #1
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	3b01      	subs	r3, #1
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800767a:	4939      	ldr	r1, [pc, #228]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800767c:	4313      	orrs	r3, r2
 800767e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007680:	4b37      	ldr	r3, [pc, #220]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	4a36      	ldr	r2, [pc, #216]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800768c:	4b34      	ldr	r3, [pc, #208]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800768e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007690:	4b35      	ldr	r3, [pc, #212]	; (8007768 <HAL_RCC_OscConfig+0x790>)
 8007692:	4013      	ands	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007698:	00d2      	lsls	r2, r2, #3
 800769a:	4931      	ldr	r1, [pc, #196]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800769c:	4313      	orrs	r3, r2
 800769e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076a0:	4b2f      	ldr	r3, [pc, #188]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	f023 020c 	bic.w	r2, r3, #12
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	492c      	ldr	r1, [pc, #176]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	f023 0202 	bic.w	r2, r3, #2
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	4928      	ldr	r1, [pc, #160]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076c4:	4b26      	ldr	r3, [pc, #152]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b23      	ldr	r3, [pc, #140]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a22      	ldr	r2, [pc, #136]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076dc:	4b20      	ldr	r3, [pc, #128]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4a1c      	ldr	r2, [pc, #112]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076ee:	f043 0301 	orr.w	r3, r3, #1
 80076f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f4:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 80076fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fa fbd2 	bl	8001ea8 <HAL_GetTick>
 8007704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007708:	f7fa fbce 	bl	8001ea8 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e067      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800771a:	4b11      	ldr	r3, [pc, #68]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x730>
 8007726:	e05f      	b.n	80077e8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007728:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a0c      	ldr	r2, [pc, #48]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 800772e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fa fbb8 	bl	8001ea8 <HAL_GetTick>
 8007738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800773c:	f7fa fbb4 	bl	8001ea8 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e04d      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800774e:	4b04      	ldr	r3, [pc, #16]	; (8007760 <HAL_RCC_OscConfig+0x788>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0x764>
 800775a:	e045      	b.n	80077e8 <HAL_RCC_OscConfig+0x810>
 800775c:	58024800 	.word	0x58024800
 8007760:	58024400 	.word	0x58024400
 8007764:	fffffc0c 	.word	0xfffffc0c
 8007768:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800776c:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <HAL_RCC_OscConfig+0x81c>)
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007772:	4b20      	ldr	r3, [pc, #128]	; (80077f4 <HAL_RCC_OscConfig+0x81c>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b01      	cmp	r3, #1
 800777e:	d031      	beq.n	80077e4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f003 0203 	and.w	r2, r3, #3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800778a:	429a      	cmp	r2, r3
 800778c:	d12a      	bne.n	80077e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800779a:	429a      	cmp	r2, r3
 800779c:	d122      	bne.n	80077e4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d11a      	bne.n	80077e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	0a5b      	lsrs	r3, r3, #9
 80077b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077bc:	429a      	cmp	r2, r3
 80077be:	d111      	bne.n	80077e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	0c1b      	lsrs	r3, r3, #16
 80077c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d108      	bne.n	80077e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0e1b      	lsrs	r3, r3, #24
 80077d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d001      	beq.n	80077e8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3730      	adds	r7, #48	; 0x30
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400

080077f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e19c      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800780c:	4b8a      	ldr	r3, [pc, #552]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d910      	bls.n	800783c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800781a:	4b87      	ldr	r3, [pc, #540]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f023 020f 	bic.w	r2, r3, #15
 8007822:	4985      	ldr	r1, [pc, #532]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	4313      	orrs	r3, r2
 8007828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800782a:	4b83      	ldr	r3, [pc, #524]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d001      	beq.n	800783c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e184      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	d010      	beq.n	800786a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	4b7b      	ldr	r3, [pc, #492]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007854:	429a      	cmp	r2, r3
 8007856:	d908      	bls.n	800786a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007858:	4b78      	ldr	r3, [pc, #480]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	4975      	ldr	r1, [pc, #468]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007866:	4313      	orrs	r3, r2
 8007868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d010      	beq.n	8007898 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	4b70      	ldr	r3, [pc, #448]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007882:	429a      	cmp	r2, r3
 8007884:	d908      	bls.n	8007898 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007886:	4b6d      	ldr	r3, [pc, #436]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	496a      	ldr	r1, [pc, #424]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007894:	4313      	orrs	r3, r2
 8007896:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d010      	beq.n	80078c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	4b64      	ldr	r3, [pc, #400]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d908      	bls.n	80078c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078b4:	4b61      	ldr	r3, [pc, #388]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	495e      	ldr	r1, [pc, #376]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d010      	beq.n	80078f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078de:	429a      	cmp	r2, r3
 80078e0:	d908      	bls.n	80078f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078e2:	4b56      	ldr	r3, [pc, #344]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	4953      	ldr	r1, [pc, #332]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d010      	beq.n	8007922 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	4b4d      	ldr	r3, [pc, #308]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	429a      	cmp	r2, r3
 800790e:	d908      	bls.n	8007922 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007910:	4b4a      	ldr	r3, [pc, #296]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f023 020f 	bic.w	r2, r3, #15
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	4947      	ldr	r1, [pc, #284]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800791e:	4313      	orrs	r3, r2
 8007920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d055      	beq.n	80079da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800792e:	4b43      	ldr	r3, [pc, #268]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	4940      	ldr	r1, [pc, #256]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800793c:	4313      	orrs	r3, r2
 800793e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d107      	bne.n	8007958 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007948:	4b3c      	ldr	r3, [pc, #240]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d121      	bne.n	8007998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0f6      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d107      	bne.n	8007970 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007960:	4b36      	ldr	r3, [pc, #216]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d115      	bne.n	8007998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0ea      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d107      	bne.n	8007988 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007978:	4b30      	ldr	r3, [pc, #192]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0de      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007988:	4b2c      	ldr	r3, [pc, #176]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e0d6      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007998:	4b28      	ldr	r3, [pc, #160]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f023 0207 	bic.w	r2, r3, #7
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	4925      	ldr	r1, [pc, #148]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079aa:	f7fa fa7d 	bl	8001ea8 <HAL_GetTick>
 80079ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079b0:	e00a      	b.n	80079c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079b2:	f7fa fa79 	bl	8001ea8 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e0be      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079c8:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d1eb      	bne.n	80079b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d208      	bcs.n	8007a08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079f6:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f023 020f 	bic.w	r2, r3, #15
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	490e      	ldr	r1, [pc, #56]	; (8007a3c <HAL_RCC_ClockConfig+0x244>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a08:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d214      	bcs.n	8007a40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a16:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 020f 	bic.w	r2, r3, #15
 8007a1e:	4906      	ldr	r1, [pc, #24]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a26:	4b04      	ldr	r3, [pc, #16]	; (8007a38 <HAL_RCC_ClockConfig+0x240>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d005      	beq.n	8007a40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e086      	b.n	8007b46 <HAL_RCC_ClockConfig+0x34e>
 8007a38:	52002000 	.word	0x52002000
 8007a3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d010      	beq.n	8007a6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	4b3f      	ldr	r3, [pc, #252]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d208      	bcs.n	8007a6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a5c:	4b3c      	ldr	r3, [pc, #240]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	4939      	ldr	r1, [pc, #228]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d010      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695a      	ldr	r2, [r3, #20]
 8007a7e:	4b34      	ldr	r3, [pc, #208]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d208      	bcs.n	8007a9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a8a:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	492e      	ldr	r1, [pc, #184]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d010      	beq.n	8007aca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699a      	ldr	r2, [r3, #24]
 8007aac:	4b28      	ldr	r3, [pc, #160]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d208      	bcs.n	8007aca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ab8:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	4922      	ldr	r1, [pc, #136]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69da      	ldr	r2, [r3, #28]
 8007ada:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d208      	bcs.n	8007af8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	4917      	ldr	r1, [pc, #92]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007af8:	f000 f834 	bl	8007b64 <HAL_RCC_GetSysClockFreq>
 8007afc:	4601      	mov	r1, r0
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	4a12      	ldr	r2, [pc, #72]	; (8007b54 <HAL_RCC_ClockConfig+0x35c>)
 8007b0a:	5cd3      	ldrb	r3, [r2, r3]
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	fa21 f303 	lsr.w	r3, r1, r3
 8007b14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <HAL_RCC_ClockConfig+0x358>)
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <HAL_RCC_ClockConfig+0x35c>)
 8007b20:	5cd3      	ldrb	r3, [r2, r3]
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2c:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <HAL_RCC_ClockConfig+0x360>)
 8007b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b30:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <HAL_RCC_ClockConfig+0x364>)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <HAL_RCC_ClockConfig+0x368>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7f9 fd20 	bl	8001580 <HAL_InitTick>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
 8007b54:	08015480 	.word	0x08015480
 8007b58:	24000004 	.word	0x24000004
 8007b5c:	24000000 	.word	0x24000000
 8007b60:	24000008 	.word	0x24000008

08007b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b089      	sub	sp, #36	; 0x24
 8007b68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b6a:	4baf      	ldr	r3, [pc, #700]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b72:	2b18      	cmp	r3, #24
 8007b74:	f200 814e 	bhi.w	8007e14 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007be5 	.word	0x08007be5
 8007b84:	08007e15 	.word	0x08007e15
 8007b88:	08007e15 	.word	0x08007e15
 8007b8c:	08007e15 	.word	0x08007e15
 8007b90:	08007e15 	.word	0x08007e15
 8007b94:	08007e15 	.word	0x08007e15
 8007b98:	08007e15 	.word	0x08007e15
 8007b9c:	08007e15 	.word	0x08007e15
 8007ba0:	08007c0b 	.word	0x08007c0b
 8007ba4:	08007e15 	.word	0x08007e15
 8007ba8:	08007e15 	.word	0x08007e15
 8007bac:	08007e15 	.word	0x08007e15
 8007bb0:	08007e15 	.word	0x08007e15
 8007bb4:	08007e15 	.word	0x08007e15
 8007bb8:	08007e15 	.word	0x08007e15
 8007bbc:	08007e15 	.word	0x08007e15
 8007bc0:	08007c11 	.word	0x08007c11
 8007bc4:	08007e15 	.word	0x08007e15
 8007bc8:	08007e15 	.word	0x08007e15
 8007bcc:	08007e15 	.word	0x08007e15
 8007bd0:	08007e15 	.word	0x08007e15
 8007bd4:	08007e15 	.word	0x08007e15
 8007bd8:	08007e15 	.word	0x08007e15
 8007bdc:	08007e15 	.word	0x08007e15
 8007be0:	08007c17 	.word	0x08007c17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007be4:	4b90      	ldr	r3, [pc, #576]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bf0:	4b8d      	ldr	r3, [pc, #564]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	08db      	lsrs	r3, r3, #3
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	4a8c      	ldr	r2, [pc, #560]	; (8007e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007c00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c02:	e10a      	b.n	8007e1a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c04:	4b89      	ldr	r3, [pc, #548]	; (8007e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007c06:	61bb      	str	r3, [r7, #24]
    break;
 8007c08:	e107      	b.n	8007e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c0a:	4b89      	ldr	r3, [pc, #548]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007c0c:	61bb      	str	r3, [r7, #24]
    break;
 8007c0e:	e104      	b.n	8007e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c10:	4b88      	ldr	r3, [pc, #544]	; (8007e34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007c12:	61bb      	str	r3, [r7, #24]
    break;
 8007c14:	e101      	b.n	8007e1a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c16:	4b84      	ldr	r3, [pc, #528]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c20:	4b81      	ldr	r3, [pc, #516]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	091b      	lsrs	r3, r3, #4
 8007c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c2c:	4b7e      	ldr	r3, [pc, #504]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c36:	4b7c      	ldr	r3, [pc, #496]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3a:	08db      	lsrs	r3, r3, #3
 8007c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80da 	beq.w	8007e0e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d05a      	beq.n	8007d16 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d302      	bcc.n	8007c6a <HAL_RCC_GetSysClockFreq+0x106>
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d078      	beq.n	8007d5a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007c68:	e099      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c6a:	4b6f      	ldr	r3, [pc, #444]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02d      	beq.n	8007cd2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c76:	4b6c      	ldr	r3, [pc, #432]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	08db      	lsrs	r3, r3, #3
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	4a6a      	ldr	r2, [pc, #424]	; (8007e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007c82:	fa22 f303 	lsr.w	r3, r2, r3
 8007c86:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca0:	4b61      	ldr	r3, [pc, #388]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	ee07 3a90 	vmov	s15, r3
 8007cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cb4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007cd0:	e087      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cdc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007e3c <HAL_RCC_GetSysClockFreq+0x2d8>
 8007ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce4:	4b50      	ldr	r3, [pc, #320]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cf8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d14:	e065      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d20:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007e40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d28:	4b3f      	ldr	r3, [pc, #252]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d3c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d58:	e043      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d64:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007e44 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6c:	4b2e      	ldr	r3, [pc, #184]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d80:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d9c:	e021      	b.n	8007de2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007e40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db0:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dc4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007de2:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	0a5b      	lsrs	r3, r3, #9
 8007de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dec:	3301      	adds	r3, #1
 8007dee:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e06:	ee17 3a90 	vmov	r3, s15
 8007e0a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e0c:	e005      	b.n	8007e1a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61bb      	str	r3, [r7, #24]
    break;
 8007e12:	e002      	b.n	8007e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007e14:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007e16:	61bb      	str	r3, [r7, #24]
    break;
 8007e18:	bf00      	nop
  }

  return sysclockfreq;
 8007e1a:	69bb      	ldr	r3, [r7, #24]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3724      	adds	r7, #36	; 0x24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	03d09000 	.word	0x03d09000
 8007e30:	003d0900 	.word	0x003d0900
 8007e34:	017d7840 	.word	0x017d7840
 8007e38:	46000000 	.word	0x46000000
 8007e3c:	4c742400 	.word	0x4c742400
 8007e40:	4a742400 	.word	0x4a742400
 8007e44:	4bbebc20 	.word	0x4bbebc20

08007e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e4e:	f7ff fe89 	bl	8007b64 <HAL_RCC_GetSysClockFreq>
 8007e52:	4601      	mov	r1, r0
 8007e54:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	4a0f      	ldr	r2, [pc, #60]	; (8007e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e60:	5cd3      	ldrb	r3, [r2, r3]
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	fa21 f303 	lsr.w	r3, r1, r3
 8007e6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e76:	5cd3      	ldrb	r3, [r2, r3]
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e82:	4a07      	ldr	r2, [pc, #28]	; (8007ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e86:	4a07      	ldr	r2, [pc, #28]	; (8007ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	08015480 	.word	0x08015480
 8007ea0:	24000004 	.word	0x24000004
 8007ea4:	24000000 	.word	0x24000000

08007ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007eac:	f7ff ffcc 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	091b      	lsrs	r3, r3, #4
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ebe:	5cd3      	ldrb	r3, [r2, r3]
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	08015480 	.word	0x08015480

08007ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ed8:	f7ff ffb6 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8007edc:	4601      	mov	r1, r0
 8007ede:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	0a1b      	lsrs	r3, r3, #8
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4a04      	ldr	r2, [pc, #16]	; (8007efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eea:	5cd3      	ldrb	r3, [r2, r3]
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	08015480 	.word	0x08015480

08007f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	223f      	movs	r2, #63	; 0x3f
 8007f0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f10:	4b1a      	ldr	r3, [pc, #104]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0207 	and.w	r2, r3, #7
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007f1c:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007f28:	4b14      	ldr	r3, [pc, #80]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 020f 	and.w	r2, r3, #15
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007f34:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007f40:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007f58:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <HAL_RCC_GetClockConfig+0x7c>)
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <HAL_RCC_GetClockConfig+0x80>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	601a      	str	r2, [r3, #0]
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	52002000 	.word	0x52002000

08007f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f90:	2300      	movs	r3, #0
 8007f92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d03d      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fa8:	d013      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fae:	d802      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d007      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007fb4:	e01f      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fba:	d013      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fc0:	d01c      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007fc2:	e018      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4baf      	ldr	r3, [pc, #700]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4aae      	ldr	r2, [pc, #696]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fd0:	e015      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fd5f 	bl	8009a9c <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fe2:	e00c      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3324      	adds	r3, #36	; 0x24
 8007fe8:	2102      	movs	r1, #2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 fe08 	bl	8009c00 <RCCEx_PLL3_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ff4:	e003      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffa:	e000      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008004:	4b9f      	ldr	r3, [pc, #636]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008010:	499c      	ldr	r1, [pc, #624]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008012:	4313      	orrs	r3, r2
 8008014:	650b      	str	r3, [r1, #80]	; 0x50
 8008016:	e001      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008024:	2b00      	cmp	r3, #0
 8008026:	d03d      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802c:	2b04      	cmp	r3, #4
 800802e:	d826      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	0800804d 	.word	0x0800804d
 800803c:	0800805b 	.word	0x0800805b
 8008040:	0800806d 	.word	0x0800806d
 8008044:	08008085 	.word	0x08008085
 8008048:	08008085 	.word	0x08008085
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804c:	4b8d      	ldr	r3, [pc, #564]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	4a8c      	ldr	r2, [pc, #560]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008058:	e015      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3304      	adds	r3, #4
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f001 fd1b 	bl	8009a9c <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800806a:	e00c      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3324      	adds	r3, #36	; 0x24
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f001 fdc4 	bl	8009c00 <RCCEx_PLL3_Config>
 8008078:	4603      	mov	r3, r0
 800807a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	75fb      	strb	r3, [r7, #23]
      break;
 8008082:	e000      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d109      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800808c:	4b7d      	ldr	r3, [pc, #500]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800808e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008090:	f023 0207 	bic.w	r2, r3, #7
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	497a      	ldr	r1, [pc, #488]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800809a:	4313      	orrs	r3, r2
 800809c:	650b      	str	r3, [r1, #80]	; 0x50
 800809e:	e001      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d03e      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d01c      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d804      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80080c0:	2b40      	cmp	r3, #64	; 0x40
 80080c2:	d00d      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80080c4:	e01e      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80080c6:	2bc0      	cmp	r3, #192	; 0xc0
 80080c8:	d01f      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80080ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ce:	d01e      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80080d0:	e018      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d2:	4b6c      	ldr	r3, [pc, #432]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	4a6b      	ldr	r2, [pc, #428]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080de:	e017      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fcd8 	bl	8009a9c <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080f0:	e00e      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3324      	adds	r3, #36	; 0x24
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 fd81 	bl	8009c00 <RCCEx_PLL3_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008102:	e005      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800810e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008116:	4b5b      	ldr	r3, [pc, #364]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008122:	4958      	ldr	r1, [pc, #352]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008124:	4313      	orrs	r3, r2
 8008126:	650b      	str	r3, [r1, #80]	; 0x50
 8008128:	e001      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008136:	2b00      	cmp	r3, #0
 8008138:	d044      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008144:	d01f      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800814a:	d805      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008154:	d00e      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008156:	e01f      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800815c:	d01f      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800815e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008162:	d01e      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008164:	e018      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008166:	4b47      	ldr	r3, [pc, #284]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	4a46      	ldr	r2, [pc, #280]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800816c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008172:	e017      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3304      	adds	r3, #4
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fc8e 	bl	8009a9c <RCCEx_PLL2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008184:	e00e      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3324      	adds	r3, #36	; 0x24
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fd37 	bl	8009c00 <RCCEx_PLL3_Config>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008196:	e005      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	75fb      	strb	r3, [r7, #23]
      break;
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80081a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081aa:	4b36      	ldr	r3, [pc, #216]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ae:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081b8:	4932      	ldr	r1, [pc, #200]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	658b      	str	r3, [r1, #88]	; 0x58
 80081be:	e001      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d044      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081da:	d01f      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80081dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e0:	d805      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80081e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081ea:	d00e      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80081ec:	e01f      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80081ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081f2:	d01f      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80081f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081f8:	d01e      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80081fa:	e018      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fc:	4b21      	ldr	r3, [pc, #132]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4a20      	ldr	r2, [pc, #128]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008208:	e017      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3304      	adds	r3, #4
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fc43 	bl	8009a9c <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800821a:	e00e      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3324      	adds	r3, #36	; 0x24
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fcec 	bl	8009c00 <RCCEx_PLL3_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800822c:	e005      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
      break;
 8008232:	e002      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008240:	4b10      	ldr	r3, [pc, #64]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008244:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800824e:	490d      	ldr	r1, [pc, #52]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008250:	4313      	orrs	r3, r2
 8008252:	658b      	str	r3, [r1, #88]	; 0x58
 8008254:	e001      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d035      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826a:	2b10      	cmp	r3, #16
 800826c:	d00c      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800826e:	2b10      	cmp	r3, #16
 8008270:	d802      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01b      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008276:	e017      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008278:	2b20      	cmp	r3, #32
 800827a:	d00c      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800827c:	2b30      	cmp	r3, #48	; 0x30
 800827e:	d018      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008280:	e012      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008288:	4bae      	ldr	r3, [pc, #696]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4aad      	ldr	r2, [pc, #692]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800828e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008294:	e00e      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3304      	adds	r3, #4
 800829a:	2102      	movs	r1, #2
 800829c:	4618      	mov	r0, r3
 800829e:	f001 fbfd 	bl	8009a9c <RCCEx_PLL2_Config>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80082a6:	e005      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
      break;
 80082ac:	e002      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80082b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082ba:	4ba2      	ldr	r3, [pc, #648]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80082bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c6:	499f      	ldr	r1, [pc, #636]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082cc:	e001      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d042      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e6:	d01f      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80082e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ec:	d805      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f6:	d00e      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80082f8:	e01f      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80082fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082fe:	d01f      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008304:	d01e      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008306:	e018      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008308:	4b8e      	ldr	r3, [pc, #568]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	4a8d      	ldr	r2, [pc, #564]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800830e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008312:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008314:	e017      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3304      	adds	r3, #4
 800831a:	2100      	movs	r1, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f001 fbbd 	bl	8009a9c <RCCEx_PLL2_Config>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008326:	e00e      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3324      	adds	r3, #36	; 0x24
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f001 fc66 	bl	8009c00 <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008338:	e005      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	75fb      	strb	r3, [r7, #23]
      break;
 800833e:	e002      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d109      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800834c:	4b7d      	ldr	r3, [pc, #500]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800834e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008350:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008358:	497a      	ldr	r1, [pc, #488]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800835a:	4313      	orrs	r3, r2
 800835c:	650b      	str	r3, [r1, #80]	; 0x50
 800835e:	e001      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d042      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008378:	d01b      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800837a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837e:	d805      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d022      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008388:	d00a      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800838a:	e01b      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800838c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008390:	d01d      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008396:	d01c      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800839c:	d01b      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800839e:	e011      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 fb78 	bl	8009a9c <RCCEx_PLL2_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083b0:	e012      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3324      	adds	r3, #36	; 0x24
 80083b6:	2101      	movs	r1, #1
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fc21 	bl	8009c00 <RCCEx_PLL3_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083c2:	e009      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
      break;
 80083c8:	e006      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083ca:	bf00      	nop
 80083cc:	e004      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083ce:	bf00      	nop
 80083d0:	e002      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083d2:	bf00      	nop
 80083d4:	e000      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80083d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083de:	4b59      	ldr	r3, [pc, #356]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80083e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ea:	4956      	ldr	r1, [pc, #344]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	650b      	str	r3, [r1, #80]	; 0x50
 80083f0:	e001      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d044      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840c:	d01b      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800840e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008412:	d805      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d022      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800841e:	e01b      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008424:	d01d      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800842a:	d01c      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800842c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008430:	d01b      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008432:	e011      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	2101      	movs	r1, #1
 800843a:	4618      	mov	r0, r3
 800843c:	f001 fb2e 	bl	8009a9c <RCCEx_PLL2_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008444:	e012      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3324      	adds	r3, #36	; 0x24
 800844a:	2101      	movs	r1, #1
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fbd7 	bl	8009c00 <RCCEx_PLL3_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008456:	e009      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	75fb      	strb	r3, [r7, #23]
      break;
 800845c:	e006      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800845e:	bf00      	nop
 8008460:	e004      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008462:	bf00      	nop
 8008464:	e002      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008466:	bf00      	nop
 8008468:	e000      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800846a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008472:	4b34      	ldr	r3, [pc, #208]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008480:	4930      	ldr	r1, [pc, #192]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8008482:	4313      	orrs	r3, r2
 8008484:	658b      	str	r3, [r1, #88]	; 0x58
 8008486:	e001      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d022      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00e      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x53a>
 80084a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a4:	d108      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3304      	adds	r3, #4
 80084aa:	2101      	movs	r1, #1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 faf5 	bl	8009a9c <RCCEx_PLL2_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80084b6:	e003      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
      break;
 80084bc:	e000      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 80084be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80084c6:	4b1f      	ldr	r3, [pc, #124]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80084c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d2:	491c      	ldr	r1, [pc, #112]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80084d8:	e001      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d030      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f2:	d005      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80084f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f8:	d009      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d013      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80084fe:	e00f      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008500:	4b10      	ldr	r3, [pc, #64]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	4a0f      	ldr	r2, [pc, #60]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8008506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800850a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800850c:	e00c      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3304      	adds	r3, #4
 8008512:	2101      	movs	r1, #1
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fac1 	bl	8009a9c <RCCEx_PLL2_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800851e:	e003      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	75fb      	strb	r3, [r7, #23]
      break;
 8008524:	e000      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 8008526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10c      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853a:	4902      	ldr	r1, [pc, #8]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800853c:	4313      	orrs	r3, r2
 800853e:	650b      	str	r3, [r1, #80]	; 0x50
 8008540:	e004      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008542:	bf00      	nop
 8008544:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d032      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855c:	2b03      	cmp	r3, #3
 800855e:	d81b      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8008560:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	0800859f 	.word	0x0800859f
 800856c:	08008579 	.word	0x08008579
 8008570:	08008587 	.word	0x08008587
 8008574:	0800859f 	.word	0x0800859f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008578:	4bb8      	ldr	r3, [pc, #736]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	4ab7      	ldr	r2, [pc, #732]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800857e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008584:	e00c      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	2102      	movs	r1, #2
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fa85 	bl	8009a9c <RCCEx_PLL2_Config>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008596:	e003      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	75fb      	strb	r3, [r7, #23]
      break;
 800859c:	e000      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 800859e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085a6:	4bad      	ldr	r3, [pc, #692]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80085a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085aa:	f023 0203 	bic.w	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	49aa      	ldr	r1, [pc, #680]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085b8:	e001      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8086 	beq.w	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085cc:	4ba4      	ldr	r3, [pc, #656]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4aa3      	ldr	r2, [pc, #652]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80085d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085d8:	f7f9 fc66 	bl	8001ea8 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085de:	e009      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e0:	f7f9 fc62 	bl	8001ea8 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b64      	cmp	r3, #100	; 0x64
 80085ec:	d902      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	75fb      	strb	r3, [r7, #23]
        break;
 80085f2:	e005      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085f4:	4b9a      	ldr	r3, [pc, #616]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0ef      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d166      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008606:	4b95      	ldr	r3, [pc, #596]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008610:	4053      	eors	r3, r2
 8008612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008616:	2b00      	cmp	r3, #0
 8008618:	d013      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800861a:	4b90      	ldr	r3, [pc, #576]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008622:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008624:	4b8d      	ldr	r3, [pc, #564]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	4a8c      	ldr	r2, [pc, #560]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800862a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800862e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008630:	4b8a      	ldr	r3, [pc, #552]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008634:	4a89      	ldr	r2, [pc, #548]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800863c:	4a87      	ldr	r2, [pc, #540]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864c:	d115      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7f9 fc2b 	bl	8001ea8 <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008654:	e00b      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008656:	f7f9 fc27 	bl	8001ea8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f241 3288 	movw	r2, #5000	; 0x1388
 8008664:	4293      	cmp	r3, r2
 8008666:	d902      	bls.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	75fb      	strb	r3, [r7, #23]
            break;
 800866c:	e005      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800866e:	4b7b      	ldr	r3, [pc, #492]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0ed      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d126      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800868e:	d10d      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008690:	4b72      	ldr	r3, [pc, #456]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800869e:	0919      	lsrs	r1, r3, #4
 80086a0:	4b70      	ldr	r3, [pc, #448]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80086a2:	400b      	ands	r3, r1
 80086a4:	496d      	ldr	r1, [pc, #436]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	610b      	str	r3, [r1, #16]
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x734>
 80086ac:	4b6b      	ldr	r3, [pc, #428]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	4a6a      	ldr	r2, [pc, #424]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80086b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80086b6:	6113      	str	r3, [r2, #16]
 80086b8:	4b68      	ldr	r3, [pc, #416]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80086ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086c6:	4965      	ldr	r1, [pc, #404]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	670b      	str	r3, [r1, #112]	; 0x70
 80086cc:	e004      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	75bb      	strb	r3, [r7, #22]
 80086d2:	e001      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d07e      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e8:	2b28      	cmp	r3, #40	; 0x28
 80086ea:	d867      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x838>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	080087c3 	.word	0x080087c3
 80086f8:	080087bd 	.word	0x080087bd
 80086fc:	080087bd 	.word	0x080087bd
 8008700:	080087bd 	.word	0x080087bd
 8008704:	080087bd 	.word	0x080087bd
 8008708:	080087bd 	.word	0x080087bd
 800870c:	080087bd 	.word	0x080087bd
 8008710:	080087bd 	.word	0x080087bd
 8008714:	08008799 	.word	0x08008799
 8008718:	080087bd 	.word	0x080087bd
 800871c:	080087bd 	.word	0x080087bd
 8008720:	080087bd 	.word	0x080087bd
 8008724:	080087bd 	.word	0x080087bd
 8008728:	080087bd 	.word	0x080087bd
 800872c:	080087bd 	.word	0x080087bd
 8008730:	080087bd 	.word	0x080087bd
 8008734:	080087ab 	.word	0x080087ab
 8008738:	080087bd 	.word	0x080087bd
 800873c:	080087bd 	.word	0x080087bd
 8008740:	080087bd 	.word	0x080087bd
 8008744:	080087bd 	.word	0x080087bd
 8008748:	080087bd 	.word	0x080087bd
 800874c:	080087bd 	.word	0x080087bd
 8008750:	080087bd 	.word	0x080087bd
 8008754:	080087c3 	.word	0x080087c3
 8008758:	080087bd 	.word	0x080087bd
 800875c:	080087bd 	.word	0x080087bd
 8008760:	080087bd 	.word	0x080087bd
 8008764:	080087bd 	.word	0x080087bd
 8008768:	080087bd 	.word	0x080087bd
 800876c:	080087bd 	.word	0x080087bd
 8008770:	080087bd 	.word	0x080087bd
 8008774:	080087c3 	.word	0x080087c3
 8008778:	080087bd 	.word	0x080087bd
 800877c:	080087bd 	.word	0x080087bd
 8008780:	080087bd 	.word	0x080087bd
 8008784:	080087bd 	.word	0x080087bd
 8008788:	080087bd 	.word	0x080087bd
 800878c:	080087bd 	.word	0x080087bd
 8008790:	080087bd 	.word	0x080087bd
 8008794:	080087c3 	.word	0x080087c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	2101      	movs	r1, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f97c 	bl	8009a9c <RCCEx_PLL2_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80087a8:	e00c      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3324      	adds	r3, #36	; 0x24
 80087ae:	2101      	movs	r1, #1
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fa25 	bl	8009c00 <RCCEx_PLL3_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80087ba:	e003      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]
      break;
 80087c0:	e000      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 80087c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80087cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087d6:	4921      	ldr	r1, [pc, #132]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	654b      	str	r3, [r1, #84]	; 0x54
 80087dc:	e001      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d03e      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d820      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_RCCEx_PeriphCLKConfig+0x878>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	0800883f 	.word	0x0800883f
 8008800:	08008815 	.word	0x08008815
 8008804:	08008827 	.word	0x08008827
 8008808:	0800883f 	.word	0x0800883f
 800880c:	0800883f 	.word	0x0800883f
 8008810:	0800883f 	.word	0x0800883f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3304      	adds	r3, #4
 8008818:	2101      	movs	r1, #1
 800881a:	4618      	mov	r0, r3
 800881c:	f001 f93e 	bl	8009a9c <RCCEx_PLL2_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008824:	e00c      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3324      	adds	r3, #36	; 0x24
 800882a:	2101      	movs	r1, #1
 800882c:	4618      	mov	r0, r3
 800882e:	f001 f9e7 	bl	8009c00 <RCCEx_PLL3_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008836:	e003      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
      break;
 800883c:	e000      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 800883e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d110      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	f023 0207 	bic.w	r2, r3, #7
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008852:	4902      	ldr	r1, [pc, #8]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8008854:	4313      	orrs	r3, r2
 8008856:	654b      	str	r3, [r1, #84]	; 0x54
 8008858:	e008      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	58024800 	.word	0x58024800
 8008864:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d039      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800887e:	2b05      	cmp	r3, #5
 8008880:	d820      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088cb 	.word	0x080088cb
 800888c:	080088a1 	.word	0x080088a1
 8008890:	080088b3 	.word	0x080088b3
 8008894:	080088cb 	.word	0x080088cb
 8008898:	080088cb 	.word	0x080088cb
 800889c:	080088cb 	.word	0x080088cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	2101      	movs	r1, #1
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 f8f8 	bl	8009a9c <RCCEx_PLL2_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088b0:	e00c      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3324      	adds	r3, #36	; 0x24
 80088b6:	2101      	movs	r1, #1
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 f9a1 	bl	8009c00 <RCCEx_PLL3_Config>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80088c2:	e003      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
      break;
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 80088ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088d2:	4bb2      	ldr	r3, [pc, #712]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80088d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d6:	f023 0207 	bic.w	r2, r3, #7
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e0:	49ae      	ldr	r1, [pc, #696]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	658b      	str	r3, [r1, #88]	; 0x58
 80088e6:	e001      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d044      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008902:	d01b      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008908:	d805      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x992>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d022      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800890e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008912:	d00a      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8008914:	e01b      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8008916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891a:	d01d      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800891c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008920:	d01c      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8008922:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008926:	d01b      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8008928:	e011      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3304      	adds	r3, #4
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f8b3 	bl	8009a9c <RCCEx_PLL2_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800893a:	e012      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3324      	adds	r3, #36	; 0x24
 8008940:	2102      	movs	r1, #2
 8008942:	4618      	mov	r0, r3
 8008944:	f001 f95c 	bl	8009c00 <RCCEx_PLL3_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800894c:	e009      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	75fb      	strb	r3, [r7, #23]
      break;
 8008952:	e006      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8008954:	bf00      	nop
 8008956:	e004      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8008958:	bf00      	nop
 800895a:	e002      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8008960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008968:	4b8c      	ldr	r3, [pc, #560]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800896a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008976:	4989      	ldr	r1, [pc, #548]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008978:	4313      	orrs	r3, r2
 800897a:	654b      	str	r3, [r1, #84]	; 0x54
 800897c:	e001      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	d044      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008998:	d01b      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800899a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899e:	d805      	bhi.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d022      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80089a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a8:	d00a      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80089aa:	e01b      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80089ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b0:	d01d      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80089b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089b6:	d01c      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 80089b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089bc:	d01b      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 80089be:	e011      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 f868 	bl	8009a9c <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089d0:	e012      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3324      	adds	r3, #36	; 0x24
 80089d6:	2102      	movs	r1, #2
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 f911 	bl	8009c00 <RCCEx_PLL3_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089e2:	e009      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	75fb      	strb	r3, [r7, #23]
      break;
 80089e8:	e006      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80089ea:	bf00      	nop
 80089ec:	e004      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80089ee:	bf00      	nop
 80089f0:	e002      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80089f2:	bf00      	nop
 80089f4:	e000      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80089f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089fe:	4b67      	ldr	r3, [pc, #412]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a0c:	4963      	ldr	r1, [pc, #396]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	658b      	str	r3, [r1, #88]	; 0x58
 8008a12:	e001      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d044      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a2e:	d01b      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8008a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a34:	d805      	bhi.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d022      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	d00a      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8008a40:	e01b      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8008a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a46:	d01d      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8008a48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a4c:	d01c      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8008a4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a52:	d01b      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8008a54:	e011      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 f81d 	bl	8009a9c <RCCEx_PLL2_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a66:	e012      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3324      	adds	r3, #36	; 0x24
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 f8c6 	bl	8009c00 <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a78:	e009      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a7e:	e006      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8008a80:	bf00      	nop
 8008a82:	e004      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8008a84:	bf00      	nop
 8008a86:	e002      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e000      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8008a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a94:	4b41      	ldr	r3, [pc, #260]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008aa2:	493e      	ldr	r1, [pc, #248]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	658b      	str	r3, [r1, #88]	; 0x58
 8008aa8:	e001      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01a      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac4:	d10a      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3324      	adds	r3, #36	; 0x24
 8008aca:	2102      	movs	r1, #2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 f897 	bl	8009c00 <RCCEx_PLL3_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008adc:	4b2f      	ldr	r3, [pc, #188]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aea:	492c      	ldr	r1, [pc, #176]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01a      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b06:	d10a      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3324      	adds	r3, #36	; 0x24
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 f876 	bl	8009c00 <RCCEx_PLL3_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b1e:	4b1f      	ldr	r3, [pc, #124]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b2c:	491b      	ldr	r1, [pc, #108]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d032      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b48:	d00d      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8008b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b4e:	d016      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d111      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 ff9e 	bl	8009a9c <RCCEx_PLL2_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b64:	e00c      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3324      	adds	r3, #36	; 0x24
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 f847 	bl	8009c00 <RCCEx_PLL3_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7c:	e000      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8008b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10c      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b94:	4901      	ldr	r1, [pc, #4]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	658b      	str	r3, [r1, #88]	; 0x58
 8008b9a:	e003      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02f      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bba:	d00c      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008bbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bc0:	d015      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc6:	d10f      	bne.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc8:	4b7a      	ldr	r3, [pc, #488]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	4a79      	ldr	r2, [pc, #484]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008bd4:	e00c      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3324      	adds	r3, #36	; 0x24
 8008bda:	2101      	movs	r1, #1
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f80f 	bl	8009c00 <RCCEx_PLL3_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008be6:	e003      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	75fb      	strb	r3, [r7, #23]
      break;
 8008bec:	e000      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 8008bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bf6:	4b6f      	ldr	r3, [pc, #444]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c04:	496b      	ldr	r1, [pc, #428]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	654b      	str	r3, [r1, #84]	; 0x54
 8008c0a:	e001      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d029      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c28:	d007      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 8008c2a:	e00f      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2c:	4b61      	ldr	r3, [pc, #388]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	4a60      	ldr	r2, [pc, #384]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c38:	e00b      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	2102      	movs	r1, #2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 ff2b 	bl	8009a9c <RCCEx_PLL2_Config>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c4a:	e002      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d109      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c58:	4b56      	ldr	r3, [pc, #344]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	4953      	ldr	r1, [pc, #332]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c6a:	e001      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3324      	adds	r3, #36	; 0x24
 8008c80:	2102      	movs	r1, #2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ffbc 	bl	8009c00 <RCCEx_PLL3_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d031      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca8:	d00c      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8008caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cae:	d802      	bhi.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d011      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8008cb4:	e00d      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cba:	d00f      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8008cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8008cc2:	e006      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc4:	4b3b      	ldr	r3, [pc, #236]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	4a3a      	ldr	r2, [pc, #232]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008cd0:	e007      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd6:	e004      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8008cd8:	bf00      	nop
 8008cda:	e002      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8008cdc:	bf00      	nop
 8008cde:	e000      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8008ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ce8:	4b32      	ldr	r3, [pc, #200]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cf6:	492f      	ldr	r1, [pc, #188]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	654b      	str	r3, [r1, #84]	; 0x54
 8008cfc:	e001      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d0e:	4b29      	ldr	r3, [pc, #164]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d1a:	4926      	ldr	r1, [pc, #152]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d2c:	4b21      	ldr	r3, [pc, #132]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d3a:	491e      	ldr	r1, [pc, #120]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d4c:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d58:	4916      	ldr	r1, [pc, #88]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00d      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xe02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	4a11      	ldr	r2, [pc, #68]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d74:	6113      	str	r3, [r2, #16]
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008d80:	490c      	ldr	r1, [pc, #48]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	da08      	bge.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	4906      	ldr	r1, [pc, #24]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008da0:	7dbb      	ldrb	r3, [r7, #22]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xe28>
  }
  return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	58024400 	.word	0x58024400

08008db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b090      	sub	sp, #64	; 0x40
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc6:	d150      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008dc8:	4ba1      	ldr	r3, [pc, #644]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d844      	bhi.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008df5 	.word	0x08008df5
 8008de4:	08008e05 	.word	0x08008e05
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	08008e5d 	.word	0x08008e5d
 8008df0:	08008e25 	.word	0x08008e25
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fd03 	bl	8009804 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e02:	e241      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e04:	f107 0318 	add.w	r3, r7, #24
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fa63 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e12:	e239      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e14:	f107 030c 	add.w	r3, r7, #12
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fba7 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e22:	e231      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e24:	4b8a      	ldr	r3, [pc, #552]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e2c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e34:	4b87      	ldr	r3, [pc, #540]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e38:	e226      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e40:	d102      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008e42:	4b85      	ldr	r3, [pc, #532]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e46:	e21f      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e4e:	d102      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008e50:	4b82      	ldr	r3, [pc, #520]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e54:	e218      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5a:	e215      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e5c:	4b80      	ldr	r3, [pc, #512]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e60:	e212      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e66:	bf00      	nop
 8008e68:	e20e      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e70:	d14f      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008e72:	4b77      	ldr	r3, [pc, #476]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e76:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008e7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	2b80      	cmp	r3, #128	; 0x80
 8008e80:	d01c      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008e82:	2b80      	cmp	r3, #128	; 0x80
 8008e84:	d804      	bhi.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d008      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d00e      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008e8e:	e03c      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008e90:	2bc0      	cmp	r3, #192	; 0xc0
 8008e92:	d037      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e98:	d018      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008e9a:	e036      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fcaf 	bl	8009804 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eaa:	e1ed      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eac:	f107 0318 	add.w	r3, r7, #24
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fa0f 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eba:	e1e5      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ebc:	f107 030c 	add.w	r3, r7, #12
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fb53 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eca:	e1dd      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ecc:	4b60      	ldr	r3, [pc, #384]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008edc:	4b5d      	ldr	r3, [pc, #372]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ee0:	e1d2      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee8:	d102      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008eea:	4b5b      	ldr	r3, [pc, #364]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eee:	e1cb      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef6:	d102      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008ef8:	4b58      	ldr	r3, [pc, #352]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efc:	e1c4      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f02:	e1c1      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f04:	4b56      	ldr	r3, [pc, #344]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f08:	e1be      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0e:	bf00      	nop
 8008f10:	e1ba      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f18:	d153      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008f1a:	4b4d      	ldr	r3, [pc, #308]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008f22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f2a:	d01f      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f30:	d805      	bhi.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f3a:	d00f      	beq.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008f3c:	e03d      	b.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f42:	d037      	beq.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f48:	d018      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008f4a:	e036      	b.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fc57 	bl	8009804 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5a:	e195      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5c:	f107 0318 	add.w	r3, r7, #24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f9b7 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6a:	e18d      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fafb 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f7a:	e185      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f7c:	4b34      	ldr	r3, [pc, #208]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d102      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f8c:	4b31      	ldr	r3, [pc, #196]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f90:	e17a      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f98:	d102      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9e:	e173      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa6:	d102      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008fa8:	4b2c      	ldr	r3, [pc, #176]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fac:	e16c      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb2:	e169      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fb4:	4b2a      	ldr	r3, [pc, #168]	; (8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb8:	e166      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fbe:	bf00      	nop
 8008fc0:	e162      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc8:	d15d      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008fca:	4b21      	ldr	r3, [pc, #132]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008fd2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fda:	d01f      	beq.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fe0:	d805      	bhi.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fea:	d00f      	beq.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008fec:	e047      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ff2:	d041      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff8:	d018      	beq.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008ffa:	e040      	b.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fbff 	bl	8009804 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900a:	e13d      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900c:	f107 0318 	add.w	r3, r7, #24
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f95f 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901a:	e135      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901c:	f107 030c 	add.w	r3, r7, #12
 8009020:	4618      	mov	r0, r3
 8009022:	f000 faa3 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800902a:	e12d      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800902c:	4b08      	ldr	r3, [pc, #32]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800902e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009034:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800903c:	4b05      	ldr	r3, [pc, #20]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009040:	e122      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009048:	d10c      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800904a:	4b03      	ldr	r3, [pc, #12]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904e:	e11b      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009050:	58024400 	.word	0x58024400
 8009054:	03d09000 	.word	0x03d09000
 8009058:	003d0900 	.word	0x003d0900
 800905c:	017d7840 	.word	0x017d7840
 8009060:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906a:	d102      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800906c:	4b89      	ldr	r3, [pc, #548]	; (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009070:	e10a      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009076:	e107      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009078:	4b87      	ldr	r3, [pc, #540]	; (8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907c:	e104      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009082:	bf00      	nop
 8009084:	e100      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908c:	d153      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800908e:	4b83      	ldr	r3, [pc, #524]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009092:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909e:	d01f      	beq.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80090a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a4:	d805      	bhi.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80090aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ae:	d00f      	beq.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80090b0:	e03d      	b.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80090b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090b6:	d037      	beq.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80090b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090bc:	d018      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80090be:	e036      	b.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fb9d 	bl	8009804 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ce:	e0db      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d0:	f107 0318 	add.w	r3, r7, #24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8fd 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090de:	e0d3      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e0:	f107 030c 	add.w	r3, r7, #12
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fa41 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ee:	e0cb      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090f0:	4b6a      	ldr	r3, [pc, #424]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80090f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009100:	4b67      	ldr	r3, [pc, #412]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009104:	e0c0      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800910c:	d102      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800910e:	4b65      	ldr	r3, [pc, #404]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009112:	e0b9      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800911a:	d102      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800911c:	4b5d      	ldr	r3, [pc, #372]	; (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009120:	e0b2      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009126:	e0af      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009128:	4b5b      	ldr	r3, [pc, #364]	; (8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912c:	e0ac      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009132:	bf00      	nop
 8009134:	e0a8      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800913c:	d13d      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800913e:	4b57      	ldr	r3, [pc, #348]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009146:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914e:	d00c      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009154:	d011      	beq.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d12b      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800915a:	f107 0318 	add.w	r3, r7, #24
 800915e:	4618      	mov	r0, r3
 8009160:	f000 f8b8 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009168:	e08e      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916a:	f107 030c 	add.w	r3, r7, #12
 800916e:	4618      	mov	r0, r3
 8009170:	f000 f9fc 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009178:	e086      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800917a:	4b48      	ldr	r3, [pc, #288]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800917c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009182:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	2b00      	cmp	r3, #0
 8009188:	d102      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800918a:	4b45      	ldr	r3, [pc, #276]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800918e:	e07b      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009196:	d102      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009198:	4b42      	ldr	r3, [pc, #264]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800919c:	e074      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a4:	d102      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80091a6:	4b3b      	ldr	r3, [pc, #236]	; (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091aa:	e06d      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b0:	e06a      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b6:	bf00      	nop
 80091b8:	e066      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c0:	d11f      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80091c2:	4b36      	ldr	r3, [pc, #216]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80091c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80091d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d6:	d008      	beq.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80091d8:	e00f      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fb10 	bl	8009804 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091e8:	e04e      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ea:	f107 0318 	add.w	r3, r7, #24
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f870 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f8:	e046      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fe:	bf00      	nop
 8009200:	e042      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009208:	d13c      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800920a:	4b24      	ldr	r3, [pc, #144]	; (800929c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800920c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009212:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800921a:	d01e      	beq.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800921c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009220:	d805      	bhi.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00d      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800922a:	d00e      	beq.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800922c:	e026      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800922e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009232:	d01d      	beq.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009238:	d01d      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800923a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800923e:	d014      	beq.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009240:	e01c      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009242:	f000 f831 	bl	80092a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009246:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009248:	e01e      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924a:	f107 0318 	add.w	r3, r7, #24
 800924e:	4618      	mov	r0, r3
 8009250:	f000 f840 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009258:	e016      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800925a:	f107 030c 	add.w	r3, r7, #12
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f984 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009268:	e00e      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800926e:	e00b      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009270:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009274:	e008      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009276:	4b07      	ldr	r3, [pc, #28]	; (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800927a:	e005      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009280:	bf00      	nop
 8009282:	e001      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800928a:	4618      	mov	r0, r3
 800928c:	3740      	adds	r7, #64	; 0x40
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	017d7840 	.word	0x017d7840
 8009298:	00bb8000 	.word	0x00bb8000
 800929c:	58024400 	.word	0x58024400
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	003d0900 	.word	0x003d0900

080092a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092ac:	f7fe fdcc 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 80092b0:	4601      	mov	r1, r0
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	091b      	lsrs	r3, r3, #4
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	4a04      	ldr	r2, [pc, #16]	; (80092d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092be:	5cd3      	ldrb	r3, [r2, r3]
 80092c0:	f003 031f 	and.w	r3, r3, #31
 80092c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	58024400 	.word	0x58024400
 80092d0:	08015480 	.word	0x08015480

080092d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092dc:	4b9d      	ldr	r3, [pc, #628]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	f003 0303 	and.w	r3, r3, #3
 80092e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80092e6:	4b9b      	ldr	r3, [pc, #620]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	0b1b      	lsrs	r3, r3, #12
 80092ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092f2:	4b98      	ldr	r3, [pc, #608]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	091b      	lsrs	r3, r3, #4
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80092fe:	4b95      	ldr	r3, [pc, #596]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	08db      	lsrs	r3, r3, #3
 8009304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	fb02 f303 	mul.w	r3, r2, r3
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 810a 	beq.w	8009536 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d05a      	beq.n	80093de <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009328:	2b01      	cmp	r3, #1
 800932a:	d302      	bcc.n	8009332 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800932c:	2b02      	cmp	r3, #2
 800932e:	d078      	beq.n	8009422 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009330:	e099      	b.n	8009466 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009332:	4b88      	ldr	r3, [pc, #544]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d02d      	beq.n	800939a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800933e:	4b85      	ldr	r3, [pc, #532]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	08db      	lsrs	r3, r3, #3
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	4a83      	ldr	r2, [pc, #524]	; (8009558 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800934a:	fa22 f303 	lsr.w	r3, r2, r3
 800934e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009368:	4b7a      	ldr	r3, [pc, #488]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	ed97 6a03 	vldr	s12, [r7, #12]
 800937c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800955c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009394:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009398:	e087      	b.n	80094aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	ee07 3a90 	vmov	s15, r3
 80093a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009560 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80093a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ac:	4b69      	ldr	r3, [pc, #420]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800955c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093dc:	e065      	b.n	80094aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80093ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f0:	4b58      	ldr	r3, [pc, #352]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009400:	ed97 6a03 	vldr	s12, [r7, #12]
 8009404:	eddf 5a55 	vldr	s11, [pc, #340]	; 800955c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009420:	e043      	b.n	80094aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	ee07 3a90 	vmov	s15, r3
 8009428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009434:	4b47      	ldr	r3, [pc, #284]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009444:	ed97 6a03 	vldr	s12, [r7, #12]
 8009448:	eddf 5a44 	vldr	s11, [pc, #272]	; 800955c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800944c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009460:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009464:	e021      	b.n	80094aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	ee07 3a90 	vmov	s15, r3
 800946c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009470:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009478:	4b36      	ldr	r3, [pc, #216]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009480:	ee07 3a90 	vmov	s15, r3
 8009484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009488:	ed97 6a03 	vldr	s12, [r7, #12]
 800948c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800955c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094a8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80094aa:	4b2a      	ldr	r3, [pc, #168]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	0a5b      	lsrs	r3, r3, #9
 80094b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d0:	ee17 2a90 	vmov	r2, s15
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80094d8:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	0c1b      	lsrs	r3, r3, #16
 80094de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094fe:	ee17 2a90 	vmov	r2, s15
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009506:	4b13      	ldr	r3, [pc, #76]	; (8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	0e1b      	lsrs	r3, r3, #24
 800950c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009510:	ee07 3a90 	vmov	s15, r3
 8009514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800951c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009520:	edd7 6a07 	vldr	s13, [r7, #28]
 8009524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800952c:	ee17 2a90 	vmov	r2, s15
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009534:	e008      	b.n	8009548 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	609a      	str	r2, [r3, #8]
}
 8009548:	bf00      	nop
 800954a:	3724      	adds	r7, #36	; 0x24
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	58024400 	.word	0x58024400
 8009558:	03d09000 	.word	0x03d09000
 800955c:	46000000 	.word	0x46000000
 8009560:	4c742400 	.word	0x4c742400
 8009564:	4a742400 	.word	0x4a742400
 8009568:	4bbebc20 	.word	0x4bbebc20

0800956c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800956c:	b480      	push	{r7}
 800956e:	b089      	sub	sp, #36	; 0x24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009574:	4b9d      	ldr	r3, [pc, #628]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800957e:	4b9b      	ldr	r3, [pc, #620]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009582:	0d1b      	lsrs	r3, r3, #20
 8009584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009588:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800958a:	4b98      	ldr	r3, [pc, #608]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009596:	4b95      	ldr	r3, [pc, #596]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959a:	08db      	lsrs	r3, r3, #3
 800959c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	fb02 f303 	mul.w	r3, r2, r3
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 810a 	beq.w	80097ce <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d05a      	beq.n	8009676 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d302      	bcc.n	80095ca <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d078      	beq.n	80096ba <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80095c8:	e099      	b.n	80096fe <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ca:	4b88      	ldr	r3, [pc, #544]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d02d      	beq.n	8009632 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095d6:	4b85      	ldr	r3, [pc, #532]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	08db      	lsrs	r3, r3, #3
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	4a83      	ldr	r2, [pc, #524]	; (80097f0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80095e2:	fa22 f303 	lsr.w	r3, r2, r3
 80095e6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	ee07 3a90 	vmov	s15, r3
 80095f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009600:	4b7a      	ldr	r3, [pc, #488]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009610:	ed97 6a03 	vldr	s12, [r7, #12]
 8009614:	eddf 5a77 	vldr	s11, [pc, #476]	; 80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009630:	e087      	b.n	8009742 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80097f8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009644:	4b69      	ldr	r3, [pc, #420]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009654:	ed97 6a03 	vldr	s12, [r7, #12]
 8009658:	eddf 5a66 	vldr	s11, [pc, #408]	; 80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800965c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009670:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009674:	e065      	b.n	8009742 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009680:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80097fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009688:	4b58      	ldr	r3, [pc, #352]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009698:	ed97 6a03 	vldr	s12, [r7, #12]
 800969c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80096a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b8:	e043      	b.n	8009742 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009800 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80096c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096cc:	4b47      	ldr	r3, [pc, #284]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80096e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096fc:	e021      	b.n	8009742 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009708:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80097fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800970c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009710:	4b36      	ldr	r3, [pc, #216]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009720:	ed97 6a03 	vldr	s12, [r7, #12]
 8009724:	eddf 5a33 	vldr	s11, [pc, #204]	; 80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800972c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800973c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009740:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009742:	4b2a      	ldr	r3, [pc, #168]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	0a5b      	lsrs	r3, r3, #9
 8009748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800975c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009768:	ee17 2a90 	vmov	r2, s15
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009770:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	0c1b      	lsrs	r3, r3, #16
 8009776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800978a:	edd7 6a07 	vldr	s13, [r7, #28]
 800978e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009796:	ee17 2a90 	vmov	r2, s15
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800979e:	4b13      	ldr	r3, [pc, #76]	; (80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	0e1b      	lsrs	r3, r3, #24
 80097a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a8:	ee07 3a90 	vmov	s15, r3
 80097ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c4:	ee17 2a90 	vmov	r2, s15
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097cc:	e008      	b.n	80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	609a      	str	r2, [r3, #8]
}
 80097e0:	bf00      	nop
 80097e2:	3724      	adds	r7, #36	; 0x24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	58024400 	.word	0x58024400
 80097f0:	03d09000 	.word	0x03d09000
 80097f4:	46000000 	.word	0x46000000
 80097f8:	4c742400 	.word	0x4c742400
 80097fc:	4a742400 	.word	0x4a742400
 8009800:	4bbebc20 	.word	0x4bbebc20

08009804 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009804:	b480      	push	{r7}
 8009806:	b089      	sub	sp, #36	; 0x24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800980c:	4b9d      	ldr	r3, [pc, #628]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	f003 0303 	and.w	r3, r3, #3
 8009814:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009816:	4b9b      	ldr	r3, [pc, #620]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981a:	091b      	lsrs	r3, r3, #4
 800981c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009820:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009822:	4b98      	ldr	r3, [pc, #608]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800982c:	4b95      	ldr	r3, [pc, #596]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009830:	08db      	lsrs	r3, r3, #3
 8009832:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	fb02 f303 	mul.w	r3, r2, r3
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009844:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 810a 	beq.w	8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d05a      	beq.n	800990c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009856:	2b01      	cmp	r3, #1
 8009858:	d302      	bcc.n	8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800985a:	2b02      	cmp	r3, #2
 800985c:	d078      	beq.n	8009950 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800985e:	e099      	b.n	8009994 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009860:	4b88      	ldr	r3, [pc, #544]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d02d      	beq.n	80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800986c:	4b85      	ldr	r3, [pc, #532]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	08db      	lsrs	r3, r3, #3
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	4a84      	ldr	r2, [pc, #528]	; (8009a88 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b7b      	ldr	r3, [pc, #492]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098c6:	e087      	b.n	80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b6a      	ldr	r3, [pc, #424]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800990a:	e065      	b.n	80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b59      	ldr	r3, [pc, #356]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800994e:	e043      	b.n	80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b48      	ldr	r3, [pc, #288]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009992:	e021      	b.n	80099d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b37      	ldr	r3, [pc, #220]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099d6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80099d8:	4b2a      	ldr	r3, [pc, #168]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	0a5b      	lsrs	r3, r3, #9
 80099de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fe:	ee17 2a90 	vmov	r2, s15
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009a06:	4b1f      	ldr	r3, [pc, #124]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2c:	ee17 2a90 	vmov	r2, s15
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009a34:	4b13      	ldr	r3, [pc, #76]	; (8009a84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	0e1b      	lsrs	r3, r3, #24
 8009a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a5a:	ee17 2a90 	vmov	r2, s15
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a62:	e008      	b.n	8009a76 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
}
 8009a76:	bf00      	nop
 8009a78:	3724      	adds	r7, #36	; 0x24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	58024400 	.word	0x58024400
 8009a88:	03d09000 	.word	0x03d09000
 8009a8c:	46000000 	.word	0x46000000
 8009a90:	4c742400 	.word	0x4c742400
 8009a94:	4a742400 	.word	0x4a742400
 8009a98:	4bbebc20 	.word	0x4bbebc20

08009a9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009aaa:	4b53      	ldr	r3, [pc, #332]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	f003 0303 	and.w	r3, r3, #3
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d101      	bne.n	8009aba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e099      	b.n	8009bee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009aba:	4b4f      	ldr	r3, [pc, #316]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a4e      	ldr	r2, [pc, #312]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ac6:	f7f8 f9ef 	bl	8001ea8 <HAL_GetTick>
 8009aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009acc:	e008      	b.n	8009ae0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ace:	f7f8 f9eb 	bl	8001ea8 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d901      	bls.n	8009ae0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e086      	b.n	8009bee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ae0:	4b45      	ldr	r3, [pc, #276]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f0      	bne.n	8009ace <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009aec:	4b42      	ldr	r3, [pc, #264]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	031b      	lsls	r3, r3, #12
 8009afa:	493f      	ldr	r1, [pc, #252]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	628b      	str	r3, [r1, #40]	; 0x28
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	025b      	lsls	r3, r3, #9
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	431a      	orrs	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	041b      	lsls	r3, r3, #16
 8009b1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	061b      	lsls	r3, r3, #24
 8009b2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b30:	4931      	ldr	r1, [pc, #196]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b36:	4b30      	ldr	r3, [pc, #192]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	492d      	ldr	r1, [pc, #180]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b48:	4b2b      	ldr	r3, [pc, #172]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	f023 0220 	bic.w	r2, r3, #32
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	4928      	ldr	r1, [pc, #160]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b5a:	4b27      	ldr	r3, [pc, #156]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	4a26      	ldr	r2, [pc, #152]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b60:	f023 0310 	bic.w	r3, r3, #16
 8009b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b66:	4b24      	ldr	r3, [pc, #144]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b6a:	4b24      	ldr	r3, [pc, #144]	; (8009bfc <RCCEx_PLL2_Config+0x160>)
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	69d2      	ldr	r2, [r2, #28]
 8009b72:	00d2      	lsls	r2, r2, #3
 8009b74:	4920      	ldr	r1, [pc, #128]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b7a:	4b1f      	ldr	r3, [pc, #124]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	4a1e      	ldr	r2, [pc, #120]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b80:	f043 0310 	orr.w	r3, r3, #16
 8009b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b8c:	4b1a      	ldr	r3, [pc, #104]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	4a19      	ldr	r2, [pc, #100]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b98:	e00f      	b.n	8009bba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d106      	bne.n	8009bae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ba0:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	4a14      	ldr	r2, [pc, #80]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bac:	e005      	b.n	8009bba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009bae:	4b12      	ldr	r3, [pc, #72]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb2:	4a11      	ldr	r2, [pc, #68]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009bba:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a0e      	ldr	r2, [pc, #56]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bc6:	f7f8 f96f 	bl	8001ea8 <HAL_GetTick>
 8009bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bcc:	e008      	b.n	8009be0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009bce:	f7f8 f96b 	bl	8001ea8 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d901      	bls.n	8009be0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e006      	b.n	8009bee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <RCCEx_PLL2_Config+0x15c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d0f0      	beq.n	8009bce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	58024400 	.word	0x58024400
 8009bfc:	ffff0007 	.word	0xffff0007

08009c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c0e:	4b53      	ldr	r3, [pc, #332]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d101      	bne.n	8009c1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e099      	b.n	8009d52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c1e:	4b4f      	ldr	r3, [pc, #316]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a4e      	ldr	r2, [pc, #312]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c2a:	f7f8 f93d 	bl	8001ea8 <HAL_GetTick>
 8009c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c30:	e008      	b.n	8009c44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c32:	f7f8 f939 	bl	8001ea8 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d901      	bls.n	8009c44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e086      	b.n	8009d52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c44:	4b45      	ldr	r3, [pc, #276]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1f0      	bne.n	8009c32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c50:	4b42      	ldr	r3, [pc, #264]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	051b      	lsls	r3, r3, #20
 8009c5e:	493f      	ldr	r1, [pc, #252]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	628b      	str	r3, [r1, #40]	; 0x28
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	025b      	lsls	r3, r3, #9
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	041b      	lsls	r3, r3, #16
 8009c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c86:	431a      	orrs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	061b      	lsls	r3, r3, #24
 8009c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c94:	4931      	ldr	r1, [pc, #196]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c9a:	4b30      	ldr	r3, [pc, #192]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	492d      	ldr	r1, [pc, #180]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009cac:	4b2b      	ldr	r3, [pc, #172]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	4928      	ldr	r1, [pc, #160]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009cbe:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	4a26      	ldr	r2, [pc, #152]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009cca:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cce:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <RCCEx_PLL3_Config+0x160>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	69d2      	ldr	r2, [r2, #28]
 8009cd6:	00d2      	lsls	r2, r2, #3
 8009cd8:	4920      	ldr	r1, [pc, #128]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cde:	4b1f      	ldr	r3, [pc, #124]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	4a1e      	ldr	r2, [pc, #120]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d106      	bne.n	8009cfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cf0:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	4a19      	ldr	r2, [pc, #100]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cfc:	e00f      	b.n	8009d1e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d106      	bne.n	8009d12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d04:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a14      	ldr	r2, [pc, #80]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d10:	e005      	b.n	8009d1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d12:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	4a11      	ldr	r2, [pc, #68]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d1e:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a0e      	ldr	r2, [pc, #56]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d2a:	f7f8 f8bd 	bl	8001ea8 <HAL_GetTick>
 8009d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d30:	e008      	b.n	8009d44 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d32:	f7f8 f8b9 	bl	8001ea8 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d901      	bls.n	8009d44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e006      	b.n	8009d52 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d44:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <RCCEx_PLL3_Config+0x15c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0f0      	beq.n	8009d32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	58024400 	.word	0x58024400
 8009d60:	ffff0007 	.word	0xffff0007

08009d64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08a      	sub	sp, #40	; 0x28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e075      	b.n	8009e62 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7f7 fb67 	bl	800145c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2203      	movs	r2, #3
 8009d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f868 	bl	8009e6c <HAL_SD_InitCard>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e05d      	b.n	8009e62 <HAL_SD_Init+0xfe>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009da6:	f107 0308 	add.w	r3, r7, #8
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fd9f 	bl	800a8f0 <HAL_SD_GetCardStatus>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e052      	b.n	8009e62 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009dbc:	7e3b      	ldrb	r3, [r7, #24]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009dc2:	7e7b      	ldrb	r3, [r7, #25]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d10a      	bne.n	8009de6 <HAL_SD_Init+0x82>
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <HAL_SD_Init+0x78>
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d004      	beq.n	8009de6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009de2:	659a      	str	r2, [r3, #88]	; 0x58
 8009de4:	e00b      	b.n	8009dfe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d104      	bne.n	8009df8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009df4:	659a      	str	r2, [r3, #88]	; 0x58
 8009df6:	e002      	b.n	8009dfe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fe55 	bl	800aab4 <HAL_SD_ConfigWideBusOperation>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e026      	b.n	8009e62 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009e14:	f7f8 f848 	bl	8001ea8 <HAL_GetTick>
 8009e18:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e1a:	e011      	b.n	8009e40 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009e1c:	f7f8 f844 	bl	8001ea8 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2a:	d109      	bne.n	8009e40 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e32:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State= HAL_SD_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e010      	b.n	8009e62 <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fee1 	bl	800ac08 <HAL_SD_GetCardState>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d1e7      	bne.n	8009e1c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3728      	adds	r7, #40	; 0x28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e6c:	b590      	push	{r4, r7, lr}
 8009e6e:	b08d      	sub	sp, #52	; 0x34
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009e88:	f7fe ff96 	bl	8008db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e8c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	4a3a      	ldr	r2, [pc, #232]	; (8009f7c <HAL_SD_InitCard+0x110>)
 8009e94:	fba2 2303 	umull	r2, r3, r2, r3
 8009e98:	091b      	lsrs	r3, r3, #4
 8009e9a:	61fb      	str	r3, [r7, #28]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681c      	ldr	r4, [r3, #0]
 8009ea0:	466a      	mov	r2, sp
 8009ea2:	f107 0318 	add.w	r3, r7, #24
 8009ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009eaa:	e882 0003 	stmia.w	r2, {r0, r1}
 8009eae:	f107 030c 	add.w	r3, r7, #12
 8009eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f003 fb95 	bl	800d5e4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f003 fbd8 	bl	800d674 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <HAL_SD_InitCard+0x7c>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009ed6:	4a2a      	ldr	r2, [pc, #168]	; (8009f80 <HAL_SD_InitCard+0x114>)
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ede:	3301      	adds	r3, #1
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f7 ffed 	bl	8001ec0 <HAL_Delay>
 8009ee6:	e002      	b.n	8009eee <HAL_SD_InitCard+0x82>
  }
  else
  {
    HAL_Delay(2U);
 8009ee8:	2002      	movs	r0, #2
 8009eea:	f7f7 ffe9 	bl	8001ec0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 ff68 	bl	800adc4 <SD_PowerON>
 8009ef4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <HAL_SD_InitCard+0xa8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e02e      	b.n	8009f72 <HAL_SD_InitCard+0x106>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fe97 	bl	800ac48 <SD_InitCard>
 8009f1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <HAL_SD_InitCard+0xce>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e01b      	b.n	8009f72 <HAL_SD_InitCard+0x106>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f42:	4618      	mov	r0, r3
 8009f44:	f003 fc2c 	bl	800d7a0 <SDMMC_CmdBlockLength>
 8009f48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00f      	beq.n	8009f70 <HAL_SD_InitCard+0x104>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a0b      	ldr	r2, [pc, #44]	; (8009f84 <HAL_SD_InitCard+0x118>)
 8009f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e000      	b.n	8009f72 <HAL_SD_InitCard+0x106>
  }

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	372c      	adds	r7, #44	; 0x2c
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd90      	pop	{r4, r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	014f8b59 	.word	0x014f8b59
 8009f80:	00012110 	.word	0x00012110
 8009f84:	1fe00fff 	.word	0x1fe00fff

08009f88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d107      	bne.n	8009fb0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e08d      	b.n	800a0cc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	f040 8086 	bne.w	800a0ca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	635a      	str	r2, [r3, #52]	; 0x34

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	441a      	add	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d907      	bls.n	8009fe2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e074      	b.n	800a0cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	025a      	lsls	r2, r3, #9
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	629a      	str	r2, [r3, #40]	; 0x28

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	2b01      	cmp	r3, #1
 800a006:	d002      	beq.n	800a00e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00a:	025b      	lsls	r3, r3, #9
 800a00c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295
 800a012:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	025b      	lsls	r3, r3, #9
 800a018:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a01a:	2390      	movs	r3, #144	; 0x90
 800a01c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a01e:	2302      	movs	r3, #2
 800a020:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a022:	2300      	movs	r3, #0
 800a024:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a026:	2300      	movs	r3, #0
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f107 0210 	add.w	r2, r7, #16
 800a032:	4611      	mov	r1, r2
 800a034:	4618      	mov	r0, r3
 800a036:	f003 fb87 	bl	800d748 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a048:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2201      	movs	r2, #1
 800a058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d90a      	bls.n	800a076 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2282      	movs	r2, #130	; 0x82
 800a064:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a06c:	4618      	mov	r0, r3
 800a06e:	f003 fbdd 	bl	800d82c <SDMMC_CmdReadMultiBlock>
 800a072:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a074:	e009      	b.n	800a08a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2281      	movs	r2, #129	; 0x81
 800a07a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a082:	4618      	mov	r0, r3
 800a084:	f003 fbaf 	bl	800d7e6 <SDMMC_CmdReadSingleBlock>
 800a088:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d012      	beq.n	800a0b6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a0f      	ldr	r2, [pc, #60]	; (800a0d4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e00a      	b.n	800a0cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a0c4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e000      	b.n	800a0cc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a0ca:	2302      	movs	r3, #2
  }
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3730      	adds	r7, #48	; 0x30
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	1fe00fff 	.word	0x1fe00fff

0800a0d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08c      	sub	sp, #48	; 0x30
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d107      	bne.n	800a100 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e08d      	b.n	800a21c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b01      	cmp	r3, #1
 800a10a:	f040 8086 	bne.w	800a21a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	635a      	str	r2, [r3, #52]	; 0x34

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	441a      	add	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a11e:	429a      	cmp	r2, r3
 800a120:	d907      	bls.n	800a132 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a126:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e074      	b.n	800a21c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2203      	movs	r2, #3
 800a136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2200      	movs	r2, #0
 800a140:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	025a      	lsls	r2, r3, #9
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	621a      	str	r2, [r3, #32]

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	2b01      	cmp	r3, #1
 800a156:	d002      	beq.n	800a15e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	025b      	lsls	r3, r3, #9
 800a15c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
 800a162:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	025b      	lsls	r3, r3, #9
 800a168:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a16a:	2390      	movs	r3, #144	; 0x90
 800a16c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a16e:	2300      	movs	r3, #0
 800a170:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a172:	2300      	movs	r3, #0
 800a174:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a176:	2300      	movs	r3, #0
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f107 0210 	add.w	r2, r7, #16
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f003 fadf 	bl	800d748 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a198:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d90a      	bls.n	800a1c6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	22a0      	movs	r2, #160	; 0xa0
 800a1b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f003 fb7b 	bl	800d8b8 <SDMMC_CmdWriteMultiBlock>
 800a1c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1c4:	e009      	b.n	800a1da <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2290      	movs	r2, #144	; 0x90
 800a1ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f003 fb4d 	bl	800d872 <SDMMC_CmdWriteSingleBlock>
 800a1d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d012      	beq.n	800a206 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a0f      	ldr	r2, [pc, #60]	; (800a224 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e00a      	b.n	800a21c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a214:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	e000      	b.n	800a21c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a21a:	2302      	movs	r3, #2
  }
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3730      	adds	r7, #48	; 0x30
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	1fe00fff 	.word	0x1fe00fff

0800a228 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d008      	beq.n	800a256 <HAL_SD_IRQHandler+0x2e>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 f8a0 	bl	800b394 <SD_Read_IT>
 800a254:	e19a      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 80ac 	beq.w	800a3be <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a26e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4b9d      	ldr	r3, [pc, #628]	; (800a4f0 <HAL_SD_IRQHandler+0x2c8>)
 800a27c:	400b      	ands	r3, r1
 800a27e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a28e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a29e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0308 	and.w	r3, r3, #8
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d038      	beq.n	800a31c <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d104      	bne.n	800a2be <HAL_SD_IRQHandler+0x96>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d011      	beq.n	800a2e2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f003 fb1c 	bl	800d900 <SDMMC_CmdStopTransfer>
 800a2c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f959 	bl	800a594 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a83      	ldr	r2, [pc, #524]	; (800a4f4 <HAL_SD_IRQHandler+0x2cc>)
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	62da      	str	r2, [r3, #44]	; 0x2c
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d104      	bne.n	800a30c <HAL_SD_IRQHandler+0xe4>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f003 ffcf 	bl	800e2b0 <HAL_SD_RxCpltCallback>
 800a312:	e13b      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f003 ffc1 	bl	800e29c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a31a:	e137      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 8132 	beq.w	800a58c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2200      	movs	r2, #0
 800a32e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2200      	movs	r2, #0
 800a336:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2200      	movs	r2, #0
 800a33e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_SD_IRQHandler+0x12c>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d011      	beq.n	800a378 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4618      	mov	r0, r3
 800a35a:	f003 fad1 	bl	800d900 <SDMMC_CmdStopTransfer>
 800a35e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d008      	beq.n	800a378 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	431a      	orrs	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f90e 	bl	800a594 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	62da      	str	r2, [r3, #44]	; 0x2c
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d104      	bne.n	800a39a <HAL_SD_IRQHandler+0x172>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 0320 	and.w	r3, r3, #32
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f003 ff7e 	bl	800e29c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <HAL_SD_IRQHandler+0x18e>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 80eb 	beq.w	800a58c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f003 ff7a 	bl	800e2b0 <HAL_SD_RxCpltCallback>
}
 800a3bc:	e0e6      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d008      	beq.n	800a3de <HAL_SD_IRQHandler+0x1b6>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f003 0308 	and.w	r3, r3, #8
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 f822 	bl	800b420 <SD_Write_IT>
 800a3dc:	e0d6      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 80a2 	beq.w	800a532 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a400:	f043 0202 	orr.w	r2, r3, #2
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d005      	beq.n	800a422 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41a:	f043 0208 	orr.w	r2, r3, #8
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a434:	f043 0220 	orr.w	r2, r3, #32
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a442:	f003 0310 	and.w	r3, r3, #16
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44e:	f043 0210 	orr.w	r2, r3, #16
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a26      	ldr	r2, [pc, #152]	; (800a4f4 <HAL_SD_IRQHandler+0x2cc>)
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a46c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68da      	ldr	r2, [r3, #12]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a47c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a48c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68da      	ldr	r2, [r3, #12]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a49c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f003 fa2c 	bl	800d900 <SDMMC_CmdStopTransfer>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4c2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4cc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00f      	beq.n	800a4f8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f854 	bl	800a594 <HAL_SD_ErrorCallback>
}
 800a4ec:	e04e      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
 800a4ee:	bf00      	nop
 800a4f0:	ffff3ec5 	.word	0xffff3ec5
 800a4f4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d044      	beq.n	800a58c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a506:	2b00      	cmp	r3, #0
 800a508:	d040      	beq.n	800a58c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a518:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2200      	movs	r2, #0
 800a520:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f832 	bl	800a594 <HAL_SD_ErrorCallback>
}
 800a530:	e02c      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d025      	beq.n	800a58c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a548:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10c      	bne.n	800a572 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 ffc4 	bl	800b4f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a568:	e010      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 ffac 	bl	800b4c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a570:	e00c      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 ffad 	bl	800b4dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a582:	e003      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 ff95 	bl	800b4b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a58a:	e7ff      	b.n	800a58c <HAL_SD_IRQHandler+0x364>
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b6:	0f9b      	lsrs	r3, r3, #30
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c2:	0e9b      	lsrs	r3, r3, #26
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d4:	0e1b      	lsrs	r3, r3, #24
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5e6:	0c1b      	lsrs	r3, r3, #16
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a608:	0d1b      	lsrs	r3, r3, #20
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a614:	0c1b      	lsrs	r3, r3, #16
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a626:	0bdb      	lsrs	r3, r3, #15
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a638:	0b9b      	lsrs	r3, r3, #14
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	b2da      	uxtb	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a64a:	0b5b      	lsrs	r3, r3, #13
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a65c:	0b1b      	lsrs	r3, r3, #12
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	b2da      	uxtb	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	2b00      	cmp	r3, #0
 800a676:	d163      	bne.n	800a740 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a67c:	009a      	lsls	r2, r3, #2
 800a67e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a682:	4013      	ands	r3, r2
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a688:	0f92      	lsrs	r2, r2, #30
 800a68a:	431a      	orrs	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a694:	0edb      	lsrs	r3, r3, #27
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a6:	0e1b      	lsrs	r3, r3, #24
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b8:	0d5b      	lsrs	r3, r3, #21
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ca:	0c9b      	lsrs	r3, r3, #18
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6dc:	0bdb      	lsrs	r3, r3, #15
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	7e1b      	ldrb	r3, [r3, #24]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	3302      	adds	r3, #2
 800a700:	2201      	movs	r2, #1
 800a702:	fa02 f303 	lsl.w	r3, r2, r3
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a70a:	fb02 f203 	mul.w	r2, r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	7a1b      	ldrb	r3, [r3, #8]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	2201      	movs	r2, #1
 800a71e:	409a      	lsls	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a72c:	0a52      	lsrs	r2, r2, #9
 800a72e:	fb02 f203 	mul.w	r2, r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a73c:	655a      	str	r2, [r3, #84]	; 0x54
 800a73e:	e031      	b.n	800a7a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a744:	2b01      	cmp	r3, #1
 800a746:	d11d      	bne.n	800a784 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a756:	0c1b      	lsrs	r3, r3, #16
 800a758:	431a      	orrs	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	3301      	adds	r3, #1
 800a764:	029a      	lsls	r2, r3, #10
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a778:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	655a      	str	r2, [r3, #84]	; 0x54
 800a782:	e00f      	b.n	800a7a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a58      	ldr	r2, [pc, #352]	; (800a8ec <HAL_SD_GetCardCSD+0x344>)
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e09d      	b.n	800a8e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a8:	0b9b      	lsrs	r3, r3, #14
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ba:	09db      	lsrs	r3, r3, #7
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7dc:	0fdb      	lsrs	r3, r3, #31
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7e8:	0f5b      	lsrs	r3, r3, #29
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7fa:	0e9b      	lsrs	r3, r3, #26
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80c:	0d9b      	lsrs	r3, r3, #22
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	b2da      	uxtb	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a81e:	0d5b      	lsrs	r3, r3, #21
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a83a:	0c1b      	lsrs	r3, r3, #16
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a84e:	0bdb      	lsrs	r3, r3, #15
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	b2da      	uxtb	r2, r3
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a862:	0b9b      	lsrs	r3, r3, #14
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a876:	0b5b      	lsrs	r3, r3, #13
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a88a:	0b1b      	lsrs	r3, r3, #12
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a89e:	0a9b      	lsrs	r3, r3, #10
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8c6:	085b      	lsrs	r3, r3, #1
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	1fe00fff 	.word	0x1fe00fff

0800a8f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b094      	sub	sp, #80	; 0x50
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a900:	f107 0308 	add.w	r3, r7, #8
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fae6 	bl	800aed8 <SD_SendSDStatus>
 800a90c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a910:	2b00      	cmp	r3, #0
 800a912:	d011      	beq.n	800a938 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a4f      	ldr	r2, [pc, #316]	; (800aa58 <HAL_SD_GetCardStatus+0x168>)
 800a91a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a922:	431a      	orrs	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a936:	e070      	b.n	800aa1a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	099b      	lsrs	r3, r3, #6
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	b2da      	uxtb	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	b2da      	uxtb	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a962:	b29a      	uxth	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	0e1b      	lsrs	r3, r3, #24
 800a968:	b29b      	uxth	r3, r3
 800a96a:	4313      	orrs	r3, r2
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	061a      	lsls	r2, r3, #24
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a97e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a988:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	0e1b      	lsrs	r3, r3, #24
 800a98e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	b2da      	uxtb	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	0a1b      	lsrs	r3, r3, #8
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	0d1b      	lsrs	r3, r3, #20
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 030f 	and.w	r3, r3, #15
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	0a9b      	lsrs	r3, r3, #10
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	0a1b      	lsrs	r3, r3, #8
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	091b      	lsrs	r3, r3, #4
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 030f 	and.w	r3, r3, #15
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	0e1b      	lsrs	r3, r3, #24
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa22:	4618      	mov	r0, r3
 800aa24:	f002 febc 	bl	800d7a0 <SDMMC_CmdBlockLength>
 800aa28:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a08      	ldr	r2, [pc, #32]	; (800aa58 <HAL_SD_GetCardStatus+0x168>)
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa3c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800aa4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3750      	adds	r7, #80	; 0x50
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	1fe00fff 	.word	0x1fe00fff

0800aa5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b08d      	sub	sp, #52	; 0x34
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2203      	movs	r2, #3
 800aac8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d02e      	beq.n	800ab32 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aada:	d106      	bne.n	800aaea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	635a      	str	r2, [r3, #52]	; 0x34
 800aae8:	e029      	b.n	800ab3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaf0:	d10a      	bne.n	800ab08 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fae8 	bl	800b0c8 <SD_WideBus_Enable>
 800aaf8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	635a      	str	r2, [r3, #52]	; 0x34
 800ab06:	e01a      	b.n	800ab3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fb25 	bl	800b15e <SD_WideBus_Disable>
 800ab14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	635a      	str	r2, [r3, #52]	; 0x34
 800ab22:	e00c      	b.n	800ab3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	635a      	str	r2, [r3, #52]	; 0x34
 800ab30:	e005      	b.n	800ab3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a2e      	ldr	r2, [pc, #184]	; (800ac04 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ab4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab54:	e034      	b.n	800abc0 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d903      	bls.n	800ab7c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	e012      	b.n	800aba2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab84:	d103      	bne.n	800ab8e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	e009      	b.n	800aba2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab96:	d102      	bne.n	800ab9e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800ab98:	2302      	movs	r3, #2
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	e001      	b.n	800aba2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800ab9e:	2304      	movs	r3, #4
 800aba0:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681c      	ldr	r4, [r3, #0]
 800aba6:	466a      	mov	r2, sp
 800aba8:	f107 0318 	add.w	r3, r7, #24
 800abac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800abb4:	f107 030c 	add.w	r3, r7, #12
 800abb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abba:	4620      	mov	r0, r4
 800abbc:	f002 fd12 	bl	800d5e4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abc8:	4618      	mov	r0, r3
 800abca:	f002 fde9 	bl	800d7a0 <SDMMC_CmdBlockLength>
 800abce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00c      	beq.n	800abf0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a0a      	ldr	r2, [pc, #40]	; (800ac04 <HAL_SD_ConfigWideBusOperation+0x150>)
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	431a      	orrs	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	372c      	adds	r7, #44	; 0x2c
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd90      	pop	{r4, r7, pc}
 800ac04:	1fe00fff 	.word	0x1fe00fff

0800ac08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ac14:	f107 030c 	add.w	r3, r7, #12
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fa2c 	bl	800b078 <SD_SendStatus>
 800ac20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	0a5b      	lsrs	r3, r3, #9
 800ac38:	f003 030f 	and.w	r3, r3, #15
 800ac3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac3e:	693b      	ldr	r3, [r7, #16]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac48:	b590      	push	{r4, r7, lr}
 800ac4a:	b091      	sub	sp, #68	; 0x44
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ac50:	2301      	movs	r3, #1
 800ac52:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f002 fd1c 	bl	800d696 <SDMMC_GetPowerState>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac68:	e0a8      	b.n	800adbc <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d02e      	beq.n	800acd0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f002 ff68 	bl	800db4c <SDMMC_CmdSendCID>
 800ac7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <SD_InitCard+0x40>
    {
      return errorstate;
 800ac84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac86:	e099      	b.n	800adbc <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f002 fd47 	bl	800d722 <SDMMC_GetResponse>
 800ac94:	4602      	mov	r2, r0
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2104      	movs	r1, #4
 800aca0:	4618      	mov	r0, r3
 800aca2:	f002 fd3e 	bl	800d722 <SDMMC_GetResponse>
 800aca6:	4602      	mov	r2, r0
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2108      	movs	r1, #8
 800acb2:	4618      	mov	r0, r3
 800acb4:	f002 fd35 	bl	800d722 <SDMMC_GetResponse>
 800acb8:	4602      	mov	r2, r0
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	210c      	movs	r1, #12
 800acc4:	4618      	mov	r0, r3
 800acc6:	f002 fd2c 	bl	800d722 <SDMMC_GetResponse>
 800acca:	4602      	mov	r2, r0
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d00d      	beq.n	800acf4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f107 020e 	add.w	r2, r7, #14
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f002 ff71 	bl	800dbca <SDMMC_CmdSetRelAdd>
 800ace8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <SD_InitCard+0xac>
    {
      return errorstate;
 800acf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf2:	e063      	b.n	800adbc <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d036      	beq.n	800ad6a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800acfc:	89fb      	ldrh	r3, [r7, #14]
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0c:	041b      	lsls	r3, r3, #16
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f002 ff3a 	bl	800db8a <SDMMC_CmdSendCSD>
 800ad16:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <SD_InitCard+0xda>
    {
      return errorstate;
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad20:	e04c      	b.n	800adbc <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2100      	movs	r1, #0
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f002 fcfa 	bl	800d722 <SDMMC_GetResponse>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2104      	movs	r1, #4
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f002 fcf1 	bl	800d722 <SDMMC_GetResponse>
 800ad40:	4602      	mov	r2, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2108      	movs	r1, #8
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f002 fce8 	bl	800d722 <SDMMC_GetResponse>
 800ad52:	4602      	mov	r2, r0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	210c      	movs	r1, #12
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f002 fcdf 	bl	800d722 <SDMMC_GetResponse>
 800ad64:	4602      	mov	r2, r0
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2104      	movs	r1, #4
 800ad70:	4618      	mov	r0, r3
 800ad72:	f002 fcd6 	bl	800d722 <SDMMC_GetResponse>
 800ad76:	4603      	mov	r3, r0
 800ad78:	0d1a      	lsrs	r2, r3, #20
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad7e:	f107 0310 	add.w	r3, r7, #16
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff fc0f 	bl	800a5a8 <HAL_SD_GetCardCSD>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad94:	e012      	b.n	800adbc <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6819      	ldr	r1, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9e:	041b      	lsls	r3, r3, #16
 800ada0:	f04f 0400 	mov.w	r4, #0
 800ada4:	461a      	mov	r2, r3
 800ada6:	4623      	mov	r3, r4
 800ada8:	4608      	mov	r0, r1
 800adaa:	f002 fde5 	bl	800d978 <SDMMC_CmdSelDesel>
 800adae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800adb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <SD_InitCard+0x172>
  {
    return errorstate;
 800adb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb8:	e000      	b.n	800adbc <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3744      	adds	r7, #68	; 0x44
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adcc:	2300      	movs	r3, #0
 800adce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	2300      	movs	r3, #0
 800add6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4618      	mov	r0, r3
 800adde:	f002 fdef 	bl	800d9c0 <SDMMC_CmdGoIdleState>
 800ade2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <SD_PowerON+0x2a>
  {
    return errorstate;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	e06e      	b.n	800aecc <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f002 fe02 	bl	800d9fc <SDMMC_CmdOperCond>
 800adf8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00d      	beq.n	800ae1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f002 fdd8 	bl	800d9c0 <SDMMC_CmdGoIdleState>
 800ae10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	e057      	b.n	800aecc <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d137      	bne.n	800ae9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f002 fe03 	bl	800da3c <SDMMC_CmdAppCommand>
 800ae36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d02d      	beq.n	800ae9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae42:	e043      	b.n	800aecc <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2100      	movs	r1, #0
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f002 fdf6 	bl	800da3c <SDMMC_CmdAppCommand>
 800ae50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <SD_PowerON+0x98>
    {
      return errorstate;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	e037      	b.n	800aecc <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	491c      	ldr	r1, [pc, #112]	; (800aed4 <SD_PowerON+0x110>)
 800ae62:	4618      	mov	r0, r3
 800ae64:	f002 fe0d 	bl	800da82 <SDMMC_CmdAppOperCommand>
 800ae68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae74:	e02a      	b.n	800aecc <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f002 fc50 	bl	800d722 <SDMMC_GetResponse>
 800ae82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	0fdb      	lsrs	r3, r3, #31
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d101      	bne.n	800ae90 <SD_PowerON+0xcc>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e000      	b.n	800ae92 <SD_PowerON+0xce>
 800ae90:	2300      	movs	r3, #0
 800ae92:	613b      	str	r3, [r7, #16]

    count++;
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	3301      	adds	r3, #1
 800ae98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d802      	bhi.n	800aeaa <SD_PowerON+0xe6>
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0cc      	beq.n	800ae44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d902      	bls.n	800aeba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aeb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aeb8:	e008      	b.n	800aecc <SD_PowerON+0x108>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	c1100000 	.word	0xc1100000

0800aed8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08c      	sub	sp, #48	; 0x30
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aee2:	f7f6 ffe1 	bl	8001ea8 <HAL_GetTick>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2100      	movs	r1, #0
 800aef2:	4618      	mov	r0, r3
 800aef4:	f002 fc15 	bl	800d722 <SDMMC_GetResponse>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aefe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af02:	d102      	bne.n	800af0a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af08:	e0b0      	b.n	800b06c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2140      	movs	r1, #64	; 0x40
 800af10:	4618      	mov	r0, r3
 800af12:	f002 fc45 	bl	800d7a0 <SDMMC_CmdBlockLength>
 800af16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	e0a0      	b.n	800b06c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af32:	041b      	lsls	r3, r3, #16
 800af34:	4619      	mov	r1, r3
 800af36:	4610      	mov	r0, r2
 800af38:	f002 fd80 	bl	800da3c <SDMMC_CmdAppCommand>
 800af3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d005      	beq.n	800af50 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	e08d      	b.n	800b06c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800af56:	2340      	movs	r3, #64	; 0x40
 800af58:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800af5a:	2360      	movs	r3, #96	; 0x60
 800af5c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af5e:	2302      	movs	r3, #2
 800af60:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af62:	2300      	movs	r3, #0
 800af64:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800af66:	2301      	movs	r3, #1
 800af68:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f107 0208 	add.w	r2, r7, #8
 800af72:	4611      	mov	r1, r2
 800af74:	4618      	mov	r0, r3
 800af76:	f002 fbe7 	bl	800d748 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4618      	mov	r0, r3
 800af80:	f002 fe68 	bl	800dc54 <SDMMC_CmdStatusRegister>
 800af84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d02b      	beq.n	800afe4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	e069      	b.n	800b06c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d013      	beq.n	800afce <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800afa6:	2300      	movs	r3, #0
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afaa:	e00d      	b.n	800afc8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f002 fb41 	bl	800d638 <SDMMC_ReadFIFO>
 800afb6:	4602      	mov	r2, r0
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	601a      	str	r2, [r3, #0]
        pData++;
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	3304      	adds	r3, #4
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800afc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc4:	3301      	adds	r3, #1
 800afc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	2b07      	cmp	r3, #7
 800afcc:	d9ee      	bls.n	800afac <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800afce:	f7f6 ff6b 	bl	8001ea8 <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afdc:	d102      	bne.n	800afe4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800afde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afe2:	e043      	b.n	800b06c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afea:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d0d2      	beq.n	800af98 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff8:	f003 0308 	and.w	r3, r3, #8
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b000:	2308      	movs	r3, #8
 800b002:	e033      	b.n	800b06c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b012:	2302      	movs	r3, #2
 800b014:	e02a      	b.n	800b06c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01c:	f003 0320 	and.w	r3, r3, #32
 800b020:	2b00      	cmp	r3, #0
 800b022:	d017      	beq.n	800b054 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b024:	2320      	movs	r3, #32
 800b026:	e021      	b.n	800b06c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f002 fb03 	bl	800d638 <SDMMC_ReadFIFO>
 800b032:	4602      	mov	r2, r0
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	601a      	str	r2, [r3, #0]
    pData++;
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	3304      	adds	r3, #4
 800b03c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b03e:	f7f6 ff33 	bl	8001ea8 <HAL_GetTick>
 800b042:	4602      	mov	r2, r0
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d102      	bne.n	800b054 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b04e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b052:	e00b      	b.n	800b06c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1e2      	bne.n	800b028 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a03      	ldr	r2, [pc, #12]	; (800b074 <SD_SendSDStatus+0x19c>)
 800b068:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3730      	adds	r7, #48	; 0x30
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	18000f3a 	.word	0x18000f3a

0800b078 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d102      	bne.n	800b08e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b08c:	e018      	b.n	800b0c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b096:	041b      	lsls	r3, r3, #16
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f002 fdb7 	bl	800dc0e <SDMMC_CmdSendStatus>
 800b0a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	e009      	b.n	800b0c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 fb35 	bl	800d722 <SDMMC_GetResponse>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f002 fb1f 	bl	800d722 <SDMMC_GetResponse>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0ee:	d102      	bne.n	800b0f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b0f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0f4:	e02f      	b.n	800b156 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f879 	bl	800b1f4 <SD_FindSCR>
 800b102:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	e023      	b.n	800b156 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d01c      	beq.n	800b152 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b120:	041b      	lsls	r3, r3, #16
 800b122:	4619      	mov	r1, r3
 800b124:	4610      	mov	r0, r2
 800b126:	f002 fc89 	bl	800da3c <SDMMC_CmdAppCommand>
 800b12a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	e00f      	b.n	800b156 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2102      	movs	r1, #2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f002 fcc0 	bl	800dac2 <SDMMC_CmdBusWidth>
 800b142:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	e003      	b.n	800b156 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b14e:	2300      	movs	r3, #0
 800b150:	e001      	b.n	800b156 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b152:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b086      	sub	sp, #24
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	2300      	movs	r3, #0
 800b16c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2100      	movs	r1, #0
 800b174:	4618      	mov	r0, r3
 800b176:	f002 fad4 	bl	800d722 <SDMMC_GetResponse>
 800b17a:	4603      	mov	r3, r0
 800b17c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b184:	d102      	bne.n	800b18c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b18a:	e02f      	b.n	800b1ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b18c:	f107 030c 	add.w	r3, r7, #12
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f82e 	bl	800b1f4 <SD_FindSCR>
 800b198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	e023      	b.n	800b1ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01c      	beq.n	800b1e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	041b      	lsls	r3, r3, #16
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	f002 fc3e 	bl	800da3c <SDMMC_CmdAppCommand>
 800b1c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	e00f      	b.n	800b1ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f002 fc75 	bl	800dac2 <SDMMC_CmdBusWidth>
 800b1d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	e003      	b.n	800b1ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e001      	b.n	800b1ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08e      	sub	sp, #56	; 0x38
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b1fe:	f7f6 fe53 	bl	8001ea8 <HAL_GetTick>
 800b202:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b204:	2300      	movs	r3, #0
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b208:	2300      	movs	r3, #0
 800b20a:	60bb      	str	r3, [r7, #8]
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2108      	movs	r1, #8
 800b21a:	4618      	mov	r0, r3
 800b21c:	f002 fac0 	bl	800d7a0 <SDMMC_CmdBlockLength>
 800b220:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	e0ad      	b.n	800b388 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b234:	041b      	lsls	r3, r3, #16
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f002 fbff 	bl	800da3c <SDMMC_CmdAppCommand>
 800b23e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	e09e      	b.n	800b388 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b24a:	f04f 33ff 	mov.w	r3, #4294967295
 800b24e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b250:	2308      	movs	r3, #8
 800b252:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b254:	2330      	movs	r3, #48	; 0x30
 800b256:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b258:	2302      	movs	r3, #2
 800b25a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b260:	2301      	movs	r3, #1
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f107 0210 	add.w	r2, r7, #16
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f002 fa6a 	bl	800d748 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4618      	mov	r0, r3
 800b27a:	f002 fc45 	bl	800db08 <SDMMC_CmdSendSCR>
 800b27e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	2b00      	cmp	r3, #0
 800b284:	d027      	beq.n	800b2d6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	e07e      	b.n	800b388 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d113      	bne.n	800b2c0 <SD_FindSCR+0xcc>
 800b298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d110      	bne.n	800b2c0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f002 f9c8 	bl	800d638 <SDMMC_ReadFIFO>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f002 f9c1 	bl	800d638 <SDMMC_ReadFIFO>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	60fb      	str	r3, [r7, #12]
      index++;
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	3301      	adds	r3, #1
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b2c0:	f7f6 fdf2 	bl	8001ea8 <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ce:	d102      	bne.n	800b2d6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b2d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2d4:	e058      	b.n	800b388 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2dc:	f240 532a 	movw	r3, #1322	; 0x52a
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d0d1      	beq.n	800b28a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ec:	f003 0308 	and.w	r3, r3, #8
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d005      	beq.n	800b300 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2208      	movs	r2, #8
 800b2fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	e043      	b.n	800b388 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d005      	beq.n	800b31a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2202      	movs	r2, #2
 800b314:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b316:	2302      	movs	r3, #2
 800b318:	e036      	b.n	800b388 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2220      	movs	r2, #32
 800b32e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b330:	2320      	movs	r3, #32
 800b332:	e029      	b.n	800b388 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a15      	ldr	r2, [pc, #84]	; (800b390 <SD_FindSCR+0x19c>)
 800b33a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	061a      	lsls	r2, r3, #24
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	021b      	lsls	r3, r3, #8
 800b344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b348:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	0a1b      	lsrs	r3, r3, #8
 800b34e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b352:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	0e1b      	lsrs	r3, r3, #24
 800b358:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35c:	601a      	str	r2, [r3, #0]
    scr++;
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	3304      	adds	r3, #4
 800b362:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	061a      	lsls	r2, r3, #24
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b370:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	0a1b      	lsrs	r3, r3, #8
 800b376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b37a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	0e1b      	lsrs	r3, r3, #24
 800b380:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3738      	adds	r7, #56	; 0x38
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	18000f3a 	.word	0x18000f3a

0800b394 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a6:	2b1f      	cmp	r3, #31
 800b3a8:	d936      	bls.n	800b418 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e027      	b.n	800b400 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f002 f93f 	bl	800d638 <SDMMC_ReadFIFO>
 800b3ba:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	0a1b      	lsrs	r3, r3, #8
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	0c1b      	lsrs	r3, r3, #16
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	0e1b      	lsrs	r3, r3, #24
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2b07      	cmp	r3, #7
 800b404:	d9d4      	bls.n	800b3b0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b410:	f1a3 0220 	sub.w	r2, r3, #32
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b418:	bf00      	nop
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	69db      	ldr	r3, [r3, #28]
 800b42c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	2b1f      	cmp	r3, #31
 800b434:	d93a      	bls.n	800b4ac <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	e02b      	b.n	800b494 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	3301      	adds	r3, #1
 800b446:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	021a      	lsls	r2, r3, #8
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3301      	adds	r3, #1
 800b458:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	041a      	lsls	r2, r3, #16
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4313      	orrs	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	3301      	adds	r3, #1
 800b46a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	061a      	lsls	r2, r3, #24
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4313      	orrs	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	3301      	adds	r3, #1
 800b47c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f107 020c 	add.w	r2, r7, #12
 800b486:	4611      	mov	r1, r2
 800b488:	4618      	mov	r0, r3
 800b48a:	f002 f8e2 	bl	800d652 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	3301      	adds	r3, #1
 800b492:	617b      	str	r3, [r7, #20]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b07      	cmp	r3, #7
 800b498:	d9d0      	bls.n	800b43c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	f1a3 0220 	sub.w	r2, r3, #32
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	621a      	str	r2, [r3, #32]
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e049      	b.n	800b5aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7f6 f9b6 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2202      	movs	r2, #2
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	3304      	adds	r3, #4
 800b540:	4619      	mov	r1, r3
 800b542:	4610      	mov	r0, r2
 800b544:	f000 fab2 	bl	800baac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d001      	beq.n	800b5cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e019      	b.n	800b600 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <HAL_TIM_Base_Start+0x58>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b06      	cmp	r3, #6
 800b5e4:	d00b      	beq.n	800b5fe <HAL_TIM_Base_Start+0x4a>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ec:	d007      	beq.n	800b5fe <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f042 0201 	orr.w	r2, r2, #1
 800b5fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	00010007 	.word	0x00010007

0800b610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b01      	cmp	r3, #1
 800b622:	d001      	beq.n	800b628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e021      	b.n	800b66c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2202      	movs	r2, #2
 800b62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f042 0201 	orr.w	r2, r2, #1
 800b63e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689a      	ldr	r2, [r3, #8]
 800b646:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <HAL_TIM_Base_Start_IT+0x68>)
 800b648:	4013      	ands	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b06      	cmp	r3, #6
 800b650:	d00b      	beq.n	800b66a <HAL_TIM_Base_Start_IT+0x5a>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b658:	d007      	beq.n	800b66a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f042 0201 	orr.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	00010007 	.word	0x00010007

0800b67c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d122      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d11b      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f06f 0202 	mvn.w	r2, #2
 800b6a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f9d6 	bl	800ba70 <HAL_TIM_IC_CaptureCallback>
 800b6c4:	e005      	b.n	800b6d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f9c8 	bl	800ba5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f9d9 	bl	800ba84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d122      	bne.n	800b72c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f003 0304 	and.w	r3, r3, #4
 800b6f0:	2b04      	cmp	r3, #4
 800b6f2:	d11b      	bne.n	800b72c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f06f 0204 	mvn.w	r2, #4
 800b6fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2202      	movs	r2, #2
 800b702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f9ac 	bl	800ba70 <HAL_TIM_IC_CaptureCallback>
 800b718:	e005      	b.n	800b726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f99e 	bl	800ba5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f9af 	bl	800ba84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f003 0308 	and.w	r3, r3, #8
 800b736:	2b08      	cmp	r3, #8
 800b738:	d122      	bne.n	800b780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f003 0308 	and.w	r3, r3, #8
 800b744:	2b08      	cmp	r3, #8
 800b746:	d11b      	bne.n	800b780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f06f 0208 	mvn.w	r2, #8
 800b750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2204      	movs	r2, #4
 800b756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f982 	bl	800ba70 <HAL_TIM_IC_CaptureCallback>
 800b76c:	e005      	b.n	800b77a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f974 	bl	800ba5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f985 	bl	800ba84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	f003 0310 	and.w	r3, r3, #16
 800b78a:	2b10      	cmp	r3, #16
 800b78c:	d122      	bne.n	800b7d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f003 0310 	and.w	r3, r3, #16
 800b798:	2b10      	cmp	r3, #16
 800b79a:	d11b      	bne.n	800b7d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f06f 0210 	mvn.w	r2, #16
 800b7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2208      	movs	r2, #8
 800b7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f958 	bl	800ba70 <HAL_TIM_IC_CaptureCallback>
 800b7c0:	e005      	b.n	800b7ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f94a 	bl	800ba5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f95b 	bl	800ba84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d10e      	bne.n	800b800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d107      	bne.n	800b800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f06f 0201 	mvn.w	r2, #1
 800b7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7f5 fdf0 	bl	80013e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80a:	2b80      	cmp	r3, #128	; 0x80
 800b80c:	d10e      	bne.n	800b82c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b818:	2b80      	cmp	r3, #128	; 0x80
 800b81a:	d107      	bne.n	800b82c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fb0a 	bl	800be40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b83a:	d10e      	bne.n	800b85a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b846:	2b80      	cmp	r3, #128	; 0x80
 800b848:	d107      	bne.n	800b85a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fafd 	bl	800be54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	d10e      	bne.n	800b886 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b872:	2b40      	cmp	r3, #64	; 0x40
 800b874:	d107      	bne.n	800b886 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f909 	bl	800ba98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b20      	cmp	r3, #32
 800b892:	d10e      	bne.n	800b8b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f003 0320 	and.w	r3, r3, #32
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d107      	bne.n	800b8b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f06f 0220 	mvn.w	r2, #32
 800b8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fabd 	bl	800be2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d101      	bne.n	800b8d4 <HAL_TIM_ConfigClockSource+0x18>
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	e0b7      	b.n	800ba44 <HAL_TIM_ConfigClockSource+0x188>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2202      	movs	r2, #2
 800b8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4b57      	ldr	r3, [pc, #348]	; (800ba4c <HAL_TIM_ConfigClockSource+0x190>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b70      	cmp	r3, #112	; 0x70
 800b90a:	d02e      	beq.n	800b96a <HAL_TIM_ConfigClockSource+0xae>
 800b90c:	2b70      	cmp	r3, #112	; 0x70
 800b90e:	d812      	bhi.n	800b936 <HAL_TIM_ConfigClockSource+0x7a>
 800b910:	2b30      	cmp	r3, #48	; 0x30
 800b912:	f000 8084 	beq.w	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b916:	2b30      	cmp	r3, #48	; 0x30
 800b918:	d806      	bhi.n	800b928 <HAL_TIM_ConfigClockSource+0x6c>
 800b91a:	2b10      	cmp	r3, #16
 800b91c:	d07f      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b91e:	2b20      	cmp	r3, #32
 800b920:	d07d      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d07b      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b926:	e084      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b928:	2b50      	cmp	r3, #80	; 0x50
 800b92a:	d048      	beq.n	800b9be <HAL_TIM_ConfigClockSource+0x102>
 800b92c:	2b60      	cmp	r3, #96	; 0x60
 800b92e:	d056      	beq.n	800b9de <HAL_TIM_ConfigClockSource+0x122>
 800b930:	2b40      	cmp	r3, #64	; 0x40
 800b932:	d064      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x142>
      break;
 800b934:	e07d      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b936:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b93a:	d070      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b93c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b940:	d809      	bhi.n	800b956 <HAL_TIM_ConfigClockSource+0x9a>
 800b942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b946:	d027      	beq.n	800b998 <HAL_TIM_ConfigClockSource+0xdc>
 800b948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b94c:	d067      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b952:	d06d      	beq.n	800ba30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b954:	e06d      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b956:	4a3e      	ldr	r2, [pc, #248]	; (800ba50 <HAL_TIM_ConfigClockSource+0x194>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d060      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b95c:	4a3d      	ldr	r2, [pc, #244]	; (800ba54 <HAL_TIM_ConfigClockSource+0x198>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d05d      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
 800b962:	4a3d      	ldr	r2, [pc, #244]	; (800ba58 <HAL_TIM_ConfigClockSource+0x19c>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d05a      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0x162>
      break;
 800b968:	e063      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	6899      	ldr	r1, [r3, #8]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f000 f9af 	bl	800bcdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b98c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	609a      	str	r2, [r3, #8]
      break;
 800b996:	e04c      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6818      	ldr	r0, [r3, #0]
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	6899      	ldr	r1, [r3, #8]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	f000 f998 	bl	800bcdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9ba:	609a      	str	r2, [r3, #8]
      break;
 800b9bc:	e039      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6859      	ldr	r1, [r3, #4]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f000 f908 	bl	800bbe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2150      	movs	r1, #80	; 0x50
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 f962 	bl	800bca0 <TIM_ITRx_SetConfig>
      break;
 800b9dc:	e029      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	6859      	ldr	r1, [r3, #4]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f000 f927 	bl	800bc3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2160      	movs	r1, #96	; 0x60
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f952 	bl	800bca0 <TIM_ITRx_SetConfig>
      break;
 800b9fc:	e019      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	6859      	ldr	r1, [r3, #4]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	f000 f8e8 	bl	800bbe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2140      	movs	r1, #64	; 0x40
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 f942 	bl	800bca0 <TIM_ITRx_SetConfig>
      break;
 800ba1c:	e009      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4619      	mov	r1, r3
 800ba28:	4610      	mov	r0, r2
 800ba2a:	f000 f939 	bl	800bca0 <TIM_ITRx_SetConfig>
      break;
 800ba2e:	e000      	b.n	800ba32 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ba30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	ffceff88 	.word	0xffceff88
 800ba50:	00100030 	.word	0x00100030
 800ba54:	00100040 	.word	0x00100040
 800ba58:	00100020 	.word	0x00100020

0800ba5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a40      	ldr	r2, [pc, #256]	; (800bbc0 <TIM_Base_SetConfig+0x114>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d013      	beq.n	800baec <TIM_Base_SetConfig+0x40>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baca:	d00f      	beq.n	800baec <TIM_Base_SetConfig+0x40>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a3d      	ldr	r2, [pc, #244]	; (800bbc4 <TIM_Base_SetConfig+0x118>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d00b      	beq.n	800baec <TIM_Base_SetConfig+0x40>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a3c      	ldr	r2, [pc, #240]	; (800bbc8 <TIM_Base_SetConfig+0x11c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d007      	beq.n	800baec <TIM_Base_SetConfig+0x40>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a3b      	ldr	r2, [pc, #236]	; (800bbcc <TIM_Base_SetConfig+0x120>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d003      	beq.n	800baec <TIM_Base_SetConfig+0x40>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a3a      	ldr	r2, [pc, #232]	; (800bbd0 <TIM_Base_SetConfig+0x124>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d108      	bne.n	800bafe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a2f      	ldr	r2, [pc, #188]	; (800bbc0 <TIM_Base_SetConfig+0x114>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d01f      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0c:	d01b      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a2c      	ldr	r2, [pc, #176]	; (800bbc4 <TIM_Base_SetConfig+0x118>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d017      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a2b      	ldr	r2, [pc, #172]	; (800bbc8 <TIM_Base_SetConfig+0x11c>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d013      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a2a      	ldr	r2, [pc, #168]	; (800bbcc <TIM_Base_SetConfig+0x120>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d00f      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a29      	ldr	r2, [pc, #164]	; (800bbd0 <TIM_Base_SetConfig+0x124>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d00b      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a28      	ldr	r2, [pc, #160]	; (800bbd4 <TIM_Base_SetConfig+0x128>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d007      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a27      	ldr	r2, [pc, #156]	; (800bbd8 <TIM_Base_SetConfig+0x12c>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d003      	beq.n	800bb46 <TIM_Base_SetConfig+0x9a>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a26      	ldr	r2, [pc, #152]	; (800bbdc <TIM_Base_SetConfig+0x130>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d108      	bne.n	800bb58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	689a      	ldr	r2, [r3, #8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a10      	ldr	r2, [pc, #64]	; (800bbc0 <TIM_Base_SetConfig+0x114>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00f      	beq.n	800bba4 <TIM_Base_SetConfig+0xf8>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a12      	ldr	r2, [pc, #72]	; (800bbd0 <TIM_Base_SetConfig+0x124>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d00b      	beq.n	800bba4 <TIM_Base_SetConfig+0xf8>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a11      	ldr	r2, [pc, #68]	; (800bbd4 <TIM_Base_SetConfig+0x128>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d007      	beq.n	800bba4 <TIM_Base_SetConfig+0xf8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a10      	ldr	r2, [pc, #64]	; (800bbd8 <TIM_Base_SetConfig+0x12c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d003      	beq.n	800bba4 <TIM_Base_SetConfig+0xf8>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a0f      	ldr	r2, [pc, #60]	; (800bbdc <TIM_Base_SetConfig+0x130>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d103      	bne.n	800bbac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	615a      	str	r2, [r3, #20]
}
 800bbb2:	bf00      	nop
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	40010000 	.word	0x40010000
 800bbc4:	40000400 	.word	0x40000400
 800bbc8:	40000800 	.word	0x40000800
 800bbcc:	40000c00 	.word	0x40000c00
 800bbd0:	40010400 	.word	0x40010400
 800bbd4:	40014000 	.word	0x40014000
 800bbd8:	40014400 	.word	0x40014400
 800bbdc:	40014800 	.word	0x40014800

0800bbe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	f023 0201 	bic.w	r2, r3, #1
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	011b      	lsls	r3, r3, #4
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f023 030a 	bic.w	r3, r3, #10
 800bc1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	621a      	str	r2, [r3, #32]
}
 800bc32:	bf00      	nop
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b087      	sub	sp, #28
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	f023 0210 	bic.w	r2, r3, #16
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	031b      	lsls	r3, r3, #12
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	621a      	str	r2, [r3, #32]
}
 800bc92:	bf00      	nop
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
	...

0800bca0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <TIM_ITRx_SetConfig+0x38>)
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f043 0307 	orr.w	r3, r3, #7
 800bcc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	609a      	str	r2, [r3, #8]
}
 800bcca:	bf00      	nop
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	ffcfff8f 	.word	0xffcfff8f

0800bcdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	021a      	lsls	r2, r3, #8
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	609a      	str	r2, [r3, #8]
}
 800bd10:	bf00      	nop
 800bd12:	371c      	adds	r7, #28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e068      	b.n	800be06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a2e      	ldr	r2, [pc, #184]	; (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a2d      	ldr	r2, [pc, #180]	; (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d108      	bne.n	800bd7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1e      	ldr	r2, [pc, #120]	; (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d01d      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda6:	d018      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a1b      	ldr	r2, [pc, #108]	; (800be1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d013      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a1a      	ldr	r2, [pc, #104]	; (800be20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a18      	ldr	r2, [pc, #96]	; (800be24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d009      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a13      	ldr	r2, [pc, #76]	; (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d004      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a14      	ldr	r2, [pc, #80]	; (800be28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d10c      	bne.n	800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bde0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	40010000 	.word	0x40010000
 800be18:	40010400 	.word	0x40010400
 800be1c:	40000400 	.word	0x40000400
 800be20:	40000800 	.word	0x40000800
 800be24:	40000c00 	.word	0x40000c00
 800be28:	40001800 	.word	0x40001800

0800be2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e042      	b.n	800bf00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be80:	2b00      	cmp	r3, #0
 800be82:	d106      	bne.n	800be92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7f5 fd79 	bl	8001984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2224      	movs	r2, #36	; 0x24
 800be96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0201 	bic.w	r2, r2, #1
 800bea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fa52 	bl	800c354 <UART_SetConfig>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e022      	b.n	800bf00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fff6 	bl	800ceb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0201 	orr.w	r2, r2, #1
 800bef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f001 f87d 	bl	800cff8 <UART_CheckIdleState>
 800befe:	4603      	mov	r3, r0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf1c:	2b20      	cmp	r3, #32
 800bf1e:	d170      	bne.n	800c002 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d002      	beq.n	800bf2c <HAL_UART_Receive_DMA+0x24>
 800bf26:	88fb      	ldrh	r3, [r7, #6]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e069      	b.n	800c004 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d101      	bne.n	800bf3e <HAL_UART_Receive_DMA+0x36>
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	e062      	b.n	800c004 <HAL_UART_Receive_DMA+0xfc>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	88fa      	ldrh	r2, [r7, #6]
 800bf50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2222      	movs	r2, #34	; 0x22
 800bf60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d02c      	beq.n	800bfc6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf70:	4a26      	ldr	r2, [pc, #152]	; (800c00c <HAL_UART_Receive_DMA+0x104>)
 800bf72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf78:	4a25      	ldr	r2, [pc, #148]	; (800c010 <HAL_UART_Receive_DMA+0x108>)
 800bf7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf80:	4a24      	ldr	r2, [pc, #144]	; (800c014 <HAL_UART_Receive_DMA+0x10c>)
 800bf82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf88:	2200      	movs	r2, #0
 800bf8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3324      	adds	r3, #36	; 0x24
 800bf96:	4619      	mov	r1, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	88fb      	ldrh	r3, [r7, #6]
 800bfa0:	f7f8 faea 	bl	8004578 <HAL_DMA_Start_IT>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00d      	beq.n	800bfc6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2210      	movs	r2, #16
 800bfae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2220      	movs	r2, #32
 800bfbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e01e      	b.n	800c004 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfdc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0201 	orr.w	r2, r2, #1
 800bfec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689a      	ldr	r2, [r3, #8]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bffc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	e000      	b.n	800c004 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c002:	2302      	movs	r3, #2
  }
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	0800d20d 	.word	0x0800d20d
 800c010:	0800d273 	.word	0x0800d273
 800c014:	0800d28f 	.word	0x0800d28f

0800c018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c03e:	4013      	ands	r3, r2
 800c040:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d118      	bne.n	800c07a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	f003 0320 	and.w	r3, r3, #32
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d013      	beq.n	800c07a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d104      	bne.n	800c066 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d009      	beq.n	800c07a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 8145 	beq.w	800c2fa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	4798      	blx	r3
      }
      return;
 800c078:	e13f      	b.n	800c2fa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80e8 	beq.w	800c252 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	4ba1      	ldr	r3, [pc, #644]	; (800c30c <HAL_UART_IRQHandler+0x2f4>)
 800c086:	4013      	ands	r3, r2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d105      	bne.n	800c098 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	4ba0      	ldr	r3, [pc, #640]	; (800c310 <HAL_UART_IRQHandler+0x2f8>)
 800c090:	4013      	ands	r3, r2
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 80dd 	beq.w	800c252 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d010      	beq.n	800c0c4 <HAL_UART_IRQHandler+0xac>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ba:	f043 0201 	orr.w	r2, r3, #1
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d010      	beq.n	800c0f0 <HAL_UART_IRQHandler+0xd8>
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e6:	f043 0204 	orr.w	r2, r3, #4
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	f003 0304 	and.w	r3, r3, #4
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d010      	beq.n	800c11c <HAL_UART_IRQHandler+0x104>
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2204      	movs	r2, #4
 800c10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c112:	f043 0202 	orr.w	r2, r3, #2
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	f003 0308 	and.w	r3, r3, #8
 800c122:	2b00      	cmp	r3, #0
 800c124:	d015      	beq.n	800c152 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	f003 0320 	and.w	r3, r3, #32
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	4b76      	ldr	r3, [pc, #472]	; (800c30c <HAL_UART_IRQHandler+0x2f4>)
 800c134:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00b      	beq.n	800c152 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2208      	movs	r2, #8
 800c140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c148:	f043 0208 	orr.w	r2, r3, #8
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d011      	beq.n	800c180 <HAL_UART_IRQHandler+0x168>
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00c      	beq.n	800c180 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c16e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c176:	f043 0220 	orr.w	r2, r3, #32
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 80b9 	beq.w	800c2fe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f003 0320 	and.w	r3, r3, #32
 800c192:	2b00      	cmp	r3, #0
 800c194:	d011      	beq.n	800c1ba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	f003 0320 	and.w	r3, r3, #32
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d104      	bne.n	800c1aa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d007      	beq.n	800c1ba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1cc:	2b40      	cmp	r3, #64	; 0x40
 800c1ce:	d004      	beq.n	800c1da <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d031      	beq.n	800c23e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fff2 	bl	800d1c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ea:	2b40      	cmp	r3, #64	; 0x40
 800c1ec:	d123      	bne.n	800c236 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	689a      	ldr	r2, [r3, #8]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c202:	2b00      	cmp	r3, #0
 800c204:	d013      	beq.n	800c22e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c20a:	4a42      	ldr	r2, [pc, #264]	; (800c314 <HAL_UART_IRQHandler+0x2fc>)
 800c20c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c212:	4618      	mov	r0, r3
 800c214:	f7f8 ff38 	bl	8005088 <HAL_DMA_Abort_IT>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d017      	beq.n	800c24e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800c228:	4610      	mov	r0, r2
 800c22a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22c:	e00f      	b.n	800c24e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f886 	bl	800c340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c234:	e00b      	b.n	800c24e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f882 	bl	800c340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c23c:	e007      	b.n	800c24e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f87e 	bl	800c340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800c24c:	e057      	b.n	800c2fe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24e:	bf00      	nop
    return;
 800c250:	e055      	b.n	800c2fe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00d      	beq.n	800c278 <HAL_UART_IRQHandler+0x260>
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d008      	beq.n	800c278 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c26e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f001 f87c 	bl	800d36e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c276:	e045      	b.n	800c304 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d012      	beq.n	800c2a8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d008      	beq.n	800c2a8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d031      	beq.n	800c302 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	4798      	blx	r3
    }
    return;
 800c2a6:	e02c      	b.n	800c302 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d008      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x2ac>
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 f83c 	bl	800d33a <UART_EndTransmit_IT>
    return;
 800c2c2:	e01f      	b.n	800c304 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d008      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x2c8>
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 f85c 	bl	800d396 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2de:	e011      	b.n	800c304 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00c      	beq.n	800c304 <HAL_UART_IRQHandler+0x2ec>
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	da09      	bge.n	800c304 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 f846 	bl	800d382 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2f6:	bf00      	nop
 800c2f8:	e004      	b.n	800c304 <HAL_UART_IRQHandler+0x2ec>
      return;
 800c2fa:	bf00      	nop
 800c2fc:	e002      	b.n	800c304 <HAL_UART_IRQHandler+0x2ec>
    return;
 800c2fe:	bf00      	nop
 800c300:	e000      	b.n	800c304 <HAL_UART_IRQHandler+0x2ec>
    return;
 800c302:	bf00      	nop
  }
}
 800c304:	3720      	adds	r7, #32
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	10000001 	.word	0x10000001
 800c310:	04000120 	.word	0x04000120
 800c314:	0800d30f 	.word	0x0800d30f

0800c318 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c354:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c358:	b08e      	sub	sp, #56	; 0x38
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	689a      	ldr	r2, [r3, #8]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	431a      	orrs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	431a      	orrs	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	69db      	ldr	r3, [r3, #28]
 800c378:	4313      	orrs	r3, r2
 800c37a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c382:	4313      	orrs	r3, r2
 800c384:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	4bc1      	ldr	r3, [pc, #772]	; (800c694 <UART_SetConfig+0x340>)
 800c38e:	4013      	ands	r3, r2
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c396:	430b      	orrs	r3, r1
 800c398:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68da      	ldr	r2, [r3, #12]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	699b      	ldr	r3, [r3, #24]
 800c3b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4ab7      	ldr	r2, [pc, #732]	; (800c698 <UART_SetConfig+0x344>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d004      	beq.n	800c3ca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	4bb2      	ldr	r3, [pc, #712]	; (800c69c <UART_SetConfig+0x348>)
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	6812      	ldr	r2, [r2, #0]
 800c3d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c3da:	430b      	orrs	r3, r1
 800c3dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e4:	f023 010f 	bic.w	r1, r3, #15
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4aa9      	ldr	r2, [pc, #676]	; (800c6a0 <UART_SetConfig+0x34c>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d177      	bne.n	800c4ee <UART_SetConfig+0x19a>
 800c3fe:	4ba9      	ldr	r3, [pc, #676]	; (800c6a4 <UART_SetConfig+0x350>)
 800c400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c406:	2b28      	cmp	r3, #40	; 0x28
 800c408:	d86c      	bhi.n	800c4e4 <UART_SetConfig+0x190>
 800c40a:	a201      	add	r2, pc, #4	; (adr r2, 800c410 <UART_SetConfig+0xbc>)
 800c40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c410:	0800c4b5 	.word	0x0800c4b5
 800c414:	0800c4e5 	.word	0x0800c4e5
 800c418:	0800c4e5 	.word	0x0800c4e5
 800c41c:	0800c4e5 	.word	0x0800c4e5
 800c420:	0800c4e5 	.word	0x0800c4e5
 800c424:	0800c4e5 	.word	0x0800c4e5
 800c428:	0800c4e5 	.word	0x0800c4e5
 800c42c:	0800c4e5 	.word	0x0800c4e5
 800c430:	0800c4bd 	.word	0x0800c4bd
 800c434:	0800c4e5 	.word	0x0800c4e5
 800c438:	0800c4e5 	.word	0x0800c4e5
 800c43c:	0800c4e5 	.word	0x0800c4e5
 800c440:	0800c4e5 	.word	0x0800c4e5
 800c444:	0800c4e5 	.word	0x0800c4e5
 800c448:	0800c4e5 	.word	0x0800c4e5
 800c44c:	0800c4e5 	.word	0x0800c4e5
 800c450:	0800c4c5 	.word	0x0800c4c5
 800c454:	0800c4e5 	.word	0x0800c4e5
 800c458:	0800c4e5 	.word	0x0800c4e5
 800c45c:	0800c4e5 	.word	0x0800c4e5
 800c460:	0800c4e5 	.word	0x0800c4e5
 800c464:	0800c4e5 	.word	0x0800c4e5
 800c468:	0800c4e5 	.word	0x0800c4e5
 800c46c:	0800c4e5 	.word	0x0800c4e5
 800c470:	0800c4cd 	.word	0x0800c4cd
 800c474:	0800c4e5 	.word	0x0800c4e5
 800c478:	0800c4e5 	.word	0x0800c4e5
 800c47c:	0800c4e5 	.word	0x0800c4e5
 800c480:	0800c4e5 	.word	0x0800c4e5
 800c484:	0800c4e5 	.word	0x0800c4e5
 800c488:	0800c4e5 	.word	0x0800c4e5
 800c48c:	0800c4e5 	.word	0x0800c4e5
 800c490:	0800c4d5 	.word	0x0800c4d5
 800c494:	0800c4e5 	.word	0x0800c4e5
 800c498:	0800c4e5 	.word	0x0800c4e5
 800c49c:	0800c4e5 	.word	0x0800c4e5
 800c4a0:	0800c4e5 	.word	0x0800c4e5
 800c4a4:	0800c4e5 	.word	0x0800c4e5
 800c4a8:	0800c4e5 	.word	0x0800c4e5
 800c4ac:	0800c4e5 	.word	0x0800c4e5
 800c4b0:	0800c4dd 	.word	0x0800c4dd
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ba:	e233      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4bc:	2304      	movs	r3, #4
 800c4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c2:	e22f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4c4:	2308      	movs	r3, #8
 800c4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ca:	e22b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4cc:	2310      	movs	r3, #16
 800c4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d2:	e227      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4d4:	2320      	movs	r3, #32
 800c4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4da:	e223      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4dc:	2340      	movs	r3, #64	; 0x40
 800c4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e2:	e21f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ea:	bf00      	nop
 800c4ec:	e21a      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a6d      	ldr	r2, [pc, #436]	; (800c6a8 <UART_SetConfig+0x354>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d132      	bne.n	800c55e <UART_SetConfig+0x20a>
 800c4f8:	4b6a      	ldr	r3, [pc, #424]	; (800c6a4 <UART_SetConfig+0x350>)
 800c4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fc:	f003 0307 	and.w	r3, r3, #7
 800c500:	2b05      	cmp	r3, #5
 800c502:	d827      	bhi.n	800c554 <UART_SetConfig+0x200>
 800c504:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <UART_SetConfig+0x1b8>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c525 	.word	0x0800c525
 800c510:	0800c52d 	.word	0x0800c52d
 800c514:	0800c535 	.word	0x0800c535
 800c518:	0800c53d 	.word	0x0800c53d
 800c51c:	0800c545 	.word	0x0800c545
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	2300      	movs	r3, #0
 800c526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52a:	e1fb      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c52c:	2304      	movs	r3, #4
 800c52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c532:	e1f7      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c534:	2308      	movs	r3, #8
 800c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53a:	e1f3      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c53c:	2310      	movs	r3, #16
 800c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c542:	e1ef      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c544:	2320      	movs	r3, #32
 800c546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c54a:	e1eb      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c54c:	2340      	movs	r3, #64	; 0x40
 800c54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c552:	e1e7      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c554:	2380      	movs	r3, #128	; 0x80
 800c556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c55a:	bf00      	nop
 800c55c:	e1e2      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a52      	ldr	r2, [pc, #328]	; (800c6ac <UART_SetConfig+0x358>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d132      	bne.n	800c5ce <UART_SetConfig+0x27a>
 800c568:	4b4e      	ldr	r3, [pc, #312]	; (800c6a4 <UART_SetConfig+0x350>)
 800c56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56c:	f003 0307 	and.w	r3, r3, #7
 800c570:	2b05      	cmp	r3, #5
 800c572:	d827      	bhi.n	800c5c4 <UART_SetConfig+0x270>
 800c574:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <UART_SetConfig+0x228>)
 800c576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57a:	bf00      	nop
 800c57c:	0800c595 	.word	0x0800c595
 800c580:	0800c59d 	.word	0x0800c59d
 800c584:	0800c5a5 	.word	0x0800c5a5
 800c588:	0800c5ad 	.word	0x0800c5ad
 800c58c:	0800c5b5 	.word	0x0800c5b5
 800c590:	0800c5bd 	.word	0x0800c5bd
 800c594:	2300      	movs	r3, #0
 800c596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59a:	e1c3      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c59c:	2304      	movs	r3, #4
 800c59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a2:	e1bf      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c5a4:	2308      	movs	r3, #8
 800c5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5aa:	e1bb      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c5ac:	2310      	movs	r3, #16
 800c5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5b2:	e1b7      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ba:	e1b3      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c5bc:	2340      	movs	r3, #64	; 0x40
 800c5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5c2:	e1af      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c5c4:	2380      	movs	r3, #128	; 0x80
 800c5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ca:	bf00      	nop
 800c5cc:	e1aa      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a37      	ldr	r2, [pc, #220]	; (800c6b0 <UART_SetConfig+0x35c>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d132      	bne.n	800c63e <UART_SetConfig+0x2ea>
 800c5d8:	4b32      	ldr	r3, [pc, #200]	; (800c6a4 <UART_SetConfig+0x350>)
 800c5da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5dc:	f003 0307 	and.w	r3, r3, #7
 800c5e0:	2b05      	cmp	r3, #5
 800c5e2:	d827      	bhi.n	800c634 <UART_SetConfig+0x2e0>
 800c5e4:	a201      	add	r2, pc, #4	; (adr r2, 800c5ec <UART_SetConfig+0x298>)
 800c5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ea:	bf00      	nop
 800c5ec:	0800c605 	.word	0x0800c605
 800c5f0:	0800c60d 	.word	0x0800c60d
 800c5f4:	0800c615 	.word	0x0800c615
 800c5f8:	0800c61d 	.word	0x0800c61d
 800c5fc:	0800c625 	.word	0x0800c625
 800c600:	0800c62d 	.word	0x0800c62d
 800c604:	2300      	movs	r3, #0
 800c606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c60a:	e18b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c60c:	2304      	movs	r3, #4
 800c60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c612:	e187      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c614:	2308      	movs	r3, #8
 800c616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c61a:	e183      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c61c:	2310      	movs	r3, #16
 800c61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c622:	e17f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c624:	2320      	movs	r3, #32
 800c626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c62a:	e17b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c62c:	2340      	movs	r3, #64	; 0x40
 800c62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c632:	e177      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c634:	2380      	movs	r3, #128	; 0x80
 800c636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c63a:	bf00      	nop
 800c63c:	e172      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a1c      	ldr	r2, [pc, #112]	; (800c6b4 <UART_SetConfig+0x360>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d144      	bne.n	800c6d2 <UART_SetConfig+0x37e>
 800c648:	4b16      	ldr	r3, [pc, #88]	; (800c6a4 <UART_SetConfig+0x350>)
 800c64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c64c:	f003 0307 	and.w	r3, r3, #7
 800c650:	2b05      	cmp	r3, #5
 800c652:	d839      	bhi.n	800c6c8 <UART_SetConfig+0x374>
 800c654:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <UART_SetConfig+0x308>)
 800c656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65a:	bf00      	nop
 800c65c:	0800c675 	.word	0x0800c675
 800c660:	0800c67d 	.word	0x0800c67d
 800c664:	0800c685 	.word	0x0800c685
 800c668:	0800c68d 	.word	0x0800c68d
 800c66c:	0800c6b9 	.word	0x0800c6b9
 800c670:	0800c6c1 	.word	0x0800c6c1
 800c674:	2300      	movs	r3, #0
 800c676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c67a:	e153      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c67c:	2304      	movs	r3, #4
 800c67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c682:	e14f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c684:	2308      	movs	r3, #8
 800c686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c68a:	e14b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c68c:	2310      	movs	r3, #16
 800c68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c692:	e147      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c694:	cfff69f3 	.word	0xcfff69f3
 800c698:	58000c00 	.word	0x58000c00
 800c69c:	11fff4ff 	.word	0x11fff4ff
 800c6a0:	40011000 	.word	0x40011000
 800c6a4:	58024400 	.word	0x58024400
 800c6a8:	40004400 	.word	0x40004400
 800c6ac:	40004800 	.word	0x40004800
 800c6b0:	40004c00 	.word	0x40004c00
 800c6b4:	40005000 	.word	0x40005000
 800c6b8:	2320      	movs	r3, #32
 800c6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6be:	e131      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c6c0:	2340      	movs	r3, #64	; 0x40
 800c6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c6:	e12d      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c6c8:	2380      	movs	r3, #128	; 0x80
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	bf00      	nop
 800c6d0:	e128      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4ab6      	ldr	r2, [pc, #728]	; (800c9b0 <UART_SetConfig+0x65c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d178      	bne.n	800c7ce <UART_SetConfig+0x47a>
 800c6dc:	4bb5      	ldr	r3, [pc, #724]	; (800c9b4 <UART_SetConfig+0x660>)
 800c6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6e4:	2b28      	cmp	r3, #40	; 0x28
 800c6e6:	d86d      	bhi.n	800c7c4 <UART_SetConfig+0x470>
 800c6e8:	a201      	add	r2, pc, #4	; (adr r2, 800c6f0 <UART_SetConfig+0x39c>)
 800c6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ee:	bf00      	nop
 800c6f0:	0800c795 	.word	0x0800c795
 800c6f4:	0800c7c5 	.word	0x0800c7c5
 800c6f8:	0800c7c5 	.word	0x0800c7c5
 800c6fc:	0800c7c5 	.word	0x0800c7c5
 800c700:	0800c7c5 	.word	0x0800c7c5
 800c704:	0800c7c5 	.word	0x0800c7c5
 800c708:	0800c7c5 	.word	0x0800c7c5
 800c70c:	0800c7c5 	.word	0x0800c7c5
 800c710:	0800c79d 	.word	0x0800c79d
 800c714:	0800c7c5 	.word	0x0800c7c5
 800c718:	0800c7c5 	.word	0x0800c7c5
 800c71c:	0800c7c5 	.word	0x0800c7c5
 800c720:	0800c7c5 	.word	0x0800c7c5
 800c724:	0800c7c5 	.word	0x0800c7c5
 800c728:	0800c7c5 	.word	0x0800c7c5
 800c72c:	0800c7c5 	.word	0x0800c7c5
 800c730:	0800c7a5 	.word	0x0800c7a5
 800c734:	0800c7c5 	.word	0x0800c7c5
 800c738:	0800c7c5 	.word	0x0800c7c5
 800c73c:	0800c7c5 	.word	0x0800c7c5
 800c740:	0800c7c5 	.word	0x0800c7c5
 800c744:	0800c7c5 	.word	0x0800c7c5
 800c748:	0800c7c5 	.word	0x0800c7c5
 800c74c:	0800c7c5 	.word	0x0800c7c5
 800c750:	0800c7ad 	.word	0x0800c7ad
 800c754:	0800c7c5 	.word	0x0800c7c5
 800c758:	0800c7c5 	.word	0x0800c7c5
 800c75c:	0800c7c5 	.word	0x0800c7c5
 800c760:	0800c7c5 	.word	0x0800c7c5
 800c764:	0800c7c5 	.word	0x0800c7c5
 800c768:	0800c7c5 	.word	0x0800c7c5
 800c76c:	0800c7c5 	.word	0x0800c7c5
 800c770:	0800c7b5 	.word	0x0800c7b5
 800c774:	0800c7c5 	.word	0x0800c7c5
 800c778:	0800c7c5 	.word	0x0800c7c5
 800c77c:	0800c7c5 	.word	0x0800c7c5
 800c780:	0800c7c5 	.word	0x0800c7c5
 800c784:	0800c7c5 	.word	0x0800c7c5
 800c788:	0800c7c5 	.word	0x0800c7c5
 800c78c:	0800c7c5 	.word	0x0800c7c5
 800c790:	0800c7bd 	.word	0x0800c7bd
 800c794:	2301      	movs	r3, #1
 800c796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c79a:	e0c3      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c79c:	2304      	movs	r3, #4
 800c79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7a2:	e0bf      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c7a4:	2308      	movs	r3, #8
 800c7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7aa:	e0bb      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c7ac:	2310      	movs	r3, #16
 800c7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b2:	e0b7      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c7b4:	2320      	movs	r3, #32
 800c7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ba:	e0b3      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c7bc:	2340      	movs	r3, #64	; 0x40
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c2:	e0af      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c7c4:	2380      	movs	r3, #128	; 0x80
 800c7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ca:	bf00      	nop
 800c7cc:	e0aa      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a79      	ldr	r2, [pc, #484]	; (800c9b8 <UART_SetConfig+0x664>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d132      	bne.n	800c83e <UART_SetConfig+0x4ea>
 800c7d8:	4b76      	ldr	r3, [pc, #472]	; (800c9b4 <UART_SetConfig+0x660>)
 800c7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	2b05      	cmp	r3, #5
 800c7e2:	d827      	bhi.n	800c834 <UART_SetConfig+0x4e0>
 800c7e4:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <UART_SetConfig+0x498>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c805 	.word	0x0800c805
 800c7f0:	0800c80d 	.word	0x0800c80d
 800c7f4:	0800c815 	.word	0x0800c815
 800c7f8:	0800c81d 	.word	0x0800c81d
 800c7fc:	0800c825 	.word	0x0800c825
 800c800:	0800c82d 	.word	0x0800c82d
 800c804:	2300      	movs	r3, #0
 800c806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80a:	e08b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c80c:	2304      	movs	r3, #4
 800c80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c812:	e087      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c814:	2308      	movs	r3, #8
 800c816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81a:	e083      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c81c:	2310      	movs	r3, #16
 800c81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c822:	e07f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c824:	2320      	movs	r3, #32
 800c826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82a:	e07b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c82c:	2340      	movs	r3, #64	; 0x40
 800c82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c832:	e077      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c834:	2380      	movs	r3, #128	; 0x80
 800c836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83a:	bf00      	nop
 800c83c:	e072      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a5e      	ldr	r2, [pc, #376]	; (800c9bc <UART_SetConfig+0x668>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d132      	bne.n	800c8ae <UART_SetConfig+0x55a>
 800c848:	4b5a      	ldr	r3, [pc, #360]	; (800c9b4 <UART_SetConfig+0x660>)
 800c84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84c:	f003 0307 	and.w	r3, r3, #7
 800c850:	2b05      	cmp	r3, #5
 800c852:	d827      	bhi.n	800c8a4 <UART_SetConfig+0x550>
 800c854:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <UART_SetConfig+0x508>)
 800c856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85a:	bf00      	nop
 800c85c:	0800c875 	.word	0x0800c875
 800c860:	0800c87d 	.word	0x0800c87d
 800c864:	0800c885 	.word	0x0800c885
 800c868:	0800c88d 	.word	0x0800c88d
 800c86c:	0800c895 	.word	0x0800c895
 800c870:	0800c89d 	.word	0x0800c89d
 800c874:	2300      	movs	r3, #0
 800c876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87a:	e053      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c87c:	2304      	movs	r3, #4
 800c87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c882:	e04f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c884:	2308      	movs	r3, #8
 800c886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88a:	e04b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c88c:	2310      	movs	r3, #16
 800c88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c892:	e047      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c894:	2320      	movs	r3, #32
 800c896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89a:	e043      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c89c:	2340      	movs	r3, #64	; 0x40
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	e03f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c8a4:	2380      	movs	r3, #128	; 0x80
 800c8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8aa:	bf00      	nop
 800c8ac:	e03a      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a43      	ldr	r2, [pc, #268]	; (800c9c0 <UART_SetConfig+0x66c>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d132      	bne.n	800c91e <UART_SetConfig+0x5ca>
 800c8b8:	4b3e      	ldr	r3, [pc, #248]	; (800c9b4 <UART_SetConfig+0x660>)
 800c8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8bc:	f003 0307 	and.w	r3, r3, #7
 800c8c0:	2b05      	cmp	r3, #5
 800c8c2:	d827      	bhi.n	800c914 <UART_SetConfig+0x5c0>
 800c8c4:	a201      	add	r2, pc, #4	; (adr r2, 800c8cc <UART_SetConfig+0x578>)
 800c8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ca:	bf00      	nop
 800c8cc:	0800c8e5 	.word	0x0800c8e5
 800c8d0:	0800c8ed 	.word	0x0800c8ed
 800c8d4:	0800c8f5 	.word	0x0800c8f5
 800c8d8:	0800c8fd 	.word	0x0800c8fd
 800c8dc:	0800c905 	.word	0x0800c905
 800c8e0:	0800c90d 	.word	0x0800c90d
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ea:	e01b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8f2:	e017      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c8f4:	2308      	movs	r3, #8
 800c8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fa:	e013      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c902:	e00f      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c904:	2320      	movs	r3, #32
 800c906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90a:	e00b      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c90c:	2340      	movs	r3, #64	; 0x40
 800c90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c912:	e007      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c914:	2380      	movs	r3, #128	; 0x80
 800c916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91a:	bf00      	nop
 800c91c:	e002      	b.n	800c924 <UART_SetConfig+0x5d0>
 800c91e:	2380      	movs	r3, #128	; 0x80
 800c920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a25      	ldr	r2, [pc, #148]	; (800c9c0 <UART_SetConfig+0x66c>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	f040 80b8 	bne.w	800caa0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c930:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c934:	2b08      	cmp	r3, #8
 800c936:	d019      	beq.n	800c96c <UART_SetConfig+0x618>
 800c938:	2b08      	cmp	r3, #8
 800c93a:	dc04      	bgt.n	800c946 <UART_SetConfig+0x5f2>
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d009      	beq.n	800c954 <UART_SetConfig+0x600>
 800c940:	2b04      	cmp	r3, #4
 800c942:	d00b      	beq.n	800c95c <UART_SetConfig+0x608>
 800c944:	e042      	b.n	800c9cc <UART_SetConfig+0x678>
 800c946:	2b20      	cmp	r3, #32
 800c948:	d02b      	beq.n	800c9a2 <UART_SetConfig+0x64e>
 800c94a:	2b40      	cmp	r3, #64	; 0x40
 800c94c:	d02c      	beq.n	800c9a8 <UART_SetConfig+0x654>
 800c94e:	2b10      	cmp	r3, #16
 800c950:	d014      	beq.n	800c97c <UART_SetConfig+0x628>
 800c952:	e03b      	b.n	800c9cc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c954:	f7fc fca8 	bl	80092a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c958:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c95a:	e03d      	b.n	800c9d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c95c:	f107 0314 	add.w	r3, r7, #20
 800c960:	4618      	mov	r0, r3
 800c962:	f7fc fcb7 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c96a:	e035      	b.n	800c9d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c96c:	f107 0308 	add.w	r3, r7, #8
 800c970:	4618      	mov	r0, r3
 800c972:	f7fc fdfb 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c97a:	e02d      	b.n	800c9d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c97c:	4b0d      	ldr	r3, [pc, #52]	; (800c9b4 <UART_SetConfig+0x660>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0320 	and.w	r3, r3, #32
 800c984:	2b00      	cmp	r3, #0
 800c986:	d009      	beq.n	800c99c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c988:	4b0a      	ldr	r3, [pc, #40]	; (800c9b4 <UART_SetConfig+0x660>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	08db      	lsrs	r3, r3, #3
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	4a0c      	ldr	r2, [pc, #48]	; (800c9c4 <UART_SetConfig+0x670>)
 800c994:	fa22 f303 	lsr.w	r3, r2, r3
 800c998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c99a:	e01d      	b.n	800c9d8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c99c:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <UART_SetConfig+0x670>)
 800c99e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9a0:	e01a      	b.n	800c9d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9a2:	4b09      	ldr	r3, [pc, #36]	; (800c9c8 <UART_SetConfig+0x674>)
 800c9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9a6:	e017      	b.n	800c9d8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c9ae:	e013      	b.n	800c9d8 <UART_SetConfig+0x684>
 800c9b0:	40011400 	.word	0x40011400
 800c9b4:	58024400 	.word	0x58024400
 800c9b8:	40007800 	.word	0x40007800
 800c9bc:	40007c00 	.word	0x40007c00
 800c9c0:	58000c00 	.word	0x58000c00
 800c9c4:	03d09000 	.word	0x03d09000
 800c9c8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c9d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 824d 	beq.w	800ce7a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e4:	4aad      	ldr	r2, [pc, #692]	; (800cc9c <UART_SetConfig+0x948>)
 800c9e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9f2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	4413      	add	r3, r2
 800c9fe:	6a3a      	ldr	r2, [r7, #32]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d305      	bcc.n	800ca10 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca0a:	6a3a      	ldr	r2, [r7, #32]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d903      	bls.n	800ca18 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ca16:	e230      	b.n	800ce7a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f04f 0100 	mov.w	r1, #0
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca24:	4a9d      	ldr	r2, [pc, #628]	; (800cc9c <UART_SetConfig+0x948>)
 800ca26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	f04f 0400 	mov.w	r4, #0
 800ca30:	461a      	mov	r2, r3
 800ca32:	4623      	mov	r3, r4
 800ca34:	f7f3 fca4 	bl	8000380 <__aeabi_uldivmod>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4622      	mov	r2, r4
 800ca40:	f04f 0300 	mov.w	r3, #0
 800ca44:	f04f 0400 	mov.w	r4, #0
 800ca48:	0214      	lsls	r4, r2, #8
 800ca4a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ca4e:	020b      	lsls	r3, r1, #8
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	6852      	ldr	r2, [r2, #4]
 800ca54:	0852      	lsrs	r2, r2, #1
 800ca56:	4611      	mov	r1, r2
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	eb13 0b01 	adds.w	fp, r3, r1
 800ca60:	eb44 0c02 	adc.w	ip, r4, r2
 800ca64:	4658      	mov	r0, fp
 800ca66:	4661      	mov	r1, ip
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f04f 0400 	mov.w	r4, #0
 800ca70:	461a      	mov	r2, r3
 800ca72:	4623      	mov	r3, r4
 800ca74:	f7f3 fc84 	bl	8000380 <__aeabi_uldivmod>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca84:	d308      	bcc.n	800ca98 <UART_SetConfig+0x744>
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca8c:	d204      	bcs.n	800ca98 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca94:	60da      	str	r2, [r3, #12]
 800ca96:	e1f0      	b.n	800ce7a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ca9e:	e1ec      	b.n	800ce7a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caa8:	f040 8100 	bne.w	800ccac <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800caac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cab0:	2b40      	cmp	r3, #64	; 0x40
 800cab2:	f200 80b7 	bhi.w	800cc24 <UART_SetConfig+0x8d0>
 800cab6:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <UART_SetConfig+0x768>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cbc1 	.word	0x0800cbc1
 800cac0:	0800cbc9 	.word	0x0800cbc9
 800cac4:	0800cc25 	.word	0x0800cc25
 800cac8:	0800cc25 	.word	0x0800cc25
 800cacc:	0800cbd1 	.word	0x0800cbd1
 800cad0:	0800cc25 	.word	0x0800cc25
 800cad4:	0800cc25 	.word	0x0800cc25
 800cad8:	0800cc25 	.word	0x0800cc25
 800cadc:	0800cbe1 	.word	0x0800cbe1
 800cae0:	0800cc25 	.word	0x0800cc25
 800cae4:	0800cc25 	.word	0x0800cc25
 800cae8:	0800cc25 	.word	0x0800cc25
 800caec:	0800cc25 	.word	0x0800cc25
 800caf0:	0800cc25 	.word	0x0800cc25
 800caf4:	0800cc25 	.word	0x0800cc25
 800caf8:	0800cc25 	.word	0x0800cc25
 800cafc:	0800cbf1 	.word	0x0800cbf1
 800cb00:	0800cc25 	.word	0x0800cc25
 800cb04:	0800cc25 	.word	0x0800cc25
 800cb08:	0800cc25 	.word	0x0800cc25
 800cb0c:	0800cc25 	.word	0x0800cc25
 800cb10:	0800cc25 	.word	0x0800cc25
 800cb14:	0800cc25 	.word	0x0800cc25
 800cb18:	0800cc25 	.word	0x0800cc25
 800cb1c:	0800cc25 	.word	0x0800cc25
 800cb20:	0800cc25 	.word	0x0800cc25
 800cb24:	0800cc25 	.word	0x0800cc25
 800cb28:	0800cc25 	.word	0x0800cc25
 800cb2c:	0800cc25 	.word	0x0800cc25
 800cb30:	0800cc25 	.word	0x0800cc25
 800cb34:	0800cc25 	.word	0x0800cc25
 800cb38:	0800cc25 	.word	0x0800cc25
 800cb3c:	0800cc17 	.word	0x0800cc17
 800cb40:	0800cc25 	.word	0x0800cc25
 800cb44:	0800cc25 	.word	0x0800cc25
 800cb48:	0800cc25 	.word	0x0800cc25
 800cb4c:	0800cc25 	.word	0x0800cc25
 800cb50:	0800cc25 	.word	0x0800cc25
 800cb54:	0800cc25 	.word	0x0800cc25
 800cb58:	0800cc25 	.word	0x0800cc25
 800cb5c:	0800cc25 	.word	0x0800cc25
 800cb60:	0800cc25 	.word	0x0800cc25
 800cb64:	0800cc25 	.word	0x0800cc25
 800cb68:	0800cc25 	.word	0x0800cc25
 800cb6c:	0800cc25 	.word	0x0800cc25
 800cb70:	0800cc25 	.word	0x0800cc25
 800cb74:	0800cc25 	.word	0x0800cc25
 800cb78:	0800cc25 	.word	0x0800cc25
 800cb7c:	0800cc25 	.word	0x0800cc25
 800cb80:	0800cc25 	.word	0x0800cc25
 800cb84:	0800cc25 	.word	0x0800cc25
 800cb88:	0800cc25 	.word	0x0800cc25
 800cb8c:	0800cc25 	.word	0x0800cc25
 800cb90:	0800cc25 	.word	0x0800cc25
 800cb94:	0800cc25 	.word	0x0800cc25
 800cb98:	0800cc25 	.word	0x0800cc25
 800cb9c:	0800cc25 	.word	0x0800cc25
 800cba0:	0800cc25 	.word	0x0800cc25
 800cba4:	0800cc25 	.word	0x0800cc25
 800cba8:	0800cc25 	.word	0x0800cc25
 800cbac:	0800cc25 	.word	0x0800cc25
 800cbb0:	0800cc25 	.word	0x0800cc25
 800cbb4:	0800cc25 	.word	0x0800cc25
 800cbb8:	0800cc25 	.word	0x0800cc25
 800cbbc:	0800cc1d 	.word	0x0800cc1d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbc0:	f7fb f972 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800cbc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cbc6:	e033      	b.n	800cc30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbc8:	f7fb f984 	bl	8007ed4 <HAL_RCC_GetPCLK2Freq>
 800cbcc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cbce:	e02f      	b.n	800cc30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbd0:	f107 0314 	add.w	r3, r7, #20
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fc fb7d 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbde:	e027      	b.n	800cc30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fc fcc1 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbee:	e01f      	b.n	800cc30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	; (800cca0 <UART_SetConfig+0x94c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 0320 	and.w	r3, r3, #32
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d009      	beq.n	800cc10 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbfc:	4b28      	ldr	r3, [pc, #160]	; (800cca0 <UART_SetConfig+0x94c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	08db      	lsrs	r3, r3, #3
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	4a27      	ldr	r2, [pc, #156]	; (800cca4 <UART_SetConfig+0x950>)
 800cc08:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc0e:	e00f      	b.n	800cc30 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800cc10:	4b24      	ldr	r3, [pc, #144]	; (800cca4 <UART_SetConfig+0x950>)
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc14:	e00c      	b.n	800cc30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc16:	4b24      	ldr	r3, [pc, #144]	; (800cca8 <UART_SetConfig+0x954>)
 800cc18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc1a:	e009      	b.n	800cc30 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc22:	e005      	b.n	800cc30 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800cc24:	2300      	movs	r3, #0
 800cc26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cc2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 8121 	beq.w	800ce7a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	4a17      	ldr	r2, [pc, #92]	; (800cc9c <UART_SetConfig+0x948>)
 800cc3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc42:	461a      	mov	r2, r3
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc4a:	005a      	lsls	r2, r3, #1
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	085b      	lsrs	r3, r3, #1
 800cc52:	441a      	add	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	2b0f      	cmp	r3, #15
 800cc64:	d916      	bls.n	800cc94 <UART_SetConfig+0x940>
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc6c:	d212      	bcs.n	800cc94 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	f023 030f 	bic.w	r3, r3, #15
 800cc76:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7a:	085b      	lsrs	r3, r3, #1
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc86:	4313      	orrs	r3, r2
 800cc88:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc90:	60da      	str	r2, [r3, #12]
 800cc92:	e0f2      	b.n	800ce7a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cc9a:	e0ee      	b.n	800ce7a <UART_SetConfig+0xb26>
 800cc9c:	08015498 	.word	0x08015498
 800cca0:	58024400 	.word	0x58024400
 800cca4:	03d09000 	.word	0x03d09000
 800cca8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800ccac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccb0:	2b40      	cmp	r3, #64	; 0x40
 800ccb2:	f200 80b7 	bhi.w	800ce24 <UART_SetConfig+0xad0>
 800ccb6:	a201      	add	r2, pc, #4	; (adr r2, 800ccbc <UART_SetConfig+0x968>)
 800ccb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbc:	0800cdc1 	.word	0x0800cdc1
 800ccc0:	0800cdc9 	.word	0x0800cdc9
 800ccc4:	0800ce25 	.word	0x0800ce25
 800ccc8:	0800ce25 	.word	0x0800ce25
 800cccc:	0800cdd1 	.word	0x0800cdd1
 800ccd0:	0800ce25 	.word	0x0800ce25
 800ccd4:	0800ce25 	.word	0x0800ce25
 800ccd8:	0800ce25 	.word	0x0800ce25
 800ccdc:	0800cde1 	.word	0x0800cde1
 800cce0:	0800ce25 	.word	0x0800ce25
 800cce4:	0800ce25 	.word	0x0800ce25
 800cce8:	0800ce25 	.word	0x0800ce25
 800ccec:	0800ce25 	.word	0x0800ce25
 800ccf0:	0800ce25 	.word	0x0800ce25
 800ccf4:	0800ce25 	.word	0x0800ce25
 800ccf8:	0800ce25 	.word	0x0800ce25
 800ccfc:	0800cdf1 	.word	0x0800cdf1
 800cd00:	0800ce25 	.word	0x0800ce25
 800cd04:	0800ce25 	.word	0x0800ce25
 800cd08:	0800ce25 	.word	0x0800ce25
 800cd0c:	0800ce25 	.word	0x0800ce25
 800cd10:	0800ce25 	.word	0x0800ce25
 800cd14:	0800ce25 	.word	0x0800ce25
 800cd18:	0800ce25 	.word	0x0800ce25
 800cd1c:	0800ce25 	.word	0x0800ce25
 800cd20:	0800ce25 	.word	0x0800ce25
 800cd24:	0800ce25 	.word	0x0800ce25
 800cd28:	0800ce25 	.word	0x0800ce25
 800cd2c:	0800ce25 	.word	0x0800ce25
 800cd30:	0800ce25 	.word	0x0800ce25
 800cd34:	0800ce25 	.word	0x0800ce25
 800cd38:	0800ce25 	.word	0x0800ce25
 800cd3c:	0800ce17 	.word	0x0800ce17
 800cd40:	0800ce25 	.word	0x0800ce25
 800cd44:	0800ce25 	.word	0x0800ce25
 800cd48:	0800ce25 	.word	0x0800ce25
 800cd4c:	0800ce25 	.word	0x0800ce25
 800cd50:	0800ce25 	.word	0x0800ce25
 800cd54:	0800ce25 	.word	0x0800ce25
 800cd58:	0800ce25 	.word	0x0800ce25
 800cd5c:	0800ce25 	.word	0x0800ce25
 800cd60:	0800ce25 	.word	0x0800ce25
 800cd64:	0800ce25 	.word	0x0800ce25
 800cd68:	0800ce25 	.word	0x0800ce25
 800cd6c:	0800ce25 	.word	0x0800ce25
 800cd70:	0800ce25 	.word	0x0800ce25
 800cd74:	0800ce25 	.word	0x0800ce25
 800cd78:	0800ce25 	.word	0x0800ce25
 800cd7c:	0800ce25 	.word	0x0800ce25
 800cd80:	0800ce25 	.word	0x0800ce25
 800cd84:	0800ce25 	.word	0x0800ce25
 800cd88:	0800ce25 	.word	0x0800ce25
 800cd8c:	0800ce25 	.word	0x0800ce25
 800cd90:	0800ce25 	.word	0x0800ce25
 800cd94:	0800ce25 	.word	0x0800ce25
 800cd98:	0800ce25 	.word	0x0800ce25
 800cd9c:	0800ce25 	.word	0x0800ce25
 800cda0:	0800ce25 	.word	0x0800ce25
 800cda4:	0800ce25 	.word	0x0800ce25
 800cda8:	0800ce25 	.word	0x0800ce25
 800cdac:	0800ce25 	.word	0x0800ce25
 800cdb0:	0800ce25 	.word	0x0800ce25
 800cdb4:	0800ce25 	.word	0x0800ce25
 800cdb8:	0800ce25 	.word	0x0800ce25
 800cdbc:	0800ce1d 	.word	0x0800ce1d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdc0:	f7fb f872 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800cdc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdc6:	e033      	b.n	800ce30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdc8:	f7fb f884 	bl	8007ed4 <HAL_RCC_GetPCLK2Freq>
 800cdcc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdce:	e02f      	b.n	800ce30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdd0:	f107 0314 	add.w	r3, r7, #20
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fc fa7d 	bl	80092d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdde:	e027      	b.n	800ce30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cde0:	f107 0308 	add.w	r3, r7, #8
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fc fbc1 	bl	800956c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdee:	e01f      	b.n	800ce30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdf0:	4b2c      	ldr	r3, [pc, #176]	; (800cea4 <UART_SetConfig+0xb50>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0320 	and.w	r3, r3, #32
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d009      	beq.n	800ce10 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdfc:	4b29      	ldr	r3, [pc, #164]	; (800cea4 <UART_SetConfig+0xb50>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	08db      	lsrs	r3, r3, #3
 800ce02:	f003 0303 	and.w	r3, r3, #3
 800ce06:	4a28      	ldr	r2, [pc, #160]	; (800cea8 <UART_SetConfig+0xb54>)
 800ce08:	fa22 f303 	lsr.w	r3, r2, r3
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce0e:	e00f      	b.n	800ce30 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800ce10:	4b25      	ldr	r3, [pc, #148]	; (800cea8 <UART_SetConfig+0xb54>)
 800ce12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce14:	e00c      	b.n	800ce30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce16:	4b25      	ldr	r3, [pc, #148]	; (800ceac <UART_SetConfig+0xb58>)
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce1a:	e009      	b.n	800ce30 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce22:	e005      	b.n	800ce30 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce2e:	bf00      	nop
    }

    if (pclk != 0U)
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d021      	beq.n	800ce7a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	4a1d      	ldr	r2, [pc, #116]	; (800ceb0 <UART_SetConfig+0xb5c>)
 800ce3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce40:	461a      	mov	r2, r3
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	085b      	lsrs	r3, r3, #1
 800ce4e:	441a      	add	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	2b0f      	cmp	r3, #15
 800ce60:	d908      	bls.n	800ce74 <UART_SetConfig+0xb20>
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce68:	d204      	bcs.n	800ce74 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce70:	60da      	str	r2, [r3, #12]
 800ce72:	e002      	b.n	800ce7a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ce96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3738      	adds	r7, #56	; 0x38
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cea4:	58024400 	.word	0x58024400
 800cea8:	03d09000 	.word	0x03d09000
 800ceac:	003d0900 	.word	0x003d0900
 800ceb0:	08015498 	.word	0x08015498

0800ceb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00a      	beq.n	800cf22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf26:	f003 0308 	and.w	r3, r3, #8
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	430a      	orrs	r2, r1
 800cf42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf48:	f003 0310 	and.w	r3, r3, #16
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6a:	f003 0320 	and.w	r3, r3, #32
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d01a      	beq.n	800cfca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfb2:	d10a      	bne.n	800cfca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00a      	beq.n	800cfec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	605a      	str	r2, [r3, #4]
  }
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d008:	f7f4 ff4e 	bl	8001ea8 <HAL_GetTick>
 800d00c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0308 	and.w	r3, r3, #8
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d10e      	bne.n	800d03a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d01c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f82c 	bl	800d088 <UART_WaitOnFlagUntilTimeout>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e022      	b.n	800d080 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b04      	cmp	r3, #4
 800d046:	d10e      	bne.n	800d066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f816 	bl	800d088 <UART_WaitOnFlagUntilTimeout>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e00c      	b.n	800d080 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2220      	movs	r2, #32
 800d072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	603b      	str	r3, [r7, #0]
 800d094:	4613      	mov	r3, r2
 800d096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d098:	e062      	b.n	800d160 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a0:	d05e      	beq.n	800d160 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0a2:	f7f4 ff01 	bl	8001ea8 <HAL_GetTick>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d302      	bcc.n	800d0b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d11d      	bne.n	800d0f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d0c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689a      	ldr	r2, [r3, #8]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f022 0201 	bic.w	r2, r2, #1
 800d0d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2220      	movs	r2, #32
 800d0dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2220      	movs	r2, #32
 800d0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e045      	b.n	800d180 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 0304 	and.w	r3, r3, #4
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d02e      	beq.n	800d160 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	69db      	ldr	r3, [r3, #28]
 800d108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d10c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d110:	d126      	bne.n	800d160 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d11a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d12a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689a      	ldr	r2, [r3, #8]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f022 0201 	bic.w	r2, r2, #1
 800d13a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2220      	movs	r2, #32
 800d140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2220      	movs	r2, #32
 800d148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2220      	movs	r2, #32
 800d150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d15c:	2303      	movs	r3, #3
 800d15e:	e00f      	b.n	800d180 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	69da      	ldr	r2, [r3, #28]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	4013      	ands	r3, r2
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	bf0c      	ite	eq
 800d170:	2301      	moveq	r3, #1
 800d172:	2300      	movne	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	461a      	mov	r2, r3
 800d178:	79fb      	ldrb	r3, [r7, #7]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d08d      	beq.n	800d09a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d19e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689a      	ldr	r2, [r3, #8]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d1ae:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2220      	movs	r2, #32
 800d1b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d1da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6899      	ldr	r1, [r3, #8]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	4b08      	ldr	r3, [pc, #32]	; (800d208 <UART_EndRxTransfer+0x44>)
 800d1e8:	400b      	ands	r3, r1
 800d1ea:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800d1fa:	bf00      	nop
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	effffffe 	.word	0xeffffffe

0800d20c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d218:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d222:	d01f      	beq.n	800d264 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d23a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	689a      	ldr	r2, [r3, #8]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f022 0201 	bic.w	r2, r2, #1
 800d24a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	689a      	ldr	r2, [r3, #8]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d25a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2220      	movs	r2, #32
 800d260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7f3 fdff 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d26a:	bf00      	nop
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b084      	sub	sp, #16
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff f853 	bl	800c32c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b086      	sub	sp, #24
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b6:	2b80      	cmp	r3, #128	; 0x80
 800d2b8:	d109      	bne.n	800d2ce <UART_DMAError+0x40>
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	2b21      	cmp	r3, #33	; 0x21
 800d2be:	d106      	bne.n	800d2ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d2c8:	6978      	ldr	r0, [r7, #20]
 800d2ca:	f7ff ff5d 	bl	800d188 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d8:	2b40      	cmp	r3, #64	; 0x40
 800d2da:	d109      	bne.n	800d2f0 <UART_DMAError+0x62>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2b22      	cmp	r3, #34	; 0x22
 800d2e0:	d106      	bne.n	800d2f0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d2ea:	6978      	ldr	r0, [r7, #20]
 800d2ec:	f7ff ff6a 	bl	800d1c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2f6:	f043 0210 	orr.w	r2, r3, #16
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d300:	6978      	ldr	r0, [r7, #20]
 800d302:	f7ff f81d 	bl	800c340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d306:	bf00      	nop
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f7ff f807 	bl	800c340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d332:	bf00      	nop
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b082      	sub	sp, #8
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d350:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2220      	movs	r2, #32
 800d356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7fe ffd9 	bl	800c318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d366:	bf00      	nop
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d36e:	b480      	push	{r7}
 800d370:	b083      	sub	sp, #12
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d376:	bf00      	nop
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d39e:	bf00      	nop
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d3aa:	b480      	push	{r7}
 800d3ac:	b085      	sub	sp, #20
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d101      	bne.n	800d3c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800d3bc:	2302      	movs	r3, #2
 800d3be:	e027      	b.n	800d410 <HAL_UARTEx_DisableFifoMode+0x66>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2224      	movs	r2, #36	; 0x24
 800d3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f022 0201 	bic.w	r2, r2, #1
 800d3e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d3ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2220      	movs	r2, #32
 800d402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d101      	bne.n	800d434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d430:	2302      	movs	r3, #2
 800d432:	e02d      	b.n	800d490 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2224      	movs	r2, #36	; 0x24
 800d440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f022 0201 	bic.w	r2, r2, #1
 800d45a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	430a      	orrs	r2, r1
 800d46e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 f84f 	bl	800d514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2220      	movs	r2, #32
 800d482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d101      	bne.n	800d4b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	e02d      	b.n	800d50c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2224      	movs	r2, #36	; 0x24
 800d4bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f022 0201 	bic.w	r2, r2, #1
 800d4d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f811 	bl	800d514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2220      	movs	r2, #32
 800d4fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d514:	b480      	push	{r7}
 800d516:	b089      	sub	sp, #36	; 0x24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d51c:	4a2f      	ldr	r2, [pc, #188]	; (800d5dc <UARTEx_SetNbDataToProcess+0xc8>)
 800d51e:	f107 0314 	add.w	r3, r7, #20
 800d522:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d526:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d52a:	4a2d      	ldr	r2, [pc, #180]	; (800d5e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800d52c:	f107 030c 	add.w	r3, r7, #12
 800d530:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d534:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d108      	bne.n	800d552 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d550:	e03d      	b.n	800d5ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d552:	2310      	movs	r3, #16
 800d554:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d556:	2310      	movs	r3, #16
 800d558:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	0e5b      	lsrs	r3, r3, #25
 800d562:	b2db      	uxtb	r3, r3
 800d564:	f003 0307 	and.w	r3, r3, #7
 800d568:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	0f5b      	lsrs	r3, r3, #29
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f003 0307 	and.w	r3, r3, #7
 800d578:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d57a:	7fbb      	ldrb	r3, [r7, #30]
 800d57c:	7f3a      	ldrb	r2, [r7, #28]
 800d57e:	f107 0120 	add.w	r1, r7, #32
 800d582:	440a      	add	r2, r1
 800d584:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d588:	fb02 f303 	mul.w	r3, r2, r3
 800d58c:	7f3a      	ldrb	r2, [r7, #28]
 800d58e:	f107 0120 	add.w	r1, r7, #32
 800d592:	440a      	add	r2, r1
 800d594:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d598:	fb93 f3f2 	sdiv	r3, r3, r2
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d5a4:	7ffb      	ldrb	r3, [r7, #31]
 800d5a6:	7f7a      	ldrb	r2, [r7, #29]
 800d5a8:	f107 0120 	add.w	r1, r7, #32
 800d5ac:	440a      	add	r2, r1
 800d5ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
 800d5b6:	7f7a      	ldrb	r2, [r7, #29]
 800d5b8:	f107 0120 	add.w	r1, r7, #32
 800d5bc:	440a      	add	r2, r1
 800d5be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d5c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d5ce:	bf00      	nop
 800d5d0:	3724      	adds	r7, #36	; 0x24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	08015414 	.word	0x08015414
 800d5e0:	0801541c 	.word	0x0801541c

0800d5e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d5e4:	b084      	sub	sp, #16
 800d5e6:	b480      	push	{r7}
 800d5e8:	b085      	sub	sp, #20
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	f107 001c 	add.w	r0, r7, #28
 800d5f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d5fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d5fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d602:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d604:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d606:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d60a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4313      	orrs	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	4b07      	ldr	r3, [pc, #28]	; (800d634 <SDMMC_Init+0x50>)
 800d618:	4013      	ands	r3, r2
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	431a      	orrs	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3714      	adds	r7, #20
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	b004      	add	sp, #16
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	ffc02c00 	.word	0xffc02c00

0800d638 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d646:	4618      	mov	r0, r3
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d652:	b480      	push	{r7}
 800d654:	b083      	sub	sp, #12
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f043 0203 	orr.w	r2, r3, #3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	370c      	adds	r7, #12
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d696:	b480      	push	{r7}
 800d698:	b083      	sub	sp, #12
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 0303 	and.w	r3, r3, #3
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
	...

0800d6b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d6d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d6de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6e0:	68fa      	ldr	r2, [r7, #12]
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68da      	ldr	r2, [r3, #12]
 800d6ea:	4b06      	ldr	r3, [pc, #24]	; (800d704 <SDMMC_SendCommand+0x50>)
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	431a      	orrs	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	fffee0c0 	.word	0xfffee0c0

0800d708 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	b2db      	uxtb	r3, r3
}
 800d716:	4618      	mov	r0, r3
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	3314      	adds	r3, #20
 800d730:	461a      	mov	r2, r3
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	4413      	add	r3, r2
 800d736:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d76e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d774:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d77a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d786:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d792:	2300      	movs	r3, #0

}
 800d794:	4618      	mov	r0, r3
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d7ae:	2310      	movs	r3, #16
 800d7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff ff73 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d7ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7d2:	2110      	movs	r1, #16
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fa8d 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d7da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3720      	adds	r7, #32
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b088      	sub	sp, #32
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d7f4:	2311      	movs	r3, #17
 800d7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7fe:	2300      	movs	r3, #0
 800d800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff ff50 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d814:	f241 3288 	movw	r2, #5000	; 0x1388
 800d818:	2111      	movs	r1, #17
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 fa6a 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d822:	69fb      	ldr	r3, [r7, #28]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3720      	adds	r7, #32
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d83a:	2312      	movs	r3, #18
 800d83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d83e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d84c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d84e:	f107 0308 	add.w	r3, r7, #8
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff ff2d 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d85e:	2112      	movs	r1, #18
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fa47 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d868:	69fb      	ldr	r3, [r7, #28]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3720      	adds	r7, #32
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b088      	sub	sp, #32
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d880:	2318      	movs	r3, #24
 800d882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d884:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d88a:	2300      	movs	r3, #0
 800d88c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d88e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d892:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d894:	f107 0308 	add.w	r3, r7, #8
 800d898:	4619      	mov	r1, r3
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff ff0a 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a4:	2118      	movs	r1, #24
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fa24 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d8ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8ae:	69fb      	ldr	r3, [r7, #28]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d8c6:	2319      	movs	r3, #25
 800d8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8da:	f107 0308 	add.w	r3, r7, #8
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fee7 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d8e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8ea:	2119      	movs	r1, #25
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fa01 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f4:	69fb      	ldr	r3, [r7, #28]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3720      	adds	r7, #32
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b088      	sub	sp, #32
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d908:	2300      	movs	r3, #0
 800d90a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d90c:	230c      	movs	r3, #12
 800d90e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d916:	2300      	movs	r3, #0
 800d918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d91a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d91e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d938:	f107 0308 	add.w	r3, r7, #8
 800d93c:	4619      	mov	r1, r3
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7ff feb8 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d944:	4a0b      	ldr	r2, [pc, #44]	; (800d974 <SDMMC_CmdStopTransfer+0x74>)
 800d946:	210c      	movs	r1, #12
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f9d3 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d94e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d962:	d101      	bne.n	800d968 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d964:	2300      	movs	r3, #0
 800d966:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d968:	69fb      	ldr	r3, [r7, #28]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3720      	adds	r7, #32
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	05f5e100 	.word	0x05f5e100

0800d978 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08a      	sub	sp, #40	; 0x28
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d988:	2307      	movs	r3, #7
 800d98a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d990:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d992:	2300      	movs	r3, #0
 800d994:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d99a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d99c:	f107 0310 	add.w	r3, r7, #16
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f7ff fe86 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ac:	2107      	movs	r1, #7
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f000 f9a0 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800d9b4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3728      	adds	r7, #40	; 0x28
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9de:	f107 0308 	add.w	r3, r7, #8
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff fe65 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f954 	bl	800dc98 <SDMMC_GetCmdError>
 800d9f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3720      	adds	r7, #32
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800da04:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800da08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800da0a:	2308      	movs	r3, #8
 800da0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da14:	2300      	movs	r3, #0
 800da16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da1e:	f107 0308 	add.w	r3, r7, #8
 800da22:	4619      	mov	r1, r3
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff fe45 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fb56 	bl	800e0dc <SDMMC_GetCmdResp7>
 800da30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da32:	69fb      	ldr	r3, [r7, #28]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3720      	adds	r7, #32
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800da4a:	2337      	movs	r3, #55	; 0x37
 800da4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da54:	2300      	movs	r3, #0
 800da56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da5e:	f107 0308 	add.w	r3, r7, #8
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff fe25 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800da6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da6e:	2137      	movs	r1, #55	; 0x37
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f93f 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800da76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da78:	69fb      	ldr	r3, [r7, #28]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3720      	adds	r7, #32
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b088      	sub	sp, #32
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800da90:	2329      	movs	r3, #41	; 0x29
 800da92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da9a:	2300      	movs	r3, #0
 800da9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800daa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff fe02 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fa5b 	bl	800df6c <SDMMC_GetCmdResp3>
 800dab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dab8:	69fb      	ldr	r3, [r7, #28]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3720      	adds	r7, #32
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b088      	sub	sp, #32
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dad0:	2306      	movs	r3, #6
 800dad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dada:	2300      	movs	r3, #0
 800dadc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dae2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dae4:	f107 0308 	add.w	r3, r7, #8
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff fde2 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800daf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800daf4:	2106      	movs	r1, #6
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f8fc 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800dafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dafe:	69fb      	ldr	r3, [r7, #28]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3720      	adds	r7, #32
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800db10:	2300      	movs	r3, #0
 800db12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800db14:	2333      	movs	r3, #51	; 0x33
 800db16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db1e:	2300      	movs	r3, #0
 800db20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db28:	f107 0308 	add.w	r3, r7, #8
 800db2c:	4619      	mov	r1, r3
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff fdc0 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800db34:	f241 3288 	movw	r2, #5000	; 0x1388
 800db38:	2133      	movs	r1, #51	; 0x33
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f8da 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800db40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db42:	69fb      	ldr	r3, [r7, #28]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800db58:	2302      	movs	r3, #2
 800db5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800db5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800db60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db6c:	f107 0308 	add.w	r3, r7, #8
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7ff fd9e 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f9ad 	bl	800ded8 <SDMMC_GetCmdResp2>
 800db7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db80:	69fb      	ldr	r3, [r7, #28]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3720      	adds	r7, #32
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b088      	sub	sp, #32
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800db98:	2309      	movs	r3, #9
 800db9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800db9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff fd7e 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f98d 	bl	800ded8 <SDMMC_GetCmdResp2>
 800dbbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbc0:	69fb      	ldr	r3, [r7, #28]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3720      	adds	r7, #32
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b088      	sub	sp, #32
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbec:	f107 0308 	add.w	r3, r7, #8
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7ff fd5e 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	2103      	movs	r1, #3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f9f5 	bl	800dfec <SDMMC_GetCmdResp6>
 800dc02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc04:	69fb      	ldr	r3, [r7, #28]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3720      	adds	r7, #32
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b088      	sub	sp, #32
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dc1c:	230d      	movs	r3, #13
 800dc1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc26:	2300      	movs	r3, #0
 800dc28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc30:	f107 0308 	add.w	r3, r7, #8
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff fd3c 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc40:	210d      	movs	r1, #13
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f856 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800dc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc4a:	69fb      	ldr	r3, [r7, #28]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3720      	adds	r7, #32
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b088      	sub	sp, #32
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800dc60:	230d      	movs	r3, #13
 800dc62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc74:	f107 0308 	add.w	r3, r7, #8
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff fd1a 	bl	800d6b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800dc80:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc84:	210d      	movs	r1, #13
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f834 	bl	800dcf4 <SDMMC_GetCmdResp1>
 800dc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3720      	adds	r7, #32
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dca0:	4b11      	ldr	r3, [pc, #68]	; (800dce8 <SDMMC_GetCmdError+0x50>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a11      	ldr	r2, [pc, #68]	; (800dcec <SDMMC_GetCmdError+0x54>)
 800dca6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcaa:	0a5b      	lsrs	r3, r3, #9
 800dcac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcb0:	fb02 f303 	mul.w	r3, r2, r3
 800dcb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	1e5a      	subs	r2, r3, #1
 800dcba:	60fa      	str	r2, [r7, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcc4:	e009      	b.n	800dcda <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0f1      	beq.n	800dcb6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a06      	ldr	r2, [pc, #24]	; (800dcf0 <SDMMC_GetCmdError+0x58>)
 800dcd6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	24000000 	.word	0x24000000
 800dcec:	10624dd3 	.word	0x10624dd3
 800dcf0:	002000c5 	.word	0x002000c5

0800dcf4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd02:	4b70      	ldr	r3, [pc, #448]	; (800dec4 <SDMMC_GetCmdResp1+0x1d0>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a70      	ldr	r2, [pc, #448]	; (800dec8 <SDMMC_GetCmdResp1+0x1d4>)
 800dd08:	fba2 2303 	umull	r2, r3, r2, r3
 800dd0c:	0a5a      	lsrs	r2, r3, #9
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	fb02 f303 	mul.w	r3, r2, r3
 800dd14:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	1e5a      	subs	r2, r3, #1
 800dd1a:	61fa      	str	r2, [r7, #28]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d102      	bne.n	800dd26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd24:	e0c9      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd2a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dd2c:	69ba      	ldr	r2, [r7, #24]
 800dd2e:	4b67      	ldr	r3, [pc, #412]	; (800decc <SDMMC_GetCmdResp1+0x1d8>)
 800dd30:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d0ef      	beq.n	800dd16 <SDMMC_GetCmdResp1+0x22>
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1ea      	bne.n	800dd16 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d004      	beq.n	800dd56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2204      	movs	r2, #4
 800dd50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd52:	2304      	movs	r3, #4
 800dd54:	e0b1      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5a:	f003 0301 	and.w	r3, r3, #1
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d004      	beq.n	800dd6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e0a6      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4a58      	ldr	r2, [pc, #352]	; (800ded0 <SDMMC_GetCmdResp1+0x1dc>)
 800dd70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f7ff fcc8 	bl	800d708 <SDMMC_GetCommandResponse>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	7afb      	ldrb	r3, [r7, #11]
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d001      	beq.n	800dd86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e099      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dd86:	2100      	movs	r1, #0
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f7ff fcca 	bl	800d722 <SDMMC_GetResponse>
 800dd8e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dd90:	697a      	ldr	r2, [r7, #20]
 800dd92:	4b50      	ldr	r3, [pc, #320]	; (800ded4 <SDMMC_GetCmdResp1+0x1e0>)
 800dd94:	4013      	ands	r3, r2
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e08d      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	da02      	bge.n	800ddaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dda4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dda8:	e087      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ddb4:	2340      	movs	r3, #64	; 0x40
 800ddb6:	e080      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ddc2:	2380      	movs	r3, #128	; 0x80
 800ddc4:	e079      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d002      	beq.n	800ddd6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ddd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddd4:	e071      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dde0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dde4:	e069      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ddf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddf4:	e061      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de04:	e059      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de14:	e051      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de24:	e049      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de34:	e041      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800de40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de44:	e039      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de54:	e031      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de64:	e029      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800de74:	e021      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de84:	e019      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800de94:	e011      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dea0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dea4:	e009      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f003 0308 	and.w	r3, r3, #8
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800deb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800deb4:	e001      	b.n	800deba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800deb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	24000000 	.word	0x24000000
 800dec8:	10624dd3 	.word	0x10624dd3
 800decc:	00200045 	.word	0x00200045
 800ded0:	002000c5 	.word	0x002000c5
 800ded4:	fdffe008 	.word	0xfdffe008

0800ded8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dee0:	4b1f      	ldr	r3, [pc, #124]	; (800df60 <SDMMC_GetCmdResp2+0x88>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a1f      	ldr	r2, [pc, #124]	; (800df64 <SDMMC_GetCmdResp2+0x8c>)
 800dee6:	fba2 2303 	umull	r2, r3, r2, r3
 800deea:	0a5b      	lsrs	r3, r3, #9
 800deec:	f241 3288 	movw	r2, #5000	; 0x1388
 800def0:	fb02 f303 	mul.w	r3, r2, r3
 800def4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	1e5a      	subs	r2, r3, #1
 800defa:	60fa      	str	r2, [r7, #12]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df04:	e026      	b.n	800df54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0ef      	beq.n	800def6 <SDMMC_GetCmdResp2+0x1e>
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d1ea      	bne.n	800def6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df24:	f003 0304 	and.w	r3, r3, #4
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d004      	beq.n	800df36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2204      	movs	r2, #4
 800df30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df32:	2304      	movs	r3, #4
 800df34:	e00e      	b.n	800df54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d004      	beq.n	800df4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2201      	movs	r2, #1
 800df46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df48:	2301      	movs	r3, #1
 800df4a:	e003      	b.n	800df54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a06      	ldr	r2, [pc, #24]	; (800df68 <SDMMC_GetCmdResp2+0x90>)
 800df50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df52:	2300      	movs	r3, #0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	24000000 	.word	0x24000000
 800df64:	10624dd3 	.word	0x10624dd3
 800df68:	002000c5 	.word	0x002000c5

0800df6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df74:	4b1a      	ldr	r3, [pc, #104]	; (800dfe0 <SDMMC_GetCmdResp3+0x74>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a1a      	ldr	r2, [pc, #104]	; (800dfe4 <SDMMC_GetCmdResp3+0x78>)
 800df7a:	fba2 2303 	umull	r2, r3, r2, r3
 800df7e:	0a5b      	lsrs	r3, r3, #9
 800df80:	f241 3288 	movw	r2, #5000	; 0x1388
 800df84:	fb02 f303 	mul.w	r3, r2, r3
 800df88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	1e5a      	subs	r2, r3, #1
 800df8e:	60fa      	str	r2, [r7, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d102      	bne.n	800df9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df98:	e01b      	b.n	800dfd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0ef      	beq.n	800df8a <SDMMC_GetCmdResp3+0x1e>
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1ea      	bne.n	800df8a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb8:	f003 0304 	and.w	r3, r3, #4
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2204      	movs	r2, #4
 800dfc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfc6:	2304      	movs	r3, #4
 800dfc8:	e003      	b.n	800dfd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	4a06      	ldr	r2, [pc, #24]	; (800dfe8 <SDMMC_GetCmdResp3+0x7c>)
 800dfce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	24000000 	.word	0x24000000
 800dfe4:	10624dd3 	.word	0x10624dd3
 800dfe8:	002000c5 	.word	0x002000c5

0800dfec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	460b      	mov	r3, r1
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dffa:	4b35      	ldr	r3, [pc, #212]	; (800e0d0 <SDMMC_GetCmdResp6+0xe4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a35      	ldr	r2, [pc, #212]	; (800e0d4 <SDMMC_GetCmdResp6+0xe8>)
 800e000:	fba2 2303 	umull	r2, r3, r2, r3
 800e004:	0a5b      	lsrs	r3, r3, #9
 800e006:	f241 3288 	movw	r2, #5000	; 0x1388
 800e00a:	fb02 f303 	mul.w	r3, r2, r3
 800e00e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	1e5a      	subs	r2, r3, #1
 800e014:	61fa      	str	r2, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d102      	bne.n	800e020 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e01a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e01e:	e052      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e024:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d0ef      	beq.n	800e010 <SDMMC_GetCmdResp6+0x24>
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1ea      	bne.n	800e010 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e03e:	f003 0304 	and.w	r3, r3, #4
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2204      	movs	r2, #4
 800e04a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e04c:	2304      	movs	r3, #4
 800e04e:	e03a      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e054:	f003 0301 	and.w	r3, r3, #1
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d004      	beq.n	800e066 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2201      	movs	r2, #1
 800e060:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e062:	2301      	movs	r3, #1
 800e064:	e02f      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff fb4e 	bl	800d708 <SDMMC_GetCommandResponse>
 800e06c:	4603      	mov	r3, r0
 800e06e:	461a      	mov	r2, r3
 800e070:	7afb      	ldrb	r3, [r7, #11]
 800e072:	4293      	cmp	r3, r2
 800e074:	d001      	beq.n	800e07a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e076:	2301      	movs	r3, #1
 800e078:	e025      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	4a16      	ldr	r2, [pc, #88]	; (800e0d8 <SDMMC_GetCmdResp6+0xec>)
 800e07e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e080:	2100      	movs	r1, #0
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff fb4d 	bl	800d722 <SDMMC_GetResponse>
 800e088:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e090:	2b00      	cmp	r3, #0
 800e092:	d106      	bne.n	800e0a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	0c1b      	lsrs	r3, r3, #16
 800e098:	b29a      	uxth	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e011      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0b0:	e009      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0c0:	e001      	b.n	800e0c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3720      	adds	r7, #32
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	24000000 	.word	0x24000000
 800e0d4:	10624dd3 	.word	0x10624dd3
 800e0d8:	002000c5 	.word	0x002000c5

0800e0dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0e4:	4b22      	ldr	r3, [pc, #136]	; (800e170 <SDMMC_GetCmdResp7+0x94>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a22      	ldr	r2, [pc, #136]	; (800e174 <SDMMC_GetCmdResp7+0x98>)
 800e0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ee:	0a5b      	lsrs	r3, r3, #9
 800e0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0f4:	fb02 f303 	mul.w	r3, r2, r3
 800e0f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	1e5a      	subs	r2, r3, #1
 800e0fe:	60fa      	str	r2, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e108:	e02c      	b.n	800e164 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e116:	2b00      	cmp	r3, #0
 800e118:	d0ef      	beq.n	800e0fa <SDMMC_GetCmdResp7+0x1e>
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1ea      	bne.n	800e0fa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e128:	f003 0304 	and.w	r3, r3, #4
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d004      	beq.n	800e13a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2204      	movs	r2, #4
 800e134:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e136:	2304      	movs	r3, #4
 800e138:	e014      	b.n	800e164 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13e:	f003 0301 	and.w	r3, r3, #1
 800e142:	2b00      	cmp	r3, #0
 800e144:	d004      	beq.n	800e150 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e14c:	2301      	movs	r3, #1
 800e14e:	e009      	b.n	800e164 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2240      	movs	r2, #64	; 0x40
 800e160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e162:	2300      	movs	r3, #0

}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	24000000 	.word	0x24000000
 800e174:	10624dd3 	.word	0x10624dd3

0800e178 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e17c:	4904      	ldr	r1, [pc, #16]	; (800e190 <MX_FATFS_Init+0x18>)
 800e17e:	4805      	ldr	r0, [pc, #20]	; (800e194 <MX_FATFS_Init+0x1c>)
 800e180:	f002 fff4 	bl	801116c <FATFS_LinkDriver>
 800e184:	4603      	mov	r3, r0
 800e186:	461a      	mov	r2, r3
 800e188:	4b03      	ldr	r3, [pc, #12]	; (800e198 <MX_FATFS_Init+0x20>)
 800e18a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e18c:	bf00      	nop
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	2406ef34 	.word	0x2406ef34
 800e194:	080154b0 	.word	0x080154b0
 800e198:	2406ef30 	.word	0x2406ef30

0800e19c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e19c:	b480      	push	{r7}
 800e19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e1a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e1b6:	f000 f885 	bl	800e2c4 <BSP_SD_IsDetected>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d001      	beq.n	800e1c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e1c0:	2302      	movs	r3, #2
 800e1c2:	e012      	b.n	800e1ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e1c4:	480b      	ldr	r0, [pc, #44]	; (800e1f4 <BSP_SD_Init+0x48>)
 800e1c6:	f7fb fdcd 	bl	8009d64 <HAL_SD_Init>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e1ce:	79fb      	ldrb	r3, [r7, #7]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d109      	bne.n	800e1e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e1d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e1d8:	4806      	ldr	r0, [pc, #24]	; (800e1f4 <BSP_SD_Init+0x48>)
 800e1da:	f7fc fc6b 	bl	800aab4 <HAL_SD_ConfigWideBusOperation>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	2406ec9c 	.word	0x2406ec9c

0800e1f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	68f9      	ldr	r1, [r7, #12]
 800e20e:	4806      	ldr	r0, [pc, #24]	; (800e228 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e210:	f7fb feba 	bl	8009f88 <HAL_SD_ReadBlocks_DMA>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	2406ec9c 	.word	0x2406ec9c

0800e22c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	68f9      	ldr	r1, [r7, #12]
 800e242:	4806      	ldr	r0, [pc, #24]	; (800e25c <BSP_SD_WriteBlocks_DMA+0x30>)
 800e244:	f7fb ff48 	bl	800a0d8 <HAL_SD_WriteBlocks_DMA>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e252:	7dfb      	ldrb	r3, [r7, #23]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3718      	adds	r7, #24
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	2406ec9c 	.word	0x2406ec9c

0800e260 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e264:	4805      	ldr	r0, [pc, #20]	; (800e27c <BSP_SD_GetCardState+0x1c>)
 800e266:	f7fc fccf 	bl	800ac08 <HAL_SD_GetCardState>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b04      	cmp	r3, #4
 800e26e:	bf14      	ite	ne
 800e270:	2301      	movne	r3, #1
 800e272:	2300      	moveq	r3, #0
 800e274:	b2db      	uxtb	r3, r3
}
 800e276:	4618      	mov	r0, r3
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	2406ec9c 	.word	0x2406ec9c

0800e280 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e288:	6879      	ldr	r1, [r7, #4]
 800e28a:	4803      	ldr	r0, [pc, #12]	; (800e298 <BSP_SD_GetCardInfo+0x18>)
 800e28c:	f7fc fbe6 	bl	800aa5c <HAL_SD_GetCardInfo>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	2406ec9c 	.word	0x2406ec9c

0800e29c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e2a4:	f000 f9a0 	bl	800e5e8 <BSP_SD_WriteCpltCallback>
}
 800e2a8:	bf00      	nop
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e2b8:	f000 f9a4 	bl	800e604 <BSP_SD_ReadCpltCallback>
}
 800e2bc:	bf00      	nop
 800e2be:	3708      	adds	r7, #8
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	b2db      	uxtb	r3, r3
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	370c      	adds	r7, #12
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr

0800e2de <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e2e6:	f002 ffd9 	bl	801129c <osKernelSysTick>
 800e2ea:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e2ec:	e006      	b.n	800e2fc <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e2ee:	f7ff ffb7 	bl	800e260 <BSP_SD_GetCardState>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d101      	bne.n	800e2fc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e009      	b.n	800e310 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e2fc:	f002 ffce 	bl	801129c <osKernelSysTick>
 800e300:	4602      	mov	r2, r0
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	1ad3      	subs	r3, r2, r3
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d8f0      	bhi.n	800e2ee <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e30c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e322:	4b0b      	ldr	r3, [pc, #44]	; (800e350 <SD_CheckStatus+0x38>)
 800e324:	2201      	movs	r2, #1
 800e326:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e328:	f7ff ff9a 	bl	800e260 <BSP_SD_GetCardState>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d107      	bne.n	800e342 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e332:	4b07      	ldr	r3, [pc, #28]	; (800e350 <SD_CheckStatus+0x38>)
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f023 0301 	bic.w	r3, r3, #1
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	4b04      	ldr	r3, [pc, #16]	; (800e350 <SD_CheckStatus+0x38>)
 800e340:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e342:	4b03      	ldr	r3, [pc, #12]	; (800e350 <SD_CheckStatus+0x38>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	b2db      	uxtb	r3, r3
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	2400000d 	.word	0x2400000d

0800e354 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e354:	b590      	push	{r4, r7, lr}
 800e356:	b087      	sub	sp, #28
 800e358:	af00      	add	r7, sp, #0
 800e35a:	4603      	mov	r3, r0
 800e35c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e35e:	4b20      	ldr	r3, [pc, #128]	; (800e3e0 <SD_initialize+0x8c>)
 800e360:	2201      	movs	r2, #1
 800e362:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e364:	f002 ff8e 	bl	8011284 <osKernelRunning>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d030      	beq.n	800e3d0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e36e:	f7ff ff1d 	bl	800e1ac <BSP_SD_Init>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d107      	bne.n	800e388 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff ffcc 	bl	800e318 <SD_CheckStatus>
 800e380:	4603      	mov	r3, r0
 800e382:	461a      	mov	r2, r3
 800e384:	4b16      	ldr	r3, [pc, #88]	; (800e3e0 <SD_initialize+0x8c>)
 800e386:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e388:	4b15      	ldr	r3, [pc, #84]	; (800e3e0 <SD_initialize+0x8c>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d01e      	beq.n	800e3d0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e392:	4b14      	ldr	r3, [pc, #80]	; (800e3e4 <SD_initialize+0x90>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10e      	bne.n	800e3b8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e39a:	4b13      	ldr	r3, [pc, #76]	; (800e3e8 <SD_initialize+0x94>)
 800e39c:	f107 0408 	add.w	r4, r7, #8
 800e3a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e3a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e3a6:	f107 0308 	add.w	r3, r7, #8
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f003 fa28 	bl	8011802 <osMessageCreate>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <SD_initialize+0x90>)
 800e3b6:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e3b8:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <SD_initialize+0x90>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d107      	bne.n	800e3d0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e3c0:	4b07      	ldr	r3, [pc, #28]	; (800e3e0 <SD_initialize+0x8c>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	f043 0301 	orr.w	r3, r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	4b04      	ldr	r3, [pc, #16]	; (800e3e0 <SD_initialize+0x8c>)
 800e3ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e3d0:	4b03      	ldr	r3, [pc, #12]	; (800e3e0 <SD_initialize+0x8c>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	b2db      	uxtb	r3, r3
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd90      	pop	{r4, r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	2400000d 	.word	0x2400000d
 800e3e4:	24014900 	.word	0x24014900
 800e3e8:	08015424 	.word	0x08015424

0800e3ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7ff ff8d 	bl	800e318 <SD_CheckStatus>
 800e3fe:	4603      	mov	r3, r0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	607a      	str	r2, [r7, #4]
 800e412:	603b      	str	r3, [r7, #0]
 800e414:	4603      	mov	r3, r0
 800e416:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e418:	2301      	movs	r3, #1
 800e41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e41e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e422:	f7ff ff5c 	bl	800e2de <SD_CheckStatusWithTimeout>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	da02      	bge.n	800e432 <SD_read+0x2a>
  {
    return res;
 800e42c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e430:	e032      	b.n	800e498 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	68b8      	ldr	r0, [r7, #8]
 800e438:	f7ff fede 	bl	800e1f8 <BSP_SD_ReadBlocks_DMA>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e446:	2b00      	cmp	r3, #0
 800e448:	d124      	bne.n	800e494 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e44a:	4b15      	ldr	r3, [pc, #84]	; (800e4a0 <SD_read+0x98>)
 800e44c:	6819      	ldr	r1, [r3, #0]
 800e44e:	f107 0314 	add.w	r3, r7, #20
 800e452:	f247 5230 	movw	r2, #30000	; 0x7530
 800e456:	4618      	mov	r0, r3
 800e458:	f003 fa3c 	bl	80118d4 <osMessageGet>

    if (event.status == osEventMessage)
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2b10      	cmp	r3, #16
 800e460:	d118      	bne.n	800e494 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d115      	bne.n	800e494 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e468:	f002 ff18 	bl	801129c <osKernelSysTick>
 800e46c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e46e:	e008      	b.n	800e482 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e470:	f7ff fef6 	bl	800e260 <BSP_SD_GetCardState>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d103      	bne.n	800e482 <SD_read+0x7a>
              {
                res = RES_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e480:	e008      	b.n	800e494 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e482:	f002 ff0b 	bl	801129c <osKernelSysTick>
 800e486:	4602      	mov	r2, r0
 800e488:	6a3b      	ldr	r3, [r7, #32]
 800e48a:	1ad3      	subs	r3, r2, r3
 800e48c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e490:	4293      	cmp	r3, r2
 800e492:	d9ed      	bls.n	800e470 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3728      	adds	r7, #40	; 0x28
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	24014900 	.word	0x24014900

0800e4a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08a      	sub	sp, #40	; 0x28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60b9      	str	r1, [r7, #8]
 800e4ac:	607a      	str	r2, [r7, #4]
 800e4ae:	603b      	str	r3, [r7, #0]
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4ba:	f247 5030 	movw	r0, #30000	; 0x7530
 800e4be:	f7ff ff0e 	bl	800e2de <SD_CheckStatusWithTimeout>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	da02      	bge.n	800e4ce <SD_write+0x2a>
  {
    return res;
 800e4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4cc:	e02e      	b.n	800e52c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	6879      	ldr	r1, [r7, #4]
 800e4d2:	68b8      	ldr	r0, [r7, #8]
 800e4d4:	f7ff feaa 	bl	800e22c <BSP_SD_WriteBlocks_DMA>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d124      	bne.n	800e528 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e4de:	4b15      	ldr	r3, [pc, #84]	; (800e534 <SD_write+0x90>)
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	f107 0314 	add.w	r3, r7, #20
 800e4e6:	f247 5230 	movw	r2, #30000	; 0x7530
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f003 f9f2 	bl	80118d4 <osMessageGet>

    if (event.status == osEventMessage)
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b10      	cmp	r3, #16
 800e4f4:	d118      	bne.n	800e528 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	2b02      	cmp	r3, #2
 800e4fa:	d115      	bne.n	800e528 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e4fc:	f002 fece 	bl	801129c <osKernelSysTick>
 800e500:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e502:	e008      	b.n	800e516 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e504:	f7ff feac 	bl	800e260 <BSP_SD_GetCardState>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d103      	bne.n	800e516 <SD_write+0x72>
          {
            res = RES_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e514:	e008      	b.n	800e528 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e516:	f002 fec1 	bl	801129c <osKernelSysTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	f247 522f 	movw	r2, #29999	; 0x752f
 800e524:	4293      	cmp	r3, r2
 800e526:	d9ed      	bls.n	800e504 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3728      	adds	r7, #40	; 0x28
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	24014900 	.word	0x24014900

0800e538 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b08c      	sub	sp, #48	; 0x30
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	4603      	mov	r3, r0
 800e540:	603a      	str	r2, [r7, #0]
 800e542:	71fb      	strb	r3, [r7, #7]
 800e544:	460b      	mov	r3, r1
 800e546:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e54e:	4b25      	ldr	r3, [pc, #148]	; (800e5e4 <SD_ioctl+0xac>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f003 0301 	and.w	r3, r3, #1
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <SD_ioctl+0x28>
 800e55c:	2303      	movs	r3, #3
 800e55e:	e03c      	b.n	800e5da <SD_ioctl+0xa2>

  switch (cmd)
 800e560:	79bb      	ldrb	r3, [r7, #6]
 800e562:	2b03      	cmp	r3, #3
 800e564:	d834      	bhi.n	800e5d0 <SD_ioctl+0x98>
 800e566:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <SD_ioctl+0x34>)
 800e568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56c:	0800e57d 	.word	0x0800e57d
 800e570:	0800e585 	.word	0x0800e585
 800e574:	0800e59d 	.word	0x0800e59d
 800e578:	0800e5b7 	.word	0x0800e5b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e582:	e028      	b.n	800e5d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e584:	f107 0308 	add.w	r3, r7, #8
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff fe79 	bl	800e280 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e58e:	6a3a      	ldr	r2, [r7, #32]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e59a:	e01c      	b.n	800e5d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e59c:	f107 0308 	add.w	r3, r7, #8
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff fe6d 	bl	800e280 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5b4:	e00f      	b.n	800e5d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e5b6:	f107 0308 	add.w	r3, r7, #8
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7ff fe60 	bl	800e280 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	0a5a      	lsrs	r2, r3, #9
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e5ce:	e002      	b.n	800e5d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e5d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3730      	adds	r7, #48	; 0x30
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	2400000d 	.word	0x2400000d

0800e5e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e5ec:	4b04      	ldr	r3, [pc, #16]	; (800e600 <BSP_SD_WriteCpltCallback+0x18>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	2102      	movs	r1, #2
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f003 f92d 	bl	8011854 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e5fa:	bf00      	nop
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	24014900 	.word	0x24014900

0800e604 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e608:	4b04      	ldr	r3, [pc, #16]	; (800e61c <BSP_SD_ReadCpltCallback+0x18>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2200      	movs	r2, #0
 800e60e:	2101      	movs	r1, #1
 800e610:	4618      	mov	r0, r3
 800e612:	f003 f91f 	bl	8011854 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e616:	bf00      	nop
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	24014900 	.word	0x24014900

0800e620 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	4603      	mov	r3, r0
 800e628:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e62a:	79fb      	ldrb	r3, [r7, #7]
 800e62c:	4a08      	ldr	r2, [pc, #32]	; (800e650 <disk_status+0x30>)
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	79fa      	ldrb	r2, [r7, #7]
 800e638:	4905      	ldr	r1, [pc, #20]	; (800e650 <disk_status+0x30>)
 800e63a:	440a      	add	r2, r1
 800e63c:	7a12      	ldrb	r2, [r2, #8]
 800e63e:	4610      	mov	r0, r2
 800e640:	4798      	blx	r3
 800e642:	4603      	mov	r3, r0
 800e644:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e646:	7bfb      	ldrb	r3, [r7, #15]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	2401492c 	.word	0x2401492c

0800e654 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	4603      	mov	r3, r0
 800e65c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	4a0d      	ldr	r2, [pc, #52]	; (800e69c <disk_initialize+0x48>)
 800e666:	5cd3      	ldrb	r3, [r2, r3]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d111      	bne.n	800e690 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e66c:	79fb      	ldrb	r3, [r7, #7]
 800e66e:	4a0b      	ldr	r2, [pc, #44]	; (800e69c <disk_initialize+0x48>)
 800e670:	2101      	movs	r1, #1
 800e672:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	4a09      	ldr	r2, [pc, #36]	; (800e69c <disk_initialize+0x48>)
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	79fa      	ldrb	r2, [r7, #7]
 800e682:	4906      	ldr	r1, [pc, #24]	; (800e69c <disk_initialize+0x48>)
 800e684:	440a      	add	r2, r1
 800e686:	7a12      	ldrb	r2, [r2, #8]
 800e688:	4610      	mov	r0, r2
 800e68a:	4798      	blx	r3
 800e68c:	4603      	mov	r3, r0
 800e68e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	2401492c 	.word	0x2401492c

0800e6a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e6a0:	b590      	push	{r4, r7, lr}
 800e6a2:	b087      	sub	sp, #28
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	607a      	str	r2, [r7, #4]
 800e6aa:	603b      	str	r3, [r7, #0]
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
 800e6b2:	4a0a      	ldr	r2, [pc, #40]	; (800e6dc <disk_read+0x3c>)
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	689c      	ldr	r4, [r3, #8]
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	4a07      	ldr	r2, [pc, #28]	; (800e6dc <disk_read+0x3c>)
 800e6c0:	4413      	add	r3, r2
 800e6c2:	7a18      	ldrb	r0, [r3, #8]
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	47a0      	blx	r4
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	371c      	adds	r7, #28
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd90      	pop	{r4, r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2401492c 	.word	0x2401492c

0800e6e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e6e0:	b590      	push	{r4, r7, lr}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60b9      	str	r1, [r7, #8]
 800e6e8:	607a      	str	r2, [r7, #4]
 800e6ea:	603b      	str	r3, [r7, #0]
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
 800e6f2:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <disk_write+0x3c>)
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	68dc      	ldr	r4, [r3, #12]
 800e6fc:	7bfb      	ldrb	r3, [r7, #15]
 800e6fe:	4a07      	ldr	r2, [pc, #28]	; (800e71c <disk_write+0x3c>)
 800e700:	4413      	add	r3, r2
 800e702:	7a18      	ldrb	r0, [r3, #8]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	68b9      	ldr	r1, [r7, #8]
 800e70a:	47a0      	blx	r4
 800e70c:	4603      	mov	r3, r0
 800e70e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e710:	7dfb      	ldrb	r3, [r7, #23]
}
 800e712:	4618      	mov	r0, r3
 800e714:	371c      	adds	r7, #28
 800e716:	46bd      	mov	sp, r7
 800e718:	bd90      	pop	{r4, r7, pc}
 800e71a:	bf00      	nop
 800e71c:	2401492c 	.word	0x2401492c

0800e720 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	4603      	mov	r3, r0
 800e728:	603a      	str	r2, [r7, #0]
 800e72a:	71fb      	strb	r3, [r7, #7]
 800e72c:	460b      	mov	r3, r1
 800e72e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e730:	79fb      	ldrb	r3, [r7, #7]
 800e732:	4a09      	ldr	r2, [pc, #36]	; (800e758 <disk_ioctl+0x38>)
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	691b      	ldr	r3, [r3, #16]
 800e73c:	79fa      	ldrb	r2, [r7, #7]
 800e73e:	4906      	ldr	r1, [pc, #24]	; (800e758 <disk_ioctl+0x38>)
 800e740:	440a      	add	r2, r1
 800e742:	7a10      	ldrb	r0, [r2, #8]
 800e744:	79b9      	ldrb	r1, [r7, #6]
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	4798      	blx	r3
 800e74a:	4603      	mov	r3, r0
 800e74c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e750:	4618      	mov	r0, r3
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	2401492c 	.word	0x2401492c

0800e75c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	3301      	adds	r3, #1
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e76c:	89fb      	ldrh	r3, [r7, #14]
 800e76e:	021b      	lsls	r3, r3, #8
 800e770:	b21a      	sxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	b21b      	sxth	r3, r3
 800e778:	4313      	orrs	r3, r2
 800e77a:	b21b      	sxth	r3, r3
 800e77c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e77e:	89fb      	ldrh	r3, [r7, #14]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3303      	adds	r3, #3
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	021b      	lsls	r3, r3, #8
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	3202      	adds	r2, #2
 800e7a4:	7812      	ldrb	r2, [r2, #0]
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	021b      	lsls	r3, r3, #8
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	3201      	adds	r2, #1
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	021b      	lsls	r3, r3, #8
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	7812      	ldrb	r2, [r2, #0]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	460b      	mov	r3, r1
 800e7dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	1c5a      	adds	r2, r3, #1
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	887a      	ldrh	r2, [r7, #2]
 800e7e6:	b2d2      	uxtb	r2, r2
 800e7e8:	701a      	strb	r2, [r3, #0]
 800e7ea:	887b      	ldrh	r3, [r7, #2]
 800e7ec:	0a1b      	lsrs	r3, r3, #8
 800e7ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	607a      	str	r2, [r7, #4]
 800e7f6:	887a      	ldrh	r2, [r7, #2]
 800e7f8:	b2d2      	uxtb	r2, r2
 800e7fa:	701a      	strb	r2, [r3, #0]
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	1c5a      	adds	r2, r3, #1
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	b2d2      	uxtb	r2, r2
 800e81c:	701a      	strb	r2, [r3, #0]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	0a1b      	lsrs	r3, r3, #8
 800e822:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	607a      	str	r2, [r7, #4]
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	b2d2      	uxtb	r2, r2
 800e82e:	701a      	strb	r2, [r3, #0]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	0a1b      	lsrs	r3, r3, #8
 800e834:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	607a      	str	r2, [r7, #4]
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	b2d2      	uxtb	r2, r2
 800e840:	701a      	strb	r2, [r3, #0]
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	0a1b      	lsrs	r3, r3, #8
 800e846:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	1c5a      	adds	r2, r3, #1
 800e84c:	607a      	str	r2, [r7, #4]
 800e84e:	683a      	ldr	r2, [r7, #0]
 800e850:	b2d2      	uxtb	r2, r2
 800e852:	701a      	strb	r2, [r3, #0]
}
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e860:	b480      	push	{r7}
 800e862:	b087      	sub	sp, #28
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00d      	beq.n	800e896 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e87a:	693a      	ldr	r2, [r7, #16]
 800e87c:	1c53      	adds	r3, r2, #1
 800e87e:	613b      	str	r3, [r7, #16]
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	1c59      	adds	r1, r3, #1
 800e884:	6179      	str	r1, [r7, #20]
 800e886:	7812      	ldrb	r2, [r2, #0]
 800e888:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3b01      	subs	r3, #1
 800e88e:	607b      	str	r3, [r7, #4]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d1f1      	bne.n	800e87a <mem_cpy+0x1a>
	}
}
 800e896:	bf00      	nop
 800e898:	371c      	adds	r7, #28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e8a2:	b480      	push	{r7}
 800e8a4:	b087      	sub	sp, #28
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	1c5a      	adds	r2, r3, #1
 800e8b6:	617a      	str	r2, [r7, #20]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	b2d2      	uxtb	r2, r2
 800e8bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	607b      	str	r3, [r7, #4]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1f3      	bne.n	800e8b2 <mem_set+0x10>
}
 800e8ca:	bf00      	nop
 800e8cc:	371c      	adds	r7, #28
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e8d6:	b480      	push	{r7}
 800e8d8:	b089      	sub	sp, #36	; 0x24
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	61fb      	str	r3, [r7, #28]
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	61fa      	str	r2, [r7, #28]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	1c5a      	adds	r2, r3, #1
 800e8fc:	61ba      	str	r2, [r7, #24]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	1acb      	subs	r3, r1, r3
 800e902:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	3b01      	subs	r3, #1
 800e908:	607b      	str	r3, [r7, #4]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <mem_cmp+0x40>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d0eb      	beq.n	800e8ee <mem_cmp+0x18>

	return r;
 800e916:	697b      	ldr	r3, [r7, #20]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3724      	adds	r7, #36	; 0x24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e92e:	e002      	b.n	800e936 <chk_chr+0x12>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3301      	adds	r3, #1
 800e934:	607b      	str	r3, [r7, #4]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d005      	beq.n	800e94a <chk_chr+0x26>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	4293      	cmp	r3, r2
 800e948:	d1f2      	bne.n	800e930 <chk_chr+0xc>
	return *str;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	781b      	ldrb	r3, [r3, #0]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	370c      	adds	r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr

0800e95a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b082      	sub	sp, #8
 800e95e:	af00      	add	r7, sp, #0
 800e960:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d009      	beq.n	800e97c <lock_fs+0x22>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f002 fc38 	bl	80111e2 <ff_req_grant>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <lock_fs+0x22>
 800e978:	2301      	movs	r3, #1
 800e97a:	e000      	b.n	800e97e <lock_fs+0x24>
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	460b      	mov	r3, r1
 800e990:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00d      	beq.n	800e9b4 <unlock_fs+0x2e>
 800e998:	78fb      	ldrb	r3, [r7, #3]
 800e99a:	2b0c      	cmp	r3, #12
 800e99c:	d00a      	beq.n	800e9b4 <unlock_fs+0x2e>
 800e99e:	78fb      	ldrb	r3, [r7, #3]
 800e9a0:	2b0b      	cmp	r3, #11
 800e9a2:	d007      	beq.n	800e9b4 <unlock_fs+0x2e>
 800e9a4:	78fb      	ldrb	r3, [r7, #3]
 800e9a6:	2b0f      	cmp	r3, #15
 800e9a8:	d004      	beq.n	800e9b4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f002 fc2c 	bl	801120c <ff_rel_grant>
	}
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60bb      	str	r3, [r7, #8]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	e029      	b.n	800ea24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e9d0:	4a27      	ldr	r2, [pc, #156]	; (800ea70 <chk_lock+0xb4>)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	011b      	lsls	r3, r3, #4
 800e9d6:	4413      	add	r3, r2
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d01d      	beq.n	800ea1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e9de:	4a24      	ldr	r2, [pc, #144]	; (800ea70 <chk_lock+0xb4>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	4413      	add	r3, r2
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d116      	bne.n	800ea1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e9f0:	4a1f      	ldr	r2, [pc, #124]	; (800ea70 <chk_lock+0xb4>)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	011b      	lsls	r3, r3, #4
 800e9f6:	4413      	add	r3, r2
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d10c      	bne.n	800ea1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea04:	4a1a      	ldr	r2, [pc, #104]	; (800ea70 <chk_lock+0xb4>)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	011b      	lsls	r3, r3, #4
 800ea0a:	4413      	add	r3, r2
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d102      	bne.n	800ea1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea18:	e007      	b.n	800ea2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	3301      	adds	r3, #1
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d9d2      	bls.n	800e9d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d109      	bne.n	800ea44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d102      	bne.n	800ea3c <chk_lock+0x80>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d101      	bne.n	800ea40 <chk_lock+0x84>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	e010      	b.n	800ea62 <chk_lock+0xa6>
 800ea40:	2312      	movs	r3, #18
 800ea42:	e00e      	b.n	800ea62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d108      	bne.n	800ea5c <chk_lock+0xa0>
 800ea4a:	4a09      	ldr	r2, [pc, #36]	; (800ea70 <chk_lock+0xb4>)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	011b      	lsls	r3, r3, #4
 800ea50:	4413      	add	r3, r2
 800ea52:	330c      	adds	r3, #12
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea5a:	d101      	bne.n	800ea60 <chk_lock+0xa4>
 800ea5c:	2310      	movs	r3, #16
 800ea5e:	e000      	b.n	800ea62 <chk_lock+0xa6>
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	2401490c 	.word	0x2401490c

0800ea74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	607b      	str	r3, [r7, #4]
 800ea7e:	e002      	b.n	800ea86 <enq_lock+0x12>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	3301      	adds	r3, #1
 800ea84:	607b      	str	r3, [r7, #4]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d806      	bhi.n	800ea9a <enq_lock+0x26>
 800ea8c:	4a09      	ldr	r2, [pc, #36]	; (800eab4 <enq_lock+0x40>)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	011b      	lsls	r3, r3, #4
 800ea92:	4413      	add	r3, r2
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1f2      	bne.n	800ea80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	bf14      	ite	ne
 800eaa0:	2301      	movne	r3, #1
 800eaa2:	2300      	moveq	r3, #0
 800eaa4:	b2db      	uxtb	r3, r3
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	2401490c 	.word	0x2401490c

0800eab8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eac2:	2300      	movs	r3, #0
 800eac4:	60fb      	str	r3, [r7, #12]
 800eac6:	e01f      	b.n	800eb08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eac8:	4a41      	ldr	r2, [pc, #260]	; (800ebd0 <inc_lock+0x118>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	011b      	lsls	r3, r3, #4
 800eace:	4413      	add	r3, r2
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d113      	bne.n	800eb02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eada:	4a3d      	ldr	r2, [pc, #244]	; (800ebd0 <inc_lock+0x118>)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	011b      	lsls	r3, r3, #4
 800eae0:	4413      	add	r3, r2
 800eae2:	3304      	adds	r3, #4
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d109      	bne.n	800eb02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eaee:	4a38      	ldr	r2, [pc, #224]	; (800ebd0 <inc_lock+0x118>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	011b      	lsls	r3, r3, #4
 800eaf4:	4413      	add	r3, r2
 800eaf6:	3308      	adds	r3, #8
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d006      	beq.n	800eb10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	3301      	adds	r3, #1
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d9dc      	bls.n	800eac8 <inc_lock+0x10>
 800eb0e:	e000      	b.n	800eb12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eb10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d132      	bne.n	800eb7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60fb      	str	r3, [r7, #12]
 800eb1c:	e002      	b.n	800eb24 <inc_lock+0x6c>
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3301      	adds	r3, #1
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d806      	bhi.n	800eb38 <inc_lock+0x80>
 800eb2a:	4a29      	ldr	r2, [pc, #164]	; (800ebd0 <inc_lock+0x118>)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	011b      	lsls	r3, r3, #4
 800eb30:	4413      	add	r3, r2
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1f2      	bne.n	800eb1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d101      	bne.n	800eb42 <inc_lock+0x8a>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e040      	b.n	800ebc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	4922      	ldr	r1, [pc, #136]	; (800ebd0 <inc_lock+0x118>)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	011b      	lsls	r3, r3, #4
 800eb4c:	440b      	add	r3, r1
 800eb4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	689a      	ldr	r2, [r3, #8]
 800eb54:	491e      	ldr	r1, [pc, #120]	; (800ebd0 <inc_lock+0x118>)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	440b      	add	r3, r1
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	695a      	ldr	r2, [r3, #20]
 800eb64:	491a      	ldr	r1, [pc, #104]	; (800ebd0 <inc_lock+0x118>)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	011b      	lsls	r3, r3, #4
 800eb6a:	440b      	add	r3, r1
 800eb6c:	3308      	adds	r3, #8
 800eb6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eb70:	4a17      	ldr	r2, [pc, #92]	; (800ebd0 <inc_lock+0x118>)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	011b      	lsls	r3, r3, #4
 800eb76:	4413      	add	r3, r2
 800eb78:	330c      	adds	r3, #12
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d009      	beq.n	800eb98 <inc_lock+0xe0>
 800eb84:	4a12      	ldr	r2, [pc, #72]	; (800ebd0 <inc_lock+0x118>)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	011b      	lsls	r3, r3, #4
 800eb8a:	4413      	add	r3, r2
 800eb8c:	330c      	adds	r3, #12
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <inc_lock+0xe0>
 800eb94:	2300      	movs	r3, #0
 800eb96:	e015      	b.n	800ebc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d108      	bne.n	800ebb0 <inc_lock+0xf8>
 800eb9e:	4a0c      	ldr	r2, [pc, #48]	; (800ebd0 <inc_lock+0x118>)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	011b      	lsls	r3, r3, #4
 800eba4:	4413      	add	r3, r2
 800eba6:	330c      	adds	r3, #12
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	e001      	b.n	800ebb4 <inc_lock+0xfc>
 800ebb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebb4:	4906      	ldr	r1, [pc, #24]	; (800ebd0 <inc_lock+0x118>)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	011b      	lsls	r3, r3, #4
 800ebba:	440b      	add	r3, r1
 800ebbc:	330c      	adds	r3, #12
 800ebbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	3301      	adds	r3, #1
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	2401490c 	.word	0x2401490c

0800ebd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	607b      	str	r3, [r7, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d825      	bhi.n	800ec34 <dec_lock+0x60>
		n = Files[i].ctr;
 800ebe8:	4a17      	ldr	r2, [pc, #92]	; (800ec48 <dec_lock+0x74>)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	011b      	lsls	r3, r3, #4
 800ebee:	4413      	add	r3, r2
 800ebf0:	330c      	adds	r3, #12
 800ebf2:	881b      	ldrh	r3, [r3, #0]
 800ebf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ebf6:	89fb      	ldrh	r3, [r7, #14]
 800ebf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebfc:	d101      	bne.n	800ec02 <dec_lock+0x2e>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ec02:	89fb      	ldrh	r3, [r7, #14]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <dec_lock+0x3a>
 800ec08:	89fb      	ldrh	r3, [r7, #14]
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ec0e:	4a0e      	ldr	r2, [pc, #56]	; (800ec48 <dec_lock+0x74>)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	011b      	lsls	r3, r3, #4
 800ec14:	4413      	add	r3, r2
 800ec16:	330c      	adds	r3, #12
 800ec18:	89fa      	ldrh	r2, [r7, #14]
 800ec1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ec1c:	89fb      	ldrh	r3, [r7, #14]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d105      	bne.n	800ec2e <dec_lock+0x5a>
 800ec22:	4a09      	ldr	r2, [pc, #36]	; (800ec48 <dec_lock+0x74>)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	011b      	lsls	r3, r3, #4
 800ec28:	4413      	add	r3, r2
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	737b      	strb	r3, [r7, #13]
 800ec32:	e001      	b.n	800ec38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ec34:	2302      	movs	r3, #2
 800ec36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ec38:	7b7b      	ldrb	r3, [r7, #13]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	2401490c 	.word	0x2401490c

0800ec4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ec54:	2300      	movs	r3, #0
 800ec56:	60fb      	str	r3, [r7, #12]
 800ec58:	e010      	b.n	800ec7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec5a:	4a0d      	ldr	r2, [pc, #52]	; (800ec90 <clear_lock+0x44>)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	011b      	lsls	r3, r3, #4
 800ec60:	4413      	add	r3, r2
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d105      	bne.n	800ec76 <clear_lock+0x2a>
 800ec6a:	4a09      	ldr	r2, [pc, #36]	; (800ec90 <clear_lock+0x44>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	011b      	lsls	r3, r3, #4
 800ec70:	4413      	add	r3, r2
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d9eb      	bls.n	800ec5a <clear_lock+0xe>
	}
}
 800ec82:	bf00      	nop
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	2401490c 	.word	0x2401490c

0800ec94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	78db      	ldrb	r3, [r3, #3]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d034      	beq.n	800ed12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	7858      	ldrb	r0, [r3, #1]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecb8:	2301      	movs	r3, #1
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	f7ff fd10 	bl	800e6e0 <disk_write>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <sync_window+0x38>
			res = FR_DISK_ERR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	73fb      	strb	r3, [r7, #15]
 800ecca:	e022      	b.n	800ed12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	1ad2      	subs	r2, r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d217      	bcs.n	800ed12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	789b      	ldrb	r3, [r3, #2]
 800ece6:	613b      	str	r3, [r7, #16]
 800ece8:	e010      	b.n	800ed0c <sync_window+0x78>
					wsect += fs->fsize;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	7858      	ldrb	r0, [r3, #1]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecfe:	2301      	movs	r3, #1
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	f7ff fced 	bl	800e6e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	613b      	str	r3, [r7, #16]
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d8eb      	bhi.n	800ecea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d01b      	beq.n	800ed6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7ff ffad 	bl	800ec94 <sync_window>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d113      	bne.n	800ed6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7858      	ldrb	r0, [r3, #1]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed4e:	2301      	movs	r3, #1
 800ed50:	683a      	ldr	r2, [r7, #0]
 800ed52:	f7ff fca5 	bl	800e6a0 <disk_read>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d004      	beq.n	800ed66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ed6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
	...

0800ed78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7ff ff87 	bl	800ec94 <sync_window>
 800ed86:	4603      	mov	r3, r0
 800ed88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ed8a:	7bfb      	ldrb	r3, [r7, #15]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d159      	bne.n	800ee44 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d149      	bne.n	800ee2c <sync_fs+0xb4>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	791b      	ldrb	r3, [r3, #4]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d145      	bne.n	800ee2c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	899b      	ldrh	r3, [r3, #12]
 800edaa:	461a      	mov	r2, r3
 800edac:	2100      	movs	r1, #0
 800edae:	f7ff fd78 	bl	800e8a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	3338      	adds	r3, #56	; 0x38
 800edb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fd07 	bl	800e7d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	3338      	adds	r3, #56	; 0x38
 800edc8:	4921      	ldr	r1, [pc, #132]	; (800ee50 <sync_fs+0xd8>)
 800edca:	4618      	mov	r0, r3
 800edcc:	f7ff fd1c 	bl	800e808 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	3338      	adds	r3, #56	; 0x38
 800edd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800edd8:	491e      	ldr	r1, [pc, #120]	; (800ee54 <sync_fs+0xdc>)
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff fd14 	bl	800e808 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3338      	adds	r3, #56	; 0x38
 800ede4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	4619      	mov	r1, r3
 800edee:	4610      	mov	r0, r2
 800edf0:	f7ff fd0a 	bl	800e808 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	3338      	adds	r3, #56	; 0x38
 800edf8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	695b      	ldr	r3, [r3, #20]
 800ee00:	4619      	mov	r1, r3
 800ee02:	4610      	mov	r0, r2
 800ee04:	f7ff fd00 	bl	800e808 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	7858      	ldrb	r0, [r3, #1]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee20:	2301      	movs	r3, #1
 800ee22:	f7ff fc5d 	bl	800e6e0 <disk_write>
			fs->fsi_flag = 0;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	785b      	ldrb	r3, [r3, #1]
 800ee30:	2200      	movs	r2, #0
 800ee32:	2100      	movs	r1, #0
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7ff fc73 	bl	800e720 <disk_ioctl>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <sync_fs+0xcc>
 800ee40:	2301      	movs	r3, #1
 800ee42:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	41615252 	.word	0x41615252
 800ee54:	61417272 	.word	0x61417272

0800ee58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	3b02      	subs	r3, #2
 800ee66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	3b02      	subs	r3, #2
 800ee6e:	683a      	ldr	r2, [r7, #0]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d301      	bcc.n	800ee78 <clust2sect+0x20>
 800ee74:	2300      	movs	r3, #0
 800ee76:	e008      	b.n	800ee8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	895b      	ldrh	r3, [r3, #10]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	fb03 f202 	mul.w	r2, r3, r2
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee88:	4413      	add	r3, r2
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr

0800ee96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b086      	sub	sp, #24
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d904      	bls.n	800eeb6 <get_fat+0x20>
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	69db      	ldr	r3, [r3, #28]
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d302      	bcc.n	800eebc <get_fat+0x26>
		val = 1;	/* Internal error */
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	e0b7      	b.n	800f02c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eebc:	f04f 33ff 	mov.w	r3, #4294967295
 800eec0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	d05a      	beq.n	800ef80 <get_fat+0xea>
 800eeca:	2b03      	cmp	r3, #3
 800eecc:	d07d      	beq.n	800efca <get_fat+0x134>
 800eece:	2b01      	cmp	r3, #1
 800eed0:	f040 80a2 	bne.w	800f018 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	085b      	lsrs	r3, r3, #1
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	4413      	add	r3, r2
 800eee0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	899b      	ldrh	r3, [r3, #12]
 800eeea:	4619      	mov	r1, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	fbb3 f3f1 	udiv	r3, r3, r1
 800eef2:	4413      	add	r3, r2
 800eef4:	4619      	mov	r1, r3
 800eef6:	6938      	ldr	r0, [r7, #16]
 800eef8:	f7ff ff10 	bl	800ed1c <move_window>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f040 808d 	bne.w	800f01e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	60fa      	str	r2, [r7, #12]
 800ef0a:	693a      	ldr	r2, [r7, #16]
 800ef0c:	8992      	ldrh	r2, [r2, #12]
 800ef0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef12:	fb02 f201 	mul.w	r2, r2, r1
 800ef16:	1a9b      	subs	r3, r3, r2
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	899b      	ldrh	r3, [r3, #12]
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef32:	4413      	add	r3, r2
 800ef34:	4619      	mov	r1, r3
 800ef36:	6938      	ldr	r0, [r7, #16]
 800ef38:	f7ff fef0 	bl	800ed1c <move_window>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d16f      	bne.n	800f022 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	899b      	ldrh	r3, [r3, #12]
 800ef46:	461a      	mov	r2, r3
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef4e:	fb02 f201 	mul.w	r2, r2, r1
 800ef52:	1a9b      	subs	r3, r3, r2
 800ef54:	693a      	ldr	r2, [r7, #16]
 800ef56:	4413      	add	r3, r2
 800ef58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef5c:	021b      	lsls	r3, r3, #8
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	f003 0301 	and.w	r3, r3, #1
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d002      	beq.n	800ef76 <get_fat+0xe0>
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	091b      	lsrs	r3, r3, #4
 800ef74:	e002      	b.n	800ef7c <get_fat+0xe6>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef7c:	617b      	str	r3, [r7, #20]
			break;
 800ef7e:	e055      	b.n	800f02c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	899b      	ldrh	r3, [r3, #12]
 800ef88:	085b      	lsrs	r3, r3, #1
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef94:	4413      	add	r3, r2
 800ef96:	4619      	mov	r1, r3
 800ef98:	6938      	ldr	r0, [r7, #16]
 800ef9a:	f7ff febf 	bl	800ed1c <move_window>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d140      	bne.n	800f026 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	005b      	lsls	r3, r3, #1
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	8992      	ldrh	r2, [r2, #12]
 800efb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800efb6:	fb02 f200 	mul.w	r2, r2, r0
 800efba:	1a9b      	subs	r3, r3, r2
 800efbc:	440b      	add	r3, r1
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff fbcc 	bl	800e75c <ld_word>
 800efc4:	4603      	mov	r3, r0
 800efc6:	617b      	str	r3, [r7, #20]
			break;
 800efc8:	e030      	b.n	800f02c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	899b      	ldrh	r3, [r3, #12]
 800efd2:	089b      	lsrs	r3, r3, #2
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	4619      	mov	r1, r3
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	fbb3 f3f1 	udiv	r3, r3, r1
 800efde:	4413      	add	r3, r2
 800efe0:	4619      	mov	r1, r3
 800efe2:	6938      	ldr	r0, [r7, #16]
 800efe4:	f7ff fe9a 	bl	800ed1c <move_window>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d11d      	bne.n	800f02a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	8992      	ldrh	r2, [r2, #12]
 800effc:	fbb3 f0f2 	udiv	r0, r3, r2
 800f000:	fb02 f200 	mul.w	r2, r2, r0
 800f004:	1a9b      	subs	r3, r3, r2
 800f006:	440b      	add	r3, r1
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff fbbf 	bl	800e78c <ld_dword>
 800f00e:	4603      	mov	r3, r0
 800f010:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f014:	617b      	str	r3, [r7, #20]
			break;
 800f016:	e009      	b.n	800f02c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f018:	2301      	movs	r3, #1
 800f01a:	617b      	str	r3, [r7, #20]
 800f01c:	e006      	b.n	800f02c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f01e:	bf00      	nop
 800f020:	e004      	b.n	800f02c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f022:	bf00      	nop
 800f024:	e002      	b.n	800f02c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f026:	bf00      	nop
 800f028:	e000      	b.n	800f02c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f02a:	bf00      	nop
		}
	}

	return val;
 800f02c:	697b      	ldr	r3, [r7, #20]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f036:	b590      	push	{r4, r7, lr}
 800f038:	b089      	sub	sp, #36	; 0x24
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	60f8      	str	r0, [r7, #12]
 800f03e:	60b9      	str	r1, [r7, #8]
 800f040:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f042:	2302      	movs	r3, #2
 800f044:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	f240 8106 	bls.w	800f25a <put_fat+0x224>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	69db      	ldr	r3, [r3, #28]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	429a      	cmp	r2, r3
 800f056:	f080 8100 	bcs.w	800f25a <put_fat+0x224>
		switch (fs->fs_type) {
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	2b02      	cmp	r3, #2
 800f060:	f000 8088 	beq.w	800f174 <put_fat+0x13e>
 800f064:	2b03      	cmp	r3, #3
 800f066:	f000 80b0 	beq.w	800f1ca <put_fat+0x194>
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	f040 80f5 	bne.w	800f25a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	61bb      	str	r3, [r7, #24]
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	085b      	lsrs	r3, r3, #1
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	4413      	add	r3, r2
 800f07c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	899b      	ldrh	r3, [r3, #12]
 800f086:	4619      	mov	r1, r3
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f08e:	4413      	add	r3, r2
 800f090:	4619      	mov	r1, r3
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f7ff fe42 	bl	800ed1c <move_window>
 800f098:	4603      	mov	r3, r0
 800f09a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f09c:	7ffb      	ldrb	r3, [r7, #31]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f040 80d4 	bne.w	800f24c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	1c5a      	adds	r2, r3, #1
 800f0ae:	61ba      	str	r2, [r7, #24]
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	8992      	ldrh	r2, [r2, #12]
 800f0b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0b8:	fb02 f200 	mul.w	r2, r2, r0
 800f0bc:	1a9b      	subs	r3, r3, r2
 800f0be:	440b      	add	r3, r1
 800f0c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	f003 0301 	and.w	r3, r3, #1
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00d      	beq.n	800f0e8 <put_fat+0xb2>
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	b25b      	sxtb	r3, r3
 800f0d2:	f003 030f 	and.w	r3, r3, #15
 800f0d6:	b25a      	sxtb	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	011b      	lsls	r3, r3, #4
 800f0de:	b25b      	sxtb	r3, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	b25b      	sxtb	r3, r3
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	e001      	b.n	800f0ec <put_fat+0xb6>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	697a      	ldr	r2, [r7, #20]
 800f0ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	899b      	ldrh	r3, [r3, #12]
 800f0fe:	4619      	mov	r1, r3
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	fbb3 f3f1 	udiv	r3, r3, r1
 800f106:	4413      	add	r3, r2
 800f108:	4619      	mov	r1, r3
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f7ff fe06 	bl	800ed1c <move_window>
 800f110:	4603      	mov	r3, r0
 800f112:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f114:	7ffb      	ldrb	r3, [r7, #31]
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 809a 	bne.w	800f250 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	899b      	ldrh	r3, [r3, #12]
 800f126:	461a      	mov	r2, r3
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f12e:	fb02 f200 	mul.w	r2, r2, r0
 800f132:	1a9b      	subs	r3, r3, r2
 800f134:	440b      	add	r3, r1
 800f136:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <put_fat+0x114>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	091b      	lsrs	r3, r3, #4
 800f146:	b2db      	uxtb	r3, r3
 800f148:	e00e      	b.n	800f168 <put_fat+0x132>
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	b25b      	sxtb	r3, r3
 800f150:	f023 030f 	bic.w	r3, r3, #15
 800f154:	b25a      	sxtb	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	0a1b      	lsrs	r3, r3, #8
 800f15a:	b25b      	sxtb	r3, r3
 800f15c:	f003 030f 	and.w	r3, r3, #15
 800f160:	b25b      	sxtb	r3, r3
 800f162:	4313      	orrs	r3, r2
 800f164:	b25b      	sxtb	r3, r3
 800f166:	b2db      	uxtb	r3, r3
 800f168:	697a      	ldr	r2, [r7, #20]
 800f16a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2201      	movs	r2, #1
 800f170:	70da      	strb	r2, [r3, #3]
			break;
 800f172:	e072      	b.n	800f25a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	899b      	ldrh	r3, [r3, #12]
 800f17c:	085b      	lsrs	r3, r3, #1
 800f17e:	b29b      	uxth	r3, r3
 800f180:	4619      	mov	r1, r3
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	fbb3 f3f1 	udiv	r3, r3, r1
 800f188:	4413      	add	r3, r2
 800f18a:	4619      	mov	r1, r3
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f7ff fdc5 	bl	800ed1c <move_window>
 800f192:	4603      	mov	r3, r0
 800f194:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f196:	7ffb      	ldrb	r3, [r7, #31]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d15b      	bne.n	800f254 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	8992      	ldrh	r2, [r2, #12]
 800f1aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1ae:	fb02 f200 	mul.w	r2, r2, r0
 800f1b2:	1a9b      	subs	r3, r3, r2
 800f1b4:	440b      	add	r3, r1
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7ff fb08 	bl	800e7d2 <st_word>
			fs->wflag = 1;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	70da      	strb	r2, [r3, #3]
			break;
 800f1c8:	e047      	b.n	800f25a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	899b      	ldrh	r3, [r3, #12]
 800f1d2:	089b      	lsrs	r3, r3, #2
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1de:	4413      	add	r3, r2
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f7ff fd9a 	bl	800ed1c <move_window>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1ec:	7ffb      	ldrb	r3, [r7, #31]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d132      	bne.n	800f258 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	8992      	ldrh	r2, [r2, #12]
 800f206:	fbb3 f0f2 	udiv	r0, r3, r2
 800f20a:	fb02 f200 	mul.w	r2, r2, r0
 800f20e:	1a9b      	subs	r3, r3, r2
 800f210:	440b      	add	r3, r1
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff faba 	bl	800e78c <ld_dword>
 800f218:	4603      	mov	r3, r0
 800f21a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f21e:	4323      	orrs	r3, r4
 800f220:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	8992      	ldrh	r2, [r2, #12]
 800f230:	fbb3 f0f2 	udiv	r0, r3, r2
 800f234:	fb02 f200 	mul.w	r2, r2, r0
 800f238:	1a9b      	subs	r3, r3, r2
 800f23a:	440b      	add	r3, r1
 800f23c:	6879      	ldr	r1, [r7, #4]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7ff fae2 	bl	800e808 <st_dword>
			fs->wflag = 1;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2201      	movs	r2, #1
 800f248:	70da      	strb	r2, [r3, #3]
			break;
 800f24a:	e006      	b.n	800f25a <put_fat+0x224>
			if (res != FR_OK) break;
 800f24c:	bf00      	nop
 800f24e:	e004      	b.n	800f25a <put_fat+0x224>
			if (res != FR_OK) break;
 800f250:	bf00      	nop
 800f252:	e002      	b.n	800f25a <put_fat+0x224>
			if (res != FR_OK) break;
 800f254:	bf00      	nop
 800f256:	e000      	b.n	800f25a <put_fat+0x224>
			if (res != FR_OK) break;
 800f258:	bf00      	nop
		}
	}
	return res;
 800f25a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3724      	adds	r7, #36	; 0x24
 800f260:	46bd      	mov	sp, r7
 800f262:	bd90      	pop	{r4, r7, pc}

0800f264 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b088      	sub	sp, #32
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d904      	bls.n	800f28a <remove_chain+0x26>
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	69db      	ldr	r3, [r3, #28]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	429a      	cmp	r2, r3
 800f288:	d301      	bcc.n	800f28e <remove_chain+0x2a>
 800f28a:	2302      	movs	r3, #2
 800f28c:	e04b      	b.n	800f326 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00c      	beq.n	800f2ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f294:	f04f 32ff 	mov.w	r2, #4294967295
 800f298:	6879      	ldr	r1, [r7, #4]
 800f29a:	69b8      	ldr	r0, [r7, #24]
 800f29c:	f7ff fecb 	bl	800f036 <put_fat>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f2a4:	7ffb      	ldrb	r3, [r7, #31]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <remove_chain+0x4a>
 800f2aa:	7ffb      	ldrb	r3, [r7, #31]
 800f2ac:	e03b      	b.n	800f326 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f2ae:	68b9      	ldr	r1, [r7, #8]
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff fdf0 	bl	800ee96 <get_fat>
 800f2b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d031      	beq.n	800f322 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d101      	bne.n	800f2c8 <remove_chain+0x64>
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e02e      	b.n	800f326 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ce:	d101      	bne.n	800f2d4 <remove_chain+0x70>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e028      	b.n	800f326 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	68b9      	ldr	r1, [r7, #8]
 800f2d8:	69b8      	ldr	r0, [r7, #24]
 800f2da:	f7ff feac 	bl	800f036 <put_fat>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f2e2:	7ffb      	ldrb	r3, [r7, #31]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d001      	beq.n	800f2ec <remove_chain+0x88>
 800f2e8:	7ffb      	ldrb	r3, [r7, #31]
 800f2ea:	e01c      	b.n	800f326 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	699a      	ldr	r2, [r3, #24]
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	69db      	ldr	r3, [r3, #28]
 800f2f4:	3b02      	subs	r3, #2
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d20b      	bcs.n	800f312 <remove_chain+0xae>
			fs->free_clst++;
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	791b      	ldrb	r3, [r3, #4]
 800f308:	f043 0301 	orr.w	r3, r3, #1
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d3c6      	bcc.n	800f2ae <remove_chain+0x4a>
 800f320:	e000      	b.n	800f324 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f322:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f324:	2300      	movs	r3, #0
}
 800f326:	4618      	mov	r0, r3
 800f328:	3720      	adds	r7, #32
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b088      	sub	sp, #32
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10d      	bne.n	800f360 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	695b      	ldr	r3, [r3, #20]
 800f348:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d004      	beq.n	800f35a <create_chain+0x2c>
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	69db      	ldr	r3, [r3, #28]
 800f354:	69ba      	ldr	r2, [r7, #24]
 800f356:	429a      	cmp	r2, r3
 800f358:	d31b      	bcc.n	800f392 <create_chain+0x64>
 800f35a:	2301      	movs	r3, #1
 800f35c:	61bb      	str	r3, [r7, #24]
 800f35e:	e018      	b.n	800f392 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f360:	6839      	ldr	r1, [r7, #0]
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7ff fd97 	bl	800ee96 <get_fat>
 800f368:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d801      	bhi.n	800f374 <create_chain+0x46>
 800f370:	2301      	movs	r3, #1
 800f372:	e070      	b.n	800f456 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37a:	d101      	bne.n	800f380 <create_chain+0x52>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	e06a      	b.n	800f456 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	69db      	ldr	r3, [r3, #28]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	429a      	cmp	r2, r3
 800f388:	d201      	bcs.n	800f38e <create_chain+0x60>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	e063      	b.n	800f456 <create_chain+0x128>
		scl = clst;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	3301      	adds	r3, #1
 800f39a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	69fa      	ldr	r2, [r7, #28]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d307      	bcc.n	800f3b6 <create_chain+0x88>
				ncl = 2;
 800f3a6:	2302      	movs	r3, #2
 800f3a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d901      	bls.n	800f3b6 <create_chain+0x88>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e04f      	b.n	800f456 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f3b6:	69f9      	ldr	r1, [r7, #28]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f7ff fd6c 	bl	800ee96 <get_fat>
 800f3be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00e      	beq.n	800f3e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d003      	beq.n	800f3d4 <create_chain+0xa6>
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d2:	d101      	bne.n	800f3d8 <create_chain+0xaa>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	e03e      	b.n	800f456 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f3d8:	69fa      	ldr	r2, [r7, #28]
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d1da      	bne.n	800f396 <create_chain+0x68>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	e038      	b.n	800f456 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f3e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ea:	69f9      	ldr	r1, [r7, #28]
 800f3ec:	6938      	ldr	r0, [r7, #16]
 800f3ee:	f7ff fe22 	bl	800f036 <put_fat>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f3f6:	7dfb      	ldrb	r3, [r7, #23]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d109      	bne.n	800f410 <create_chain+0xe2>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d006      	beq.n	800f410 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f402:	69fa      	ldr	r2, [r7, #28]
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6938      	ldr	r0, [r7, #16]
 800f408:	f7ff fe15 	bl	800f036 <put_fat>
 800f40c:	4603      	mov	r3, r0
 800f40e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f410:	7dfb      	ldrb	r3, [r7, #23]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d116      	bne.n	800f444 <create_chain+0x116>
		fs->last_clst = ncl;
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	69fa      	ldr	r2, [r7, #28]
 800f41a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	699a      	ldr	r2, [r3, #24]
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	69db      	ldr	r3, [r3, #28]
 800f424:	3b02      	subs	r3, #2
 800f426:	429a      	cmp	r2, r3
 800f428:	d804      	bhi.n	800f434 <create_chain+0x106>
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	699b      	ldr	r3, [r3, #24]
 800f42e:	1e5a      	subs	r2, r3, #1
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	791b      	ldrb	r3, [r3, #4]
 800f438:	f043 0301 	orr.w	r3, r3, #1
 800f43c:	b2da      	uxtb	r2, r3
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	711a      	strb	r2, [r3, #4]
 800f442:	e007      	b.n	800f454 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f444:	7dfb      	ldrb	r3, [r7, #23]
 800f446:	2b01      	cmp	r3, #1
 800f448:	d102      	bne.n	800f450 <create_chain+0x122>
 800f44a:	f04f 33ff 	mov.w	r3, #4294967295
 800f44e:	e000      	b.n	800f452 <create_chain+0x124>
 800f450:	2301      	movs	r3, #1
 800f452:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f454:	69fb      	ldr	r3, [r7, #28]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3720      	adds	r7, #32
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f45e:	b480      	push	{r7}
 800f460:	b087      	sub	sp, #28
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f472:	3304      	adds	r3, #4
 800f474:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	899b      	ldrh	r3, [r3, #12]
 800f47a:	461a      	mov	r2, r3
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	8952      	ldrh	r2, [r2, #10]
 800f486:	fbb3 f3f2 	udiv	r3, r3, r2
 800f48a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	1d1a      	adds	r2, r3, #4
 800f490:	613a      	str	r2, [r7, #16]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d101      	bne.n	800f4a0 <clmt_clust+0x42>
 800f49c:	2300      	movs	r3, #0
 800f49e:	e010      	b.n	800f4c2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f4a0:	697a      	ldr	r2, [r7, #20]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d307      	bcc.n	800f4b8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f4a8:	697a      	ldr	r2, [r7, #20]
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	1ad3      	subs	r3, r2, r3
 800f4ae:	617b      	str	r3, [r7, #20]
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f4b6:	e7e9      	b.n	800f48c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f4b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	4413      	add	r3, r2
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	371c      	adds	r7, #28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b086      	sub	sp, #24
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4e4:	d204      	bcs.n	800f4f0 <dir_sdi+0x22>
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	f003 031f 	and.w	r3, r3, #31
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	e071      	b.n	800f5d8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	683a      	ldr	r2, [r7, #0]
 800f4f8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d106      	bne.n	800f514 <dir_sdi+0x46>
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d902      	bls.n	800f514 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f512:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10c      	bne.n	800f534 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	095b      	lsrs	r3, r3, #5
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	8912      	ldrh	r2, [r2, #8]
 800f522:	4293      	cmp	r3, r2
 800f524:	d301      	bcc.n	800f52a <dir_sdi+0x5c>
 800f526:	2302      	movs	r3, #2
 800f528:	e056      	b.n	800f5d8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	61da      	str	r2, [r3, #28]
 800f532:	e02d      	b.n	800f590 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	895b      	ldrh	r3, [r3, #10]
 800f538:	461a      	mov	r2, r3
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	899b      	ldrh	r3, [r3, #12]
 800f53e:	fb03 f302 	mul.w	r3, r3, r2
 800f542:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f544:	e019      	b.n	800f57a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6979      	ldr	r1, [r7, #20]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7ff fca3 	bl	800ee96 <get_fat>
 800f550:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f558:	d101      	bne.n	800f55e <dir_sdi+0x90>
 800f55a:	2301      	movs	r3, #1
 800f55c:	e03c      	b.n	800f5d8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d904      	bls.n	800f56e <dir_sdi+0xa0>
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	69db      	ldr	r3, [r3, #28]
 800f568:	697a      	ldr	r2, [r7, #20]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d301      	bcc.n	800f572 <dir_sdi+0xa4>
 800f56e:	2302      	movs	r3, #2
 800f570:	e032      	b.n	800f5d8 <dir_sdi+0x10a>
			ofs -= csz;
 800f572:	683a      	ldr	r2, [r7, #0]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d2e1      	bcs.n	800f546 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f582:	6979      	ldr	r1, [r7, #20]
 800f584:	6938      	ldr	r0, [r7, #16]
 800f586:	f7ff fc67 	bl	800ee58 <clust2sect>
 800f58a:	4602      	mov	r2, r0
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d101      	bne.n	800f5a2 <dir_sdi+0xd4>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	e01a      	b.n	800f5d8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	69da      	ldr	r2, [r3, #28]
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	899b      	ldrh	r3, [r3, #12]
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5b2:	441a      	add	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	899b      	ldrh	r3, [r3, #12]
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5ca:	fb02 f200 	mul.w	r2, r2, r0
 800f5ce:	1a9b      	subs	r3, r3, r2
 800f5d0:	18ca      	adds	r2, r1, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3718      	adds	r7, #24
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	695b      	ldr	r3, [r3, #20]
 800f5f4:	3320      	adds	r3, #32
 800f5f6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	69db      	ldr	r3, [r3, #28]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d003      	beq.n	800f608 <dir_next+0x28>
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f606:	d301      	bcc.n	800f60c <dir_next+0x2c>
 800f608:	2304      	movs	r3, #4
 800f60a:	e0bb      	b.n	800f784 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	899b      	ldrh	r3, [r3, #12]
 800f610:	461a      	mov	r2, r3
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	fbb3 f1f2 	udiv	r1, r3, r2
 800f618:	fb02 f201 	mul.w	r2, r2, r1
 800f61c:	1a9b      	subs	r3, r3, r2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f040 809d 	bne.w	800f75e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	1c5a      	adds	r2, r3, #1
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10b      	bne.n	800f64e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	095b      	lsrs	r3, r3, #5
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	8912      	ldrh	r2, [r2, #8]
 800f63e:	4293      	cmp	r3, r2
 800f640:	f0c0 808d 	bcc.w	800f75e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	61da      	str	r2, [r3, #28]
 800f64a:	2304      	movs	r3, #4
 800f64c:	e09a      	b.n	800f784 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	899b      	ldrh	r3, [r3, #12]
 800f652:	461a      	mov	r2, r3
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	fbb3 f3f2 	udiv	r3, r3, r2
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	8952      	ldrh	r2, [r2, #10]
 800f65e:	3a01      	subs	r2, #1
 800f660:	4013      	ands	r3, r2
 800f662:	2b00      	cmp	r3, #0
 800f664:	d17b      	bne.n	800f75e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	4619      	mov	r1, r3
 800f66e:	4610      	mov	r0, r2
 800f670:	f7ff fc11 	bl	800ee96 <get_fat>
 800f674:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d801      	bhi.n	800f680 <dir_next+0xa0>
 800f67c:	2302      	movs	r3, #2
 800f67e:	e081      	b.n	800f784 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f686:	d101      	bne.n	800f68c <dir_next+0xac>
 800f688:	2301      	movs	r3, #1
 800f68a:	e07b      	b.n	800f784 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	69db      	ldr	r3, [r3, #28]
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	429a      	cmp	r2, r3
 800f694:	d359      	bcc.n	800f74a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d104      	bne.n	800f6a6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	61da      	str	r2, [r3, #28]
 800f6a2:	2304      	movs	r3, #4
 800f6a4:	e06e      	b.n	800f784 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	699b      	ldr	r3, [r3, #24]
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	f7ff fe3d 	bl	800f32e <create_chain>
 800f6b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <dir_next+0xe0>
 800f6bc:	2307      	movs	r3, #7
 800f6be:	e061      	b.n	800f784 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d101      	bne.n	800f6ca <dir_next+0xea>
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e05c      	b.n	800f784 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d0:	d101      	bne.n	800f6d6 <dir_next+0xf6>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e056      	b.n	800f784 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f7ff fadc 	bl	800ec94 <sync_window>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d001      	beq.n	800f6e6 <dir_next+0x106>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e04e      	b.n	800f784 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	899b      	ldrh	r3, [r3, #12]
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	f7ff f8d5 	bl	800e8a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	613b      	str	r3, [r7, #16]
 800f6fc:	6979      	ldr	r1, [r7, #20]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f7ff fbaa 	bl	800ee58 <clust2sect>
 800f704:	4602      	mov	r2, r0
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	635a      	str	r2, [r3, #52]	; 0x34
 800f70a:	e012      	b.n	800f732 <dir_next+0x152>
						fs->wflag = 1;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2201      	movs	r2, #1
 800f710:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7ff fabe 	bl	800ec94 <sync_window>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <dir_next+0x142>
 800f71e:	2301      	movs	r3, #1
 800f720:	e030      	b.n	800f784 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	3301      	adds	r3, #1
 800f726:	613b      	str	r3, [r7, #16]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f72c:	1c5a      	adds	r2, r3, #1
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	635a      	str	r2, [r3, #52]	; 0x34
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	895b      	ldrh	r3, [r3, #10]
 800f736:	461a      	mov	r2, r3
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d3e6      	bcc.n	800f70c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	1ad2      	subs	r2, r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f750:	6979      	ldr	r1, [r7, #20]
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff fb80 	bl	800ee58 <clust2sect>
 800f758:	4602      	mov	r2, r0
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68ba      	ldr	r2, [r7, #8]
 800f762:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	899b      	ldrh	r3, [r3, #12]
 800f76e:	461a      	mov	r2, r3
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	fbb3 f0f2 	udiv	r0, r3, r2
 800f776:	fb02 f200 	mul.w	r2, r2, r0
 800f77a:	1a9b      	subs	r3, r3, r2
 800f77c:	18ca      	adds	r2, r1, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f79c:	2100      	movs	r1, #0
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff fe95 	bl	800f4ce <dir_sdi>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f7a8:	7dfb      	ldrb	r3, [r7, #23]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d12b      	bne.n	800f806 <dir_alloc+0x7a>
		n = 0;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	69db      	ldr	r3, [r3, #28]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f7ff faaf 	bl	800ed1c <move_window>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7c2:	7dfb      	ldrb	r3, [r7, #23]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d11d      	bne.n	800f804 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a1b      	ldr	r3, [r3, #32]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	2be5      	cmp	r3, #229	; 0xe5
 800f7d0:	d004      	beq.n	800f7dc <dir_alloc+0x50>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a1b      	ldr	r3, [r3, #32]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d107      	bne.n	800f7ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	613b      	str	r3, [r7, #16]
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d102      	bne.n	800f7f0 <dir_alloc+0x64>
 800f7ea:	e00c      	b.n	800f806 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7ff fef4 	bl	800f5e0 <dir_next>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d0d7      	beq.n	800f7b2 <dir_alloc+0x26>
 800f802:	e000      	b.n	800f806 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f804:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f806:	7dfb      	ldrb	r3, [r7, #23]
 800f808:	2b04      	cmp	r3, #4
 800f80a:	d101      	bne.n	800f810 <dir_alloc+0x84>
 800f80c:	2307      	movs	r3, #7
 800f80e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f810:	7dfb      	ldrb	r3, [r7, #23]
}
 800f812:	4618      	mov	r0, r3
 800f814:	3718      	adds	r7, #24
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b084      	sub	sp, #16
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
 800f822:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	331a      	adds	r3, #26
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fe ff97 	bl	800e75c <ld_word>
 800f82e:	4603      	mov	r3, r0
 800f830:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	2b03      	cmp	r3, #3
 800f838:	d109      	bne.n	800f84e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	3314      	adds	r3, #20
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fe ff8c 	bl	800e75c <ld_word>
 800f844:	4603      	mov	r3, r0
 800f846:	041b      	lsls	r3, r3, #16
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	4313      	orrs	r3, r2
 800f84c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f84e:	68fb      	ldr	r3, [r7, #12]
}
 800f850:	4618      	mov	r0, r3
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	331a      	adds	r3, #26
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	b292      	uxth	r2, r2
 800f86c:	4611      	mov	r1, r2
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fe ffaf 	bl	800e7d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	2b03      	cmp	r3, #3
 800f87a:	d109      	bne.n	800f890 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	f103 0214 	add.w	r2, r3, #20
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	0c1b      	lsrs	r3, r3, #16
 800f886:	b29b      	uxth	r3, r3
 800f888:	4619      	mov	r1, r3
 800f88a:	4610      	mov	r0, r2
 800f88c:	f7fe ffa1 	bl	800e7d2 <st_word>
	}
}
 800f890:	bf00      	nop
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b086      	sub	sp, #24
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff fe10 	bl	800f4ce <dir_sdi>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <dir_find+0x24>
 800f8b8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ba:	e03e      	b.n	800f93a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6938      	ldr	r0, [r7, #16]
 800f8c4:	f7ff fa2a 	bl	800ed1c <move_window>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f8cc:	7dfb      	ldrb	r3, [r7, #23]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d12f      	bne.n	800f932 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f8da:	7bfb      	ldrb	r3, [r7, #15]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <dir_find+0x4e>
 800f8e0:	2304      	movs	r3, #4
 800f8e2:	75fb      	strb	r3, [r7, #23]
 800f8e4:	e028      	b.n	800f938 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a1b      	ldr	r3, [r3, #32]
 800f8ea:	330b      	adds	r3, #11
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	330b      	adds	r3, #11
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 0308 	and.w	r3, r3, #8
 800f904:	2b00      	cmp	r3, #0
 800f906:	d10a      	bne.n	800f91e <dir_find+0x86>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a18      	ldr	r0, [r3, #32]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	3324      	adds	r3, #36	; 0x24
 800f910:	220b      	movs	r2, #11
 800f912:	4619      	mov	r1, r3
 800f914:	f7fe ffdf 	bl	800e8d6 <mem_cmp>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00b      	beq.n	800f936 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f91e:	2100      	movs	r1, #0
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff fe5d 	bl	800f5e0 <dir_next>
 800f926:	4603      	mov	r3, r0
 800f928:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f92a:	7dfb      	ldrb	r3, [r7, #23]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0c5      	beq.n	800f8bc <dir_find+0x24>
 800f930:	e002      	b.n	800f938 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f932:	bf00      	nop
 800f934:	e000      	b.n	800f938 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f936:	bf00      	nop

	return res;
 800f938:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3718      	adds	r7, #24
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b084      	sub	sp, #16
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f950:	2101      	movs	r1, #1
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff ff1a 	bl	800f78c <dir_alloc>
 800f958:	4603      	mov	r3, r0
 800f95a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f95c:	7bfb      	ldrb	r3, [r7, #15]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d11c      	bne.n	800f99c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	69db      	ldr	r3, [r3, #28]
 800f966:	4619      	mov	r1, r3
 800f968:	68b8      	ldr	r0, [r7, #8]
 800f96a:	f7ff f9d7 	bl	800ed1c <move_window>
 800f96e:	4603      	mov	r3, r0
 800f970:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f972:	7bfb      	ldrb	r3, [r7, #15]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d111      	bne.n	800f99c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	2220      	movs	r2, #32
 800f97e:	2100      	movs	r1, #0
 800f980:	4618      	mov	r0, r3
 800f982:	f7fe ff8e 	bl	800e8a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a18      	ldr	r0, [r3, #32]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3324      	adds	r3, #36	; 0x24
 800f98e:	220b      	movs	r2, #11
 800f990:	4619      	mov	r1, r3
 800f992:	f7fe ff65 	bl	800e860 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2201      	movs	r2, #1
 800f99a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
	...

0800f9a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	60fb      	str	r3, [r7, #12]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3324      	adds	r3, #36	; 0x24
 800f9bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f9be:	220b      	movs	r2, #11
 800f9c0:	2120      	movs	r1, #32
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	f7fe ff6d 	bl	800e8a2 <mem_set>
	si = i = 0; ni = 8;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	613b      	str	r3, [r7, #16]
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	2308      	movs	r3, #8
 800f9d2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	1c5a      	adds	r2, r3, #1
 800f9d8:	617a      	str	r2, [r7, #20]
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	4413      	add	r3, r2
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f9e2:	7ffb      	ldrb	r3, [r7, #31]
 800f9e4:	2b20      	cmp	r3, #32
 800f9e6:	d94e      	bls.n	800fa86 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f9e8:	7ffb      	ldrb	r3, [r7, #31]
 800f9ea:	2b2f      	cmp	r3, #47	; 0x2f
 800f9ec:	d006      	beq.n	800f9fc <create_name+0x54>
 800f9ee:	7ffb      	ldrb	r3, [r7, #31]
 800f9f0:	2b5c      	cmp	r3, #92	; 0x5c
 800f9f2:	d110      	bne.n	800fa16 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f9f4:	e002      	b.n	800f9fc <create_name+0x54>
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	617b      	str	r3, [r7, #20]
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	4413      	add	r3, r2
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b2f      	cmp	r3, #47	; 0x2f
 800fa06:	d0f6      	beq.n	800f9f6 <create_name+0x4e>
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	2b5c      	cmp	r3, #92	; 0x5c
 800fa12:	d0f0      	beq.n	800f9f6 <create_name+0x4e>
			break;
 800fa14:	e038      	b.n	800fa88 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fa16:	7ffb      	ldrb	r3, [r7, #31]
 800fa18:	2b2e      	cmp	r3, #46	; 0x2e
 800fa1a:	d003      	beq.n	800fa24 <create_name+0x7c>
 800fa1c:	693a      	ldr	r2, [r7, #16]
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d30c      	bcc.n	800fa3e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	2b0b      	cmp	r3, #11
 800fa28:	d002      	beq.n	800fa30 <create_name+0x88>
 800fa2a:	7ffb      	ldrb	r3, [r7, #31]
 800fa2c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa2e:	d001      	beq.n	800fa34 <create_name+0x8c>
 800fa30:	2306      	movs	r3, #6
 800fa32:	e044      	b.n	800fabe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa34:	2308      	movs	r3, #8
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	230b      	movs	r3, #11
 800fa3a:	61bb      	str	r3, [r7, #24]
			continue;
 800fa3c:	e022      	b.n	800fa84 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	da04      	bge.n	800fa50 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa46:	7ffb      	ldrb	r3, [r7, #31]
 800fa48:	3b80      	subs	r3, #128	; 0x80
 800fa4a:	4a1f      	ldr	r2, [pc, #124]	; (800fac8 <create_name+0x120>)
 800fa4c:	5cd3      	ldrb	r3, [r2, r3]
 800fa4e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa50:	7ffb      	ldrb	r3, [r7, #31]
 800fa52:	4619      	mov	r1, r3
 800fa54:	481d      	ldr	r0, [pc, #116]	; (800facc <create_name+0x124>)
 800fa56:	f7fe ff65 	bl	800e924 <chk_chr>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <create_name+0xbc>
 800fa60:	2306      	movs	r3, #6
 800fa62:	e02c      	b.n	800fabe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fa64:	7ffb      	ldrb	r3, [r7, #31]
 800fa66:	2b60      	cmp	r3, #96	; 0x60
 800fa68:	d905      	bls.n	800fa76 <create_name+0xce>
 800fa6a:	7ffb      	ldrb	r3, [r7, #31]
 800fa6c:	2b7a      	cmp	r3, #122	; 0x7a
 800fa6e:	d802      	bhi.n	800fa76 <create_name+0xce>
 800fa70:	7ffb      	ldrb	r3, [r7, #31]
 800fa72:	3b20      	subs	r3, #32
 800fa74:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	1c5a      	adds	r2, r3, #1
 800fa7a:	613a      	str	r2, [r7, #16]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	4413      	add	r3, r2
 800fa80:	7ffa      	ldrb	r2, [r7, #31]
 800fa82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fa84:	e7a6      	b.n	800f9d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	441a      	add	r2, r3
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d101      	bne.n	800fa9c <create_name+0xf4>
 800fa98:	2306      	movs	r3, #6
 800fa9a:	e010      	b.n	800fabe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	2be5      	cmp	r3, #229	; 0xe5
 800faa2:	d102      	bne.n	800faaa <create_name+0x102>
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	2205      	movs	r2, #5
 800faa8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800faaa:	7ffb      	ldrb	r3, [r7, #31]
 800faac:	2b20      	cmp	r3, #32
 800faae:	d801      	bhi.n	800fab4 <create_name+0x10c>
 800fab0:	2204      	movs	r2, #4
 800fab2:	e000      	b.n	800fab6 <create_name+0x10e>
 800fab4:	2200      	movs	r2, #0
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	330b      	adds	r3, #11
 800faba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fabc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3720      	adds	r7, #32
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	080154c4 	.word	0x080154c4
 800facc:	08015434 	.word	0x08015434

0800fad0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fae4:	e002      	b.n	800faec <follow_path+0x1c>
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	3301      	adds	r3, #1
 800faea:	603b      	str	r3, [r7, #0]
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b2f      	cmp	r3, #47	; 0x2f
 800faf2:	d0f8      	beq.n	800fae6 <follow_path+0x16>
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2b5c      	cmp	r3, #92	; 0x5c
 800fafa:	d0f4      	beq.n	800fae6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	2200      	movs	r2, #0
 800fb00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	2b1f      	cmp	r3, #31
 800fb08:	d80a      	bhi.n	800fb20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2280      	movs	r2, #128	; 0x80
 800fb0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fb12:	2100      	movs	r1, #0
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff fcda 	bl	800f4ce <dir_sdi>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	75fb      	strb	r3, [r7, #23]
 800fb1e:	e048      	b.n	800fbb2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb20:	463b      	mov	r3, r7
 800fb22:	4619      	mov	r1, r3
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ff3f 	bl	800f9a8 <create_name>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d139      	bne.n	800fba8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7ff feaf 	bl	800f898 <dir_find>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00a      	beq.n	800fb62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb4c:	7dfb      	ldrb	r3, [r7, #23]
 800fb4e:	2b04      	cmp	r3, #4
 800fb50:	d12c      	bne.n	800fbac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb52:	7afb      	ldrb	r3, [r7, #11]
 800fb54:	f003 0304 	and.w	r3, r3, #4
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d127      	bne.n	800fbac <follow_path+0xdc>
 800fb5c:	2305      	movs	r3, #5
 800fb5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb60:	e024      	b.n	800fbac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb62:	7afb      	ldrb	r3, [r7, #11]
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d121      	bne.n	800fbb0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	799b      	ldrb	r3, [r3, #6]
 800fb70:	f003 0310 	and.w	r3, r3, #16
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d102      	bne.n	800fb7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fb78:	2305      	movs	r3, #5
 800fb7a:	75fb      	strb	r3, [r7, #23]
 800fb7c:	e019      	b.n	800fbb2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	695b      	ldr	r3, [r3, #20]
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	8992      	ldrh	r2, [r2, #12]
 800fb8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb90:	fb02 f200 	mul.w	r2, r2, r0
 800fb94:	1a9b      	subs	r3, r3, r2
 800fb96:	440b      	add	r3, r1
 800fb98:	4619      	mov	r1, r3
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7ff fe3d 	bl	800f81a <ld_clust>
 800fba0:	4602      	mov	r2, r0
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fba6:	e7bb      	b.n	800fb20 <follow_path+0x50>
			if (res != FR_OK) break;
 800fba8:	bf00      	nop
 800fbaa:	e002      	b.n	800fbb2 <follow_path+0xe2>
				break;
 800fbac:	bf00      	nop
 800fbae:	e000      	b.n	800fbb2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbb0:	bf00      	nop
			}
		}
	}

	return res;
 800fbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3718      	adds	r7, #24
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b087      	sub	sp, #28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d031      	beq.n	800fc36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	617b      	str	r3, [r7, #20]
 800fbd8:	e002      	b.n	800fbe0 <get_ldnumber+0x24>
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	617b      	str	r3, [r7, #20]
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	2b20      	cmp	r3, #32
 800fbe6:	d903      	bls.n	800fbf0 <get_ldnumber+0x34>
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b3a      	cmp	r3, #58	; 0x3a
 800fbee:	d1f4      	bne.n	800fbda <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	2b3a      	cmp	r3, #58	; 0x3a
 800fbf6:	d11c      	bne.n	800fc32 <get_ldnumber+0x76>
			tp = *path;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	1c5a      	adds	r2, r3, #1
 800fc02:	60fa      	str	r2, [r7, #12]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	3b30      	subs	r3, #48	; 0x30
 800fc08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	2b09      	cmp	r3, #9
 800fc0e:	d80e      	bhi.n	800fc2e <get_ldnumber+0x72>
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d10a      	bne.n	800fc2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d107      	bne.n	800fc2e <get_ldnumber+0x72>
					vol = (int)i;
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	3301      	adds	r3, #1
 800fc26:	617b      	str	r3, [r7, #20]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	e002      	b.n	800fc38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc32:	2300      	movs	r3, #0
 800fc34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc36:	693b      	ldr	r3, [r7, #16]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	371c      	adds	r7, #28
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	70da      	strb	r2, [r3, #3]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f04f 32ff 	mov.w	r2, #4294967295
 800fc5a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7ff f85c 	bl	800ed1c <move_window>
 800fc64:	4603      	mov	r3, r0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <check_fs+0x2a>
 800fc6a:	2304      	movs	r3, #4
 800fc6c:	e038      	b.n	800fce0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	3338      	adds	r3, #56	; 0x38
 800fc72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fe fd70 	bl	800e75c <ld_word>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	461a      	mov	r2, r3
 800fc80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d001      	beq.n	800fc8c <check_fs+0x48>
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e029      	b.n	800fce0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fc92:	2be9      	cmp	r3, #233	; 0xe9
 800fc94:	d009      	beq.n	800fcaa <check_fs+0x66>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fc9c:	2beb      	cmp	r3, #235	; 0xeb
 800fc9e:	d11e      	bne.n	800fcde <check_fs+0x9a>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fca6:	2b90      	cmp	r3, #144	; 0x90
 800fca8:	d119      	bne.n	800fcde <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	3338      	adds	r3, #56	; 0x38
 800fcae:	3336      	adds	r3, #54	; 0x36
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe fd6b 	bl	800e78c <ld_dword>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fcbc:	4a0a      	ldr	r2, [pc, #40]	; (800fce8 <check_fs+0xa4>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d101      	bne.n	800fcc6 <check_fs+0x82>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	e00c      	b.n	800fce0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3338      	adds	r3, #56	; 0x38
 800fcca:	3352      	adds	r3, #82	; 0x52
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe fd5d 	bl	800e78c <ld_dword>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4b05      	ldr	r3, [pc, #20]	; (800fcec <check_fs+0xa8>)
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d101      	bne.n	800fcde <check_fs+0x9a>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e000      	b.n	800fce0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fcde:	2302      	movs	r3, #2
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	00544146 	.word	0x00544146
 800fcec:	33544146 	.word	0x33544146

0800fcf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b096      	sub	sp, #88	; 0x58
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	2200      	movs	r2, #0
 800fd02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f7ff ff59 	bl	800fbbc <get_ldnumber>
 800fd0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	da01      	bge.n	800fd16 <find_volume+0x26>
 800fd12:	230b      	movs	r3, #11
 800fd14:	e26c      	b.n	80101f0 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd16:	4aa4      	ldr	r2, [pc, #656]	; (800ffa8 <find_volume+0x2b8>)
 800fd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <find_volume+0x3a>
 800fd26:	230c      	movs	r3, #12
 800fd28:	e262      	b.n	80101f0 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800fd2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd2c:	f7fe fe15 	bl	800e95a <lock_fs>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <find_volume+0x4a>
 800fd36:	230f      	movs	r3, #15
 800fd38:	e25a      	b.n	80101f0 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd40:	79fb      	ldrb	r3, [r7, #7]
 800fd42:	f023 0301 	bic.w	r3, r3, #1
 800fd46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01a      	beq.n	800fd86 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800fd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd52:	785b      	ldrb	r3, [r3, #1]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe fc63 	bl	800e620 <disk_status>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd64:	f003 0301 	and.w	r3, r3, #1
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10c      	bne.n	800fd86 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd6c:	79fb      	ldrb	r3, [r7, #7]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d007      	beq.n	800fd82 <find_volume+0x92>
 800fd72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd76:	f003 0304 	and.w	r3, r3, #4
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800fd7e:	230a      	movs	r3, #10
 800fd80:	e236      	b.n	80101f0 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800fd82:	2300      	movs	r3, #0
 800fd84:	e234      	b.n	80101f0 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd88:	2200      	movs	r2, #0
 800fd8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd8e:	b2da      	uxtb	r2, r3
 800fd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	785b      	ldrb	r3, [r3, #1]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe fc5b 	bl	800e654 <disk_initialize>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fda4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fda8:	f003 0301 	and.w	r3, r3, #1
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	e21d      	b.n	80101f0 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d007      	beq.n	800fdca <find_volume+0xda>
 800fdba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdbe:	f003 0304 	and.w	r3, r3, #4
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800fdc6:	230a      	movs	r3, #10
 800fdc8:	e212      	b.n	80101f0 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdcc:	7858      	ldrb	r0, [r3, #1]
 800fdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd0:	330c      	adds	r3, #12
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	2102      	movs	r1, #2
 800fdd6:	f7fe fca3 	bl	800e720 <disk_ioctl>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <find_volume+0xf4>
 800fde0:	2301      	movs	r3, #1
 800fde2:	e205      	b.n	80101f0 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	899b      	ldrh	r3, [r3, #12]
 800fde8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdec:	d80d      	bhi.n	800fe0a <find_volume+0x11a>
 800fdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf0:	899b      	ldrh	r3, [r3, #12]
 800fdf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdf6:	d308      	bcc.n	800fe0a <find_volume+0x11a>
 800fdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfa:	899b      	ldrh	r3, [r3, #12]
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe00:	899b      	ldrh	r3, [r3, #12]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	4013      	ands	r3, r2
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <find_volume+0x11e>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e1f0      	b.n	80101f0 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fe12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe16:	f7ff ff15 	bl	800fc44 <check_fs>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe24:	2b02      	cmp	r3, #2
 800fe26:	d14b      	bne.n	800fec0 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe28:	2300      	movs	r3, #0
 800fe2a:	643b      	str	r3, [r7, #64]	; 0x40
 800fe2c:	e01f      	b.n	800fe6e <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe30:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fe34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe36:	011b      	lsls	r3, r3, #4
 800fe38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe3c:	4413      	add	r3, r2
 800fe3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe42:	3304      	adds	r3, #4
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d006      	beq.n	800fe58 <find_volume+0x168>
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	3308      	adds	r3, #8
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fe fc9c 	bl	800e78c <ld_dword>
 800fe54:	4602      	mov	r2, r0
 800fe56:	e000      	b.n	800fe5a <find_volume+0x16a>
 800fe58:	2200      	movs	r2, #0
 800fe5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fe62:	440b      	add	r3, r1
 800fe64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	643b      	str	r3, [r7, #64]	; 0x40
 800fe6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d9dc      	bls.n	800fe2e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe74:	2300      	movs	r3, #0
 800fe76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d002      	beq.n	800fe84 <find_volume+0x194>
 800fe7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe80:	3b01      	subs	r3, #1
 800fe82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fe8c:	4413      	add	r3, r2
 800fe8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d005      	beq.n	800fea6 <find_volume+0x1b6>
 800fe9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe9e:	f7ff fed1 	bl	800fc44 <check_fs>
 800fea2:	4603      	mov	r3, r0
 800fea4:	e000      	b.n	800fea8 <find_volume+0x1b8>
 800fea6:	2303      	movs	r3, #3
 800fea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800feac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d905      	bls.n	800fec0 <find_volume+0x1d0>
 800feb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feb6:	3301      	adds	r3, #1
 800feb8:	643b      	str	r3, [r7, #64]	; 0x40
 800feba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800febc:	2b03      	cmp	r3, #3
 800febe:	d9e1      	bls.n	800fe84 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fec4:	2b04      	cmp	r3, #4
 800fec6:	d101      	bne.n	800fecc <find_volume+0x1dc>
 800fec8:	2301      	movs	r3, #1
 800feca:	e191      	b.n	80101f0 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d901      	bls.n	800fed8 <find_volume+0x1e8>
 800fed4:	230d      	movs	r3, #13
 800fed6:	e18b      	b.n	80101f0 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feda:	3338      	adds	r3, #56	; 0x38
 800fedc:	330b      	adds	r3, #11
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fc3c 	bl	800e75c <ld_word>
 800fee4:	4603      	mov	r3, r0
 800fee6:	461a      	mov	r2, r3
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	899b      	ldrh	r3, [r3, #12]
 800feec:	429a      	cmp	r2, r3
 800feee:	d001      	beq.n	800fef4 <find_volume+0x204>
 800fef0:	230d      	movs	r3, #13
 800fef2:	e17d      	b.n	80101f0 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	3338      	adds	r3, #56	; 0x38
 800fef8:	3316      	adds	r3, #22
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fc2e 	bl	800e75c <ld_word>
 800ff00:	4603      	mov	r3, r0
 800ff02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ff04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <find_volume+0x228>
 800ff0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0c:	3338      	adds	r3, #56	; 0x38
 800ff0e:	3324      	adds	r3, #36	; 0x24
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe fc3b 	bl	800e78c <ld_dword>
 800ff16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff1c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ff24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	789b      	ldrb	r3, [r3, #2]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d005      	beq.n	800ff3c <find_volume+0x24c>
 800ff30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff32:	789b      	ldrb	r3, [r3, #2]
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d001      	beq.n	800ff3c <find_volume+0x24c>
 800ff38:	230d      	movs	r3, #13
 800ff3a:	e159      	b.n	80101f0 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3e:	789b      	ldrb	r3, [r3, #2]
 800ff40:	461a      	mov	r2, r3
 800ff42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff44:	fb02 f303 	mul.w	r3, r2, r3
 800ff48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff50:	b29a      	uxth	r2, r3
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff58:	895b      	ldrh	r3, [r3, #10]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d008      	beq.n	800ff70 <find_volume+0x280>
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	895b      	ldrh	r3, [r3, #10]
 800ff62:	461a      	mov	r2, r3
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	895b      	ldrh	r3, [r3, #10]
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	4013      	ands	r3, r2
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d001      	beq.n	800ff74 <find_volume+0x284>
 800ff70:	230d      	movs	r3, #13
 800ff72:	e13d      	b.n	80101f0 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	3338      	adds	r3, #56	; 0x38
 800ff78:	3311      	adds	r3, #17
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fe fbee 	bl	800e75c <ld_word>
 800ff80:	4603      	mov	r3, r0
 800ff82:	461a      	mov	r2, r3
 800ff84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8a:	891b      	ldrh	r3, [r3, #8]
 800ff8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff8e:	8992      	ldrh	r2, [r2, #12]
 800ff90:	0952      	lsrs	r2, r2, #5
 800ff92:	b292      	uxth	r2, r2
 800ff94:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff98:	fb02 f201 	mul.w	r2, r2, r1
 800ff9c:	1a9b      	subs	r3, r3, r2
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d003      	beq.n	800ffac <find_volume+0x2bc>
 800ffa4:	230d      	movs	r3, #13
 800ffa6:	e123      	b.n	80101f0 <find_volume+0x500>
 800ffa8:	24014904 	.word	0x24014904

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	3338      	adds	r3, #56	; 0x38
 800ffb0:	3313      	adds	r3, #19
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fe fbd2 	bl	800e75c <ld_word>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ffbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d106      	bne.n	800ffd0 <find_volume+0x2e0>
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	3338      	adds	r3, #56	; 0x38
 800ffc6:	3320      	adds	r3, #32
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe fbdf 	bl	800e78c <ld_dword>
 800ffce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd2:	3338      	adds	r3, #56	; 0x38
 800ffd4:	330e      	adds	r3, #14
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fe fbc0 	bl	800e75c <ld_word>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ffe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d101      	bne.n	800ffea <find_volume+0x2fa>
 800ffe6:	230d      	movs	r3, #13
 800ffe8:	e102      	b.n	80101f0 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ffea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffee:	4413      	add	r3, r2
 800fff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fff2:	8911      	ldrh	r1, [r2, #8]
 800fff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fff6:	8992      	ldrh	r2, [r2, #12]
 800fff8:	0952      	lsrs	r2, r2, #5
 800fffa:	b292      	uxth	r2, r2
 800fffc:	fbb1 f2f2 	udiv	r2, r1, r2
 8010000:	b292      	uxth	r2, r2
 8010002:	4413      	add	r3, r2
 8010004:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000a:	429a      	cmp	r2, r3
 801000c:	d201      	bcs.n	8010012 <find_volume+0x322>
 801000e:	230d      	movs	r3, #13
 8010010:	e0ee      	b.n	80101f0 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801001a:	8952      	ldrh	r2, [r2, #10]
 801001c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010020:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <find_volume+0x33c>
 8010028:	230d      	movs	r3, #13
 801002a:	e0e1      	b.n	80101f0 <find_volume+0x500>
		fmt = FS_FAT32;
 801002c:	2303      	movs	r3, #3
 801002e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010034:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010038:	4293      	cmp	r3, r2
 801003a:	d802      	bhi.n	8010042 <find_volume+0x352>
 801003c:	2302      	movs	r3, #2
 801003e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010044:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010048:	4293      	cmp	r3, r2
 801004a:	d802      	bhi.n	8010052 <find_volume+0x362>
 801004c:	2301      	movs	r3, #1
 801004e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	1c9a      	adds	r2, r3, #2
 8010056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010058:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801005e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010060:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010064:	441a      	add	r2, r3
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801006a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801006c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006e:	441a      	add	r2, r3
 8010070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010072:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010078:	2b03      	cmp	r3, #3
 801007a:	d11e      	bne.n	80100ba <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007e:	3338      	adds	r3, #56	; 0x38
 8010080:	332a      	adds	r3, #42	; 0x2a
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fb6a 	bl	800e75c <ld_word>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d001      	beq.n	8010092 <find_volume+0x3a2>
 801008e:	230d      	movs	r3, #13
 8010090:	e0ae      	b.n	80101f0 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010094:	891b      	ldrh	r3, [r3, #8]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d001      	beq.n	801009e <find_volume+0x3ae>
 801009a:	230d      	movs	r3, #13
 801009c:	e0a8      	b.n	80101f0 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	3338      	adds	r3, #56	; 0x38
 80100a2:	332c      	adds	r3, #44	; 0x2c
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fe fb71 	bl	800e78c <ld_dword>
 80100aa:	4602      	mov	r2, r0
 80100ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	69db      	ldr	r3, [r3, #28]
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	647b      	str	r3, [r7, #68]	; 0x44
 80100b8:	e01f      	b.n	80100fa <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80100ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100bc:	891b      	ldrh	r3, [r3, #8]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <find_volume+0x3d6>
 80100c2:	230d      	movs	r3, #13
 80100c4:	e094      	b.n	80101f0 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100cc:	441a      	add	r2, r3
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d103      	bne.n	80100e2 <find_volume+0x3f2>
 80100da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	005b      	lsls	r3, r3, #1
 80100e0:	e00a      	b.n	80100f8 <find_volume+0x408>
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	69da      	ldr	r2, [r3, #28]
 80100e6:	4613      	mov	r3, r2
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	4413      	add	r3, r2
 80100ec:	085a      	lsrs	r2, r3, #1
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	69db      	ldr	r3, [r3, #28]
 80100f2:	f003 0301 	and.w	r3, r3, #1
 80100f6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80100f8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	6a1a      	ldr	r2, [r3, #32]
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	4619      	mov	r1, r3
 8010104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010106:	440b      	add	r3, r1
 8010108:	3b01      	subs	r3, #1
 801010a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801010c:	8989      	ldrh	r1, [r1, #12]
 801010e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010112:	429a      	cmp	r2, r3
 8010114:	d201      	bcs.n	801011a <find_volume+0x42a>
 8010116:	230d      	movs	r3, #13
 8010118:	e06a      	b.n	80101f0 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801011a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011c:	f04f 32ff 	mov.w	r2, #4294967295
 8010120:	619a      	str	r2, [r3, #24]
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	699a      	ldr	r2, [r3, #24]
 8010126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010128:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	2280      	movs	r2, #128	; 0x80
 801012e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010134:	2b03      	cmp	r3, #3
 8010136:	d149      	bne.n	80101cc <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013a:	3338      	adds	r3, #56	; 0x38
 801013c:	3330      	adds	r3, #48	; 0x30
 801013e:	4618      	mov	r0, r3
 8010140:	f7fe fb0c 	bl	800e75c <ld_word>
 8010144:	4603      	mov	r3, r0
 8010146:	2b01      	cmp	r3, #1
 8010148:	d140      	bne.n	80101cc <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 801014a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801014c:	3301      	adds	r3, #1
 801014e:	4619      	mov	r1, r3
 8010150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010152:	f7fe fde3 	bl	800ed1c <move_window>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d137      	bne.n	80101cc <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	2200      	movs	r2, #0
 8010160:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010164:	3338      	adds	r3, #56	; 0x38
 8010166:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe faf6 	bl	800e75c <ld_word>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010178:	429a      	cmp	r2, r3
 801017a:	d127      	bne.n	80101cc <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	3338      	adds	r3, #56	; 0x38
 8010180:	4618      	mov	r0, r3
 8010182:	f7fe fb03 	bl	800e78c <ld_dword>
 8010186:	4602      	mov	r2, r0
 8010188:	4b1b      	ldr	r3, [pc, #108]	; (80101f8 <find_volume+0x508>)
 801018a:	429a      	cmp	r2, r3
 801018c:	d11e      	bne.n	80101cc <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801018e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010190:	3338      	adds	r3, #56	; 0x38
 8010192:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010196:	4618      	mov	r0, r3
 8010198:	f7fe faf8 	bl	800e78c <ld_dword>
 801019c:	4602      	mov	r2, r0
 801019e:	4b17      	ldr	r3, [pc, #92]	; (80101fc <find_volume+0x50c>)
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d113      	bne.n	80101cc <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	3338      	adds	r3, #56	; 0x38
 80101a8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fe faed 	bl	800e78c <ld_dword>
 80101b2:	4602      	mov	r2, r0
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	3338      	adds	r3, #56	; 0x38
 80101bc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fae3 	bl	800e78c <ld_dword>
 80101c6:	4602      	mov	r2, r0
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80101cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80101d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101d4:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <find_volume+0x510>)
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	3301      	adds	r3, #1
 80101da:	b29a      	uxth	r2, r3
 80101dc:	4b08      	ldr	r3, [pc, #32]	; (8010200 <find_volume+0x510>)
 80101de:	801a      	strh	r2, [r3, #0]
 80101e0:	4b07      	ldr	r3, [pc, #28]	; (8010200 <find_volume+0x510>)
 80101e2:	881a      	ldrh	r2, [r3, #0]
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80101e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101ea:	f7fe fd2f 	bl	800ec4c <clear_lock>
#endif
	return FR_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3758      	adds	r7, #88	; 0x58
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	41615252 	.word	0x41615252
 80101fc:	61417272 	.word	0x61417272
 8010200:	24014908 	.word	0x24014908

08010204 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801020e:	2309      	movs	r3, #9
 8010210:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d02e      	beq.n	8010276 <validate+0x72>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d02a      	beq.n	8010276 <validate+0x72>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d025      	beq.n	8010276 <validate+0x72>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	889a      	ldrh	r2, [r3, #4]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	88db      	ldrh	r3, [r3, #6]
 8010234:	429a      	cmp	r2, r3
 8010236:	d11e      	bne.n	8010276 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe fb8c 	bl	800e95a <lock_fs>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d014      	beq.n	8010272 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	785b      	ldrb	r3, [r3, #1]
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe f9e6 	bl	800e620 <disk_status>
 8010254:	4603      	mov	r3, r0
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	2b00      	cmp	r3, #0
 801025c:	d102      	bne.n	8010264 <validate+0x60>
				res = FR_OK;
 801025e:	2300      	movs	r3, #0
 8010260:	73fb      	strb	r3, [r7, #15]
 8010262:	e008      	b.n	8010276 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2100      	movs	r1, #0
 801026a:	4618      	mov	r0, r3
 801026c:	f7fe fb8b 	bl	800e986 <unlock_fs>
 8010270:	e001      	b.n	8010276 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010272:	230f      	movs	r3, #15
 8010274:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010276:	7bfb      	ldrb	r3, [r7, #15]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <validate+0x7e>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	e000      	b.n	8010284 <validate+0x80>
 8010282:	2300      	movs	r3, #0
 8010284:	683a      	ldr	r2, [r7, #0]
 8010286:	6013      	str	r3, [r2, #0]
	return res;
 8010288:	7bfb      	ldrb	r3, [r7, #15]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	4613      	mov	r3, r2
 80102a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80102a6:	f107 0310 	add.w	r3, r7, #16
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fc86 	bl	800fbbc <get_ldnumber>
 80102b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	da01      	bge.n	80102bc <f_mount+0x28>
 80102b8:	230b      	movs	r3, #11
 80102ba:	e048      	b.n	801034e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80102bc:	4a26      	ldr	r2, [pc, #152]	; (8010358 <f_mount+0xc4>)
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00f      	beq.n	80102ec <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80102cc:	69b8      	ldr	r0, [r7, #24]
 80102ce:	f7fe fcbd 	bl	800ec4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 ff77 	bl	80111ca <ff_del_syncobj>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <f_mount+0x52>
 80102e2:	2302      	movs	r3, #2
 80102e4:	e033      	b.n	801034e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	2200      	movs	r2, #0
 80102ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00f      	beq.n	8010312 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2200      	movs	r2, #0
 80102f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	3310      	adds	r3, #16
 8010300:	4619      	mov	r1, r3
 8010302:	4610      	mov	r0, r2
 8010304:	f000 ff41 	bl	801118a <ff_cre_syncobj>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <f_mount+0x7e>
 801030e:	2302      	movs	r3, #2
 8010310:	e01d      	b.n	801034e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010312:	68fa      	ldr	r2, [r7, #12]
 8010314:	4910      	ldr	r1, [pc, #64]	; (8010358 <f_mount+0xc4>)
 8010316:	69fb      	ldr	r3, [r7, #28]
 8010318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d002      	beq.n	8010328 <f_mount+0x94>
 8010322:	79fb      	ldrb	r3, [r7, #7]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d001      	beq.n	801032c <f_mount+0x98>
 8010328:	2300      	movs	r3, #0
 801032a:	e010      	b.n	801034e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801032c:	f107 010c 	add.w	r1, r7, #12
 8010330:	f107 0308 	add.w	r3, r7, #8
 8010334:	2200      	movs	r2, #0
 8010336:	4618      	mov	r0, r3
 8010338:	f7ff fcda 	bl	800fcf0 <find_volume>
 801033c:	4603      	mov	r3, r0
 801033e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	7dfa      	ldrb	r2, [r7, #23]
 8010344:	4611      	mov	r1, r2
 8010346:	4618      	mov	r0, r3
 8010348:	f7fe fb1d 	bl	800e986 <unlock_fs>
 801034c:	7dfb      	ldrb	r3, [r7, #23]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3720      	adds	r7, #32
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	24014904 	.word	0x24014904

0801035c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b098      	sub	sp, #96	; 0x60
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	4613      	mov	r3, r2
 8010368:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d101      	bne.n	8010374 <f_open+0x18>
 8010370:	2309      	movs	r3, #9
 8010372:	e1c2      	b.n	80106fa <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010374:	79fb      	ldrb	r3, [r7, #7]
 8010376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801037a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801037c:	79fa      	ldrb	r2, [r7, #7]
 801037e:	f107 0110 	add.w	r1, r7, #16
 8010382:	f107 0308 	add.w	r3, r7, #8
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff fcb2 	bl	800fcf0 <find_volume>
 801038c:	4603      	mov	r3, r0
 801038e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010396:	2b00      	cmp	r3, #0
 8010398:	f040 819f 	bne.w	80106da <f_open+0x37e>
		dj.obj.fs = fs;
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80103a0:	68ba      	ldr	r2, [r7, #8]
 80103a2:	f107 0314 	add.w	r3, r7, #20
 80103a6:	4611      	mov	r1, r2
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fb91 	bl	800fad0 <follow_path>
 80103ae:	4603      	mov	r3, r0
 80103b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80103b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d11a      	bne.n	80103f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80103bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80103c0:	b25b      	sxtb	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	da03      	bge.n	80103ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80103c6:	2306      	movs	r3, #6
 80103c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103cc:	e011      	b.n	80103f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	f023 0301 	bic.w	r3, r3, #1
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	bf14      	ite	ne
 80103d8:	2301      	movne	r3, #1
 80103da:	2300      	moveq	r3, #0
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	461a      	mov	r2, r3
 80103e0:	f107 0314 	add.w	r3, r7, #20
 80103e4:	4611      	mov	r1, r2
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fe fae8 	bl	800e9bc <chk_lock>
 80103ec:	4603      	mov	r3, r0
 80103ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80103f2:	79fb      	ldrb	r3, [r7, #7]
 80103f4:	f003 031c 	and.w	r3, r3, #28
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d07f      	beq.n	80104fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80103fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010400:	2b00      	cmp	r3, #0
 8010402:	d017      	beq.n	8010434 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010408:	2b04      	cmp	r3, #4
 801040a:	d10e      	bne.n	801042a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801040c:	f7fe fb32 	bl	800ea74 <enq_lock>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d006      	beq.n	8010424 <f_open+0xc8>
 8010416:	f107 0314 	add.w	r3, r7, #20
 801041a:	4618      	mov	r0, r3
 801041c:	f7ff fa91 	bl	800f942 <dir_register>
 8010420:	4603      	mov	r3, r0
 8010422:	e000      	b.n	8010426 <f_open+0xca>
 8010424:	2312      	movs	r3, #18
 8010426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801042a:	79fb      	ldrb	r3, [r7, #7]
 801042c:	f043 0308 	orr.w	r3, r3, #8
 8010430:	71fb      	strb	r3, [r7, #7]
 8010432:	e010      	b.n	8010456 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010434:	7ebb      	ldrb	r3, [r7, #26]
 8010436:	f003 0311 	and.w	r3, r3, #17
 801043a:	2b00      	cmp	r3, #0
 801043c:	d003      	beq.n	8010446 <f_open+0xea>
					res = FR_DENIED;
 801043e:	2307      	movs	r3, #7
 8010440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010444:	e007      	b.n	8010456 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010446:	79fb      	ldrb	r3, [r7, #7]
 8010448:	f003 0304 	and.w	r3, r3, #4
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <f_open+0xfa>
 8010450:	2308      	movs	r3, #8
 8010452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801045a:	2b00      	cmp	r3, #0
 801045c:	d168      	bne.n	8010530 <f_open+0x1d4>
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	f003 0308 	and.w	r3, r3, #8
 8010464:	2b00      	cmp	r3, #0
 8010466:	d063      	beq.n	8010530 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010468:	f7fd fe98 	bl	800e19c <get_fattime>
 801046c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801046e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010470:	330e      	adds	r3, #14
 8010472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010474:	4618      	mov	r0, r3
 8010476:	f7fe f9c7 	bl	800e808 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801047a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801047c:	3316      	adds	r3, #22
 801047e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010480:	4618      	mov	r0, r3
 8010482:	f7fe f9c1 	bl	800e808 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010488:	330b      	adds	r3, #11
 801048a:	2220      	movs	r2, #32
 801048c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010492:	4611      	mov	r1, r2
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff f9c0 	bl	800f81a <ld_clust>
 801049a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104a0:	2200      	movs	r2, #0
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7ff f9d8 	bl	800f858 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80104a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104aa:	331c      	adds	r3, #28
 80104ac:	2100      	movs	r1, #0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe f9aa 	bl	800e808 <st_dword>
					fs->wflag = 1;
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	2201      	movs	r2, #1
 80104b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80104ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d037      	beq.n	8010530 <f_open+0x1d4>
						dw = fs->winsect;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104c4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80104c6:	f107 0314 	add.w	r3, r7, #20
 80104ca:	2200      	movs	r2, #0
 80104cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fe fec8 	bl	800f264 <remove_chain>
 80104d4:	4603      	mov	r3, r0
 80104d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80104da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d126      	bne.n	8010530 <f_open+0x1d4>
							res = move_window(fs, dw);
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fe fc18 	bl	800ed1c <move_window>
 80104ec:	4603      	mov	r3, r0
 80104ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104f6:	3a01      	subs	r2, #1
 80104f8:	615a      	str	r2, [r3, #20]
 80104fa:	e019      	b.n	8010530 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80104fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010500:	2b00      	cmp	r3, #0
 8010502:	d115      	bne.n	8010530 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010504:	7ebb      	ldrb	r3, [r7, #26]
 8010506:	f003 0310 	and.w	r3, r3, #16
 801050a:	2b00      	cmp	r3, #0
 801050c:	d003      	beq.n	8010516 <f_open+0x1ba>
					res = FR_NO_FILE;
 801050e:	2304      	movs	r3, #4
 8010510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010514:	e00c      	b.n	8010530 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010516:	79fb      	ldrb	r3, [r7, #7]
 8010518:	f003 0302 	and.w	r3, r3, #2
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <f_open+0x1d4>
 8010520:	7ebb      	ldrb	r3, [r7, #26]
 8010522:	f003 0301 	and.w	r3, r3, #1
 8010526:	2b00      	cmp	r3, #0
 8010528:	d002      	beq.n	8010530 <f_open+0x1d4>
						res = FR_DENIED;
 801052a:	2307      	movs	r3, #7
 801052c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010534:	2b00      	cmp	r3, #0
 8010536:	d128      	bne.n	801058a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010538:	79fb      	ldrb	r3, [r7, #7]
 801053a:	f003 0308 	and.w	r3, r3, #8
 801053e:	2b00      	cmp	r3, #0
 8010540:	d003      	beq.n	801054a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010542:	79fb      	ldrb	r3, [r7, #7]
 8010544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010548:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010558:	79fb      	ldrb	r3, [r7, #7]
 801055a:	f023 0301 	bic.w	r3, r3, #1
 801055e:	2b00      	cmp	r3, #0
 8010560:	bf14      	ite	ne
 8010562:	2301      	movne	r3, #1
 8010564:	2300      	moveq	r3, #0
 8010566:	b2db      	uxtb	r3, r3
 8010568:	461a      	mov	r2, r3
 801056a:	f107 0314 	add.w	r3, r7, #20
 801056e:	4611      	mov	r1, r2
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe faa1 	bl	800eab8 <inc_lock>
 8010576:	4602      	mov	r2, r0
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d102      	bne.n	801058a <f_open+0x22e>
 8010584:	2302      	movs	r3, #2
 8010586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801058a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801058e:	2b00      	cmp	r3, #0
 8010590:	f040 80a3 	bne.w	80106da <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff f93d 	bl	800f81a <ld_clust>
 80105a0:	4602      	mov	r2, r0
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80105a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a8:	331c      	adds	r3, #28
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe f8ee 	bl	800e78c <ld_dword>
 80105b0:	4602      	mov	r2, r0
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	88da      	ldrh	r2, [r3, #6]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	79fa      	ldrb	r2, [r7, #7]
 80105ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2200      	movs	r2, #0
 80105d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2200      	movs	r2, #0
 80105e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	3330      	adds	r3, #48	; 0x30
 80105e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80105ea:	2100      	movs	r1, #0
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe f958 	bl	800e8a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80105f2:	79fb      	ldrb	r3, [r7, #7]
 80105f4:	f003 0320 	and.w	r3, r3, #32
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d06e      	beq.n	80106da <f_open+0x37e>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d06a      	beq.n	80106da <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	68da      	ldr	r2, [r3, #12]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	895b      	ldrh	r3, [r3, #10]
 8010610:	461a      	mov	r2, r3
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	899b      	ldrh	r3, [r3, #12]
 8010616:	fb03 f302 	mul.w	r3, r3, r2
 801061a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	657b      	str	r3, [r7, #84]	; 0x54
 8010628:	e016      	b.n	8010658 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801062e:	4618      	mov	r0, r3
 8010630:	f7fe fc31 	bl	800ee96 <get_fat>
 8010634:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010638:	2b01      	cmp	r3, #1
 801063a:	d802      	bhi.n	8010642 <f_open+0x2e6>
 801063c:	2302      	movs	r3, #2
 801063e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010648:	d102      	bne.n	8010650 <f_open+0x2f4>
 801064a:	2301      	movs	r3, #1
 801064c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	657b      	str	r3, [r7, #84]	; 0x54
 8010658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801065c:	2b00      	cmp	r3, #0
 801065e:	d103      	bne.n	8010668 <f_open+0x30c>
 8010660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010664:	429a      	cmp	r2, r3
 8010666:	d8e0      	bhi.n	801062a <f_open+0x2ce>
				}
				fp->clust = clst;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801066c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801066e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010672:	2b00      	cmp	r3, #0
 8010674:	d131      	bne.n	80106da <f_open+0x37e>
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	461a      	mov	r2, r3
 801067c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801067e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010682:	fb02 f201 	mul.w	r2, r2, r1
 8010686:	1a9b      	subs	r3, r3, r2
 8010688:	2b00      	cmp	r3, #0
 801068a:	d026      	beq.n	80106da <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010690:	4618      	mov	r0, r3
 8010692:	f7fe fbe1 	bl	800ee58 <clust2sect>
 8010696:	6478      	str	r0, [r7, #68]	; 0x44
 8010698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801069a:	2b00      	cmp	r3, #0
 801069c:	d103      	bne.n	80106a6 <f_open+0x34a>
						res = FR_INT_ERR;
 801069e:	2302      	movs	r3, #2
 80106a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80106a4:	e019      	b.n	80106da <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	899b      	ldrh	r3, [r3, #12]
 80106aa:	461a      	mov	r2, r3
 80106ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80106b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b4:	441a      	add	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	7858      	ldrb	r0, [r3, #1]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6a1a      	ldr	r2, [r3, #32]
 80106c8:	2301      	movs	r3, #1
 80106ca:	f7fd ffe9 	bl	800e6a0 <disk_read>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d002      	beq.n	80106da <f_open+0x37e>
 80106d4:	2301      	movs	r3, #1
 80106d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80106da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d002      	beq.n	80106e8 <f_open+0x38c>
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2200      	movs	r2, #0
 80106e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80106ee:	4611      	mov	r1, r2
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fe f948 	bl	800e986 <unlock_fs>
 80106f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3760      	adds	r7, #96	; 0x60
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b08c      	sub	sp, #48	; 0x30
 8010706:	af00      	add	r7, sp, #0
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
 801070c:	607a      	str	r2, [r7, #4]
 801070e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	2200      	movs	r2, #0
 8010718:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f107 0210 	add.w	r2, r7, #16
 8010720:	4611      	mov	r1, r2
 8010722:	4618      	mov	r0, r3
 8010724:	f7ff fd6e 	bl	8010204 <validate>
 8010728:	4603      	mov	r3, r0
 801072a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801072e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010732:	2b00      	cmp	r3, #0
 8010734:	d107      	bne.n	8010746 <f_write+0x44>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	7d5b      	ldrb	r3, [r3, #21]
 801073a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801073e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010742:	2b00      	cmp	r3, #0
 8010744:	d009      	beq.n	801075a <f_write+0x58>
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801074c:	4611      	mov	r1, r2
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe f919 	bl	800e986 <unlock_fs>
 8010754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010758:	e192      	b.n	8010a80 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	7d1b      	ldrb	r3, [r3, #20]
 801075e:	f003 0302 	and.w	r3, r3, #2
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <f_write+0x72>
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	2107      	movs	r1, #7
 801076a:	4618      	mov	r0, r3
 801076c:	f7fe f90b 	bl	800e986 <unlock_fs>
 8010770:	2307      	movs	r3, #7
 8010772:	e185      	b.n	8010a80 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	699a      	ldr	r2, [r3, #24]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	441a      	add	r2, r3
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	699b      	ldr	r3, [r3, #24]
 8010780:	429a      	cmp	r2, r3
 8010782:	f080 816a 	bcs.w	8010a5a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	43db      	mvns	r3, r3
 801078c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801078e:	e164      	b.n	8010a5a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	699b      	ldr	r3, [r3, #24]
 8010794:	693a      	ldr	r2, [r7, #16]
 8010796:	8992      	ldrh	r2, [r2, #12]
 8010798:	fbb3 f1f2 	udiv	r1, r3, r2
 801079c:	fb02 f201 	mul.w	r2, r2, r1
 80107a0:	1a9b      	subs	r3, r3, r2
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f040 810f 	bne.w	80109c6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	699b      	ldr	r3, [r3, #24]
 80107ac:	693a      	ldr	r2, [r7, #16]
 80107ae:	8992      	ldrh	r2, [r2, #12]
 80107b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80107b4:	693a      	ldr	r2, [r7, #16]
 80107b6:	8952      	ldrh	r2, [r2, #10]
 80107b8:	3a01      	subs	r2, #1
 80107ba:	4013      	ands	r3, r2
 80107bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80107be:	69bb      	ldr	r3, [r7, #24]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d14d      	bne.n	8010860 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	699b      	ldr	r3, [r3, #24]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d10c      	bne.n	80107e6 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d11a      	bne.n	801080e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2100      	movs	r1, #0
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fe fda6 	bl	800f32e <create_chain>
 80107e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80107e4:	e013      	b.n	801080e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d007      	beq.n	80107fe <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	699b      	ldr	r3, [r3, #24]
 80107f2:	4619      	mov	r1, r3
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f7fe fe32 	bl	800f45e <clmt_clust>
 80107fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80107fc:	e007      	b.n	801080e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	4619      	mov	r1, r3
 8010806:	4610      	mov	r0, r2
 8010808:	f7fe fd91 	bl	800f32e <create_chain>
 801080c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801080e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010810:	2b00      	cmp	r3, #0
 8010812:	f000 8127 	beq.w	8010a64 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010818:	2b01      	cmp	r3, #1
 801081a:	d109      	bne.n	8010830 <f_write+0x12e>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2202      	movs	r2, #2
 8010820:	755a      	strb	r2, [r3, #21]
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	2102      	movs	r1, #2
 8010826:	4618      	mov	r0, r3
 8010828:	f7fe f8ad 	bl	800e986 <unlock_fs>
 801082c:	2302      	movs	r3, #2
 801082e:	e127      	b.n	8010a80 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010836:	d109      	bne.n	801084c <f_write+0x14a>
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2201      	movs	r2, #1
 801083c:	755a      	strb	r2, [r3, #21]
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	2101      	movs	r1, #1
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe f89f 	bl	800e986 <unlock_fs>
 8010848:	2301      	movs	r3, #1
 801084a:	e119      	b.n	8010a80 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010850:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d102      	bne.n	8010860 <f_write+0x15e>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801085e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	7d1b      	ldrb	r3, [r3, #20]
 8010864:	b25b      	sxtb	r3, r3
 8010866:	2b00      	cmp	r3, #0
 8010868:	da1d      	bge.n	80108a6 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	7858      	ldrb	r0, [r3, #1]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6a1a      	ldr	r2, [r3, #32]
 8010878:	2301      	movs	r3, #1
 801087a:	f7fd ff31 	bl	800e6e0 <disk_write>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d009      	beq.n	8010898 <f_write+0x196>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2201      	movs	r2, #1
 8010888:	755a      	strb	r2, [r3, #21]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	2101      	movs	r1, #1
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe f879 	bl	800e986 <unlock_fs>
 8010894:	2301      	movs	r3, #1
 8010896:	e0f3      	b.n	8010a80 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	7d1b      	ldrb	r3, [r3, #20]
 801089c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80108a6:	693a      	ldr	r2, [r7, #16]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	69db      	ldr	r3, [r3, #28]
 80108ac:	4619      	mov	r1, r3
 80108ae:	4610      	mov	r0, r2
 80108b0:	f7fe fad2 	bl	800ee58 <clust2sect>
 80108b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d109      	bne.n	80108d0 <f_write+0x1ce>
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2202      	movs	r2, #2
 80108c0:	755a      	strb	r2, [r3, #21]
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	2102      	movs	r1, #2
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe f85d 	bl	800e986 <unlock_fs>
 80108cc:	2302      	movs	r3, #2
 80108ce:	e0d7      	b.n	8010a80 <f_write+0x37e>
			sect += csect;
 80108d0:	697a      	ldr	r2, [r7, #20]
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	4413      	add	r3, r2
 80108d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	899b      	ldrh	r3, [r3, #12]
 80108dc:	461a      	mov	r2, r3
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80108e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d048      	beq.n	801097e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	4413      	add	r3, r2
 80108f2:	693a      	ldr	r2, [r7, #16]
 80108f4:	8952      	ldrh	r2, [r2, #10]
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d905      	bls.n	8010906 <f_write+0x204>
					cc = fs->csize - csect;
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	895b      	ldrh	r3, [r3, #10]
 80108fe:	461a      	mov	r2, r3
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	7858      	ldrb	r0, [r3, #1]
 801090a:	6a3b      	ldr	r3, [r7, #32]
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	69f9      	ldr	r1, [r7, #28]
 8010910:	f7fd fee6 	bl	800e6e0 <disk_write>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d009      	beq.n	801092e <f_write+0x22c>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2201      	movs	r2, #1
 801091e:	755a      	strb	r2, [r3, #21]
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	2101      	movs	r1, #1
 8010924:	4618      	mov	r0, r3
 8010926:	f7fe f82e 	bl	800e986 <unlock_fs>
 801092a:	2301      	movs	r3, #1
 801092c:	e0a8      	b.n	8010a80 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6a1a      	ldr	r2, [r3, #32]
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	6a3a      	ldr	r2, [r7, #32]
 8010938:	429a      	cmp	r2, r3
 801093a:	d918      	bls.n	801096e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6a1a      	ldr	r2, [r3, #32]
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	8992      	ldrh	r2, [r2, #12]
 801094e:	fb02 f303 	mul.w	r3, r2, r3
 8010952:	69fa      	ldr	r2, [r7, #28]
 8010954:	18d1      	adds	r1, r2, r3
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	899b      	ldrh	r3, [r3, #12]
 801095a:	461a      	mov	r2, r3
 801095c:	f7fd ff80 	bl	800e860 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	7d1b      	ldrb	r3, [r3, #20]
 8010964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010968:	b2da      	uxtb	r2, r3
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	899b      	ldrh	r3, [r3, #12]
 8010972:	461a      	mov	r2, r3
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	fb02 f303 	mul.w	r3, r2, r3
 801097a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801097c:	e050      	b.n	8010a20 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6a1b      	ldr	r3, [r3, #32]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	429a      	cmp	r2, r3
 8010986:	d01b      	beq.n	80109c0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	699a      	ldr	r2, [r3, #24]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010990:	429a      	cmp	r2, r3
 8010992:	d215      	bcs.n	80109c0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	7858      	ldrb	r0, [r3, #1]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801099e:	2301      	movs	r3, #1
 80109a0:	697a      	ldr	r2, [r7, #20]
 80109a2:	f7fd fe7d 	bl	800e6a0 <disk_read>
 80109a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d009      	beq.n	80109c0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2201      	movs	r2, #1
 80109b0:	755a      	strb	r2, [r3, #21]
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2101      	movs	r1, #1
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fd ffe5 	bl	800e986 <unlock_fs>
 80109bc:	2301      	movs	r3, #1
 80109be:	e05f      	b.n	8010a80 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	697a      	ldr	r2, [r7, #20]
 80109c4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	899b      	ldrh	r3, [r3, #12]
 80109ca:	4618      	mov	r0, r3
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	699b      	ldr	r3, [r3, #24]
 80109d0:	693a      	ldr	r2, [r7, #16]
 80109d2:	8992      	ldrh	r2, [r2, #12]
 80109d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80109d8:	fb02 f201 	mul.w	r2, r2, r1
 80109dc:	1a9b      	subs	r3, r3, r2
 80109de:	1ac3      	subs	r3, r0, r3
 80109e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80109e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d901      	bls.n	80109ee <f_write+0x2ec>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	699b      	ldr	r3, [r3, #24]
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	8992      	ldrh	r2, [r2, #12]
 80109fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a00:	fb02 f200 	mul.w	r2, r2, r0
 8010a04:	1a9b      	subs	r3, r3, r2
 8010a06:	440b      	add	r3, r1
 8010a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a0a:	69f9      	ldr	r1, [r7, #28]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fd ff27 	bl	800e860 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	7d1b      	ldrb	r3, [r3, #20]
 8010a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010a20:	69fa      	ldr	r2, [r7, #28]
 8010a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a24:	4413      	add	r3, r2
 8010a26:	61fb      	str	r3, [r7, #28]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	699a      	ldr	r2, [r3, #24]
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2e:	441a      	add	r2, r3
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	619a      	str	r2, [r3, #24]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	68da      	ldr	r2, [r3, #12]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	bf38      	it	cc
 8010a40:	461a      	movcc	r2, r3
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	60da      	str	r2, [r3, #12]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	441a      	add	r2, r3
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f47f ae97 	bne.w	8010790 <f_write+0x8e>
 8010a62:	e000      	b.n	8010a66 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010a64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	7d1b      	ldrb	r3, [r3, #20]
 8010a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	2100      	movs	r1, #0
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fd ff84 	bl	800e986 <unlock_fs>
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3730      	adds	r7, #48	; 0x30
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f107 0208 	add.w	r2, r7, #8
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7ff fbb3 	bl	8010204 <validate>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010aa2:	7dfb      	ldrb	r3, [r7, #23]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d16d      	bne.n	8010b84 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d067      	beq.n	8010b84 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	7d1b      	ldrb	r3, [r3, #20]
 8010ab8:	b25b      	sxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	da1a      	bge.n	8010af4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	7858      	ldrb	r0, [r3, #1]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a1a      	ldr	r2, [r3, #32]
 8010acc:	2301      	movs	r3, #1
 8010ace:	f7fd fe07 	bl	800e6e0 <disk_write>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d006      	beq.n	8010ae6 <f_sync+0x5e>
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2101      	movs	r1, #1
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fd ff52 	bl	800e986 <unlock_fs>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e055      	b.n	8010b92 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	7d1b      	ldrb	r3, [r3, #20]
 8010aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010af4:	f7fd fb52 	bl	800e19c <get_fattime>
 8010af8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010afa:	68ba      	ldr	r2, [r7, #8]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b00:	4619      	mov	r1, r3
 8010b02:	4610      	mov	r0, r2
 8010b04:	f7fe f90a 	bl	800ed1c <move_window>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010b0c:	7dfb      	ldrb	r3, [r7, #23]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d138      	bne.n	8010b84 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b16:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	330b      	adds	r3, #11
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	330b      	adds	r3, #11
 8010b22:	f042 0220 	orr.w	r2, r2, #32
 8010b26:	b2d2      	uxtb	r2, r2
 8010b28:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6818      	ldr	r0, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	461a      	mov	r2, r3
 8010b34:	68f9      	ldr	r1, [r7, #12]
 8010b36:	f7fe fe8f 	bl	800f858 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f103 021c 	add.w	r2, r3, #28
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	4619      	mov	r1, r3
 8010b46:	4610      	mov	r0, r2
 8010b48:	f7fd fe5e 	bl	800e808 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	3316      	adds	r3, #22
 8010b50:	6939      	ldr	r1, [r7, #16]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fd fe58 	bl	800e808 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3312      	adds	r3, #18
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fd fe37 	bl	800e7d2 <st_word>
					fs->wflag = 1;
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	2201      	movs	r2, #1
 8010b68:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe f903 	bl	800ed78 <sync_fs>
 8010b72:	4603      	mov	r3, r0
 8010b74:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	7dfa      	ldrb	r2, [r7, #23]
 8010b88:	4611      	mov	r1, r2
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fd fefb 	bl	800e986 <unlock_fs>
 8010b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3718      	adds	r7, #24
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b084      	sub	sp, #16
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff ff70 	bl	8010a88 <f_sync>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010bac:	7bfb      	ldrb	r3, [r7, #15]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d11d      	bne.n	8010bee <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f107 0208 	add.w	r2, r7, #8
 8010bb8:	4611      	mov	r1, r2
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff fb22 	bl	8010204 <validate>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d111      	bne.n	8010bee <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe f800 	bl	800ebd4 <dec_lock>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010bd8:	7bfb      	ldrb	r3, [r7, #15]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d102      	bne.n	8010be4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2100      	movs	r1, #0
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fd fecc 	bl	800e986 <unlock_fs>
#endif
		}
	}
	return res;
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b090      	sub	sp, #64	; 0x40
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f107 0208 	add.w	r2, r7, #8
 8010c08:	4611      	mov	r1, r2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ff fafa 	bl	8010204 <validate>
 8010c10:	4603      	mov	r3, r0
 8010c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010c16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d103      	bne.n	8010c26 <f_lseek+0x2e>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	7d5b      	ldrb	r3, [r3, #21]
 8010c22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d009      	beq.n	8010c42 <f_lseek+0x4a>
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010c34:	4611      	mov	r1, r2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fd fea5 	bl	800e986 <unlock_fs>
 8010c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c40:	e244      	b.n	80110cc <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f000 80f2 	beq.w	8010e30 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c52:	d164      	bne.n	8010d1e <f_lseek+0x126>
			tbl = fp->cltbl;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c58:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	1d1a      	adds	r2, r3, #4
 8010c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	617b      	str	r3, [r7, #20]
 8010c64:	2302      	movs	r3, #2
 8010c66:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	689b      	ldr	r3, [r3, #8]
 8010c6c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d044      	beq.n	8010cfe <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	613b      	str	r3, [r7, #16]
 8010c78:	2300      	movs	r3, #0
 8010c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7e:	3302      	adds	r3, #2
 8010c80:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	60fb      	str	r3, [r7, #12]
 8010c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c88:	3301      	adds	r3, #1
 8010c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7fe f900 	bl	800ee96 <get_fat>
 8010c96:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d809      	bhi.n	8010cb2 <f_lseek+0xba>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2202      	movs	r2, #2
 8010ca2:	755a      	strb	r2, [r3, #21]
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	2102      	movs	r1, #2
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fd fe6c 	bl	800e986 <unlock_fs>
 8010cae:	2302      	movs	r3, #2
 8010cb0:	e20c      	b.n	80110cc <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cb8:	d109      	bne.n	8010cce <f_lseek+0xd6>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	755a      	strb	r2, [r3, #21]
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2101      	movs	r1, #1
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fd fe5e 	bl	800e986 <unlock_fs>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e1fe      	b.n	80110cc <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3301      	adds	r3, #1
 8010cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d0d4      	beq.n	8010c82 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d809      	bhi.n	8010cf4 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	1d1a      	adds	r2, r3, #4
 8010ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8010ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ce8:	601a      	str	r2, [r3, #0]
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	1d1a      	adds	r2, r3, #4
 8010cee:	627a      	str	r2, [r7, #36]	; 0x24
 8010cf0:	693a      	ldr	r2, [r7, #16]
 8010cf2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	69db      	ldr	r3, [r3, #28]
 8010cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d3ba      	bcc.n	8010c74 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d04:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d803      	bhi.n	8010d16 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	e1d1      	b.n	80110ba <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010d16:	2311      	movs	r3, #17
 8010d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d1c:	e1cd      	b.n	80110ba <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	683a      	ldr	r2, [r7, #0]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d902      	bls.n	8010d2e <f_lseek+0x136>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	683a      	ldr	r2, [r7, #0]
 8010d32:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f000 81bf 	beq.w	80110ba <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	4619      	mov	r1, r3
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f7fe fb8b 	bl	800f45e <clmt_clust>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010d4e:	68ba      	ldr	r2, [r7, #8]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	69db      	ldr	r3, [r3, #28]
 8010d54:	4619      	mov	r1, r3
 8010d56:	4610      	mov	r0, r2
 8010d58:	f7fe f87e 	bl	800ee58 <clust2sect>
 8010d5c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d109      	bne.n	8010d78 <f_lseek+0x180>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2202      	movs	r2, #2
 8010d68:	755a      	strb	r2, [r3, #21]
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	2102      	movs	r1, #2
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fd fe09 	bl	800e986 <unlock_fs>
 8010d74:	2302      	movs	r3, #2
 8010d76:	e1a9      	b.n	80110cc <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	8992      	ldrh	r2, [r2, #12]
 8010d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d84:	68ba      	ldr	r2, [r7, #8]
 8010d86:	8952      	ldrh	r2, [r2, #10]
 8010d88:	3a01      	subs	r2, #1
 8010d8a:	4013      	ands	r3, r2
 8010d8c:	69ba      	ldr	r2, [r7, #24]
 8010d8e:	4413      	add	r3, r2
 8010d90:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	699b      	ldr	r3, [r3, #24]
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	8992      	ldrh	r2, [r2, #12]
 8010d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d9e:	fb02 f201 	mul.w	r2, r2, r1
 8010da2:	1a9b      	subs	r3, r3, r2
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f000 8188 	beq.w	80110ba <f_lseek+0x4c2>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a1b      	ldr	r3, [r3, #32]
 8010dae:	69ba      	ldr	r2, [r7, #24]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	f000 8182 	beq.w	80110ba <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	7d1b      	ldrb	r3, [r3, #20]
 8010dba:	b25b      	sxtb	r3, r3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	da1d      	bge.n	8010dfc <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	7858      	ldrb	r0, [r3, #1]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a1a      	ldr	r2, [r3, #32]
 8010dce:	2301      	movs	r3, #1
 8010dd0:	f7fd fc86 	bl	800e6e0 <disk_write>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d009      	beq.n	8010dee <f_lseek+0x1f6>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	755a      	strb	r2, [r3, #21]
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	2101      	movs	r1, #1
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fd fdce 	bl	800e986 <unlock_fs>
 8010dea:	2301      	movs	r3, #1
 8010dec:	e16e      	b.n	80110cc <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	7d1b      	ldrb	r3, [r3, #20]
 8010df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	7858      	ldrb	r0, [r3, #1]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e06:	2301      	movs	r3, #1
 8010e08:	69ba      	ldr	r2, [r7, #24]
 8010e0a:	f7fd fc49 	bl	800e6a0 <disk_read>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d009      	beq.n	8010e28 <f_lseek+0x230>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2201      	movs	r2, #1
 8010e18:	755a      	strb	r2, [r3, #21]
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fd fdb1 	bl	800e986 <unlock_fs>
 8010e24:	2301      	movs	r3, #1
 8010e26:	e151      	b.n	80110cc <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	69ba      	ldr	r2, [r7, #24]
 8010e2c:	621a      	str	r2, [r3, #32]
 8010e2e:	e144      	b.n	80110ba <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	683a      	ldr	r2, [r7, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d908      	bls.n	8010e4c <f_lseek+0x254>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7d1b      	ldrb	r3, [r3, #20]
 8010e3e:	f003 0302 	and.w	r3, r3, #2
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d102      	bne.n	8010e4c <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	699b      	ldr	r3, [r3, #24]
 8010e50:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010e52:	2300      	movs	r3, #0
 8010e54:	637b      	str	r3, [r7, #52]	; 0x34
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e5a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 80ce 	beq.w	8011000 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	895b      	ldrh	r3, [r3, #10]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	899b      	ldrh	r3, [r3, #12]
 8010e6e:	fb03 f302 	mul.w	r3, r3, r2
 8010e72:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010e74:	6a3b      	ldr	r3, [r7, #32]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d01b      	beq.n	8010eb2 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	1e5a      	subs	r2, r3, #1
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	1e59      	subs	r1, r3, #1
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d30f      	bcc.n	8010eb2 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	1e5a      	subs	r2, r3, #1
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	425b      	negs	r3, r3
 8010e9a:	401a      	ands	r2, r3
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	683a      	ldr	r2, [r7, #0]
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	69db      	ldr	r3, [r3, #28]
 8010eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8010eb0:	e02c      	b.n	8010f0c <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d123      	bne.n	8010f06 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe fa33 	bl	800f32e <create_chain>
 8010ec8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d109      	bne.n	8010ee4 <f_lseek+0x2ec>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2202      	movs	r2, #2
 8010ed4:	755a      	strb	r2, [r3, #21]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	2102      	movs	r1, #2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fd fd53 	bl	800e986 <unlock_fs>
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	e0f3      	b.n	80110cc <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eea:	d109      	bne.n	8010f00 <f_lseek+0x308>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	755a      	strb	r2, [r3, #21]
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fd fd45 	bl	800e986 <unlock_fs>
 8010efc:	2301      	movs	r3, #1
 8010efe:	e0e5      	b.n	80110cc <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f04:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f0a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d076      	beq.n	8011000 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8010f12:	e044      	b.n	8010f9e <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8010f14:	683a      	ldr	r2, [r7, #0]
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	603b      	str	r3, [r7, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	699a      	ldr	r2, [r3, #24]
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	441a      	add	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	7d1b      	ldrb	r3, [r3, #20]
 8010f2c:	f003 0302 	and.w	r3, r3, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00b      	beq.n	8010f4c <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fe f9f8 	bl	800f32e <create_chain>
 8010f3e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d108      	bne.n	8010f58 <f_lseek+0x360>
							ofs = 0; break;
 8010f46:	2300      	movs	r3, #0
 8010f48:	603b      	str	r3, [r7, #0]
 8010f4a:	e02c      	b.n	8010fa6 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fd ffa0 	bl	800ee96 <get_fat>
 8010f56:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5e:	d109      	bne.n	8010f74 <f_lseek+0x37c>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	755a      	strb	r2, [r3, #21]
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	2101      	movs	r1, #1
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fd fd0b 	bl	800e986 <unlock_fs>
 8010f70:	2301      	movs	r3, #1
 8010f72:	e0ab      	b.n	80110cc <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d904      	bls.n	8010f84 <f_lseek+0x38c>
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	69db      	ldr	r3, [r3, #28]
 8010f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d309      	bcc.n	8010f98 <f_lseek+0x3a0>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2202      	movs	r2, #2
 8010f88:	755a      	strb	r2, [r3, #21]
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	2102      	movs	r1, #2
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fd fcf9 	bl	800e986 <unlock_fs>
 8010f94:	2302      	movs	r3, #2
 8010f96:	e099      	b.n	80110cc <f_lseek+0x4d4>
					fp->clust = clst;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f9c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010f9e:	683a      	ldr	r2, [r7, #0]
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d8b6      	bhi.n	8010f14 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	699a      	ldr	r2, [r3, #24]
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	441a      	add	r2, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	899b      	ldrh	r3, [r3, #12]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fbe:	fb02 f201 	mul.w	r2, r2, r1
 8010fc2:	1a9b      	subs	r3, r3, r2
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d01b      	beq.n	8011000 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fd ff43 	bl	800ee58 <clust2sect>
 8010fd2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d109      	bne.n	8010fee <f_lseek+0x3f6>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2202      	movs	r2, #2
 8010fde:	755a      	strb	r2, [r3, #21]
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	2102      	movs	r1, #2
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fd fcce 	bl	800e986 <unlock_fs>
 8010fea:	2302      	movs	r3, #2
 8010fec:	e06e      	b.n	80110cc <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	899b      	ldrh	r3, [r3, #12]
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ffc:	4413      	add	r3, r2
 8010ffe:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	699a      	ldr	r2, [r3, #24]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	429a      	cmp	r2, r3
 801100a:	d90a      	bls.n	8011022 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	699a      	ldr	r2, [r3, #24]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	7d1b      	ldrb	r3, [r3, #20]
 8011018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801101c:	b2da      	uxtb	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	699b      	ldr	r3, [r3, #24]
 8011026:	68ba      	ldr	r2, [r7, #8]
 8011028:	8992      	ldrh	r2, [r2, #12]
 801102a:	fbb3 f1f2 	udiv	r1, r3, r2
 801102e:	fb02 f201 	mul.w	r2, r2, r1
 8011032:	1a9b      	subs	r3, r3, r2
 8011034:	2b00      	cmp	r3, #0
 8011036:	d040      	beq.n	80110ba <f_lseek+0x4c2>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a1b      	ldr	r3, [r3, #32]
 801103c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801103e:	429a      	cmp	r2, r3
 8011040:	d03b      	beq.n	80110ba <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	7d1b      	ldrb	r3, [r3, #20]
 8011046:	b25b      	sxtb	r3, r3
 8011048:	2b00      	cmp	r3, #0
 801104a:	da1d      	bge.n	8011088 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	7858      	ldrb	r0, [r3, #1]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6a1a      	ldr	r2, [r3, #32]
 801105a:	2301      	movs	r3, #1
 801105c:	f7fd fb40 	bl	800e6e0 <disk_write>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d009      	beq.n	801107a <f_lseek+0x482>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2201      	movs	r2, #1
 801106a:	755a      	strb	r2, [r3, #21]
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	2101      	movs	r1, #1
 8011070:	4618      	mov	r0, r3
 8011072:	f7fd fc88 	bl	800e986 <unlock_fs>
 8011076:	2301      	movs	r3, #1
 8011078:	e028      	b.n	80110cc <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	7d1b      	ldrb	r3, [r3, #20]
 801107e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011082:	b2da      	uxtb	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	7858      	ldrb	r0, [r3, #1]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011092:	2301      	movs	r3, #1
 8011094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011096:	f7fd fb03 	bl	800e6a0 <disk_read>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d009      	beq.n	80110b4 <f_lseek+0x4bc>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	755a      	strb	r2, [r3, #21]
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	2101      	movs	r1, #1
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fd fc6b 	bl	800e986 <unlock_fs>
 80110b0:	2301      	movs	r3, #1
 80110b2:	e00b      	b.n	80110cc <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110b8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fd fc5f 	bl	800e986 <unlock_fs>
 80110c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3740      	adds	r7, #64	; 0x40
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b087      	sub	sp, #28
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	4613      	mov	r3, r2
 80110e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80110e2:	2301      	movs	r3, #1
 80110e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80110ea:	4b1f      	ldr	r3, [pc, #124]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 80110ec:	7a5b      	ldrb	r3, [r3, #9]
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d131      	bne.n	8011158 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80110f4:	4b1c      	ldr	r3, [pc, #112]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 80110f6:	7a5b      	ldrb	r3, [r3, #9]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	461a      	mov	r2, r3
 80110fc:	4b1a      	ldr	r3, [pc, #104]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 80110fe:	2100      	movs	r1, #0
 8011100:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011102:	4b19      	ldr	r3, [pc, #100]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 8011104:	7a5b      	ldrb	r3, [r3, #9]
 8011106:	b2db      	uxtb	r3, r3
 8011108:	4a17      	ldr	r2, [pc, #92]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	4413      	add	r3, r2
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011112:	4b15      	ldr	r3, [pc, #84]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 8011114:	7a5b      	ldrb	r3, [r3, #9]
 8011116:	b2db      	uxtb	r3, r3
 8011118:	461a      	mov	r2, r3
 801111a:	4b13      	ldr	r3, [pc, #76]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 801111c:	4413      	add	r3, r2
 801111e:	79fa      	ldrb	r2, [r7, #7]
 8011120:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011122:	4b11      	ldr	r3, [pc, #68]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 8011124:	7a5b      	ldrb	r3, [r3, #9]
 8011126:	b2db      	uxtb	r3, r3
 8011128:	1c5a      	adds	r2, r3, #1
 801112a:	b2d1      	uxtb	r1, r2
 801112c:	4a0e      	ldr	r2, [pc, #56]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 801112e:	7251      	strb	r1, [r2, #9]
 8011130:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011132:	7dbb      	ldrb	r3, [r7, #22]
 8011134:	3330      	adds	r3, #48	; 0x30
 8011136:	b2da      	uxtb	r2, r3
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	3301      	adds	r3, #1
 8011140:	223a      	movs	r2, #58	; 0x3a
 8011142:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	3302      	adds	r3, #2
 8011148:	222f      	movs	r2, #47	; 0x2f
 801114a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	3303      	adds	r3, #3
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011154:	2300      	movs	r3, #0
 8011156:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011158:	7dfb      	ldrb	r3, [r7, #23]
}
 801115a:	4618      	mov	r0, r3
 801115c:	371c      	adds	r7, #28
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	2401492c 	.word	0x2401492c

0801116c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011176:	2200      	movs	r2, #0
 8011178:	6839      	ldr	r1, [r7, #0]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff ffaa 	bl	80110d4 <FATFS_LinkDriverEx>
 8011180:	4603      	mov	r3, r0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b086      	sub	sp, #24
 801118e:	af00      	add	r7, sp, #0
 8011190:	4603      	mov	r3, r0
 8011192:	6039      	str	r1, [r7, #0]
 8011194:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011196:	2300      	movs	r3, #0
 8011198:	60fb      	str	r3, [r7, #12]
 801119a:	2300      	movs	r3, #0
 801119c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801119e:	f107 030c 	add.w	r3, r7, #12
 80111a2:	2101      	movs	r1, #1
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 f961 	bl	801146c <osSemaphoreCreate>
 80111aa:	4602      	mov	r2, r0
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	bf14      	ite	ne
 80111b8:	2301      	movne	r3, #1
 80111ba:	2300      	moveq	r3, #0
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	617b      	str	r3, [r7, #20]

    return ret;
 80111c0:	697b      	ldr	r3, [r7, #20]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3718      	adds	r7, #24
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b082      	sub	sp, #8
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 fa02 	bl	80115dc <osSemaphoreDelete>
#endif
    return 1;
 80111d8:	2301      	movs	r3, #1
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b084      	sub	sp, #16
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80111ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 f96e 	bl	80114d4 <osSemaphoreWait>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d101      	bne.n	8011202 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80111fe:	2301      	movs	r3, #1
 8011200:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011202:	68fb      	ldr	r3, [r7, #12]
}
 8011204:	4618      	mov	r0, r3
 8011206:	3710      	adds	r7, #16
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 f9ab 	bl	8011570 <osSemaphoreRelease>
#endif
}
 801121a:	bf00      	nop
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011222:	b480      	push	{r7}
 8011224:	b085      	sub	sp, #20
 8011226:	af00      	add	r7, sp, #0
 8011228:	4603      	mov	r3, r0
 801122a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011234:	2b84      	cmp	r3, #132	; 0x84
 8011236:	d005      	beq.n	8011244 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011238:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	4413      	add	r3, r2
 8011240:	3303      	adds	r3, #3
 8011242:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011244:	68fb      	ldr	r3, [r7, #12]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011258:	f3ef 8305 	mrs	r3, IPSR
 801125c:	607b      	str	r3, [r7, #4]
  return(result);
 801125e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011260:	2b00      	cmp	r3, #0
 8011262:	bf14      	ite	ne
 8011264:	2301      	movne	r3, #1
 8011266:	2300      	moveq	r3, #0
 8011268:	b2db      	uxtb	r3, r3
}
 801126a:	4618      	mov	r0, r3
 801126c:	370c      	adds	r7, #12
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801127a:	f002 fc17 	bl	8013aac <vTaskStartScheduler>
  
  return osOK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	bd80      	pop	{r7, pc}

08011284 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011288:	f003 f826 	bl	80142d8 <xTaskGetSchedulerState>
 801128c:	4603      	mov	r3, r0
 801128e:	2b01      	cmp	r3, #1
 8011290:	d101      	bne.n	8011296 <osKernelRunning+0x12>
    return 0;
 8011292:	2300      	movs	r3, #0
 8011294:	e000      	b.n	8011298 <osKernelRunning+0x14>
  else
    return 1;
 8011296:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011298:	4618      	mov	r0, r3
 801129a:	bd80      	pop	{r7, pc}

0801129c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80112a0:	f7ff ffd7 	bl	8011252 <inHandlerMode>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80112aa:	f002 fd17 	bl	8013cdc <xTaskGetTickCountFromISR>
 80112ae:	4603      	mov	r3, r0
 80112b0:	e002      	b.n	80112b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80112b2:	f002 fd03 	bl	8013cbc <xTaskGetTickCount>
 80112b6:	4603      	mov	r3, r0
  }
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	bd80      	pop	{r7, pc}

080112bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80112bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112be:	b089      	sub	sp, #36	; 0x24
 80112c0:	af04      	add	r7, sp, #16
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d020      	beq.n	8011310 <osThreadCreate+0x54>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d01c      	beq.n	8011310 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	685c      	ldr	r4, [r3, #4]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681d      	ldr	r5, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	691e      	ldr	r6, [r3, #16]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7ff ff9a 	bl	8011222 <makeFreeRtosPriority>
 80112ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112f8:	9202      	str	r2, [sp, #8]
 80112fa:	9301      	str	r3, [sp, #4]
 80112fc:	9100      	str	r1, [sp, #0]
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	4632      	mov	r2, r6
 8011302:	4629      	mov	r1, r5
 8011304:	4620      	mov	r0, r4
 8011306:	f002 f8b3 	bl	8013470 <xTaskCreateStatic>
 801130a:	4603      	mov	r3, r0
 801130c:	60fb      	str	r3, [r7, #12]
 801130e:	e01c      	b.n	801134a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	685c      	ldr	r4, [r3, #4]
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801131c:	b29e      	uxth	r6, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff ff7c 	bl	8011222 <makeFreeRtosPriority>
 801132a:	4602      	mov	r2, r0
 801132c:	f107 030c 	add.w	r3, r7, #12
 8011330:	9301      	str	r3, [sp, #4]
 8011332:	9200      	str	r2, [sp, #0]
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	4632      	mov	r2, r6
 8011338:	4629      	mov	r1, r5
 801133a:	4620      	mov	r0, r4
 801133c:	f002 f8f2 	bl	8013524 <xTaskCreate>
 8011340:	4603      	mov	r3, r0
 8011342:	2b01      	cmp	r3, #1
 8011344:	d001      	beq.n	801134a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011346:	2300      	movs	r3, #0
 8011348:	e000      	b.n	801134c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801134a:	68fb      	ldr	r3, [r7, #12]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3714      	adds	r7, #20
 8011350:	46bd      	mov	sp, r7
 8011352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011354 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af02      	add	r7, sp, #8
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011366:	f7ff ff74 	bl	8011252 <inHandlerMode>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01c      	beq.n	80113aa <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011370:	6839      	ldr	r1, [r7, #0]
 8011372:	f107 0208 	add.w	r2, r7, #8
 8011376:	f107 030c 	add.w	r3, r7, #12
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	4613      	mov	r3, r2
 801137e:	2201      	movs	r2, #1
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f003 fa83 	bl	801488c <xTaskGenericNotifyFromISR>
 8011386:	4603      	mov	r3, r0
 8011388:	2b01      	cmp	r3, #1
 801138a:	d002      	beq.n	8011392 <osSignalSet+0x3e>
      return 0x80000000;
 801138c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011390:	e019      	b.n	80113c6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d015      	beq.n	80113c4 <osSignalSet+0x70>
 8011398:	4b0d      	ldr	r3, [pc, #52]	; (80113d0 <osSignalSet+0x7c>)
 801139a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801139e:	601a      	str	r2, [r3, #0]
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	e00c      	b.n	80113c4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80113aa:	6839      	ldr	r1, [r7, #0]
 80113ac:	f107 0308 	add.w	r3, r7, #8
 80113b0:	2201      	movs	r2, #1
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f003 f9b8 	bl	8014728 <xTaskGenericNotify>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d002      	beq.n	80113c4 <osSignalSet+0x70>
    return 0x80000000;
 80113be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113c2:	e000      	b.n	80113c6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80113c4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	e000ed04 	.word	0xe000ed04

080113d4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80113d4:	b590      	push	{r4, r7, lr}
 80113d6:	b089      	sub	sp, #36	; 0x24
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80113e0:	2300      	movs	r3, #0
 80113e2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80113e4:	2300      	movs	r3, #0
 80113e6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ee:	d103      	bne.n	80113f8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80113f0:	f04f 33ff 	mov.w	r3, #4294967295
 80113f4:	61fb      	str	r3, [r7, #28]
 80113f6:	e009      	b.n	801140c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d006      	beq.n	801140c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <osSignalWait+0x38>
      ticks = 1;
 8011408:	2301      	movs	r3, #1
 801140a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 801140c:	f7ff ff21 	bl	8011252 <inHandlerMode>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d002      	beq.n	801141c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011416:	2382      	movs	r3, #130	; 0x82
 8011418:	613b      	str	r3, [r7, #16]
 801141a:	e01b      	b.n	8011454 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 801141c:	68b9      	ldr	r1, [r7, #8]
 801141e:	f107 0310 	add.w	r3, r7, #16
 8011422:	1d1a      	adds	r2, r3, #4
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	2000      	movs	r0, #0
 8011428:	f003 f924 	bl	8014674 <xTaskNotifyWait>
 801142c:	4603      	mov	r3, r0
 801142e:	2b01      	cmp	r3, #1
 8011430:	d008      	beq.n	8011444 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d102      	bne.n	801143e <osSignalWait+0x6a>
 8011438:	2300      	movs	r3, #0
 801143a:	613b      	str	r3, [r7, #16]
 801143c:	e00a      	b.n	8011454 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 801143e:	2340      	movs	r3, #64	; 0x40
 8011440:	613b      	str	r3, [r7, #16]
 8011442:	e007      	b.n	8011454 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	da02      	bge.n	8011450 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 801144a:	2386      	movs	r3, #134	; 0x86
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	e001      	b.n	8011454 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011450:	2308      	movs	r3, #8
 8011452:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	461c      	mov	r4, r3
 8011458:	f107 0310 	add.w	r3, r7, #16
 801145c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	3724      	adds	r7, #36	; 0x24
 8011468:	46bd      	mov	sp, r7
 801146a:	bd90      	pop	{r4, r7, pc}

0801146c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af02      	add	r7, sp, #8
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d010      	beq.n	80114a0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d10b      	bne.n	801149c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685a      	ldr	r2, [r3, #4]
 8011488:	2303      	movs	r3, #3
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	4613      	mov	r3, r2
 801148e:	2200      	movs	r2, #0
 8011490:	2100      	movs	r1, #0
 8011492:	2001      	movs	r0, #1
 8011494:	f001 f92c 	bl	80126f0 <xQueueGenericCreateStatic>
 8011498:	4603      	mov	r3, r0
 801149a:	e016      	b.n	80114ca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801149c:	2300      	movs	r3, #0
 801149e:	e014      	b.n	80114ca <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d110      	bne.n	80114c8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80114a6:	2203      	movs	r2, #3
 80114a8:	2100      	movs	r1, #0
 80114aa:	2001      	movs	r0, #1
 80114ac:	f001 f993 	bl	80127d6 <xQueueGenericCreate>
 80114b0:	60f8      	str	r0, [r7, #12]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d005      	beq.n	80114c4 <osSemaphoreCreate+0x58>
 80114b8:	2300      	movs	r3, #0
 80114ba:	2200      	movs	r2, #0
 80114bc:	2100      	movs	r1, #0
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	f001 f9e8 	bl	8012894 <xQueueGenericSend>
      return sema;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	e000      	b.n	80114ca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80114c8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80114de:	2300      	movs	r3, #0
 80114e0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d101      	bne.n	80114ec <osSemaphoreWait+0x18>
    return osErrorParameter;
 80114e8:	2380      	movs	r3, #128	; 0x80
 80114ea:	e03a      	b.n	8011562 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80114ec:	2300      	movs	r3, #0
 80114ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f6:	d103      	bne.n	8011500 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80114f8:	f04f 33ff 	mov.w	r3, #4294967295
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	e009      	b.n	8011514 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d006      	beq.n	8011514 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d101      	bne.n	8011514 <osSemaphoreWait+0x40>
      ticks = 1;
 8011510:	2301      	movs	r3, #1
 8011512:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011514:	f7ff fe9d 	bl	8011252 <inHandlerMode>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d017      	beq.n	801154e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801151e:	f107 0308 	add.w	r3, r7, #8
 8011522:	461a      	mov	r2, r3
 8011524:	2100      	movs	r1, #0
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f001 fdb0 	bl	801308c <xQueueReceiveFromISR>
 801152c:	4603      	mov	r3, r0
 801152e:	2b01      	cmp	r3, #1
 8011530:	d001      	beq.n	8011536 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011532:	23ff      	movs	r3, #255	; 0xff
 8011534:	e015      	b.n	8011562 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d011      	beq.n	8011560 <osSemaphoreWait+0x8c>
 801153c:	4b0b      	ldr	r3, [pc, #44]	; (801156c <osSemaphoreWait+0x98>)
 801153e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011542:	601a      	str	r2, [r3, #0]
 8011544:	f3bf 8f4f 	dsb	sy
 8011548:	f3bf 8f6f 	isb	sy
 801154c:	e008      	b.n	8011560 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801154e:	68f9      	ldr	r1, [r7, #12]
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f001 fc93 	bl	8012e7c <xQueueSemaphoreTake>
 8011556:	4603      	mov	r3, r0
 8011558:	2b01      	cmp	r3, #1
 801155a:	d001      	beq.n	8011560 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801155c:	23ff      	movs	r3, #255	; 0xff
 801155e:	e000      	b.n	8011562 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	e000ed04 	.word	0xe000ed04

08011570 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011578:	2300      	movs	r3, #0
 801157a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801157c:	2300      	movs	r3, #0
 801157e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011580:	f7ff fe67 	bl	8011252 <inHandlerMode>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d016      	beq.n	80115b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801158a:	f107 0308 	add.w	r3, r7, #8
 801158e:	4619      	mov	r1, r3
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f001 fb0d 	bl	8012bb0 <xQueueGiveFromISR>
 8011596:	4603      	mov	r3, r0
 8011598:	2b01      	cmp	r3, #1
 801159a:	d001      	beq.n	80115a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801159c:	23ff      	movs	r3, #255	; 0xff
 801159e:	e017      	b.n	80115d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d013      	beq.n	80115ce <osSemaphoreRelease+0x5e>
 80115a6:	4b0c      	ldr	r3, [pc, #48]	; (80115d8 <osSemaphoreRelease+0x68>)
 80115a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115ac:	601a      	str	r2, [r3, #0]
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	e00a      	b.n	80115ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80115b8:	2300      	movs	r3, #0
 80115ba:	2200      	movs	r2, #0
 80115bc:	2100      	movs	r1, #0
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f001 f968 	bl	8012894 <xQueueGenericSend>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d001      	beq.n	80115ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80115ca:	23ff      	movs	r3, #255	; 0xff
 80115cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80115ce:	68fb      	ldr	r3, [r7, #12]
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	e000ed04 	.word	0xe000ed04

080115dc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80115e4:	f7ff fe35 	bl	8011252 <inHandlerMode>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d001      	beq.n	80115f2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80115ee:	2382      	movs	r3, #130	; 0x82
 80115f0:	e003      	b.n	80115fa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f001 fdc7 	bl	8013186 <vQueueDelete>

  return osOK; 
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b086      	sub	sp, #24
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	3303      	adds	r3, #3
 8011610:	f023 0303 	bic.w	r3, r3, #3
 8011614:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011616:	2014      	movs	r0, #20
 8011618:	f000 fb34 	bl	8011c84 <pvPortMalloc>
 801161c:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d046      	beq.n	80116b2 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2200      	movs	r2, #0
 8011636:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4618      	mov	r0, r3
 801163e:	f000 fb21 	bl	8011c84 <pvPortMalloc>
 8011642:	4602      	mov	r2, r0
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d02b      	beq.n	80116a8 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	fb02 f303 	mul.w	r3, r2, r3
 801165a:	4618      	mov	r0, r3
 801165c:	f000 fb12 	bl	8011c84 <pvPortMalloc>
 8011660:	4602      	mov	r2, r0
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d011      	beq.n	8011692 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801166e:	2300      	movs	r3, #0
 8011670:	613b      	str	r3, [r7, #16]
 8011672:	e008      	b.n	8011686 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	685a      	ldr	r2, [r3, #4]
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	4413      	add	r3, r2
 801167c:	2200      	movs	r2, #0
 801167e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	3301      	adds	r3, #1
 8011684:	613b      	str	r3, [r7, #16]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	693a      	ldr	r2, [r7, #16]
 801168c:	429a      	cmp	r2, r3
 801168e:	d3f1      	bcc.n	8011674 <osPoolCreate+0x72>
 8011690:	e00f      	b.n	80116b2 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	4618      	mov	r0, r3
 8011698:	f000 fbb6 	bl	8011e08 <vPortFree>
        vPortFree(thePool);
 801169c:	6978      	ldr	r0, [r7, #20]
 801169e:	f000 fbb3 	bl	8011e08 <vPortFree>
        thePool = NULL;
 80116a2:	2300      	movs	r3, #0
 80116a4:	617b      	str	r3, [r7, #20]
 80116a6:	e004      	b.n	80116b2 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80116a8:	6978      	ldr	r0, [r7, #20]
 80116aa:	f000 fbad 	bl	8011e08 <vPortFree>
      thePool = NULL;
 80116ae:	2300      	movs	r3, #0
 80116b0:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80116b2:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3718      	adds	r7, #24
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b08a      	sub	sp, #40	; 0x28
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80116c4:	2300      	movs	r3, #0
 80116c6:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80116c8:	2300      	movs	r3, #0
 80116ca:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80116cc:	f7ff fdc1 	bl	8011252 <inHandlerMode>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00e      	beq.n	80116f4 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80116d6:	f3ef 8211 	mrs	r2, BASEPRI
 80116da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116de:	f383 8811 	msr	BASEPRI, r3
 80116e2:	f3bf 8f6f 	isb	sy
 80116e6:	f3bf 8f4f 	dsb	sy
 80116ea:	617a      	str	r2, [r7, #20]
 80116ec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80116ee:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80116f0:	627b      	str	r3, [r7, #36]	; 0x24
 80116f2:	e001      	b.n	80116f8 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80116f4:	f000 fe7a 	bl	80123ec <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80116f8:	2300      	movs	r3, #0
 80116fa:	61fb      	str	r3, [r7, #28]
 80116fc:	e029      	b.n	8011752 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	691a      	ldr	r2, [r3, #16]
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	4413      	add	r3, r2
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	6892      	ldr	r2, [r2, #8]
 801170a:	fbb3 f1f2 	udiv	r1, r3, r2
 801170e:	fb02 f201 	mul.w	r2, r2, r1
 8011712:	1a9b      	subs	r3, r3, r2
 8011714:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	685a      	ldr	r2, [r3, #4]
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	4413      	add	r3, r2
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d113      	bne.n	801174c <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685a      	ldr	r2, [r3, #4]
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	4413      	add	r3, r2
 801172c:	2201      	movs	r2, #1
 801172e:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4619      	mov	r1, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	69ba      	ldr	r2, [r7, #24]
 801173c:	fb02 f303 	mul.w	r3, r2, r3
 8011740:	440b      	add	r3, r1
 8011742:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	69ba      	ldr	r2, [r7, #24]
 8011748:	611a      	str	r2, [r3, #16]
      break;
 801174a:	e007      	b.n	801175c <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	3301      	adds	r3, #1
 8011750:	61fb      	str	r3, [r7, #28]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	69fa      	ldr	r2, [r7, #28]
 8011758:	429a      	cmp	r2, r3
 801175a:	d3d0      	bcc.n	80116fe <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801175c:	f7ff fd79 	bl	8011252 <inHandlerMode>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d005      	beq.n	8011772 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011768:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	e001      	b.n	8011776 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8011772:	f000 fe69 	bl	8012448 <vPortExitCritical>
  }
  
  return p;
 8011776:	6a3b      	ldr	r3, [r7, #32]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3728      	adds	r7, #40	; 0x28
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <osPoolFree+0x14>
    return osErrorParameter;
 8011790:	2380      	movs	r3, #128	; 0x80
 8011792:	e030      	b.n	80117f6 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <osPoolFree+0x1e>
    return osErrorParameter;
 801179a:	2380      	movs	r3, #128	; 0x80
 801179c:	e02b      	b.n	80117f6 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d201      	bcs.n	80117ac <osPoolFree+0x2c>
    return osErrorParameter;
 80117a8:	2380      	movs	r3, #128	; 0x80
 80117aa:	e024      	b.n	80117f6 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	6812      	ldr	r2, [r2, #0]
 80117b2:	1a9b      	subs	r3, r3, r2
 80117b4:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	68da      	ldr	r2, [r3, #12]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80117c0:	fb02 f201 	mul.w	r2, r2, r1
 80117c4:	1a9b      	subs	r3, r3, r2
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d001      	beq.n	80117ce <osPoolFree+0x4e>
    return osErrorParameter;
 80117ca:	2380      	movs	r3, #128	; 0x80
 80117cc:	e013      	b.n	80117f6 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80117d8:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	689b      	ldr	r3, [r3, #8]
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d301      	bcc.n	80117e8 <osPoolFree+0x68>
    return osErrorParameter;
 80117e4:	2380      	movs	r3, #128	; 0x80
 80117e6:	e006      	b.n	80117f6 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	4413      	add	r3, r2
 80117f0:	2200      	movs	r2, #0
 80117f2:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3714      	adds	r7, #20
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr

08011802 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011802:	b590      	push	{r4, r7, lr}
 8011804:	b085      	sub	sp, #20
 8011806:	af02      	add	r7, sp, #8
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d012      	beq.n	801183a <osMessageCreate+0x38>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00e      	beq.n	801183a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6818      	ldr	r0, [r3, #0]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6859      	ldr	r1, [r3, #4]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	689a      	ldr	r2, [r3, #8]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	68dc      	ldr	r4, [r3, #12]
 801182c:	2300      	movs	r3, #0
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	4623      	mov	r3, r4
 8011832:	f000 ff5d 	bl	80126f0 <xQueueGenericCreateStatic>
 8011836:	4603      	mov	r3, r0
 8011838:	e008      	b.n	801184c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6818      	ldr	r0, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	4619      	mov	r1, r3
 8011846:	f000 ffc6 	bl	80127d6 <xQueueGenericCreate>
 801184a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801184c:	4618      	mov	r0, r3
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	bd90      	pop	{r4, r7, pc}

08011854 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011860:	2300      	movs	r3, #0
 8011862:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <osMessagePut+0x1e>
    ticks = 1;
 801186e:	2301      	movs	r3, #1
 8011870:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011872:	f7ff fcee 	bl	8011252 <inHandlerMode>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d018      	beq.n	80118ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801187c:	f107 0210 	add.w	r2, r7, #16
 8011880:	f107 0108 	add.w	r1, r7, #8
 8011884:	2300      	movs	r3, #0
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f001 f8fe 	bl	8012a88 <xQueueGenericSendFromISR>
 801188c:	4603      	mov	r3, r0
 801188e:	2b01      	cmp	r3, #1
 8011890:	d001      	beq.n	8011896 <osMessagePut+0x42>
      return osErrorOS;
 8011892:	23ff      	movs	r3, #255	; 0xff
 8011894:	e018      	b.n	80118c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d014      	beq.n	80118c6 <osMessagePut+0x72>
 801189c:	4b0c      	ldr	r3, [pc, #48]	; (80118d0 <osMessagePut+0x7c>)
 801189e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118a2:	601a      	str	r2, [r3, #0]
 80118a4:	f3bf 8f4f 	dsb	sy
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	e00b      	b.n	80118c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80118ae:	f107 0108 	add.w	r1, r7, #8
 80118b2:	2300      	movs	r3, #0
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	68f8      	ldr	r0, [r7, #12]
 80118b8:	f000 ffec 	bl	8012894 <xQueueGenericSend>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d001      	beq.n	80118c6 <osMessagePut+0x72>
      return osErrorOS;
 80118c2:	23ff      	movs	r3, #255	; 0xff
 80118c4:	e000      	b.n	80118c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3718      	adds	r7, #24
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	e000ed04 	.word	0xe000ed04

080118d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80118d4:	b590      	push	{r4, r7, lr}
 80118d6:	b08b      	sub	sp, #44	; 0x2c
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80118e4:	2300      	movs	r3, #0
 80118e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d10a      	bne.n	8011904 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80118ee:	2380      	movs	r3, #128	; 0x80
 80118f0:	617b      	str	r3, [r7, #20]
    return event;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	461c      	mov	r4, r3
 80118f6:	f107 0314 	add.w	r3, r7, #20
 80118fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80118fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011902:	e054      	b.n	80119ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011904:	2300      	movs	r3, #0
 8011906:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011908:	2300      	movs	r3, #0
 801190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011912:	d103      	bne.n	801191c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011914:	f04f 33ff 	mov.w	r3, #4294967295
 8011918:	627b      	str	r3, [r7, #36]	; 0x24
 801191a:	e009      	b.n	8011930 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d006      	beq.n	8011930 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011928:	2b00      	cmp	r3, #0
 801192a:	d101      	bne.n	8011930 <osMessageGet+0x5c>
      ticks = 1;
 801192c:	2301      	movs	r3, #1
 801192e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011930:	f7ff fc8f 	bl	8011252 <inHandlerMode>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d01c      	beq.n	8011974 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801193a:	f107 0220 	add.w	r2, r7, #32
 801193e:	f107 0314 	add.w	r3, r7, #20
 8011942:	3304      	adds	r3, #4
 8011944:	4619      	mov	r1, r3
 8011946:	68b8      	ldr	r0, [r7, #8]
 8011948:	f001 fba0 	bl	801308c <xQueueReceiveFromISR>
 801194c:	4603      	mov	r3, r0
 801194e:	2b01      	cmp	r3, #1
 8011950:	d102      	bne.n	8011958 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011952:	2310      	movs	r3, #16
 8011954:	617b      	str	r3, [r7, #20]
 8011956:	e001      	b.n	801195c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011958:	2300      	movs	r3, #0
 801195a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d01d      	beq.n	801199e <osMessageGet+0xca>
 8011962:	4b15      	ldr	r3, [pc, #84]	; (80119b8 <osMessageGet+0xe4>)
 8011964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011968:	601a      	str	r2, [r3, #0]
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	f3bf 8f6f 	isb	sy
 8011972:	e014      	b.n	801199e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011974:	f107 0314 	add.w	r3, r7, #20
 8011978:	3304      	adds	r3, #4
 801197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801197c:	4619      	mov	r1, r3
 801197e:	68b8      	ldr	r0, [r7, #8]
 8011980:	f001 f9a0 	bl	8012cc4 <xQueueReceive>
 8011984:	4603      	mov	r3, r0
 8011986:	2b01      	cmp	r3, #1
 8011988:	d102      	bne.n	8011990 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801198a:	2310      	movs	r3, #16
 801198c:	617b      	str	r3, [r7, #20]
 801198e:	e006      	b.n	801199e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	2b00      	cmp	r3, #0
 8011994:	d101      	bne.n	801199a <osMessageGet+0xc6>
 8011996:	2300      	movs	r3, #0
 8011998:	e000      	b.n	801199c <osMessageGet+0xc8>
 801199a:	2340      	movs	r3, #64	; 0x40
 801199c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	461c      	mov	r4, r3
 80119a2:	f107 0314 	add.w	r3, r7, #20
 80119a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80119ae:	68f8      	ldr	r0, [r7, #12]
 80119b0:	372c      	adds	r7, #44	; 0x2c
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd90      	pop	{r4, r7, pc}
 80119b6:	bf00      	nop
 80119b8:	e000ed04 	.word	0xe000ed04

080119bc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80119bc:	b590      	push	{r4, r7, lr}
 80119be:	b087      	sub	sp, #28
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	613b      	str	r3, [r7, #16]
 80119d2:	2300      	movs	r3, #0
 80119d4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	689c      	ldr	r4, [r3, #8]
 80119da:	200c      	movs	r0, #12
 80119dc:	f000 f952 	bl	8011c84 <pvPortMalloc>
 80119e0:	4603      	mov	r3, r0
 80119e2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	689b      	ldr	r3, [r3, #8]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <osMailCreate+0x36>
    return NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	e038      	b.n	8011a64 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6818      	ldr	r0, [r3, #0]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	681c      	ldr	r4, [r3, #0]
 8011a06:	2200      	movs	r2, #0
 8011a08:	2104      	movs	r1, #4
 8011a0a:	f000 fee4 	bl	80127d6 <xQueueGenericCreate>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d107      	bne.n	8011a2e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	689b      	ldr	r3, [r3, #8]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f000 f9ef 	bl	8011e08 <vPortFree>
    return NULL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e01a      	b.n	8011a64 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	689b      	ldr	r3, [r3, #8]
 8011a32:	681c      	ldr	r4, [r3, #0]
 8011a34:	f107 030c 	add.w	r3, r7, #12
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7ff fde2 	bl	8011602 <osPoolCreate>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	689b      	ldr	r3, [r3, #8]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d107      	bne.n	8011a5e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	689b      	ldr	r3, [r3, #8]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f000 f9d7 	bl	8011e08 <vPortFree>
    return NULL;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e002      	b.n	8011a64 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	371c      	adds	r7, #28
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd90      	pop	{r4, r7, pc}

08011a6c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d101      	bne.n	8011a80 <osMailAlloc+0x14>
    return NULL;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e006      	b.n	8011a8e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7ff fe19 	bl	80116bc <osPoolAlloc>
 8011a8a:	60f8      	str	r0, [r7, #12]
  
  return p;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
	...

08011a98 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d101      	bne.n	8011aac <osMailPut+0x14>
    return osErrorParameter;
 8011aa8:	2380      	movs	r3, #128	; 0x80
 8011aaa:	e02c      	b.n	8011b06 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8011aac:	2300      	movs	r3, #0
 8011aae:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011ab0:	f7ff fbcf 	bl	8011252 <inHandlerMode>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d018      	beq.n	8011aec <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6858      	ldr	r0, [r3, #4]
 8011abe:	f107 020c 	add.w	r2, r7, #12
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	f000 ffdf 	bl	8012a88 <xQueueGenericSendFromISR>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d001      	beq.n	8011ad4 <osMailPut+0x3c>
      return osErrorOS;
 8011ad0:	23ff      	movs	r3, #255	; 0xff
 8011ad2:	e018      	b.n	8011b06 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d014      	beq.n	8011b04 <osMailPut+0x6c>
 8011ada:	4b0d      	ldr	r3, [pc, #52]	; (8011b10 <osMailPut+0x78>)
 8011adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	f3bf 8f4f 	dsb	sy
 8011ae6:	f3bf 8f6f 	isb	sy
 8011aea:	e00b      	b.n	8011b04 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6858      	ldr	r0, [r3, #4]
 8011af0:	4639      	mov	r1, r7
 8011af2:	2300      	movs	r3, #0
 8011af4:	2200      	movs	r2, #0
 8011af6:	f000 fecd 	bl	8012894 <xQueueGenericSend>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d001      	beq.n	8011b04 <osMailPut+0x6c>
      return osErrorOS;
 8011b00:	23ff      	movs	r3, #255	; 0xff
 8011b02:	e000      	b.n	8011b06 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	e000ed04 	.word	0xe000ed04

08011b14 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b08b      	sub	sp, #44	; 0x2c
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d10a      	bne.n	8011b40 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8011b2a:	2380      	movs	r3, #128	; 0x80
 8011b2c:	617b      	str	r3, [r7, #20]
    return event;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	461c      	mov	r4, r3
 8011b32:	f107 0314 	add.w	r3, r7, #20
 8011b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011b3e:	e056      	b.n	8011bee <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011b40:	2300      	movs	r3, #0
 8011b42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011b44:	2300      	movs	r3, #0
 8011b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b4e:	d103      	bne.n	8011b58 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8011b50:	f04f 33ff 	mov.w	r3, #4294967295
 8011b54:	627b      	str	r3, [r7, #36]	; 0x24
 8011b56:	e009      	b.n	8011b6c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d006      	beq.n	8011b6c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d101      	bne.n	8011b6c <osMailGet+0x58>
      ticks = 1;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011b6c:	f7ff fb71 	bl	8011252 <inHandlerMode>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d01d      	beq.n	8011bb2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	6858      	ldr	r0, [r3, #4]
 8011b7a:	f107 0220 	add.w	r2, r7, #32
 8011b7e:	f107 0314 	add.w	r3, r7, #20
 8011b82:	3304      	adds	r3, #4
 8011b84:	4619      	mov	r1, r3
 8011b86:	f001 fa81 	bl	801308c <xQueueReceiveFromISR>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d102      	bne.n	8011b96 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8011b90:	2320      	movs	r3, #32
 8011b92:	617b      	str	r3, [r7, #20]
 8011b94:	e001      	b.n	8011b9a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8011b96:	2300      	movs	r3, #0
 8011b98:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d01e      	beq.n	8011bde <osMailGet+0xca>
 8011ba0:	4b15      	ldr	r3, [pc, #84]	; (8011bf8 <osMailGet+0xe4>)
 8011ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ba6:	601a      	str	r2, [r3, #0]
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	f3bf 8f6f 	isb	sy
 8011bb0:	e015      	b.n	8011bde <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	6858      	ldr	r0, [r3, #4]
 8011bb6:	f107 0314 	add.w	r3, r7, #20
 8011bba:	3304      	adds	r3, #4
 8011bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	f001 f880 	bl	8012cc4 <xQueueReceive>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d102      	bne.n	8011bd0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8011bca:	2320      	movs	r3, #32
 8011bcc:	617b      	str	r3, [r7, #20]
 8011bce:	e006      	b.n	8011bde <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d101      	bne.n	8011bda <osMailGet+0xc6>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e000      	b.n	8011bdc <osMailGet+0xc8>
 8011bda:	2340      	movs	r3, #64	; 0x40
 8011bdc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	461c      	mov	r4, r3
 8011be2:	f107 0314 	add.w	r3, r7, #20
 8011be6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011bee:	68f8      	ldr	r0, [r7, #12]
 8011bf0:	372c      	adds	r7, #44	; 0x2c
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd90      	pop	{r4, r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	e000ed04 	.word	0xe000ed04

08011bfc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <osMailFree+0x14>
    return osErrorParameter;
 8011c0c:	2380      	movs	r3, #128	; 0x80
 8011c0e:	e006      	b.n	8011c1e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	6839      	ldr	r1, [r7, #0]
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7ff fdb2 	bl	8011780 <osPoolFree>
 8011c1c:	4603      	mov	r3, r0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b082      	sub	sp, #8
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f001 fdae 	bl	8013790 <vTaskSuspend>
  
  return osOK;
 8011c34:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
	...

08011c40 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8011c48:	f7ff fb03 	bl	8011252 <inHandlerMode>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00e      	beq.n	8011c70 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f001 feba 	bl	80139cc <xTaskResumeFromISR>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d10b      	bne.n	8011c76 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8011c5e:	4b08      	ldr	r3, [pc, #32]	; (8011c80 <osThreadResume+0x40>)
 8011c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c64:	601a      	str	r2, [r3, #0]
 8011c66:	f3bf 8f4f 	dsb	sy
 8011c6a:	f3bf 8f6f 	isb	sy
 8011c6e:	e002      	b.n	8011c76 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f001 fe4f 	bl	8013914 <vTaskResume>
  }
  return osOK;
 8011c76:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3708      	adds	r7, #8
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	e000ed04 	.word	0xe000ed04

08011c84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b08a      	sub	sp, #40	; 0x28
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c90:	f001 ff6a 	bl	8013b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c94:	4b57      	ldr	r3, [pc, #348]	; (8011df4 <pvPortMalloc+0x170>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c9c:	f000 f90c 	bl	8011eb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011ca0:	4b55      	ldr	r3, [pc, #340]	; (8011df8 <pvPortMalloc+0x174>)
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	f040 808c 	bne.w	8011dc6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d01c      	beq.n	8011cee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011cb4:	2208      	movs	r2, #8
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4413      	add	r3, r2
 8011cba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f003 0307 	and.w	r3, r3, #7
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d013      	beq.n	8011cee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f023 0307 	bic.w	r3, r3, #7
 8011ccc:	3308      	adds	r3, #8
 8011cce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f003 0307 	and.w	r3, r3, #7
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d009      	beq.n	8011cee <pvPortMalloc+0x6a>
	__asm volatile
 8011cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cde:	f383 8811 	msr	BASEPRI, r3
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	f3bf 8f4f 	dsb	sy
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	e7fe      	b.n	8011cec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d068      	beq.n	8011dc6 <pvPortMalloc+0x142>
 8011cf4:	4b41      	ldr	r3, [pc, #260]	; (8011dfc <pvPortMalloc+0x178>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d863      	bhi.n	8011dc6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011cfe:	4b40      	ldr	r3, [pc, #256]	; (8011e00 <pvPortMalloc+0x17c>)
 8011d00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011d02:	4b3f      	ldr	r3, [pc, #252]	; (8011e00 <pvPortMalloc+0x17c>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d08:	e004      	b.n	8011d14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d903      	bls.n	8011d26 <pvPortMalloc+0xa2>
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1f1      	bne.n	8011d0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011d26:	4b33      	ldr	r3, [pc, #204]	; (8011df4 <pvPortMalloc+0x170>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d04a      	beq.n	8011dc6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011d30:	6a3b      	ldr	r3, [r7, #32]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2208      	movs	r2, #8
 8011d36:	4413      	add	r3, r2
 8011d38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	6a3b      	ldr	r3, [r7, #32]
 8011d40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	685a      	ldr	r2, [r3, #4]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	1ad2      	subs	r2, r2, r3
 8011d4a:	2308      	movs	r3, #8
 8011d4c:	005b      	lsls	r3, r3, #1
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d91e      	bls.n	8011d90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	4413      	add	r3, r2
 8011d58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	f003 0307 	and.w	r3, r3, #7
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d009      	beq.n	8011d78 <pvPortMalloc+0xf4>
 8011d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	613b      	str	r3, [r7, #16]
 8011d76:	e7fe      	b.n	8011d76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7a:	685a      	ldr	r2, [r3, #4]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	69bb      	ldr	r3, [r7, #24]
 8011d82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d8a:	69b8      	ldr	r0, [r7, #24]
 8011d8c:	f000 f8f6 	bl	8011f7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d90:	4b1a      	ldr	r3, [pc, #104]	; (8011dfc <pvPortMalloc+0x178>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	4a18      	ldr	r2, [pc, #96]	; (8011dfc <pvPortMalloc+0x178>)
 8011d9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d9e:	4b17      	ldr	r3, [pc, #92]	; (8011dfc <pvPortMalloc+0x178>)
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	4b18      	ldr	r3, [pc, #96]	; (8011e04 <pvPortMalloc+0x180>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d203      	bcs.n	8011db2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011daa:	4b14      	ldr	r3, [pc, #80]	; (8011dfc <pvPortMalloc+0x178>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a15      	ldr	r2, [pc, #84]	; (8011e04 <pvPortMalloc+0x180>)
 8011db0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	685a      	ldr	r2, [r3, #4]
 8011db6:	4b10      	ldr	r3, [pc, #64]	; (8011df8 <pvPortMalloc+0x174>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	431a      	orrs	r2, r3
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011dc6:	f001 fedd 	bl	8013b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011dca:	69fb      	ldr	r3, [r7, #28]
 8011dcc:	f003 0307 	and.w	r3, r3, #7
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d009      	beq.n	8011de8 <pvPortMalloc+0x164>
 8011dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	60fb      	str	r3, [r7, #12]
 8011de6:	e7fe      	b.n	8011de6 <pvPortMalloc+0x162>
	return pvReturn;
 8011de8:	69fb      	ldr	r3, [r7, #28]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3728      	adds	r7, #40	; 0x28
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	24064940 	.word	0x24064940
 8011df8:	2406494c 	.word	0x2406494c
 8011dfc:	24064944 	.word	0x24064944
 8011e00:	24064938 	.word	0x24064938
 8011e04:	24064948 	.word	0x24064948

08011e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d046      	beq.n	8011ea8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011e1a:	2308      	movs	r3, #8
 8011e1c:	425b      	negs	r3, r3
 8011e1e:	697a      	ldr	r2, [r7, #20]
 8011e20:	4413      	add	r3, r2
 8011e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	685a      	ldr	r2, [r3, #4]
 8011e2c:	4b20      	ldr	r3, [pc, #128]	; (8011eb0 <vPortFree+0xa8>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4013      	ands	r3, r2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d109      	bne.n	8011e4a <vPortFree+0x42>
 8011e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	60fb      	str	r3, [r7, #12]
 8011e48:	e7fe      	b.n	8011e48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d009      	beq.n	8011e66 <vPortFree+0x5e>
 8011e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e56:	f383 8811 	msr	BASEPRI, r3
 8011e5a:	f3bf 8f6f 	isb	sy
 8011e5e:	f3bf 8f4f 	dsb	sy
 8011e62:	60bb      	str	r3, [r7, #8]
 8011e64:	e7fe      	b.n	8011e64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	685a      	ldr	r2, [r3, #4]
 8011e6a:	4b11      	ldr	r3, [pc, #68]	; (8011eb0 <vPortFree+0xa8>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4013      	ands	r3, r2
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d019      	beq.n	8011ea8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d115      	bne.n	8011ea8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	685a      	ldr	r2, [r3, #4]
 8011e80:	4b0b      	ldr	r3, [pc, #44]	; (8011eb0 <vPortFree+0xa8>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	43db      	mvns	r3, r3
 8011e86:	401a      	ands	r2, r3
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e8c:	f001 fe6c 	bl	8013b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	685a      	ldr	r2, [r3, #4]
 8011e94:	4b07      	ldr	r3, [pc, #28]	; (8011eb4 <vPortFree+0xac>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4413      	add	r3, r2
 8011e9a:	4a06      	ldr	r2, [pc, #24]	; (8011eb4 <vPortFree+0xac>)
 8011e9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e9e:	6938      	ldr	r0, [r7, #16]
 8011ea0:	f000 f86c 	bl	8011f7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011ea4:	f001 fe6e 	bl	8013b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011ea8:	bf00      	nop
 8011eaa:	3718      	adds	r7, #24
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	2406494c 	.word	0x2406494c
 8011eb4:	24064944 	.word	0x24064944

08011eb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b085      	sub	sp, #20
 8011ebc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ebe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8011ec2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ec4:	4b27      	ldr	r3, [pc, #156]	; (8011f64 <prvHeapInit+0xac>)
 8011ec6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f003 0307 	and.w	r3, r3, #7
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00c      	beq.n	8011eec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	3307      	adds	r3, #7
 8011ed6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f023 0307 	bic.w	r3, r3, #7
 8011ede:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	4a1f      	ldr	r2, [pc, #124]	; (8011f64 <prvHeapInit+0xac>)
 8011ee8:	4413      	add	r3, r2
 8011eea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ef0:	4a1d      	ldr	r2, [pc, #116]	; (8011f68 <prvHeapInit+0xb0>)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ef6:	4b1c      	ldr	r3, [pc, #112]	; (8011f68 <prvHeapInit+0xb0>)
 8011ef8:	2200      	movs	r2, #0
 8011efa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	4413      	add	r3, r2
 8011f02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011f04:	2208      	movs	r2, #8
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	1a9b      	subs	r3, r3, r2
 8011f0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f023 0307 	bic.w	r3, r3, #7
 8011f12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	4a15      	ldr	r2, [pc, #84]	; (8011f6c <prvHeapInit+0xb4>)
 8011f18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011f1a:	4b14      	ldr	r3, [pc, #80]	; (8011f6c <prvHeapInit+0xb4>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f22:	4b12      	ldr	r3, [pc, #72]	; (8011f6c <prvHeapInit+0xb4>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	2200      	movs	r2, #0
 8011f28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	68fa      	ldr	r2, [r7, #12]
 8011f32:	1ad2      	subs	r2, r2, r3
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f38:	4b0c      	ldr	r3, [pc, #48]	; (8011f6c <prvHeapInit+0xb4>)
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	4a0a      	ldr	r2, [pc, #40]	; (8011f70 <prvHeapInit+0xb8>)
 8011f46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	4a09      	ldr	r2, [pc, #36]	; (8011f74 <prvHeapInit+0xbc>)
 8011f4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f50:	4b09      	ldr	r3, [pc, #36]	; (8011f78 <prvHeapInit+0xc0>)
 8011f52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f56:	601a      	str	r2, [r3, #0]
}
 8011f58:	bf00      	nop
 8011f5a:	3714      	adds	r7, #20
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	24014938 	.word	0x24014938
 8011f68:	24064938 	.word	0x24064938
 8011f6c:	24064940 	.word	0x24064940
 8011f70:	24064948 	.word	0x24064948
 8011f74:	24064944 	.word	0x24064944
 8011f78:	2406494c 	.word	0x2406494c

08011f7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f84:	4b28      	ldr	r3, [pc, #160]	; (8012028 <prvInsertBlockIntoFreeList+0xac>)
 8011f86:	60fb      	str	r3, [r7, #12]
 8011f88:	e002      	b.n	8011f90 <prvInsertBlockIntoFreeList+0x14>
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	60fb      	str	r3, [r7, #12]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d8f7      	bhi.n	8011f8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d108      	bne.n	8011fbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	685a      	ldr	r2, [r3, #4]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	441a      	add	r2, r3
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	68ba      	ldr	r2, [r7, #8]
 8011fc8:	441a      	add	r2, r3
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d118      	bne.n	8012004 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	4b15      	ldr	r3, [pc, #84]	; (801202c <prvInsertBlockIntoFreeList+0xb0>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d00d      	beq.n	8011ffa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	685a      	ldr	r2, [r3, #4]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	441a      	add	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	e008      	b.n	801200c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ffa:	4b0c      	ldr	r3, [pc, #48]	; (801202c <prvInsertBlockIntoFreeList+0xb0>)
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	601a      	str	r2, [r3, #0]
 8012002:	e003      	b.n	801200c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	429a      	cmp	r2, r3
 8012012:	d002      	beq.n	801201a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801201a:	bf00      	nop
 801201c:	3714      	adds	r7, #20
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	24064938 	.word	0x24064938
 801202c:	24064940 	.word	0x24064940

08012030 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f103 0208 	add.w	r2, r3, #8
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f04f 32ff 	mov.w	r2, #4294967295
 8012048:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f103 0208 	add.w	r2, r3, #8
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f103 0208 	add.w	r2, r3, #8
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012064:	bf00      	nop
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801207e:	bf00      	nop
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr

0801208a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801208a:	b480      	push	{r7}
 801208c:	b085      	sub	sp, #20
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	689a      	ldr	r2, [r3, #8]
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	683a      	ldr	r2, [r7, #0]
 80120ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	1c5a      	adds	r2, r3, #1
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	601a      	str	r2, [r3, #0]
}
 80120c6:	bf00      	nop
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80120d2:	b480      	push	{r7}
 80120d4:	b085      	sub	sp, #20
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
 80120da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e8:	d103      	bne.n	80120f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	691b      	ldr	r3, [r3, #16]
 80120ee:	60fb      	str	r3, [r7, #12]
 80120f0:	e00c      	b.n	801210c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	3308      	adds	r3, #8
 80120f6:	60fb      	str	r3, [r7, #12]
 80120f8:	e002      	b.n	8012100 <vListInsert+0x2e>
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	60fb      	str	r3, [r7, #12]
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	68ba      	ldr	r2, [r7, #8]
 8012108:	429a      	cmp	r2, r3
 801210a:	d2f6      	bcs.n	80120fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	683a      	ldr	r2, [r7, #0]
 801211a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	683a      	ldr	r2, [r7, #0]
 8012126:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	1c5a      	adds	r2, r3, #1
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	601a      	str	r2, [r3, #0]
}
 8012138:	bf00      	nop
 801213a:	3714      	adds	r7, #20
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012144:	b480      	push	{r7}
 8012146:	b085      	sub	sp, #20
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	6892      	ldr	r2, [r2, #8]
 801215a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	6852      	ldr	r2, [r2, #4]
 8012164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	429a      	cmp	r2, r3
 801216e:	d103      	bne.n	8012178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	689a      	ldr	r2, [r3, #8]
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	1e5a      	subs	r2, r3, #1
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
}
 801218c:	4618      	mov	r0, r3
 801218e:	3714      	adds	r7, #20
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012198:	b480      	push	{r7}
 801219a:	b085      	sub	sp, #20
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	3b04      	subs	r3, #4
 80121a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80121b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	3b04      	subs	r3, #4
 80121b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	f023 0201 	bic.w	r2, r3, #1
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3b04      	subs	r3, #4
 80121c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121c8:	4a0c      	ldr	r2, [pc, #48]	; (80121fc <pxPortInitialiseStack+0x64>)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	3b14      	subs	r3, #20
 80121d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	3b04      	subs	r3, #4
 80121de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f06f 0202 	mvn.w	r2, #2
 80121e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	3b20      	subs	r3, #32
 80121ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121ee:	68fb      	ldr	r3, [r7, #12]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3714      	adds	r7, #20
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr
 80121fc:	08012201 	.word	0x08012201

08012200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012200:	b480      	push	{r7}
 8012202:	b085      	sub	sp, #20
 8012204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012206:	2300      	movs	r3, #0
 8012208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801220a:	4b11      	ldr	r3, [pc, #68]	; (8012250 <prvTaskExitError+0x50>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012212:	d009      	beq.n	8012228 <prvTaskExitError+0x28>
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	60fb      	str	r3, [r7, #12]
 8012226:	e7fe      	b.n	8012226 <prvTaskExitError+0x26>
 8012228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222c:	f383 8811 	msr	BASEPRI, r3
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801223a:	bf00      	nop
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d0fc      	beq.n	801223c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012242:	bf00      	nop
 8012244:	3714      	adds	r7, #20
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	24000010 	.word	0x24000010
	...

08012260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012260:	4b07      	ldr	r3, [pc, #28]	; (8012280 <pxCurrentTCBConst2>)
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	6808      	ldr	r0, [r1, #0]
 8012266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226a:	f380 8809 	msr	PSP, r0
 801226e:	f3bf 8f6f 	isb	sy
 8012272:	f04f 0000 	mov.w	r0, #0
 8012276:	f380 8811 	msr	BASEPRI, r0
 801227a:	4770      	bx	lr
 801227c:	f3af 8000 	nop.w

08012280 <pxCurrentTCBConst2>:
 8012280:	24064958 	.word	0x24064958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012284:	bf00      	nop
 8012286:	bf00      	nop

08012288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012288:	4808      	ldr	r0, [pc, #32]	; (80122ac <prvPortStartFirstTask+0x24>)
 801228a:	6800      	ldr	r0, [r0, #0]
 801228c:	6800      	ldr	r0, [r0, #0]
 801228e:	f380 8808 	msr	MSP, r0
 8012292:	f04f 0000 	mov.w	r0, #0
 8012296:	f380 8814 	msr	CONTROL, r0
 801229a:	b662      	cpsie	i
 801229c:	b661      	cpsie	f
 801229e:	f3bf 8f4f 	dsb	sy
 80122a2:	f3bf 8f6f 	isb	sy
 80122a6:	df00      	svc	0
 80122a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80122aa:	bf00      	nop
 80122ac:	e000ed08 	.word	0xe000ed08

080122b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80122b6:	4b44      	ldr	r3, [pc, #272]	; (80123c8 <xPortStartScheduler+0x118>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	4a44      	ldr	r2, [pc, #272]	; (80123cc <xPortStartScheduler+0x11c>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d109      	bne.n	80122d4 <xPortStartScheduler+0x24>
 80122c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	613b      	str	r3, [r7, #16]
 80122d2:	e7fe      	b.n	80122d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80122d4:	4b3c      	ldr	r3, [pc, #240]	; (80123c8 <xPortStartScheduler+0x118>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4a3d      	ldr	r2, [pc, #244]	; (80123d0 <xPortStartScheduler+0x120>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d109      	bne.n	80122f2 <xPortStartScheduler+0x42>
 80122de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e2:	f383 8811 	msr	BASEPRI, r3
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	60fb      	str	r3, [r7, #12]
 80122f0:	e7fe      	b.n	80122f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80122f2:	4b38      	ldr	r3, [pc, #224]	; (80123d4 <xPortStartScheduler+0x124>)
 80122f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	22ff      	movs	r2, #255	; 0xff
 8012302:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	b2db      	uxtb	r3, r3
 801230a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801230c:	78fb      	ldrb	r3, [r7, #3]
 801230e:	b2db      	uxtb	r3, r3
 8012310:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012314:	b2da      	uxtb	r2, r3
 8012316:	4b30      	ldr	r3, [pc, #192]	; (80123d8 <xPortStartScheduler+0x128>)
 8012318:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801231a:	4b30      	ldr	r3, [pc, #192]	; (80123dc <xPortStartScheduler+0x12c>)
 801231c:	2207      	movs	r2, #7
 801231e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012320:	e009      	b.n	8012336 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012322:	4b2e      	ldr	r3, [pc, #184]	; (80123dc <xPortStartScheduler+0x12c>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	3b01      	subs	r3, #1
 8012328:	4a2c      	ldr	r2, [pc, #176]	; (80123dc <xPortStartScheduler+0x12c>)
 801232a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801232c:	78fb      	ldrb	r3, [r7, #3]
 801232e:	b2db      	uxtb	r3, r3
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	b2db      	uxtb	r3, r3
 8012334:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012336:	78fb      	ldrb	r3, [r7, #3]
 8012338:	b2db      	uxtb	r3, r3
 801233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801233e:	2b80      	cmp	r3, #128	; 0x80
 8012340:	d0ef      	beq.n	8012322 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012342:	4b26      	ldr	r3, [pc, #152]	; (80123dc <xPortStartScheduler+0x12c>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f1c3 0307 	rsb	r3, r3, #7
 801234a:	2b04      	cmp	r3, #4
 801234c:	d009      	beq.n	8012362 <xPortStartScheduler+0xb2>
 801234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	60bb      	str	r3, [r7, #8]
 8012360:	e7fe      	b.n	8012360 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012362:	4b1e      	ldr	r3, [pc, #120]	; (80123dc <xPortStartScheduler+0x12c>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	021b      	lsls	r3, r3, #8
 8012368:	4a1c      	ldr	r2, [pc, #112]	; (80123dc <xPortStartScheduler+0x12c>)
 801236a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801236c:	4b1b      	ldr	r3, [pc, #108]	; (80123dc <xPortStartScheduler+0x12c>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012374:	4a19      	ldr	r2, [pc, #100]	; (80123dc <xPortStartScheduler+0x12c>)
 8012376:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	b2da      	uxtb	r2, r3
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012380:	4b17      	ldr	r3, [pc, #92]	; (80123e0 <xPortStartScheduler+0x130>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a16      	ldr	r2, [pc, #88]	; (80123e0 <xPortStartScheduler+0x130>)
 8012386:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801238a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801238c:	4b14      	ldr	r3, [pc, #80]	; (80123e0 <xPortStartScheduler+0x130>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4a13      	ldr	r2, [pc, #76]	; (80123e0 <xPortStartScheduler+0x130>)
 8012392:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012396:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012398:	f000 f8d6 	bl	8012548 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801239c:	4b11      	ldr	r3, [pc, #68]	; (80123e4 <xPortStartScheduler+0x134>)
 801239e:	2200      	movs	r2, #0
 80123a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80123a2:	f000 f8f5 	bl	8012590 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80123a6:	4b10      	ldr	r3, [pc, #64]	; (80123e8 <xPortStartScheduler+0x138>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	4a0f      	ldr	r2, [pc, #60]	; (80123e8 <xPortStartScheduler+0x138>)
 80123ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80123b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80123b2:	f7ff ff69 	bl	8012288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123b6:	f001 fd5b 	bl	8013e70 <vTaskSwitchContext>
	prvTaskExitError();
 80123ba:	f7ff ff21 	bl	8012200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123be:	2300      	movs	r3, #0
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	e000ed00 	.word	0xe000ed00
 80123cc:	410fc271 	.word	0x410fc271
 80123d0:	410fc270 	.word	0x410fc270
 80123d4:	e000e400 	.word	0xe000e400
 80123d8:	24064950 	.word	0x24064950
 80123dc:	24064954 	.word	0x24064954
 80123e0:	e000ed20 	.word	0xe000ed20
 80123e4:	24000010 	.word	0x24000010
 80123e8:	e000ef34 	.word	0xe000ef34

080123ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f6:	f383 8811 	msr	BASEPRI, r3
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012404:	4b0e      	ldr	r3, [pc, #56]	; (8012440 <vPortEnterCritical+0x54>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	3301      	adds	r3, #1
 801240a:	4a0d      	ldr	r2, [pc, #52]	; (8012440 <vPortEnterCritical+0x54>)
 801240c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801240e:	4b0c      	ldr	r3, [pc, #48]	; (8012440 <vPortEnterCritical+0x54>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	2b01      	cmp	r3, #1
 8012414:	d10e      	bne.n	8012434 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012416:	4b0b      	ldr	r3, [pc, #44]	; (8012444 <vPortEnterCritical+0x58>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	b2db      	uxtb	r3, r3
 801241c:	2b00      	cmp	r3, #0
 801241e:	d009      	beq.n	8012434 <vPortEnterCritical+0x48>
 8012420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012424:	f383 8811 	msr	BASEPRI, r3
 8012428:	f3bf 8f6f 	isb	sy
 801242c:	f3bf 8f4f 	dsb	sy
 8012430:	603b      	str	r3, [r7, #0]
 8012432:	e7fe      	b.n	8012432 <vPortEnterCritical+0x46>
	}
}
 8012434:	bf00      	nop
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	24000010 	.word	0x24000010
 8012444:	e000ed04 	.word	0xe000ed04

08012448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801244e:	4b11      	ldr	r3, [pc, #68]	; (8012494 <vPortExitCritical+0x4c>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d109      	bne.n	801246a <vPortExitCritical+0x22>
 8012456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245a:	f383 8811 	msr	BASEPRI, r3
 801245e:	f3bf 8f6f 	isb	sy
 8012462:	f3bf 8f4f 	dsb	sy
 8012466:	607b      	str	r3, [r7, #4]
 8012468:	e7fe      	b.n	8012468 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801246a:	4b0a      	ldr	r3, [pc, #40]	; (8012494 <vPortExitCritical+0x4c>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	3b01      	subs	r3, #1
 8012470:	4a08      	ldr	r2, [pc, #32]	; (8012494 <vPortExitCritical+0x4c>)
 8012472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012474:	4b07      	ldr	r3, [pc, #28]	; (8012494 <vPortExitCritical+0x4c>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d104      	bne.n	8012486 <vPortExitCritical+0x3e>
 801247c:	2300      	movs	r3, #0
 801247e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012486:	bf00      	nop
 8012488:	370c      	adds	r7, #12
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr
 8012492:	bf00      	nop
 8012494:	24000010 	.word	0x24000010
	...

080124a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80124a0:	f3ef 8009 	mrs	r0, PSP
 80124a4:	f3bf 8f6f 	isb	sy
 80124a8:	4b15      	ldr	r3, [pc, #84]	; (8012500 <pxCurrentTCBConst>)
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	f01e 0f10 	tst.w	lr, #16
 80124b0:	bf08      	it	eq
 80124b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ba:	6010      	str	r0, [r2, #0]
 80124bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80124c4:	f380 8811 	msr	BASEPRI, r0
 80124c8:	f3bf 8f4f 	dsb	sy
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f001 fcce 	bl	8013e70 <vTaskSwitchContext>
 80124d4:	f04f 0000 	mov.w	r0, #0
 80124d8:	f380 8811 	msr	BASEPRI, r0
 80124dc:	bc09      	pop	{r0, r3}
 80124de:	6819      	ldr	r1, [r3, #0]
 80124e0:	6808      	ldr	r0, [r1, #0]
 80124e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e6:	f01e 0f10 	tst.w	lr, #16
 80124ea:	bf08      	it	eq
 80124ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80124f0:	f380 8809 	msr	PSP, r0
 80124f4:	f3bf 8f6f 	isb	sy
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop
 80124fc:	f3af 8000 	nop.w

08012500 <pxCurrentTCBConst>:
 8012500:	24064958 	.word	0x24064958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012504:	bf00      	nop
 8012506:	bf00      	nop

08012508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
	__asm volatile
 801250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012520:	f001 fbee 	bl	8013d00 <xTaskIncrementTick>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d003      	beq.n	8012532 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801252a:	4b06      	ldr	r3, [pc, #24]	; (8012544 <SysTick_Handler+0x3c>)
 801252c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012530:	601a      	str	r2, [r3, #0]
 8012532:	2300      	movs	r3, #0
 8012534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801253c:	bf00      	nop
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	e000ed04 	.word	0xe000ed04

08012548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012548:	b480      	push	{r7}
 801254a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801254c:	4b0b      	ldr	r3, [pc, #44]	; (801257c <vPortSetupTimerInterrupt+0x34>)
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012552:	4b0b      	ldr	r3, [pc, #44]	; (8012580 <vPortSetupTimerInterrupt+0x38>)
 8012554:	2200      	movs	r2, #0
 8012556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012558:	4b0a      	ldr	r3, [pc, #40]	; (8012584 <vPortSetupTimerInterrupt+0x3c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	4a0a      	ldr	r2, [pc, #40]	; (8012588 <vPortSetupTimerInterrupt+0x40>)
 801255e:	fba2 2303 	umull	r2, r3, r2, r3
 8012562:	099b      	lsrs	r3, r3, #6
 8012564:	4a09      	ldr	r2, [pc, #36]	; (801258c <vPortSetupTimerInterrupt+0x44>)
 8012566:	3b01      	subs	r3, #1
 8012568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801256a:	4b04      	ldr	r3, [pc, #16]	; (801257c <vPortSetupTimerInterrupt+0x34>)
 801256c:	2207      	movs	r2, #7
 801256e:	601a      	str	r2, [r3, #0]
}
 8012570:	bf00      	nop
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	e000e010 	.word	0xe000e010
 8012580:	e000e018 	.word	0xe000e018
 8012584:	24000000 	.word	0x24000000
 8012588:	10624dd3 	.word	0x10624dd3
 801258c:	e000e014 	.word	0xe000e014

08012590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80125a0 <vPortEnableVFP+0x10>
 8012594:	6801      	ldr	r1, [r0, #0]
 8012596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801259a:	6001      	str	r1, [r0, #0]
 801259c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801259e:	bf00      	nop
 80125a0:	e000ed88 	.word	0xe000ed88

080125a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80125a4:	b480      	push	{r7}
 80125a6:	b085      	sub	sp, #20
 80125a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125aa:	f3ef 8305 	mrs	r3, IPSR
 80125ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2b0f      	cmp	r3, #15
 80125b4:	d913      	bls.n	80125de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125b6:	4a16      	ldr	r2, [pc, #88]	; (8012610 <vPortValidateInterruptPriority+0x6c>)
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	4413      	add	r3, r2
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125c0:	4b14      	ldr	r3, [pc, #80]	; (8012614 <vPortValidateInterruptPriority+0x70>)
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	7afa      	ldrb	r2, [r7, #11]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d209      	bcs.n	80125de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80125ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ce:	f383 8811 	msr	BASEPRI, r3
 80125d2:	f3bf 8f6f 	isb	sy
 80125d6:	f3bf 8f4f 	dsb	sy
 80125da:	607b      	str	r3, [r7, #4]
 80125dc:	e7fe      	b.n	80125dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80125de:	4b0e      	ldr	r3, [pc, #56]	; (8012618 <vPortValidateInterruptPriority+0x74>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80125e6:	4b0d      	ldr	r3, [pc, #52]	; (801261c <vPortValidateInterruptPriority+0x78>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d909      	bls.n	8012602 <vPortValidateInterruptPriority+0x5e>
 80125ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f2:	f383 8811 	msr	BASEPRI, r3
 80125f6:	f3bf 8f6f 	isb	sy
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	603b      	str	r3, [r7, #0]
 8012600:	e7fe      	b.n	8012600 <vPortValidateInterruptPriority+0x5c>
	}
 8012602:	bf00      	nop
 8012604:	3714      	adds	r7, #20
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	e000e3f0 	.word	0xe000e3f0
 8012614:	24064950 	.word	0x24064950
 8012618:	e000ed0c 	.word	0xe000ed0c
 801261c:	24064954 	.word	0x24064954

08012620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d109      	bne.n	8012648 <xQueueGenericReset+0x28>
 8012634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012638:	f383 8811 	msr	BASEPRI, r3
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	f3bf 8f4f 	dsb	sy
 8012644:	60bb      	str	r3, [r7, #8]
 8012646:	e7fe      	b.n	8012646 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012648:	f7ff fed0 	bl	80123ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012654:	68f9      	ldr	r1, [r7, #12]
 8012656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012658:	fb01 f303 	mul.w	r3, r1, r3
 801265c:	441a      	add	r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2200      	movs	r2, #0
 8012666:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012678:	3b01      	subs	r3, #1
 801267a:	68f9      	ldr	r1, [r7, #12]
 801267c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801267e:	fb01 f303 	mul.w	r3, r1, r3
 8012682:	441a      	add	r2, r3
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	22ff      	movs	r2, #255	; 0xff
 801268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	22ff      	movs	r2, #255	; 0xff
 8012694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d114      	bne.n	80126c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	691b      	ldr	r3, [r3, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d01a      	beq.n	80126dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	3310      	adds	r3, #16
 80126aa:	4618      	mov	r0, r3
 80126ac:	f001 fc5e 	bl	8013f6c <xTaskRemoveFromEventList>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d012      	beq.n	80126dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80126b6:	4b0d      	ldr	r3, [pc, #52]	; (80126ec <xQueueGenericReset+0xcc>)
 80126b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126bc:	601a      	str	r2, [r3, #0]
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	e009      	b.n	80126dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	3310      	adds	r3, #16
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7ff fcaf 	bl	8012030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	3324      	adds	r3, #36	; 0x24
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7ff fcaa 	bl	8012030 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80126dc:	f7ff feb4 	bl	8012448 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80126e0:	2301      	movs	r3, #1
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	e000ed04 	.word	0xe000ed04

080126f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b08e      	sub	sp, #56	; 0x38
 80126f4:	af02      	add	r7, sp, #8
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
 80126fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d109      	bne.n	8012718 <xQueueGenericCreateStatic+0x28>
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	62bb      	str	r3, [r7, #40]	; 0x28
 8012716:	e7fe      	b.n	8012716 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d109      	bne.n	8012732 <xQueueGenericCreateStatic+0x42>
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	627b      	str	r3, [r7, #36]	; 0x24
 8012730:	e7fe      	b.n	8012730 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <xQueueGenericCreateStatic+0x4e>
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <xQueueGenericCreateStatic+0x52>
 801273e:	2301      	movs	r3, #1
 8012740:	e000      	b.n	8012744 <xQueueGenericCreateStatic+0x54>
 8012742:	2300      	movs	r3, #0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d109      	bne.n	801275c <xQueueGenericCreateStatic+0x6c>
 8012748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274c:	f383 8811 	msr	BASEPRI, r3
 8012750:	f3bf 8f6f 	isb	sy
 8012754:	f3bf 8f4f 	dsb	sy
 8012758:	623b      	str	r3, [r7, #32]
 801275a:	e7fe      	b.n	801275a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d102      	bne.n	8012768 <xQueueGenericCreateStatic+0x78>
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d101      	bne.n	801276c <xQueueGenericCreateStatic+0x7c>
 8012768:	2301      	movs	r3, #1
 801276a:	e000      	b.n	801276e <xQueueGenericCreateStatic+0x7e>
 801276c:	2300      	movs	r3, #0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d109      	bne.n	8012786 <xQueueGenericCreateStatic+0x96>
 8012772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	61fb      	str	r3, [r7, #28]
 8012784:	e7fe      	b.n	8012784 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012786:	2348      	movs	r3, #72	; 0x48
 8012788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	2b48      	cmp	r3, #72	; 0x48
 801278e:	d009      	beq.n	80127a4 <xQueueGenericCreateStatic+0xb4>
 8012790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	61bb      	str	r3, [r7, #24]
 80127a2:	e7fe      	b.n	80127a2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80127a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80127aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00d      	beq.n	80127cc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80127b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b2:	2201      	movs	r2, #1
 80127b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80127bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127be:	9300      	str	r3, [sp, #0]
 80127c0:	4613      	mov	r3, r2
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	68b9      	ldr	r1, [r7, #8]
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f000 f844 	bl	8012854 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80127cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3730      	adds	r7, #48	; 0x30
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b08a      	sub	sp, #40	; 0x28
 80127da:	af02      	add	r7, sp, #8
 80127dc:	60f8      	str	r0, [r7, #12]
 80127de:	60b9      	str	r1, [r7, #8]
 80127e0:	4613      	mov	r3, r2
 80127e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d109      	bne.n	80127fe <xQueueGenericCreate+0x28>
 80127ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ee:	f383 8811 	msr	BASEPRI, r3
 80127f2:	f3bf 8f6f 	isb	sy
 80127f6:	f3bf 8f4f 	dsb	sy
 80127fa:	613b      	str	r3, [r7, #16]
 80127fc:	e7fe      	b.n	80127fc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d102      	bne.n	801280a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012804:	2300      	movs	r3, #0
 8012806:	61fb      	str	r3, [r7, #28]
 8012808:	e004      	b.n	8012814 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	fb02 f303 	mul.w	r3, r2, r3
 8012812:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012814:	69fb      	ldr	r3, [r7, #28]
 8012816:	3348      	adds	r3, #72	; 0x48
 8012818:	4618      	mov	r0, r3
 801281a:	f7ff fa33 	bl	8011c84 <pvPortMalloc>
 801281e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d011      	beq.n	801284a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	3348      	adds	r3, #72	; 0x48
 801282e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	2200      	movs	r2, #0
 8012834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012838:	79fa      	ldrb	r2, [r7, #7]
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	9300      	str	r3, [sp, #0]
 801283e:	4613      	mov	r3, r2
 8012840:	697a      	ldr	r2, [r7, #20]
 8012842:	68b9      	ldr	r1, [r7, #8]
 8012844:	68f8      	ldr	r0, [r7, #12]
 8012846:	f000 f805 	bl	8012854 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801284a:	69bb      	ldr	r3, [r7, #24]
	}
 801284c:	4618      	mov	r0, r3
 801284e:	3720      	adds	r7, #32
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
 8012860:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d103      	bne.n	8012870 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	69ba      	ldr	r2, [r7, #24]
 801286c:	601a      	str	r2, [r3, #0]
 801286e:	e002      	b.n	8012876 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	68fa      	ldr	r2, [r7, #12]
 801287a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012882:	2101      	movs	r1, #1
 8012884:	69b8      	ldr	r0, [r7, #24]
 8012886:	f7ff fecb 	bl	8012620 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801288a:	bf00      	nop
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
	...

08012894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b08e      	sub	sp, #56	; 0x38
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
 80128a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80128a2:	2300      	movs	r3, #0
 80128a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80128aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d109      	bne.n	80128c4 <xQueueGenericSend+0x30>
 80128b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b4:	f383 8811 	msr	BASEPRI, r3
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128c2:	e7fe      	b.n	80128c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d103      	bne.n	80128d2 <xQueueGenericSend+0x3e>
 80128ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d101      	bne.n	80128d6 <xQueueGenericSend+0x42>
 80128d2:	2301      	movs	r3, #1
 80128d4:	e000      	b.n	80128d8 <xQueueGenericSend+0x44>
 80128d6:	2300      	movs	r3, #0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d109      	bne.n	80128f0 <xQueueGenericSend+0x5c>
 80128dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e0:	f383 8811 	msr	BASEPRI, r3
 80128e4:	f3bf 8f6f 	isb	sy
 80128e8:	f3bf 8f4f 	dsb	sy
 80128ec:	627b      	str	r3, [r7, #36]	; 0x24
 80128ee:	e7fe      	b.n	80128ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	2b02      	cmp	r3, #2
 80128f4:	d103      	bne.n	80128fe <xQueueGenericSend+0x6a>
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d101      	bne.n	8012902 <xQueueGenericSend+0x6e>
 80128fe:	2301      	movs	r3, #1
 8012900:	e000      	b.n	8012904 <xQueueGenericSend+0x70>
 8012902:	2300      	movs	r3, #0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <xQueueGenericSend+0x88>
 8012908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801290c:	f383 8811 	msr	BASEPRI, r3
 8012910:	f3bf 8f6f 	isb	sy
 8012914:	f3bf 8f4f 	dsb	sy
 8012918:	623b      	str	r3, [r7, #32]
 801291a:	e7fe      	b.n	801291a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801291c:	f001 fcdc 	bl	80142d8 <xTaskGetSchedulerState>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d102      	bne.n	801292c <xQueueGenericSend+0x98>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d101      	bne.n	8012930 <xQueueGenericSend+0x9c>
 801292c:	2301      	movs	r3, #1
 801292e:	e000      	b.n	8012932 <xQueueGenericSend+0x9e>
 8012930:	2300      	movs	r3, #0
 8012932:	2b00      	cmp	r3, #0
 8012934:	d109      	bne.n	801294a <xQueueGenericSend+0xb6>
 8012936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293a:	f383 8811 	msr	BASEPRI, r3
 801293e:	f3bf 8f6f 	isb	sy
 8012942:	f3bf 8f4f 	dsb	sy
 8012946:	61fb      	str	r3, [r7, #28]
 8012948:	e7fe      	b.n	8012948 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801294a:	f7ff fd4f 	bl	80123ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012956:	429a      	cmp	r2, r3
 8012958:	d302      	bcc.n	8012960 <xQueueGenericSend+0xcc>
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	2b02      	cmp	r3, #2
 801295e:	d129      	bne.n	80129b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012960:	683a      	ldr	r2, [r7, #0]
 8012962:	68b9      	ldr	r1, [r7, #8]
 8012964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012966:	f000 fc48 	bl	80131fa <prvCopyDataToQueue>
 801296a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012970:	2b00      	cmp	r3, #0
 8012972:	d010      	beq.n	8012996 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012976:	3324      	adds	r3, #36	; 0x24
 8012978:	4618      	mov	r0, r3
 801297a:	f001 faf7 	bl	8013f6c <xTaskRemoveFromEventList>
 801297e:	4603      	mov	r3, r0
 8012980:	2b00      	cmp	r3, #0
 8012982:	d013      	beq.n	80129ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012984:	4b3f      	ldr	r3, [pc, #252]	; (8012a84 <xQueueGenericSend+0x1f0>)
 8012986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	f3bf 8f6f 	isb	sy
 8012994:	e00a      	b.n	80129ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012998:	2b00      	cmp	r3, #0
 801299a:	d007      	beq.n	80129ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801299c:	4b39      	ldr	r3, [pc, #228]	; (8012a84 <xQueueGenericSend+0x1f0>)
 801299e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129a2:	601a      	str	r2, [r3, #0]
 80129a4:	f3bf 8f4f 	dsb	sy
 80129a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80129ac:	f7ff fd4c 	bl	8012448 <vPortExitCritical>
				return pdPASS;
 80129b0:	2301      	movs	r3, #1
 80129b2:	e063      	b.n	8012a7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d103      	bne.n	80129c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80129ba:	f7ff fd45 	bl	8012448 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80129be:	2300      	movs	r3, #0
 80129c0:	e05c      	b.n	8012a7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80129c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d106      	bne.n	80129d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80129c8:	f107 0314 	add.w	r3, r7, #20
 80129cc:	4618      	mov	r0, r3
 80129ce:	f001 fb2f 	bl	8014030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80129d2:	2301      	movs	r3, #1
 80129d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80129d6:	f7ff fd37 	bl	8012448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80129da:	f001 f8c5 	bl	8013b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80129de:	f7ff fd05 	bl	80123ec <vPortEnterCritical>
 80129e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129e8:	b25b      	sxtb	r3, r3
 80129ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ee:	d103      	bne.n	80129f8 <xQueueGenericSend+0x164>
 80129f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f2:	2200      	movs	r2, #0
 80129f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80129f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129fe:	b25b      	sxtb	r3, r3
 8012a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a04:	d103      	bne.n	8012a0e <xQueueGenericSend+0x17a>
 8012a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a0e:	f7ff fd1b 	bl	8012448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a12:	1d3a      	adds	r2, r7, #4
 8012a14:	f107 0314 	add.w	r3, r7, #20
 8012a18:	4611      	mov	r1, r2
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f001 fb1e 	bl	801405c <xTaskCheckForTimeOut>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d124      	bne.n	8012a70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a28:	f000 fcdf 	bl	80133ea <prvIsQueueFull>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d018      	beq.n	8012a64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a34:	3310      	adds	r3, #16
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	4611      	mov	r1, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f001 fa72 	bl	8013f24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a42:	f000 fc6a 	bl	801331a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012a46:	f001 f89d 	bl	8013b84 <xTaskResumeAll>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	f47f af7c 	bne.w	801294a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012a52:	4b0c      	ldr	r3, [pc, #48]	; (8012a84 <xQueueGenericSend+0x1f0>)
 8012a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a58:	601a      	str	r2, [r3, #0]
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	e772      	b.n	801294a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a66:	f000 fc58 	bl	801331a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a6a:	f001 f88b 	bl	8013b84 <xTaskResumeAll>
 8012a6e:	e76c      	b.n	801294a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a72:	f000 fc52 	bl	801331a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a76:	f001 f885 	bl	8013b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012a7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3738      	adds	r7, #56	; 0x38
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	e000ed04 	.word	0xe000ed04

08012a88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b08e      	sub	sp, #56	; 0x38
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
 8012a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d109      	bne.n	8012ab4 <xQueueGenericSendFromISR+0x2c>
 8012aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa4:	f383 8811 	msr	BASEPRI, r3
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	f3bf 8f4f 	dsb	sy
 8012ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8012ab2:	e7fe      	b.n	8012ab2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d103      	bne.n	8012ac2 <xQueueGenericSendFromISR+0x3a>
 8012aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d101      	bne.n	8012ac6 <xQueueGenericSendFromISR+0x3e>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e000      	b.n	8012ac8 <xQueueGenericSendFromISR+0x40>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d109      	bne.n	8012ae0 <xQueueGenericSendFromISR+0x58>
 8012acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad0:	f383 8811 	msr	BASEPRI, r3
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	f3bf 8f4f 	dsb	sy
 8012adc:	623b      	str	r3, [r7, #32]
 8012ade:	e7fe      	b.n	8012ade <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	2b02      	cmp	r3, #2
 8012ae4:	d103      	bne.n	8012aee <xQueueGenericSendFromISR+0x66>
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d101      	bne.n	8012af2 <xQueueGenericSendFromISR+0x6a>
 8012aee:	2301      	movs	r3, #1
 8012af0:	e000      	b.n	8012af4 <xQueueGenericSendFromISR+0x6c>
 8012af2:	2300      	movs	r3, #0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d109      	bne.n	8012b0c <xQueueGenericSendFromISR+0x84>
 8012af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afc:	f383 8811 	msr	BASEPRI, r3
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	f3bf 8f4f 	dsb	sy
 8012b08:	61fb      	str	r3, [r7, #28]
 8012b0a:	e7fe      	b.n	8012b0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b0c:	f7ff fd4a 	bl	80125a4 <vPortValidateInterruptPriority>
	__asm volatile
 8012b10:	f3ef 8211 	mrs	r2, BASEPRI
 8012b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b18:	f383 8811 	msr	BASEPRI, r3
 8012b1c:	f3bf 8f6f 	isb	sy
 8012b20:	f3bf 8f4f 	dsb	sy
 8012b24:	61ba      	str	r2, [r7, #24]
 8012b26:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012b28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d302      	bcc.n	8012b3e <xQueueGenericSendFromISR+0xb6>
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d12c      	bne.n	8012b98 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b48:	683a      	ldr	r2, [r7, #0]
 8012b4a:	68b9      	ldr	r1, [r7, #8]
 8012b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b4e:	f000 fb54 	bl	80131fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b5a:	d112      	bne.n	8012b82 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d016      	beq.n	8012b92 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b66:	3324      	adds	r3, #36	; 0x24
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f001 f9ff 	bl	8013f6c <xTaskRemoveFromEventList>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00e      	beq.n	8012b92 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00b      	beq.n	8012b92 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	601a      	str	r2, [r3, #0]
 8012b80:	e007      	b.n	8012b92 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b86:	3301      	adds	r3, #1
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	b25a      	sxtb	r2, r3
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b92:	2301      	movs	r3, #1
 8012b94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012b96:	e001      	b.n	8012b9c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8012b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3738      	adds	r7, #56	; 0x38
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b08e      	sub	sp, #56	; 0x38
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d109      	bne.n	8012bd8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	623b      	str	r3, [r7, #32]
 8012bd6:	e7fe      	b.n	8012bd6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d009      	beq.n	8012bf4 <xQueueGiveFromISR+0x44>
 8012be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be4:	f383 8811 	msr	BASEPRI, r3
 8012be8:	f3bf 8f6f 	isb	sy
 8012bec:	f3bf 8f4f 	dsb	sy
 8012bf0:	61fb      	str	r3, [r7, #28]
 8012bf2:	e7fe      	b.n	8012bf2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d103      	bne.n	8012c04 <xQueueGiveFromISR+0x54>
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d101      	bne.n	8012c08 <xQueueGiveFromISR+0x58>
 8012c04:	2301      	movs	r3, #1
 8012c06:	e000      	b.n	8012c0a <xQueueGiveFromISR+0x5a>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d109      	bne.n	8012c22 <xQueueGiveFromISR+0x72>
 8012c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c12:	f383 8811 	msr	BASEPRI, r3
 8012c16:	f3bf 8f6f 	isb	sy
 8012c1a:	f3bf 8f4f 	dsb	sy
 8012c1e:	61bb      	str	r3, [r7, #24]
 8012c20:	e7fe      	b.n	8012c20 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c22:	f7ff fcbf 	bl	80125a4 <vPortValidateInterruptPriority>
	__asm volatile
 8012c26:	f3ef 8211 	mrs	r2, BASEPRI
 8012c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2e:	f383 8811 	msr	BASEPRI, r3
 8012c32:	f3bf 8f6f 	isb	sy
 8012c36:	f3bf 8f4f 	dsb	sy
 8012c3a:	617a      	str	r2, [r7, #20]
 8012c3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012c3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d22b      	bcs.n	8012caa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5e:	1c5a      	adds	r2, r3, #1
 8012c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c6c:	d112      	bne.n	8012c94 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d016      	beq.n	8012ca4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c78:	3324      	adds	r3, #36	; 0x24
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f001 f976 	bl	8013f6c <xTaskRemoveFromEventList>
 8012c80:	4603      	mov	r3, r0
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00e      	beq.n	8012ca4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00b      	beq.n	8012ca4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	2201      	movs	r2, #1
 8012c90:	601a      	str	r2, [r3, #0]
 8012c92:	e007      	b.n	8012ca4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c98:	3301      	adds	r3, #1
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	b25a      	sxtb	r2, r3
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ca8:	e001      	b.n	8012cae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012caa:	2300      	movs	r3, #0
 8012cac:	637b      	str	r3, [r7, #52]	; 0x34
 8012cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3738      	adds	r7, #56	; 0x38
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
	...

08012cc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08c      	sub	sp, #48	; 0x30
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d109      	bne.n	8012cf2 <xQueueReceive+0x2e>
	__asm volatile
 8012cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce2:	f383 8811 	msr	BASEPRI, r3
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	623b      	str	r3, [r7, #32]
 8012cf0:	e7fe      	b.n	8012cf0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d103      	bne.n	8012d00 <xQueueReceive+0x3c>
 8012cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d101      	bne.n	8012d04 <xQueueReceive+0x40>
 8012d00:	2301      	movs	r3, #1
 8012d02:	e000      	b.n	8012d06 <xQueueReceive+0x42>
 8012d04:	2300      	movs	r3, #0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d109      	bne.n	8012d1e <xQueueReceive+0x5a>
 8012d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0e:	f383 8811 	msr	BASEPRI, r3
 8012d12:	f3bf 8f6f 	isb	sy
 8012d16:	f3bf 8f4f 	dsb	sy
 8012d1a:	61fb      	str	r3, [r7, #28]
 8012d1c:	e7fe      	b.n	8012d1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d1e:	f001 fadb 	bl	80142d8 <xTaskGetSchedulerState>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d102      	bne.n	8012d2e <xQueueReceive+0x6a>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d101      	bne.n	8012d32 <xQueueReceive+0x6e>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e000      	b.n	8012d34 <xQueueReceive+0x70>
 8012d32:	2300      	movs	r3, #0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d109      	bne.n	8012d4c <xQueueReceive+0x88>
 8012d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d3c:	f383 8811 	msr	BASEPRI, r3
 8012d40:	f3bf 8f6f 	isb	sy
 8012d44:	f3bf 8f4f 	dsb	sy
 8012d48:	61bb      	str	r3, [r7, #24]
 8012d4a:	e7fe      	b.n	8012d4a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d4c:	f7ff fb4e 	bl	80123ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d01f      	beq.n	8012d9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d5c:	68b9      	ldr	r1, [r7, #8]
 8012d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d60:	f000 fab5 	bl	80132ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	1e5a      	subs	r2, r3, #1
 8012d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6e:	691b      	ldr	r3, [r3, #16]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d00f      	beq.n	8012d94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d76:	3310      	adds	r3, #16
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f001 f8f7 	bl	8013f6c <xTaskRemoveFromEventList>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d007      	beq.n	8012d94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012d84:	4b3c      	ldr	r3, [pc, #240]	; (8012e78 <xQueueReceive+0x1b4>)
 8012d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d8a:	601a      	str	r2, [r3, #0]
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012d94:	f7ff fb58 	bl	8012448 <vPortExitCritical>
				return pdPASS;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	e069      	b.n	8012e70 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d103      	bne.n	8012daa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012da2:	f7ff fb51 	bl	8012448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012da6:	2300      	movs	r3, #0
 8012da8:	e062      	b.n	8012e70 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d106      	bne.n	8012dbe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012db0:	f107 0310 	add.w	r3, r7, #16
 8012db4:	4618      	mov	r0, r3
 8012db6:	f001 f93b 	bl	8014030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012dbe:	f7ff fb43 	bl	8012448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012dc2:	f000 fed1 	bl	8013b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012dc6:	f7ff fb11 	bl	80123ec <vPortEnterCritical>
 8012dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012dd0:	b25b      	sxtb	r3, r3
 8012dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd6:	d103      	bne.n	8012de0 <xQueueReceive+0x11c>
 8012dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012de6:	b25b      	sxtb	r3, r3
 8012de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dec:	d103      	bne.n	8012df6 <xQueueReceive+0x132>
 8012dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df0:	2200      	movs	r2, #0
 8012df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012df6:	f7ff fb27 	bl	8012448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012dfa:	1d3a      	adds	r2, r7, #4
 8012dfc:	f107 0310 	add.w	r3, r7, #16
 8012e00:	4611      	mov	r1, r2
 8012e02:	4618      	mov	r0, r3
 8012e04:	f001 f92a 	bl	801405c <xTaskCheckForTimeOut>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d123      	bne.n	8012e56 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e10:	f000 fad5 	bl	80133be <prvIsQueueEmpty>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d017      	beq.n	8012e4a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1c:	3324      	adds	r3, #36	; 0x24
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	4611      	mov	r1, r2
 8012e22:	4618      	mov	r0, r3
 8012e24:	f001 f87e 	bl	8013f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e2a:	f000 fa76 	bl	801331a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e2e:	f000 fea9 	bl	8013b84 <xTaskResumeAll>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d189      	bne.n	8012d4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012e38:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <xQueueReceive+0x1b4>)
 8012e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e3e:	601a      	str	r2, [r3, #0]
 8012e40:	f3bf 8f4f 	dsb	sy
 8012e44:	f3bf 8f6f 	isb	sy
 8012e48:	e780      	b.n	8012d4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e4c:	f000 fa65 	bl	801331a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e50:	f000 fe98 	bl	8013b84 <xTaskResumeAll>
 8012e54:	e77a      	b.n	8012d4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e58:	f000 fa5f 	bl	801331a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e5c:	f000 fe92 	bl	8013b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e62:	f000 faac 	bl	80133be <prvIsQueueEmpty>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	f43f af6f 	beq.w	8012d4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012e6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3730      	adds	r7, #48	; 0x30
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	e000ed04 	.word	0xe000ed04

08012e7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b08e      	sub	sp, #56	; 0x38
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012e86:	2300      	movs	r3, #0
 8012e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d109      	bne.n	8012eac <xQueueSemaphoreTake+0x30>
 8012e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e9c:	f383 8811 	msr	BASEPRI, r3
 8012ea0:	f3bf 8f6f 	isb	sy
 8012ea4:	f3bf 8f4f 	dsb	sy
 8012ea8:	623b      	str	r3, [r7, #32]
 8012eaa:	e7fe      	b.n	8012eaa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d009      	beq.n	8012ec8 <xQueueSemaphoreTake+0x4c>
 8012eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	61fb      	str	r3, [r7, #28]
 8012ec6:	e7fe      	b.n	8012ec6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ec8:	f001 fa06 	bl	80142d8 <xTaskGetSchedulerState>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d102      	bne.n	8012ed8 <xQueueSemaphoreTake+0x5c>
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d101      	bne.n	8012edc <xQueueSemaphoreTake+0x60>
 8012ed8:	2301      	movs	r3, #1
 8012eda:	e000      	b.n	8012ede <xQueueSemaphoreTake+0x62>
 8012edc:	2300      	movs	r3, #0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d109      	bne.n	8012ef6 <xQueueSemaphoreTake+0x7a>
 8012ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	61bb      	str	r3, [r7, #24]
 8012ef4:	e7fe      	b.n	8012ef4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ef6:	f7ff fa79 	bl	80123ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012efe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d024      	beq.n	8012f50 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f08:	1e5a      	subs	r2, r3, #1
 8012f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d104      	bne.n	8012f20 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012f16:	f001 fb99 	bl	801464c <pvTaskIncrementMutexHeldCount>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f22:	691b      	ldr	r3, [r3, #16]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00f      	beq.n	8012f48 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2a:	3310      	adds	r3, #16
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f001 f81d 	bl	8013f6c <xTaskRemoveFromEventList>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d007      	beq.n	8012f48 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f38:	4b53      	ldr	r3, [pc, #332]	; (8013088 <xQueueSemaphoreTake+0x20c>)
 8012f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f3e:	601a      	str	r2, [r3, #0]
 8012f40:	f3bf 8f4f 	dsb	sy
 8012f44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012f48:	f7ff fa7e 	bl	8012448 <vPortExitCritical>
				return pdPASS;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e096      	b.n	801307e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d110      	bne.n	8012f78 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d009      	beq.n	8012f70 <xQueueSemaphoreTake+0xf4>
 8012f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f60:	f383 8811 	msr	BASEPRI, r3
 8012f64:	f3bf 8f6f 	isb	sy
 8012f68:	f3bf 8f4f 	dsb	sy
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	e7fe      	b.n	8012f6e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012f70:	f7ff fa6a 	bl	8012448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012f74:	2300      	movs	r3, #0
 8012f76:	e082      	b.n	801307e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d106      	bne.n	8012f8c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f7e:	f107 030c 	add.w	r3, r7, #12
 8012f82:	4618      	mov	r0, r3
 8012f84:	f001 f854 	bl	8014030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f88:	2301      	movs	r3, #1
 8012f8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f8c:	f7ff fa5c 	bl	8012448 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f90:	f000 fdea 	bl	8013b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f94:	f7ff fa2a 	bl	80123ec <vPortEnterCritical>
 8012f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f9e:	b25b      	sxtb	r3, r3
 8012fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa4:	d103      	bne.n	8012fae <xQueueSemaphoreTake+0x132>
 8012fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fb4:	b25b      	sxtb	r3, r3
 8012fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fba:	d103      	bne.n	8012fc4 <xQueueSemaphoreTake+0x148>
 8012fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012fc4:	f7ff fa40 	bl	8012448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012fc8:	463a      	mov	r2, r7
 8012fca:	f107 030c 	add.w	r3, r7, #12
 8012fce:	4611      	mov	r1, r2
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f001 f843 	bl	801405c <xTaskCheckForTimeOut>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d132      	bne.n	8013042 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fde:	f000 f9ee 	bl	80133be <prvIsQueueEmpty>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d026      	beq.n	8013036 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d109      	bne.n	8013004 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012ff0:	f7ff f9fc 	bl	80123ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	689b      	ldr	r3, [r3, #8]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f001 f98b 	bl	8014314 <xTaskPriorityInherit>
 8012ffe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013000:	f7ff fa22 	bl	8012448 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013006:	3324      	adds	r3, #36	; 0x24
 8013008:	683a      	ldr	r2, [r7, #0]
 801300a:	4611      	mov	r1, r2
 801300c:	4618      	mov	r0, r3
 801300e:	f000 ff89 	bl	8013f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013014:	f000 f981 	bl	801331a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013018:	f000 fdb4 	bl	8013b84 <xTaskResumeAll>
 801301c:	4603      	mov	r3, r0
 801301e:	2b00      	cmp	r3, #0
 8013020:	f47f af69 	bne.w	8012ef6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8013024:	4b18      	ldr	r3, [pc, #96]	; (8013088 <xQueueSemaphoreTake+0x20c>)
 8013026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801302a:	601a      	str	r2, [r3, #0]
 801302c:	f3bf 8f4f 	dsb	sy
 8013030:	f3bf 8f6f 	isb	sy
 8013034:	e75f      	b.n	8012ef6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013038:	f000 f96f 	bl	801331a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801303c:	f000 fda2 	bl	8013b84 <xTaskResumeAll>
 8013040:	e759      	b.n	8012ef6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013044:	f000 f969 	bl	801331a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013048:	f000 fd9c 	bl	8013b84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801304c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801304e:	f000 f9b6 	bl	80133be <prvIsQueueEmpty>
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	f43f af4e 	beq.w	8012ef6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305c:	2b00      	cmp	r3, #0
 801305e:	d00d      	beq.n	801307c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8013060:	f7ff f9c4 	bl	80123ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013066:	f000 f8b0 	bl	80131ca <prvGetDisinheritPriorityAfterTimeout>
 801306a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	689b      	ldr	r3, [r3, #8]
 8013070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013072:	4618      	mov	r0, r3
 8013074:	f001 fa52 	bl	801451c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013078:	f7ff f9e6 	bl	8012448 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801307c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801307e:	4618      	mov	r0, r3
 8013080:	3738      	adds	r7, #56	; 0x38
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	e000ed04 	.word	0xe000ed04

0801308c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b08e      	sub	sp, #56	; 0x38
 8013090:	af00      	add	r7, sp, #0
 8013092:	60f8      	str	r0, [r7, #12]
 8013094:	60b9      	str	r1, [r7, #8]
 8013096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d109      	bne.n	80130b6 <xQueueReceiveFromISR+0x2a>
 80130a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	623b      	str	r3, [r7, #32]
 80130b4:	e7fe      	b.n	80130b4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d103      	bne.n	80130c4 <xQueueReceiveFromISR+0x38>
 80130bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d101      	bne.n	80130c8 <xQueueReceiveFromISR+0x3c>
 80130c4:	2301      	movs	r3, #1
 80130c6:	e000      	b.n	80130ca <xQueueReceiveFromISR+0x3e>
 80130c8:	2300      	movs	r3, #0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d109      	bne.n	80130e2 <xQueueReceiveFromISR+0x56>
 80130ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	61fb      	str	r3, [r7, #28]
 80130e0:	e7fe      	b.n	80130e0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130e2:	f7ff fa5f 	bl	80125a4 <vPortValidateInterruptPriority>
	__asm volatile
 80130e6:	f3ef 8211 	mrs	r2, BASEPRI
 80130ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ee:	f383 8811 	msr	BASEPRI, r3
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	f3bf 8f4f 	dsb	sy
 80130fa:	61ba      	str	r2, [r7, #24]
 80130fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80130fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013106:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	2b00      	cmp	r3, #0
 801310c:	d02f      	beq.n	801316e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013118:	68b9      	ldr	r1, [r7, #8]
 801311a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801311c:	f000 f8d7 	bl	80132ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013122:	1e5a      	subs	r2, r3, #1
 8013124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013126:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013128:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013130:	d112      	bne.n	8013158 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d016      	beq.n	8013168 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313c:	3310      	adds	r3, #16
 801313e:	4618      	mov	r0, r3
 8013140:	f000 ff14 	bl	8013f6c <xTaskRemoveFromEventList>
 8013144:	4603      	mov	r3, r0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00e      	beq.n	8013168 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d00b      	beq.n	8013168 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2201      	movs	r2, #1
 8013154:	601a      	str	r2, [r3, #0]
 8013156:	e007      	b.n	8013168 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801315c:	3301      	adds	r3, #1
 801315e:	b2db      	uxtb	r3, r3
 8013160:	b25a      	sxtb	r2, r3
 8013162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013168:	2301      	movs	r3, #1
 801316a:	637b      	str	r3, [r7, #52]	; 0x34
 801316c:	e001      	b.n	8013172 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801316e:	2300      	movs	r3, #0
 8013170:	637b      	str	r3, [r7, #52]	; 0x34
 8013172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013174:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801317e:	4618      	mov	r0, r3
 8013180:	3738      	adds	r7, #56	; 0x38
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}

08013186 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013186:	b580      	push	{r7, lr}
 8013188:	b084      	sub	sp, #16
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d109      	bne.n	80131ac <vQueueDelete+0x26>
	__asm volatile
 8013198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319c:	f383 8811 	msr	BASEPRI, r3
 80131a0:	f3bf 8f6f 	isb	sy
 80131a4:	f3bf 8f4f 	dsb	sy
 80131a8:	60bb      	str	r3, [r7, #8]
 80131aa:	e7fe      	b.n	80131aa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f000 f935 	bl	801341c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d102      	bne.n	80131c2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80131bc:	68f8      	ldr	r0, [r7, #12]
 80131be:	f7fe fe23 	bl	8011e08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80131c2:	bf00      	nop
 80131c4:	3710      	adds	r7, #16
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}

080131ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80131ca:	b480      	push	{r7}
 80131cc:	b085      	sub	sp, #20
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d006      	beq.n	80131e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f1c3 0307 	rsb	r3, r3, #7
 80131e4:	60fb      	str	r3, [r7, #12]
 80131e6:	e001      	b.n	80131ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80131e8:	2300      	movs	r3, #0
 80131ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80131ec:	68fb      	ldr	r3, [r7, #12]
	}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3714      	adds	r7, #20
 80131f2:	46bd      	mov	sp, r7
 80131f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f8:	4770      	bx	lr

080131fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b086      	sub	sp, #24
 80131fe:	af00      	add	r7, sp, #0
 8013200:	60f8      	str	r0, [r7, #12]
 8013202:	60b9      	str	r1, [r7, #8]
 8013204:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013206:	2300      	movs	r3, #0
 8013208:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801320e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013214:	2b00      	cmp	r3, #0
 8013216:	d10d      	bne.n	8013234 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d14d      	bne.n	80132bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	4618      	mov	r0, r3
 8013226:	f001 f8f5 	bl	8014414 <xTaskPriorityDisinherit>
 801322a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2200      	movs	r2, #0
 8013230:	609a      	str	r2, [r3, #8]
 8013232:	e043      	b.n	80132bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d119      	bne.n	801326e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	6858      	ldr	r0, [r3, #4]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013242:	461a      	mov	r2, r3
 8013244:	68b9      	ldr	r1, [r7, #8]
 8013246:	f001 fc89 	bl	8014b5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	685a      	ldr	r2, [r3, #4]
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013252:	441a      	add	r2, r3
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	689b      	ldr	r3, [r3, #8]
 8013260:	429a      	cmp	r2, r3
 8013262:	d32b      	bcc.n	80132bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	605a      	str	r2, [r3, #4]
 801326c:	e026      	b.n	80132bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	68d8      	ldr	r0, [r3, #12]
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013276:	461a      	mov	r2, r3
 8013278:	68b9      	ldr	r1, [r7, #8]
 801327a:	f001 fc6f 	bl	8014b5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	68da      	ldr	r2, [r3, #12]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013286:	425b      	negs	r3, r3
 8013288:	441a      	add	r2, r3
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	68da      	ldr	r2, [r3, #12]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	429a      	cmp	r2, r3
 8013298:	d207      	bcs.n	80132aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	689a      	ldr	r2, [r3, #8]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132a2:	425b      	negs	r3, r3
 80132a4:	441a      	add	r2, r3
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d105      	bne.n	80132bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d002      	beq.n	80132bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	3b01      	subs	r3, #1
 80132ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	1c5a      	adds	r2, r3, #1
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80132c4:	697b      	ldr	r3, [r7, #20]
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b082      	sub	sp, #8
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	6078      	str	r0, [r7, #4]
 80132d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d018      	beq.n	8013312 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	68da      	ldr	r2, [r3, #12]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e8:	441a      	add	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	68da      	ldr	r2, [r3, #12]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d303      	bcc.n	8013302 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	68d9      	ldr	r1, [r3, #12]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330a:	461a      	mov	r2, r3
 801330c:	6838      	ldr	r0, [r7, #0]
 801330e:	f001 fc25 	bl	8014b5c <memcpy>
	}
}
 8013312:	bf00      	nop
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}

0801331a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801331a:	b580      	push	{r7, lr}
 801331c:	b084      	sub	sp, #16
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013322:	f7ff f863 	bl	80123ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801332c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801332e:	e011      	b.n	8013354 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013334:	2b00      	cmp	r3, #0
 8013336:	d012      	beq.n	801335e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	3324      	adds	r3, #36	; 0x24
 801333c:	4618      	mov	r0, r3
 801333e:	f000 fe15 	bl	8013f6c <xTaskRemoveFromEventList>
 8013342:	4603      	mov	r3, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013348:	f000 fee8 	bl	801411c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801334c:	7bfb      	ldrb	r3, [r7, #15]
 801334e:	3b01      	subs	r3, #1
 8013350:	b2db      	uxtb	r3, r3
 8013352:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013358:	2b00      	cmp	r3, #0
 801335a:	dce9      	bgt.n	8013330 <prvUnlockQueue+0x16>
 801335c:	e000      	b.n	8013360 <prvUnlockQueue+0x46>
					break;
 801335e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	22ff      	movs	r2, #255	; 0xff
 8013364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013368:	f7ff f86e 	bl	8012448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801336c:	f7ff f83e 	bl	80123ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013376:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013378:	e011      	b.n	801339e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	691b      	ldr	r3, [r3, #16]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d012      	beq.n	80133a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	3310      	adds	r3, #16
 8013386:	4618      	mov	r0, r3
 8013388:	f000 fdf0 	bl	8013f6c <xTaskRemoveFromEventList>
 801338c:	4603      	mov	r3, r0
 801338e:	2b00      	cmp	r3, #0
 8013390:	d001      	beq.n	8013396 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013392:	f000 fec3 	bl	801411c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013396:	7bbb      	ldrb	r3, [r7, #14]
 8013398:	3b01      	subs	r3, #1
 801339a:	b2db      	uxtb	r3, r3
 801339c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801339e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	dce9      	bgt.n	801337a <prvUnlockQueue+0x60>
 80133a6:	e000      	b.n	80133aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80133a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	22ff      	movs	r2, #255	; 0xff
 80133ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80133b2:	f7ff f849 	bl	8012448 <vPortExitCritical>
}
 80133b6:	bf00      	nop
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}

080133be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80133be:	b580      	push	{r7, lr}
 80133c0:	b084      	sub	sp, #16
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133c6:	f7ff f811 	bl	80123ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d102      	bne.n	80133d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80133d2:	2301      	movs	r3, #1
 80133d4:	60fb      	str	r3, [r7, #12]
 80133d6:	e001      	b.n	80133dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80133d8:	2300      	movs	r3, #0
 80133da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80133dc:	f7ff f834 	bl	8012448 <vPortExitCritical>

	return xReturn;
 80133e0:	68fb      	ldr	r3, [r7, #12]
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}

080133ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b084      	sub	sp, #16
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133f2:	f7fe fffb 	bl	80123ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133fe:	429a      	cmp	r2, r3
 8013400:	d102      	bne.n	8013408 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013402:	2301      	movs	r3, #1
 8013404:	60fb      	str	r3, [r7, #12]
 8013406:	e001      	b.n	801340c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013408:	2300      	movs	r3, #0
 801340a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801340c:	f7ff f81c 	bl	8012448 <vPortExitCritical>

	return xReturn;
 8013410:	68fb      	ldr	r3, [r7, #12]
}
 8013412:	4618      	mov	r0, r3
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
	...

0801341c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013424:	2300      	movs	r3, #0
 8013426:	60fb      	str	r3, [r7, #12]
 8013428:	e016      	b.n	8013458 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801342a:	4a10      	ldr	r2, [pc, #64]	; (801346c <vQueueUnregisterQueue+0x50>)
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	00db      	lsls	r3, r3, #3
 8013430:	4413      	add	r3, r2
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	429a      	cmp	r2, r3
 8013438:	d10b      	bne.n	8013452 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801343a:	4a0c      	ldr	r2, [pc, #48]	; (801346c <vQueueUnregisterQueue+0x50>)
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2100      	movs	r1, #0
 8013440:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013444:	4a09      	ldr	r2, [pc, #36]	; (801346c <vQueueUnregisterQueue+0x50>)
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	4413      	add	r3, r2
 801344c:	2200      	movs	r2, #0
 801344e:	605a      	str	r2, [r3, #4]
				break;
 8013450:	e005      	b.n	801345e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	3301      	adds	r3, #1
 8013456:	60fb      	str	r3, [r7, #12]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2b07      	cmp	r3, #7
 801345c:	d9e5      	bls.n	801342a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801345e:	bf00      	nop
 8013460:	3714      	adds	r7, #20
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr
 801346a:	bf00      	nop
 801346c:	24070fa0 	.word	0x24070fa0

08013470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013470:	b580      	push	{r7, lr}
 8013472:	b08e      	sub	sp, #56	; 0x38
 8013474:	af04      	add	r7, sp, #16
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
 801347c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013480:	2b00      	cmp	r3, #0
 8013482:	d109      	bne.n	8013498 <xTaskCreateStatic+0x28>
 8013484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	623b      	str	r3, [r7, #32]
 8013496:	e7fe      	b.n	8013496 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349a:	2b00      	cmp	r3, #0
 801349c:	d109      	bne.n	80134b2 <xTaskCreateStatic+0x42>
 801349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	61fb      	str	r3, [r7, #28]
 80134b0:	e7fe      	b.n	80134b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80134b2:	2354      	movs	r3, #84	; 0x54
 80134b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	2b54      	cmp	r3, #84	; 0x54
 80134ba:	d009      	beq.n	80134d0 <xTaskCreateStatic+0x60>
 80134bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c0:	f383 8811 	msr	BASEPRI, r3
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	61bb      	str	r3, [r7, #24]
 80134ce:	e7fe      	b.n	80134ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80134d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80134d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d01e      	beq.n	8013516 <xTaskCreateStatic+0xa6>
 80134d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d01b      	beq.n	8013516 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80134de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80134e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ea:	2202      	movs	r2, #2
 80134ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80134f0:	2300      	movs	r3, #0
 80134f2:	9303      	str	r3, [sp, #12]
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	9302      	str	r3, [sp, #8]
 80134f8:	f107 0314 	add.w	r3, r7, #20
 80134fc:	9301      	str	r3, [sp, #4]
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	9300      	str	r3, [sp, #0]
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	68b9      	ldr	r1, [r7, #8]
 8013508:	68f8      	ldr	r0, [r7, #12]
 801350a:	f000 f850 	bl	80135ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801350e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013510:	f000 f8d4 	bl	80136bc <prvAddNewTaskToReadyList>
 8013514:	e001      	b.n	801351a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013516:	2300      	movs	r3, #0
 8013518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801351a:	697b      	ldr	r3, [r7, #20]
	}
 801351c:	4618      	mov	r0, r3
 801351e:	3728      	adds	r7, #40	; 0x28
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013524:	b580      	push	{r7, lr}
 8013526:	b08c      	sub	sp, #48	; 0x30
 8013528:	af04      	add	r7, sp, #16
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	603b      	str	r3, [r7, #0]
 8013530:	4613      	mov	r3, r2
 8013532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013534:	88fb      	ldrh	r3, [r7, #6]
 8013536:	009b      	lsls	r3, r3, #2
 8013538:	4618      	mov	r0, r3
 801353a:	f7fe fba3 	bl	8011c84 <pvPortMalloc>
 801353e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d00e      	beq.n	8013564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013546:	2054      	movs	r0, #84	; 0x54
 8013548:	f7fe fb9c 	bl	8011c84 <pvPortMalloc>
 801354c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d003      	beq.n	801355c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	631a      	str	r2, [r3, #48]	; 0x30
 801355a:	e005      	b.n	8013568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801355c:	6978      	ldr	r0, [r7, #20]
 801355e:	f7fe fc53 	bl	8011e08 <vPortFree>
 8013562:	e001      	b.n	8013568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013564:	2300      	movs	r3, #0
 8013566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d017      	beq.n	801359e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	2200      	movs	r2, #0
 8013572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013576:	88fa      	ldrh	r2, [r7, #6]
 8013578:	2300      	movs	r3, #0
 801357a:	9303      	str	r3, [sp, #12]
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	9302      	str	r3, [sp, #8]
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013582:	9301      	str	r3, [sp, #4]
 8013584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	68b9      	ldr	r1, [r7, #8]
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f000 f80e 	bl	80135ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013592:	69f8      	ldr	r0, [r7, #28]
 8013594:	f000 f892 	bl	80136bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013598:	2301      	movs	r3, #1
 801359a:	61bb      	str	r3, [r7, #24]
 801359c:	e002      	b.n	80135a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801359e:	f04f 33ff 	mov.w	r3, #4294967295
 80135a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80135a4:	69bb      	ldr	r3, [r7, #24]
	}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3720      	adds	r7, #32
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}

080135ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b088      	sub	sp, #32
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	60f8      	str	r0, [r7, #12]
 80135b6:	60b9      	str	r1, [r7, #8]
 80135b8:	607a      	str	r2, [r7, #4]
 80135ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80135bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80135c6:	440b      	add	r3, r1
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	4413      	add	r3, r2
 80135cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	f023 0307 	bic.w	r3, r3, #7
 80135d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80135d6:	69bb      	ldr	r3, [r7, #24]
 80135d8:	f003 0307 	and.w	r3, r3, #7
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d009      	beq.n	80135f4 <prvInitialiseNewTask+0x46>
 80135e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e4:	f383 8811 	msr	BASEPRI, r3
 80135e8:	f3bf 8f6f 	isb	sy
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	617b      	str	r3, [r7, #20]
 80135f2:	e7fe      	b.n	80135f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d01f      	beq.n	801363a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135fa:	2300      	movs	r3, #0
 80135fc:	61fb      	str	r3, [r7, #28]
 80135fe:	e012      	b.n	8013626 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	4413      	add	r3, r2
 8013606:	7819      	ldrb	r1, [r3, #0]
 8013608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	4413      	add	r3, r2
 801360e:	3334      	adds	r3, #52	; 0x34
 8013610:	460a      	mov	r2, r1
 8013612:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013614:	68ba      	ldr	r2, [r7, #8]
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	4413      	add	r3, r2
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d006      	beq.n	801362e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013620:	69fb      	ldr	r3, [r7, #28]
 8013622:	3301      	adds	r3, #1
 8013624:	61fb      	str	r3, [r7, #28]
 8013626:	69fb      	ldr	r3, [r7, #28]
 8013628:	2b0f      	cmp	r3, #15
 801362a:	d9e9      	bls.n	8013600 <prvInitialiseNewTask+0x52>
 801362c:	e000      	b.n	8013630 <prvInitialiseNewTask+0x82>
			{
				break;
 801362e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013632:	2200      	movs	r2, #0
 8013634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013638:	e003      	b.n	8013642 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363c:	2200      	movs	r2, #0
 801363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013644:	2b06      	cmp	r3, #6
 8013646:	d901      	bls.n	801364c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013648:	2306      	movs	r3, #6
 801364a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013650:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013656:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365a:	2200      	movs	r2, #0
 801365c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013660:	3304      	adds	r3, #4
 8013662:	4618      	mov	r0, r3
 8013664:	f7fe fd04 	bl	8012070 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366a:	3318      	adds	r3, #24
 801366c:	4618      	mov	r0, r3
 801366e:	f7fe fcff 	bl	8012070 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013676:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367a:	f1c3 0207 	rsb	r2, r3, #7
 801367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013680:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013686:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801368a:	2200      	movs	r2, #0
 801368c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013690:	2200      	movs	r2, #0
 8013692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013696:	683a      	ldr	r2, [r7, #0]
 8013698:	68f9      	ldr	r1, [r7, #12]
 801369a:	69b8      	ldr	r0, [r7, #24]
 801369c:	f7fe fd7c 	bl	8012198 <pxPortInitialiseStack>
 80136a0:	4602      	mov	r2, r0
 80136a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80136a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136b2:	bf00      	nop
 80136b4:	3720      	adds	r7, #32
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
	...

080136bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80136c4:	f7fe fe92 	bl	80123ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80136c8:	4b2a      	ldr	r3, [pc, #168]	; (8013774 <prvAddNewTaskToReadyList+0xb8>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	3301      	adds	r3, #1
 80136ce:	4a29      	ldr	r2, [pc, #164]	; (8013774 <prvAddNewTaskToReadyList+0xb8>)
 80136d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80136d2:	4b29      	ldr	r3, [pc, #164]	; (8013778 <prvAddNewTaskToReadyList+0xbc>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d109      	bne.n	80136ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80136da:	4a27      	ldr	r2, [pc, #156]	; (8013778 <prvAddNewTaskToReadyList+0xbc>)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80136e0:	4b24      	ldr	r3, [pc, #144]	; (8013774 <prvAddNewTaskToReadyList+0xb8>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d110      	bne.n	801370a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80136e8:	f000 fd3c 	bl	8014164 <prvInitialiseTaskLists>
 80136ec:	e00d      	b.n	801370a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80136ee:	4b23      	ldr	r3, [pc, #140]	; (801377c <prvAddNewTaskToReadyList+0xc0>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d109      	bne.n	801370a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80136f6:	4b20      	ldr	r3, [pc, #128]	; (8013778 <prvAddNewTaskToReadyList+0xbc>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013700:	429a      	cmp	r2, r3
 8013702:	d802      	bhi.n	801370a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013704:	4a1c      	ldr	r2, [pc, #112]	; (8013778 <prvAddNewTaskToReadyList+0xbc>)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801370a:	4b1d      	ldr	r3, [pc, #116]	; (8013780 <prvAddNewTaskToReadyList+0xc4>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	3301      	adds	r3, #1
 8013710:	4a1b      	ldr	r2, [pc, #108]	; (8013780 <prvAddNewTaskToReadyList+0xc4>)
 8013712:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013718:	2201      	movs	r2, #1
 801371a:	409a      	lsls	r2, r3
 801371c:	4b19      	ldr	r3, [pc, #100]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4313      	orrs	r3, r2
 8013722:	4a18      	ldr	r2, [pc, #96]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 8013724:	6013      	str	r3, [r2, #0]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801372a:	4613      	mov	r3, r2
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	4413      	add	r3, r2
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	4a15      	ldr	r2, [pc, #84]	; (8013788 <prvAddNewTaskToReadyList+0xcc>)
 8013734:	441a      	add	r2, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	3304      	adds	r3, #4
 801373a:	4619      	mov	r1, r3
 801373c:	4610      	mov	r0, r2
 801373e:	f7fe fca4 	bl	801208a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013742:	f7fe fe81 	bl	8012448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013746:	4b0d      	ldr	r3, [pc, #52]	; (801377c <prvAddNewTaskToReadyList+0xc0>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d00e      	beq.n	801376c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801374e:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <prvAddNewTaskToReadyList+0xbc>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013758:	429a      	cmp	r2, r3
 801375a:	d207      	bcs.n	801376c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801375c:	4b0b      	ldr	r3, [pc, #44]	; (801378c <prvAddNewTaskToReadyList+0xd0>)
 801375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013762:	601a      	str	r2, [r3, #0]
 8013764:	f3bf 8f4f 	dsb	sy
 8013768:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801376c:	bf00      	nop
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	24064a58 	.word	0x24064a58
 8013778:	24064958 	.word	0x24064958
 801377c:	24064a64 	.word	0x24064a64
 8013780:	24064a74 	.word	0x24064a74
 8013784:	24064a60 	.word	0x24064a60
 8013788:	2406495c 	.word	0x2406495c
 801378c:	e000ed04 	.word	0xe000ed04

08013790 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013798:	f7fe fe28 	bl	80123ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d102      	bne.n	80137a8 <vTaskSuspend+0x18>
 80137a2:	4b3c      	ldr	r3, [pc, #240]	; (8013894 <vTaskSuspend+0x104>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	e000      	b.n	80137aa <vTaskSuspend+0x1a>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	3304      	adds	r3, #4
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fe fcc7 	bl	8012144 <uxListRemove>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d115      	bne.n	80137e8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137c0:	4935      	ldr	r1, [pc, #212]	; (8013898 <vTaskSuspend+0x108>)
 80137c2:	4613      	mov	r3, r2
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	4413      	add	r3, r2
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	440b      	add	r3, r1
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d10a      	bne.n	80137e8 <vTaskSuspend+0x58>
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d6:	2201      	movs	r2, #1
 80137d8:	fa02 f303 	lsl.w	r3, r2, r3
 80137dc:	43da      	mvns	r2, r3
 80137de:	4b2f      	ldr	r3, [pc, #188]	; (801389c <vTaskSuspend+0x10c>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	4013      	ands	r3, r2
 80137e4:	4a2d      	ldr	r2, [pc, #180]	; (801389c <vTaskSuspend+0x10c>)
 80137e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d004      	beq.n	80137fa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	3318      	adds	r3, #24
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7fe fca5 	bl	8012144 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	3304      	adds	r3, #4
 80137fe:	4619      	mov	r1, r3
 8013800:	4827      	ldr	r0, [pc, #156]	; (80138a0 <vTaskSuspend+0x110>)
 8013802:	f7fe fc42 	bl	801208a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801380c:	b2db      	uxtb	r3, r3
 801380e:	2b01      	cmp	r3, #1
 8013810:	d103      	bne.n	801381a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2200      	movs	r2, #0
 8013816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801381a:	f7fe fe15 	bl	8012448 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801381e:	4b21      	ldr	r3, [pc, #132]	; (80138a4 <vTaskSuspend+0x114>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d005      	beq.n	8013832 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013826:	f7fe fde1 	bl	80123ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801382a:	f000 fd35 	bl	8014298 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801382e:	f7fe fe0b 	bl	8012448 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013832:	4b18      	ldr	r3, [pc, #96]	; (8013894 <vTaskSuspend+0x104>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	429a      	cmp	r2, r3
 801383a:	d126      	bne.n	801388a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 801383c:	4b19      	ldr	r3, [pc, #100]	; (80138a4 <vTaskSuspend+0x114>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d016      	beq.n	8013872 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013844:	4b18      	ldr	r3, [pc, #96]	; (80138a8 <vTaskSuspend+0x118>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d009      	beq.n	8013860 <vTaskSuspend+0xd0>
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	60bb      	str	r3, [r7, #8]
 801385e:	e7fe      	b.n	801385e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8013860:	4b12      	ldr	r3, [pc, #72]	; (80138ac <vTaskSuspend+0x11c>)
 8013862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013866:	601a      	str	r2, [r3, #0]
 8013868:	f3bf 8f4f 	dsb	sy
 801386c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013870:	e00b      	b.n	801388a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013872:	4b0b      	ldr	r3, [pc, #44]	; (80138a0 <vTaskSuspend+0x110>)
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	4b0e      	ldr	r3, [pc, #56]	; (80138b0 <vTaskSuspend+0x120>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	429a      	cmp	r2, r3
 801387c:	d103      	bne.n	8013886 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 801387e:	4b05      	ldr	r3, [pc, #20]	; (8013894 <vTaskSuspend+0x104>)
 8013880:	2200      	movs	r2, #0
 8013882:	601a      	str	r2, [r3, #0]
	}
 8013884:	e001      	b.n	801388a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8013886:	f000 faf3 	bl	8013e70 <vTaskSwitchContext>
	}
 801388a:	bf00      	nop
 801388c:	3710      	adds	r7, #16
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	24064958 	.word	0x24064958
 8013898:	2406495c 	.word	0x2406495c
 801389c:	24064a60 	.word	0x24064a60
 80138a0:	24064a44 	.word	0x24064a44
 80138a4:	24064a64 	.word	0x24064a64
 80138a8:	24064a80 	.word	0x24064a80
 80138ac:	e000ed04 	.word	0xe000ed04
 80138b0:	24064a58 	.word	0x24064a58

080138b4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80138b4:	b480      	push	{r7}
 80138b6:	b087      	sub	sp, #28
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80138bc:	2300      	movs	r3, #0
 80138be:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d109      	bne.n	80138de <prvTaskIsTaskSuspended+0x2a>
 80138ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ce:	f383 8811 	msr	BASEPRI, r3
 80138d2:	f3bf 8f6f 	isb	sy
 80138d6:	f3bf 8f4f 	dsb	sy
 80138da:	60fb      	str	r3, [r7, #12]
 80138dc:	e7fe      	b.n	80138dc <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	4a0a      	ldr	r2, [pc, #40]	; (801390c <prvTaskIsTaskSuspended+0x58>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d10a      	bne.n	80138fe <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ec:	4a08      	ldr	r2, [pc, #32]	; (8013910 <prvTaskIsTaskSuspended+0x5c>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d005      	beq.n	80138fe <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 80138fa:	2301      	movs	r3, #1
 80138fc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138fe:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013900:	4618      	mov	r0, r3
 8013902:	371c      	adds	r7, #28
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr
 801390c:	24064a44 	.word	0x24064a44
 8013910:	24064a18 	.word	0x24064a18

08013914 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d109      	bne.n	801393a <vTaskResume+0x26>
 8013926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392a:	f383 8811 	msr	BASEPRI, r3
 801392e:	f3bf 8f6f 	isb	sy
 8013932:	f3bf 8f4f 	dsb	sy
 8013936:	60bb      	str	r3, [r7, #8]
 8013938:	e7fe      	b.n	8013938 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801393a:	4b20      	ldr	r3, [pc, #128]	; (80139bc <vTaskResume+0xa8>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	429a      	cmp	r2, r3
 8013942:	d037      	beq.n	80139b4 <vTaskResume+0xa0>
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d034      	beq.n	80139b4 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 801394a:	f7fe fd4f 	bl	80123ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	f7ff ffb0 	bl	80138b4 <prvTaskIsTaskSuspended>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d02a      	beq.n	80139b0 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	3304      	adds	r3, #4
 801395e:	4618      	mov	r0, r3
 8013960:	f7fe fbf0 	bl	8012144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013968:	2201      	movs	r2, #1
 801396a:	409a      	lsls	r2, r3
 801396c:	4b14      	ldr	r3, [pc, #80]	; (80139c0 <vTaskResume+0xac>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	4313      	orrs	r3, r2
 8013972:	4a13      	ldr	r2, [pc, #76]	; (80139c0 <vTaskResume+0xac>)
 8013974:	6013      	str	r3, [r2, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397a:	4613      	mov	r3, r2
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	4413      	add	r3, r2
 8013980:	009b      	lsls	r3, r3, #2
 8013982:	4a10      	ldr	r2, [pc, #64]	; (80139c4 <vTaskResume+0xb0>)
 8013984:	441a      	add	r2, r3
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	3304      	adds	r3, #4
 801398a:	4619      	mov	r1, r3
 801398c:	4610      	mov	r0, r2
 801398e:	f7fe fb7c 	bl	801208a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013996:	4b09      	ldr	r3, [pc, #36]	; (80139bc <vTaskResume+0xa8>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801399c:	429a      	cmp	r2, r3
 801399e:	d307      	bcc.n	80139b0 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80139a0:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <vTaskResume+0xb4>)
 80139a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139a6:	601a      	str	r2, [r3, #0]
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80139b0:	f7fe fd4a 	bl	8012448 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80139b4:	bf00      	nop
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	24064958 	.word	0x24064958
 80139c0:	24064a60 	.word	0x24064a60
 80139c4:	2406495c 	.word	0x2406495c
 80139c8:	e000ed04 	.word	0xe000ed04

080139cc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b08a      	sub	sp, #40	; 0x28
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80139d4:	2300      	movs	r3, #0
 80139d6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d109      	bne.n	80139f6 <xTaskResumeFromISR+0x2a>
 80139e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e6:	f383 8811 	msr	BASEPRI, r3
 80139ea:	f3bf 8f6f 	isb	sy
 80139ee:	f3bf 8f4f 	dsb	sy
 80139f2:	61bb      	str	r3, [r7, #24]
 80139f4:	e7fe      	b.n	80139f4 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139f6:	f7fe fdd5 	bl	80125a4 <vPortValidateInterruptPriority>
	__asm volatile
 80139fa:	f3ef 8211 	mrs	r2, BASEPRI
 80139fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a02:	f383 8811 	msr	BASEPRI, r3
 8013a06:	f3bf 8f6f 	isb	sy
 8013a0a:	f3bf 8f4f 	dsb	sy
 8013a0e:	617a      	str	r2, [r7, #20]
 8013a10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013a12:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a14:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013a16:	6a38      	ldr	r0, [r7, #32]
 8013a18:	f7ff ff4c 	bl	80138b4 <prvTaskIsTaskSuspended>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d02f      	beq.n	8013a82 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a22:	4b1d      	ldr	r3, [pc, #116]	; (8013a98 <xTaskResumeFromISR+0xcc>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d125      	bne.n	8013a76 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a2a:	6a3b      	ldr	r3, [r7, #32]
 8013a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a2e:	4b1b      	ldr	r3, [pc, #108]	; (8013a9c <xTaskResumeFromISR+0xd0>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d301      	bcc.n	8013a3c <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a3c:	6a3b      	ldr	r3, [r7, #32]
 8013a3e:	3304      	adds	r3, #4
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fe fb7f 	bl	8012144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013a46:	6a3b      	ldr	r3, [r7, #32]
 8013a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	409a      	lsls	r2, r3
 8013a4e:	4b14      	ldr	r3, [pc, #80]	; (8013aa0 <xTaskResumeFromISR+0xd4>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	4313      	orrs	r3, r2
 8013a54:	4a12      	ldr	r2, [pc, #72]	; (8013aa0 <xTaskResumeFromISR+0xd4>)
 8013a56:	6013      	str	r3, [r2, #0]
 8013a58:	6a3b      	ldr	r3, [r7, #32]
 8013a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	4413      	add	r3, r2
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	4a0f      	ldr	r2, [pc, #60]	; (8013aa4 <xTaskResumeFromISR+0xd8>)
 8013a66:	441a      	add	r2, r3
 8013a68:	6a3b      	ldr	r3, [r7, #32]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7fe fb0b 	bl	801208a <vListInsertEnd>
 8013a74:	e005      	b.n	8013a82 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013a76:	6a3b      	ldr	r3, [r7, #32]
 8013a78:	3318      	adds	r3, #24
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	480a      	ldr	r0, [pc, #40]	; (8013aa8 <xTaskResumeFromISR+0xdc>)
 8013a7e:	f7fe fb04 	bl	801208a <vListInsertEnd>
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8013a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3728      	adds	r7, #40	; 0x28
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	24064a80 	.word	0x24064a80
 8013a9c:	24064958 	.word	0x24064958
 8013aa0:	24064a60 	.word	0x24064a60
 8013aa4:	2406495c 	.word	0x2406495c
 8013aa8:	24064a18 	.word	0x24064a18

08013aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b08a      	sub	sp, #40	; 0x28
 8013ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013aba:	463a      	mov	r2, r7
 8013abc:	1d39      	adds	r1, r7, #4
 8013abe:	f107 0308 	add.w	r3, r7, #8
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ec ffb4 	bl	8000a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013ac8:	6839      	ldr	r1, [r7, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	68ba      	ldr	r2, [r7, #8]
 8013ace:	9202      	str	r2, [sp, #8]
 8013ad0:	9301      	str	r3, [sp, #4]
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	9300      	str	r3, [sp, #0]
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	460a      	mov	r2, r1
 8013ada:	491d      	ldr	r1, [pc, #116]	; (8013b50 <vTaskStartScheduler+0xa4>)
 8013adc:	481d      	ldr	r0, [pc, #116]	; (8013b54 <vTaskStartScheduler+0xa8>)
 8013ade:	f7ff fcc7 	bl	8013470 <xTaskCreateStatic>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	4b1c      	ldr	r3, [pc, #112]	; (8013b58 <vTaskStartScheduler+0xac>)
 8013ae6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013ae8:	4b1b      	ldr	r3, [pc, #108]	; (8013b58 <vTaskStartScheduler+0xac>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d002      	beq.n	8013af6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013af0:	2301      	movs	r3, #1
 8013af2:	617b      	str	r3, [r7, #20]
 8013af4:	e001      	b.n	8013afa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013af6:	2300      	movs	r3, #0
 8013af8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d115      	bne.n	8013b2c <vTaskStartScheduler+0x80>
	__asm volatile
 8013b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b04:	f383 8811 	msr	BASEPRI, r3
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	f3bf 8f4f 	dsb	sy
 8013b10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013b12:	4b12      	ldr	r3, [pc, #72]	; (8013b5c <vTaskStartScheduler+0xb0>)
 8013b14:	f04f 32ff 	mov.w	r2, #4294967295
 8013b18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013b1a:	4b11      	ldr	r3, [pc, #68]	; (8013b60 <vTaskStartScheduler+0xb4>)
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013b20:	4b10      	ldr	r3, [pc, #64]	; (8013b64 <vTaskStartScheduler+0xb8>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b26:	f7fe fbc3 	bl	80122b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b2a:	e00d      	b.n	8013b48 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b32:	d109      	bne.n	8013b48 <vTaskStartScheduler+0x9c>
 8013b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b38:	f383 8811 	msr	BASEPRI, r3
 8013b3c:	f3bf 8f6f 	isb	sy
 8013b40:	f3bf 8f4f 	dsb	sy
 8013b44:	60fb      	str	r3, [r7, #12]
 8013b46:	e7fe      	b.n	8013b46 <vTaskStartScheduler+0x9a>
}
 8013b48:	bf00      	nop
 8013b4a:	3718      	adds	r7, #24
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	08015478 	.word	0x08015478
 8013b54:	08014135 	.word	0x08014135
 8013b58:	24064a7c 	.word	0x24064a7c
 8013b5c:	24064a78 	.word	0x24064a78
 8013b60:	24064a64 	.word	0x24064a64
 8013b64:	24064a5c 	.word	0x24064a5c

08013b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b68:	b480      	push	{r7}
 8013b6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013b6c:	4b04      	ldr	r3, [pc, #16]	; (8013b80 <vTaskSuspendAll+0x18>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	3301      	adds	r3, #1
 8013b72:	4a03      	ldr	r2, [pc, #12]	; (8013b80 <vTaskSuspendAll+0x18>)
 8013b74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013b76:	bf00      	nop
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	24064a80 	.word	0x24064a80

08013b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b92:	4b41      	ldr	r3, [pc, #260]	; (8013c98 <xTaskResumeAll+0x114>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d109      	bne.n	8013bae <xTaskResumeAll+0x2a>
 8013b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	603b      	str	r3, [r7, #0]
 8013bac:	e7fe      	b.n	8013bac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013bae:	f7fe fc1d 	bl	80123ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013bb2:	4b39      	ldr	r3, [pc, #228]	; (8013c98 <xTaskResumeAll+0x114>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	3b01      	subs	r3, #1
 8013bb8:	4a37      	ldr	r2, [pc, #220]	; (8013c98 <xTaskResumeAll+0x114>)
 8013bba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bbc:	4b36      	ldr	r3, [pc, #216]	; (8013c98 <xTaskResumeAll+0x114>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d161      	bne.n	8013c88 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013bc4:	4b35      	ldr	r3, [pc, #212]	; (8013c9c <xTaskResumeAll+0x118>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d05d      	beq.n	8013c88 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bcc:	e02e      	b.n	8013c2c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bce:	4b34      	ldr	r3, [pc, #208]	; (8013ca0 <xTaskResumeAll+0x11c>)
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	3318      	adds	r3, #24
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7fe fab2 	bl	8012144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	3304      	adds	r3, #4
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7fe faad 	bl	8012144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bee:	2201      	movs	r2, #1
 8013bf0:	409a      	lsls	r2, r3
 8013bf2:	4b2c      	ldr	r3, [pc, #176]	; (8013ca4 <xTaskResumeAll+0x120>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	4a2a      	ldr	r2, [pc, #168]	; (8013ca4 <xTaskResumeAll+0x120>)
 8013bfa:	6013      	str	r3, [r2, #0]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c00:	4613      	mov	r3, r2
 8013c02:	009b      	lsls	r3, r3, #2
 8013c04:	4413      	add	r3, r2
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	4a27      	ldr	r2, [pc, #156]	; (8013ca8 <xTaskResumeAll+0x124>)
 8013c0a:	441a      	add	r2, r3
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	3304      	adds	r3, #4
 8013c10:	4619      	mov	r1, r3
 8013c12:	4610      	mov	r0, r2
 8013c14:	f7fe fa39 	bl	801208a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c1c:	4b23      	ldr	r3, [pc, #140]	; (8013cac <xTaskResumeAll+0x128>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d302      	bcc.n	8013c2c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013c26:	4b22      	ldr	r3, [pc, #136]	; (8013cb0 <xTaskResumeAll+0x12c>)
 8013c28:	2201      	movs	r2, #1
 8013c2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c2c:	4b1c      	ldr	r3, [pc, #112]	; (8013ca0 <xTaskResumeAll+0x11c>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1cc      	bne.n	8013bce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d001      	beq.n	8013c3e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c3a:	f000 fb2d 	bl	8014298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013c3e:	4b1d      	ldr	r3, [pc, #116]	; (8013cb4 <xTaskResumeAll+0x130>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d010      	beq.n	8013c6c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c4a:	f000 f859 	bl	8013d00 <xTaskIncrementTick>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d002      	beq.n	8013c5a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013c54:	4b16      	ldr	r3, [pc, #88]	; (8013cb0 <xTaskResumeAll+0x12c>)
 8013c56:	2201      	movs	r2, #1
 8013c58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1f1      	bne.n	8013c4a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013c66:	4b13      	ldr	r3, [pc, #76]	; (8013cb4 <xTaskResumeAll+0x130>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c6c:	4b10      	ldr	r3, [pc, #64]	; (8013cb0 <xTaskResumeAll+0x12c>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d009      	beq.n	8013c88 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c74:	2301      	movs	r3, #1
 8013c76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c78:	4b0f      	ldr	r3, [pc, #60]	; (8013cb8 <xTaskResumeAll+0x134>)
 8013c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c88:	f7fe fbde 	bl	8012448 <vPortExitCritical>

	return xAlreadyYielded;
 8013c8c:	68bb      	ldr	r3, [r7, #8]
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3710      	adds	r7, #16
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
 8013c96:	bf00      	nop
 8013c98:	24064a80 	.word	0x24064a80
 8013c9c:	24064a58 	.word	0x24064a58
 8013ca0:	24064a18 	.word	0x24064a18
 8013ca4:	24064a60 	.word	0x24064a60
 8013ca8:	2406495c 	.word	0x2406495c
 8013cac:	24064958 	.word	0x24064958
 8013cb0:	24064a6c 	.word	0x24064a6c
 8013cb4:	24064a68 	.word	0x24064a68
 8013cb8:	e000ed04 	.word	0xe000ed04

08013cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013cc2:	4b05      	ldr	r3, [pc, #20]	; (8013cd8 <xTaskGetTickCount+0x1c>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013cc8:	687b      	ldr	r3, [r7, #4]
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	370c      	adds	r7, #12
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop
 8013cd8:	24064a5c 	.word	0x24064a5c

08013cdc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ce2:	f7fe fc5f 	bl	80125a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013cea:	4b04      	ldr	r3, [pc, #16]	; (8013cfc <xTaskGetTickCountFromISR+0x20>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cf0:	683b      	ldr	r3, [r7, #0]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3708      	adds	r7, #8
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
 8013cfa:	bf00      	nop
 8013cfc:	24064a5c 	.word	0x24064a5c

08013d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b086      	sub	sp, #24
 8013d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d06:	2300      	movs	r3, #0
 8013d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d0a:	4b4e      	ldr	r3, [pc, #312]	; (8013e44 <xTaskIncrementTick+0x144>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	f040 8087 	bne.w	8013e22 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d14:	4b4c      	ldr	r3, [pc, #304]	; (8013e48 <xTaskIncrementTick+0x148>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	3301      	adds	r3, #1
 8013d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d1c:	4a4a      	ldr	r2, [pc, #296]	; (8013e48 <xTaskIncrementTick+0x148>)
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d11f      	bne.n	8013d68 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d28:	4b48      	ldr	r3, [pc, #288]	; (8013e4c <xTaskIncrementTick+0x14c>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d009      	beq.n	8013d46 <xTaskIncrementTick+0x46>
 8013d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d36:	f383 8811 	msr	BASEPRI, r3
 8013d3a:	f3bf 8f6f 	isb	sy
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	603b      	str	r3, [r7, #0]
 8013d44:	e7fe      	b.n	8013d44 <xTaskIncrementTick+0x44>
 8013d46:	4b41      	ldr	r3, [pc, #260]	; (8013e4c <xTaskIncrementTick+0x14c>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	60fb      	str	r3, [r7, #12]
 8013d4c:	4b40      	ldr	r3, [pc, #256]	; (8013e50 <xTaskIncrementTick+0x150>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a3e      	ldr	r2, [pc, #248]	; (8013e4c <xTaskIncrementTick+0x14c>)
 8013d52:	6013      	str	r3, [r2, #0]
 8013d54:	4a3e      	ldr	r2, [pc, #248]	; (8013e50 <xTaskIncrementTick+0x150>)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	6013      	str	r3, [r2, #0]
 8013d5a:	4b3e      	ldr	r3, [pc, #248]	; (8013e54 <xTaskIncrementTick+0x154>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	3301      	adds	r3, #1
 8013d60:	4a3c      	ldr	r2, [pc, #240]	; (8013e54 <xTaskIncrementTick+0x154>)
 8013d62:	6013      	str	r3, [r2, #0]
 8013d64:	f000 fa98 	bl	8014298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d68:	4b3b      	ldr	r3, [pc, #236]	; (8013e58 <xTaskIncrementTick+0x158>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d348      	bcc.n	8013e04 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d72:	4b36      	ldr	r3, [pc, #216]	; (8013e4c <xTaskIncrementTick+0x14c>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d104      	bne.n	8013d86 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d7c:	4b36      	ldr	r3, [pc, #216]	; (8013e58 <xTaskIncrementTick+0x158>)
 8013d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d82:	601a      	str	r2, [r3, #0]
					break;
 8013d84:	e03e      	b.n	8013e04 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d86:	4b31      	ldr	r3, [pc, #196]	; (8013e4c <xTaskIncrementTick+0x14c>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d96:	693a      	ldr	r2, [r7, #16]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d203      	bcs.n	8013da6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d9e:	4a2e      	ldr	r2, [pc, #184]	; (8013e58 <xTaskIncrementTick+0x158>)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013da4:	e02e      	b.n	8013e04 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	3304      	adds	r3, #4
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe f9ca 	bl	8012144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d004      	beq.n	8013dc2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	3318      	adds	r3, #24
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fe f9c1 	bl	8012144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	409a      	lsls	r2, r3
 8013dca:	4b24      	ldr	r3, [pc, #144]	; (8013e5c <xTaskIncrementTick+0x15c>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4313      	orrs	r3, r2
 8013dd0:	4a22      	ldr	r2, [pc, #136]	; (8013e5c <xTaskIncrementTick+0x15c>)
 8013dd2:	6013      	str	r3, [r2, #0]
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd8:	4613      	mov	r3, r2
 8013dda:	009b      	lsls	r3, r3, #2
 8013ddc:	4413      	add	r3, r2
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	4a1f      	ldr	r2, [pc, #124]	; (8013e60 <xTaskIncrementTick+0x160>)
 8013de2:	441a      	add	r2, r3
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	3304      	adds	r3, #4
 8013de8:	4619      	mov	r1, r3
 8013dea:	4610      	mov	r0, r2
 8013dec:	f7fe f94d 	bl	801208a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013df4:	4b1b      	ldr	r3, [pc, #108]	; (8013e64 <xTaskIncrementTick+0x164>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d3b9      	bcc.n	8013d72 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e02:	e7b6      	b.n	8013d72 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e04:	4b17      	ldr	r3, [pc, #92]	; (8013e64 <xTaskIncrementTick+0x164>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e0a:	4915      	ldr	r1, [pc, #84]	; (8013e60 <xTaskIncrementTick+0x160>)
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	4413      	add	r3, r2
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	440b      	add	r3, r1
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d907      	bls.n	8013e2c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	617b      	str	r3, [r7, #20]
 8013e20:	e004      	b.n	8013e2c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013e22:	4b11      	ldr	r3, [pc, #68]	; (8013e68 <xTaskIncrementTick+0x168>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	3301      	adds	r3, #1
 8013e28:	4a0f      	ldr	r2, [pc, #60]	; (8013e68 <xTaskIncrementTick+0x168>)
 8013e2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013e2c:	4b0f      	ldr	r3, [pc, #60]	; (8013e6c <xTaskIncrementTick+0x16c>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d001      	beq.n	8013e38 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013e34:	2301      	movs	r3, #1
 8013e36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013e38:	697b      	ldr	r3, [r7, #20]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3718      	adds	r7, #24
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	24064a80 	.word	0x24064a80
 8013e48:	24064a5c 	.word	0x24064a5c
 8013e4c:	24064a10 	.word	0x24064a10
 8013e50:	24064a14 	.word	0x24064a14
 8013e54:	24064a70 	.word	0x24064a70
 8013e58:	24064a78 	.word	0x24064a78
 8013e5c:	24064a60 	.word	0x24064a60
 8013e60:	2406495c 	.word	0x2406495c
 8013e64:	24064958 	.word	0x24064958
 8013e68:	24064a68 	.word	0x24064a68
 8013e6c:	24064a6c 	.word	0x24064a6c

08013e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e70:	b480      	push	{r7}
 8013e72:	b087      	sub	sp, #28
 8013e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e76:	4b26      	ldr	r3, [pc, #152]	; (8013f10 <vTaskSwitchContext+0xa0>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d003      	beq.n	8013e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e7e:	4b25      	ldr	r3, [pc, #148]	; (8013f14 <vTaskSwitchContext+0xa4>)
 8013e80:	2201      	movs	r2, #1
 8013e82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e84:	e03e      	b.n	8013f04 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013e86:	4b23      	ldr	r3, [pc, #140]	; (8013f14 <vTaskSwitchContext+0xa4>)
 8013e88:	2200      	movs	r2, #0
 8013e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e8c:	4b22      	ldr	r3, [pc, #136]	; (8013f18 <vTaskSwitchContext+0xa8>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	fab3 f383 	clz	r3, r3
 8013e98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e9a:	7afb      	ldrb	r3, [r7, #11]
 8013e9c:	f1c3 031f 	rsb	r3, r3, #31
 8013ea0:	617b      	str	r3, [r7, #20]
 8013ea2:	491e      	ldr	r1, [pc, #120]	; (8013f1c <vTaskSwitchContext+0xac>)
 8013ea4:	697a      	ldr	r2, [r7, #20]
 8013ea6:	4613      	mov	r3, r2
 8013ea8:	009b      	lsls	r3, r3, #2
 8013eaa:	4413      	add	r3, r2
 8013eac:	009b      	lsls	r3, r3, #2
 8013eae:	440b      	add	r3, r1
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d109      	bne.n	8013eca <vTaskSwitchContext+0x5a>
	__asm volatile
 8013eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eba:	f383 8811 	msr	BASEPRI, r3
 8013ebe:	f3bf 8f6f 	isb	sy
 8013ec2:	f3bf 8f4f 	dsb	sy
 8013ec6:	607b      	str	r3, [r7, #4]
 8013ec8:	e7fe      	b.n	8013ec8 <vTaskSwitchContext+0x58>
 8013eca:	697a      	ldr	r2, [r7, #20]
 8013ecc:	4613      	mov	r3, r2
 8013ece:	009b      	lsls	r3, r3, #2
 8013ed0:	4413      	add	r3, r2
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	4a11      	ldr	r2, [pc, #68]	; (8013f1c <vTaskSwitchContext+0xac>)
 8013ed6:	4413      	add	r3, r2
 8013ed8:	613b      	str	r3, [r7, #16]
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	685a      	ldr	r2, [r3, #4]
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	605a      	str	r2, [r3, #4]
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	685a      	ldr	r2, [r3, #4]
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	3308      	adds	r3, #8
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d104      	bne.n	8013efa <vTaskSwitchContext+0x8a>
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	685a      	ldr	r2, [r3, #4]
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	605a      	str	r2, [r3, #4]
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	4a07      	ldr	r2, [pc, #28]	; (8013f20 <vTaskSwitchContext+0xb0>)
 8013f02:	6013      	str	r3, [r2, #0]
}
 8013f04:	bf00      	nop
 8013f06:	371c      	adds	r7, #28
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr
 8013f10:	24064a80 	.word	0x24064a80
 8013f14:	24064a6c 	.word	0x24064a6c
 8013f18:	24064a60 	.word	0x24064a60
 8013f1c:	2406495c 	.word	0x2406495c
 8013f20:	24064958 	.word	0x24064958

08013f24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b084      	sub	sp, #16
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d109      	bne.n	8013f48 <vTaskPlaceOnEventList+0x24>
 8013f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f38:	f383 8811 	msr	BASEPRI, r3
 8013f3c:	f3bf 8f6f 	isb	sy
 8013f40:	f3bf 8f4f 	dsb	sy
 8013f44:	60fb      	str	r3, [r7, #12]
 8013f46:	e7fe      	b.n	8013f46 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f48:	4b07      	ldr	r3, [pc, #28]	; (8013f68 <vTaskPlaceOnEventList+0x44>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3318      	adds	r3, #24
 8013f4e:	4619      	mov	r1, r3
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7fe f8be 	bl	80120d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f56:	2101      	movs	r1, #1
 8013f58:	6838      	ldr	r0, [r7, #0]
 8013f5a:	f000 fd6f 	bl	8014a3c <prvAddCurrentTaskToDelayedList>
}
 8013f5e:	bf00      	nop
 8013f60:	3710      	adds	r7, #16
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	24064958 	.word	0x24064958

08013f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b086      	sub	sp, #24
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d109      	bne.n	8013f96 <xTaskRemoveFromEventList+0x2a>
 8013f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f86:	f383 8811 	msr	BASEPRI, r3
 8013f8a:	f3bf 8f6f 	isb	sy
 8013f8e:	f3bf 8f4f 	dsb	sy
 8013f92:	60fb      	str	r3, [r7, #12]
 8013f94:	e7fe      	b.n	8013f94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	3318      	adds	r3, #24
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fe f8d2 	bl	8012144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fa0:	4b1d      	ldr	r3, [pc, #116]	; (8014018 <xTaskRemoveFromEventList+0xac>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d11c      	bne.n	8013fe2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	3304      	adds	r3, #4
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7fe f8c9 	bl	8012144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	409a      	lsls	r2, r3
 8013fba:	4b18      	ldr	r3, [pc, #96]	; (801401c <xTaskRemoveFromEventList+0xb0>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	4a16      	ldr	r2, [pc, #88]	; (801401c <xTaskRemoveFromEventList+0xb0>)
 8013fc2:	6013      	str	r3, [r2, #0]
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc8:	4613      	mov	r3, r2
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	4413      	add	r3, r2
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4a13      	ldr	r2, [pc, #76]	; (8014020 <xTaskRemoveFromEventList+0xb4>)
 8013fd2:	441a      	add	r2, r3
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	4619      	mov	r1, r3
 8013fda:	4610      	mov	r0, r2
 8013fdc:	f7fe f855 	bl	801208a <vListInsertEnd>
 8013fe0:	e005      	b.n	8013fee <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	3318      	adds	r3, #24
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	480e      	ldr	r0, [pc, #56]	; (8014024 <xTaskRemoveFromEventList+0xb8>)
 8013fea:	f7fe f84e 	bl	801208a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff2:	4b0d      	ldr	r3, [pc, #52]	; (8014028 <xTaskRemoveFromEventList+0xbc>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d905      	bls.n	8014008 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014000:	4b0a      	ldr	r3, [pc, #40]	; (801402c <xTaskRemoveFromEventList+0xc0>)
 8014002:	2201      	movs	r2, #1
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	e001      	b.n	801400c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8014008:	2300      	movs	r3, #0
 801400a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801400c:	697b      	ldr	r3, [r7, #20]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	24064a80 	.word	0x24064a80
 801401c:	24064a60 	.word	0x24064a60
 8014020:	2406495c 	.word	0x2406495c
 8014024:	24064a18 	.word	0x24064a18
 8014028:	24064958 	.word	0x24064958
 801402c:	24064a6c 	.word	0x24064a6c

08014030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014038:	4b06      	ldr	r3, [pc, #24]	; (8014054 <vTaskInternalSetTimeOutState+0x24>)
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014040:	4b05      	ldr	r3, [pc, #20]	; (8014058 <vTaskInternalSetTimeOutState+0x28>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	605a      	str	r2, [r3, #4]
}
 8014048:	bf00      	nop
 801404a:	370c      	adds	r7, #12
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr
 8014054:	24064a70 	.word	0x24064a70
 8014058:	24064a5c 	.word	0x24064a5c

0801405c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b088      	sub	sp, #32
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d109      	bne.n	8014080 <xTaskCheckForTimeOut+0x24>
 801406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014070:	f383 8811 	msr	BASEPRI, r3
 8014074:	f3bf 8f6f 	isb	sy
 8014078:	f3bf 8f4f 	dsb	sy
 801407c:	613b      	str	r3, [r7, #16]
 801407e:	e7fe      	b.n	801407e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d109      	bne.n	801409a <xTaskCheckForTimeOut+0x3e>
 8014086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408a:	f383 8811 	msr	BASEPRI, r3
 801408e:	f3bf 8f6f 	isb	sy
 8014092:	f3bf 8f4f 	dsb	sy
 8014096:	60fb      	str	r3, [r7, #12]
 8014098:	e7fe      	b.n	8014098 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801409a:	f7fe f9a7 	bl	80123ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801409e:	4b1d      	ldr	r3, [pc, #116]	; (8014114 <xTaskCheckForTimeOut+0xb8>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	69ba      	ldr	r2, [r7, #24]
 80140aa:	1ad3      	subs	r3, r2, r3
 80140ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b6:	d102      	bne.n	80140be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140b8:	2300      	movs	r3, #0
 80140ba:	61fb      	str	r3, [r7, #28]
 80140bc:	e023      	b.n	8014106 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	4b15      	ldr	r3, [pc, #84]	; (8014118 <xTaskCheckForTimeOut+0xbc>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d007      	beq.n	80140da <xTaskCheckForTimeOut+0x7e>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	69ba      	ldr	r2, [r7, #24]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d302      	bcc.n	80140da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140d4:	2301      	movs	r3, #1
 80140d6:	61fb      	str	r3, [r7, #28]
 80140d8:	e015      	b.n	8014106 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	697a      	ldr	r2, [r7, #20]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d20b      	bcs.n	80140fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	1ad2      	subs	r2, r2, r3
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7ff ff9d 	bl	8014030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140f6:	2300      	movs	r3, #0
 80140f8:	61fb      	str	r3, [r7, #28]
 80140fa:	e004      	b.n	8014106 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	2200      	movs	r2, #0
 8014100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014102:	2301      	movs	r3, #1
 8014104:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014106:	f7fe f99f 	bl	8012448 <vPortExitCritical>

	return xReturn;
 801410a:	69fb      	ldr	r3, [r7, #28]
}
 801410c:	4618      	mov	r0, r3
 801410e:	3720      	adds	r7, #32
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	24064a5c 	.word	0x24064a5c
 8014118:	24064a70 	.word	0x24064a70

0801411c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801411c:	b480      	push	{r7}
 801411e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014120:	4b03      	ldr	r3, [pc, #12]	; (8014130 <vTaskMissedYield+0x14>)
 8014122:	2201      	movs	r2, #1
 8014124:	601a      	str	r2, [r3, #0]
}
 8014126:	bf00      	nop
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr
 8014130:	24064a6c 	.word	0x24064a6c

08014134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801413c:	f000 f852 	bl	80141e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014140:	4b06      	ldr	r3, [pc, #24]	; (801415c <prvIdleTask+0x28>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b01      	cmp	r3, #1
 8014146:	d9f9      	bls.n	801413c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014148:	4b05      	ldr	r3, [pc, #20]	; (8014160 <prvIdleTask+0x2c>)
 801414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801414e:	601a      	str	r2, [r3, #0]
 8014150:	f3bf 8f4f 	dsb	sy
 8014154:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014158:	e7f0      	b.n	801413c <prvIdleTask+0x8>
 801415a:	bf00      	nop
 801415c:	2406495c 	.word	0x2406495c
 8014160:	e000ed04 	.word	0xe000ed04

08014164 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801416a:	2300      	movs	r3, #0
 801416c:	607b      	str	r3, [r7, #4]
 801416e:	e00c      	b.n	801418a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	4613      	mov	r3, r2
 8014174:	009b      	lsls	r3, r3, #2
 8014176:	4413      	add	r3, r2
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	4a12      	ldr	r2, [pc, #72]	; (80141c4 <prvInitialiseTaskLists+0x60>)
 801417c:	4413      	add	r3, r2
 801417e:	4618      	mov	r0, r3
 8014180:	f7fd ff56 	bl	8012030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	3301      	adds	r3, #1
 8014188:	607b      	str	r3, [r7, #4]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b06      	cmp	r3, #6
 801418e:	d9ef      	bls.n	8014170 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014190:	480d      	ldr	r0, [pc, #52]	; (80141c8 <prvInitialiseTaskLists+0x64>)
 8014192:	f7fd ff4d 	bl	8012030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014196:	480d      	ldr	r0, [pc, #52]	; (80141cc <prvInitialiseTaskLists+0x68>)
 8014198:	f7fd ff4a 	bl	8012030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801419c:	480c      	ldr	r0, [pc, #48]	; (80141d0 <prvInitialiseTaskLists+0x6c>)
 801419e:	f7fd ff47 	bl	8012030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80141a2:	480c      	ldr	r0, [pc, #48]	; (80141d4 <prvInitialiseTaskLists+0x70>)
 80141a4:	f7fd ff44 	bl	8012030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80141a8:	480b      	ldr	r0, [pc, #44]	; (80141d8 <prvInitialiseTaskLists+0x74>)
 80141aa:	f7fd ff41 	bl	8012030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80141ae:	4b0b      	ldr	r3, [pc, #44]	; (80141dc <prvInitialiseTaskLists+0x78>)
 80141b0:	4a05      	ldr	r2, [pc, #20]	; (80141c8 <prvInitialiseTaskLists+0x64>)
 80141b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141b4:	4b0a      	ldr	r3, [pc, #40]	; (80141e0 <prvInitialiseTaskLists+0x7c>)
 80141b6:	4a05      	ldr	r2, [pc, #20]	; (80141cc <prvInitialiseTaskLists+0x68>)
 80141b8:	601a      	str	r2, [r3, #0]
}
 80141ba:	bf00      	nop
 80141bc:	3708      	adds	r7, #8
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	2406495c 	.word	0x2406495c
 80141c8:	240649e8 	.word	0x240649e8
 80141cc:	240649fc 	.word	0x240649fc
 80141d0:	24064a18 	.word	0x24064a18
 80141d4:	24064a2c 	.word	0x24064a2c
 80141d8:	24064a44 	.word	0x24064a44
 80141dc:	24064a10 	.word	0x24064a10
 80141e0:	24064a14 	.word	0x24064a14

080141e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141ea:	e019      	b.n	8014220 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141ec:	f7fe f8fe 	bl	80123ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141f0:	4b0f      	ldr	r3, [pc, #60]	; (8014230 <prvCheckTasksWaitingTermination+0x4c>)
 80141f2:	68db      	ldr	r3, [r3, #12]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	3304      	adds	r3, #4
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7fd ffa1 	bl	8012144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014202:	4b0c      	ldr	r3, [pc, #48]	; (8014234 <prvCheckTasksWaitingTermination+0x50>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	3b01      	subs	r3, #1
 8014208:	4a0a      	ldr	r2, [pc, #40]	; (8014234 <prvCheckTasksWaitingTermination+0x50>)
 801420a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801420c:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <prvCheckTasksWaitingTermination+0x54>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	3b01      	subs	r3, #1
 8014212:	4a09      	ldr	r2, [pc, #36]	; (8014238 <prvCheckTasksWaitingTermination+0x54>)
 8014214:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014216:	f7fe f917 	bl	8012448 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 f80e 	bl	801423c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014220:	4b05      	ldr	r3, [pc, #20]	; (8014238 <prvCheckTasksWaitingTermination+0x54>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d1e1      	bne.n	80141ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014228:	bf00      	nop
 801422a:	3708      	adds	r7, #8
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	24064a2c 	.word	0x24064a2c
 8014234:	24064a58 	.word	0x24064a58
 8014238:	24064a40 	.word	0x24064a40

0801423c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801424a:	2b00      	cmp	r3, #0
 801424c:	d108      	bne.n	8014260 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014252:	4618      	mov	r0, r3
 8014254:	f7fd fdd8 	bl	8011e08 <vPortFree>
				vPortFree( pxTCB );
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f7fd fdd5 	bl	8011e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801425e:	e017      	b.n	8014290 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014266:	2b01      	cmp	r3, #1
 8014268:	d103      	bne.n	8014272 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f7fd fdcc 	bl	8011e08 <vPortFree>
	}
 8014270:	e00e      	b.n	8014290 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014278:	2b02      	cmp	r3, #2
 801427a:	d009      	beq.n	8014290 <prvDeleteTCB+0x54>
 801427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014280:	f383 8811 	msr	BASEPRI, r3
 8014284:	f3bf 8f6f 	isb	sy
 8014288:	f3bf 8f4f 	dsb	sy
 801428c:	60fb      	str	r3, [r7, #12]
 801428e:	e7fe      	b.n	801428e <prvDeleteTCB+0x52>
	}
 8014290:	bf00      	nop
 8014292:	3710      	adds	r7, #16
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801429e:	4b0c      	ldr	r3, [pc, #48]	; (80142d0 <prvResetNextTaskUnblockTime+0x38>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d104      	bne.n	80142b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80142a8:	4b0a      	ldr	r3, [pc, #40]	; (80142d4 <prvResetNextTaskUnblockTime+0x3c>)
 80142aa:	f04f 32ff 	mov.w	r2, #4294967295
 80142ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80142b0:	e008      	b.n	80142c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142b2:	4b07      	ldr	r3, [pc, #28]	; (80142d0 <prvResetNextTaskUnblockTime+0x38>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	4a04      	ldr	r2, [pc, #16]	; (80142d4 <prvResetNextTaskUnblockTime+0x3c>)
 80142c2:	6013      	str	r3, [r2, #0]
}
 80142c4:	bf00      	nop
 80142c6:	370c      	adds	r7, #12
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr
 80142d0:	24064a10 	.word	0x24064a10
 80142d4:	24064a78 	.word	0x24064a78

080142d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80142de:	4b0b      	ldr	r3, [pc, #44]	; (801430c <xTaskGetSchedulerState+0x34>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d102      	bne.n	80142ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142e6:	2301      	movs	r3, #1
 80142e8:	607b      	str	r3, [r7, #4]
 80142ea:	e008      	b.n	80142fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142ec:	4b08      	ldr	r3, [pc, #32]	; (8014310 <xTaskGetSchedulerState+0x38>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d102      	bne.n	80142fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142f4:	2302      	movs	r3, #2
 80142f6:	607b      	str	r3, [r7, #4]
 80142f8:	e001      	b.n	80142fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142fa:	2300      	movs	r3, #0
 80142fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142fe:	687b      	ldr	r3, [r7, #4]
	}
 8014300:	4618      	mov	r0, r3
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430a:	4770      	bx	lr
 801430c:	24064a64 	.word	0x24064a64
 8014310:	24064a80 	.word	0x24064a80

08014314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014320:	2300      	movs	r3, #0
 8014322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d069      	beq.n	80143fe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801432e:	4b36      	ldr	r3, [pc, #216]	; (8014408 <xTaskPriorityInherit+0xf4>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014334:	429a      	cmp	r2, r3
 8014336:	d259      	bcs.n	80143ec <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	699b      	ldr	r3, [r3, #24]
 801433c:	2b00      	cmp	r3, #0
 801433e:	db06      	blt.n	801434e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014340:	4b31      	ldr	r3, [pc, #196]	; (8014408 <xTaskPriorityInherit+0xf4>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014346:	f1c3 0207 	rsb	r2, r3, #7
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	6959      	ldr	r1, [r3, #20]
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014356:	4613      	mov	r3, r2
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	4413      	add	r3, r2
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	4a2b      	ldr	r2, [pc, #172]	; (801440c <xTaskPriorityInherit+0xf8>)
 8014360:	4413      	add	r3, r2
 8014362:	4299      	cmp	r1, r3
 8014364:	d13a      	bne.n	80143dc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	3304      	adds	r3, #4
 801436a:	4618      	mov	r0, r3
 801436c:	f7fd feea 	bl	8012144 <uxListRemove>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d115      	bne.n	80143a2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437a:	4924      	ldr	r1, [pc, #144]	; (801440c <xTaskPriorityInherit+0xf8>)
 801437c:	4613      	mov	r3, r2
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	4413      	add	r3, r2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	440b      	add	r3, r1
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d10a      	bne.n	80143a2 <xTaskPriorityInherit+0x8e>
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014390:	2201      	movs	r2, #1
 8014392:	fa02 f303 	lsl.w	r3, r2, r3
 8014396:	43da      	mvns	r2, r3
 8014398:	4b1d      	ldr	r3, [pc, #116]	; (8014410 <xTaskPriorityInherit+0xfc>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	4013      	ands	r3, r2
 801439e:	4a1c      	ldr	r2, [pc, #112]	; (8014410 <xTaskPriorityInherit+0xfc>)
 80143a0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80143a2:	4b19      	ldr	r3, [pc, #100]	; (8014408 <xTaskPriorityInherit+0xf4>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b0:	2201      	movs	r2, #1
 80143b2:	409a      	lsls	r2, r3
 80143b4:	4b16      	ldr	r3, [pc, #88]	; (8014410 <xTaskPriorityInherit+0xfc>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	4313      	orrs	r3, r2
 80143ba:	4a15      	ldr	r2, [pc, #84]	; (8014410 <xTaskPriorityInherit+0xfc>)
 80143bc:	6013      	str	r3, [r2, #0]
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c2:	4613      	mov	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4413      	add	r3, r2
 80143c8:	009b      	lsls	r3, r3, #2
 80143ca:	4a10      	ldr	r2, [pc, #64]	; (801440c <xTaskPriorityInherit+0xf8>)
 80143cc:	441a      	add	r2, r3
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	3304      	adds	r3, #4
 80143d2:	4619      	mov	r1, r3
 80143d4:	4610      	mov	r0, r2
 80143d6:	f7fd fe58 	bl	801208a <vListInsertEnd>
 80143da:	e004      	b.n	80143e6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80143dc:	4b0a      	ldr	r3, [pc, #40]	; (8014408 <xTaskPriorityInherit+0xf4>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80143e6:	2301      	movs	r3, #1
 80143e8:	60fb      	str	r3, [r7, #12]
 80143ea:	e008      	b.n	80143fe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143f0:	4b05      	ldr	r3, [pc, #20]	; (8014408 <xTaskPriorityInherit+0xf4>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d201      	bcs.n	80143fe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80143fa:	2301      	movs	r3, #1
 80143fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80143fe:	68fb      	ldr	r3, [r7, #12]
	}
 8014400:	4618      	mov	r0, r3
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	24064958 	.word	0x24064958
 801440c:	2406495c 	.word	0x2406495c
 8014410:	24064a60 	.word	0x24064a60

08014414 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014414:	b580      	push	{r7, lr}
 8014416:	b086      	sub	sp, #24
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014420:	2300      	movs	r3, #0
 8014422:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d06c      	beq.n	8014504 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801442a:	4b39      	ldr	r3, [pc, #228]	; (8014510 <xTaskPriorityDisinherit+0xfc>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	693a      	ldr	r2, [r7, #16]
 8014430:	429a      	cmp	r2, r3
 8014432:	d009      	beq.n	8014448 <xTaskPriorityDisinherit+0x34>
 8014434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014438:	f383 8811 	msr	BASEPRI, r3
 801443c:	f3bf 8f6f 	isb	sy
 8014440:	f3bf 8f4f 	dsb	sy
 8014444:	60fb      	str	r3, [r7, #12]
 8014446:	e7fe      	b.n	8014446 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801444c:	2b00      	cmp	r3, #0
 801444e:	d109      	bne.n	8014464 <xTaskPriorityDisinherit+0x50>
 8014450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014454:	f383 8811 	msr	BASEPRI, r3
 8014458:	f3bf 8f6f 	isb	sy
 801445c:	f3bf 8f4f 	dsb	sy
 8014460:	60bb      	str	r3, [r7, #8]
 8014462:	e7fe      	b.n	8014462 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014468:	1e5a      	subs	r2, r3, #1
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014476:	429a      	cmp	r2, r3
 8014478:	d044      	beq.n	8014504 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801447e:	2b00      	cmp	r3, #0
 8014480:	d140      	bne.n	8014504 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	3304      	adds	r3, #4
 8014486:	4618      	mov	r0, r3
 8014488:	f7fd fe5c 	bl	8012144 <uxListRemove>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	d115      	bne.n	80144be <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014496:	491f      	ldr	r1, [pc, #124]	; (8014514 <xTaskPriorityDisinherit+0x100>)
 8014498:	4613      	mov	r3, r2
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	4413      	add	r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	440b      	add	r3, r1
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d10a      	bne.n	80144be <xTaskPriorityDisinherit+0xaa>
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ac:	2201      	movs	r2, #1
 80144ae:	fa02 f303 	lsl.w	r3, r2, r3
 80144b2:	43da      	mvns	r2, r3
 80144b4:	4b18      	ldr	r3, [pc, #96]	; (8014518 <xTaskPriorityDisinherit+0x104>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	4013      	ands	r3, r2
 80144ba:	4a17      	ldr	r2, [pc, #92]	; (8014518 <xTaskPriorityDisinherit+0x104>)
 80144bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ca:	f1c3 0207 	rsb	r2, r3, #7
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d6:	2201      	movs	r2, #1
 80144d8:	409a      	lsls	r2, r3
 80144da:	4b0f      	ldr	r3, [pc, #60]	; (8014518 <xTaskPriorityDisinherit+0x104>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4313      	orrs	r3, r2
 80144e0:	4a0d      	ldr	r2, [pc, #52]	; (8014518 <xTaskPriorityDisinherit+0x104>)
 80144e2:	6013      	str	r3, [r2, #0]
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	4a08      	ldr	r2, [pc, #32]	; (8014514 <xTaskPriorityDisinherit+0x100>)
 80144f2:	441a      	add	r2, r3
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	3304      	adds	r3, #4
 80144f8:	4619      	mov	r1, r3
 80144fa:	4610      	mov	r0, r2
 80144fc:	f7fd fdc5 	bl	801208a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014500:	2301      	movs	r3, #1
 8014502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014504:	697b      	ldr	r3, [r7, #20]
	}
 8014506:	4618      	mov	r0, r3
 8014508:	3718      	adds	r7, #24
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	24064958 	.word	0x24064958
 8014514:	2406495c 	.word	0x2406495c
 8014518:	24064a60 	.word	0x24064a60

0801451c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801451c:	b580      	push	{r7, lr}
 801451e:	b088      	sub	sp, #32
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801452a:	2301      	movs	r3, #1
 801452c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 8081 	beq.w	8014638 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014536:	69bb      	ldr	r3, [r7, #24]
 8014538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801453a:	2b00      	cmp	r3, #0
 801453c:	d109      	bne.n	8014552 <vTaskPriorityDisinheritAfterTimeout+0x36>
 801453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014542:	f383 8811 	msr	BASEPRI, r3
 8014546:	f3bf 8f6f 	isb	sy
 801454a:	f3bf 8f4f 	dsb	sy
 801454e:	60fb      	str	r3, [r7, #12]
 8014550:	e7fe      	b.n	8014550 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014556:	683a      	ldr	r2, [r7, #0]
 8014558:	429a      	cmp	r2, r3
 801455a:	d902      	bls.n	8014562 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	61fb      	str	r3, [r7, #28]
 8014560:	e002      	b.n	8014568 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014562:	69bb      	ldr	r3, [r7, #24]
 8014564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014566:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456c:	69fa      	ldr	r2, [r7, #28]
 801456e:	429a      	cmp	r2, r3
 8014570:	d062      	beq.n	8014638 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014576:	697a      	ldr	r2, [r7, #20]
 8014578:	429a      	cmp	r2, r3
 801457a:	d15d      	bne.n	8014638 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801457c:	4b30      	ldr	r3, [pc, #192]	; (8014640 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	69ba      	ldr	r2, [r7, #24]
 8014582:	429a      	cmp	r2, r3
 8014584:	d109      	bne.n	801459a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8014586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801458a:	f383 8811 	msr	BASEPRI, r3
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f3bf 8f4f 	dsb	sy
 8014596:	60bb      	str	r3, [r7, #8]
 8014598:	e7fe      	b.n	8014598 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	69fa      	ldr	r2, [r7, #28]
 80145a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	699b      	ldr	r3, [r3, #24]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	db04      	blt.n	80145b8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145ae:	69fb      	ldr	r3, [r7, #28]
 80145b0:	f1c3 0207 	rsb	r2, r3, #7
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	6959      	ldr	r1, [r3, #20]
 80145bc:	693a      	ldr	r2, [r7, #16]
 80145be:	4613      	mov	r3, r2
 80145c0:	009b      	lsls	r3, r3, #2
 80145c2:	4413      	add	r3, r2
 80145c4:	009b      	lsls	r3, r3, #2
 80145c6:	4a1f      	ldr	r2, [pc, #124]	; (8014644 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80145c8:	4413      	add	r3, r2
 80145ca:	4299      	cmp	r1, r3
 80145cc:	d134      	bne.n	8014638 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145ce:	69bb      	ldr	r3, [r7, #24]
 80145d0:	3304      	adds	r3, #4
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7fd fdb6 	bl	8012144 <uxListRemove>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d115      	bne.n	801460a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80145de:	69bb      	ldr	r3, [r7, #24]
 80145e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145e2:	4918      	ldr	r1, [pc, #96]	; (8014644 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80145e4:	4613      	mov	r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	4413      	add	r3, r2
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	440b      	add	r3, r1
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d10a      	bne.n	801460a <vTaskPriorityDisinheritAfterTimeout+0xee>
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145f8:	2201      	movs	r2, #1
 80145fa:	fa02 f303 	lsl.w	r3, r2, r3
 80145fe:	43da      	mvns	r2, r3
 8014600:	4b11      	ldr	r3, [pc, #68]	; (8014648 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	4013      	ands	r3, r2
 8014606:	4a10      	ldr	r2, [pc, #64]	; (8014648 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8014608:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801460a:	69bb      	ldr	r3, [r7, #24]
 801460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801460e:	2201      	movs	r2, #1
 8014610:	409a      	lsls	r2, r3
 8014612:	4b0d      	ldr	r3, [pc, #52]	; (8014648 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	4313      	orrs	r3, r2
 8014618:	4a0b      	ldr	r2, [pc, #44]	; (8014648 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801461a:	6013      	str	r3, [r2, #0]
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014620:	4613      	mov	r3, r2
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	4413      	add	r3, r2
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	4a06      	ldr	r2, [pc, #24]	; (8014644 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801462a:	441a      	add	r2, r3
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	3304      	adds	r3, #4
 8014630:	4619      	mov	r1, r3
 8014632:	4610      	mov	r0, r2
 8014634:	f7fd fd29 	bl	801208a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014638:	bf00      	nop
 801463a:	3720      	adds	r7, #32
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	24064958 	.word	0x24064958
 8014644:	2406495c 	.word	0x2406495c
 8014648:	24064a60 	.word	0x24064a60

0801464c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801464c:	b480      	push	{r7}
 801464e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014650:	4b07      	ldr	r3, [pc, #28]	; (8014670 <pvTaskIncrementMutexHeldCount+0x24>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d004      	beq.n	8014662 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014658:	4b05      	ldr	r3, [pc, #20]	; (8014670 <pvTaskIncrementMutexHeldCount+0x24>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801465e:	3201      	adds	r2, #1
 8014660:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014662:	4b03      	ldr	r3, [pc, #12]	; (8014670 <pvTaskIncrementMutexHeldCount+0x24>)
 8014664:	681b      	ldr	r3, [r3, #0]
	}
 8014666:	4618      	mov	r0, r3
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr
 8014670:	24064958 	.word	0x24064958

08014674 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014674:	b580      	push	{r7, lr}
 8014676:	b086      	sub	sp, #24
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	607a      	str	r2, [r7, #4]
 8014680:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014682:	f7fd feb3 	bl	80123ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014686:	4b26      	ldr	r3, [pc, #152]	; (8014720 <xTaskNotifyWait+0xac>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801468e:	b2db      	uxtb	r3, r3
 8014690:	2b02      	cmp	r3, #2
 8014692:	d01a      	beq.n	80146ca <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014694:	4b22      	ldr	r3, [pc, #136]	; (8014720 <xTaskNotifyWait+0xac>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	43d2      	mvns	r2, r2
 801469e:	400a      	ands	r2, r1
 80146a0:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80146a2:	4b1f      	ldr	r3, [pc, #124]	; (8014720 <xTaskNotifyWait+0xac>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	2201      	movs	r2, #1
 80146a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d00b      	beq.n	80146ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80146b2:	2101      	movs	r1, #1
 80146b4:	6838      	ldr	r0, [r7, #0]
 80146b6:	f000 f9c1 	bl	8014a3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80146ba:	4b1a      	ldr	r3, [pc, #104]	; (8014724 <xTaskNotifyWait+0xb0>)
 80146bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146c0:	601a      	str	r2, [r3, #0]
 80146c2:	f3bf 8f4f 	dsb	sy
 80146c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80146ca:	f7fd febd 	bl	8012448 <vPortExitCritical>

		taskENTER_CRITICAL();
 80146ce:	f7fd fe8d 	bl	80123ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d004      	beq.n	80146e2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80146d8:	4b11      	ldr	r3, [pc, #68]	; (8014720 <xTaskNotifyWait+0xac>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80146e2:	4b0f      	ldr	r3, [pc, #60]	; (8014720 <xTaskNotifyWait+0xac>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d002      	beq.n	80146f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80146f0:	2300      	movs	r3, #0
 80146f2:	617b      	str	r3, [r7, #20]
 80146f4:	e008      	b.n	8014708 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80146f6:	4b0a      	ldr	r3, [pc, #40]	; (8014720 <xTaskNotifyWait+0xac>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	43d2      	mvns	r2, r2
 8014700:	400a      	ands	r2, r1
 8014702:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014704:	2301      	movs	r3, #1
 8014706:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014708:	4b05      	ldr	r3, [pc, #20]	; (8014720 <xTaskNotifyWait+0xac>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	2200      	movs	r2, #0
 801470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8014712:	f7fd fe99 	bl	8012448 <vPortExitCritical>

		return xReturn;
 8014716:	697b      	ldr	r3, [r7, #20]
	}
 8014718:	4618      	mov	r0, r3
 801471a:	3718      	adds	r7, #24
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	24064958 	.word	0x24064958
 8014724:	e000ed04 	.word	0xe000ed04

08014728 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014728:	b580      	push	{r7, lr}
 801472a:	b08a      	sub	sp, #40	; 0x28
 801472c:	af00      	add	r7, sp, #0
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	603b      	str	r3, [r7, #0]
 8014734:	4613      	mov	r3, r2
 8014736:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014738:	2301      	movs	r3, #1
 801473a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d109      	bne.n	8014756 <xTaskGenericNotify+0x2e>
 8014742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014746:	f383 8811 	msr	BASEPRI, r3
 801474a:	f3bf 8f6f 	isb	sy
 801474e:	f3bf 8f4f 	dsb	sy
 8014752:	61bb      	str	r3, [r7, #24]
 8014754:	e7fe      	b.n	8014754 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801475a:	f7fd fe47 	bl	80123ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d003      	beq.n	801476c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014764:	6a3b      	ldr	r3, [r7, #32]
 8014766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801476c:	6a3b      	ldr	r3, [r7, #32]
 801476e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014772:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014774:	6a3b      	ldr	r3, [r7, #32]
 8014776:	2202      	movs	r2, #2
 8014778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801477c:	79fb      	ldrb	r3, [r7, #7]
 801477e:	2b04      	cmp	r3, #4
 8014780:	d827      	bhi.n	80147d2 <xTaskGenericNotify+0xaa>
 8014782:	a201      	add	r2, pc, #4	; (adr r2, 8014788 <xTaskGenericNotify+0x60>)
 8014784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014788:	080147f1 	.word	0x080147f1
 801478c:	0801479d 	.word	0x0801479d
 8014790:	080147ab 	.word	0x080147ab
 8014794:	080147b7 	.word	0x080147b7
 8014798:	080147bf 	.word	0x080147bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801479c:	6a3b      	ldr	r3, [r7, #32]
 801479e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	431a      	orrs	r2, r3
 80147a4:	6a3b      	ldr	r3, [r7, #32]
 80147a6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147a8:	e025      	b.n	80147f6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147ae:	1c5a      	adds	r2, r3, #1
 80147b0:	6a3b      	ldr	r3, [r7, #32]
 80147b2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147b4:	e01f      	b.n	80147f6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80147b6:	6a3b      	ldr	r3, [r7, #32]
 80147b8:	68ba      	ldr	r2, [r7, #8]
 80147ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80147bc:	e01b      	b.n	80147f6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80147be:	7ffb      	ldrb	r3, [r7, #31]
 80147c0:	2b02      	cmp	r3, #2
 80147c2:	d003      	beq.n	80147cc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80147c4:	6a3b      	ldr	r3, [r7, #32]
 80147c6:	68ba      	ldr	r2, [r7, #8]
 80147c8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80147ca:	e014      	b.n	80147f6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80147cc:	2300      	movs	r3, #0
 80147ce:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80147d0:	e011      	b.n	80147f6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80147d2:	6a3b      	ldr	r3, [r7, #32]
 80147d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147da:	d00b      	beq.n	80147f4 <xTaskGenericNotify+0xcc>
 80147dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e0:	f383 8811 	msr	BASEPRI, r3
 80147e4:	f3bf 8f6f 	isb	sy
 80147e8:	f3bf 8f4f 	dsb	sy
 80147ec:	617b      	str	r3, [r7, #20]
 80147ee:	e7fe      	b.n	80147ee <xTaskGenericNotify+0xc6>
					break;
 80147f0:	bf00      	nop
 80147f2:	e000      	b.n	80147f6 <xTaskGenericNotify+0xce>

					break;
 80147f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80147f6:	7ffb      	ldrb	r3, [r7, #31]
 80147f8:	2b01      	cmp	r3, #1
 80147fa:	d138      	bne.n	801486e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147fc:	6a3b      	ldr	r3, [r7, #32]
 80147fe:	3304      	adds	r3, #4
 8014800:	4618      	mov	r0, r3
 8014802:	f7fd fc9f 	bl	8012144 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014806:	6a3b      	ldr	r3, [r7, #32]
 8014808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801480a:	2201      	movs	r2, #1
 801480c:	409a      	lsls	r2, r3
 801480e:	4b1b      	ldr	r3, [pc, #108]	; (801487c <xTaskGenericNotify+0x154>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	4313      	orrs	r3, r2
 8014814:	4a19      	ldr	r2, [pc, #100]	; (801487c <xTaskGenericNotify+0x154>)
 8014816:	6013      	str	r3, [r2, #0]
 8014818:	6a3b      	ldr	r3, [r7, #32]
 801481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801481c:	4613      	mov	r3, r2
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	4413      	add	r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	4a16      	ldr	r2, [pc, #88]	; (8014880 <xTaskGenericNotify+0x158>)
 8014826:	441a      	add	r2, r3
 8014828:	6a3b      	ldr	r3, [r7, #32]
 801482a:	3304      	adds	r3, #4
 801482c:	4619      	mov	r1, r3
 801482e:	4610      	mov	r0, r2
 8014830:	f7fd fc2b 	bl	801208a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014834:	6a3b      	ldr	r3, [r7, #32]
 8014836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014838:	2b00      	cmp	r3, #0
 801483a:	d009      	beq.n	8014850 <xTaskGenericNotify+0x128>
 801483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014840:	f383 8811 	msr	BASEPRI, r3
 8014844:	f3bf 8f6f 	isb	sy
 8014848:	f3bf 8f4f 	dsb	sy
 801484c:	613b      	str	r3, [r7, #16]
 801484e:	e7fe      	b.n	801484e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014850:	6a3b      	ldr	r3, [r7, #32]
 8014852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014854:	4b0b      	ldr	r3, [pc, #44]	; (8014884 <xTaskGenericNotify+0x15c>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485a:	429a      	cmp	r2, r3
 801485c:	d907      	bls.n	801486e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801485e:	4b0a      	ldr	r3, [pc, #40]	; (8014888 <xTaskGenericNotify+0x160>)
 8014860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014864:	601a      	str	r2, [r3, #0]
 8014866:	f3bf 8f4f 	dsb	sy
 801486a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801486e:	f7fd fdeb 	bl	8012448 <vPortExitCritical>

		return xReturn;
 8014872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014874:	4618      	mov	r0, r3
 8014876:	3728      	adds	r7, #40	; 0x28
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	24064a60 	.word	0x24064a60
 8014880:	2406495c 	.word	0x2406495c
 8014884:	24064958 	.word	0x24064958
 8014888:	e000ed04 	.word	0xe000ed04

0801488c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801488c:	b580      	push	{r7, lr}
 801488e:	b08e      	sub	sp, #56	; 0x38
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	603b      	str	r3, [r7, #0]
 8014898:	4613      	mov	r3, r2
 801489a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801489c:	2301      	movs	r3, #1
 801489e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d109      	bne.n	80148ba <xTaskGenericNotifyFromISR+0x2e>
 80148a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148aa:	f383 8811 	msr	BASEPRI, r3
 80148ae:	f3bf 8f6f 	isb	sy
 80148b2:	f3bf 8f4f 	dsb	sy
 80148b6:	627b      	str	r3, [r7, #36]	; 0x24
 80148b8:	e7fe      	b.n	80148b8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80148ba:	f7fd fe73 	bl	80125a4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80148c2:	f3ef 8211 	mrs	r2, BASEPRI
 80148c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ca:	f383 8811 	msr	BASEPRI, r3
 80148ce:	f3bf 8f6f 	isb	sy
 80148d2:	f3bf 8f4f 	dsb	sy
 80148d6:	623a      	str	r2, [r7, #32]
 80148d8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80148da:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80148dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d003      	beq.n	80148ec <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80148e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80148ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80148f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80148f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f8:	2202      	movs	r2, #2
 80148fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80148fe:	79fb      	ldrb	r3, [r7, #7]
 8014900:	2b04      	cmp	r3, #4
 8014902:	d829      	bhi.n	8014958 <xTaskGenericNotifyFromISR+0xcc>
 8014904:	a201      	add	r2, pc, #4	; (adr r2, 801490c <xTaskGenericNotifyFromISR+0x80>)
 8014906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801490a:	bf00      	nop
 801490c:	08014977 	.word	0x08014977
 8014910:	08014921 	.word	0x08014921
 8014914:	0801492f 	.word	0x0801492f
 8014918:	0801493b 	.word	0x0801493b
 801491c:	08014943 	.word	0x08014943
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	431a      	orrs	r2, r3
 8014928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801492c:	e026      	b.n	801497c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014932:	1c5a      	adds	r2, r3, #1
 8014934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014936:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014938:	e020      	b.n	801497c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493c:	68ba      	ldr	r2, [r7, #8]
 801493e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014940:	e01c      	b.n	801497c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014946:	2b02      	cmp	r3, #2
 8014948:	d003      	beq.n	8014952 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494c:	68ba      	ldr	r2, [r7, #8]
 801494e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014950:	e014      	b.n	801497c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8014952:	2300      	movs	r3, #0
 8014954:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014956:	e011      	b.n	801497c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014960:	d00b      	beq.n	801497a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8014962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014966:	f383 8811 	msr	BASEPRI, r3
 801496a:	f3bf 8f6f 	isb	sy
 801496e:	f3bf 8f4f 	dsb	sy
 8014972:	61bb      	str	r3, [r7, #24]
 8014974:	e7fe      	b.n	8014974 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8014976:	bf00      	nop
 8014978:	e000      	b.n	801497c <xTaskGenericNotifyFromISR+0xf0>
					break;
 801497a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801497c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014980:	2b01      	cmp	r3, #1
 8014982:	d144      	bne.n	8014a0e <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014988:	2b00      	cmp	r3, #0
 801498a:	d009      	beq.n	80149a0 <xTaskGenericNotifyFromISR+0x114>
 801498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014990:	f383 8811 	msr	BASEPRI, r3
 8014994:	f3bf 8f6f 	isb	sy
 8014998:	f3bf 8f4f 	dsb	sy
 801499c:	617b      	str	r3, [r7, #20]
 801499e:	e7fe      	b.n	801499e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149a0:	4b20      	ldr	r3, [pc, #128]	; (8014a24 <xTaskGenericNotifyFromISR+0x198>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d11c      	bne.n	80149e2 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149aa:	3304      	adds	r3, #4
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7fd fbc9 	bl	8012144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80149b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b6:	2201      	movs	r2, #1
 80149b8:	409a      	lsls	r2, r3
 80149ba:	4b1b      	ldr	r3, [pc, #108]	; (8014a28 <xTaskGenericNotifyFromISR+0x19c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4313      	orrs	r3, r2
 80149c0:	4a19      	ldr	r2, [pc, #100]	; (8014a28 <xTaskGenericNotifyFromISR+0x19c>)
 80149c2:	6013      	str	r3, [r2, #0]
 80149c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149c8:	4613      	mov	r3, r2
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	4413      	add	r3, r2
 80149ce:	009b      	lsls	r3, r3, #2
 80149d0:	4a16      	ldr	r2, [pc, #88]	; (8014a2c <xTaskGenericNotifyFromISR+0x1a0>)
 80149d2:	441a      	add	r2, r3
 80149d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d6:	3304      	adds	r3, #4
 80149d8:	4619      	mov	r1, r3
 80149da:	4610      	mov	r0, r2
 80149dc:	f7fd fb55 	bl	801208a <vListInsertEnd>
 80149e0:	e005      	b.n	80149ee <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80149e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e4:	3318      	adds	r3, #24
 80149e6:	4619      	mov	r1, r3
 80149e8:	4811      	ldr	r0, [pc, #68]	; (8014a30 <xTaskGenericNotifyFromISR+0x1a4>)
 80149ea:	f7fd fb4e 	bl	801208a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149f2:	4b10      	ldr	r3, [pc, #64]	; (8014a34 <xTaskGenericNotifyFromISR+0x1a8>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d908      	bls.n	8014a0e <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80149fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d002      	beq.n	8014a08 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a04:	2201      	movs	r2, #1
 8014a06:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014a08:	4b0b      	ldr	r3, [pc, #44]	; (8014a38 <xTaskGenericNotifyFromISR+0x1ac>)
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	601a      	str	r2, [r3, #0]
 8014a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3738      	adds	r7, #56	; 0x38
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop
 8014a24:	24064a80 	.word	0x24064a80
 8014a28:	24064a60 	.word	0x24064a60
 8014a2c:	2406495c 	.word	0x2406495c
 8014a30:	24064a18 	.word	0x24064a18
 8014a34:	24064958 	.word	0x24064958
 8014a38:	24064a6c 	.word	0x24064a6c

08014a3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014a46:	4b29      	ldr	r3, [pc, #164]	; (8014aec <prvAddCurrentTaskToDelayedList+0xb0>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a4c:	4b28      	ldr	r3, [pc, #160]	; (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	3304      	adds	r3, #4
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fd fb76 	bl	8012144 <uxListRemove>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d10b      	bne.n	8014a76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014a5e:	4b24      	ldr	r3, [pc, #144]	; (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a64:	2201      	movs	r2, #1
 8014a66:	fa02 f303 	lsl.w	r3, r2, r3
 8014a6a:	43da      	mvns	r2, r3
 8014a6c:	4b21      	ldr	r3, [pc, #132]	; (8014af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	4013      	ands	r3, r2
 8014a72:	4a20      	ldr	r2, [pc, #128]	; (8014af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a7c:	d10a      	bne.n	8014a94 <prvAddCurrentTaskToDelayedList+0x58>
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d007      	beq.n	8014a94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a84:	4b1a      	ldr	r3, [pc, #104]	; (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	481a      	ldr	r0, [pc, #104]	; (8014af8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014a8e:	f7fd fafc 	bl	801208a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a92:	e026      	b.n	8014ae2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	4413      	add	r3, r2
 8014a9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a9c:	4b14      	ldr	r3, [pc, #80]	; (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d209      	bcs.n	8014ac0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014aac:	4b13      	ldr	r3, [pc, #76]	; (8014afc <prvAddCurrentTaskToDelayedList+0xc0>)
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	4b0f      	ldr	r3, [pc, #60]	; (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	3304      	adds	r3, #4
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	4610      	mov	r0, r2
 8014aba:	f7fd fb0a 	bl	80120d2 <vListInsert>
}
 8014abe:	e010      	b.n	8014ae2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ac0:	4b0f      	ldr	r3, [pc, #60]	; (8014b00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	4b0a      	ldr	r3, [pc, #40]	; (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	3304      	adds	r3, #4
 8014aca:	4619      	mov	r1, r3
 8014acc:	4610      	mov	r0, r2
 8014ace:	f7fd fb00 	bl	80120d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014ad2:	4b0c      	ldr	r3, [pc, #48]	; (8014b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	68ba      	ldr	r2, [r7, #8]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d202      	bcs.n	8014ae2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014adc:	4a09      	ldr	r2, [pc, #36]	; (8014b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	6013      	str	r3, [r2, #0]
}
 8014ae2:	bf00      	nop
 8014ae4:	3710      	adds	r7, #16
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	24064a5c 	.word	0x24064a5c
 8014af0:	24064958 	.word	0x24064958
 8014af4:	24064a60 	.word	0x24064a60
 8014af8:	24064a44 	.word	0x24064a44
 8014afc:	24064a14 	.word	0x24064a14
 8014b00:	24064a10 	.word	0x24064a10
 8014b04:	24064a78 	.word	0x24064a78

08014b08 <__errno>:
 8014b08:	4b01      	ldr	r3, [pc, #4]	; (8014b10 <__errno+0x8>)
 8014b0a:	6818      	ldr	r0, [r3, #0]
 8014b0c:	4770      	bx	lr
 8014b0e:	bf00      	nop
 8014b10:	24000014 	.word	0x24000014

08014b14 <__libc_init_array>:
 8014b14:	b570      	push	{r4, r5, r6, lr}
 8014b16:	4e0d      	ldr	r6, [pc, #52]	; (8014b4c <__libc_init_array+0x38>)
 8014b18:	4c0d      	ldr	r4, [pc, #52]	; (8014b50 <__libc_init_array+0x3c>)
 8014b1a:	1ba4      	subs	r4, r4, r6
 8014b1c:	10a4      	asrs	r4, r4, #2
 8014b1e:	2500      	movs	r5, #0
 8014b20:	42a5      	cmp	r5, r4
 8014b22:	d109      	bne.n	8014b38 <__libc_init_array+0x24>
 8014b24:	4e0b      	ldr	r6, [pc, #44]	; (8014b54 <__libc_init_array+0x40>)
 8014b26:	4c0c      	ldr	r4, [pc, #48]	; (8014b58 <__libc_init_array+0x44>)
 8014b28:	f000 fc3c 	bl	80153a4 <_init>
 8014b2c:	1ba4      	subs	r4, r4, r6
 8014b2e:	10a4      	asrs	r4, r4, #2
 8014b30:	2500      	movs	r5, #0
 8014b32:	42a5      	cmp	r5, r4
 8014b34:	d105      	bne.n	8014b42 <__libc_init_array+0x2e>
 8014b36:	bd70      	pop	{r4, r5, r6, pc}
 8014b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b3c:	4798      	blx	r3
 8014b3e:	3501      	adds	r5, #1
 8014b40:	e7ee      	b.n	8014b20 <__libc_init_array+0xc>
 8014b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b46:	4798      	blx	r3
 8014b48:	3501      	adds	r5, #1
 8014b4a:	e7f2      	b.n	8014b32 <__libc_init_array+0x1e>
 8014b4c:	08015580 	.word	0x08015580
 8014b50:	08015580 	.word	0x08015580
 8014b54:	08015580 	.word	0x08015580
 8014b58:	08015584 	.word	0x08015584

08014b5c <memcpy>:
 8014b5c:	b510      	push	{r4, lr}
 8014b5e:	1e43      	subs	r3, r0, #1
 8014b60:	440a      	add	r2, r1
 8014b62:	4291      	cmp	r1, r2
 8014b64:	d100      	bne.n	8014b68 <memcpy+0xc>
 8014b66:	bd10      	pop	{r4, pc}
 8014b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b70:	e7f7      	b.n	8014b62 <memcpy+0x6>

08014b72 <memset>:
 8014b72:	4402      	add	r2, r0
 8014b74:	4603      	mov	r3, r0
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d100      	bne.n	8014b7c <memset+0xa>
 8014b7a:	4770      	bx	lr
 8014b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8014b80:	e7f9      	b.n	8014b76 <memset+0x4>
	...

08014b84 <sniprintf>:
 8014b84:	b40c      	push	{r2, r3}
 8014b86:	b530      	push	{r4, r5, lr}
 8014b88:	4b17      	ldr	r3, [pc, #92]	; (8014be8 <sniprintf+0x64>)
 8014b8a:	1e0c      	subs	r4, r1, #0
 8014b8c:	b09d      	sub	sp, #116	; 0x74
 8014b8e:	681d      	ldr	r5, [r3, #0]
 8014b90:	da08      	bge.n	8014ba4 <sniprintf+0x20>
 8014b92:	238b      	movs	r3, #139	; 0x8b
 8014b94:	602b      	str	r3, [r5, #0]
 8014b96:	f04f 30ff 	mov.w	r0, #4294967295
 8014b9a:	b01d      	add	sp, #116	; 0x74
 8014b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ba0:	b002      	add	sp, #8
 8014ba2:	4770      	bx	lr
 8014ba4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014ba8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014bac:	bf14      	ite	ne
 8014bae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014bb2:	4623      	moveq	r3, r4
 8014bb4:	9304      	str	r3, [sp, #16]
 8014bb6:	9307      	str	r3, [sp, #28]
 8014bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014bbc:	9002      	str	r0, [sp, #8]
 8014bbe:	9006      	str	r0, [sp, #24]
 8014bc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014bc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014bc6:	ab21      	add	r3, sp, #132	; 0x84
 8014bc8:	a902      	add	r1, sp, #8
 8014bca:	4628      	mov	r0, r5
 8014bcc:	9301      	str	r3, [sp, #4]
 8014bce:	f000 f867 	bl	8014ca0 <_svfiprintf_r>
 8014bd2:	1c43      	adds	r3, r0, #1
 8014bd4:	bfbc      	itt	lt
 8014bd6:	238b      	movlt	r3, #139	; 0x8b
 8014bd8:	602b      	strlt	r3, [r5, #0]
 8014bda:	2c00      	cmp	r4, #0
 8014bdc:	d0dd      	beq.n	8014b9a <sniprintf+0x16>
 8014bde:	9b02      	ldr	r3, [sp, #8]
 8014be0:	2200      	movs	r2, #0
 8014be2:	701a      	strb	r2, [r3, #0]
 8014be4:	e7d9      	b.n	8014b9a <sniprintf+0x16>
 8014be6:	bf00      	nop
 8014be8:	24000014 	.word	0x24000014

08014bec <__ssputs_r>:
 8014bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bf0:	688e      	ldr	r6, [r1, #8]
 8014bf2:	429e      	cmp	r6, r3
 8014bf4:	4682      	mov	sl, r0
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	4690      	mov	r8, r2
 8014bfa:	4699      	mov	r9, r3
 8014bfc:	d837      	bhi.n	8014c6e <__ssputs_r+0x82>
 8014bfe:	898a      	ldrh	r2, [r1, #12]
 8014c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c04:	d031      	beq.n	8014c6a <__ssputs_r+0x7e>
 8014c06:	6825      	ldr	r5, [r4, #0]
 8014c08:	6909      	ldr	r1, [r1, #16]
 8014c0a:	1a6f      	subs	r7, r5, r1
 8014c0c:	6965      	ldr	r5, [r4, #20]
 8014c0e:	2302      	movs	r3, #2
 8014c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c14:	fb95 f5f3 	sdiv	r5, r5, r3
 8014c18:	f109 0301 	add.w	r3, r9, #1
 8014c1c:	443b      	add	r3, r7
 8014c1e:	429d      	cmp	r5, r3
 8014c20:	bf38      	it	cc
 8014c22:	461d      	movcc	r5, r3
 8014c24:	0553      	lsls	r3, r2, #21
 8014c26:	d530      	bpl.n	8014c8a <__ssputs_r+0x9e>
 8014c28:	4629      	mov	r1, r5
 8014c2a:	f000 fb21 	bl	8015270 <_malloc_r>
 8014c2e:	4606      	mov	r6, r0
 8014c30:	b950      	cbnz	r0, 8014c48 <__ssputs_r+0x5c>
 8014c32:	230c      	movs	r3, #12
 8014c34:	f8ca 3000 	str.w	r3, [sl]
 8014c38:	89a3      	ldrh	r3, [r4, #12]
 8014c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c3e:	81a3      	strh	r3, [r4, #12]
 8014c40:	f04f 30ff 	mov.w	r0, #4294967295
 8014c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c48:	463a      	mov	r2, r7
 8014c4a:	6921      	ldr	r1, [r4, #16]
 8014c4c:	f7ff ff86 	bl	8014b5c <memcpy>
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c5a:	81a3      	strh	r3, [r4, #12]
 8014c5c:	6126      	str	r6, [r4, #16]
 8014c5e:	6165      	str	r5, [r4, #20]
 8014c60:	443e      	add	r6, r7
 8014c62:	1bed      	subs	r5, r5, r7
 8014c64:	6026      	str	r6, [r4, #0]
 8014c66:	60a5      	str	r5, [r4, #8]
 8014c68:	464e      	mov	r6, r9
 8014c6a:	454e      	cmp	r6, r9
 8014c6c:	d900      	bls.n	8014c70 <__ssputs_r+0x84>
 8014c6e:	464e      	mov	r6, r9
 8014c70:	4632      	mov	r2, r6
 8014c72:	4641      	mov	r1, r8
 8014c74:	6820      	ldr	r0, [r4, #0]
 8014c76:	f000 fa93 	bl	80151a0 <memmove>
 8014c7a:	68a3      	ldr	r3, [r4, #8]
 8014c7c:	1b9b      	subs	r3, r3, r6
 8014c7e:	60a3      	str	r3, [r4, #8]
 8014c80:	6823      	ldr	r3, [r4, #0]
 8014c82:	441e      	add	r6, r3
 8014c84:	6026      	str	r6, [r4, #0]
 8014c86:	2000      	movs	r0, #0
 8014c88:	e7dc      	b.n	8014c44 <__ssputs_r+0x58>
 8014c8a:	462a      	mov	r2, r5
 8014c8c:	f000 fb4a 	bl	8015324 <_realloc_r>
 8014c90:	4606      	mov	r6, r0
 8014c92:	2800      	cmp	r0, #0
 8014c94:	d1e2      	bne.n	8014c5c <__ssputs_r+0x70>
 8014c96:	6921      	ldr	r1, [r4, #16]
 8014c98:	4650      	mov	r0, sl
 8014c9a:	f000 fa9b 	bl	80151d4 <_free_r>
 8014c9e:	e7c8      	b.n	8014c32 <__ssputs_r+0x46>

08014ca0 <_svfiprintf_r>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	461d      	mov	r5, r3
 8014ca6:	898b      	ldrh	r3, [r1, #12]
 8014ca8:	061f      	lsls	r7, r3, #24
 8014caa:	b09d      	sub	sp, #116	; 0x74
 8014cac:	4680      	mov	r8, r0
 8014cae:	460c      	mov	r4, r1
 8014cb0:	4616      	mov	r6, r2
 8014cb2:	d50f      	bpl.n	8014cd4 <_svfiprintf_r+0x34>
 8014cb4:	690b      	ldr	r3, [r1, #16]
 8014cb6:	b96b      	cbnz	r3, 8014cd4 <_svfiprintf_r+0x34>
 8014cb8:	2140      	movs	r1, #64	; 0x40
 8014cba:	f000 fad9 	bl	8015270 <_malloc_r>
 8014cbe:	6020      	str	r0, [r4, #0]
 8014cc0:	6120      	str	r0, [r4, #16]
 8014cc2:	b928      	cbnz	r0, 8014cd0 <_svfiprintf_r+0x30>
 8014cc4:	230c      	movs	r3, #12
 8014cc6:	f8c8 3000 	str.w	r3, [r8]
 8014cca:	f04f 30ff 	mov.w	r0, #4294967295
 8014cce:	e0c8      	b.n	8014e62 <_svfiprintf_r+0x1c2>
 8014cd0:	2340      	movs	r3, #64	; 0x40
 8014cd2:	6163      	str	r3, [r4, #20]
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8014cd8:	2320      	movs	r3, #32
 8014cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cde:	2330      	movs	r3, #48	; 0x30
 8014ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ce4:	9503      	str	r5, [sp, #12]
 8014ce6:	f04f 0b01 	mov.w	fp, #1
 8014cea:	4637      	mov	r7, r6
 8014cec:	463d      	mov	r5, r7
 8014cee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014cf2:	b10b      	cbz	r3, 8014cf8 <_svfiprintf_r+0x58>
 8014cf4:	2b25      	cmp	r3, #37	; 0x25
 8014cf6:	d13e      	bne.n	8014d76 <_svfiprintf_r+0xd6>
 8014cf8:	ebb7 0a06 	subs.w	sl, r7, r6
 8014cfc:	d00b      	beq.n	8014d16 <_svfiprintf_r+0x76>
 8014cfe:	4653      	mov	r3, sl
 8014d00:	4632      	mov	r2, r6
 8014d02:	4621      	mov	r1, r4
 8014d04:	4640      	mov	r0, r8
 8014d06:	f7ff ff71 	bl	8014bec <__ssputs_r>
 8014d0a:	3001      	adds	r0, #1
 8014d0c:	f000 80a4 	beq.w	8014e58 <_svfiprintf_r+0x1b8>
 8014d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d12:	4453      	add	r3, sl
 8014d14:	9309      	str	r3, [sp, #36]	; 0x24
 8014d16:	783b      	ldrb	r3, [r7, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	f000 809d 	beq.w	8014e58 <_svfiprintf_r+0x1b8>
 8014d1e:	2300      	movs	r3, #0
 8014d20:	f04f 32ff 	mov.w	r2, #4294967295
 8014d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d28:	9304      	str	r3, [sp, #16]
 8014d2a:	9307      	str	r3, [sp, #28]
 8014d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d30:	931a      	str	r3, [sp, #104]	; 0x68
 8014d32:	462f      	mov	r7, r5
 8014d34:	2205      	movs	r2, #5
 8014d36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014d3a:	4850      	ldr	r0, [pc, #320]	; (8014e7c <_svfiprintf_r+0x1dc>)
 8014d3c:	f7eb fad0 	bl	80002e0 <memchr>
 8014d40:	9b04      	ldr	r3, [sp, #16]
 8014d42:	b9d0      	cbnz	r0, 8014d7a <_svfiprintf_r+0xda>
 8014d44:	06d9      	lsls	r1, r3, #27
 8014d46:	bf44      	itt	mi
 8014d48:	2220      	movmi	r2, #32
 8014d4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d4e:	071a      	lsls	r2, r3, #28
 8014d50:	bf44      	itt	mi
 8014d52:	222b      	movmi	r2, #43	; 0x2b
 8014d54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d58:	782a      	ldrb	r2, [r5, #0]
 8014d5a:	2a2a      	cmp	r2, #42	; 0x2a
 8014d5c:	d015      	beq.n	8014d8a <_svfiprintf_r+0xea>
 8014d5e:	9a07      	ldr	r2, [sp, #28]
 8014d60:	462f      	mov	r7, r5
 8014d62:	2000      	movs	r0, #0
 8014d64:	250a      	movs	r5, #10
 8014d66:	4639      	mov	r1, r7
 8014d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d6c:	3b30      	subs	r3, #48	; 0x30
 8014d6e:	2b09      	cmp	r3, #9
 8014d70:	d94d      	bls.n	8014e0e <_svfiprintf_r+0x16e>
 8014d72:	b1b8      	cbz	r0, 8014da4 <_svfiprintf_r+0x104>
 8014d74:	e00f      	b.n	8014d96 <_svfiprintf_r+0xf6>
 8014d76:	462f      	mov	r7, r5
 8014d78:	e7b8      	b.n	8014cec <_svfiprintf_r+0x4c>
 8014d7a:	4a40      	ldr	r2, [pc, #256]	; (8014e7c <_svfiprintf_r+0x1dc>)
 8014d7c:	1a80      	subs	r0, r0, r2
 8014d7e:	fa0b f000 	lsl.w	r0, fp, r0
 8014d82:	4318      	orrs	r0, r3
 8014d84:	9004      	str	r0, [sp, #16]
 8014d86:	463d      	mov	r5, r7
 8014d88:	e7d3      	b.n	8014d32 <_svfiprintf_r+0x92>
 8014d8a:	9a03      	ldr	r2, [sp, #12]
 8014d8c:	1d11      	adds	r1, r2, #4
 8014d8e:	6812      	ldr	r2, [r2, #0]
 8014d90:	9103      	str	r1, [sp, #12]
 8014d92:	2a00      	cmp	r2, #0
 8014d94:	db01      	blt.n	8014d9a <_svfiprintf_r+0xfa>
 8014d96:	9207      	str	r2, [sp, #28]
 8014d98:	e004      	b.n	8014da4 <_svfiprintf_r+0x104>
 8014d9a:	4252      	negs	r2, r2
 8014d9c:	f043 0302 	orr.w	r3, r3, #2
 8014da0:	9207      	str	r2, [sp, #28]
 8014da2:	9304      	str	r3, [sp, #16]
 8014da4:	783b      	ldrb	r3, [r7, #0]
 8014da6:	2b2e      	cmp	r3, #46	; 0x2e
 8014da8:	d10c      	bne.n	8014dc4 <_svfiprintf_r+0x124>
 8014daa:	787b      	ldrb	r3, [r7, #1]
 8014dac:	2b2a      	cmp	r3, #42	; 0x2a
 8014dae:	d133      	bne.n	8014e18 <_svfiprintf_r+0x178>
 8014db0:	9b03      	ldr	r3, [sp, #12]
 8014db2:	1d1a      	adds	r2, r3, #4
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	9203      	str	r2, [sp, #12]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	bfb8      	it	lt
 8014dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8014dc0:	3702      	adds	r7, #2
 8014dc2:	9305      	str	r3, [sp, #20]
 8014dc4:	4d2e      	ldr	r5, [pc, #184]	; (8014e80 <_svfiprintf_r+0x1e0>)
 8014dc6:	7839      	ldrb	r1, [r7, #0]
 8014dc8:	2203      	movs	r2, #3
 8014dca:	4628      	mov	r0, r5
 8014dcc:	f7eb fa88 	bl	80002e0 <memchr>
 8014dd0:	b138      	cbz	r0, 8014de2 <_svfiprintf_r+0x142>
 8014dd2:	2340      	movs	r3, #64	; 0x40
 8014dd4:	1b40      	subs	r0, r0, r5
 8014dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8014dda:	9b04      	ldr	r3, [sp, #16]
 8014ddc:	4303      	orrs	r3, r0
 8014dde:	3701      	adds	r7, #1
 8014de0:	9304      	str	r3, [sp, #16]
 8014de2:	7839      	ldrb	r1, [r7, #0]
 8014de4:	4827      	ldr	r0, [pc, #156]	; (8014e84 <_svfiprintf_r+0x1e4>)
 8014de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014dea:	2206      	movs	r2, #6
 8014dec:	1c7e      	adds	r6, r7, #1
 8014dee:	f7eb fa77 	bl	80002e0 <memchr>
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d038      	beq.n	8014e68 <_svfiprintf_r+0x1c8>
 8014df6:	4b24      	ldr	r3, [pc, #144]	; (8014e88 <_svfiprintf_r+0x1e8>)
 8014df8:	bb13      	cbnz	r3, 8014e40 <_svfiprintf_r+0x1a0>
 8014dfa:	9b03      	ldr	r3, [sp, #12]
 8014dfc:	3307      	adds	r3, #7
 8014dfe:	f023 0307 	bic.w	r3, r3, #7
 8014e02:	3308      	adds	r3, #8
 8014e04:	9303      	str	r3, [sp, #12]
 8014e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e08:	444b      	add	r3, r9
 8014e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e0c:	e76d      	b.n	8014cea <_svfiprintf_r+0x4a>
 8014e0e:	fb05 3202 	mla	r2, r5, r2, r3
 8014e12:	2001      	movs	r0, #1
 8014e14:	460f      	mov	r7, r1
 8014e16:	e7a6      	b.n	8014d66 <_svfiprintf_r+0xc6>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	3701      	adds	r7, #1
 8014e1c:	9305      	str	r3, [sp, #20]
 8014e1e:	4619      	mov	r1, r3
 8014e20:	250a      	movs	r5, #10
 8014e22:	4638      	mov	r0, r7
 8014e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e28:	3a30      	subs	r2, #48	; 0x30
 8014e2a:	2a09      	cmp	r2, #9
 8014e2c:	d903      	bls.n	8014e36 <_svfiprintf_r+0x196>
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d0c8      	beq.n	8014dc4 <_svfiprintf_r+0x124>
 8014e32:	9105      	str	r1, [sp, #20]
 8014e34:	e7c6      	b.n	8014dc4 <_svfiprintf_r+0x124>
 8014e36:	fb05 2101 	mla	r1, r5, r1, r2
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	4607      	mov	r7, r0
 8014e3e:	e7f0      	b.n	8014e22 <_svfiprintf_r+0x182>
 8014e40:	ab03      	add	r3, sp, #12
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	4622      	mov	r2, r4
 8014e46:	4b11      	ldr	r3, [pc, #68]	; (8014e8c <_svfiprintf_r+0x1ec>)
 8014e48:	a904      	add	r1, sp, #16
 8014e4a:	4640      	mov	r0, r8
 8014e4c:	f3af 8000 	nop.w
 8014e50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014e54:	4681      	mov	r9, r0
 8014e56:	d1d6      	bne.n	8014e06 <_svfiprintf_r+0x166>
 8014e58:	89a3      	ldrh	r3, [r4, #12]
 8014e5a:	065b      	lsls	r3, r3, #25
 8014e5c:	f53f af35 	bmi.w	8014cca <_svfiprintf_r+0x2a>
 8014e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e62:	b01d      	add	sp, #116	; 0x74
 8014e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e68:	ab03      	add	r3, sp, #12
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	4622      	mov	r2, r4
 8014e6e:	4b07      	ldr	r3, [pc, #28]	; (8014e8c <_svfiprintf_r+0x1ec>)
 8014e70:	a904      	add	r1, sp, #16
 8014e72:	4640      	mov	r0, r8
 8014e74:	f000 f882 	bl	8014f7c <_printf_i>
 8014e78:	e7ea      	b.n	8014e50 <_svfiprintf_r+0x1b0>
 8014e7a:	bf00      	nop
 8014e7c:	08015544 	.word	0x08015544
 8014e80:	0801554a 	.word	0x0801554a
 8014e84:	0801554e 	.word	0x0801554e
 8014e88:	00000000 	.word	0x00000000
 8014e8c:	08014bed 	.word	0x08014bed

08014e90 <_printf_common>:
 8014e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e94:	4691      	mov	r9, r2
 8014e96:	461f      	mov	r7, r3
 8014e98:	688a      	ldr	r2, [r1, #8]
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ea0:	4293      	cmp	r3, r2
 8014ea2:	bfb8      	it	lt
 8014ea4:	4613      	movlt	r3, r2
 8014ea6:	f8c9 3000 	str.w	r3, [r9]
 8014eaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014eae:	4606      	mov	r6, r0
 8014eb0:	460c      	mov	r4, r1
 8014eb2:	b112      	cbz	r2, 8014eba <_printf_common+0x2a>
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	f8c9 3000 	str.w	r3, [r9]
 8014eba:	6823      	ldr	r3, [r4, #0]
 8014ebc:	0699      	lsls	r1, r3, #26
 8014ebe:	bf42      	ittt	mi
 8014ec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ec4:	3302      	addmi	r3, #2
 8014ec6:	f8c9 3000 	strmi.w	r3, [r9]
 8014eca:	6825      	ldr	r5, [r4, #0]
 8014ecc:	f015 0506 	ands.w	r5, r5, #6
 8014ed0:	d107      	bne.n	8014ee2 <_printf_common+0x52>
 8014ed2:	f104 0a19 	add.w	sl, r4, #25
 8014ed6:	68e3      	ldr	r3, [r4, #12]
 8014ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8014edc:	1a9b      	subs	r3, r3, r2
 8014ede:	42ab      	cmp	r3, r5
 8014ee0:	dc28      	bgt.n	8014f34 <_printf_common+0xa4>
 8014ee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014ee6:	6822      	ldr	r2, [r4, #0]
 8014ee8:	3300      	adds	r3, #0
 8014eea:	bf18      	it	ne
 8014eec:	2301      	movne	r3, #1
 8014eee:	0692      	lsls	r2, r2, #26
 8014ef0:	d42d      	bmi.n	8014f4e <_printf_common+0xbe>
 8014ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	4630      	mov	r0, r6
 8014efa:	47c0      	blx	r8
 8014efc:	3001      	adds	r0, #1
 8014efe:	d020      	beq.n	8014f42 <_printf_common+0xb2>
 8014f00:	6823      	ldr	r3, [r4, #0]
 8014f02:	68e5      	ldr	r5, [r4, #12]
 8014f04:	f8d9 2000 	ldr.w	r2, [r9]
 8014f08:	f003 0306 	and.w	r3, r3, #6
 8014f0c:	2b04      	cmp	r3, #4
 8014f0e:	bf08      	it	eq
 8014f10:	1aad      	subeq	r5, r5, r2
 8014f12:	68a3      	ldr	r3, [r4, #8]
 8014f14:	6922      	ldr	r2, [r4, #16]
 8014f16:	bf0c      	ite	eq
 8014f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f1c:	2500      	movne	r5, #0
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	bfc4      	itt	gt
 8014f22:	1a9b      	subgt	r3, r3, r2
 8014f24:	18ed      	addgt	r5, r5, r3
 8014f26:	f04f 0900 	mov.w	r9, #0
 8014f2a:	341a      	adds	r4, #26
 8014f2c:	454d      	cmp	r5, r9
 8014f2e:	d11a      	bne.n	8014f66 <_printf_common+0xd6>
 8014f30:	2000      	movs	r0, #0
 8014f32:	e008      	b.n	8014f46 <_printf_common+0xb6>
 8014f34:	2301      	movs	r3, #1
 8014f36:	4652      	mov	r2, sl
 8014f38:	4639      	mov	r1, r7
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	47c0      	blx	r8
 8014f3e:	3001      	adds	r0, #1
 8014f40:	d103      	bne.n	8014f4a <_printf_common+0xba>
 8014f42:	f04f 30ff 	mov.w	r0, #4294967295
 8014f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f4a:	3501      	adds	r5, #1
 8014f4c:	e7c3      	b.n	8014ed6 <_printf_common+0x46>
 8014f4e:	18e1      	adds	r1, r4, r3
 8014f50:	1c5a      	adds	r2, r3, #1
 8014f52:	2030      	movs	r0, #48	; 0x30
 8014f54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f58:	4422      	add	r2, r4
 8014f5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f62:	3302      	adds	r3, #2
 8014f64:	e7c5      	b.n	8014ef2 <_printf_common+0x62>
 8014f66:	2301      	movs	r3, #1
 8014f68:	4622      	mov	r2, r4
 8014f6a:	4639      	mov	r1, r7
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	47c0      	blx	r8
 8014f70:	3001      	adds	r0, #1
 8014f72:	d0e6      	beq.n	8014f42 <_printf_common+0xb2>
 8014f74:	f109 0901 	add.w	r9, r9, #1
 8014f78:	e7d8      	b.n	8014f2c <_printf_common+0x9c>
	...

08014f7c <_printf_i>:
 8014f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014f84:	460c      	mov	r4, r1
 8014f86:	7e09      	ldrb	r1, [r1, #24]
 8014f88:	b085      	sub	sp, #20
 8014f8a:	296e      	cmp	r1, #110	; 0x6e
 8014f8c:	4617      	mov	r7, r2
 8014f8e:	4606      	mov	r6, r0
 8014f90:	4698      	mov	r8, r3
 8014f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f94:	f000 80b3 	beq.w	80150fe <_printf_i+0x182>
 8014f98:	d822      	bhi.n	8014fe0 <_printf_i+0x64>
 8014f9a:	2963      	cmp	r1, #99	; 0x63
 8014f9c:	d036      	beq.n	801500c <_printf_i+0x90>
 8014f9e:	d80a      	bhi.n	8014fb6 <_printf_i+0x3a>
 8014fa0:	2900      	cmp	r1, #0
 8014fa2:	f000 80b9 	beq.w	8015118 <_printf_i+0x19c>
 8014fa6:	2958      	cmp	r1, #88	; 0x58
 8014fa8:	f000 8083 	beq.w	80150b2 <_printf_i+0x136>
 8014fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014fb4:	e032      	b.n	801501c <_printf_i+0xa0>
 8014fb6:	2964      	cmp	r1, #100	; 0x64
 8014fb8:	d001      	beq.n	8014fbe <_printf_i+0x42>
 8014fba:	2969      	cmp	r1, #105	; 0x69
 8014fbc:	d1f6      	bne.n	8014fac <_printf_i+0x30>
 8014fbe:	6820      	ldr	r0, [r4, #0]
 8014fc0:	6813      	ldr	r3, [r2, #0]
 8014fc2:	0605      	lsls	r5, r0, #24
 8014fc4:	f103 0104 	add.w	r1, r3, #4
 8014fc8:	d52a      	bpl.n	8015020 <_printf_i+0xa4>
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	6011      	str	r1, [r2, #0]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	da03      	bge.n	8014fda <_printf_i+0x5e>
 8014fd2:	222d      	movs	r2, #45	; 0x2d
 8014fd4:	425b      	negs	r3, r3
 8014fd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014fda:	486f      	ldr	r0, [pc, #444]	; (8015198 <_printf_i+0x21c>)
 8014fdc:	220a      	movs	r2, #10
 8014fde:	e039      	b.n	8015054 <_printf_i+0xd8>
 8014fe0:	2973      	cmp	r1, #115	; 0x73
 8014fe2:	f000 809d 	beq.w	8015120 <_printf_i+0x1a4>
 8014fe6:	d808      	bhi.n	8014ffa <_printf_i+0x7e>
 8014fe8:	296f      	cmp	r1, #111	; 0x6f
 8014fea:	d020      	beq.n	801502e <_printf_i+0xb2>
 8014fec:	2970      	cmp	r1, #112	; 0x70
 8014fee:	d1dd      	bne.n	8014fac <_printf_i+0x30>
 8014ff0:	6823      	ldr	r3, [r4, #0]
 8014ff2:	f043 0320 	orr.w	r3, r3, #32
 8014ff6:	6023      	str	r3, [r4, #0]
 8014ff8:	e003      	b.n	8015002 <_printf_i+0x86>
 8014ffa:	2975      	cmp	r1, #117	; 0x75
 8014ffc:	d017      	beq.n	801502e <_printf_i+0xb2>
 8014ffe:	2978      	cmp	r1, #120	; 0x78
 8015000:	d1d4      	bne.n	8014fac <_printf_i+0x30>
 8015002:	2378      	movs	r3, #120	; 0x78
 8015004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015008:	4864      	ldr	r0, [pc, #400]	; (801519c <_printf_i+0x220>)
 801500a:	e055      	b.n	80150b8 <_printf_i+0x13c>
 801500c:	6813      	ldr	r3, [r2, #0]
 801500e:	1d19      	adds	r1, r3, #4
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	6011      	str	r1, [r2, #0]
 8015014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801501c:	2301      	movs	r3, #1
 801501e:	e08c      	b.n	801513a <_printf_i+0x1be>
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	6011      	str	r1, [r2, #0]
 8015024:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015028:	bf18      	it	ne
 801502a:	b21b      	sxthne	r3, r3
 801502c:	e7cf      	b.n	8014fce <_printf_i+0x52>
 801502e:	6813      	ldr	r3, [r2, #0]
 8015030:	6825      	ldr	r5, [r4, #0]
 8015032:	1d18      	adds	r0, r3, #4
 8015034:	6010      	str	r0, [r2, #0]
 8015036:	0628      	lsls	r0, r5, #24
 8015038:	d501      	bpl.n	801503e <_printf_i+0xc2>
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	e002      	b.n	8015044 <_printf_i+0xc8>
 801503e:	0668      	lsls	r0, r5, #25
 8015040:	d5fb      	bpl.n	801503a <_printf_i+0xbe>
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	4854      	ldr	r0, [pc, #336]	; (8015198 <_printf_i+0x21c>)
 8015046:	296f      	cmp	r1, #111	; 0x6f
 8015048:	bf14      	ite	ne
 801504a:	220a      	movne	r2, #10
 801504c:	2208      	moveq	r2, #8
 801504e:	2100      	movs	r1, #0
 8015050:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015054:	6865      	ldr	r5, [r4, #4]
 8015056:	60a5      	str	r5, [r4, #8]
 8015058:	2d00      	cmp	r5, #0
 801505a:	f2c0 8095 	blt.w	8015188 <_printf_i+0x20c>
 801505e:	6821      	ldr	r1, [r4, #0]
 8015060:	f021 0104 	bic.w	r1, r1, #4
 8015064:	6021      	str	r1, [r4, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d13d      	bne.n	80150e6 <_printf_i+0x16a>
 801506a:	2d00      	cmp	r5, #0
 801506c:	f040 808e 	bne.w	801518c <_printf_i+0x210>
 8015070:	4665      	mov	r5, ip
 8015072:	2a08      	cmp	r2, #8
 8015074:	d10b      	bne.n	801508e <_printf_i+0x112>
 8015076:	6823      	ldr	r3, [r4, #0]
 8015078:	07db      	lsls	r3, r3, #31
 801507a:	d508      	bpl.n	801508e <_printf_i+0x112>
 801507c:	6923      	ldr	r3, [r4, #16]
 801507e:	6862      	ldr	r2, [r4, #4]
 8015080:	429a      	cmp	r2, r3
 8015082:	bfde      	ittt	le
 8015084:	2330      	movle	r3, #48	; 0x30
 8015086:	f805 3c01 	strble.w	r3, [r5, #-1]
 801508a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801508e:	ebac 0305 	sub.w	r3, ip, r5
 8015092:	6123      	str	r3, [r4, #16]
 8015094:	f8cd 8000 	str.w	r8, [sp]
 8015098:	463b      	mov	r3, r7
 801509a:	aa03      	add	r2, sp, #12
 801509c:	4621      	mov	r1, r4
 801509e:	4630      	mov	r0, r6
 80150a0:	f7ff fef6 	bl	8014e90 <_printf_common>
 80150a4:	3001      	adds	r0, #1
 80150a6:	d14d      	bne.n	8015144 <_printf_i+0x1c8>
 80150a8:	f04f 30ff 	mov.w	r0, #4294967295
 80150ac:	b005      	add	sp, #20
 80150ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150b2:	4839      	ldr	r0, [pc, #228]	; (8015198 <_printf_i+0x21c>)
 80150b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80150b8:	6813      	ldr	r3, [r2, #0]
 80150ba:	6821      	ldr	r1, [r4, #0]
 80150bc:	1d1d      	adds	r5, r3, #4
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	6015      	str	r5, [r2, #0]
 80150c2:	060a      	lsls	r2, r1, #24
 80150c4:	d50b      	bpl.n	80150de <_printf_i+0x162>
 80150c6:	07ca      	lsls	r2, r1, #31
 80150c8:	bf44      	itt	mi
 80150ca:	f041 0120 	orrmi.w	r1, r1, #32
 80150ce:	6021      	strmi	r1, [r4, #0]
 80150d0:	b91b      	cbnz	r3, 80150da <_printf_i+0x15e>
 80150d2:	6822      	ldr	r2, [r4, #0]
 80150d4:	f022 0220 	bic.w	r2, r2, #32
 80150d8:	6022      	str	r2, [r4, #0]
 80150da:	2210      	movs	r2, #16
 80150dc:	e7b7      	b.n	801504e <_printf_i+0xd2>
 80150de:	064d      	lsls	r5, r1, #25
 80150e0:	bf48      	it	mi
 80150e2:	b29b      	uxthmi	r3, r3
 80150e4:	e7ef      	b.n	80150c6 <_printf_i+0x14a>
 80150e6:	4665      	mov	r5, ip
 80150e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80150ec:	fb02 3311 	mls	r3, r2, r1, r3
 80150f0:	5cc3      	ldrb	r3, [r0, r3]
 80150f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80150f6:	460b      	mov	r3, r1
 80150f8:	2900      	cmp	r1, #0
 80150fa:	d1f5      	bne.n	80150e8 <_printf_i+0x16c>
 80150fc:	e7b9      	b.n	8015072 <_printf_i+0xf6>
 80150fe:	6813      	ldr	r3, [r2, #0]
 8015100:	6825      	ldr	r5, [r4, #0]
 8015102:	6961      	ldr	r1, [r4, #20]
 8015104:	1d18      	adds	r0, r3, #4
 8015106:	6010      	str	r0, [r2, #0]
 8015108:	0628      	lsls	r0, r5, #24
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	d501      	bpl.n	8015112 <_printf_i+0x196>
 801510e:	6019      	str	r1, [r3, #0]
 8015110:	e002      	b.n	8015118 <_printf_i+0x19c>
 8015112:	066a      	lsls	r2, r5, #25
 8015114:	d5fb      	bpl.n	801510e <_printf_i+0x192>
 8015116:	8019      	strh	r1, [r3, #0]
 8015118:	2300      	movs	r3, #0
 801511a:	6123      	str	r3, [r4, #16]
 801511c:	4665      	mov	r5, ip
 801511e:	e7b9      	b.n	8015094 <_printf_i+0x118>
 8015120:	6813      	ldr	r3, [r2, #0]
 8015122:	1d19      	adds	r1, r3, #4
 8015124:	6011      	str	r1, [r2, #0]
 8015126:	681d      	ldr	r5, [r3, #0]
 8015128:	6862      	ldr	r2, [r4, #4]
 801512a:	2100      	movs	r1, #0
 801512c:	4628      	mov	r0, r5
 801512e:	f7eb f8d7 	bl	80002e0 <memchr>
 8015132:	b108      	cbz	r0, 8015138 <_printf_i+0x1bc>
 8015134:	1b40      	subs	r0, r0, r5
 8015136:	6060      	str	r0, [r4, #4]
 8015138:	6863      	ldr	r3, [r4, #4]
 801513a:	6123      	str	r3, [r4, #16]
 801513c:	2300      	movs	r3, #0
 801513e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015142:	e7a7      	b.n	8015094 <_printf_i+0x118>
 8015144:	6923      	ldr	r3, [r4, #16]
 8015146:	462a      	mov	r2, r5
 8015148:	4639      	mov	r1, r7
 801514a:	4630      	mov	r0, r6
 801514c:	47c0      	blx	r8
 801514e:	3001      	adds	r0, #1
 8015150:	d0aa      	beq.n	80150a8 <_printf_i+0x12c>
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	079b      	lsls	r3, r3, #30
 8015156:	d413      	bmi.n	8015180 <_printf_i+0x204>
 8015158:	68e0      	ldr	r0, [r4, #12]
 801515a:	9b03      	ldr	r3, [sp, #12]
 801515c:	4298      	cmp	r0, r3
 801515e:	bfb8      	it	lt
 8015160:	4618      	movlt	r0, r3
 8015162:	e7a3      	b.n	80150ac <_printf_i+0x130>
 8015164:	2301      	movs	r3, #1
 8015166:	464a      	mov	r2, r9
 8015168:	4639      	mov	r1, r7
 801516a:	4630      	mov	r0, r6
 801516c:	47c0      	blx	r8
 801516e:	3001      	adds	r0, #1
 8015170:	d09a      	beq.n	80150a8 <_printf_i+0x12c>
 8015172:	3501      	adds	r5, #1
 8015174:	68e3      	ldr	r3, [r4, #12]
 8015176:	9a03      	ldr	r2, [sp, #12]
 8015178:	1a9b      	subs	r3, r3, r2
 801517a:	42ab      	cmp	r3, r5
 801517c:	dcf2      	bgt.n	8015164 <_printf_i+0x1e8>
 801517e:	e7eb      	b.n	8015158 <_printf_i+0x1dc>
 8015180:	2500      	movs	r5, #0
 8015182:	f104 0919 	add.w	r9, r4, #25
 8015186:	e7f5      	b.n	8015174 <_printf_i+0x1f8>
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1ac      	bne.n	80150e6 <_printf_i+0x16a>
 801518c:	7803      	ldrb	r3, [r0, #0]
 801518e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015192:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015196:	e76c      	b.n	8015072 <_printf_i+0xf6>
 8015198:	08015555 	.word	0x08015555
 801519c:	08015566 	.word	0x08015566

080151a0 <memmove>:
 80151a0:	4288      	cmp	r0, r1
 80151a2:	b510      	push	{r4, lr}
 80151a4:	eb01 0302 	add.w	r3, r1, r2
 80151a8:	d807      	bhi.n	80151ba <memmove+0x1a>
 80151aa:	1e42      	subs	r2, r0, #1
 80151ac:	4299      	cmp	r1, r3
 80151ae:	d00a      	beq.n	80151c6 <memmove+0x26>
 80151b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80151b8:	e7f8      	b.n	80151ac <memmove+0xc>
 80151ba:	4283      	cmp	r3, r0
 80151bc:	d9f5      	bls.n	80151aa <memmove+0xa>
 80151be:	1881      	adds	r1, r0, r2
 80151c0:	1ad2      	subs	r2, r2, r3
 80151c2:	42d3      	cmn	r3, r2
 80151c4:	d100      	bne.n	80151c8 <memmove+0x28>
 80151c6:	bd10      	pop	{r4, pc}
 80151c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80151d0:	e7f7      	b.n	80151c2 <memmove+0x22>
	...

080151d4 <_free_r>:
 80151d4:	b538      	push	{r3, r4, r5, lr}
 80151d6:	4605      	mov	r5, r0
 80151d8:	2900      	cmp	r1, #0
 80151da:	d045      	beq.n	8015268 <_free_r+0x94>
 80151dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151e0:	1f0c      	subs	r4, r1, #4
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	bfb8      	it	lt
 80151e6:	18e4      	addlt	r4, r4, r3
 80151e8:	f000 f8d2 	bl	8015390 <__malloc_lock>
 80151ec:	4a1f      	ldr	r2, [pc, #124]	; (801526c <_free_r+0x98>)
 80151ee:	6813      	ldr	r3, [r2, #0]
 80151f0:	4610      	mov	r0, r2
 80151f2:	b933      	cbnz	r3, 8015202 <_free_r+0x2e>
 80151f4:	6063      	str	r3, [r4, #4]
 80151f6:	6014      	str	r4, [r2, #0]
 80151f8:	4628      	mov	r0, r5
 80151fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151fe:	f000 b8c8 	b.w	8015392 <__malloc_unlock>
 8015202:	42a3      	cmp	r3, r4
 8015204:	d90c      	bls.n	8015220 <_free_r+0x4c>
 8015206:	6821      	ldr	r1, [r4, #0]
 8015208:	1862      	adds	r2, r4, r1
 801520a:	4293      	cmp	r3, r2
 801520c:	bf04      	itt	eq
 801520e:	681a      	ldreq	r2, [r3, #0]
 8015210:	685b      	ldreq	r3, [r3, #4]
 8015212:	6063      	str	r3, [r4, #4]
 8015214:	bf04      	itt	eq
 8015216:	1852      	addeq	r2, r2, r1
 8015218:	6022      	streq	r2, [r4, #0]
 801521a:	6004      	str	r4, [r0, #0]
 801521c:	e7ec      	b.n	80151f8 <_free_r+0x24>
 801521e:	4613      	mov	r3, r2
 8015220:	685a      	ldr	r2, [r3, #4]
 8015222:	b10a      	cbz	r2, 8015228 <_free_r+0x54>
 8015224:	42a2      	cmp	r2, r4
 8015226:	d9fa      	bls.n	801521e <_free_r+0x4a>
 8015228:	6819      	ldr	r1, [r3, #0]
 801522a:	1858      	adds	r0, r3, r1
 801522c:	42a0      	cmp	r0, r4
 801522e:	d10b      	bne.n	8015248 <_free_r+0x74>
 8015230:	6820      	ldr	r0, [r4, #0]
 8015232:	4401      	add	r1, r0
 8015234:	1858      	adds	r0, r3, r1
 8015236:	4282      	cmp	r2, r0
 8015238:	6019      	str	r1, [r3, #0]
 801523a:	d1dd      	bne.n	80151f8 <_free_r+0x24>
 801523c:	6810      	ldr	r0, [r2, #0]
 801523e:	6852      	ldr	r2, [r2, #4]
 8015240:	605a      	str	r2, [r3, #4]
 8015242:	4401      	add	r1, r0
 8015244:	6019      	str	r1, [r3, #0]
 8015246:	e7d7      	b.n	80151f8 <_free_r+0x24>
 8015248:	d902      	bls.n	8015250 <_free_r+0x7c>
 801524a:	230c      	movs	r3, #12
 801524c:	602b      	str	r3, [r5, #0]
 801524e:	e7d3      	b.n	80151f8 <_free_r+0x24>
 8015250:	6820      	ldr	r0, [r4, #0]
 8015252:	1821      	adds	r1, r4, r0
 8015254:	428a      	cmp	r2, r1
 8015256:	bf04      	itt	eq
 8015258:	6811      	ldreq	r1, [r2, #0]
 801525a:	6852      	ldreq	r2, [r2, #4]
 801525c:	6062      	str	r2, [r4, #4]
 801525e:	bf04      	itt	eq
 8015260:	1809      	addeq	r1, r1, r0
 8015262:	6021      	streq	r1, [r4, #0]
 8015264:	605c      	str	r4, [r3, #4]
 8015266:	e7c7      	b.n	80151f8 <_free_r+0x24>
 8015268:	bd38      	pop	{r3, r4, r5, pc}
 801526a:	bf00      	nop
 801526c:	24064a84 	.word	0x24064a84

08015270 <_malloc_r>:
 8015270:	b570      	push	{r4, r5, r6, lr}
 8015272:	1ccd      	adds	r5, r1, #3
 8015274:	f025 0503 	bic.w	r5, r5, #3
 8015278:	3508      	adds	r5, #8
 801527a:	2d0c      	cmp	r5, #12
 801527c:	bf38      	it	cc
 801527e:	250c      	movcc	r5, #12
 8015280:	2d00      	cmp	r5, #0
 8015282:	4606      	mov	r6, r0
 8015284:	db01      	blt.n	801528a <_malloc_r+0x1a>
 8015286:	42a9      	cmp	r1, r5
 8015288:	d903      	bls.n	8015292 <_malloc_r+0x22>
 801528a:	230c      	movs	r3, #12
 801528c:	6033      	str	r3, [r6, #0]
 801528e:	2000      	movs	r0, #0
 8015290:	bd70      	pop	{r4, r5, r6, pc}
 8015292:	f000 f87d 	bl	8015390 <__malloc_lock>
 8015296:	4a21      	ldr	r2, [pc, #132]	; (801531c <_malloc_r+0xac>)
 8015298:	6814      	ldr	r4, [r2, #0]
 801529a:	4621      	mov	r1, r4
 801529c:	b991      	cbnz	r1, 80152c4 <_malloc_r+0x54>
 801529e:	4c20      	ldr	r4, [pc, #128]	; (8015320 <_malloc_r+0xb0>)
 80152a0:	6823      	ldr	r3, [r4, #0]
 80152a2:	b91b      	cbnz	r3, 80152ac <_malloc_r+0x3c>
 80152a4:	4630      	mov	r0, r6
 80152a6:	f000 f863 	bl	8015370 <_sbrk_r>
 80152aa:	6020      	str	r0, [r4, #0]
 80152ac:	4629      	mov	r1, r5
 80152ae:	4630      	mov	r0, r6
 80152b0:	f000 f85e 	bl	8015370 <_sbrk_r>
 80152b4:	1c43      	adds	r3, r0, #1
 80152b6:	d124      	bne.n	8015302 <_malloc_r+0x92>
 80152b8:	230c      	movs	r3, #12
 80152ba:	6033      	str	r3, [r6, #0]
 80152bc:	4630      	mov	r0, r6
 80152be:	f000 f868 	bl	8015392 <__malloc_unlock>
 80152c2:	e7e4      	b.n	801528e <_malloc_r+0x1e>
 80152c4:	680b      	ldr	r3, [r1, #0]
 80152c6:	1b5b      	subs	r3, r3, r5
 80152c8:	d418      	bmi.n	80152fc <_malloc_r+0x8c>
 80152ca:	2b0b      	cmp	r3, #11
 80152cc:	d90f      	bls.n	80152ee <_malloc_r+0x7e>
 80152ce:	600b      	str	r3, [r1, #0]
 80152d0:	50cd      	str	r5, [r1, r3]
 80152d2:	18cc      	adds	r4, r1, r3
 80152d4:	4630      	mov	r0, r6
 80152d6:	f000 f85c 	bl	8015392 <__malloc_unlock>
 80152da:	f104 000b 	add.w	r0, r4, #11
 80152de:	1d23      	adds	r3, r4, #4
 80152e0:	f020 0007 	bic.w	r0, r0, #7
 80152e4:	1ac3      	subs	r3, r0, r3
 80152e6:	d0d3      	beq.n	8015290 <_malloc_r+0x20>
 80152e8:	425a      	negs	r2, r3
 80152ea:	50e2      	str	r2, [r4, r3]
 80152ec:	e7d0      	b.n	8015290 <_malloc_r+0x20>
 80152ee:	428c      	cmp	r4, r1
 80152f0:	684b      	ldr	r3, [r1, #4]
 80152f2:	bf16      	itet	ne
 80152f4:	6063      	strne	r3, [r4, #4]
 80152f6:	6013      	streq	r3, [r2, #0]
 80152f8:	460c      	movne	r4, r1
 80152fa:	e7eb      	b.n	80152d4 <_malloc_r+0x64>
 80152fc:	460c      	mov	r4, r1
 80152fe:	6849      	ldr	r1, [r1, #4]
 8015300:	e7cc      	b.n	801529c <_malloc_r+0x2c>
 8015302:	1cc4      	adds	r4, r0, #3
 8015304:	f024 0403 	bic.w	r4, r4, #3
 8015308:	42a0      	cmp	r0, r4
 801530a:	d005      	beq.n	8015318 <_malloc_r+0xa8>
 801530c:	1a21      	subs	r1, r4, r0
 801530e:	4630      	mov	r0, r6
 8015310:	f000 f82e 	bl	8015370 <_sbrk_r>
 8015314:	3001      	adds	r0, #1
 8015316:	d0cf      	beq.n	80152b8 <_malloc_r+0x48>
 8015318:	6025      	str	r5, [r4, #0]
 801531a:	e7db      	b.n	80152d4 <_malloc_r+0x64>
 801531c:	24064a84 	.word	0x24064a84
 8015320:	24064a88 	.word	0x24064a88

08015324 <_realloc_r>:
 8015324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015326:	4607      	mov	r7, r0
 8015328:	4614      	mov	r4, r2
 801532a:	460e      	mov	r6, r1
 801532c:	b921      	cbnz	r1, 8015338 <_realloc_r+0x14>
 801532e:	4611      	mov	r1, r2
 8015330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015334:	f7ff bf9c 	b.w	8015270 <_malloc_r>
 8015338:	b922      	cbnz	r2, 8015344 <_realloc_r+0x20>
 801533a:	f7ff ff4b 	bl	80151d4 <_free_r>
 801533e:	4625      	mov	r5, r4
 8015340:	4628      	mov	r0, r5
 8015342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015344:	f000 f826 	bl	8015394 <_malloc_usable_size_r>
 8015348:	42a0      	cmp	r0, r4
 801534a:	d20f      	bcs.n	801536c <_realloc_r+0x48>
 801534c:	4621      	mov	r1, r4
 801534e:	4638      	mov	r0, r7
 8015350:	f7ff ff8e 	bl	8015270 <_malloc_r>
 8015354:	4605      	mov	r5, r0
 8015356:	2800      	cmp	r0, #0
 8015358:	d0f2      	beq.n	8015340 <_realloc_r+0x1c>
 801535a:	4631      	mov	r1, r6
 801535c:	4622      	mov	r2, r4
 801535e:	f7ff fbfd 	bl	8014b5c <memcpy>
 8015362:	4631      	mov	r1, r6
 8015364:	4638      	mov	r0, r7
 8015366:	f7ff ff35 	bl	80151d4 <_free_r>
 801536a:	e7e9      	b.n	8015340 <_realloc_r+0x1c>
 801536c:	4635      	mov	r5, r6
 801536e:	e7e7      	b.n	8015340 <_realloc_r+0x1c>

08015370 <_sbrk_r>:
 8015370:	b538      	push	{r3, r4, r5, lr}
 8015372:	4c06      	ldr	r4, [pc, #24]	; (801538c <_sbrk_r+0x1c>)
 8015374:	2300      	movs	r3, #0
 8015376:	4605      	mov	r5, r0
 8015378:	4608      	mov	r0, r1
 801537a:	6023      	str	r3, [r4, #0]
 801537c:	f7ec f9d8 	bl	8001730 <_sbrk>
 8015380:	1c43      	adds	r3, r0, #1
 8015382:	d102      	bne.n	801538a <_sbrk_r+0x1a>
 8015384:	6823      	ldr	r3, [r4, #0]
 8015386:	b103      	cbz	r3, 801538a <_sbrk_r+0x1a>
 8015388:	602b      	str	r3, [r5, #0]
 801538a:	bd38      	pop	{r3, r4, r5, pc}
 801538c:	24070fe0 	.word	0x24070fe0

08015390 <__malloc_lock>:
 8015390:	4770      	bx	lr

08015392 <__malloc_unlock>:
 8015392:	4770      	bx	lr

08015394 <_malloc_usable_size_r>:
 8015394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015398:	1f18      	subs	r0, r3, #4
 801539a:	2b00      	cmp	r3, #0
 801539c:	bfbc      	itt	lt
 801539e:	580b      	ldrlt	r3, [r1, r0]
 80153a0:	18c0      	addlt	r0, r0, r3
 80153a2:	4770      	bx	lr

080153a4 <_init>:
 80153a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a6:	bf00      	nop
 80153a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153aa:	bc08      	pop	{r3}
 80153ac:	469e      	mov	lr, r3
 80153ae:	4770      	bx	lr

080153b0 <_fini>:
 80153b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b2:	bf00      	nop
 80153b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153b6:	bc08      	pop	{r3}
 80153b8:	469e      	mov	lr, r3
 80153ba:	4770      	bx	lr
