
PorpDaq_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08015020  08015020  00025020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080151dc  080151dc  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080151dc  080151dc  000251dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080151e4  080151e4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080151e4  080151e4  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080151e8  080151e8  000251e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080151ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00070f64  24000080  08015264  00030080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24070fe4  08015264  00030fe4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042cfb  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006aaf  00000000  00000000  00072da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022b0  00000000  00000000  00079850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002008  00000000  00000000  0007bb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003fca5  00000000  00000000  0007db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000243db  00000000  00000000  000bd7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0018794a  00000000  00000000  000e1b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002694d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093ec  00000000  00000000  00269550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015008 	.word	0x08015008

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08015008 	.word	0x08015008

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC3_Init>:
 * @brief ADC3 Initialisation function
 * LQFP100 Package has a max frequency of 19MHz.
 *
 */
void MX_ADC3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	619a      	str	r2, [r3, #24]

  /** Common config
   */
  hadc3.Instance = ADC3;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_ADC3_Init+0xc8>)
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <MX_ADC3_Init+0xcc>)
 800069c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006d2:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006fe:	f001 fdc3 	bl	8002288 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 fd44 	bl	8001194 <Error_Handler>
   */
  // BGA Package can sample for at least 16.5 cycles to
  // still be within the limit for 500Khz. This chip apparently
  // won't sample correctly at anything less than 2.5 cycles
  // Sampling time
  sConfig.Channel = ADC_CHANNEL_0;
 800070c:	2301      	movs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000710:	2306      	movs	r3, #6
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000718:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800071c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071e:	2304      	movs	r3, #4
 8000720:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_ADC3_Init+0xc8>)
 8000730:	f002 fabe 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 800073a:	f000 fd2b 	bl	8001194 <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24064b04 	.word	0x24064b04
 800074c:	58026000 	.word	0x58026000

08000750 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a31      	ldr	r2, [pc, #196]	; (8000824 <HAL_ADC_MspInit+0xd4>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d15c      	bne.n	800081c <HAL_ADC_MspInit+0xcc>
  {
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 800076a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a28      	ldr	r2, [pc, #160]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    Use a direct channel for fastest ADC channel
     */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800079e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80007a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80007a6:	f001 fb01 	bl	8001dac <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <HAL_ADC_MspInit+0xe0>)
 80007ae:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007b2:	2273      	movs	r2, #115	; 0x73
 80007b4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007f2:	f003 fa17 	bl	8003c24 <HAL_DMA_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80007fc:	f000 fcca 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_ADC_MspInit+0xdc>)
 8000804:	64da      	str	r2, [r3, #76]	; 0x4c
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <HAL_ADC_MspInit+0xdc>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2105      	movs	r1, #5
 8000810:	207f      	movs	r0, #127	; 0x7f
 8000812:	f003 f967 	bl	8003ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000816:	207f      	movs	r0, #127	; 0x7f
 8000818:	f003 f97e 	bl	8003b18 <HAL_NVIC_EnableIRQ>
  }
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58026000 	.word	0x58026000
 8000828:	58024400 	.word	0x58024400
 800082c:	24064a8c 	.word	0x24064a8c
 8000830:	40020010 	.word	0x40020010

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_DMA_Init+0x5c>)
 800083c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_DMA_Init+0x5c>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_DMA_Init+0x5c>)
 800084c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	200b      	movs	r0, #11
 800085e:	f003 f941 	bl	8003ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000862:	200b      	movs	r0, #11
 8000864:	f003 f958 	bl	8003b18 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2105      	movs	r1, #5
 800086c:	200c      	movs	r0, #12
 800086e:	f003 f939 	bl	8003ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000872:	200c      	movs	r0, #12
 8000874:	f003 f950 	bl	8003b18 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	200d      	movs	r0, #13
 800087e:	f003 f931 	bl	8003ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000882:	200d      	movs	r0, #13
 8000884:	f003 f948 	bl	8003b18 <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400

08000894 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80008a6:	2320      	movs	r3, #32
 80008a8:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80008ae:	e00b      	b.n	80008c8 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <SCB_InvalidateDCache_by_Addr+0x50>)
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4413      	add	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dcf0      	bgt.n	80008b0 <SCB_InvalidateDCache_by_Addr+0x1c>
 80008ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80008d6:	bf00      	nop
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <vApplicationGetIdleTaskMemory+0x2c>)
 80008f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <vApplicationGetIdleTaskMemory+0x30>)
 80008fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	240080a8 	.word	0x240080a8
 8000918:	240080fc 	.word	0x240080fc

0800091c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800091c:	b5b0      	push	{r4, r5, r7, lr}
 800091e:	b092      	sub	sp, #72	; 0x48
 8000920:	af00      	add	r7, sp, #0
  osThreadDef(prod_task, vProducer, osPriorityHigh, 0, 9216 );
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_FREERTOS_Init+0x7c>)
 8000924:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000928:	461d      	mov	r5, r3
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000932:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  prodTaskHandle = osThreadCreate(osThread(prod_task), NULL);
 8000936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f010 faf5 	bl	8010f2c <osThreadCreate>
 8000942:	4602      	mov	r2, r0
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_FREERTOS_Init+0x80>)
 8000946:	601a      	str	r2, [r3, #0]

  osThreadDef(con_task, vConsumer, osPriorityHigh, 0, 10752 );
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_FREERTOS_Init+0x84>)
 800094a:	f107 0410 	add.w	r4, r7, #16
 800094e:	461d      	mov	r5, r3
 8000950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  conTaskHandle = osThreadCreate(osThread(con_task), NULL);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f010 fae2 	bl	8010f2c <osThreadCreate>
 8000968:	4602      	mov	r2, r0
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_FREERTOS_Init+0x88>)
 800096c:	601a      	str	r2, [r3, #0]

  osMailQDef(mail, MAIL_SIZE, ADC_DATA);
 800096e:	2306      	movs	r3, #6
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	60bb      	str	r3, [r7, #8]
  adcDataMailId = osMailCreate(osMailQ(mail), NULL);
 800097e:	463b      	mov	r3, r7
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f010 fe52 	bl	801162c <osMailCreate>
 8000988:	4602      	mov	r2, r0
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_FREERTOS_Init+0x8c>)
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	3748      	adds	r7, #72	; 0x48
 8000992:	46bd      	mov	sp, r7
 8000994:	bdb0      	pop	{r4, r5, r7, pc}
 8000996:	bf00      	nop
 8000998:	0801502c 	.word	0x0801502c
 800099c:	24064b6c 	.word	0x24064b6c
 80009a0:	08015054 	.word	0x08015054
 80009a4:	24064b68 	.word	0x24064b68
 80009a8:	2406dc2c 	.word	0x2406dc2c

080009ac <mountSDCard>:
/**
 * @brief Mounts SD Card
 * @retval Nothing
 */
void mountSDCard(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  if(f_mount(&FatFSInstance, SDPath, 1)==FR_OK)
 80009b0:	2201      	movs	r2, #1
 80009b2:	4915      	ldr	r1, [pc, #84]	; (8000a08 <mountSDCard+0x5c>)
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <mountSDCard+0x60>)
 80009b6:	f00f faa5 	bl	800ff04 <f_mount>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d120      	bne.n	8000a02 <mountSDCard+0x56>
  {
    // Turn on LED if mount was successful
    LED_ON();
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <mountSDCard+0x64>)
 80009c8:	f006 f916 	bl	8006bf8 <HAL_GPIO_WritePin>
    if(f_open(&wavFile, WAV_FILE, FA_WRITE|FA_CREATE_ALWAYS) == FR_OK)
 80009cc:	220a      	movs	r2, #10
 80009ce:	4911      	ldr	r1, [pc, #68]	; (8000a14 <mountSDCard+0x68>)
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <mountSDCard+0x6c>)
 80009d2:	f00f fafb 	bl	800ffcc <f_open>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d112      	bne.n	8000a02 <mountSDCard+0x56>
    {
      // Initialise the WAV Header
      InitialiseWavEncoder(AUDIO_FREQ, wavHeaderBuff, &WaveFormat);
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <mountSDCard+0x70>)
 80009de:	4910      	ldr	r1, [pc, #64]	; (8000a20 <mountSDCard+0x74>)
 80009e0:	4810      	ldr	r0, [pc, #64]	; (8000a24 <mountSDCard+0x78>)
 80009e2:	f001 f811 	bl	8001a08 <InitialiseWavEncoder>
      // Write header file
      wav_write_result = f_write(&wavFile, wavHeaderBuff, 44,(void*)&bytes_written);
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <mountSDCard+0x7c>)
 80009e8:	222c      	movs	r2, #44	; 0x2c
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <mountSDCard+0x74>)
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <mountSDCard+0x6c>)
 80009ee:	f00f fcc0 	bl	8010372 <f_write>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <mountSDCard+0x80>)
 80009f8:	701a      	strb	r2, [r3, #0]
      // return size of file
      file_size = bytes_written;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <mountSDCard+0x7c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <mountSDCard+0x84>)
 8000a00:	6013      	str	r3, [r2, #0]
    }
  }
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2406ef34 	.word	0x2406ef34
 8000a0c:	24068bac 	.word	0x24068bac
 8000a10:	58020400 	.word	0x58020400
 8000a14:	2406ec74 	.word	0x2406ec74
 8000a18:	2406dc44 	.word	0x2406dc44
 8000a1c:	2406637c 	.word	0x2406637c
 8000a20:	24069be4 	.word	0x24069be4
 8000a24:	0007a120 	.word	0x0007a120
 8000a28:	240080a4 	.word	0x240080a4
 8000a2c:	2406dc34 	.word	0x2406dc34
 8000a30:	2406ec88 	.word	0x2406ec88

08000a34 <setFileName>:
 * @brief sets filename for each
 * WAV file on each UART RX callback
 * @retval nothing
 */
void setFileName(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  // use waypoint index to write file name here
  waypoint_index++;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <setFileName+0x20>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <setFileName+0x20>)
 8000a40:	6013      	str	r3, [r2, #0]
  snprintf(WAV_FILE, sizeof(WAV_FILE), "%d.wav", waypoint_index);
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <setFileName+0x20>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <setFileName+0x24>)
 8000a48:	2108      	movs	r1, #8
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <setFileName+0x28>)
 8000a4c:	f013 fecc 	bl	80147e8 <sniprintf>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	240080a0 	.word	0x240080a0
 8000a58:	08015070 	.word	0x08015070
 8000a5c:	2406ec74 	.word	0x2406ec74

08000a60 <startADC>:
/**
 * Starts the ADC
 * @retval nothing
 */
void startADC(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc_values, ADC_BUFFER_LENGTH) != HAL_OK)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	4902      	ldr	r1, [pc, #8]	; (8000a74 <startADC+0x14>)
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <startADC+0x18>)
 8000a6c:	f001 fdac 	bl	80025c8 <HAL_ADC_Start_DMA>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	240000a0 	.word	0x240000a0
 8000a78:	24064b04 	.word	0x24064b04

08000a7c <stopADC>:

/**
 * @brief Stops the ADC
 */
void stopADC(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  if(HAL_ADC_Stop_DMA(&hadc3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <stopADC+0x18>)
 8000a82:	f001 fe65 	bl	8002750 <HAL_ADC_Stop_DMA>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <stopADC+0x14>
  {
    Error_Handler();
 8000a8c:	f000 fb82 	bl	8001194 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24064b04 	.word	0x24064b04

08000a98 <vProducer>:
 * @brief Producer Thread
 * Starts the ADC and mounts
 * the SDCard
 */
void vProducer(void const * argument)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6178      	str	r0, [r7, #20]
  for(;;)
  {
    prodEvent = osSignalWait(0x01, osWaitForever);
 8000aa0:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <vProducer+0x3c>)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f010 faca 	bl	8011044 <osSignalWait>
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(prodEvent.status == osEventSignal)
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <vProducer+0x3c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d1ee      	bne.n	8000aa0 <vProducer+0x8>
    {
      startADC();
 8000ac2:	f7ff ffcd 	bl	8000a60 <startADC>
      mountSDCard();
 8000ac6:	f7ff ff71 	bl	80009ac <mountSDCard>
      osThreadSuspend(NULL);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f010 fee3 	bl	8011896 <osThreadSuspend>
    prodEvent = osSignalWait(0x01, osWaitForever);
 8000ad0:	e7e6      	b.n	8000aa0 <vProducer+0x8>
 8000ad2:	bf00      	nop
 8000ad4:	2406dc38 	.word	0x2406dc38

08000ad8 <vConsumer>:
 * runs the FFT compute
 * function
 * @retval None
 */
void vConsumer(void const * argument)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6178      	str	r0, [r7, #20]
  ADC_DATA *rx_data;
  for(;;)
  {
    // Wait for signal to start writing data
    writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000ae0:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <vConsumer+0xe8>)
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	4c37      	ldr	r4, [pc, #220]	; (8000bc4 <vConsumer+0xec>)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	4618      	mov	r0, r3
 8000aee:	f010 fe49 	bl	8011784 <osMailGet>
 8000af2:	463b      	mov	r3, r7
 8000af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(writeEvent.status == osEventMail)
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <vConsumer+0xec>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	d124      	bne.n	8000b4e <vConsumer+0x76>
    {
      // write Data to SD card
      rx_data =  writeEvent.value.p;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <vConsumer+0xec>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	61fb      	str	r3, [r7, #28]
      memcpy(sd_buff, rx_data->data, sizeof(sd_buff));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b10:	4619      	mov	r1, r3
 8000b12:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <vConsumer+0xf0>)
 8000b14:	f013 fe54 	bl	80147c0 <memcpy>
      if(wav_write_result == FR_OK)
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <vConsumer+0xf4>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d110      	bne.n	8000b42 <vConsumer+0x6a>
      {
        if( f_write(&wavFile, (uint8_t*)sd_buff, sizeof(sd_buff), (void*)&bytes_written) == FR_OK)
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <vConsumer+0xf8>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b26:	4928      	ldr	r1, [pc, #160]	; (8000bc8 <vConsumer+0xf0>)
 8000b28:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <vConsumer+0xfc>)
 8000b2a:	f00f fc22 	bl	8010372 <f_write>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <vConsumer+0x6a>
        {
          file_size+=bytes_written;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <vConsumer+0x100>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <vConsumer+0xf8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a26      	ldr	r2, [pc, #152]	; (8000bd8 <vConsumer+0x100>)
 8000b40:	6013      	str	r3, [r2, #0]
        }
      }
      //  computeFFT();
      // Release datra from queue after writing
      osMailFree(adcDataMailId, rx_data);
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <vConsumer+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	69f9      	ldr	r1, [r7, #28]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f010 fe8f 	bl	801186c <osMailFree>
    }

    // Wait for signal to stop recording dara
    consEvent = osSignalWait(0x02, 0);
 8000b4e:	4c23      	ldr	r4, [pc, #140]	; (8000bdc <vConsumer+0x104>)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f010 fa74 	bl	8011044 <osSignalWait>
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(consEvent.status == osEventSignal)
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <vConsumer+0x104>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d1b8      	bne.n	8000ae0 <vConsumer+0x8>
    {
      stopADC();
 8000b6e:	f7ff ff85 	bl	8000a7c <stopADC>
      if(f_lseek(&wavFile, 0) == FR_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <vConsumer+0xfc>)
 8000b76:	f00f fe77 	bl	8010868 <f_lseek>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1af      	bne.n	8000ae0 <vConsumer+0x8>
      {
        WavHeaderUpdate(wavHeaderBuff, &WaveFormat, file_size);
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <vConsumer+0x100>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4916      	ldr	r1, [pc, #88]	; (8000be0 <vConsumer+0x108>)
 8000b88:	4816      	ldr	r0, [pc, #88]	; (8000be4 <vConsumer+0x10c>)
 8000b8a:	f000 fefb 	bl	8001984 <WavHeaderUpdate>
        // Update wav File
        if(f_write(&wavFile, wavHeaderBuff, sizeof(WaveFormat), (void*)&bytes_written)==FR_OK)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <vConsumer+0xf8>)
 8000b90:	222c      	movs	r2, #44	; 0x2c
 8000b92:	4914      	ldr	r1, [pc, #80]	; (8000be4 <vConsumer+0x10c>)
 8000b94:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <vConsumer+0xfc>)
 8000b96:	f00f fbec 	bl	8010372 <f_write>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d19f      	bne.n	8000ae0 <vConsumer+0x8>
        {
          //close file
          f_close(&wavFile);
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <vConsumer+0xfc>)
 8000ba2:	f00f fe32 	bl	801080a <f_close>
          // Turn off the LED
          LED_OFF();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <vConsumer+0x110>)
 8000bae:	f006 f823 	bl	8006bf8 <HAL_GPIO_WritePin>
          // release to Producer thread
          osThreadResume(prodTaskHandle);
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <vConsumer+0x114>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f010 fe7a 	bl	80118b0 <osThreadResume>
    writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000bbc:	e790      	b.n	8000ae0 <vConsumer+0x8>
 8000bbe:	bf00      	nop
 8000bc0:	2406dc2c 	.word	0x2406dc2c
 8000bc4:	2406ec7c 	.word	0x2406ec7c
 8000bc8:	24069c28 	.word	0x24069c28
 8000bcc:	2406dc34 	.word	0x2406dc34
 8000bd0:	240080a4 	.word	0x240080a4
 8000bd4:	2406dc44 	.word	0x2406dc44
 8000bd8:	2406ec88 	.word	0x2406ec88
 8000bdc:	2406ec8c 	.word	0x2406ec8c
 8000be0:	2406637c 	.word	0x2406637c
 8000be4:	24069be4 	.word	0x24069be4
 8000be8:	58020400 	.word	0x58020400
 8000bec:	24064b6c 	.word	0x24064b6c

08000bf0 <HAL_ADC_ConvHalfCpltCallback>:




void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  // Invalidate Cache address. Just casual H7 things
  SCB_InvalidateDCache_by_Addr((uint32_t*)&adc_values[0], ADC_BUFFER_LENGTH);
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000bfe:	f7ff fe49 	bl	8000894 <SCB_InvalidateDCache_by_Addr>
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f010 fd66 	bl	80116dc <osMailAlloc>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000c14:	601a      	str	r2, [r3, #0]
  memcpy(prod_data->data, adc_values, sizeof(adc_values)/2);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	490a      	ldr	r1, [pc, #40]	; (8000c48 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f013 fdcd 	bl	80147c0 <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4610      	mov	r0, r2
 8000c32:	f010 fd69 	bl	8011708 <osMailPut>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000c3c:	601a      	str	r2, [r3, #0]
    // Handle Error here
  }



}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	240000a0 	.word	0x240000a0
 8000c4c:	2406dc2c 	.word	0x2406dc2c
 8000c50:	2406dc30 	.word	0x2406dc30
 8000c54:	2406dc28 	.word	0x2406dc28

08000c58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]


  SCB_InvalidateDCache_by_Addr((uint32_t *) &adc_values[ADC_BUFFER_LENGTH/2], ADC_BUFFER_LENGTH);
 8000c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c66:	f7ff fe15 	bl	8000894 <SCB_InvalidateDCache_by_Addr>
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c72:	4618      	mov	r0, r3
 8000c74:	f010 fd32 	bl	80116dc <osMailAlloc>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c7c:	601a      	str	r2, [r3, #0]
  memcpy(prod_data->data, adc_values + ADC_BUFFER_LENGTH/2, sizeof(adc_values)/2);
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f013 fd98 	bl	80147c0 <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f010 fd34 	bl	8011708 <osMailPut>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_ADC_ConvCpltCallback+0x64>)
 8000ca6:	601a      	str	r2, [r3, #0]
  if( mail_retval != osOK)
  {
    // Handle Error here
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240040a0 	.word	0x240040a0
 8000cb4:	2406dc2c 	.word	0x2406dc2c
 8000cb8:	2406dc30 	.word	0x2406dc30
 8000cbc:	2406dc28 	.word	0x2406dc28

08000cc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == UART8)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_UART_RxCpltCallback+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d115      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x3e>
  {
    // Wait for data from the pi.
    if(uart_rx_buffer == 0x31)
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_RxCpltCallback+0x4c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b31      	cmp	r3, #49	; 0x31
 8000cd8:	d107      	bne.n	8000cea <HAL_UART_RxCpltCallback+0x2a>
    {
      setFileName();
 8000cda:	f7ff feab 	bl	8000a34 <setFileName>
      osSignalSet(prodTaskHandle, 0x01);
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_UART_RxCpltCallback+0x50>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f010 f96d 	bl	8010fc4 <osSignalSet>
    }
    if(uart_rx_buffer == 0x32)
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_UART_RxCpltCallback+0x4c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b32      	cmp	r3, #50	; 0x32
 8000cf0:	d105      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x3e>
    {
      osSignalSet(conTaskHandle, 0x02);
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_UART_RxCpltCallback+0x54>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f010 f963 	bl	8010fc4 <osSignalSet>
    }
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40007c00 	.word	0x40007c00
 8000d0c:	2406ec98 	.word	0x2406ec98
 8000d10:	24064b6c 	.word	0x24064b6c
 8000d14:	24064b68 	.word	0x24064b68

08000d18 <MX_GPIO_Init>:

/**
 * @brief Initialise GPIO Pins
 */
void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a30      	ldr	r2, [pc, #192]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STAT_GPIO_Port, LED_STAT_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MX_GPIO_Init+0xe4>)
 8000dcc:	f005 ff14 	bl	8006bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO LED pin*/
  GPIO_InitStruct.Pin = LED_STAT_Pin;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STAT_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_GPIO_Init+0xe4>)
 8000dea:	f005 fd55 	bl	8006898 <HAL_GPIO_Init>

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58020400 	.word	0x58020400

08000e00 <SCB_EnableICache>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e08:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <SCB_EnableICache+0x3c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e18:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <SCB_EnableICache+0x3c>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <SCB_EnableICache+0x3c>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e2c:	f3bf 8f6f 	isb	sy
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <SCB_EnableDCache>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e58:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0b5b      	lsrs	r3, r3, #13
 8000e5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e62:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e6c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	015a      	lsls	r2, r3, #5
 8000e72:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e76:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e7c:	490f      	ldr	r1, [pc, #60]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1ef      	bne.n	8000e6e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e5      	bne.n	8000e64 <SCB_EnableDCache+0x24>
 8000e98:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6153      	str	r3, [r2, #20]
 8000ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eac:	f3bf 8f6f 	isb	sy
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0


	/* MPU Configuration */
	MPU_Config();
 8000ec4:	f000 f926 	bl	8001114 <MPU_Config>

	/* Enable I-Cache */
	SCB_EnableICache();
 8000ec8:	f7ff ff9a 	bl	8000e00 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000ecc:	f7ff ffb8 	bl	8000e40 <SCB_EnableDCache>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ed0:	f000 fee2 	bl	8001c98 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000ed4:	f000 f818 	bl	8000f08 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ed8:	f7ff ff1e 	bl	8000d18 <MX_GPIO_Init>
	MX_DMA_Init();
 8000edc:	f7ff fcaa 	bl	8000834 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000ee0:	f000 f95c 	bl	800119c <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000ee4:	f00c ff80 	bl	800dde8 <MX_FATFS_Init>
	MX_TIM3_Init();
 8000ee8:	f000 fba2 	bl	8001630 <MX_TIM3_Init>
	MX_UART8_Init();
 8000eec:	f000 fc48 	bl	8001780 <MX_UART8_Init>
	MX_ADC3_Init();
 8000ef0:	f7ff fbc6 	bl	8000680 <MX_ADC3_Init>
	Timer_Start();
 8000ef4:	f000 f900 	bl	80010f8 <Timer_Start>
	Init_UART_RX();
 8000ef8:	f000 f8ec 	bl	80010d4 <Init_UART_RX>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000efc:	f7ff fd0e 	bl	800091c <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000f00:	f00f fff1 	bl	8010ee6 <osKernelStart>


	while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x44>
	...

08000f08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0cc      	sub	sp, #304	; 0x130
 8000f0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f12:	224c      	movs	r2, #76	; 0x4c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f013 fc5d 	bl	80147d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f013 fc56 	bl	80147d6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	23bc      	movs	r3, #188	; 0xbc
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f013 fc4e 	bl	80147d6 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f005 fe76 	bl	8006c2c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	4b5f      	ldr	r3, [pc, #380]	; (80010c4 <SystemClock_Config+0x1bc>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	4a5e      	ldr	r2, [pc, #376]	; (80010c4 <SystemClock_Config+0x1bc>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f52:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <SystemClock_Config+0x1bc>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	; (80010c8 <SystemClock_Config+0x1c0>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <SystemClock_Config+0x1c0>)
 8000f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <SystemClock_Config+0x1c0>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f7a:	bf00      	nop
 8000f7c:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <SystemClock_Config+0x1c0>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f88:	d1f8      	bne.n	8000f7c <SystemClock_Config+0x74>
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000f8a:	4b50      	ldr	r3, [pc, #320]	; (80010cc <SystemClock_Config+0x1c4>)
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <SystemClock_Config+0x1c4>)
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000fba:	2332      	movs	r3, #50	; 0x32
 8000fbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fe59 	bl	8006ca0 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xf0>
	{
		Error_Handler();
 8000ff4:	f000 f8ce 	bl	8001194 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	233f      	movs	r3, #63	; 0x3f
 8000ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2303      	movs	r3, #3
 8001000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800100a:	2308      	movs	r3, #8
 800100c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001016:	2340      	movs	r3, #64	; 0x40
 8001018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800101c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001020:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800102e:	2102      	movs	r1, #2
 8001030:	4618      	mov	r0, r3
 8001032:	f006 fa45 	bl	80074c0 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x138>
	{
		Error_Handler();
 800103c:	f000 f8aa 	bl	8001194 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SDMMC
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <SystemClock_Config+0x1c8>)
 8001046:	601a      	str	r2, [r3, #0]
			|RCC_PERIPHCLK_ADC;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2204      	movs	r2, #4
 800104e:	605a      	str	r2, [r3, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2209      	movs	r2, #9
 8001056:	609a      	str	r2, [r3, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2201      	movs	r2, #1
 800105e:	60da      	str	r2, [r3, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	2202      	movs	r2, #2
 8001066:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2202      	movs	r2, #2
 800106e:	615a      	str	r2, [r3, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	22c0      	movs	r2, #192	; 0xc0
 8001076:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2220      	movs	r2, #32
 800107e:	61da      	str	r2, [r3, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001088:	621a      	str	r2, [r3, #32]
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2200      	movs	r2, #0
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	675a      	str	r2, [r3, #116]	; 0x74
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fdcf 	bl	8007c4c <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x1b0>
	{
		Error_Handler();
 80010b4:	f000 f86e 	bl	8001194 <Error_Handler>
	}
}
 80010b8:	bf00      	nop
 80010ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58000400 	.word	0x58000400
 80010c8:	58024800 	.word	0x58024800
 80010cc:	58024400 	.word	0x58024400
 80010d0:	00090002 	.word	0x00090002

080010d4 <Init_UART_RX>:
/**
 * @brief Initialises UART RX DMA Transfer
 * @retval Nothing
 */
void Init_UART_RX(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive_DMA(&huart8, &uart_rx_buffer, 1) != HAL_OK )
 80010d8:	2201      	movs	r2, #1
 80010da:	4905      	ldr	r1, [pc, #20]	; (80010f0 <Init_UART_RX+0x1c>)
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <Init_UART_RX+0x20>)
 80010de:	f00a fd4b 	bl	800bb78 <HAL_UART_Receive_DMA>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <Init_UART_RX+0x18>
	{
		Error_Handler();
 80010e8:	f000 f854 	bl	8001194 <Error_Handler>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2406ec98 	.word	0x2406ec98
 80010f4:	2406eea0 	.word	0x2406eea0

080010f8 <Timer_Start>:
/**
 * @brief Starts ADC Timer
 * @retval None
 */
void Timer_Start(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <Timer_Start+0x18>)
 80010fe:	f00a f891 	bl	800b224 <HAL_TIM_Base_Start>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <Timer_Start+0x14>
	{
		Error_Handler();
 8001108:	f000 f844 	bl	8001194 <Error_Handler>
	}
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2406ed64 	.word	0x2406ed64

08001114 <MPU_Config>:
/**
 * @brief Configures MPU for RAM D1 region
 * @retval None
 */
void MPU_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001126:	f002 fd05 	bl	8003b34 <HAL_MPU_Disable>
	/** Initializes and configures the Region and the memory to be protected*/
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800112a:	2301      	movs	r3, #1
 800112c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800112e:	2300      	movs	r3, #0
 8001130:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x24000000;
 8001132:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001136:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001138:	2312      	movs	r3, #18
 800113a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 800113c:	2300      	movs	r3, #0
 800113e:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001140:	2301      	movs	r3, #1
 8001142:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001144:	2303      	movs	r3, #3
 8001146:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001158:	463b      	mov	r3, r7
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fd1e 	bl	8003b9c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001160:	2004      	movs	r0, #4
 8001162:	f002 fcfd 	bl	8003b60 <HAL_MPU_Enable>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001182:	f000 fdc5 	bl	8001d10 <HAL_IncTick>
	}
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40001000 	.word	0x40001000

08001194 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800119a:	e7fe      	b.n	800119a <Error_Handler+0x6>

0800119c <MX_SDMMC1_SD_Init>:
 * Uncomment the Transceiver
 * code generated by CubeMX as it wont
 *  be used
 */
void MX_SDMMC1_SD_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <MX_SDMMC1_SD_Init+0x44>)
 80011a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_SDMMC1_SD_Init+0x40>)
 80011c8:	f008 fc04 	bl	80099d4 <HAL_SD_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80011d2:	f7ff ffdf 	bl	8001194 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2406ec9c 	.word	0x2406ec9c
 80011e0:	52007000 	.word	0x52007000

080011e4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_SD_MspInit+0xd8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d155      	bne.n	80012b2 <HAL_SD_MspInit+0xce>
  {
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 8001208:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800120c:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 800120e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001212:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 8001218:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_SD_MspInit+0xdc>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001260:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001264:	617b      	str	r3, [r7, #20]
        |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001272:	230c      	movs	r3, #12
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <HAL_SD_MspInit+0xe0>)
 800127e:	f005 fb0b 	bl	8006898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001282:	2304      	movs	r3, #4
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001292:	230c      	movs	r3, #12
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	480a      	ldr	r0, [pc, #40]	; (80012c8 <HAL_SD_MspInit+0xe4>)
 800129e:	f005 fafb 	bl	8006898 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2107      	movs	r1, #7
 80012a6:	2031      	movs	r0, #49	; 0x31
 80012a8:	f002 fc1c 	bl	8003ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012ac:	2031      	movs	r0, #49	; 0x31
 80012ae:	f002 fc33 	bl	8003b18 <HAL_NVIC_EnableIRQ>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	52007000 	.word	0x52007000
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020800 	.word	0x58020800
 80012c8:	58020c00 	.word	0x58020c00

080012cc <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x38>)
 80012d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_MspInit+0x38>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_MspInit+0x38>)
 80012e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	210f      	movs	r1, #15
 80012f4:	f06f 0001 	mvn.w	r0, #1
 80012f8:	f002 fbf4 	bl	8003ae4 <HAL_NVIC_SetPriority>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58024400 	.word	0x58024400

08001308 <HAL_InitTick>:
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b090      	sub	sp, #64	; 0x40
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	d827      	bhi.n	8001366 <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001316:	2200      	movs	r2, #0
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	2036      	movs	r0, #54	; 0x36
 800131c:	f002 fbe2 	bl	8003ae4 <HAL_NVIC_SetPriority>

    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001320:	2036      	movs	r0, #54	; 0x36
 8001322:	f002 fbf9 	bl	8003b18 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_InitTick+0xc4>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_InitTick+0xc8>)
 800132e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_InitTick+0xc8>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_InitTick+0xc8>)
 800133e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800134a:	f107 0210 	add.w	r2, r7, #16
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fc37 	bl	8007bc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <HAL_InitTick+0x6a>
 8001364:	e001      	b.n	800136a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e02b      	b.n	80013c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800136a:	f006 fc01 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800136e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001370:	e004      	b.n	800137c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001372:	f006 fbfd 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8001376:	4603      	mov	r3, r0
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_InitTick+0xcc>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	3b01      	subs	r3, #1
 8001388:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_InitTick+0xd0>)
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_InitTick+0xd4>)
 800138e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_InitTick+0xd0>)
 8001392:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001396:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_InitTick+0xd0>)
 800139a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_InitTick+0xd0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_InitTick+0xd0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_InitTick+0xd0>)
 80013ac:	f009 fee2 	bl	800b174 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <HAL_InitTick+0xd0>)
 80013b8:	f009 ff62 	bl	800b280 <HAL_TIM_Base_Start_IT>
 80013bc:	4603      	mov	r3, r0
 80013be:	e000      	b.n	80013c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3740      	adds	r7, #64	; 0x40
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000008 	.word	0x24000008
 80013d0:	58024400 	.word	0x58024400
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	2406ed18 	.word	0x2406ed18
 80013dc:	40001000 	.word	0x40001000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_adc3);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Stream0_IRQHandler+0x10>)
 8001412:	f003 ff2f 	bl	8005274 <HAL_DMA_IRQHandler>

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	24064a8c 	.word	0x24064a8c

08001420 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA1_Stream1_IRQHandler+0x10>)
 8001426:	f003 ff25 	bl	8005274 <HAL_DMA_IRQHandler>

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2406edb0 	.word	0x2406edb0

08001434 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Stream2_IRQHandler+0x10>)
 800143a:	f003 ff1b 	bl	8005274 <HAL_DMA_IRQHandler>

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2406ee28 	.word	0x2406ee28

08001448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM3_IRQHandler+0x10>)
 800144e:	f009 ff4d 	bl	800b2ec <HAL_TIM_IRQHandler>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2406ed64 	.word	0x2406ed64

0800145c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <SDMMC1_IRQHandler+0x10>)
 8001462:	f008 fd19 	bl	8009e98 <HAL_SD_IRQHandler>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2406ec9c 	.word	0x2406ec9c

08001470 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM6_DAC_IRQHandler+0x10>)
 8001476:	f009 ff39 	bl	800b2ec <HAL_TIM_IRQHandler>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2406ed18 	.word	0x2406ed18

08001484 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart8);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <UART8_IRQHandler+0x10>)
 800148a:	f00a fbfd 	bl	800bc88 <HAL_UART_IRQHandler>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2406eea0 	.word	0x2406eea0

08001498 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc3);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <ADC3_IRQHandler+0x10>)
 800149e:	f001 f9b9 	bl	8002814 <HAL_ADC_IRQHandler>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24064b04 	.word	0x24064b04

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f013 f946 	bl	801476c <__errno>
 80014e0:	4602      	mov	r2, r0
 80014e2:	230c      	movs	r3, #12
 80014e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24080000 	.word	0x24080000
 800150c:	00000400 	.word	0x00000400
 8001510:	240148fc 	.word	0x240148fc
 8001514:	24070fe8 	.word	0x24070fe8

08001518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <SystemInit+0xec>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a38      	ldr	r2, [pc, #224]	; (8001604 <SystemInit+0xec>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <SystemInit+0xf0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	2b06      	cmp	r3, #6
 8001536:	d807      	bhi.n	8001548 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <SystemInit+0xf0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 030f 	bic.w	r3, r3, #15
 8001540:	4a31      	ldr	r2, [pc, #196]	; (8001608 <SystemInit+0xf0>)
 8001542:	f043 0307 	orr.w	r3, r3, #7
 8001546:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <SystemInit+0xf4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2f      	ldr	r2, [pc, #188]	; (800160c <SystemInit+0xf4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <SystemInit+0xf4>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <SystemInit+0xf4>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	492b      	ldr	r1, [pc, #172]	; (800160c <SystemInit+0xf4>)
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <SystemInit+0xf8>)
 8001562:	4013      	ands	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <SystemInit+0xf0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	2b07      	cmp	r3, #7
 8001570:	d907      	bls.n	8001582 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <SystemInit+0xf0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 030f 	bic.w	r3, r3, #15
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <SystemInit+0xf0>)
 800157c:	f043 0307 	orr.w	r3, r3, #7
 8001580:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <SystemInit+0xf4>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <SystemInit+0xf4>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <SystemInit+0xf4>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <SystemInit+0xf4>)
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <SystemInit+0xfc>)
 8001598:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <SystemInit+0xf4>)
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <SystemInit+0x100>)
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <SystemInit+0xf4>)
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <SystemInit+0x104>)
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <SystemInit+0xf4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <SystemInit+0xf4>)
 80015ae:	4a1b      	ldr	r2, [pc, #108]	; (800161c <SystemInit+0x104>)
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <SystemInit+0xf4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <SystemInit+0xf4>)
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <SystemInit+0x104>)
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <SystemInit+0xf4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <SystemInit+0xf4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a10      	ldr	r2, [pc, #64]	; (800160c <SystemInit+0xf4>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <SystemInit+0xf4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <SystemInit+0x108>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <SystemInit+0x10c>)
 80015dc:	4013      	ands	r3, r2
 80015de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015e2:	d202      	bcs.n	80015ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <SystemInit+0x110>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <SystemInit+0x114>)
 80015ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SystemInit+0xec>)
 80015f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00
 8001608:	52002000 	.word	0x52002000
 800160c:	58024400 	.word	0x58024400
 8001610:	eaf6ed7f 	.word	0xeaf6ed7f
 8001614:	02020200 	.word	0x02020200
 8001618:	01ff0000 	.word	0x01ff0000
 800161c:	01010280 	.word	0x01010280
 8001620:	5c001000 	.word	0x5c001000
 8001624:	ffff0000 	.word	0xffff0000
 8001628:	51008108 	.word	0x51008108
 800162c:	52004000 	.word	0x52004000

08001630 <MX_TIM3_Init>:
/**
 * @brief Initialises Timer 3 to run
 * at 500Khz
 */
void MX_TIM3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b092      	sub	sp, #72	; 0x48
 8001634:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2220      	movs	r2, #32
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f013 f8bd 	bl	80147d6 <memset>

  uint32_t latency = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t timer_prescaler = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
  // Get timer clock source frequency
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 8001668:	463a      	mov	r2, r7
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f006 faaa 	bl	8007bc8 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <MX_TIM3_Init+0x52>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 800167a:	f006 fa79 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800167e:	6478      	str	r0, [r7, #68]	; 0x44
 8001680:	e004      	b.n	800168c <MX_TIM3_Init+0x5c>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 8001682:	f006 fa75 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 8001686:	4603      	mov	r3, r0
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0f5b      	lsrs	r3, r3, #29
 8001696:	3301      	adds	r3, #1
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
  htim3.Instance = TIM3;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_TIM3_Init+0xf4>)
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <MX_TIM3_Init+0xf8>)
 800169e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (timer_prescaler - 1);
 80016a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016a6:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80016ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <MX_TIM3_Init+0xfc>)
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	4a19      	ldr	r2, [pc, #100]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016c0:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016d0:	f009 fd50 	bl	800b174 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80016da:	f7ff fd5b 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016e8:	4619      	mov	r1, r3
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <MX_TIM3_Init+0xf4>)
 80016ec:	f009 ff1e 	bl	800b52c <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80016f6:	f7ff fd4d 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fa:	2320      	movs	r3, #32
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM3_Init+0xf4>)
 800170a:	f00a f93f 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001714:	f7ff fd3e 	bl	8001194 <Error_Handler>
  }

}
 8001718:	bf00      	nop
 800171a:	3748      	adds	r7, #72	; 0x48
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	d1b8bacb 	.word	0xd1b8bacb
 8001724:	2406ed64 	.word	0x2406ed64
 8001728:	40000400 	.word	0x40000400
 800172c:	0007a120 	.word	0x0007a120

08001730 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_TIM_Base_MspInit+0x48>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d116      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x40>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_TIM_Base_MspInit+0x4c>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_TIM_Base_MspInit+0x4c>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_TIM_Base_MspInit+0x4c>)
 8001754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2105      	movs	r1, #5
 8001764:	201d      	movs	r0, #29
 8001766:	f002 f9bd 	bl	8003ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800176a:	201d      	movs	r0, #29
 800176c:	f002 f9d4 	bl	8003b18 <HAL_NVIC_EnableIRQ>

  }
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40000400 	.word	0x40000400
 800177c:	58024400 	.word	0x58024400

08001780 <MX_UART8_Init>:
/**
 * @brief UART8 Init Function
 * runs at 921600 bps
 */
void MX_UART8_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_UART8_Init+0x90>)
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <MX_UART8_Init+0x94>)
 8001788:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 921600;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_UART8_Init+0x90>)
 800178c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001790:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_UART8_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_UART8_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_UART8_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_UART8_Init+0x90>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_UART8_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_UART8_Init+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_UART8_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_UART8_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_UART8_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_UART8_Init+0x90>)
 80017ca:	f00a f985 	bl	800bad8 <HAL_UART_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80017d4:	f7ff fcde 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d8:	2100      	movs	r1, #0
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_UART8_Init+0x90>)
 80017dc:	f00b fc56 	bl	800d08c <HAL_UARTEx_SetTxFifoThreshold>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80017e6:	f7ff fcd5 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <MX_UART8_Init+0x90>)
 80017ee:	f00b fc8b 	bl	800d108 <HAL_UARTEx_SetRxFifoThreshold>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80017f8:	f7ff fccc 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_UART8_Init+0x90>)
 80017fe:	f00b fc0c 	bl	800d01a <HAL_UARTEx_DisableFifoMode>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001808:	f7ff fcc4 	bl	8001194 <Error_Handler>
  }

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2406eea0 	.word	0x2406eea0
 8001814:	40007c00 	.word	0x40007c00

08001818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_UART_MspInit+0x150>)
 8001836:	4293      	cmp	r3, r2
 8001838:	f040 8092 	bne.w	8001960 <HAL_UART_MspInit+0x148>
  {
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_UART_MspInit+0x154>)
 800183e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001842:	4a4a      	ldr	r2, [pc, #296]	; (800196c <HAL_UART_MspInit+0x154>)
 8001844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001848:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_UART_MspInit+0x154>)
 800184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_UART_MspInit+0x154>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_UART_MspInit+0x154>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_UART_MspInit+0x154>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001878:	2303      	movs	r3, #3
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001888:	2308      	movs	r3, #8
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4837      	ldr	r0, [pc, #220]	; (8001970 <HAL_UART_MspInit+0x158>)
 8001894:	f005 f800 	bl	8006898 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream1;
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_UART_MspInit+0x15c>)
 800189a:	4a37      	ldr	r2, [pc, #220]	; (8001978 <HAL_UART_MspInit+0x160>)
 800189c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018a0:	2251      	movs	r2, #81	; 0x51
 80018a2:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a4:	4b33      	ldr	r3, [pc, #204]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b6:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ca:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d2:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80018da:	4826      	ldr	r0, [pc, #152]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018dc:	f002 f9a2 	bl	8003c24 <HAL_DMA_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80018e6:	f7ff fc55 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ee:	679a      	str	r2, [r3, #120]	; 0x78
 80018f0:	4a20      	ldr	r2, [pc, #128]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_UART_MspInit+0x164>)
 80018f8:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_UART_MspInit+0x168>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_UART_MspInit+0x164>)
 80018fe:	2252      	movs	r2, #82	; 0x52
 8001900:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_UART_MspInit+0x164>)
 8001904:	2240      	movs	r2, #64	; 0x40
 8001906:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <HAL_UART_MspInit+0x164>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_UART_MspInit+0x164>)
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_UART_MspInit+0x164>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_MspInit+0x164>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_UART_MspInit+0x164>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UART_MspInit+0x164>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_UART_MspInit+0x164>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <HAL_UART_MspInit+0x164>)
 8001936:	f002 f975 	bl	8003c24 <HAL_DMA_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001940:	f7ff fc28 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_UART_MspInit+0x164>)
 8001948:	675a      	str	r2, [r3, #116]	; 0x74
 800194a:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_UART_MspInit+0x164>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 7, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2107      	movs	r1, #7
 8001954:	2053      	movs	r0, #83	; 0x53
 8001956:	f002 f8c5 	bl	8003ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800195a:	2053      	movs	r0, #83	; 0x53
 800195c:	f002 f8dc 	bl	8003b18 <HAL_NVIC_EnableIRQ>
  }
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40007c00 	.word	0x40007c00
 800196c:	58024400 	.word	0x58024400
 8001970:	58021000 	.word	0x58021000
 8001974:	2406edb0 	.word	0x2406edb0
 8001978:	40020028 	.word	0x40020028
 800197c:	2406ee28 	.word	0x2406ee28
 8001980:	40020040 	.word	0x40020040

08001984 <WavHeaderUpdate>:
#include "wav.h"

uint32_t WavHeaderUpdate(uint8_t* pHeader, WAV_Format* wavFormatStruct,  uint32_t file_size)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  // Rewrite the value of the sampling time here.
  uint32_t header_file_size = file_size - 8;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b08      	subs	r3, #8
 8001994:	617b      	str	r3, [r7, #20]
  pHeader[4] = (uint8_t) (header_file_size);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t) (header_file_size >> 8);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	0a1a      	lsrs	r2, r3, #8
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3305      	adds	r3, #5
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t) (header_file_size >> 16);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	0c1a      	lsrs	r2, r3, #16
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3306      	adds	r3, #6
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t) (header_file_size >> 24);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	0e1a      	lsrs	r2, r3, #24
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3307      	adds	r3, #7
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]

  //rewrite the Value of sample data.
  uint32_t data_file_size = file_size - 44;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b2c      	subs	r3, #44	; 0x2c
 80019c8:	613b      	str	r3, [r7, #16]
  pHeader[40] = (uint8_t) (data_file_size);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3328      	adds	r3, #40	; 0x28
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t) (data_file_size >> 8);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	0a1a      	lsrs	r2, r3, #8
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3329      	adds	r3, #41	; 0x29
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t) (data_file_size >> 16);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	0c1a      	lsrs	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	332a      	adds	r3, #42	; 0x2a
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t) (data_file_size >> 24);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	0e1a      	lsrs	r2, r3, #24
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	332b      	adds	r3, #43	; 0x2b
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]

  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <InitialiseWavEncoder>:
 * @param Freq: Sampling Frequency
 * @param pHeader: Pointer to the WAV file header to be written
 * @retval 0 if successful, !0 otherwise
 */
uint32_t InitialiseWavEncoder(uint32_t Freq, uint8_t *pHeader, WAV_Format* WaveFormat)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]

  WaveFormat->SampleRate = Freq; // Audio sampling frequency @ 500KHz
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	619a      	str	r2, [r3, #24]
  //WaveFormat.SampleRate = 44100;
  WaveFormat->NumChannels = 1; // Stereo;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	82da      	strh	r2, [r3, #22]
  WaveFormat->BitsPerSample = 16; // Useful bits per sample;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2210      	movs	r2, #16
 8001a24:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat->FileSize = 0x003D0900; // 1.92MB Filesize - 8 bytes 8 bytes (which is size of "RIFF" + size of file header)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <InitialiseWavEncoder+0x78>)
 8001a2a:	605a      	str	r2, [r3, #4]
  WaveFormat->SubChunk1Size = 16; // or should it be 16?
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2210      	movs	r2, #16
 8001a30:	611a      	str	r2, [r3, #16]
  WaveFormat->ByteRate =  WaveFormat->SampleRate * (WaveFormat->BitsPerSample/8) * (WaveFormat->NumChannels);  // Bytes per second which is sample rate * block aligj
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a3a:	08d2      	lsrs	r2, r2, #3
 8001a3c:	b292      	uxth	r2, r2
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	8ad2      	ldrh	r2, [r2, #22]
 8001a46:	fb02 f203 	mul.w	r2, r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	61da      	str	r2, [r3, #28]

  WaveFormat->BlockAlign = WaveFormat->NumChannels * (WaveFormat->BitsPerSample/8); // number of bytes in a frame
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8ada      	ldrh	r2, [r3, #22]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a56:	08db      	lsrs	r3, r3, #3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	fb12 f303 	smulbb	r3, r2, r3
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	841a      	strh	r2, [r3, #32]

  // Parse the rest of the data here.
  // If function returns anything other than 1,
  // break function.
  if(ProcessWavHeader(pHeader, WaveFormat) == 1)
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68b8      	ldr	r0, [r7, #8]
 8001a68:	f000 f80c 	bl	8001a84 <ProcessWavHeader>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <InitialiseWavEncoder+0x6e>
  {
    return 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <InitialiseWavEncoder+0x70>
  }

  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	003d0900 	.word	0x003d0900

08001a84 <ProcessWavHeader>:
 *	 @param pheader: Wave Header Buffer to completed
 *  @param wavFormatStruct: Pointer to the wave struct
 *  @retval 0 if passed, !0 otherwise
 */
uint32_t ProcessWavHeader(uint8_t* pHeader, WAV_Format* wavFormatStruct)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  /***********Header*******************/
  //	Chunk which is always "RIFF"
  pHeader[0] = 'R';
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2252      	movs	r2, #82	; 0x52
 8001a92:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	2249      	movs	r2, #73	; 0x49
 8001a9a:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	2246      	movs	r2, #70	; 0x46
 8001aa2:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	2246      	movs	r2, #70	; 0x46
 8001aaa:	701a      	strb	r2, [r3, #0]

  // File length : Total length minus 8 bytes. Can always write back after each recording session.
  //4000000 bytes = 0x003D0900
  pHeader[4] = 0x00;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x00;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3305      	adds	r3, #5
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x00;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3306      	adds	r3, #6
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3307      	adds	r3, #7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]

  // File Format: "Always "WAVE" for WAV files
  pHeader[8]  = 'W';
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	2257      	movs	r2, #87	; 0x57
 8001ad2:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3309      	adds	r3, #9
 8001ad8:	2241      	movs	r2, #65	; 0x41
 8001ada:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	330a      	adds	r3, #10
 8001ae0:	2256      	movs	r2, #86	; 0x56
 8001ae2:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	330b      	adds	r3, #11
 8001ae8:	2245      	movs	r2, #69	; 0x45
 8001aea:	701a      	strb	r2, [r3, #0]

  /*************Format Chunk*** add single space at end too ***/
  pHeader[12] = 'f';
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	330c      	adds	r3, #12
 8001af0:	2266      	movs	r2, #102	; 0x66
 8001af2:	701a      	strb	r2, [r3, #0]
  pHeader[13] = 'm';
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	330d      	adds	r3, #13
 8001af8:	226d      	movs	r2, #109	; 0x6d
 8001afa:	701a      	strb	r2, [r3, #0]
  pHeader[14] = 't';
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	330e      	adds	r3, #14
 8001b00:	2274      	movs	r2, #116	; 0x74
 8001b02:	701a      	strb	r2, [r3, #0]
  pHeader[15] = ' ';
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	330f      	adds	r3, #15
 8001b08:	2220      	movs	r2, #32
 8001b0a:	701a      	strb	r2, [r3, #0]

  // chunk size in bytes, 0x10
  pHeader[16] = 0x10;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	2210      	movs	r2, #16
 8001b12:	701a      	strb	r2, [r3, #0]
  pHeader[17] = 0x00;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3311      	adds	r3, #17
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
  pHeader[18] = 0x00;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3312      	adds	r3, #18
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
  pHeader[19] = 0x00;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3313      	adds	r3, #19
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]

  // Audio Format. Always 1 for WAV files in PCM format
  pHeader[20] = 0x01;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3314      	adds	r3, #20
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
  pHeader[21] = 0x00;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3315      	adds	r3, #21
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]

  // Number of channels: Mono 0x01 or stereo 0x02. Pass Struct member through
  pHeader[22] = wavFormatStruct->NumChannels;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	8ada      	ldrh	r2, [r3, #22]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3316      	adds	r3, #22
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
  pHeader[23] = 0x00;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3317      	adds	r3, #23
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

  // Sample Rate in Hz -- To be written in little Endian.
  // 500000 =  0x0007A120 ==> [24] = 0x20, 27 = 0x00
  // This masks the 32 bit integers into single bytes
  // https://stackoverflow.com/questions/10493411/what-is-bit-masking
  pHeader[24] = (uint8_t) ((wavFormatStruct->SampleRate & 0xFFFF));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3318      	adds	r3, #24
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
  pHeader[25] = (uint8_t) ((wavFormatStruct->SampleRate >> 8 )& 0xFFFF);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	0a1a      	lsrs	r2, r3, #8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3319      	adds	r3, #25
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
  pHeader[26] = (uint8_t) ((wavFormatStruct->SampleRate >> 16)& 0xFFFF);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	0c1a      	lsrs	r2, r3, #16
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	331a      	adds	r3, #26
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
  pHeader[27] = (uint8_t) ((wavFormatStruct->SampleRate >> 24 )& 0xFFFF);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	0e1a      	lsrs	r2, r3, #24
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	331b      	adds	r3, #27
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

  /** Byte Rate***/
  pHeader[28] = (uint8_t) ((wavFormatStruct->ByteRate & 0xFFFF));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	331c      	adds	r3, #28
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
  pHeader[29] = (uint8_t) ((wavFormatStruct->ByteRate >> 8 )& 0xFFFF);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	0a1a      	lsrs	r2, r3, #8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	331d      	adds	r3, #29
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
  pHeader[30] = (uint8_t) ((wavFormatStruct->ByteRate >> 16)& 0xFFFF);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	0c1a      	lsrs	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	331e      	adds	r3, #30
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
  pHeader[31] = (uint8_t) ((wavFormatStruct->ByteRate >> 24 )& 0xFFFF);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	0e1a      	lsrs	r2, r3, #24
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	331f      	adds	r3, #31
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]


  /** Block ALignment usually takes up one byte **/
  pHeader[32] = wavFormatStruct->BlockAlign;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	8c1a      	ldrh	r2, [r3, #32]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
  pHeader[33] = 0x00;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3321      	adds	r3, #33	; 0x21
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

  pHeader[32] = 0x04;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3320      	adds	r3, #32
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	701a      	strb	r2, [r3, #0]
  pHeader[33] = 0x00;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3321      	adds	r3, #33	; 0x21
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]

  /**** Bits per sample **/
  pHeader[34]  = wavFormatStruct->BitsPerSample;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3322      	adds	r3, #34	; 0x22
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3323      	adds	r3, #35	; 0x23
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]

  /***************Data Chunk ************************/
  // Always "data"
  pHeader[36]  = 'd';
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3324      	adds	r3, #36	; 0x24
 8001bf8:	2264      	movs	r2, #100	; 0x64
 8001bfa:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3325      	adds	r3, #37	; 0x25
 8001c00:	2261      	movs	r2, #97	; 0x61
 8001c02:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3326      	adds	r3, #38	; 0x26
 8001c08:	2274      	movs	r2, #116	; 0x74
 8001c0a:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3327      	adds	r3, #39	; 0x27
 8001c10:	2261      	movs	r2, #97	; 0x61
 8001c12:	701a      	strb	r2, [r3, #0]

  // Data Length or number of element in sample data
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3328      	adds	r3, #40	; 0x28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x00;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3329      	adds	r3, #41	; 0x29
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x00;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	332a      	adds	r3, #42	; 0x2a
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	332b      	adds	r3, #43	; 0x2b
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]

  //upon success
  return 0;
 8001c34:	2300      	movs	r3, #0

}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c48:	f7ff fc66 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c4e:	e003      	b.n	8001c58 <LoopCopyDataInit>

08001c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c56:	3104      	adds	r1, #4

08001c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c58:	480a      	ldr	r0, [pc, #40]	; (8001c84 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c60:	d3f6      	bcc.n	8001c50 <CopyDataInit>
  ldr  r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001c64:	e002      	b.n	8001c6c <LoopFillZerobss>

08001c66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c68:	f842 3b04 	str.w	r3, [r2], #4

08001c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c70:	d3f9      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f012 fd81 	bl	8014778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff f923 	bl	8000ec0 <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001c80:	080151ec 	.word	0x080151ec
  ldr  r0, =_sdata
 8001c84:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001c88:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001c8c:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8001c90:	24070fe4 	.word	0x24070fe4

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f001 ff15 	bl	8003ace <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca4:	f005 fdc2 	bl	800782c <HAL_RCC_GetSysClockFreq>
 8001ca8:	4601      	mov	r1, r0
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_Init+0x68>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <HAL_Init+0x6c>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_Init+0x68>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_Init+0x6c>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <HAL_Init+0x70>)
 8001cda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_Init+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fb10 	bl	8001308 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e002      	b.n	8001cf8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf2:	f7ff faeb 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	58024400 	.word	0x58024400
 8001d04:	080150e4 	.word	0x080150e4
 8001d08:	24000004 	.word	0x24000004
 8001d0c:	24000000 	.word	0x24000000

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2400000c 	.word	0x2400000c
 8001d34:	2406ef2c 	.word	0x2406ef2c

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2406ef2c 	.word	0x2406ef2c

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2400000c 	.word	0x2400000c

08001d94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetREVID+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0c1b      	lsrs	r3, r3, #16
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	5c001000 	.word	0x5c001000

08001dac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	58000400 	.word	0x58000400

08001dd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3360      	adds	r3, #96	; 0x60
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b087      	sub	sp, #28
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3360      	adds	r3, #96	; 0x60
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]
  }
}
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b087      	sub	sp, #28
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3330      	adds	r3, #48	; 0x30
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	4413      	add	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	211f      	movs	r1, #31
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	401a      	ands	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 011f 	and.w	r1, r3, #31
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f023 0203 	bic.w	r2, r3, #3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b087      	sub	sp, #28
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3314      	adds	r3, #20
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	0e5b      	lsrs	r3, r3, #25
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0d1b      	lsrs	r3, r3, #20
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2107      	movs	r1, #7
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0d1b      	lsrs	r3, r3, #20
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ffc:	bf00      	nop
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0318 	and.w	r3, r3, #24
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <LL_ADC_SetChannelSingleDiff+0x44>)
 800202c:	40d9      	lsrs	r1, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	400b      	ands	r3, r1
 8002032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002036:	431a      	orrs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	000fffff 	.word	0x000fffff

08002050 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 031f 	and.w	r3, r3, #31
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002096:	4013      	ands	r3, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6093      	str	r3, [r2, #8]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	5fffffc0 	.word	0x5fffffc0

080020ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020c0:	d101      	bne.n	80020c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	6fffffc0 	.word	0x6fffffc0

080020fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002110:	d101      	bne.n	8002116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LL_ADC_Enable+0x24>)
 8002132:	4013      	ands	r3, r2
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	7fffffc0 	.word	0x7fffffc0

0800214c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <LL_ADC_Disable+0x24>)
 800215a:	4013      	ands	r3, r2
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	7fffffc0 	.word	0x7fffffc0

08002174 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <LL_ADC_IsEnabled+0x18>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_ADC_IsEnabled+0x1a>
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsDisableOngoing+0x18>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsDisableOngoing+0x1a>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <LL_ADC_REG_StartConversion+0x24>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	f043 0204 	orr.w	r2, r3, #4
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	7fffffc0 	.word	0x7fffffc0

080021e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <LL_ADC_REG_StopConversion+0x24>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	f043 0210 	orr.w	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	7fffffc0 	.word	0x7fffffc0

08002210 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b04      	cmp	r3, #4
 8002222:	d101      	bne.n	8002228 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <LL_ADC_INJ_StopConversion+0x24>)
 8002246:	4013      	ands	r3, r2
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	7fffffc0 	.word	0x7fffffc0

08002260 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b08      	cmp	r3, #8
 8002272:	d101      	bne.n	8002278 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e18e      	b.n	80025c0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fa4d 	bl	8000750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff feef 	bl	80020ac <LL_ADC_IsDeepPowerDownEnabled>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fed5 	bl	8002088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff0a 	bl	80020fc <LL_ADC_IsInternalRegulatorEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d113      	bne.n	8002316 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff feee 	bl	80020d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022f8:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <HAL_ADC_Init+0x2dc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	4a9a      	ldr	r2, [pc, #616]	; (8002568 <HAL_ADC_Init+0x2e0>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002308:	e002      	b.n	8002310 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3b01      	subs	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff feee 	bl	80020fc <LL_ADC_IsInternalRegulatorEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10d      	bne.n	8002342 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff62 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 800234c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 8129 	bne.w	80025ae <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8125 	bne.w	80025ae <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800236c:	f043 0202 	orr.w	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fefb 	bl	8002174 <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d136      	bne.n	80023f2 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a78      	ldr	r2, [pc, #480]	; (800256c <HAL_ADC_Init+0x2e4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_ADC_Init+0x110>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_ADC_Init+0x2e8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d10e      	bne.n	80023b6 <HAL_ADC_Init+0x12e>
 8002398:	4874      	ldr	r0, [pc, #464]	; (800256c <HAL_ADC_Init+0x2e4>)
 800239a:	f7ff feeb 	bl	8002174 <LL_ADC_IsEnabled>
 800239e:	4604      	mov	r4, r0
 80023a0:	4873      	ldr	r0, [pc, #460]	; (8002570 <HAL_ADC_Init+0x2e8>)
 80023a2:	f7ff fee7 	bl	8002174 <LL_ADC_IsEnabled>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4323      	orrs	r3, r4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e008      	b.n	80023c8 <HAL_ADC_Init+0x140>
 80023b6:	486f      	ldr	r0, [pc, #444]	; (8002574 <HAL_ADC_Init+0x2ec>)
 80023b8:	f7ff fedc 	bl	8002174 <LL_ADC_IsEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d012      	beq.n	80023f2 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_ADC_Init+0x2e4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_Init+0x158>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_ADC_Init+0x2e8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_Init+0x15c>
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_ADC_Init+0x2f0>)
 80023e2:	e000      	b.n	80023e6 <HAL_ADC_Init+0x15e>
 80023e4:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_ADC_Init+0x2f4>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7ff fcf3 	bl	8001dd8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023f2:	f7ff fccf 	bl	8001d94 <HAL_GetREVID>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d914      	bls.n	800242a <HAL_ADC_Init+0x1a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d110      	bne.n	800242a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7d5b      	ldrb	r3, [r3, #21]
 800240c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002412:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002418:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7f1b      	ldrb	r3, [r3, #28]
 800241e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002420:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002422:	f043 030c 	orr.w	r3, r3, #12
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e00d      	b.n	8002446 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7d5b      	ldrb	r3, [r3, #21]
 800242e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002434:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800243a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7f1b      	ldrb	r3, [r3, #28]
 8002440:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d106      	bne.n	800245c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	3b01      	subs	r3, #1
 8002454:	045b      	lsls	r3, r3, #17
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <HAL_ADC_Init+0x2f8>)
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	430b      	orrs	r3, r1
 800248a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff febd 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 8002496:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fedf 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d14a      	bne.n	8002540 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d147      	bne.n	8002540 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7d1b      	ldrb	r3, [r3, #20]
 80024b4:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_ADC_Init+0x2fc>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11b      	bne.n	8002514 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_ADC_Init+0x300>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0411      	lsls	r1, r2, #16
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002504:	430a      	orrs	r2, r1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	e007      	b.n	8002524 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f001 f8f0 	bl	8003720 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d121      	bne.n	800258c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f023 010f 	bic.w	r1, r3, #15
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	e01c      	b.n	800259c <HAL_ADC_Init+0x314>
 8002562:	bf00      	nop
 8002564:	24000000 	.word	0x24000000
 8002568:	053e2d63 	.word	0x053e2d63
 800256c:	40022000 	.word	0x40022000
 8002570:	40022100 	.word	0x40022100
 8002574:	58026000 	.word	0x58026000
 8002578:	40022300 	.word	0x40022300
 800257c:	58026300 	.word	0x58026300
 8002580:	fff0c003 	.word	0xfff0c003
 8002584:	ffffbffc 	.word	0xffffbffc
 8002588:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 020f 	bic.w	r2, r2, #15
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f023 0303 	bic.w	r3, r3, #3
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
 80025ac:	e007      	b.n	80025be <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025be:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3724      	adds	r7, #36	; 0x24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}

080025c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_ADC_Start_DMA+0x168>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_ADC_Start_DMA+0x20>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_ADC_Start_DMA+0x16c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_Start_DMA+0x24>
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_ADC_Start_DMA+0x170>)
 80025ea:	e000      	b.n	80025ee <HAL_ADC_Start_DMA+0x26>
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_ADC_Start_DMA+0x174>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fd2e 	bl	8002050 <LL_ADC_GetMultimode>
 80025f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fe08 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 808c 	bne.w	8002720 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Start_DMA+0x4e>
 8002612:	2302      	movs	r3, #2
 8002614:	e087      	b.n	8002726 <HAL_ADC_Start_DMA+0x15e>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d002      	beq.n	8002630 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b09      	cmp	r3, #9
 800262e:	d170      	bne.n	8002712 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 ff05 	bl	8003440 <ADC_Enable>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d163      	bne.n	8002708 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002644:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_ADC_Start_DMA+0x178>)
 8002646:	4013      	ands	r3, r2
 8002648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_ADC_Start_DMA+0x16c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d002      	beq.n	8002660 <HAL_ADC_Start_DMA+0x98>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	e000      	b.n	8002662 <HAL_ADC_Start_DMA+0x9a>
 8002660:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_ADC_Start_DMA+0x168>)
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4293      	cmp	r3, r2
 8002668:	d002      	beq.n	8002670 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f023 0206 	bic.w	r2, r3, #6
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	659a      	str	r2, [r3, #88]	; 0x58
 8002694:	e002      	b.n	800269c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	4a28      	ldr	r2, [pc, #160]	; (8002744 <HAL_ADC_Start_DMA+0x17c>)
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_ADC_Start_DMA+0x180>)
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_ADC_Start_DMA+0x184>)
 80026b2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	221c      	movs	r2, #28
 80026ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0210 	orr.w	r2, r2, #16
 80026d2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f7ff fc41 	bl	8001f66 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3340      	adds	r3, #64	; 0x40
 80026ee:	4619      	mov	r1, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f001 fdf2 	bl	80042dc <HAL_DMA_Start_IT>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fd5d 	bl	80021c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002706:	e00d      	b.n	8002724 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002710:	e008      	b.n	8002724 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800271e:	e001      	b.n	8002724 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002720:	2302      	movs	r3, #2
 8002722:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000
 8002734:	40022100 	.word	0x40022100
 8002738:	40022300 	.word	0x40022300
 800273c:	58026300 	.word	0x58026300
 8002740:	fffff0fe 	.word	0xfffff0fe
 8002744:	080035f9 	.word	0x080035f9
 8002748:	080036d1 	.word	0x080036d1
 800274c:	080036ed 	.word	0x080036ed

08002750 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Stop_DMA+0x16>
 8002762:	2302      	movs	r3, #2
 8002764:	e04f      	b.n	8002806 <HAL_ADC_Stop_DMA+0xb6>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800276e:	2103      	movs	r1, #3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fdb1 	bl	80032d8 <ADC_ConversionStop>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d13d      	bne.n	80027fc <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0203 	bic.w	r2, r2, #3
 800278e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d10f      	bne.n	80027be <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 f804 	bl	80047b0 <HAL_DMA_Abort>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0210 	bic.w	r2, r2, #16
 80027cc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 feb7 	bl	8003548 <ADC_Disable>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e002      	b.n	80027e6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 feb1 	bl	8003548 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_ADC_Stop_DMA+0xc0>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	ffffeefe 	.word	0xffffeefe

08002814 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <HAL_ADC_IRQHandler+0x240>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_ADC_IRQHandler+0x30>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <HAL_ADC_IRQHandler+0x244>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_ADC_IRQHandler+0x34>
 8002844:	4b85      	ldr	r3, [pc, #532]	; (8002a5c <HAL_ADC_IRQHandler+0x248>)
 8002846:	e000      	b.n	800284a <HAL_ADC_IRQHandler+0x36>
 8002848:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <HAL_ADC_IRQHandler+0x24c>)
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc00 	bl	8002050 <LL_ADC_GetMultimode>
 8002850:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d017      	beq.n	800288c <HAL_ADC_IRQHandler+0x78>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f001 f86e 	bl	8003960 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2202      	movs	r2, #2
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_IRQHandler+0x8c>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8083 	beq.w	80029b2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d07d      	beq.n	80029b2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fb08 	bl	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d062      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_ADC_IRQHandler+0x244>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d002      	beq.n	80028ee <HAL_ADC_IRQHandler+0xda>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_IRQHandler+0xdc>
 80028ee:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_ADC_IRQHandler+0x240>)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d008      	beq.n	800290a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d002      	beq.n	800290a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b09      	cmp	r3, #9
 8002908:	d104      	bne.n	8002914 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	e00c      	b.n	800292e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_ADC_IRQHandler+0x244>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d002      	beq.n	8002924 <HAL_ADC_IRQHandler+0x110>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	e000      	b.n	8002926 <HAL_ADC_IRQHandler+0x112>
 8002924:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <HAL_ADC_IRQHandler+0x240>)
 8002926:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d135      	bne.n	80029a4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d12e      	bne.n	80029a4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fc60 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11a      	bne.n	800298c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 020c 	bic.w	r2, r2, #12
 8002964:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d112      	bne.n	80029a4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
 800298a:	e00b      	b.n	80029a4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0210 	orr.w	r2, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe f957 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_ADC_IRQHandler+0x1b2>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10b      	bne.n	80029de <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a0 	beq.w	8002b12 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 809a 	beq.w	8002b12 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fac6 	bl	8001f8c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a00:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa6e 	bl	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a0c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <HAL_ADC_IRQHandler+0x244>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d002      	beq.n	8002a1e <HAL_ADC_IRQHandler+0x20a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	e000      	b.n	8002a20 <HAL_ADC_IRQHandler+0x20c>
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_ADC_IRQHandler+0x240>)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d008      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b06      	cmp	r3, #6
 8002a32:	d002      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b07      	cmp	r3, #7
 8002a38:	d104      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	623b      	str	r3, [r7, #32]
 8002a42:	e014      	b.n	8002a6e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_ADC_IRQHandler+0x244>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_ADC_IRQHandler+0x250>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e008      	b.n	8002a66 <HAL_ADC_IRQHandler+0x252>
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40022100 	.word	0x40022100
 8002a5c:	40022300 	.word	0x40022300
 8002a60:	58026300 	.word	0x58026300
 8002a64:	4b84      	ldr	r3, [pc, #528]	; (8002c78 <HAL_ADC_IRQHandler+0x464>)
 8002a66:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10c      	bne.n	8002a8e <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d142      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03f      	beq.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d13a      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d133      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d12e      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fbd8 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11a      	bne.n	8002aec <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ac4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d112      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
 8002aea:	e00b      	b.n	8002b04 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 ff03 	bl	8003910 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2260      	movs	r2, #96	; 0x60
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x32c>
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00c      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8a8 	bl	8002c88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x35c>
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fee9 	bl	8003938 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d012      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x38c>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fedb 	bl	800394c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d043      	beq.n	8002c32 <HAL_ADC_IRQHandler+0x41e>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03e      	beq.n	8002c32 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	e021      	b.n	8002c06 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <HAL_ADC_IRQHandler+0x464>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x3c8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <HAL_ADC_IRQHandler+0x468>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_IRQHandler+0x3cc>
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_ADC_IRQHandler+0x46c>)
 8002bde:	e000      	b.n	8002be2 <HAL_ADC_IRQHandler+0x3ce>
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <HAL_ADC_IRQHandler+0x470>)
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fa42 	bl	800206c <LL_ADC_GetMultiDMATransfer>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	e008      	b.n	8002c06 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002c02:	2301      	movs	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10e      	bne.n	8002c2a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f043 0202 	orr.w	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f839 	bl	8002c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d018      	beq.n	8002c6e <HAL_ADC_IRQHandler+0x45a>
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f043 0208 	orr.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fe5b 	bl	8003924 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c6e:	bf00      	nop
 8002c70:	3728      	adds	r7, #40	; 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40022100 	.word	0x40022100
 8002c80:	40022300 	.word	0x40022300
 8002c84:	58026300 	.word	0x58026300

08002c88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b099      	sub	sp, #100	; 0x64
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a99      	ldr	r2, [pc, #612]	; (8002f30 <HAL_ADC_ConfigChannel+0x280>)
 8002cca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x2a>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e2e6      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x5f8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fa92 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 82cb 	bne.w	800328a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d108      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x62>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	e00f      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x82>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	69d1      	ldr	r1, [r2, #28]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f7ff f8de 	bl	8001f0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fa5a 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fa7c 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 8002d68:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 80b3 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 80af 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f7ff f913 	bl	8001fb2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d8c:	4b69      	ldr	r3, [pc, #420]	; (8002f34 <HAL_ADC_ConfigChannel+0x284>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d98:	d10b      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x102>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	e01d      	b.n	8002dee <HAL_ADC_ConfigChannel+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x128>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	e00a      	b.n	8002dee <HAL_ADC_ConfigChannel+0x13e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d027      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6919      	ldr	r1, [r3, #16]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e06:	f7ff f81b 	bl	8001e40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6919      	ldr	r1, [r3, #16]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	7e5b      	ldrb	r3, [r3, #25]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x170>
 8002e1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x172>
 8002e20:	2300      	movs	r3, #0
 8002e22:	461a      	mov	r2, r3
 8002e24:	f7ff f845 	bl	8001eb2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	7e1b      	ldrb	r3, [r3, #24]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d102      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x18e>
 8002e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x190>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	461a      	mov	r2, r3
 8002e42:	f7ff f81d 	bl	8001e80 <LL_ADC_SetDataRightShift>
 8002e46:	e047      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	069b      	lsls	r3, r3, #26
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d107      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e8e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eb2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f949 	bl	8002174 <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 81d9 	bne.w	800329c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7ff f886 	bl	8002008 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_ADC_ConfigChannel+0x280>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	f040 8101 	bne.w	800310a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x288>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e016      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x2ae>
 8002f30:	47ff0000 	.word	0x47ff0000
 8002f34:	5c001000 	.word	0x5c001000
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2b09      	cmp	r3, #9
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d064      	beq.n	800302c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x2ce>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	3301      	adds	r3, #1
 8002f76:	069b      	lsls	r3, r3, #26
 8002f78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7c:	e00e      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x2ec>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x30c>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	e010      	b.n	8002fde <HAL_ADC_ConfigChannel+0x32e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x354>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	e011      	b.n	8003028 <HAL_ADC_ConfigChannel+0x378>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003028:	430b      	orrs	r3, r1
 800302a:	e069      	b.n	8003100 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x398>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003046:	e00e      	b.n	8003066 <HAL_ADC_ConfigChannel+0x3b6>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	61fb      	str	r3, [r7, #28]
  return result;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x3d6>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	e010      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x3f8>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	617b      	str	r3, [r7, #20]
  return result;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x424>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	3b1e      	subs	r3, #30
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d2:	e014      	b.n	80030fe <HAL_ADC_ConfigChannel+0x44e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	60fb      	str	r3, [r7, #12]
  return result;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	3b1e      	subs	r3, #30
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fe:	430b      	orrs	r3, r1
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	4619      	mov	r1, r3
 8003106:	f7fe ff54 	bl	8001fb2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f280 80c4 	bge.w	800329c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a65      	ldr	r2, [pc, #404]	; (80032b0 <HAL_ADC_ConfigChannel+0x600>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x478>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a64      	ldr	r2, [pc, #400]	; (80032b4 <HAL_ADC_ConfigChannel+0x604>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x47c>
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_ADC_ConfigChannel+0x608>)
 800312a:	e000      	b.n	800312e <HAL_ADC_ConfigChannel+0x47e>
 800312c:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_ADC_ConfigChannel+0x60c>)
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fe78 	bl	8001e24 <LL_ADC_GetCommonPathInternalCh>
 8003134:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_ADC_ConfigChannel+0x600>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_ADC_ConfigChannel+0x49a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5b      	ldr	r2, [pc, #364]	; (80032b4 <HAL_ADC_ConfigChannel+0x604>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10e      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x4b8>
 800314a:	4859      	ldr	r0, [pc, #356]	; (80032b0 <HAL_ADC_ConfigChannel+0x600>)
 800314c:	f7ff f812 	bl	8002174 <LL_ADC_IsEnabled>
 8003150:	4604      	mov	r4, r0
 8003152:	4858      	ldr	r0, [pc, #352]	; (80032b4 <HAL_ADC_ConfigChannel+0x604>)
 8003154:	f7ff f80e 	bl	8002174 <LL_ADC_IsEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	4323      	orrs	r3, r4
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e008      	b.n	800317a <HAL_ADC_ConfigChannel+0x4ca>
 8003168:	4855      	ldr	r0, [pc, #340]	; (80032c0 <HAL_ADC_ConfigChannel+0x610>)
 800316a:	f7ff f803 	bl	8002174 <LL_ADC_IsEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d07b      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_ADC_ConfigChannel+0x614>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d12e      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x536>
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d129      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <HAL_ADC_ConfigChannel+0x610>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d17f      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a43      	ldr	r2, [pc, #268]	; (80032b0 <HAL_ADC_ConfigChannel+0x600>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x500>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <HAL_ADC_ConfigChannel+0x604>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x504>
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <HAL_ADC_ConfigChannel+0x608>)
 80031b2:	e000      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x506>
 80031b4:	4a41      	ldr	r2, [pc, #260]	; (80032bc <HAL_ADC_ConfigChannel+0x60c>)
 80031b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe fe1d 	bl	8001dfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80031c4:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <HAL_ADC_ConfigChannel+0x618>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	4a40      	ldr	r2, [pc, #256]	; (80032cc <HAL_ADC_ConfigChannel+0x61c>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031d6:	e002      	b.n	80031de <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e4:	e05a      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a39      	ldr	r2, [pc, #228]	; (80032d0 <HAL_ADC_ConfigChannel+0x620>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d11e      	bne.n	800322e <HAL_ADC_ConfigChannel+0x57e>
 80031f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <HAL_ADC_ConfigChannel+0x610>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d14b      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <HAL_ADC_ConfigChannel+0x600>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x568>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <HAL_ADC_ConfigChannel+0x604>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x56c>
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_ADC_ConfigChannel+0x608>)
 800321a:	e000      	b.n	800321e <HAL_ADC_ConfigChannel+0x56e>
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <HAL_ADC_ConfigChannel+0x60c>)
 800321e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7fe fde9 	bl	8001dfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800322c:	e036      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_ADC_ConfigChannel+0x624>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d131      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12c      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_ADC_ConfigChannel+0x610>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d127      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_ADC_ConfigChannel+0x600>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x5b0>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_ADC_ConfigChannel+0x604>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x5b4>
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_ADC_ConfigChannel+0x608>)
 8003262:	e000      	b.n	8003266 <HAL_ADC_ConfigChannel+0x5b6>
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_ADC_ConfigChannel+0x60c>)
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7fe fdc5 	bl	8001dfe <LL_ADC_SetCommonPathInternalCh>
 8003274:	e012      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003288:	e008      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3764      	adds	r7, #100	; 0x64
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd90      	pop	{r4, r7, pc}
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40022100 	.word	0x40022100
 80032b8:	40022300 	.word	0x40022300
 80032bc:	58026300 	.word	0x58026300
 80032c0:	58026000 	.word	0x58026000
 80032c4:	cb840000 	.word	0xcb840000
 80032c8:	24000000 	.word	0x24000000
 80032cc:	053e2d63 	.word	0x053e2d63
 80032d0:	c7520000 	.word	0xc7520000
 80032d4:	cfb80000 	.word	0xcfb80000

080032d8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe ff8e 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 80032f4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe ffb0 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 8003300:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8090 	beq.w	8003430 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d02a      	beq.n	8003374 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7d5b      	ldrb	r3, [r3, #21]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d126      	bne.n	8003374 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7d1b      	ldrb	r3, [r3, #20]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d122      	bne.n	8003374 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003332:	e014      	b.n	800335e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4a41      	ldr	r2, [pc, #260]	; (800343c <ADC_ConversionStop+0x164>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d90d      	bls.n	8003358 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0210 	orr.w	r2, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e06c      	b.n	8003432 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d1e3      	bne.n	8003334 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2240      	movs	r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d014      	beq.n	80033a4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe ff46 	bl	8002210 <LL_ADC_REG_IsConversionOngoing>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe ff03 	bl	800219a <LL_ADC_IsDisableOngoing>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe ff22 	bl	80021e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d014      	beq.n	80033d4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe ff56 	bl	8002260 <LL_ADC_INJ_IsConversionOngoing>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00c      	beq.n	80033d4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe feeb 	bl	800219a <LL_ADC_IsDisableOngoing>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe ff32 	bl	8002238 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d004      	beq.n	80033e4 <ADC_ConversionStop+0x10c>
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d105      	bne.n	80033ea <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80033de:	230c      	movs	r3, #12
 80033e0:	617b      	str	r3, [r7, #20]
        break;
 80033e2:	e005      	b.n	80033f0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80033e4:	2308      	movs	r3, #8
 80033e6:	617b      	str	r3, [r7, #20]
        break;
 80033e8:	e002      	b.n	80033f0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80033ea:	2304      	movs	r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
        break;
 80033ee:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fca2 	bl	8001d38 <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033f6:	e014      	b.n	8003422 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80033f8:	f7fe fc9e 	bl	8001d38 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b05      	cmp	r3, #5
 8003404:	d90d      	bls.n	8003422 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f043 0210 	orr.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e3      	bne.n	80033f8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	000cdbff 	.word	0x000cdbff

08003440 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fe91 	bl	8002174 <LL_ADC_IsEnabled>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d167      	bne.n	8003528 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	4b35      	ldr	r3, [pc, #212]	; (8003534 <ADC_Enable+0xf4>)
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e053      	b.n	800352a <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fe4c 	bl	8002124 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800348c:	f7fe fc54 	bl	8001d38 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a28      	ldr	r2, [pc, #160]	; (8003538 <ADC_Enable+0xf8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <ADC_Enable+0x66>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <ADC_Enable+0xfc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <ADC_Enable+0x6a>
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <ADC_Enable+0x100>)
 80034a8:	e000      	b.n	80034ac <ADC_Enable+0x6c>
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <ADC_Enable+0x104>)
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fdcf 	bl	8002050 <LL_ADC_GetMultimode>
 80034b2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a20      	ldr	r2, [pc, #128]	; (800353c <ADC_Enable+0xfc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d002      	beq.n	80034c4 <ADC_Enable+0x84>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e000      	b.n	80034c6 <ADC_Enable+0x86>
 80034c4:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <ADC_Enable+0xf8>)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d025      	beq.n	800351a <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d129      	bne.n	8003528 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d4:	e021      	b.n	800351a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fe4a 	bl	8002174 <LL_ADC_IsEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fe1a 	bl	8002124 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034f0:	f7fe fc22 	bl	8001d38 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d90d      	bls.n	800351a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d1d6      	bne.n	80034d6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	8000003f 	.word	0x8000003f
 8003538:	40022000 	.word	0x40022000
 800353c:	40022100 	.word	0x40022100
 8003540:	40022300 	.word	0x40022300
 8003544:	58026300 	.word	0x58026300

08003548 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe20 	bl	800219a <LL_ADC_IsDisableOngoing>
 800355a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe fe07 	bl	8002174 <LL_ADC_IsEnabled>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d040      	beq.n	80035ee <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d13d      	bne.n	80035ee <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030d 	and.w	r3, r3, #13
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10c      	bne.n	800359a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fde1 	bl	800214c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2203      	movs	r2, #3
 8003590:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003592:	f7fe fbd1 	bl	8001d38 <HAL_GetTick>
 8003596:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003598:	e022      	b.n	80035e0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0210 	orr.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01c      	b.n	80035f0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035b6:	f7fe fbbf 	bl	8001d38 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d90d      	bls.n	80035e0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e3      	bne.n	80035b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d14b      	bne.n	80036aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d021      	beq.n	8003670 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fc59 	bl	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d032      	beq.n	80036a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d12b      	bne.n	80036a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11f      	bne.n	80036a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
 800366e:	e018      	b.n	80036a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d111      	bne.n	80036a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7fd fad8 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036a8:	e00e      	b.n	80036c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff faf0 	bl	8002c9c <HAL_ADC_ErrorCallback>
}
 80036bc:	e004      	b.n	80036c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7fd fa86 	bl	8000bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fac2 	bl	8002c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a70      	ldr	r2, [pc, #448]	; (80038f0 <ADC_ConfigureBoostMode+0x1d0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <ADC_ConfigureBoostMode+0x1c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6f      	ldr	r2, [pc, #444]	; (80038f4 <ADC_ConfigureBoostMode+0x1d4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <ADC_ConfigureBoostMode+0x30>
 800373c:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <ADC_ConfigureBoostMode+0x1d8>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e008      	b.n	8003762 <ADC_ConfigureBoostMode+0x42>
 8003750:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <ADC_ConfigureBoostMode+0x1dc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01a      	beq.n	800379c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003766:	f004 f9d3 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 800376a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003774:	d006      	beq.n	8003784 <ADC_ConfigureBoostMode+0x64>
 8003776:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800377a:	d00b      	beq.n	8003794 <ADC_ConfigureBoostMode+0x74>
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d000      	beq.n	8003784 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003782:	e05d      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	60fb      	str	r3, [r7, #12]
        break;
 8003792:	e055      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e051      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800379c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037a0:	f005 f942 	bl	8008a28 <HAL_RCCEx_GetPeriphCLKFreq>
 80037a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037ae:	d02a      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037b4:	d813      	bhi.n	80037de <ADC_ConfigureBoostMode+0xbe>
 80037b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037ba:	d024      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037c0:	d806      	bhi.n	80037d0 <ADC_ConfigureBoostMode+0xb0>
 80037c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c6:	d01e      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037cc:	d01b      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80037ce:	e037      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80037d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d4:	d017      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80037da:	d014      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
        break;
 80037dc:	e030      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80037de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80037e2:	d021      	beq.n	8003828 <ADC_ConfigureBoostMode+0x108>
 80037e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80037e8:	d806      	bhi.n	80037f8 <ADC_ConfigureBoostMode+0xd8>
 80037ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80037ee:	d013      	beq.n	8003818 <ADC_ConfigureBoostMode+0xf8>
 80037f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f4:	d014      	beq.n	8003820 <ADC_ConfigureBoostMode+0x100>
        break;
 80037f6:	e023      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80037f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80037fc:	d018      	beq.n	8003830 <ADC_ConfigureBoostMode+0x110>
 80037fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003802:	d019      	beq.n	8003838 <ADC_ConfigureBoostMode+0x118>
        break;
 8003804:	e01c      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	0c9b      	lsrs	r3, r3, #18
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	60fb      	str	r3, [r7, #12]
        break;
 8003816:	e013      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	60fb      	str	r3, [r7, #12]
        break;
 800381e:	e00f      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	60fb      	str	r3, [r7, #12]
        break;
 8003826:	e00b      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	60fb      	str	r3, [r7, #12]
        break;
 800382e:	e007      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	09db      	lsrs	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
        break;
 8003836:	e003      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	60fb      	str	r3, [r7, #12]
        break;
 800383e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003840:	f7fe faa8 	bl	8001d94 <HAL_GetREVID>
 8003844:	4602      	mov	r2, r0
 8003846:	f241 0303 	movw	r3, #4099	; 0x1003
 800384a:	429a      	cmp	r2, r3
 800384c:	d815      	bhi.n	800387a <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <ADC_ConfigureBoostMode+0x1e0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d908      	bls.n	8003868 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003864:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003866:	e03e      	b.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	e035      	b.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a20      	ldr	r2, [pc, #128]	; (8003904 <ADC_ConfigureBoostMode+0x1e4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d808      	bhi.n	800389a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	e025      	b.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <ADC_ConfigureBoostMode+0x1e8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d80a      	bhi.n	80038b8 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	609a      	str	r2, [r3, #8]
}
 80038b6:	e016      	b.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <ADC_ConfigureBoostMode+0x1ec>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d80a      	bhi.n	80038d6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	609a      	str	r2, [r3, #8]
}
 80038d4:	e007      	b.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80038e4:	609a      	str	r2, [r3, #8]
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40022100 	.word	0x40022100
 80038f8:	40022300 	.word	0x40022300
 80038fc:	58026300 	.word	0x58026300
 8003900:	01312d00 	.word	0x01312d00
 8003904:	005f5e10 	.word	0x005f5e10
 8003908:	00bebc20 	.word	0x00bebc20
 800390c:	017d7840 	.word	0x017d7840

08003910 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <__NVIC_SetPriorityGrouping>:
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a2:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <__NVIC_SetPriorityGrouping+0x40>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	60d3      	str	r3, [r2, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00
 80039b8:	05fa0000 	.word	0x05fa0000

080039bc <__NVIC_GetPriorityGrouping>:
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <__NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_EnableIRQ>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	db0b      	blt.n	8003a02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	4907      	ldr	r1, [pc, #28]	; (8003a10 <__NVIC_EnableIRQ+0x38>)
 80039f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2001      	movs	r0, #1
 80039fa:	fa00 f202 	lsl.w	r2, r0, r2
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e100 	.word	0xe000e100

08003a14 <__NVIC_SetPriority>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	; (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	; (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EncodePriority>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	; 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	bf28      	it	cs
 8003a86:	2304      	movcs	r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d902      	bls.n	8003a98 <NVIC_EncodePriority+0x30>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3b03      	subs	r3, #3
 8003a96:	e000      	b.n	8003a9a <NVIC_EncodePriority+0x32>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	401a      	ands	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43d9      	mvns	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	4313      	orrs	r3, r2
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff4c 	bl	8003974 <__NVIC_SetPriorityGrouping>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003af2:	f7ff ff63 	bl	80039bc <__NVIC_GetPriorityGrouping>
 8003af6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	6978      	ldr	r0, [r7, #20]
 8003afe:	f7ff ffb3 	bl	8003a68 <NVIC_EncodePriority>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff82 	bl	8003a14 <__NVIC_SetPriority>
}
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ff56 	bl	80039d8 <__NVIC_EnableIRQ>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003b38:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_MPU_Disable+0x24>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <HAL_MPU_Disable+0x24>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_MPU_Disable+0x28>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00
 8003b5c:	e000ed90 	.word	0xe000ed90

08003b60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_MPU_Enable+0x34>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_MPU_Enable+0x38>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <HAL_MPU_Enable+0x38>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003b7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b82:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed90 	.word	0xe000ed90
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	785a      	ldrb	r2, [r3, #1]
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_MPU_ConfigRegion+0x84>)
 8003baa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d029      	beq.n	8003c08 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003bb4:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <HAL_MPU_ConfigRegion+0x84>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7b1b      	ldrb	r3, [r3, #12]
 8003bc0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	7adb      	ldrb	r3, [r3, #11]
 8003bc6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7a9b      	ldrb	r3, [r3, #10]
 8003bce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003bd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7b5b      	ldrb	r3, [r3, #13]
 8003bd6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003bd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7b9b      	ldrb	r3, [r3, #14]
 8003bde:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003be0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7bdb      	ldrb	r3, [r3, #15]
 8003be6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003be8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	7a5b      	ldrb	r3, [r3, #9]
 8003bee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003bf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7a1b      	ldrb	r3, [r3, #8]
 8003bf6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003bf8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c02:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c04:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003c06:	e005      	b.n	8003c14 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_MPU_ConfigRegion+0x84>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_MPU_ConfigRegion+0x84>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed90 	.word	0xe000ed90

08003c24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7fe f884 	bl	8001d38 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e316      	b.n	800426a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a66      	ldr	r2, [pc, #408]	; (8003ddc <HAL_DMA_Init+0x1b8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d04a      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a65      	ldr	r2, [pc, #404]	; (8003de0 <HAL_DMA_Init+0x1bc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d045      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a63      	ldr	r2, [pc, #396]	; (8003de4 <HAL_DMA_Init+0x1c0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d040      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a62      	ldr	r2, [pc, #392]	; (8003de8 <HAL_DMA_Init+0x1c4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03b      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a60      	ldr	r2, [pc, #384]	; (8003dec <HAL_DMA_Init+0x1c8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d036      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5f      	ldr	r2, [pc, #380]	; (8003df0 <HAL_DMA_Init+0x1cc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d031      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5d      	ldr	r2, [pc, #372]	; (8003df4 <HAL_DMA_Init+0x1d0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_DMA_Init+0x1d4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d027      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a5a      	ldr	r2, [pc, #360]	; (8003dfc <HAL_DMA_Init+0x1d8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a59      	ldr	r2, [pc, #356]	; (8003e00 <HAL_DMA_Init+0x1dc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_DMA_Init+0x1e0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <HAL_DMA_Init+0x1e4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a54      	ldr	r2, [pc, #336]	; (8003e0c <HAL_DMA_Init+0x1e8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a53      	ldr	r2, [pc, #332]	; (8003e10 <HAL_DMA_Init+0x1ec>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a51      	ldr	r2, [pc, #324]	; (8003e14 <HAL_DMA_Init+0x1f0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_Init+0xb8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a50      	ldr	r2, [pc, #320]	; (8003e18 <HAL_DMA_Init+0x1f4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d101      	bne.n	8003ce0 <HAL_DMA_Init+0xbc>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_DMA_Init+0xbe>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 813b 	beq.w	8003f5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a37      	ldr	r2, [pc, #220]	; (8003ddc <HAL_DMA_Init+0x1b8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d04a      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a36      	ldr	r2, [pc, #216]	; (8003de0 <HAL_DMA_Init+0x1bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d045      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a34      	ldr	r2, [pc, #208]	; (8003de4 <HAL_DMA_Init+0x1c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d040      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <HAL_DMA_Init+0x1c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d03b      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_DMA_Init+0x1c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d036      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <HAL_DMA_Init+0x1cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2e      	ldr	r2, [pc, #184]	; (8003df4 <HAL_DMA_Init+0x1d0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02c      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <HAL_DMA_Init+0x1d4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_DMA_Init+0x1d8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <HAL_DMA_Init+0x1dc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_DMA_Init+0x1e0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_DMA_Init+0x1e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_DMA_Init+0x1e8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_DMA_Init+0x1ec>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_DMA_Init+0x1f0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_DMA_Init+0x174>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_DMA_Init+0x1f4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <HAL_DMA_Init+0x186>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e007      	b.n	8003dba <HAL_DMA_Init+0x196>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dba:	e02f      	b.n	8003e1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dbc:	f7fd ffbc 	bl	8001d38 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d928      	bls.n	8003e1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e246      	b.n	800426a <HAL_DMA_Init+0x646>
 8003ddc:	40020010 	.word	0x40020010
 8003de0:	40020028 	.word	0x40020028
 8003de4:	40020040 	.word	0x40020040
 8003de8:	40020058 	.word	0x40020058
 8003dec:	40020070 	.word	0x40020070
 8003df0:	40020088 	.word	0x40020088
 8003df4:	400200a0 	.word	0x400200a0
 8003df8:	400200b8 	.word	0x400200b8
 8003dfc:	40020410 	.word	0x40020410
 8003e00:	40020428 	.word	0x40020428
 8003e04:	40020440 	.word	0x40020440
 8003e08:	40020458 	.word	0x40020458
 8003e0c:	40020470 	.word	0x40020470
 8003e10:	40020488 	.word	0x40020488
 8003e14:	400204a0 	.word	0x400204a0
 8003e18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1c8      	bne.n	8003dbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4b83      	ldr	r3, [pc, #524]	; (8004044 <HAL_DMA_Init+0x420>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d107      	bne.n	8003e80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003e80:	4b71      	ldr	r3, [pc, #452]	; (8004048 <HAL_DMA_Init+0x424>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b71      	ldr	r3, [pc, #452]	; (800404c <HAL_DMA_Init+0x428>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8c:	d328      	bcc.n	8003ee0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b28      	cmp	r3, #40	; 0x28
 8003e94:	d903      	bls.n	8003e9e <HAL_DMA_Init+0x27a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e9c:	d917      	bls.n	8003ece <HAL_DMA_Init+0x2aa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ea4:	d903      	bls.n	8003eae <HAL_DMA_Init+0x28a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b42      	cmp	r3, #66	; 0x42
 8003eac:	d90f      	bls.n	8003ece <HAL_DMA_Init+0x2aa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b46      	cmp	r3, #70	; 0x46
 8003eb4:	d903      	bls.n	8003ebe <HAL_DMA_Init+0x29a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b48      	cmp	r3, #72	; 0x48
 8003ebc:	d907      	bls.n	8003ece <HAL_DMA_Init+0x2aa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b4e      	cmp	r3, #78	; 0x4e
 8003ec4:	d905      	bls.n	8003ed2 <HAL_DMA_Init+0x2ae>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b52      	cmp	r3, #82	; 0x52
 8003ecc:	d801      	bhi.n	8003ed2 <HAL_DMA_Init+0x2ae>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_DMA_Init+0x2b0>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d117      	bne.n	8003f3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f002 fb31 	bl	8006584 <DMA_CheckFifoParam>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e197      	b.n	800426a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f002 fa6c 	bl	8006420 <DMA_CalcBaseAndBitshift>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	223f      	movs	r2, #63	; 0x3f
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	e0cd      	b.n	80040fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3b      	ldr	r2, [pc, #236]	; (8004050 <HAL_DMA_Init+0x42c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <HAL_DMA_Init+0x430>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_DMA_Init+0x434>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a36      	ldr	r2, [pc, #216]	; (800405c <HAL_DMA_Init+0x438>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a35      	ldr	r2, [pc, #212]	; (8004060 <HAL_DMA_Init+0x43c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_DMA_Init+0x440>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a32      	ldr	r2, [pc, #200]	; (8004068 <HAL_DMA_Init+0x444>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_DMA_Init+0x38a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a30      	ldr	r2, [pc, #192]	; (800406c <HAL_DMA_Init+0x448>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x38e>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMA_Init+0x390>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8097 	beq.w	80040e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a24      	ldr	r2, [pc, #144]	; (8004050 <HAL_DMA_Init+0x42c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d021      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_DMA_Init+0x430>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01c      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a21      	ldr	r2, [pc, #132]	; (8004058 <HAL_DMA_Init+0x434>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d017      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <HAL_DMA_Init+0x438>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d012      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <HAL_DMA_Init+0x43c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00d      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <HAL_DMA_Init+0x440>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d008      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_DMA_Init+0x444>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <HAL_DMA_Init+0x3e4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <HAL_DMA_Init+0x448>)
 8004006:	4293      	cmp	r3, r2
 8004008:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_DMA_Init+0x44c>)
 8004026:	4013      	ands	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d020      	beq.n	8004074 <HAL_DMA_Init+0x450>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d102      	bne.n	8004040 <HAL_DMA_Init+0x41c>
 800403a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800403e:	e01a      	b.n	8004076 <HAL_DMA_Init+0x452>
 8004040:	2300      	movs	r3, #0
 8004042:	e018      	b.n	8004076 <HAL_DMA_Init+0x452>
 8004044:	fe10803f 	.word	0xfe10803f
 8004048:	5c001000 	.word	0x5c001000
 800404c:	ffff0000 	.word	0xffff0000
 8004050:	58025408 	.word	0x58025408
 8004054:	5802541c 	.word	0x5802541c
 8004058:	58025430 	.word	0x58025430
 800405c:	58025444 	.word	0x58025444
 8004060:	58025458 	.word	0x58025458
 8004064:	5802546c 	.word	0x5802546c
 8004068:	58025480 	.word	0x58025480
 800406c:	58025494 	.word	0x58025494
 8004070:	fffe000f 	.word	0xfffe000f
 8004074:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68d2      	ldr	r2, [r2, #12]
 800407a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800407c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004084:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800408c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800409c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b6e      	ldr	r3, [pc, #440]	; (8004274 <HAL_DMA_Init+0x650>)
 80040bc:	4413      	add	r3, r2
 80040be:	4a6e      	ldr	r2, [pc, #440]	; (8004278 <HAL_DMA_Init+0x654>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f002 f9a7 	bl	8006420 <DMA_CalcBaseAndBitshift>
 80040d2:	4603      	mov	r3, r0
 80040d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2201      	movs	r2, #1
 80040e0:	409a      	lsls	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	e008      	b.n	80040fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0b7      	b.n	800426a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a5f      	ldr	r2, [pc, #380]	; (800427c <HAL_DMA_Init+0x658>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d072      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_DMA_Init+0x65c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d06d      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5c      	ldr	r2, [pc, #368]	; (8004284 <HAL_DMA_Init+0x660>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d068      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a5a      	ldr	r2, [pc, #360]	; (8004288 <HAL_DMA_Init+0x664>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d063      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a59      	ldr	r2, [pc, #356]	; (800428c <HAL_DMA_Init+0x668>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d05e      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a57      	ldr	r2, [pc, #348]	; (8004290 <HAL_DMA_Init+0x66c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d059      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a56      	ldr	r2, [pc, #344]	; (8004294 <HAL_DMA_Init+0x670>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d054      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a54      	ldr	r2, [pc, #336]	; (8004298 <HAL_DMA_Init+0x674>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d04f      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a53      	ldr	r2, [pc, #332]	; (800429c <HAL_DMA_Init+0x678>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d04a      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a51      	ldr	r2, [pc, #324]	; (80042a0 <HAL_DMA_Init+0x67c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d045      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a50      	ldr	r2, [pc, #320]	; (80042a4 <HAL_DMA_Init+0x680>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d040      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4e      	ldr	r2, [pc, #312]	; (80042a8 <HAL_DMA_Init+0x684>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d03b      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a4d      	ldr	r2, [pc, #308]	; (80042ac <HAL_DMA_Init+0x688>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d036      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a4b      	ldr	r2, [pc, #300]	; (80042b0 <HAL_DMA_Init+0x68c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d031      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a4a      	ldr	r2, [pc, #296]	; (80042b4 <HAL_DMA_Init+0x690>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d02c      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a48      	ldr	r2, [pc, #288]	; (80042b8 <HAL_DMA_Init+0x694>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d027      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a47      	ldr	r2, [pc, #284]	; (80042bc <HAL_DMA_Init+0x698>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d022      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a45      	ldr	r2, [pc, #276]	; (80042c0 <HAL_DMA_Init+0x69c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a44      	ldr	r2, [pc, #272]	; (80042c4 <HAL_DMA_Init+0x6a0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a42      	ldr	r2, [pc, #264]	; (80042c8 <HAL_DMA_Init+0x6a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a41      	ldr	r2, [pc, #260]	; (80042cc <HAL_DMA_Init+0x6a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a3f      	ldr	r2, [pc, #252]	; (80042d0 <HAL_DMA_Init+0x6ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <HAL_DMA_Init+0x6b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_DMA_Init+0x5c6>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <HAL_DMA_Init+0x6b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_Init+0x5ca>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_DMA_Init+0x5cc>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d032      	beq.n	800425a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f002 fa41 	bl	800667c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b80      	cmp	r3, #128	; 0x80
 8004200:	d102      	bne.n	8004208 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800421c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <HAL_DMA_Init+0x624>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d80c      	bhi.n	8004248 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f002 fabe 	bl	80067b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e008      	b.n	800425a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	a7fdabf8 	.word	0xa7fdabf8
 8004278:	cccccccd 	.word	0xcccccccd
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	58025408 	.word	0x58025408
 80042c0:	5802541c 	.word	0x5802541c
 80042c4:	58025430 	.word	0x58025430
 80042c8:	58025444 	.word	0x58025444
 80042cc:	58025458 	.word	0x58025458
 80042d0:	5802546c 	.word	0x5802546c
 80042d4:	58025480 	.word	0x58025480
 80042d8:	58025494 	.word	0x58025494

080042dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e226      	b.n	8004746 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_DMA_Start_IT+0x2a>
 8004302:	2302      	movs	r3, #2
 8004304:	e21f      	b.n	8004746 <HAL_DMA_Start_IT+0x46a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	f040 820a 	bne.w	8004730 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a68      	ldr	r2, [pc, #416]	; (80044d0 <HAL_DMA_Start_IT+0x1f4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d04a      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a66      	ldr	r2, [pc, #408]	; (80044d4 <HAL_DMA_Start_IT+0x1f8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d045      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a65      	ldr	r2, [pc, #404]	; (80044d8 <HAL_DMA_Start_IT+0x1fc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d040      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a63      	ldr	r2, [pc, #396]	; (80044dc <HAL_DMA_Start_IT+0x200>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a62      	ldr	r2, [pc, #392]	; (80044e0 <HAL_DMA_Start_IT+0x204>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d036      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a60      	ldr	r2, [pc, #384]	; (80044e4 <HAL_DMA_Start_IT+0x208>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5f      	ldr	r2, [pc, #380]	; (80044e8 <HAL_DMA_Start_IT+0x20c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d02c      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5d      	ldr	r2, [pc, #372]	; (80044ec <HAL_DMA_Start_IT+0x210>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d027      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_DMA_Start_IT+0x214>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5a      	ldr	r2, [pc, #360]	; (80044f4 <HAL_DMA_Start_IT+0x218>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a59      	ldr	r2, [pc, #356]	; (80044f8 <HAL_DMA_Start_IT+0x21c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a57      	ldr	r2, [pc, #348]	; (80044fc <HAL_DMA_Start_IT+0x220>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_DMA_Start_IT+0x224>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a54      	ldr	r2, [pc, #336]	; (8004504 <HAL_DMA_Start_IT+0x228>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a53      	ldr	r2, [pc, #332]	; (8004508 <HAL_DMA_Start_IT+0x22c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_Start_IT+0xee>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a51      	ldr	r2, [pc, #324]	; (800450c <HAL_DMA_Start_IT+0x230>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <HAL_DMA_Start_IT+0x100>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e007      	b.n	80043ec <HAL_DMA_Start_IT+0x110>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f001 fe68 	bl	80060c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <HAL_DMA_Start_IT+0x1f4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d04a      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <HAL_DMA_Start_IT+0x1f8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d045      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a31      	ldr	r2, [pc, #196]	; (80044d8 <HAL_DMA_Start_IT+0x1fc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d040      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a30      	ldr	r2, [pc, #192]	; (80044dc <HAL_DMA_Start_IT+0x200>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d03b      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2e      	ldr	r2, [pc, #184]	; (80044e0 <HAL_DMA_Start_IT+0x204>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d036      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2d      	ldr	r2, [pc, #180]	; (80044e4 <HAL_DMA_Start_IT+0x208>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d031      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <HAL_DMA_Start_IT+0x20c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d02c      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_DMA_Start_IT+0x210>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d027      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_DMA_Start_IT+0x214>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d022      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <HAL_DMA_Start_IT+0x218>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d01d      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <HAL_DMA_Start_IT+0x21c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <HAL_DMA_Start_IT+0x220>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_DMA_Start_IT+0x224>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_DMA_Start_IT+0x228>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_DMA_Start_IT+0x22c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_DMA_Start_IT+0x1bc>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_DMA_Start_IT+0x230>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_DMA_Start_IT+0x1c0>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_DMA_Start_IT+0x1c2>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d036      	beq.n	8004510 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 021e 	bic.w	r2, r3, #30
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0216 	orr.w	r2, r2, #22
 80044b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d03e      	beq.n	800453c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0208 	orr.w	r2, r2, #8
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	e035      	b.n	800453c <HAL_DMA_Start_IT+0x260>
 80044d0:	40020010 	.word	0x40020010
 80044d4:	40020028 	.word	0x40020028
 80044d8:	40020040 	.word	0x40020040
 80044dc:	40020058 	.word	0x40020058
 80044e0:	40020070 	.word	0x40020070
 80044e4:	40020088 	.word	0x40020088
 80044e8:	400200a0 	.word	0x400200a0
 80044ec:	400200b8 	.word	0x400200b8
 80044f0:	40020410 	.word	0x40020410
 80044f4:	40020428 	.word	0x40020428
 80044f8:	40020440 	.word	0x40020440
 80044fc:	40020458 	.word	0x40020458
 8004500:	40020470 	.word	0x40020470
 8004504:	40020488 	.word	0x40020488
 8004508:	400204a0 	.word	0x400204a0
 800450c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 020e 	bic.w	r2, r3, #14
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 020a 	orr.w	r2, r2, #10
 8004522:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0204 	orr.w	r2, r2, #4
 800453a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a83      	ldr	r2, [pc, #524]	; (8004750 <HAL_DMA_Start_IT+0x474>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d072      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a82      	ldr	r2, [pc, #520]	; (8004754 <HAL_DMA_Start_IT+0x478>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d06d      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a80      	ldr	r2, [pc, #512]	; (8004758 <HAL_DMA_Start_IT+0x47c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d068      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7f      	ldr	r2, [pc, #508]	; (800475c <HAL_DMA_Start_IT+0x480>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d063      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a7d      	ldr	r2, [pc, #500]	; (8004760 <HAL_DMA_Start_IT+0x484>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d05e      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7c      	ldr	r2, [pc, #496]	; (8004764 <HAL_DMA_Start_IT+0x488>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d059      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7a      	ldr	r2, [pc, #488]	; (8004768 <HAL_DMA_Start_IT+0x48c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d054      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a79      	ldr	r2, [pc, #484]	; (800476c <HAL_DMA_Start_IT+0x490>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04f      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a77      	ldr	r2, [pc, #476]	; (8004770 <HAL_DMA_Start_IT+0x494>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d04a      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a76      	ldr	r2, [pc, #472]	; (8004774 <HAL_DMA_Start_IT+0x498>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d045      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a74      	ldr	r2, [pc, #464]	; (8004778 <HAL_DMA_Start_IT+0x49c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d040      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	; (800477c <HAL_DMA_Start_IT+0x4a0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d03b      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a71      	ldr	r2, [pc, #452]	; (8004780 <HAL_DMA_Start_IT+0x4a4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d036      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a70      	ldr	r2, [pc, #448]	; (8004784 <HAL_DMA_Start_IT+0x4a8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d031      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6e      	ldr	r2, [pc, #440]	; (8004788 <HAL_DMA_Start_IT+0x4ac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02c      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6d      	ldr	r2, [pc, #436]	; (800478c <HAL_DMA_Start_IT+0x4b0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d027      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a6b      	ldr	r2, [pc, #428]	; (8004790 <HAL_DMA_Start_IT+0x4b4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <HAL_DMA_Start_IT+0x4b8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d01d      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a68      	ldr	r2, [pc, #416]	; (8004798 <HAL_DMA_Start_IT+0x4bc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a67      	ldr	r2, [pc, #412]	; (800479c <HAL_DMA_Start_IT+0x4c0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <HAL_DMA_Start_IT+0x4c4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a64      	ldr	r2, [pc, #400]	; (80047a4 <HAL_DMA_Start_IT+0x4c8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a62      	ldr	r2, [pc, #392]	; (80047a8 <HAL_DMA_Start_IT+0x4cc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_DMA_Start_IT+0x350>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a61      	ldr	r2, [pc, #388]	; (80047ac <HAL_DMA_Start_IT+0x4d0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Start_IT+0x354>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_DMA_Start_IT+0x356>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01a      	beq.n	800466c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004652:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a37      	ldr	r2, [pc, #220]	; (8004750 <HAL_DMA_Start_IT+0x474>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d04a      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a36      	ldr	r2, [pc, #216]	; (8004754 <HAL_DMA_Start_IT+0x478>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d045      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a34      	ldr	r2, [pc, #208]	; (8004758 <HAL_DMA_Start_IT+0x47c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d040      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a33      	ldr	r2, [pc, #204]	; (800475c <HAL_DMA_Start_IT+0x480>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d03b      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a31      	ldr	r2, [pc, #196]	; (8004760 <HAL_DMA_Start_IT+0x484>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d036      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a30      	ldr	r2, [pc, #192]	; (8004764 <HAL_DMA_Start_IT+0x488>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d031      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2e      	ldr	r2, [pc, #184]	; (8004768 <HAL_DMA_Start_IT+0x48c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d02c      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_DMA_Start_IT+0x490>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d027      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <HAL_DMA_Start_IT+0x494>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d022      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <HAL_DMA_Start_IT+0x498>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d01d      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a28      	ldr	r2, [pc, #160]	; (8004778 <HAL_DMA_Start_IT+0x49c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d018      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a27      	ldr	r2, [pc, #156]	; (800477c <HAL_DMA_Start_IT+0x4a0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <HAL_DMA_Start_IT+0x4a4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00e      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a24      	ldr	r2, [pc, #144]	; (8004784 <HAL_DMA_Start_IT+0x4a8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d009      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a22      	ldr	r2, [pc, #136]	; (8004788 <HAL_DMA_Start_IT+0x4ac>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_DMA_Start_IT+0x430>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a21      	ldr	r2, [pc, #132]	; (800478c <HAL_DMA_Start_IT+0x4b0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d108      	bne.n	800471e <HAL_DMA_Start_IT+0x442>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e012      	b.n	8004744 <HAL_DMA_Start_IT+0x468>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e009      	b.n	8004744 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40020010 	.word	0x40020010
 8004754:	40020028 	.word	0x40020028
 8004758:	40020040 	.word	0x40020040
 800475c:	40020058 	.word	0x40020058
 8004760:	40020070 	.word	0x40020070
 8004764:	40020088 	.word	0x40020088
 8004768:	400200a0 	.word	0x400200a0
 800476c:	400200b8 	.word	0x400200b8
 8004770:	40020410 	.word	0x40020410
 8004774:	40020428 	.word	0x40020428
 8004778:	40020440 	.word	0x40020440
 800477c:	40020458 	.word	0x40020458
 8004780:	40020470 	.word	0x40020470
 8004784:	40020488 	.word	0x40020488
 8004788:	400204a0 	.word	0x400204a0
 800478c:	400204b8 	.word	0x400204b8
 8004790:	58025408 	.word	0x58025408
 8004794:	5802541c 	.word	0x5802541c
 8004798:	58025430 	.word	0x58025430
 800479c:	58025444 	.word	0x58025444
 80047a0:	58025458 	.word	0x58025458
 80047a4:	5802546c 	.word	0x5802546c
 80047a8:	58025480 	.word	0x58025480
 80047ac:	58025494 	.word	0x58025494

080047b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fd fabe 	bl	8001d38 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e2dc      	b.n	8004d82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d008      	beq.n	80047e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e2cd      	b.n	8004d82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a76      	ldr	r2, [pc, #472]	; (80049c4 <HAL_DMA_Abort+0x214>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d04a      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a74      	ldr	r2, [pc, #464]	; (80049c8 <HAL_DMA_Abort+0x218>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d045      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a73      	ldr	r2, [pc, #460]	; (80049cc <HAL_DMA_Abort+0x21c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d040      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a71      	ldr	r2, [pc, #452]	; (80049d0 <HAL_DMA_Abort+0x220>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d03b      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a70      	ldr	r2, [pc, #448]	; (80049d4 <HAL_DMA_Abort+0x224>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d036      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_DMA_Abort+0x228>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a6d      	ldr	r2, [pc, #436]	; (80049dc <HAL_DMA_Abort+0x22c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d02c      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6b      	ldr	r2, [pc, #428]	; (80049e0 <HAL_DMA_Abort+0x230>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d027      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6a      	ldr	r2, [pc, #424]	; (80049e4 <HAL_DMA_Abort+0x234>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_DMA_Abort+0x238>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a67      	ldr	r2, [pc, #412]	; (80049ec <HAL_DMA_Abort+0x23c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_DMA_Abort+0x240>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a64      	ldr	r2, [pc, #400]	; (80049f4 <HAL_DMA_Abort+0x244>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a62      	ldr	r2, [pc, #392]	; (80049f8 <HAL_DMA_Abort+0x248>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a61      	ldr	r2, [pc, #388]	; (80049fc <HAL_DMA_Abort+0x24c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_DMA_Abort+0xd6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5f      	ldr	r2, [pc, #380]	; (8004a00 <HAL_DMA_Abort+0x250>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_DMA_Abort+0xda>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_DMA_Abort+0xdc>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 021e 	bic.w	r2, r2, #30
 800489e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e00a      	b.n	80048ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 020e 	bic.w	r2, r2, #14
 80048c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <HAL_DMA_Abort+0x214>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d072      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3a      	ldr	r2, [pc, #232]	; (80049c8 <HAL_DMA_Abort+0x218>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d06d      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a39      	ldr	r2, [pc, #228]	; (80049cc <HAL_DMA_Abort+0x21c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d068      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_DMA_Abort+0x220>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d063      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <HAL_DMA_Abort+0x224>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d05e      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a34      	ldr	r2, [pc, #208]	; (80049d8 <HAL_DMA_Abort+0x228>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d059      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_DMA_Abort+0x22c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d054      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_DMA_Abort+0x230>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d04f      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <HAL_DMA_Abort+0x234>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <HAL_DMA_Abort+0x238>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_DMA_Abort+0x23c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <HAL_DMA_Abort+0x240>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_DMA_Abort+0x244>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <HAL_DMA_Abort+0x248>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_DMA_Abort+0x24c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <HAL_DMA_Abort+0x250>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <HAL_DMA_Abort+0x254>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <HAL_DMA_Abort+0x258>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <HAL_DMA_Abort+0x25c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <HAL_DMA_Abort+0x260>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <HAL_DMA_Abort+0x264>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_DMA_Abort+0x268>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_DMA_Abort+0x26c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_Abort+0x20e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_DMA_Abort+0x270>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d132      	bne.n	8004a24 <HAL_DMA_Abort+0x274>
 80049be:	2301      	movs	r3, #1
 80049c0:	e031      	b.n	8004a26 <HAL_DMA_Abort+0x276>
 80049c2:	bf00      	nop
 80049c4:	40020010 	.word	0x40020010
 80049c8:	40020028 	.word	0x40020028
 80049cc:	40020040 	.word	0x40020040
 80049d0:	40020058 	.word	0x40020058
 80049d4:	40020070 	.word	0x40020070
 80049d8:	40020088 	.word	0x40020088
 80049dc:	400200a0 	.word	0x400200a0
 80049e0:	400200b8 	.word	0x400200b8
 80049e4:	40020410 	.word	0x40020410
 80049e8:	40020428 	.word	0x40020428
 80049ec:	40020440 	.word	0x40020440
 80049f0:	40020458 	.word	0x40020458
 80049f4:	40020470 	.word	0x40020470
 80049f8:	40020488 	.word	0x40020488
 80049fc:	400204a0 	.word	0x400204a0
 8004a00:	400204b8 	.word	0x400204b8
 8004a04:	58025408 	.word	0x58025408
 8004a08:	5802541c 	.word	0x5802541c
 8004a0c:	58025430 	.word	0x58025430
 8004a10:	58025444 	.word	0x58025444
 8004a14:	58025458 	.word	0x58025458
 8004a18:	5802546c 	.word	0x5802546c
 8004a1c:	58025480 	.word	0x58025480
 8004a20:	58025494 	.word	0x58025494
 8004a24:	2300      	movs	r3, #0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <HAL_DMA_Abort+0x444>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d04a      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	; (8004bf8 <HAL_DMA_Abort+0x448>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d045      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6a      	ldr	r2, [pc, #424]	; (8004bfc <HAL_DMA_Abort+0x44c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d040      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_DMA_Abort+0x450>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d03b      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a67      	ldr	r2, [pc, #412]	; (8004c04 <HAL_DMA_Abort+0x454>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d036      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	; (8004c08 <HAL_DMA_Abort+0x458>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d031      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_DMA_Abort+0x45c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d02c      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a62      	ldr	r2, [pc, #392]	; (8004c10 <HAL_DMA_Abort+0x460>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d027      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a61      	ldr	r2, [pc, #388]	; (8004c14 <HAL_DMA_Abort+0x464>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a5f      	ldr	r2, [pc, #380]	; (8004c18 <HAL_DMA_Abort+0x468>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5e      	ldr	r2, [pc, #376]	; (8004c1c <HAL_DMA_Abort+0x46c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5c      	ldr	r2, [pc, #368]	; (8004c20 <HAL_DMA_Abort+0x470>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_DMA_Abort+0x474>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a59      	ldr	r2, [pc, #356]	; (8004c28 <HAL_DMA_Abort+0x478>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a58      	ldr	r2, [pc, #352]	; (8004c2c <HAL_DMA_Abort+0x47c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_DMA_Abort+0x32a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a56      	ldr	r2, [pc, #344]	; (8004c30 <HAL_DMA_Abort+0x480>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_Abort+0x33c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e007      	b.n	8004afc <HAL_DMA_Abort+0x34c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004afc:	e013      	b.n	8004b26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004afe:	f7fd f91b 	bl	8001d38 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d90c      	bls.n	8004b26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e12d      	b.n	8004d82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e5      	bne.n	8004afe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <HAL_DMA_Abort+0x444>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d04a      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2d      	ldr	r2, [pc, #180]	; (8004bf8 <HAL_DMA_Abort+0x448>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d045      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2c      	ldr	r2, [pc, #176]	; (8004bfc <HAL_DMA_Abort+0x44c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d040      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <HAL_DMA_Abort+0x450>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d03b      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <HAL_DMA_Abort+0x454>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d036      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <HAL_DMA_Abort+0x458>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d031      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_DMA_Abort+0x45c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d02c      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <HAL_DMA_Abort+0x460>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d027      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <HAL_DMA_Abort+0x464>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <HAL_DMA_Abort+0x468>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a20      	ldr	r2, [pc, #128]	; (8004c1c <HAL_DMA_Abort+0x46c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <HAL_DMA_Abort+0x470>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <HAL_DMA_Abort+0x474>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_DMA_Abort+0x478>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1a      	ldr	r2, [pc, #104]	; (8004c2c <HAL_DMA_Abort+0x47c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_Abort+0x422>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_DMA_Abort+0x480>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <HAL_DMA_Abort+0x426>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_DMA_Abort+0x428>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02b      	beq.n	8004c34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	223f      	movs	r2, #63	; 0x3f
 8004bec:	409a      	lsls	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	e02a      	b.n	8004c4a <HAL_DMA_Abort+0x49a>
 8004bf4:	40020010 	.word	0x40020010
 8004bf8:	40020028 	.word	0x40020028
 8004bfc:	40020040 	.word	0x40020040
 8004c00:	40020058 	.word	0x40020058
 8004c04:	40020070 	.word	0x40020070
 8004c08:	40020088 	.word	0x40020088
 8004c0c:	400200a0 	.word	0x400200a0
 8004c10:	400200b8 	.word	0x400200b8
 8004c14:	40020410 	.word	0x40020410
 8004c18:	40020428 	.word	0x40020428
 8004c1c:	40020440 	.word	0x40020440
 8004c20:	40020458 	.word	0x40020458
 8004c24:	40020470 	.word	0x40020470
 8004c28:	40020488 	.word	0x40020488
 8004c2c:	400204a0 	.word	0x400204a0
 8004c30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	2201      	movs	r2, #1
 8004c44:	409a      	lsls	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a4f      	ldr	r2, [pc, #316]	; (8004d8c <HAL_DMA_Abort+0x5dc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a4d      	ldr	r2, [pc, #308]	; (8004d90 <HAL_DMA_Abort+0x5e0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a4c      	ldr	r2, [pc, #304]	; (8004d94 <HAL_DMA_Abort+0x5e4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a4a      	ldr	r2, [pc, #296]	; (8004d98 <HAL_DMA_Abort+0x5e8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a49      	ldr	r2, [pc, #292]	; (8004d9c <HAL_DMA_Abort+0x5ec>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a47      	ldr	r2, [pc, #284]	; (8004da0 <HAL_DMA_Abort+0x5f0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a46      	ldr	r2, [pc, #280]	; (8004da4 <HAL_DMA_Abort+0x5f4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a44      	ldr	r2, [pc, #272]	; (8004da8 <HAL_DMA_Abort+0x5f8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_DMA_Abort+0x5fc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a41      	ldr	r2, [pc, #260]	; (8004db0 <HAL_DMA_Abort+0x600>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a40      	ldr	r2, [pc, #256]	; (8004db4 <HAL_DMA_Abort+0x604>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <HAL_DMA_Abort+0x608>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3d      	ldr	r2, [pc, #244]	; (8004dbc <HAL_DMA_Abort+0x60c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3b      	ldr	r2, [pc, #236]	; (8004dc0 <HAL_DMA_Abort+0x610>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3a      	ldr	r2, [pc, #232]	; (8004dc4 <HAL_DMA_Abort+0x614>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <HAL_DMA_Abort+0x618>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <HAL_DMA_Abort+0x61c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_DMA_Abort+0x620>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <HAL_DMA_Abort+0x624>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <HAL_DMA_Abort+0x628>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <HAL_DMA_Abort+0x62c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <HAL_DMA_Abort+0x630>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_DMA_Abort+0x634>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_DMA_Abort+0x58a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <HAL_DMA_Abort+0x638>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_DMA_Abort+0x58e>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_DMA_Abort+0x590>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
 8004dcc:	58025408 	.word	0x58025408
 8004dd0:	5802541c 	.word	0x5802541c
 8004dd4:	58025430 	.word	0x58025430
 8004dd8:	58025444 	.word	0x58025444
 8004ddc:	58025458 	.word	0x58025458
 8004de0:	5802546c 	.word	0x5802546c
 8004de4:	58025480 	.word	0x58025480
 8004de8:	58025494 	.word	0x58025494

08004dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e205      	b.n	800520a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d004      	beq.n	8004e14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e1fa      	b.n	800520a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a8c      	ldr	r2, [pc, #560]	; (800504c <HAL_DMA_Abort_IT+0x260>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a8b      	ldr	r2, [pc, #556]	; (8005050 <HAL_DMA_Abort_IT+0x264>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a89      	ldr	r2, [pc, #548]	; (8005054 <HAL_DMA_Abort_IT+0x268>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a88      	ldr	r2, [pc, #544]	; (8005058 <HAL_DMA_Abort_IT+0x26c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a86      	ldr	r2, [pc, #536]	; (800505c <HAL_DMA_Abort_IT+0x270>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a85      	ldr	r2, [pc, #532]	; (8005060 <HAL_DMA_Abort_IT+0x274>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a83      	ldr	r2, [pc, #524]	; (8005064 <HAL_DMA_Abort_IT+0x278>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a82      	ldr	r2, [pc, #520]	; (8005068 <HAL_DMA_Abort_IT+0x27c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a80      	ldr	r2, [pc, #512]	; (800506c <HAL_DMA_Abort_IT+0x280>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7f      	ldr	r2, [pc, #508]	; (8005070 <HAL_DMA_Abort_IT+0x284>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a7d      	ldr	r2, [pc, #500]	; (8005074 <HAL_DMA_Abort_IT+0x288>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7c      	ldr	r2, [pc, #496]	; (8005078 <HAL_DMA_Abort_IT+0x28c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a7a      	ldr	r2, [pc, #488]	; (800507c <HAL_DMA_Abort_IT+0x290>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a79      	ldr	r2, [pc, #484]	; (8005080 <HAL_DMA_Abort_IT+0x294>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a77      	ldr	r2, [pc, #476]	; (8005084 <HAL_DMA_Abort_IT+0x298>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_Abort_IT+0xc8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a76      	ldr	r2, [pc, #472]	; (8005088 <HAL_DMA_Abort_IT+0x29c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_DMA_Abort_IT+0xcc>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_DMA_Abort_IT+0xce>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d065      	beq.n	8004f8a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a60      	ldr	r2, [pc, #384]	; (800504c <HAL_DMA_Abort_IT+0x260>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d04a      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a5e      	ldr	r2, [pc, #376]	; (8005050 <HAL_DMA_Abort_IT+0x264>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d045      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a5d      	ldr	r2, [pc, #372]	; (8005054 <HAL_DMA_Abort_IT+0x268>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d040      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a5b      	ldr	r2, [pc, #364]	; (8005058 <HAL_DMA_Abort_IT+0x26c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d03b      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a5a      	ldr	r2, [pc, #360]	; (800505c <HAL_DMA_Abort_IT+0x270>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d036      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_DMA_Abort_IT+0x274>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a57      	ldr	r2, [pc, #348]	; (8005064 <HAL_DMA_Abort_IT+0x278>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d02c      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a55      	ldr	r2, [pc, #340]	; (8005068 <HAL_DMA_Abort_IT+0x27c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d027      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a54      	ldr	r2, [pc, #336]	; (800506c <HAL_DMA_Abort_IT+0x280>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <HAL_DMA_Abort_IT+0x284>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a51      	ldr	r2, [pc, #324]	; (8005074 <HAL_DMA_Abort_IT+0x288>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a4f      	ldr	r2, [pc, #316]	; (8005078 <HAL_DMA_Abort_IT+0x28c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a4e      	ldr	r2, [pc, #312]	; (800507c <HAL_DMA_Abort_IT+0x290>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a4c      	ldr	r2, [pc, #304]	; (8005080 <HAL_DMA_Abort_IT+0x294>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4b      	ldr	r2, [pc, #300]	; (8005084 <HAL_DMA_Abort_IT+0x298>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_DMA_Abort_IT+0x17a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a49      	ldr	r2, [pc, #292]	; (8005088 <HAL_DMA_Abort_IT+0x29c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <HAL_DMA_Abort_IT+0x18c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e147      	b.n	8005208 <HAL_DMA_Abort_IT+0x41c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e13e      	b.n	8005208 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 020e 	bic.w	r2, r2, #14
 8004f98:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_DMA_Abort_IT+0x260>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d04a      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <HAL_DMA_Abort_IT+0x264>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d045      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_DMA_Abort_IT+0x268>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d040      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a26      	ldr	r2, [pc, #152]	; (8005058 <HAL_DMA_Abort_IT+0x26c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d03b      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a25      	ldr	r2, [pc, #148]	; (800505c <HAL_DMA_Abort_IT+0x270>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d036      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <HAL_DMA_Abort_IT+0x274>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d031      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a22      	ldr	r2, [pc, #136]	; (8005064 <HAL_DMA_Abort_IT+0x278>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d02c      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <HAL_DMA_Abort_IT+0x27c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d027      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_DMA_Abort_IT+0x280>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <HAL_DMA_Abort_IT+0x284>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01d      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <HAL_DMA_Abort_IT+0x288>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d018      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <HAL_DMA_Abort_IT+0x28c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_DMA_Abort_IT+0x290>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a17      	ldr	r2, [pc, #92]	; (8005080 <HAL_DMA_Abort_IT+0x294>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_DMA_Abort_IT+0x298>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_DMA_Abort_IT+0x24e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a14      	ldr	r2, [pc, #80]	; (8005088 <HAL_DMA_Abort_IT+0x29c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d128      	bne.n	800508c <HAL_DMA_Abort_IT+0x2a0>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e027      	b.n	800509c <HAL_DMA_Abort_IT+0x2b0>
 800504c:	40020010 	.word	0x40020010
 8005050:	40020028 	.word	0x40020028
 8005054:	40020040 	.word	0x40020040
 8005058:	40020058 	.word	0x40020058
 800505c:	40020070 	.word	0x40020070
 8005060:	40020088 	.word	0x40020088
 8005064:	400200a0 	.word	0x400200a0
 8005068:	400200b8 	.word	0x400200b8
 800506c:	40020410 	.word	0x40020410
 8005070:	40020428 	.word	0x40020428
 8005074:	40020440 	.word	0x40020440
 8005078:	40020458 	.word	0x40020458
 800507c:	40020470 	.word	0x40020470
 8005080:	40020488 	.word	0x40020488
 8005084:	400204a0 	.word	0x400204a0
 8005088:	400204b8 	.word	0x400204b8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5c      	ldr	r2, [pc, #368]	; (8005214 <HAL_DMA_Abort_IT+0x428>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d072      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5b      	ldr	r2, [pc, #364]	; (8005218 <HAL_DMA_Abort_IT+0x42c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d06d      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a59      	ldr	r2, [pc, #356]	; (800521c <HAL_DMA_Abort_IT+0x430>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d068      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a58      	ldr	r2, [pc, #352]	; (8005220 <HAL_DMA_Abort_IT+0x434>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d063      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a56      	ldr	r2, [pc, #344]	; (8005224 <HAL_DMA_Abort_IT+0x438>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d05e      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a55      	ldr	r2, [pc, #340]	; (8005228 <HAL_DMA_Abort_IT+0x43c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d059      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a53      	ldr	r2, [pc, #332]	; (800522c <HAL_DMA_Abort_IT+0x440>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d054      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a52      	ldr	r2, [pc, #328]	; (8005230 <HAL_DMA_Abort_IT+0x444>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04f      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a50      	ldr	r2, [pc, #320]	; (8005234 <HAL_DMA_Abort_IT+0x448>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d04a      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a4f      	ldr	r2, [pc, #316]	; (8005238 <HAL_DMA_Abort_IT+0x44c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d045      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a4d      	ldr	r2, [pc, #308]	; (800523c <HAL_DMA_Abort_IT+0x450>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d040      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a4c      	ldr	r2, [pc, #304]	; (8005240 <HAL_DMA_Abort_IT+0x454>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d03b      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a4a      	ldr	r2, [pc, #296]	; (8005244 <HAL_DMA_Abort_IT+0x458>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d036      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a49      	ldr	r2, [pc, #292]	; (8005248 <HAL_DMA_Abort_IT+0x45c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d031      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a47      	ldr	r2, [pc, #284]	; (800524c <HAL_DMA_Abort_IT+0x460>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02c      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a46      	ldr	r2, [pc, #280]	; (8005250 <HAL_DMA_Abort_IT+0x464>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d027      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a44      	ldr	r2, [pc, #272]	; (8005254 <HAL_DMA_Abort_IT+0x468>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a43      	ldr	r2, [pc, #268]	; (8005258 <HAL_DMA_Abort_IT+0x46c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d01d      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a41      	ldr	r2, [pc, #260]	; (800525c <HAL_DMA_Abort_IT+0x470>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a40      	ldr	r2, [pc, #256]	; (8005260 <HAL_DMA_Abort_IT+0x474>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <HAL_DMA_Abort_IT+0x478>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3d      	ldr	r2, [pc, #244]	; (8005268 <HAL_DMA_Abort_IT+0x47c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3b      	ldr	r2, [pc, #236]	; (800526c <HAL_DMA_Abort_IT+0x480>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_DMA_Abort_IT+0x3a0>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3a      	ldr	r2, [pc, #232]	; (8005270 <HAL_DMA_Abort_IT+0x484>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_DMA_Abort_IT+0x3a4>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <HAL_DMA_Abort_IT+0x3a6>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d028      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2201      	movs	r2, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40020010 	.word	0x40020010
 8005218:	40020028 	.word	0x40020028
 800521c:	40020040 	.word	0x40020040
 8005220:	40020058 	.word	0x40020058
 8005224:	40020070 	.word	0x40020070
 8005228:	40020088 	.word	0x40020088
 800522c:	400200a0 	.word	0x400200a0
 8005230:	400200b8 	.word	0x400200b8
 8005234:	40020410 	.word	0x40020410
 8005238:	40020428 	.word	0x40020428
 800523c:	40020440 	.word	0x40020440
 8005240:	40020458 	.word	0x40020458
 8005244:	40020470 	.word	0x40020470
 8005248:	40020488 	.word	0x40020488
 800524c:	400204a0 	.word	0x400204a0
 8005250:	400204b8 	.word	0x400204b8
 8005254:	58025408 	.word	0x58025408
 8005258:	5802541c 	.word	0x5802541c
 800525c:	58025430 	.word	0x58025430
 8005260:	58025444 	.word	0x58025444
 8005264:	58025458 	.word	0x58025458
 8005268:	5802546c 	.word	0x5802546c
 800526c:	58025480 	.word	0x58025480
 8005270:	58025494 	.word	0x58025494

08005274 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	; 0x28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005280:	4b67      	ldr	r3, [pc, #412]	; (8005420 <HAL_DMA_IRQHandler+0x1ac>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a67      	ldr	r2, [pc, #412]	; (8005424 <HAL_DMA_IRQHandler+0x1b0>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0a9b      	lsrs	r3, r3, #10
 800528c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5f      	ldr	r2, [pc, #380]	; (8005428 <HAL_DMA_IRQHandler+0x1b4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d04a      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_DMA_IRQHandler+0x1b8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d045      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5c      	ldr	r2, [pc, #368]	; (8005430 <HAL_DMA_IRQHandler+0x1bc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d040      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <HAL_DMA_IRQHandler+0x1c0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d03b      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a59      	ldr	r2, [pc, #356]	; (8005438 <HAL_DMA_IRQHandler+0x1c4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d036      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_DMA_IRQHandler+0x1c8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d031      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_DMA_IRQHandler+0x1cc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d02c      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a54      	ldr	r2, [pc, #336]	; (8005444 <HAL_DMA_IRQHandler+0x1d0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d027      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a53      	ldr	r2, [pc, #332]	; (8005448 <HAL_DMA_IRQHandler+0x1d4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a51      	ldr	r2, [pc, #324]	; (800544c <HAL_DMA_IRQHandler+0x1d8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01d      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a50      	ldr	r2, [pc, #320]	; (8005450 <HAL_DMA_IRQHandler+0x1dc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a4e      	ldr	r2, [pc, #312]	; (8005454 <HAL_DMA_IRQHandler+0x1e0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_DMA_IRQHandler+0x1e4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a4b      	ldr	r2, [pc, #300]	; (800545c <HAL_DMA_IRQHandler+0x1e8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_DMA_IRQHandler+0x1ec>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a48      	ldr	r2, [pc, #288]	; (8005464 <HAL_DMA_IRQHandler+0x1f0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_DMA_IRQHandler+0xd6>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_DMA_IRQHandler+0xd8>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 842b 	beq.w	8005ba8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2208      	movs	r2, #8
 800535c:	409a      	lsls	r2, r3
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80a2 	beq.w	80054ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <HAL_DMA_IRQHandler+0x1b4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d04a      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <HAL_DMA_IRQHandler+0x1b8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d045      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2b      	ldr	r2, [pc, #172]	; (8005430 <HAL_DMA_IRQHandler+0x1bc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d040      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_DMA_IRQHandler+0x1c0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d03b      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a28      	ldr	r2, [pc, #160]	; (8005438 <HAL_DMA_IRQHandler+0x1c4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d036      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a27      	ldr	r2, [pc, #156]	; (800543c <HAL_DMA_IRQHandler+0x1c8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d031      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <HAL_DMA_IRQHandler+0x1cc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02c      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a24      	ldr	r2, [pc, #144]	; (8005444 <HAL_DMA_IRQHandler+0x1d0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d027      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a22      	ldr	r2, [pc, #136]	; (8005448 <HAL_DMA_IRQHandler+0x1d4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d022      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a21      	ldr	r2, [pc, #132]	; (800544c <HAL_DMA_IRQHandler+0x1d8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d01d      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <HAL_DMA_IRQHandler+0x1dc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d018      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_DMA_IRQHandler+0x1e0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <HAL_DMA_IRQHandler+0x1e4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_DMA_IRQHandler+0x1e8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d009      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a19      	ldr	r2, [pc, #100]	; (8005460 <HAL_DMA_IRQHandler+0x1ec>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_DMA_IRQHandler+0x1f0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d12f      	bne.n	8005468 <HAL_DMA_IRQHandler+0x1f4>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e02e      	b.n	800547c <HAL_DMA_IRQHandler+0x208>
 800541e:	bf00      	nop
 8005420:	24000000 	.word	0x24000000
 8005424:	1b4e81b5 	.word	0x1b4e81b5
 8005428:	40020010 	.word	0x40020010
 800542c:	40020028 	.word	0x40020028
 8005430:	40020040 	.word	0x40020040
 8005434:	40020058 	.word	0x40020058
 8005438:	40020070 	.word	0x40020070
 800543c:	40020088 	.word	0x40020088
 8005440:	400200a0 	.word	0x400200a0
 8005444:	400200b8 	.word	0x400200b8
 8005448:	40020410 	.word	0x40020410
 800544c:	40020428 	.word	0x40020428
 8005450:	40020440 	.word	0x40020440
 8005454:	40020458 	.word	0x40020458
 8005458:	40020470 	.word	0x40020470
 800545c:	40020488 	.word	0x40020488
 8005460:	400204a0 	.word	0x400204a0
 8005464:	400204b8 	.word	0x400204b8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf14      	ite	ne
 8005476:	2301      	movne	r3, #1
 8005478:	2300      	moveq	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d015      	beq.n	80054ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0204 	bic.w	r2, r2, #4
 800548e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	2208      	movs	r2, #8
 800549a:	409a      	lsls	r2, r3
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d06e      	beq.n	80055a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a69      	ldr	r2, [pc, #420]	; (800566c <HAL_DMA_IRQHandler+0x3f8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d04a      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a67      	ldr	r2, [pc, #412]	; (8005670 <HAL_DMA_IRQHandler+0x3fc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d045      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a66      	ldr	r2, [pc, #408]	; (8005674 <HAL_DMA_IRQHandler+0x400>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d040      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a64      	ldr	r2, [pc, #400]	; (8005678 <HAL_DMA_IRQHandler+0x404>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d03b      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a63      	ldr	r2, [pc, #396]	; (800567c <HAL_DMA_IRQHandler+0x408>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d036      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a61      	ldr	r2, [pc, #388]	; (8005680 <HAL_DMA_IRQHandler+0x40c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d031      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a60      	ldr	r2, [pc, #384]	; (8005684 <HAL_DMA_IRQHandler+0x410>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d02c      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a5e      	ldr	r2, [pc, #376]	; (8005688 <HAL_DMA_IRQHandler+0x414>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d027      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5d      	ldr	r2, [pc, #372]	; (800568c <HAL_DMA_IRQHandler+0x418>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5b      	ldr	r2, [pc, #364]	; (8005690 <HAL_DMA_IRQHandler+0x41c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01d      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a5a      	ldr	r2, [pc, #360]	; (8005694 <HAL_DMA_IRQHandler+0x420>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a58      	ldr	r2, [pc, #352]	; (8005698 <HAL_DMA_IRQHandler+0x424>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a57      	ldr	r2, [pc, #348]	; (800569c <HAL_DMA_IRQHandler+0x428>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a55      	ldr	r2, [pc, #340]	; (80056a0 <HAL_DMA_IRQHandler+0x42c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a54      	ldr	r2, [pc, #336]	; (80056a4 <HAL_DMA_IRQHandler+0x430>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_DMA_IRQHandler+0x434>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10a      	bne.n	8005578 <HAL_DMA_IRQHandler+0x304>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e003      	b.n	8005580 <HAL_DMA_IRQHandler+0x30c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 0202 	orr.w	r2, r3, #2
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2204      	movs	r2, #4
 80055aa:	409a      	lsls	r2, r3
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 808f 	beq.w	80056d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2c      	ldr	r2, [pc, #176]	; (800566c <HAL_DMA_IRQHandler+0x3f8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d04a      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <HAL_DMA_IRQHandler+0x3fc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d045      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a29      	ldr	r2, [pc, #164]	; (8005674 <HAL_DMA_IRQHandler+0x400>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d040      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a27      	ldr	r2, [pc, #156]	; (8005678 <HAL_DMA_IRQHandler+0x404>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d03b      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a26      	ldr	r2, [pc, #152]	; (800567c <HAL_DMA_IRQHandler+0x408>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d036      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a24      	ldr	r2, [pc, #144]	; (8005680 <HAL_DMA_IRQHandler+0x40c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d031      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a23      	ldr	r2, [pc, #140]	; (8005684 <HAL_DMA_IRQHandler+0x410>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d02c      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_DMA_IRQHandler+0x414>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d027      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_DMA_IRQHandler+0x418>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <HAL_DMA_IRQHandler+0x41c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01d      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <HAL_DMA_IRQHandler+0x420>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_DMA_IRQHandler+0x424>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_DMA_IRQHandler+0x428>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_DMA_IRQHandler+0x42c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_DMA_IRQHandler+0x430>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <HAL_DMA_IRQHandler+0x434>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d12a      	bne.n	80056ac <HAL_DMA_IRQHandler+0x438>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e023      	b.n	80056b4 <HAL_DMA_IRQHandler+0x440>
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2204      	movs	r2, #4
 80056c2:	409a      	lsls	r2, r3
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0204 	orr.w	r2, r3, #4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2210      	movs	r2, #16
 80056de:	409a      	lsls	r2, r3
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a6 	beq.w	8005836 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a85      	ldr	r2, [pc, #532]	; (8005904 <HAL_DMA_IRQHandler+0x690>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a83      	ldr	r2, [pc, #524]	; (8005908 <HAL_DMA_IRQHandler+0x694>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a82      	ldr	r2, [pc, #520]	; (800590c <HAL_DMA_IRQHandler+0x698>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a80      	ldr	r2, [pc, #512]	; (8005910 <HAL_DMA_IRQHandler+0x69c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a7f      	ldr	r2, [pc, #508]	; (8005914 <HAL_DMA_IRQHandler+0x6a0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a7d      	ldr	r2, [pc, #500]	; (8005918 <HAL_DMA_IRQHandler+0x6a4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a7c      	ldr	r2, [pc, #496]	; (800591c <HAL_DMA_IRQHandler+0x6a8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a7a      	ldr	r2, [pc, #488]	; (8005920 <HAL_DMA_IRQHandler+0x6ac>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a79      	ldr	r2, [pc, #484]	; (8005924 <HAL_DMA_IRQHandler+0x6b0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a77      	ldr	r2, [pc, #476]	; (8005928 <HAL_DMA_IRQHandler+0x6b4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a76      	ldr	r2, [pc, #472]	; (800592c <HAL_DMA_IRQHandler+0x6b8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a74      	ldr	r2, [pc, #464]	; (8005930 <HAL_DMA_IRQHandler+0x6bc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a73      	ldr	r2, [pc, #460]	; (8005934 <HAL_DMA_IRQHandler+0x6c0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a71      	ldr	r2, [pc, #452]	; (8005938 <HAL_DMA_IRQHandler+0x6c4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a70      	ldr	r2, [pc, #448]	; (800593c <HAL_DMA_IRQHandler+0x6c8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a6e      	ldr	r2, [pc, #440]	; (8005940 <HAL_DMA_IRQHandler+0x6cc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10a      	bne.n	80057a0 <HAL_DMA_IRQHandler+0x52c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	e009      	b.n	80057b4 <HAL_DMA_IRQHandler+0x540>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	2300      	moveq	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03e      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2210      	movs	r2, #16
 80057c2:	409a      	lsls	r2, r3
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d108      	bne.n	80057f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d024      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
 80057f4:	e01f      	b.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01b      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
 8005806:	e016      	b.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0208 	bic.w	r2, r2, #8
 8005824:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2220      	movs	r2, #32
 8005840:	409a      	lsls	r2, r3
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8110 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <HAL_DMA_IRQHandler+0x690>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04a      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <HAL_DMA_IRQHandler+0x694>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d045      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a29      	ldr	r2, [pc, #164]	; (800590c <HAL_DMA_IRQHandler+0x698>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d040      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a28      	ldr	r2, [pc, #160]	; (8005910 <HAL_DMA_IRQHandler+0x69c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d03b      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <HAL_DMA_IRQHandler+0x6a0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d036      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a25      	ldr	r2, [pc, #148]	; (8005918 <HAL_DMA_IRQHandler+0x6a4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d031      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a23      	ldr	r2, [pc, #140]	; (800591c <HAL_DMA_IRQHandler+0x6a8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02c      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_DMA_IRQHandler+0x6ac>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d027      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a20      	ldr	r2, [pc, #128]	; (8005924 <HAL_DMA_IRQHandler+0x6b0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d022      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_DMA_IRQHandler+0x6b4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d01d      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_DMA_IRQHandler+0x6b8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d018      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_DMA_IRQHandler+0x6bc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_DMA_IRQHandler+0x6c0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_DMA_IRQHandler+0x6c4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_DMA_IRQHandler+0x6c8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_DMA_IRQHandler+0x6cc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d12b      	bne.n	8005944 <HAL_DMA_IRQHandler+0x6d0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e02a      	b.n	8005958 <HAL_DMA_IRQHandler+0x6e4>
 8005902:	bf00      	nop
 8005904:	40020010 	.word	0x40020010
 8005908:	40020028 	.word	0x40020028
 800590c:	40020040 	.word	0x40020040
 8005910:	40020058 	.word	0x40020058
 8005914:	40020070 	.word	0x40020070
 8005918:	40020088 	.word	0x40020088
 800591c:	400200a0 	.word	0x400200a0
 8005920:	400200b8 	.word	0x400200b8
 8005924:	40020410 	.word	0x40020410
 8005928:	40020428 	.word	0x40020428
 800592c:	40020440 	.word	0x40020440
 8005930:	40020458 	.word	0x40020458
 8005934:	40020470 	.word	0x40020470
 8005938:	40020488 	.word	0x40020488
 800593c:	400204a0 	.word	0x400204a0
 8005940:	400204b8 	.word	0x400204b8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8087 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2220      	movs	r2, #32
 8005968:	409a      	lsls	r2, r3
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b04      	cmp	r3, #4
 8005978:	d139      	bne.n	80059ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0216 	bic.w	r2, r2, #22
 8005988:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_DMA_IRQHandler+0x736>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0208 	bic.w	r2, r2, #8
 80059b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	223f      	movs	r2, #63	; 0x3f
 80059c4:	409a      	lsls	r2, r3
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 834a 	beq.w	8006078 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
          }
          return;
 80059ec:	e344      	b.n	8006078 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d018      	beq.n	8005a2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d108      	bne.n	8005a1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
 8005a1a:	e027      	b.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d023      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
 8005a2c:	e01e      	b.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10f      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0210 	bic.w	r2, r2, #16
 8005a4a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8306 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8088 	beq.w	8005b94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2204      	movs	r2, #4
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a7a      	ldr	r2, [pc, #488]	; (8005c7c <HAL_DMA_IRQHandler+0xa08>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d04a      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a79      	ldr	r2, [pc, #484]	; (8005c80 <HAL_DMA_IRQHandler+0xa0c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d045      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a77      	ldr	r2, [pc, #476]	; (8005c84 <HAL_DMA_IRQHandler+0xa10>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d040      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a76      	ldr	r2, [pc, #472]	; (8005c88 <HAL_DMA_IRQHandler+0xa14>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d03b      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a74      	ldr	r2, [pc, #464]	; (8005c8c <HAL_DMA_IRQHandler+0xa18>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d036      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a73      	ldr	r2, [pc, #460]	; (8005c90 <HAL_DMA_IRQHandler+0xa1c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d031      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a71      	ldr	r2, [pc, #452]	; (8005c94 <HAL_DMA_IRQHandler+0xa20>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d02c      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a70      	ldr	r2, [pc, #448]	; (8005c98 <HAL_DMA_IRQHandler+0xa24>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d027      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6e      	ldr	r2, [pc, #440]	; (8005c9c <HAL_DMA_IRQHandler+0xa28>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6d      	ldr	r2, [pc, #436]	; (8005ca0 <HAL_DMA_IRQHandler+0xa2c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d01d      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6b      	ldr	r2, [pc, #428]	; (8005ca4 <HAL_DMA_IRQHandler+0xa30>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_DMA_IRQHandler+0xa34>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a68      	ldr	r2, [pc, #416]	; (8005cac <HAL_DMA_IRQHandler+0xa38>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a67      	ldr	r2, [pc, #412]	; (8005cb0 <HAL_DMA_IRQHandler+0xa3c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a65      	ldr	r2, [pc, #404]	; (8005cb4 <HAL_DMA_IRQHandler+0xa40>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a64      	ldr	r2, [pc, #400]	; (8005cb8 <HAL_DMA_IRQHandler+0xa44>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <HAL_DMA_IRQHandler+0x8ca>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e007      	b.n	8005b4e <HAL_DMA_IRQHandler+0x8da>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d307      	bcc.n	8005b6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f2      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x8da>
 8005b68:	e000      	b.n	8005b6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b6a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2203      	movs	r2, #3
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005b8a:	e003      	b.n	8005b94 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8272 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
 8005ba6:	e26c      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a43      	ldr	r2, [pc, #268]	; (8005cbc <HAL_DMA_IRQHandler+0xa48>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a42      	ldr	r2, [pc, #264]	; (8005cc0 <HAL_DMA_IRQHandler+0xa4c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d01d      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <HAL_DMA_IRQHandler+0xa50>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <HAL_DMA_IRQHandler+0xa54>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a3d      	ldr	r2, [pc, #244]	; (8005ccc <HAL_DMA_IRQHandler+0xa58>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <HAL_DMA_IRQHandler+0xa5c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a3a      	ldr	r2, [pc, #232]	; (8005cd4 <HAL_DMA_IRQHandler+0xa60>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a39      	ldr	r2, [pc, #228]	; (8005cd8 <HAL_DMA_IRQHandler+0xa64>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x988>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_DMA_IRQHandler+0x98a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 823f 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2204      	movs	r2, #4
 8005c16:	409a      	lsls	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80cd 	beq.w	8005dbc <HAL_DMA_IRQHandler+0xb48>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80c7 	beq.w	8005dbc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2204      	movs	r2, #4
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d049      	beq.n	8005cdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8210 	beq.w	800607c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c64:	e20a      	b.n	800607c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8206 	beq.w	800607c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c78:	e200      	b.n	800607c <HAL_DMA_IRQHandler+0xe08>
 8005c7a:	bf00      	nop
 8005c7c:	40020010 	.word	0x40020010
 8005c80:	40020028 	.word	0x40020028
 8005c84:	40020040 	.word	0x40020040
 8005c88:	40020058 	.word	0x40020058
 8005c8c:	40020070 	.word	0x40020070
 8005c90:	40020088 	.word	0x40020088
 8005c94:	400200a0 	.word	0x400200a0
 8005c98:	400200b8 	.word	0x400200b8
 8005c9c:	40020410 	.word	0x40020410
 8005ca0:	40020428 	.word	0x40020428
 8005ca4:	40020440 	.word	0x40020440
 8005ca8:	40020458 	.word	0x40020458
 8005cac:	40020470 	.word	0x40020470
 8005cb0:	40020488 	.word	0x40020488
 8005cb4:	400204a0 	.word	0x400204a0
 8005cb8:	400204b8 	.word	0x400204b8
 8005cbc:	58025408 	.word	0x58025408
 8005cc0:	5802541c 	.word	0x5802541c
 8005cc4:	58025430 	.word	0x58025430
 8005cc8:	58025444 	.word	0x58025444
 8005ccc:	58025458 	.word	0x58025458
 8005cd0:	5802546c 	.word	0x5802546c
 8005cd4:	58025480 	.word	0x58025480
 8005cd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d160      	bne.n	8005da8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a8c      	ldr	r2, [pc, #560]	; (8005f1c <HAL_DMA_IRQHandler+0xca8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04a      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a8a      	ldr	r2, [pc, #552]	; (8005f20 <HAL_DMA_IRQHandler+0xcac>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d045      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a89      	ldr	r2, [pc, #548]	; (8005f24 <HAL_DMA_IRQHandler+0xcb0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d040      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a87      	ldr	r2, [pc, #540]	; (8005f28 <HAL_DMA_IRQHandler+0xcb4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d03b      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a86      	ldr	r2, [pc, #536]	; (8005f2c <HAL_DMA_IRQHandler+0xcb8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d036      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a84      	ldr	r2, [pc, #528]	; (8005f30 <HAL_DMA_IRQHandler+0xcbc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a83      	ldr	r2, [pc, #524]	; (8005f34 <HAL_DMA_IRQHandler+0xcc0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02c      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a81      	ldr	r2, [pc, #516]	; (8005f38 <HAL_DMA_IRQHandler+0xcc4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a80      	ldr	r2, [pc, #512]	; (8005f3c <HAL_DMA_IRQHandler+0xcc8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a7e      	ldr	r2, [pc, #504]	; (8005f40 <HAL_DMA_IRQHandler+0xccc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a7d      	ldr	r2, [pc, #500]	; (8005f44 <HAL_DMA_IRQHandler+0xcd0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a7b      	ldr	r2, [pc, #492]	; (8005f48 <HAL_DMA_IRQHandler+0xcd4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a7a      	ldr	r2, [pc, #488]	; (8005f4c <HAL_DMA_IRQHandler+0xcd8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a78      	ldr	r2, [pc, #480]	; (8005f50 <HAL_DMA_IRQHandler+0xcdc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a77      	ldr	r2, [pc, #476]	; (8005f54 <HAL_DMA_IRQHandler+0xce0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a75      	ldr	r2, [pc, #468]	; (8005f58 <HAL_DMA_IRQHandler+0xce4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d108      	bne.n	8005d98 <HAL_DMA_IRQHandler+0xb24>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0208 	bic.w	r2, r2, #8
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e007      	b.n	8005da8 <HAL_DMA_IRQHandler+0xb34>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0204 	bic.w	r2, r2, #4
 8005da6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8165 	beq.w	800607c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dba:	e15f      	b.n	800607c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80c5 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xce8>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80bf 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2202      	movs	r2, #2
 8005de8:	409a      	lsls	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d018      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 813a 	beq.w	8006080 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e14:	e134      	b.n	8006080 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8130 	beq.w	8006080 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e28:	e12a      	b.n	8006080 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d168      	bne.n	8005f06 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a38      	ldr	r2, [pc, #224]	; (8005f1c <HAL_DMA_IRQHandler+0xca8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04a      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a37      	ldr	r2, [pc, #220]	; (8005f20 <HAL_DMA_IRQHandler+0xcac>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d045      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a35      	ldr	r2, [pc, #212]	; (8005f24 <HAL_DMA_IRQHandler+0xcb0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a34      	ldr	r2, [pc, #208]	; (8005f28 <HAL_DMA_IRQHandler+0xcb4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d03b      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a32      	ldr	r2, [pc, #200]	; (8005f2c <HAL_DMA_IRQHandler+0xcb8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a31      	ldr	r2, [pc, #196]	; (8005f30 <HAL_DMA_IRQHandler+0xcbc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d031      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2f      	ldr	r2, [pc, #188]	; (8005f34 <HAL_DMA_IRQHandler+0xcc0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02c      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <HAL_DMA_IRQHandler+0xcc4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d027      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	; (8005f3c <HAL_DMA_IRQHandler+0xcc8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <HAL_DMA_IRQHandler+0xccc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d01d      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a29      	ldr	r2, [pc, #164]	; (8005f44 <HAL_DMA_IRQHandler+0xcd0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a28      	ldr	r2, [pc, #160]	; (8005f48 <HAL_DMA_IRQHandler+0xcd4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <HAL_DMA_IRQHandler+0xcd8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <HAL_DMA_IRQHandler+0xcdc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a23      	ldr	r2, [pc, #140]	; (8005f54 <HAL_DMA_IRQHandler+0xce0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0xc60>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <HAL_DMA_IRQHandler+0xce4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d108      	bne.n	8005ee6 <HAL_DMA_IRQHandler+0xc72>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0214 	bic.w	r2, r2, #20
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e007      	b.n	8005ef6 <HAL_DMA_IRQHandler+0xc82>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 020a 	bic.w	r2, r2, #10
 8005ef4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80b8 	beq.w	8006080 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f18:	e0b2      	b.n	8006080 <HAL_DMA_IRQHandler+0xe0c>
 8005f1a:	bf00      	nop
 8005f1c:	40020010 	.word	0x40020010
 8005f20:	40020028 	.word	0x40020028
 8005f24:	40020040 	.word	0x40020040
 8005f28:	40020058 	.word	0x40020058
 8005f2c:	40020070 	.word	0x40020070
 8005f30:	40020088 	.word	0x40020088
 8005f34:	400200a0 	.word	0x400200a0
 8005f38:	400200b8 	.word	0x400200b8
 8005f3c:	40020410 	.word	0x40020410
 8005f40:	40020428 	.word	0x40020428
 8005f44:	40020440 	.word	0x40020440
 8005f48:	40020458 	.word	0x40020458
 8005f4c:	40020470 	.word	0x40020470
 8005f50:	40020488 	.word	0x40020488
 8005f54:	400204a0 	.word	0x400204a0
 8005f58:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2208      	movs	r2, #8
 8005f66:	409a      	lsls	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8088 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8082 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a41      	ldr	r2, [pc, #260]	; (8006088 <HAL_DMA_IRQHandler+0xe14>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d04a      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3f      	ldr	r2, [pc, #252]	; (800608c <HAL_DMA_IRQHandler+0xe18>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d045      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3e      	ldr	r2, [pc, #248]	; (8006090 <HAL_DMA_IRQHandler+0xe1c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d040      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a3c      	ldr	r2, [pc, #240]	; (8006094 <HAL_DMA_IRQHandler+0xe20>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d03b      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3b      	ldr	r2, [pc, #236]	; (8006098 <HAL_DMA_IRQHandler+0xe24>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d036      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a39      	ldr	r2, [pc, #228]	; (800609c <HAL_DMA_IRQHandler+0xe28>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <HAL_DMA_IRQHandler+0xe2c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02c      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a36      	ldr	r2, [pc, #216]	; (80060a4 <HAL_DMA_IRQHandler+0xe30>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d027      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a35      	ldr	r2, [pc, #212]	; (80060a8 <HAL_DMA_IRQHandler+0xe34>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a33      	ldr	r2, [pc, #204]	; (80060ac <HAL_DMA_IRQHandler+0xe38>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01d      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a32      	ldr	r2, [pc, #200]	; (80060b0 <HAL_DMA_IRQHandler+0xe3c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a30      	ldr	r2, [pc, #192]	; (80060b4 <HAL_DMA_IRQHandler+0xe40>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <HAL_DMA_IRQHandler+0xe44>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2d      	ldr	r2, [pc, #180]	; (80060bc <HAL_DMA_IRQHandler+0xe48>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <HAL_DMA_IRQHandler+0xe4c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2a      	ldr	r2, [pc, #168]	; (80060c4 <HAL_DMA_IRQHandler+0xe50>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <HAL_DMA_IRQHandler+0xdbc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 021c 	bic.w	r2, r2, #28
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e007      	b.n	8006040 <HAL_DMA_IRQHandler+0xdcc>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020e 	bic.w	r2, r2, #14
 800603e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	e004      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006080:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006082:	3728      	adds	r7, #40	; 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40020010 	.word	0x40020010
 800608c:	40020028 	.word	0x40020028
 8006090:	40020040 	.word	0x40020040
 8006094:	40020058 	.word	0x40020058
 8006098:	40020070 	.word	0x40020070
 800609c:	40020088 	.word	0x40020088
 80060a0:	400200a0 	.word	0x400200a0
 80060a4:	400200b8 	.word	0x400200b8
 80060a8:	40020410 	.word	0x40020410
 80060ac:	40020428 	.word	0x40020428
 80060b0:	40020440 	.word	0x40020440
 80060b4:	40020458 	.word	0x40020458
 80060b8:	40020470 	.word	0x40020470
 80060bc:	40020488 	.word	0x40020488
 80060c0:	400204a0 	.word	0x400204a0
 80060c4:	400204b8 	.word	0x400204b8

080060c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a84      	ldr	r2, [pc, #528]	; (80062f8 <DMA_SetConfig+0x230>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d072      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a82      	ldr	r2, [pc, #520]	; (80062fc <DMA_SetConfig+0x234>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d06d      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a81      	ldr	r2, [pc, #516]	; (8006300 <DMA_SetConfig+0x238>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d068      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a7f      	ldr	r2, [pc, #508]	; (8006304 <DMA_SetConfig+0x23c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d063      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a7e      	ldr	r2, [pc, #504]	; (8006308 <DMA_SetConfig+0x240>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d05e      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a7c      	ldr	r2, [pc, #496]	; (800630c <DMA_SetConfig+0x244>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d059      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a7b      	ldr	r2, [pc, #492]	; (8006310 <DMA_SetConfig+0x248>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d054      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a79      	ldr	r2, [pc, #484]	; (8006314 <DMA_SetConfig+0x24c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d04f      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a78      	ldr	r2, [pc, #480]	; (8006318 <DMA_SetConfig+0x250>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d04a      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a76      	ldr	r2, [pc, #472]	; (800631c <DMA_SetConfig+0x254>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d045      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a75      	ldr	r2, [pc, #468]	; (8006320 <DMA_SetConfig+0x258>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d040      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a73      	ldr	r2, [pc, #460]	; (8006324 <DMA_SetConfig+0x25c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d03b      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a72      	ldr	r2, [pc, #456]	; (8006328 <DMA_SetConfig+0x260>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d036      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a70      	ldr	r2, [pc, #448]	; (800632c <DMA_SetConfig+0x264>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d031      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6f      	ldr	r2, [pc, #444]	; (8006330 <DMA_SetConfig+0x268>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d02c      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6d      	ldr	r2, [pc, #436]	; (8006334 <DMA_SetConfig+0x26c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d027      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6c      	ldr	r2, [pc, #432]	; (8006338 <DMA_SetConfig+0x270>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d022      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a6a      	ldr	r2, [pc, #424]	; (800633c <DMA_SetConfig+0x274>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d01d      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a69      	ldr	r2, [pc, #420]	; (8006340 <DMA_SetConfig+0x278>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d018      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a67      	ldr	r2, [pc, #412]	; (8006344 <DMA_SetConfig+0x27c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a66      	ldr	r2, [pc, #408]	; (8006348 <DMA_SetConfig+0x280>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00e      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a64      	ldr	r2, [pc, #400]	; (800634c <DMA_SetConfig+0x284>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d009      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a63      	ldr	r2, [pc, #396]	; (8006350 <DMA_SetConfig+0x288>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <DMA_SetConfig+0x10a>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a61      	ldr	r2, [pc, #388]	; (8006354 <DMA_SetConfig+0x28c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d101      	bne.n	80061d6 <DMA_SetConfig+0x10e>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <DMA_SetConfig+0x110>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80061e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3e      	ldr	r2, [pc, #248]	; (80062f8 <DMA_SetConfig+0x230>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04a      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3d      	ldr	r2, [pc, #244]	; (80062fc <DMA_SetConfig+0x234>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d045      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3b      	ldr	r2, [pc, #236]	; (8006300 <DMA_SetConfig+0x238>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d040      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3a      	ldr	r2, [pc, #232]	; (8006304 <DMA_SetConfig+0x23c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d03b      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a38      	ldr	r2, [pc, #224]	; (8006308 <DMA_SetConfig+0x240>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d036      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a37      	ldr	r2, [pc, #220]	; (800630c <DMA_SetConfig+0x244>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d031      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a35      	ldr	r2, [pc, #212]	; (8006310 <DMA_SetConfig+0x248>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02c      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a34      	ldr	r2, [pc, #208]	; (8006314 <DMA_SetConfig+0x24c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d027      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a32      	ldr	r2, [pc, #200]	; (8006318 <DMA_SetConfig+0x250>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a31      	ldr	r2, [pc, #196]	; (800631c <DMA_SetConfig+0x254>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01d      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2f      	ldr	r2, [pc, #188]	; (8006320 <DMA_SetConfig+0x258>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <DMA_SetConfig+0x25c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <DMA_SetConfig+0x260>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2b      	ldr	r2, [pc, #172]	; (800632c <DMA_SetConfig+0x264>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a29      	ldr	r2, [pc, #164]	; (8006330 <DMA_SetConfig+0x268>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <DMA_SetConfig+0x1d0>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a28      	ldr	r2, [pc, #160]	; (8006334 <DMA_SetConfig+0x26c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d101      	bne.n	800629c <DMA_SetConfig+0x1d4>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <DMA_SetConfig+0x1d6>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05a      	beq.n	8006358 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	223f      	movs	r2, #63	; 0x3f
 80062ac:	409a      	lsls	r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d108      	bne.n	80062e4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062e2:	e087      	b.n	80063f4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]
}
 80062f4:	e07e      	b.n	80063f4 <DMA_SetConfig+0x32c>
 80062f6:	bf00      	nop
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
 8006338:	58025408 	.word	0x58025408
 800633c:	5802541c 	.word	0x5802541c
 8006340:	58025430 	.word	0x58025430
 8006344:	58025444 	.word	0x58025444
 8006348:	58025458 	.word	0x58025458
 800634c:	5802546c 	.word	0x5802546c
 8006350:	58025480 	.word	0x58025480
 8006354:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a28      	ldr	r2, [pc, #160]	; (8006400 <DMA_SetConfig+0x338>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a27      	ldr	r2, [pc, #156]	; (8006404 <DMA_SetConfig+0x33c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d01d      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a25      	ldr	r2, [pc, #148]	; (8006408 <DMA_SetConfig+0x340>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a24      	ldr	r2, [pc, #144]	; (800640c <DMA_SetConfig+0x344>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a22      	ldr	r2, [pc, #136]	; (8006410 <DMA_SetConfig+0x348>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a21      	ldr	r2, [pc, #132]	; (8006414 <DMA_SetConfig+0x34c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1f      	ldr	r2, [pc, #124]	; (8006418 <DMA_SetConfig+0x350>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <DMA_SetConfig+0x2e0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1e      	ldr	r2, [pc, #120]	; (800641c <DMA_SetConfig+0x354>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <DMA_SetConfig+0x2e4>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <DMA_SetConfig+0x2e6>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d020      	beq.n	80063f4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2201      	movs	r2, #1
 80063bc:	409a      	lsls	r2, r3
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	d108      	bne.n	80063e4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	60da      	str	r2, [r3, #12]
}
 80063e2:	e007      	b.n	80063f4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	58025408 	.word	0x58025408
 8006404:	5802541c 	.word	0x5802541c
 8006408:	58025430 	.word	0x58025430
 800640c:	58025444 	.word	0x58025444
 8006410:	58025458 	.word	0x58025458
 8006414:	5802546c 	.word	0x5802546c
 8006418:	58025480 	.word	0x58025480
 800641c:	58025494 	.word	0x58025494

08006420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a42      	ldr	r2, [pc, #264]	; (8006538 <DMA_CalcBaseAndBitshift+0x118>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04a      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a41      	ldr	r2, [pc, #260]	; (800653c <DMA_CalcBaseAndBitshift+0x11c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d045      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a3f      	ldr	r2, [pc, #252]	; (8006540 <DMA_CalcBaseAndBitshift+0x120>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d040      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3e      	ldr	r2, [pc, #248]	; (8006544 <DMA_CalcBaseAndBitshift+0x124>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d03b      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a3c      	ldr	r2, [pc, #240]	; (8006548 <DMA_CalcBaseAndBitshift+0x128>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d036      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a3b      	ldr	r2, [pc, #236]	; (800654c <DMA_CalcBaseAndBitshift+0x12c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d031      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a39      	ldr	r2, [pc, #228]	; (8006550 <DMA_CalcBaseAndBitshift+0x130>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02c      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a38      	ldr	r2, [pc, #224]	; (8006554 <DMA_CalcBaseAndBitshift+0x134>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d027      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a36      	ldr	r2, [pc, #216]	; (8006558 <DMA_CalcBaseAndBitshift+0x138>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a35      	ldr	r2, [pc, #212]	; (800655c <DMA_CalcBaseAndBitshift+0x13c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01d      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a33      	ldr	r2, [pc, #204]	; (8006560 <DMA_CalcBaseAndBitshift+0x140>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a32      	ldr	r2, [pc, #200]	; (8006564 <DMA_CalcBaseAndBitshift+0x144>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a30      	ldr	r2, [pc, #192]	; (8006568 <DMA_CalcBaseAndBitshift+0x148>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2f      	ldr	r2, [pc, #188]	; (800656c <DMA_CalcBaseAndBitshift+0x14c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2d      	ldr	r2, [pc, #180]	; (8006570 <DMA_CalcBaseAndBitshift+0x150>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xa8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a2c      	ldr	r2, [pc, #176]	; (8006574 <DMA_CalcBaseAndBitshift+0x154>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d101      	bne.n	80064cc <DMA_CalcBaseAndBitshift+0xac>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <DMA_CalcBaseAndBitshift+0xae>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d024      	beq.n	800651c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	3b10      	subs	r3, #16
 80064da:	4a27      	ldr	r2, [pc, #156]	; (8006578 <DMA_CalcBaseAndBitshift+0x158>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	4a24      	ldr	r2, [pc, #144]	; (800657c <DMA_CalcBaseAndBitshift+0x15c>)
 80064ec:	5cd3      	ldrb	r3, [r2, r3]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d908      	bls.n	800650c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <DMA_CalcBaseAndBitshift+0x160>)
 8006502:	4013      	ands	r3, r2
 8006504:	1d1a      	adds	r2, r3, #4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	659a      	str	r2, [r3, #88]	; 0x58
 800650a:	e00d      	b.n	8006528 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <DMA_CalcBaseAndBitshift+0x160>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6593      	str	r3, [r2, #88]	; 0x58
 800651a:	e005      	b.n	8006528 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40020010 	.word	0x40020010
 800653c:	40020028 	.word	0x40020028
 8006540:	40020040 	.word	0x40020040
 8006544:	40020058 	.word	0x40020058
 8006548:	40020070 	.word	0x40020070
 800654c:	40020088 	.word	0x40020088
 8006550:	400200a0 	.word	0x400200a0
 8006554:	400200b8 	.word	0x400200b8
 8006558:	40020410 	.word	0x40020410
 800655c:	40020428 	.word	0x40020428
 8006560:	40020440 	.word	0x40020440
 8006564:	40020458 	.word	0x40020458
 8006568:	40020470 	.word	0x40020470
 800656c:	40020488 	.word	0x40020488
 8006570:	400204a0 	.word	0x400204a0
 8006574:	400204b8 	.word	0x400204b8
 8006578:	aaaaaaab 	.word	0xaaaaaaab
 800657c:	080150f4 	.word	0x080150f4
 8006580:	fffffc00 	.word	0xfffffc00

08006584 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d120      	bne.n	80065da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	2b03      	cmp	r3, #3
 800659e:	d858      	bhi.n	8006652 <DMA_CheckFifoParam+0xce>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <DMA_CheckFifoParam+0x24>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	080065cb 	.word	0x080065cb
 80065b0:	080065b9 	.word	0x080065b9
 80065b4:	08006653 	.word	0x08006653
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d048      	beq.n	8006656 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065c8:	e045      	b.n	8006656 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065d2:	d142      	bne.n	800665a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065d8:	e03f      	b.n	800665a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e2:	d123      	bne.n	800662c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d838      	bhi.n	800665e <DMA_CheckFifoParam+0xda>
 80065ec:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <DMA_CheckFifoParam+0x70>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	08006605 	.word	0x08006605
 80065f8:	0800660b 	.word	0x0800660b
 80065fc:	08006605 	.word	0x08006605
 8006600:	0800661d 	.word	0x0800661d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
        break;
 8006608:	e030      	b.n	800666c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d025      	beq.n	8006662 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800661a:	e022      	b.n	8006662 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006624:	d11f      	bne.n	8006666 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800662a:	e01c      	b.n	8006666 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	2b02      	cmp	r3, #2
 8006632:	d902      	bls.n	800663a <DMA_CheckFifoParam+0xb6>
 8006634:	2b03      	cmp	r3, #3
 8006636:	d003      	beq.n	8006640 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006638:	e018      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
        break;
 800663e:	e015      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00e      	beq.n	800666a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
    break;
 8006650:	e00b      	b.n	800666a <DMA_CheckFifoParam+0xe6>
        break;
 8006652:	bf00      	nop
 8006654:	e00a      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        break;
 8006656:	bf00      	nop
 8006658:	e008      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        break;
 800665a:	bf00      	nop
 800665c:	e006      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        break;
 800665e:	bf00      	nop
 8006660:	e004      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        break;
 8006662:	bf00      	nop
 8006664:	e002      	b.n	800666c <DMA_CheckFifoParam+0xe8>
        break;
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <DMA_CheckFifoParam+0xe8>
    break;
 800666a:	bf00      	nop
    }
  }

  return status;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop

0800667c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a38      	ldr	r2, [pc, #224]	; (8006770 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a36      	ldr	r2, [pc, #216]	; (8006774 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a35      	ldr	r2, [pc, #212]	; (8006778 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a33      	ldr	r2, [pc, #204]	; (800677c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a32      	ldr	r2, [pc, #200]	; (8006780 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a30      	ldr	r2, [pc, #192]	; (8006784 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2f      	ldr	r2, [pc, #188]	; (8006788 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2d      	ldr	r2, [pc, #180]	; (800678c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d101      	bne.n	80066de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01a      	beq.n	800671a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	3b08      	subs	r3, #8
 80066ec:	4a28      	ldr	r2, [pc, #160]	; (8006790 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4b26      	ldr	r3, [pc, #152]	; (8006794 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	461a      	mov	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a24      	ldr	r2, [pc, #144]	; (8006798 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006708:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2201      	movs	r2, #1
 8006712:	409a      	lsls	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006718:	e024      	b.n	8006764 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	3b10      	subs	r3, #16
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d806      	bhi.n	8006742 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d902      	bls.n	8006742 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3308      	adds	r3, #8
 8006740:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a16      	ldr	r2, [pc, #88]	; (80067ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006754:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2201      	movs	r2, #1
 800675e:	409a      	lsls	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	58025408 	.word	0x58025408
 8006774:	5802541c 	.word	0x5802541c
 8006778:	58025430 	.word	0x58025430
 800677c:	58025444 	.word	0x58025444
 8006780:	58025458 	.word	0x58025458
 8006784:	5802546c 	.word	0x5802546c
 8006788:	58025480 	.word	0x58025480
 800678c:	58025494 	.word	0x58025494
 8006790:	cccccccd 	.word	0xcccccccd
 8006794:	16009600 	.word	0x16009600
 8006798:	58025880 	.word	0x58025880
 800679c:	aaaaaaab 	.word	0xaaaaaaab
 80067a0:	400204b8 	.word	0x400204b8
 80067a4:	4002040f 	.word	0x4002040f
 80067a8:	10008200 	.word	0x10008200
 80067ac:	40020880 	.word	0x40020880

080067b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d04a      	beq.n	800685c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d847      	bhi.n	800685c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a25      	ldr	r2, [pc, #148]	; (8006868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d022      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a24      	ldr	r2, [pc, #144]	; (800686c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d01d      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a22      	ldr	r2, [pc, #136]	; (8006870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a21      	ldr	r2, [pc, #132]	; (8006874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1e      	ldr	r2, [pc, #120]	; (800687c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a1b      	ldr	r2, [pc, #108]	; (8006884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4b17      	ldr	r3, [pc, #92]	; (8006888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a15      	ldr	r2, [pc, #84]	; (800688c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006838:	671a      	str	r2, [r3, #112]	; 0x70
 800683a:	e009      	b.n	8006850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4b14      	ldr	r3, [pc, #80]	; (8006890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	461a      	mov	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a11      	ldr	r2, [pc, #68]	; (8006894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800684e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3b01      	subs	r3, #1
 8006854:	2201      	movs	r2, #1
 8006856:	409a      	lsls	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	58025408 	.word	0x58025408
 800686c:	5802541c 	.word	0x5802541c
 8006870:	58025430 	.word	0x58025430
 8006874:	58025444 	.word	0x58025444
 8006878:	58025458 	.word	0x58025458
 800687c:	5802546c 	.word	0x5802546c
 8006880:	58025480 	.word	0x58025480
 8006884:	58025494 	.word	0x58025494
 8006888:	1600963f 	.word	0x1600963f
 800688c:	58025940 	.word	0x58025940
 8006890:	1000823f 	.word	0x1000823f
 8006894:	40020940 	.word	0x40020940

08006898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068a6:	4b89      	ldr	r3, [pc, #548]	; (8006acc <HAL_GPIO_Init+0x234>)
 80068a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068aa:	e194      	b.n	8006bd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	2101      	movs	r1, #1
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	4013      	ands	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8186 	beq.w	8006bd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d00b      	beq.n	80068e4 <HAL_GPIO_Init+0x4c>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d007      	beq.n	80068e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068d8:	2b11      	cmp	r3, #17
 80068da:	d003      	beq.n	80068e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b12      	cmp	r3, #18
 80068e2:	d130      	bne.n	8006946 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	2203      	movs	r2, #3
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4313      	orrs	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800691a:	2201      	movs	r2, #1
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4013      	ands	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 0201 	and.w	r2, r3, #1
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4313      	orrs	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	2203      	movs	r2, #3
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d003      	beq.n	8006986 <HAL_GPIO_Init+0xee>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b12      	cmp	r3, #18
 8006984:	d123      	bne.n	80069ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	08da      	lsrs	r2, r3, #3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3208      	adds	r2, #8
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	220f      	movs	r2, #15
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	43db      	mvns	r3, r3
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	4013      	ands	r3, r2
 80069a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	4313      	orrs	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	08da      	lsrs	r2, r3, #3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3208      	adds	r2, #8
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	2203      	movs	r2, #3
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	43db      	mvns	r3, r3
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	4013      	ands	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f003 0203 	and.w	r2, r3, #3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80e0 	beq.w	8006bd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a10:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <HAL_GPIO_Init+0x238>)
 8006a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a16:	4a2e      	ldr	r2, [pc, #184]	; (8006ad0 <HAL_GPIO_Init+0x238>)
 8006a18:	f043 0302 	orr.w	r3, r3, #2
 8006a1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a20:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <HAL_GPIO_Init+0x238>)
 8006a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a2e:	4a29      	ldr	r2, [pc, #164]	; (8006ad4 <HAL_GPIO_Init+0x23c>)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	089b      	lsrs	r3, r3, #2
 8006a34:	3302      	adds	r3, #2
 8006a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	220f      	movs	r2, #15
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a20      	ldr	r2, [pc, #128]	; (8006ad8 <HAL_GPIO_Init+0x240>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d052      	beq.n	8006b00 <HAL_GPIO_Init+0x268>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1f      	ldr	r2, [pc, #124]	; (8006adc <HAL_GPIO_Init+0x244>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d031      	beq.n	8006ac6 <HAL_GPIO_Init+0x22e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1e      	ldr	r2, [pc, #120]	; (8006ae0 <HAL_GPIO_Init+0x248>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d02b      	beq.n	8006ac2 <HAL_GPIO_Init+0x22a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ae4 <HAL_GPIO_Init+0x24c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d025      	beq.n	8006abe <HAL_GPIO_Init+0x226>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <HAL_GPIO_Init+0x250>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01f      	beq.n	8006aba <HAL_GPIO_Init+0x222>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <HAL_GPIO_Init+0x254>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d019      	beq.n	8006ab6 <HAL_GPIO_Init+0x21e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_GPIO_Init+0x258>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_GPIO_Init+0x21a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <HAL_GPIO_Init+0x25c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00d      	beq.n	8006aae <HAL_GPIO_Init+0x216>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_GPIO_Init+0x260>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <HAL_GPIO_Init+0x212>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a17      	ldr	r2, [pc, #92]	; (8006afc <HAL_GPIO_Init+0x264>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <HAL_GPIO_Init+0x20e>
 8006aa2:	2309      	movs	r3, #9
 8006aa4:	e02d      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	e02b      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	e029      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006aae:	2307      	movs	r3, #7
 8006ab0:	e027      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006ab2:	2306      	movs	r3, #6
 8006ab4:	e025      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006ab6:	2305      	movs	r3, #5
 8006ab8:	e023      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006aba:	2304      	movs	r3, #4
 8006abc:	e021      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e01f      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e01d      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e01b      	b.n	8006b02 <HAL_GPIO_Init+0x26a>
 8006aca:	bf00      	nop
 8006acc:	58000080 	.word	0x58000080
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	58000400 	.word	0x58000400
 8006ad8:	58020000 	.word	0x58020000
 8006adc:	58020400 	.word	0x58020400
 8006ae0:	58020800 	.word	0x58020800
 8006ae4:	58020c00 	.word	0x58020c00
 8006ae8:	58021000 	.word	0x58021000
 8006aec:	58021400 	.word	0x58021400
 8006af0:	58021800 	.word	0x58021800
 8006af4:	58021c00 	.word	0x58021c00
 8006af8:	58022000 	.word	0x58022000
 8006afc:	58022400 	.word	0x58022400
 8006b00:	2300      	movs	r3, #0
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	f002 0203 	and.w	r2, r2, #3
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	4093      	lsls	r3, r2
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b12:	4938      	ldr	r1, [pc, #224]	; (8006bf4 <HAL_GPIO_Init+0x35c>)
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	3302      	adds	r3, #2
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	43db      	mvns	r3, r3
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4013      	ands	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f47f ae63 	bne.w	80068ac <HAL_GPIO_Init+0x14>
  }
}
 8006be6:	bf00      	nop
 8006be8:	3724      	adds	r7, #36	; 0x24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	58000400 	.word	0x58000400

08006bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	807b      	strh	r3, [r7, #2]
 8006c04:	4613      	mov	r3, r2
 8006c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c08:	787b      	ldrb	r3, [r7, #1]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c0e:	887a      	ldrh	r2, [r7, #2]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c14:	e003      	b.n	8006c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c16:	887b      	ldrh	r3, [r7, #2]
 8006c18:	041a      	lsls	r2, r3, #16
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	619a      	str	r2, [r3, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_PWREx_ConfigSupply+0x70>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d00a      	beq.n	8006c56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c40:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <HAL_PWREx_ConfigSupply+0x70>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d001      	beq.n	8006c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e01f      	b.n	8006c92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e01d      	b.n	8006c92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c56:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <HAL_PWREx_ConfigSupply+0x70>)
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f023 0207 	bic.w	r2, r3, #7
 8006c5e:	490f      	ldr	r1, [pc, #60]	; (8006c9c <HAL_PWREx_ConfigSupply+0x70>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c66:	f7fb f867 	bl	8001d38 <HAL_GetTick>
 8006c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c6c:	e009      	b.n	8006c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c6e:	f7fb f863 	bl	8001d38 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7c:	d901      	bls.n	8006c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e007      	b.n	8006c92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <HAL_PWREx_ConfigSupply+0x70>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d1ee      	bne.n	8006c6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	58024800 	.word	0x58024800

08006ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08c      	sub	sp, #48	; 0x30
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e3ff      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8087 	beq.w	8006dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc0:	4b99      	ldr	r3, [pc, #612]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cca:	4b97      	ldr	r3, [pc, #604]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	2b10      	cmp	r3, #16
 8006cd4:	d007      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x46>
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	2b18      	cmp	r3, #24
 8006cda:	d110      	bne.n	8006cfe <HAL_RCC_OscConfig+0x5e>
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d10b      	bne.n	8006cfe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce6:	4b90      	ldr	r3, [pc, #576]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d06c      	beq.n	8006dcc <HAL_RCC_OscConfig+0x12c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d168      	bne.n	8006dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e3d9      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d06:	d106      	bne.n	8006d16 <HAL_RCC_OscConfig+0x76>
 8006d08:	4b87      	ldr	r3, [pc, #540]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a86      	ldr	r2, [pc, #536]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e02e      	b.n	8006d74 <HAL_RCC_OscConfig+0xd4>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x98>
 8006d1e:	4b82      	ldr	r3, [pc, #520]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a81      	ldr	r2, [pc, #516]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a7e      	ldr	r2, [pc, #504]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e01d      	b.n	8006d74 <HAL_RCC_OscConfig+0xd4>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d40:	d10c      	bne.n	8006d5c <HAL_RCC_OscConfig+0xbc>
 8006d42:	4b79      	ldr	r3, [pc, #484]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a78      	ldr	r2, [pc, #480]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a75      	ldr	r2, [pc, #468]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e00b      	b.n	8006d74 <HAL_RCC_OscConfig+0xd4>
 8006d5c:	4b72      	ldr	r3, [pc, #456]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a71      	ldr	r2, [pc, #452]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	4b6f      	ldr	r3, [pc, #444]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a6e      	ldr	r2, [pc, #440]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d013      	beq.n	8006da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7c:	f7fa ffdc 	bl	8001d38 <HAL_GetTick>
 8006d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d84:	f7fa ffd8 	bl	8001d38 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	; 0x64
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e38d      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d96:	4b64      	ldr	r3, [pc, #400]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0f0      	beq.n	8006d84 <HAL_RCC_OscConfig+0xe4>
 8006da2:	e014      	b.n	8006dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fa ffc8 	bl	8001d38 <HAL_GetTick>
 8006da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dac:	f7fa ffc4 	bl	8001d38 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b64      	cmp	r3, #100	; 0x64
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e379      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dbe:	4b5a      	ldr	r3, [pc, #360]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f0      	bne.n	8006dac <HAL_RCC_OscConfig+0x10c>
 8006dca:	e000      	b.n	8006dce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80ae 	beq.w	8006f38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ddc:	4b52      	ldr	r3, [pc, #328]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006de6:	4b50      	ldr	r3, [pc, #320]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <HAL_RCC_OscConfig+0x162>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	2b18      	cmp	r3, #24
 8006df6:	d13a      	bne.n	8006e6e <HAL_RCC_OscConfig+0x1ce>
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d135      	bne.n	8006e6e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e02:	4b49      	ldr	r3, [pc, #292]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_RCC_OscConfig+0x17a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e34b      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1a:	f7fa ffbb 	bl	8001d94 <HAL_GetREVID>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d817      	bhi.n	8006e58 <HAL_RCC_OscConfig+0x1b8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d108      	bne.n	8006e42 <HAL_RCC_OscConfig+0x1a2>
 8006e30:	4b3d      	ldr	r3, [pc, #244]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e38:	4a3b      	ldr	r2, [pc, #236]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e40:	e07a      	b.n	8006f38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e42:	4b39      	ldr	r3, [pc, #228]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	031b      	lsls	r3, r3, #12
 8006e50:	4935      	ldr	r1, [pc, #212]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e56:	e06f      	b.n	8006f38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e58:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	061b      	lsls	r3, r3, #24
 8006e66:	4930      	ldr	r1, [pc, #192]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e6c:	e064      	b.n	8006f38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d045      	beq.n	8006f02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e76:	4b2c      	ldr	r3, [pc, #176]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f023 0219 	bic.w	r2, r3, #25
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	4929      	ldr	r1, [pc, #164]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7fa ff56 	bl	8001d38 <HAL_GetTick>
 8006e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e90:	f7fa ff52 	bl	8001d38 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e307      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ea2:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f0      	beq.n	8006e90 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eae:	f7fa ff71 	bl	8001d94 <HAL_GetREVID>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	f241 0303 	movw	r3, #4099	; 0x1003
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d817      	bhi.n	8006eec <HAL_RCC_OscConfig+0x24c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	d108      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x236>
 8006ec4:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ecc:	4a16      	ldr	r2, [pc, #88]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	6053      	str	r3, [r2, #4]
 8006ed4:	e030      	b.n	8006f38 <HAL_RCC_OscConfig+0x298>
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	031b      	lsls	r3, r3, #12
 8006ee4:	4910      	ldr	r1, [pc, #64]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	604b      	str	r3, [r1, #4]
 8006eea:	e025      	b.n	8006f38 <HAL_RCC_OscConfig+0x298>
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	061b      	lsls	r3, r3, #24
 8006efa:	490b      	ldr	r1, [pc, #44]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	e01a      	b.n	8006f38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f02:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a08      	ldr	r2, [pc, #32]	; (8006f28 <HAL_RCC_OscConfig+0x288>)
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0e:	f7fa ff13 	bl	8001d38 <HAL_GetTick>
 8006f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f14:	e00a      	b.n	8006f2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f16:	f7fa ff0f 	bl	8001d38 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d903      	bls.n	8006f2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e2c4      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
 8006f28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f2c:	4ba4      	ldr	r3, [pc, #656]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ee      	bne.n	8006f16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80a9 	beq.w	8007098 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f46:	4b9e      	ldr	r3, [pc, #632]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f50:	4b9b      	ldr	r3, [pc, #620]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d007      	beq.n	8006f6c <HAL_RCC_OscConfig+0x2cc>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b18      	cmp	r3, #24
 8006f60:	d13a      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x338>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d135      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f6c:	4b94      	ldr	r3, [pc, #592]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <HAL_RCC_OscConfig+0x2e4>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	2b80      	cmp	r3, #128	; 0x80
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e296      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f84:	f7fa ff06 	bl	8001d94 <HAL_GetREVID>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d817      	bhi.n	8006fc2 <HAL_RCC_OscConfig+0x322>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d108      	bne.n	8006fac <HAL_RCC_OscConfig+0x30c>
 8006f9a:	4b89      	ldr	r3, [pc, #548]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fa2:	4a87      	ldr	r2, [pc, #540]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006faa:	e075      	b.n	8007098 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fac:	4b84      	ldr	r3, [pc, #528]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	069b      	lsls	r3, r3, #26
 8006fba:	4981      	ldr	r1, [pc, #516]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fc0:	e06a      	b.n	8007098 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fc2:	4b7f      	ldr	r3, [pc, #508]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	061b      	lsls	r3, r3, #24
 8006fd0:	497b      	ldr	r1, [pc, #492]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fd6:	e05f      	b.n	8007098 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d042      	beq.n	8007066 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006fe0:	4b77      	ldr	r3, [pc, #476]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a76      	ldr	r2, [pc, #472]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fa fea4 	bl	8001d38 <HAL_GetTick>
 8006ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ff4:	f7fa fea0 	bl	8001d38 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e255      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007006:	4b6e      	ldr	r3, [pc, #440]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007012:	f7fa febf 	bl	8001d94 <HAL_GetREVID>
 8007016:	4602      	mov	r2, r0
 8007018:	f241 0303 	movw	r3, #4099	; 0x1003
 800701c:	429a      	cmp	r2, r3
 800701e:	d817      	bhi.n	8007050 <HAL_RCC_OscConfig+0x3b0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	2b20      	cmp	r3, #32
 8007026:	d108      	bne.n	800703a <HAL_RCC_OscConfig+0x39a>
 8007028:	4b65      	ldr	r3, [pc, #404]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007030:	4a63      	ldr	r2, [pc, #396]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007036:	6053      	str	r3, [r2, #4]
 8007038:	e02e      	b.n	8007098 <HAL_RCC_OscConfig+0x3f8>
 800703a:	4b61      	ldr	r3, [pc, #388]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	069b      	lsls	r3, r3, #26
 8007048:	495d      	ldr	r1, [pc, #372]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800704a:	4313      	orrs	r3, r2
 800704c:	604b      	str	r3, [r1, #4]
 800704e:	e023      	b.n	8007098 <HAL_RCC_OscConfig+0x3f8>
 8007050:	4b5b      	ldr	r3, [pc, #364]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	061b      	lsls	r3, r3, #24
 800705e:	4958      	ldr	r1, [pc, #352]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007060:	4313      	orrs	r3, r2
 8007062:	60cb      	str	r3, [r1, #12]
 8007064:	e018      	b.n	8007098 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007066:	4b56      	ldr	r3, [pc, #344]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a55      	ldr	r2, [pc, #340]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800706c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007072:	f7fa fe61 	bl	8001d38 <HAL_GetTick>
 8007076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800707a:	f7fa fe5d 	bl	8001d38 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e212      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800708c:	4b4c      	ldr	r3, [pc, #304]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f0      	bne.n	800707a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d036      	beq.n	8007112 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d019      	beq.n	80070e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ac:	4b44      	ldr	r3, [pc, #272]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 80070ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b0:	4a43      	ldr	r2, [pc, #268]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 80070b2:	f043 0301 	orr.w	r3, r3, #1
 80070b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b8:	f7fa fe3e 	bl	8001d38 <HAL_GetTick>
 80070bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070c0:	f7fa fe3a 	bl	8001d38 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e1ef      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070d2:	4b3b      	ldr	r3, [pc, #236]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 80070d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0x420>
 80070de:	e018      	b.n	8007112 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070e0:	4b37      	ldr	r3, [pc, #220]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 80070e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e4:	4a36      	ldr	r2, [pc, #216]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fa fe24 	bl	8001d38 <HAL_GetTick>
 80070f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070f4:	f7fa fe20 	bl	8001d38 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e1d5      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d036      	beq.n	800718c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d019      	beq.n	800715a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007126:	4b26      	ldr	r3, [pc, #152]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800712c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007130:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007132:	f7fa fe01 	bl	8001d38 <HAL_GetTick>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800713a:	f7fa fdfd 	bl	8001d38 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e1b2      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800714c:	4b1c      	ldr	r3, [pc, #112]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f0      	beq.n	800713a <HAL_RCC_OscConfig+0x49a>
 8007158:	e018      	b.n	800718c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800715a:	4b19      	ldr	r3, [pc, #100]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007164:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007166:	f7fa fde7 	bl	8001d38 <HAL_GetTick>
 800716a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800716e:	f7fa fde3 	bl	8001d38 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e198      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <HAL_RCC_OscConfig+0x520>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f0      	bne.n	800716e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8085 	beq.w	80072a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800719a:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <HAL_RCC_OscConfig+0x524>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <HAL_RCC_OscConfig+0x524>)
 80071a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071a6:	f7fa fdc7 	bl	8001d38 <HAL_GetTick>
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ac:	e00c      	b.n	80071c8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071ae:	f7fa fdc3 	bl	8001d38 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b64      	cmp	r3, #100	; 0x64
 80071ba:	d905      	bls.n	80071c8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e178      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
 80071c0:	58024400 	.word	0x58024400
 80071c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c8:	4b96      	ldr	r3, [pc, #600]	; (8007424 <HAL_RCC_OscConfig+0x784>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0ec      	beq.n	80071ae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d106      	bne.n	80071ea <HAL_RCC_OscConfig+0x54a>
 80071dc:	4b92      	ldr	r3, [pc, #584]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a91      	ldr	r2, [pc, #580]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
 80071e8:	e02d      	b.n	8007246 <HAL_RCC_OscConfig+0x5a6>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10c      	bne.n	800720c <HAL_RCC_OscConfig+0x56c>
 80071f2:	4b8d      	ldr	r3, [pc, #564]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4a8c      	ldr	r2, [pc, #560]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
 80071fe:	4b8a      	ldr	r3, [pc, #552]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	4a89      	ldr	r2, [pc, #548]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007204:	f023 0304 	bic.w	r3, r3, #4
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
 800720a:	e01c      	b.n	8007246 <HAL_RCC_OscConfig+0x5a6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b05      	cmp	r3, #5
 8007212:	d10c      	bne.n	800722e <HAL_RCC_OscConfig+0x58e>
 8007214:	4b84      	ldr	r3, [pc, #528]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007218:	4a83      	ldr	r2, [pc, #524]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800721a:	f043 0304 	orr.w	r3, r3, #4
 800721e:	6713      	str	r3, [r2, #112]	; 0x70
 8007220:	4b81      	ldr	r3, [pc, #516]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	4a80      	ldr	r2, [pc, #512]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	6713      	str	r3, [r2, #112]	; 0x70
 800722c:	e00b      	b.n	8007246 <HAL_RCC_OscConfig+0x5a6>
 800722e:	4b7e      	ldr	r3, [pc, #504]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	4a7d      	ldr	r2, [pc, #500]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	6713      	str	r3, [r2, #112]	; 0x70
 800723a:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	4a7a      	ldr	r2, [pc, #488]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007240:	f023 0304 	bic.w	r3, r3, #4
 8007244:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d015      	beq.n	800727a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724e:	f7fa fd73 	bl	8001d38 <HAL_GetTick>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007254:	e00a      	b.n	800726c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007256:	f7fa fd6f 	bl	8001d38 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	f241 3288 	movw	r2, #5000	; 0x1388
 8007264:	4293      	cmp	r3, r2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e122      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800726c:	4b6e      	ldr	r3, [pc, #440]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0ee      	beq.n	8007256 <HAL_RCC_OscConfig+0x5b6>
 8007278:	e014      	b.n	80072a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727a:	f7fa fd5d 	bl	8001d38 <HAL_GetTick>
 800727e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007282:	f7fa fd59 	bl	8001d38 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e10c      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007298:	4b63      	ldr	r3, [pc, #396]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1ee      	bne.n	8007282 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8101 	beq.w	80074b0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80072ae:	4b5e      	ldr	r3, [pc, #376]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072b6:	2b18      	cmp	r3, #24
 80072b8:	f000 80bc 	beq.w	8007434 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	f040 8095 	bne.w	80073f0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c6:	4b58      	ldr	r3, [pc, #352]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a57      	ldr	r2, [pc, #348]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80072cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d2:	f7fa fd31 	bl	8001d38 <HAL_GetTick>
 80072d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072da:	f7fa fd2d 	bl	8001d38 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e0e2      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072ec:	4b4e      	ldr	r3, [pc, #312]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1f0      	bne.n	80072da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f8:	4b4b      	ldr	r3, [pc, #300]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80072fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fc:	4b4b      	ldr	r3, [pc, #300]	; (800742c <HAL_RCC_OscConfig+0x78c>)
 80072fe:	4013      	ands	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007308:	0112      	lsls	r2, r2, #4
 800730a:	430a      	orrs	r2, r1
 800730c:	4946      	ldr	r1, [pc, #280]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800730e:	4313      	orrs	r3, r2
 8007310:	628b      	str	r3, [r1, #40]	; 0x28
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	3b01      	subs	r3, #1
 8007318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	3b01      	subs	r3, #1
 8007322:	025b      	lsls	r3, r3, #9
 8007324:	b29b      	uxth	r3, r3
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	3b01      	subs	r3, #1
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	3b01      	subs	r3, #1
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007342:	4939      	ldr	r1, [pc, #228]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007344:	4313      	orrs	r3, r2
 8007346:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007348:	4b37      	ldr	r3, [pc, #220]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	4a36      	ldr	r2, [pc, #216]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800734e:	f023 0301 	bic.w	r3, r3, #1
 8007352:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007354:	4b34      	ldr	r3, [pc, #208]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <HAL_RCC_OscConfig+0x790>)
 800735a:	4013      	ands	r3, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007360:	00d2      	lsls	r2, r2, #3
 8007362:	4931      	ldr	r1, [pc, #196]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007364:	4313      	orrs	r3, r2
 8007366:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007368:	4b2f      	ldr	r3, [pc, #188]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	f023 020c 	bic.w	r2, r3, #12
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	492c      	ldr	r1, [pc, #176]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007376:	4313      	orrs	r3, r2
 8007378:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800737a:	4b2b      	ldr	r3, [pc, #172]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	f023 0202 	bic.w	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007386:	4928      	ldr	r1, [pc, #160]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007388:	4313      	orrs	r3, r2
 800738a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800738c:	4b26      	ldr	r3, [pc, #152]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a25      	ldr	r2, [pc, #148]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	4b23      	ldr	r3, [pc, #140]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a22      	ldr	r2, [pc, #136]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 800739e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073a4:	4b20      	ldr	r3, [pc, #128]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80073b0:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a19      	ldr	r2, [pc, #100]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7fa fcb6 	bl	8001d38 <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fa fcb2 	bl	8001d38 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e067      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073e2:	4b11      	ldr	r3, [pc, #68]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x730>
 80073ee:	e05f      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a0c      	ldr	r2, [pc, #48]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 80073f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fc:	f7fa fc9c 	bl	8001d38 <HAL_GetTick>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007404:	f7fa fc98 	bl	8001d38 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e04d      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <HAL_RCC_OscConfig+0x788>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x764>
 8007422:	e045      	b.n	80074b0 <HAL_RCC_OscConfig+0x810>
 8007424:	58024800 	.word	0x58024800
 8007428:	58024400 	.word	0x58024400
 800742c:	fffffc0c 	.word	0xfffffc0c
 8007430:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007434:	4b21      	ldr	r3, [pc, #132]	; (80074bc <HAL_RCC_OscConfig+0x81c>)
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800743a:	4b20      	ldr	r3, [pc, #128]	; (80074bc <HAL_RCC_OscConfig+0x81c>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	2b01      	cmp	r3, #1
 8007446:	d031      	beq.n	80074ac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f003 0203 	and.w	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007452:	429a      	cmp	r2, r3
 8007454:	d12a      	bne.n	80074ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007462:	429a      	cmp	r2, r3
 8007464:	d122      	bne.n	80074ac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007472:	429a      	cmp	r2, r3
 8007474:	d11a      	bne.n	80074ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	0a5b      	lsrs	r3, r3, #9
 800747a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007482:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007484:	429a      	cmp	r2, r3
 8007486:	d111      	bne.n	80074ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	0c1b      	lsrs	r3, r3, #16
 800748c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007496:	429a      	cmp	r2, r3
 8007498:	d108      	bne.n	80074ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	0e1b      	lsrs	r3, r3, #24
 800749e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3730      	adds	r7, #48	; 0x30
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	58024400 	.word	0x58024400

080074c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e19c      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074d4:	4b8a      	ldr	r3, [pc, #552]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d910      	bls.n	8007504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e2:	4b87      	ldr	r3, [pc, #540]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f023 020f 	bic.w	r2, r3, #15
 80074ea:	4985      	ldr	r1, [pc, #532]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f2:	4b83      	ldr	r3, [pc, #524]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d001      	beq.n	8007504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e184      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	4b7b      	ldr	r3, [pc, #492]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800751c:	429a      	cmp	r2, r3
 800751e:	d908      	bls.n	8007532 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007520:	4b78      	ldr	r3, [pc, #480]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4975      	ldr	r1, [pc, #468]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 800752e:	4313      	orrs	r3, r2
 8007530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695a      	ldr	r2, [r3, #20]
 8007542:	4b70      	ldr	r3, [pc, #448]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800754a:	429a      	cmp	r2, r3
 800754c:	d908      	bls.n	8007560 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800754e:	4b6d      	ldr	r3, [pc, #436]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	496a      	ldr	r1, [pc, #424]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 800755c:	4313      	orrs	r3, r2
 800755e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	4b64      	ldr	r3, [pc, #400]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007578:	429a      	cmp	r2, r3
 800757a:	d908      	bls.n	800758e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800757c:	4b61      	ldr	r3, [pc, #388]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	495e      	ldr	r1, [pc, #376]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 800758a:	4313      	orrs	r3, r2
 800758c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d010      	beq.n	80075bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	4b59      	ldr	r3, [pc, #356]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d908      	bls.n	80075bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075aa:	4b56      	ldr	r3, [pc, #344]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	4953      	ldr	r1, [pc, #332]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d010      	beq.n	80075ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	4b4d      	ldr	r3, [pc, #308]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d908      	bls.n	80075ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d8:	4b4a      	ldr	r3, [pc, #296]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f023 020f 	bic.w	r2, r3, #15
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	4947      	ldr	r1, [pc, #284]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d055      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80075f6:	4b43      	ldr	r3, [pc, #268]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	4940      	ldr	r1, [pc, #256]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007604:	4313      	orrs	r3, r2
 8007606:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d107      	bne.n	8007620 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007610:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d121      	bne.n	8007660 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0f6      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b03      	cmp	r3, #3
 8007626:	d107      	bne.n	8007638 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d115      	bne.n	8007660 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0ea      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d107      	bne.n	8007650 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007640:	4b30      	ldr	r3, [pc, #192]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0de      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007650:	4b2c      	ldr	r3, [pc, #176]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0d6      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007660:	4b28      	ldr	r3, [pc, #160]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f023 0207 	bic.w	r2, r3, #7
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	4925      	ldr	r1, [pc, #148]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 800766e:	4313      	orrs	r3, r2
 8007670:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007672:	f7fa fb61 	bl	8001d38 <HAL_GetTick>
 8007676:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007678:	e00a      	b.n	8007690 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767a:	f7fa fb5d 	bl	8001d38 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f241 3288 	movw	r2, #5000	; 0x1388
 8007688:	4293      	cmp	r3, r2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e0be      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007690:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	429a      	cmp	r2, r3
 80076a0:	d1eb      	bne.n	800767a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d010      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d208      	bcs.n	80076d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f023 020f 	bic.w	r2, r3, #15
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	490e      	ldr	r1, [pc, #56]	; (8007704 <HAL_RCC_ClockConfig+0x244>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d214      	bcs.n	8007708 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076de:	4b08      	ldr	r3, [pc, #32]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 020f 	bic.w	r2, r3, #15
 80076e6:	4906      	ldr	r1, [pc, #24]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ee:	4b04      	ldr	r3, [pc, #16]	; (8007700 <HAL_RCC_ClockConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d005      	beq.n	8007708 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e086      	b.n	800780e <HAL_RCC_ClockConfig+0x34e>
 8007700:	52002000 	.word	0x52002000
 8007704:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d010      	beq.n	8007736 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	4b3f      	ldr	r3, [pc, #252]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007720:	429a      	cmp	r2, r3
 8007722:	d208      	bcs.n	8007736 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007724:	4b3c      	ldr	r3, [pc, #240]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	4939      	ldr	r1, [pc, #228]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007732:	4313      	orrs	r3, r2
 8007734:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d010      	beq.n	8007764 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695a      	ldr	r2, [r3, #20]
 8007746:	4b34      	ldr	r3, [pc, #208]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800774e:	429a      	cmp	r2, r3
 8007750:	d208      	bcs.n	8007764 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007752:	4b31      	ldr	r3, [pc, #196]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	492e      	ldr	r1, [pc, #184]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007760:	4313      	orrs	r3, r2
 8007762:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	d010      	beq.n	8007792 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	4b28      	ldr	r3, [pc, #160]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800777c:	429a      	cmp	r2, r3
 800777e:	d208      	bcs.n	8007792 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	4922      	ldr	r1, [pc, #136]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 800778e:	4313      	orrs	r3, r2
 8007790:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d010      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69da      	ldr	r2, [r3, #28]
 80077a2:	4b1d      	ldr	r3, [pc, #116]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d208      	bcs.n	80077c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077ae:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	4917      	ldr	r1, [pc, #92]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077c0:	f000 f834 	bl	800782c <HAL_RCC_GetSysClockFreq>
 80077c4:	4601      	mov	r1, r0
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	4a12      	ldr	r2, [pc, #72]	; (800781c <HAL_RCC_ClockConfig+0x35c>)
 80077d2:	5cd3      	ldrb	r3, [r2, r3]
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	fa21 f303 	lsr.w	r3, r1, r3
 80077dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <HAL_RCC_ClockConfig+0x358>)
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	4a0d      	ldr	r2, [pc, #52]	; (800781c <HAL_RCC_ClockConfig+0x35c>)
 80077e8:	5cd3      	ldrb	r3, [r2, r3]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	4a0a      	ldr	r2, [pc, #40]	; (8007820 <HAL_RCC_ClockConfig+0x360>)
 80077f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077f8:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <HAL_RCC_ClockConfig+0x364>)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <HAL_RCC_ClockConfig+0x368>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7f9 fd80 	bl	8001308 <HAL_InitTick>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
 800781c:	080150e4 	.word	0x080150e4
 8007820:	24000004 	.word	0x24000004
 8007824:	24000000 	.word	0x24000000
 8007828:	24000008 	.word	0x24000008

0800782c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800782c:	b480      	push	{r7}
 800782e:	b089      	sub	sp, #36	; 0x24
 8007830:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007832:	4baf      	ldr	r3, [pc, #700]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800783a:	2b18      	cmp	r3, #24
 800783c:	f200 814e 	bhi.w	8007adc <HAL_RCC_GetSysClockFreq+0x2b0>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	080078ad 	.word	0x080078ad
 800784c:	08007add 	.word	0x08007add
 8007850:	08007add 	.word	0x08007add
 8007854:	08007add 	.word	0x08007add
 8007858:	08007add 	.word	0x08007add
 800785c:	08007add 	.word	0x08007add
 8007860:	08007add 	.word	0x08007add
 8007864:	08007add 	.word	0x08007add
 8007868:	080078d3 	.word	0x080078d3
 800786c:	08007add 	.word	0x08007add
 8007870:	08007add 	.word	0x08007add
 8007874:	08007add 	.word	0x08007add
 8007878:	08007add 	.word	0x08007add
 800787c:	08007add 	.word	0x08007add
 8007880:	08007add 	.word	0x08007add
 8007884:	08007add 	.word	0x08007add
 8007888:	080078d9 	.word	0x080078d9
 800788c:	08007add 	.word	0x08007add
 8007890:	08007add 	.word	0x08007add
 8007894:	08007add 	.word	0x08007add
 8007898:	08007add 	.word	0x08007add
 800789c:	08007add 	.word	0x08007add
 80078a0:	08007add 	.word	0x08007add
 80078a4:	08007add 	.word	0x08007add
 80078a8:	080078df 	.word	0x080078df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ac:	4b90      	ldr	r3, [pc, #576]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d009      	beq.n	80078cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078b8:	4b8d      	ldr	r3, [pc, #564]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	08db      	lsrs	r3, r3, #3
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	4a8c      	ldr	r2, [pc, #560]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80078c4:	fa22 f303 	lsr.w	r3, r2, r3
 80078c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80078ca:	e10a      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078cc:	4b89      	ldr	r3, [pc, #548]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80078ce:	61bb      	str	r3, [r7, #24]
    break;
 80078d0:	e107      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80078d2:	4b89      	ldr	r3, [pc, #548]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80078d4:	61bb      	str	r3, [r7, #24]
    break;
 80078d6:	e104      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80078d8:	4b88      	ldr	r3, [pc, #544]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80078da:	61bb      	str	r3, [r7, #24]
    break;
 80078dc:	e101      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078de:	4b84      	ldr	r3, [pc, #528]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	f003 0303 	and.w	r3, r3, #3
 80078e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80078e8:	4b81      	ldr	r3, [pc, #516]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078f4:	4b7e      	ldr	r3, [pc, #504]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80078fe:	4b7c      	ldr	r3, [pc, #496]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	08db      	lsrs	r3, r3, #3
 8007904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80da 	beq.w	8007ad6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d05a      	beq.n	80079de <HAL_RCC_GetSysClockFreq+0x1b2>
 8007928:	2b01      	cmp	r3, #1
 800792a:	d302      	bcc.n	8007932 <HAL_RCC_GetSysClockFreq+0x106>
 800792c:	2b02      	cmp	r3, #2
 800792e:	d078      	beq.n	8007a22 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007930:	e099      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007932:	4b6f      	ldr	r3, [pc, #444]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d02d      	beq.n	800799a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800793e:	4b6c      	ldr	r3, [pc, #432]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	08db      	lsrs	r3, r3, #3
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	4a6a      	ldr	r2, [pc, #424]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007968:	4b61      	ldr	r3, [pc, #388]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007978:	ed97 6a02 	vldr	s12, [r7, #8]
 800797c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007b00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007988:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007994:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007998:	e087      	b.n	8007aaa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007b04 <HAL_RCC_GetSysClockFreq+0x2d8>
 80079a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ac:	4b50      	ldr	r3, [pc, #320]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80079c0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007b00 <HAL_RCC_GetSysClockFreq+0x2d4>
 80079c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079dc:	e065      	b.n	8007aaa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007b08 <HAL_RCC_GetSysClockFreq+0x2dc>
 80079ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f0:	4b3f      	ldr	r3, [pc, #252]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a00:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007b00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a20:	e043      	b.n	8007aaa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2e0>
 8007a30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a34:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a44:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a48:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007b00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a64:	e021      	b.n	8007aaa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a70:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007b08 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a88:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a8c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007b00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007aaa:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	0a5b      	lsrs	r3, r3, #9
 8007ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ace:	ee17 3a90 	vmov	r3, s15
 8007ad2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007ad4:	e005      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
    break;
 8007ada:	e002      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007ade:	61bb      	str	r3, [r7, #24]
    break;
 8007ae0:	bf00      	nop
  }

  return sysclockfreq;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3724      	adds	r7, #36	; 0x24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	58024400 	.word	0x58024400
 8007af4:	03d09000 	.word	0x03d09000
 8007af8:	003d0900 	.word	0x003d0900
 8007afc:	00f42400 	.word	0x00f42400
 8007b00:	46000000 	.word	0x46000000
 8007b04:	4c742400 	.word	0x4c742400
 8007b08:	4a742400 	.word	0x4a742400
 8007b0c:	4b742400 	.word	0x4b742400

08007b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b16:	f7ff fe89 	bl	800782c <HAL_RCC_GetSysClockFreq>
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	0a1b      	lsrs	r3, r3, #8
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	4a0f      	ldr	r2, [pc, #60]	; (8007b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b28:	5cd3      	ldrb	r3, [r2, r3]
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8007b32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b34:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b3e:	5cd3      	ldrb	r3, [r2, r3]
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4a:	4a07      	ldr	r2, [pc, #28]	; (8007b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b4e:	4a07      	ldr	r2, [pc, #28]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b54:	4b04      	ldr	r3, [pc, #16]	; (8007b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b56:	681b      	ldr	r3, [r3, #0]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	58024400 	.word	0x58024400
 8007b64:	080150e4 	.word	0x080150e4
 8007b68:	24000004 	.word	0x24000004
 8007b6c:	24000000 	.word	0x24000000

08007b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b74:	f7ff ffcc 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	091b      	lsrs	r3, r3, #4
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b86:	5cd3      	ldrb	r3, [r2, r3]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	58024400 	.word	0x58024400
 8007b98:	080150e4 	.word	0x080150e4

08007b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ba0:	f7ff ffb6 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 8007ba4:	4601      	mov	r1, r0
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	0a1b      	lsrs	r3, r3, #8
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bb2:	5cd3      	ldrb	r3, [r2, r3]
 8007bb4:	f003 031f 	and.w	r3, r3, #31
 8007bb8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	080150e4 	.word	0x080150e4

08007bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	223f      	movs	r2, #63	; 0x3f
 8007bd6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bd8:	4b1a      	ldr	r3, [pc, #104]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f003 0207 	and.w	r2, r3, #7
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007be4:	4b17      	ldr	r3, [pc, #92]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007bf0:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007bfc:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c08:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c20:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <HAL_RCC_GetClockConfig+0x7c>)
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <HAL_RCC_GetClockConfig+0x80>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	601a      	str	r2, [r3, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	58024400 	.word	0x58024400
 8007c48:	52002000 	.word	0x52002000

08007c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d03d      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c70:	d013      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c76:	d802      	bhi.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007c7c:	e01f      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c82:	d013      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c88:	d01c      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007c8a:	e018      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8c:	4baf      	ldr	r3, [pc, #700]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	4aae      	ldr	r2, [pc, #696]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c98:	e015      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 fd33 	bl	800970c <RCCEx_PLL2_Config>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007caa:	e00c      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3324      	adds	r3, #36	; 0x24
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 fddc 	bl	8009870 <RCCEx_PLL3_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cbc:	e003      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc2:	e000      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d109      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ccc:	4b9f      	ldr	r3, [pc, #636]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd8:	499c      	ldr	r1, [pc, #624]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8007cde:	e001      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d03d      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d826      	bhi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d15 	.word	0x08007d15
 8007d04:	08007d23 	.word	0x08007d23
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	08007d4d 	.word	0x08007d4d
 8007d10:	08007d4d 	.word	0x08007d4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d14:	4b8d      	ldr	r3, [pc, #564]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	4a8c      	ldr	r2, [pc, #560]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d20:	e015      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3304      	adds	r3, #4
 8007d26:	2100      	movs	r1, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fcef 	bl	800970c <RCCEx_PLL2_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d32:	e00c      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3324      	adds	r3, #36	; 0x24
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 fd98 	bl	8009870 <RCCEx_PLL3_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d44:	e003      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4a:	e000      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d54:	4b7d      	ldr	r3, [pc, #500]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d58:	f023 0207 	bic.w	r2, r3, #7
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	497a      	ldr	r1, [pc, #488]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	650b      	str	r3, [r1, #80]	; 0x50
 8007d66:	e001      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d03e      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d01c      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007d80:	2b80      	cmp	r3, #128	; 0x80
 8007d82:	d804      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d00d      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007d8c:	e01e      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d90:	d01f      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d96:	d01e      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007d98:	e018      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9a:	4b6c      	ldr	r3, [pc, #432]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a6b      	ldr	r2, [pc, #428]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007da6:	e017      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fcac 	bl	800970c <RCCEx_PLL2_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007db8:	e00e      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3324      	adds	r3, #36	; 0x24
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f001 fd55 	bl	8009870 <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dca:	e005      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	e002      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007dde:	4b5b      	ldr	r3, [pc, #364]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dea:	4958      	ldr	r1, [pc, #352]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	650b      	str	r3, [r1, #80]	; 0x50
 8007df0:	e001      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d044      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e0c:	d01f      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e12:	d805      	bhi.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e1c:	d00e      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007e1e:	e01f      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007e20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e24:	d01f      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e2a:	d01e      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007e2c:	e018      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2e:	4b47      	ldr	r3, [pc, #284]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a46      	ldr	r2, [pc, #280]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e3a:	e017      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 fc62 	bl	800970c <RCCEx_PLL2_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e4c:	e00e      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3324      	adds	r3, #36	; 0x24
 8007e52:	2100      	movs	r1, #0
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 fd0b 	bl	8009870 <RCCEx_PLL3_Config>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e5e:	e005      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
      break;
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10a      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007e72:	4b36      	ldr	r3, [pc, #216]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e80:	4932      	ldr	r1, [pc, #200]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	658b      	str	r3, [r1, #88]	; 0x58
 8007e86:	e001      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d044      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ea2:	d01f      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ea8:	d805      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007eb2:	d00e      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007eb4:	e01f      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007eb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007eba:	d01f      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ec0:	d01e      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ec2:	e018      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4a20      	ldr	r2, [pc, #128]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ed0:	e017      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 fc17 	bl	800970c <RCCEx_PLL2_Config>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ee2:	e00e      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3324      	adds	r3, #36	; 0x24
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 fcc0 	bl	8009870 <RCCEx_PLL3_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ef4:	e005      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8007efa:	e002      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007efc:	bf00      	nop
 8007efe:	e000      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f16:	490d      	ldr	r1, [pc, #52]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	658b      	str	r3, [r1, #88]	; 0x58
 8007f1c:	e001      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d035      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d00c      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d802      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01b      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007f3e:	e017      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d00c      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007f44:	2b30      	cmp	r3, #48	; 0x30
 8007f46:	d018      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007f48:	e012      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007f4a:	bf00      	nop
 8007f4c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f50:	4baf      	ldr	r3, [pc, #700]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	4aae      	ldr	r2, [pc, #696]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007f5c:	e00e      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	2102      	movs	r1, #2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 fbd1 	bl	800970c <RCCEx_PLL2_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007f6e:	e005      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	e002      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f82:	4ba3      	ldr	r3, [pc, #652]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8e:	49a0      	ldr	r1, [pc, #640]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f94:	e001      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d042      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fae:	d01f      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb4:	d805      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fbe:	d00e      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007fc0:	e01f      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fc6:	d01f      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fcc:	d01e      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007fce:	e018      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd0:	4b8f      	ldr	r3, [pc, #572]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a8e      	ldr	r2, [pc, #568]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007fdc:	e017      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 fb91 	bl	800970c <RCCEx_PLL2_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007fee:	e00e      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3324      	adds	r3, #36	; 0x24
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fc3a 	bl	8009870 <RCCEx_PLL3_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008000:	e005      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]
      break;
 8008006:	e002      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008008:	bf00      	nop
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800800c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008014:	4b7e      	ldr	r3, [pc, #504]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008020:	497b      	ldr	r1, [pc, #492]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008022:	4313      	orrs	r3, r2
 8008024:	650b      	str	r3, [r1, #80]	; 0x50
 8008026:	e001      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d042      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008040:	d01b      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008046:	d805      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d022      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008050:	d00a      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008052:	e01b      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008058:	d01d      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800805a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800805e:	d01c      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008060:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008064:	d01b      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008066:	e011      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	2101      	movs	r1, #1
 800806e:	4618      	mov	r0, r3
 8008070:	f001 fb4c 	bl	800970c <RCCEx_PLL2_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008078:	e012      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3324      	adds	r3, #36	; 0x24
 800807e:	2101      	movs	r1, #1
 8008080:	4618      	mov	r0, r3
 8008082:	f001 fbf5 	bl	8009870 <RCCEx_PLL3_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800808a:	e009      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
      break;
 8008090:	e006      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008092:	bf00      	nop
 8008094:	e004      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008096:	bf00      	nop
 8008098:	e002      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800809a:	bf00      	nop
 800809c:	e000      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800809e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080a6:	4b5a      	ldr	r3, [pc, #360]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	4957      	ldr	r1, [pc, #348]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	650b      	str	r3, [r1, #80]	; 0x50
 80080b8:	e001      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d044      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d4:	d01b      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080da:	d805      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d022      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80080e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080e4:	d00a      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80080e6:	e01b      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ec:	d01d      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80080ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080f2:	d01c      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80080f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080f8:	d01b      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80080fa:	e011      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	2101      	movs	r1, #1
 8008102:	4618      	mov	r0, r3
 8008104:	f001 fb02 	bl	800970c <RCCEx_PLL2_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800810c:	e012      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3324      	adds	r3, #36	; 0x24
 8008112:	2101      	movs	r1, #1
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fbab 	bl	8009870 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800811e:	e009      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
      break;
 8008124:	e006      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008126:	bf00      	nop
 8008128:	e004      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800813a:	4b35      	ldr	r3, [pc, #212]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008148:	4931      	ldr	r1, [pc, #196]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800814a:	4313      	orrs	r3, r2
 800814c:	658b      	str	r3, [r1, #88]	; 0x58
 800814e:	e001      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d02d      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008168:	d005      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800816a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800816e:	d009      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d013      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008174:	e00f      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008176:	4b26      	ldr	r3, [pc, #152]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	4a25      	ldr	r2, [pc, #148]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800817c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008182:	e00c      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	2101      	movs	r1, #1
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fabe 	bl	800970c <RCCEx_PLL2_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008194:	e003      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
      break;
 800819a:	e000      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800819c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d109      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b0:	4917      	ldr	r1, [pc, #92]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	650b      	str	r3, [r1, #80]	; 0x50
 80081b6:	e001      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d035      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d81b      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80081d0:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	08008215 	.word	0x08008215
 80081dc:	080081e9 	.word	0x080081e9
 80081e0:	080081f7 	.word	0x080081f7
 80081e4:	08008215 	.word	0x08008215
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e8:	4b09      	ldr	r3, [pc, #36]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a08      	ldr	r2, [pc, #32]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80081f4:	e00f      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2102      	movs	r1, #2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fa85 	bl	800970c <RCCEx_PLL2_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008206:	e006      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
      break;
 800820c:	e003      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800820e:	bf00      	nop
 8008210:	58024400 	.word	0x58024400
      break;
 8008214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d109      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800821c:	4bba      	ldr	r3, [pc, #744]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800821e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008220:	f023 0203 	bic.w	r2, r3, #3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008228:	49b7      	ldr	r1, [pc, #732]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800822a:	4313      	orrs	r3, r2
 800822c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800822e:	e001      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8086 	beq.w	800834e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008242:	4bb2      	ldr	r3, [pc, #712]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4ab1      	ldr	r2, [pc, #708]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800824e:	f7f9 fd73 	bl	8001d38 <HAL_GetTick>
 8008252:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008254:	e009      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008256:	f7f9 fd6f 	bl	8001d38 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b64      	cmp	r3, #100	; 0x64
 8008262:	d902      	bls.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	75fb      	strb	r3, [r7, #23]
        break;
 8008268:	e005      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800826a:	4ba8      	ldr	r3, [pc, #672]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0ef      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d166      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800827c:	4ba2      	ldr	r3, [pc, #648]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800827e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008286:	4053      	eors	r3, r2
 8008288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828c:	2b00      	cmp	r3, #0
 800828e:	d013      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008290:	4b9d      	ldr	r3, [pc, #628]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008298:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800829a:	4b9b      	ldr	r3, [pc, #620]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	4a9a      	ldr	r2, [pc, #616]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082a6:	4b98      	ldr	r3, [pc, #608]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	4a97      	ldr	r2, [pc, #604]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80082b2:	4a95      	ldr	r2, [pc, #596]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c2:	d115      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c4:	f7f9 fd38 	bl	8001d38 <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ca:	e00b      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082cc:	f7f9 fd34 	bl	8001d38 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d902      	bls.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	75fb      	strb	r3, [r7, #23]
            break;
 80082e2:	e005      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e4:	4b88      	ldr	r3, [pc, #544]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0ed      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d126      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008304:	d10d      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008306:	4b80      	ldr	r3, [pc, #512]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008314:	0919      	lsrs	r1, r3, #4
 8008316:	4b7e      	ldr	r3, [pc, #504]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008318:	400b      	ands	r3, r1
 800831a:	497b      	ldr	r1, [pc, #492]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800831c:	4313      	orrs	r3, r2
 800831e:	610b      	str	r3, [r1, #16]
 8008320:	e005      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008322:	4b79      	ldr	r3, [pc, #484]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	4a78      	ldr	r2, [pc, #480]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800832c:	6113      	str	r3, [r2, #16]
 800832e:	4b76      	ldr	r3, [pc, #472]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800833c:	4972      	ldr	r1, [pc, #456]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800833e:	4313      	orrs	r3, r2
 8008340:	670b      	str	r3, [r1, #112]	; 0x70
 8008342:	e004      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	75bb      	strb	r3, [r7, #22]
 8008348:	e001      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d07d      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800835e:	2b28      	cmp	r3, #40	; 0x28
 8008360:	d866      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008437 	.word	0x08008437
 800836c:	08008431 	.word	0x08008431
 8008370:	08008431 	.word	0x08008431
 8008374:	08008431 	.word	0x08008431
 8008378:	08008431 	.word	0x08008431
 800837c:	08008431 	.word	0x08008431
 8008380:	08008431 	.word	0x08008431
 8008384:	08008431 	.word	0x08008431
 8008388:	0800840d 	.word	0x0800840d
 800838c:	08008431 	.word	0x08008431
 8008390:	08008431 	.word	0x08008431
 8008394:	08008431 	.word	0x08008431
 8008398:	08008431 	.word	0x08008431
 800839c:	08008431 	.word	0x08008431
 80083a0:	08008431 	.word	0x08008431
 80083a4:	08008431 	.word	0x08008431
 80083a8:	0800841f 	.word	0x0800841f
 80083ac:	08008431 	.word	0x08008431
 80083b0:	08008431 	.word	0x08008431
 80083b4:	08008431 	.word	0x08008431
 80083b8:	08008431 	.word	0x08008431
 80083bc:	08008431 	.word	0x08008431
 80083c0:	08008431 	.word	0x08008431
 80083c4:	08008431 	.word	0x08008431
 80083c8:	08008437 	.word	0x08008437
 80083cc:	08008431 	.word	0x08008431
 80083d0:	08008431 	.word	0x08008431
 80083d4:	08008431 	.word	0x08008431
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008431 	.word	0x08008431
 80083e0:	08008431 	.word	0x08008431
 80083e4:	08008431 	.word	0x08008431
 80083e8:	08008437 	.word	0x08008437
 80083ec:	08008431 	.word	0x08008431
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
 80083fc:	08008431 	.word	0x08008431
 8008400:	08008431 	.word	0x08008431
 8008404:	08008431 	.word	0x08008431
 8008408:	08008437 	.word	0x08008437
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3304      	adds	r3, #4
 8008410:	2101      	movs	r1, #1
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f97a 	bl	800970c <RCCEx_PLL2_Config>
 8008418:	4603      	mov	r3, r0
 800841a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800841c:	e00c      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3324      	adds	r3, #36	; 0x24
 8008422:	2101      	movs	r1, #1
 8008424:	4618      	mov	r0, r3
 8008426:	f001 fa23 	bl	8009870 <RCCEx_PLL3_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800842e:	e003      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
      break;
 8008434:	e000      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800843e:	4b32      	ldr	r3, [pc, #200]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008442:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800844a:	492f      	ldr	r1, [pc, #188]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800844c:	4313      	orrs	r3, r2
 800844e:	654b      	str	r3, [r1, #84]	; 0x54
 8008450:	e001      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d037      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008466:	2b05      	cmp	r3, #5
 8008468:	d820      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084b3 	.word	0x080084b3
 8008474:	08008489 	.word	0x08008489
 8008478:	0800849b 	.word	0x0800849b
 800847c:	080084b3 	.word	0x080084b3
 8008480:	080084b3 	.word	0x080084b3
 8008484:	080084b3 	.word	0x080084b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3304      	adds	r3, #4
 800848c:	2101      	movs	r1, #1
 800848e:	4618      	mov	r0, r3
 8008490:	f001 f93c 	bl	800970c <RCCEx_PLL2_Config>
 8008494:	4603      	mov	r3, r0
 8008496:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008498:	e00c      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3324      	adds	r3, #36	; 0x24
 800849e:	2101      	movs	r1, #1
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 f9e5 	bl	8009870 <RCCEx_PLL3_Config>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
      break;
 80084b0:	e000      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80084b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084ba:	4b13      	ldr	r3, [pc, #76]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084be:	f023 0207 	bic.w	r2, r3, #7
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c6:	4910      	ldr	r1, [pc, #64]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	654b      	str	r3, [r1, #84]	; 0x54
 80084cc:	e001      	b.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d040      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d827      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	0800853f 	.word	0x0800853f
 80084f4:	08008515 	.word	0x08008515
 80084f8:	08008527 	.word	0x08008527
 80084fc:	0800853f 	.word	0x0800853f
 8008500:	0800853f 	.word	0x0800853f
 8008504:	0800853f 	.word	0x0800853f
 8008508:	58024400 	.word	0x58024400
 800850c:	58024800 	.word	0x58024800
 8008510:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	2101      	movs	r1, #1
 800851a:	4618      	mov	r0, r3
 800851c:	f001 f8f6 	bl	800970c <RCCEx_PLL2_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008524:	e00c      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3324      	adds	r3, #36	; 0x24
 800852a:	2101      	movs	r1, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f001 f99f 	bl	8009870 <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008536:	e003      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
      break;
 800853c:	e000      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800853e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008546:	4bb2      	ldr	r3, [pc, #712]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854a:	f023 0207 	bic.w	r2, r3, #7
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008554:	49ae      	ldr	r1, [pc, #696]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008556:	4313      	orrs	r3, r2
 8008558:	658b      	str	r3, [r1, #88]	; 0x58
 800855a:	e001      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d044      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008576:	d01b      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857c:	d805      	bhi.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d022      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008586:	d00a      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008588:	e01b      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858e:	d01d      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008594:	d01c      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800859a:	d01b      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800859c:	e011      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 f8b1 	bl	800970c <RCCEx_PLL2_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80085ae:	e012      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3324      	adds	r3, #36	; 0x24
 80085b4:	2102      	movs	r1, #2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 f95a 	bl	8009870 <RCCEx_PLL3_Config>
 80085bc:	4603      	mov	r3, r0
 80085be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80085c0:	e009      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
      break;
 80085c6:	e006      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80085c8:	bf00      	nop
 80085ca:	e004      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80085cc:	bf00      	nop
 80085ce:	e002      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80085d0:	bf00      	nop
 80085d2:	e000      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80085d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085dc:	4b8c      	ldr	r3, [pc, #560]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ea:	4989      	ldr	r1, [pc, #548]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	654b      	str	r3, [r1, #84]	; 0x54
 80085f0:	e001      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d044      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800860c:	d01b      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800860e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008612:	d805      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d022      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861c:	d00a      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800861e:	e01b      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008624:	d01d      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008626:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800862a:	d01c      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800862c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008630:	d01b      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008632:	e011      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f001 f866 	bl	800970c <RCCEx_PLL2_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008644:	e012      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3324      	adds	r3, #36	; 0x24
 800864a:	2102      	movs	r1, #2
 800864c:	4618      	mov	r0, r3
 800864e:	f001 f90f 	bl	8009870 <RCCEx_PLL3_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008656:	e009      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
      break;
 800865c:	e006      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800865e:	bf00      	nop
 8008660:	e004      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008662:	bf00      	nop
 8008664:	e002      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800866a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008672:	4b67      	ldr	r3, [pc, #412]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008676:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008680:	4963      	ldr	r1, [pc, #396]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008682:	4313      	orrs	r3, r2
 8008684:	658b      	str	r3, [r1, #88]	; 0x58
 8008686:	e001      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008694:	2b00      	cmp	r3, #0
 8008696:	d044      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800869e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a2:	d01b      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80086a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a8:	d805      	bhi.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d022      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b2:	d00a      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086b4:	e01b      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80086b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ba:	d01d      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80086bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086c0:	d01c      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80086c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086c6:	d01b      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80086c8:	e011      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f81b 	bl	800970c <RCCEx_PLL2_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80086da:	e012      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3324      	adds	r3, #36	; 0x24
 80086e0:	2102      	movs	r1, #2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 f8c4 	bl	8009870 <RCCEx_PLL3_Config>
 80086e8:	4603      	mov	r3, r0
 80086ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80086ec:	e009      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
      break;
 80086f2:	e006      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80086f4:	bf00      	nop
 80086f6:	e004      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80086f8:	bf00      	nop
 80086fa:	e002      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008708:	4b41      	ldr	r3, [pc, #260]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800870a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008716:	493e      	ldr	r1, [pc, #248]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008718:	4313      	orrs	r3, r2
 800871a:	658b      	str	r3, [r1, #88]	; 0x58
 800871c:	e001      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01a      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d10a      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3324      	adds	r3, #36	; 0x24
 800873e:	2102      	movs	r1, #2
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f895 	bl	8009870 <RCCEx_PLL3_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008750:	4b2f      	ldr	r3, [pc, #188]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800875e:	492c      	ldr	r1, [pc, #176]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008760:	4313      	orrs	r3, r2
 8008762:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0310 	and.w	r3, r3, #16
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877a:	d10a      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3324      	adds	r3, #36	; 0x24
 8008780:	2102      	movs	r1, #2
 8008782:	4618      	mov	r0, r3
 8008784:	f001 f874 	bl	8009870 <RCCEx_PLL3_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008792:	4b1f      	ldr	r3, [pc, #124]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087a0:	491b      	ldr	r1, [pc, #108]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d032      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087bc:	d00d      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80087be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c2:	d016      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d111      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 ff9c 	bl	800970c <RCCEx_PLL2_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80087d8:	e00c      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3324      	adds	r3, #36	; 0x24
 80087de:	2102      	movs	r1, #2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f845 	bl	8009870 <RCCEx_PLL3_Config>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10c      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008808:	4901      	ldr	r1, [pc, #4]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800880a:	4313      	orrs	r3, r2
 800880c:	658b      	str	r3, [r1, #88]	; 0x58
 800880e:	e003      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d02f      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800882e:	d00c      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008834:	d015      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883a:	d10f      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800883c:	4b79      	ldr	r3, [pc, #484]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a78      	ldr	r2, [pc, #480]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008848:	e00c      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3324      	adds	r3, #36	; 0x24
 800884e:	2101      	movs	r1, #1
 8008850:	4618      	mov	r0, r3
 8008852:	f001 f80d 	bl	8009870 <RCCEx_PLL3_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800885a:	e003      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]
      break;
 8008860:	e000      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800886a:	4b6e      	ldr	r3, [pc, #440]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800886c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008878:	496a      	ldr	r1, [pc, #424]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800887a:	4313      	orrs	r3, r2
 800887c:	654b      	str	r3, [r1, #84]	; 0x54
 800887e:	e001      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d029      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889c:	d007      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800889e:	e00f      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a0:	4b60      	ldr	r3, [pc, #384]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	4a5f      	ldr	r2, [pc, #380]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80088ac:	e00b      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3304      	adds	r3, #4
 80088b2:	2102      	movs	r1, #2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 ff29 	bl	800970c <RCCEx_PLL2_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80088be:	e002      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	75fb      	strb	r3, [r7, #23]
      break;
 80088c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088cc:	4b55      	ldr	r3, [pc, #340]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d8:	4952      	ldr	r1, [pc, #328]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088de:	e001      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3324      	adds	r3, #36	; 0x24
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 ffba 	bl	8009870 <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d02f      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891a:	d00c      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008920:	d802      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d011      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008926:	e00d      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892c:	d00f      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800892e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008932:	d00e      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008934:	e006      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008936:	4b3b      	ldr	r3, [pc, #236]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	4a3a      	ldr	r2, [pc, #232]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800893c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008942:	e007      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	75fb      	strb	r3, [r7, #23]
      break;
 8008948:	e004      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800894a:	bf00      	nop
 800894c:	e002      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800894e:	bf00      	nop
 8008950:	e000      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800895a:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800895c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008966:	492f      	ldr	r1, [pc, #188]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008968:	4313      	orrs	r3, r2
 800896a:	654b      	str	r3, [r1, #84]	; 0x54
 800896c:	e001      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800897e:	4b29      	ldr	r3, [pc, #164]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008982:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898a:	4926      	ldr	r1, [pc, #152]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800898c:	4313      	orrs	r3, r2
 800898e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d009      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800899c:	4b21      	ldr	r3, [pc, #132]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089aa:	491e      	ldr	r1, [pc, #120]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d008      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089bc:	4b19      	ldr	r3, [pc, #100]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c8:	4916      	ldr	r1, [pc, #88]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00d      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089da:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	4a11      	ldr	r2, [pc, #68]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089e4:	6113      	str	r3, [r2, #16]
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089f0:	490c      	ldr	r1, [pc, #48]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da08      	bge.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0a:	4906      	ldr	r1, [pc, #24]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008a10:	7dbb      	ldrb	r3, [r7, #22]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e000      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	58024400 	.word	0x58024400

08008a28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b090      	sub	sp, #64	; 0x40
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a36:	d150      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008a38:	4ba1      	ldr	r3, [pc, #644]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d844      	bhi.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a65 	.word	0x08008a65
 8008a54:	08008a75 	.word	0x08008a75
 8008a58:	08008a85 	.word	0x08008a85
 8008a5c:	08008acd 	.word	0x08008acd
 8008a60:	08008a95 	.word	0x08008a95
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fd03 	bl	8009474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a72:	e241      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a74:	f107 0318 	add.w	r3, r7, #24
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fa63 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a82:	e239      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a84:	f107 030c 	add.w	r3, r7, #12
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fba7 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a92:	e231      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a94:	4b8a      	ldr	r3, [pc, #552]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008aa4:	4b87      	ldr	r3, [pc, #540]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008aa8:	e226      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab0:	d102      	bne.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008ab2:	4b85      	ldr	r3, [pc, #532]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab6:	e21f      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abe:	d102      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008ac0:	4b82      	ldr	r3, [pc, #520]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac4:	e218      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aca:	e215      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008acc:	4b80      	ldr	r3, [pc, #512]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ad0:	e212      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ad6:	bf00      	nop
 8008ad8:	e20e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae0:	d14f      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008ae2:	4b77      	ldr	r3, [pc, #476]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2b80      	cmp	r3, #128	; 0x80
 8008af0:	d01c      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d804      	bhi.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d008      	beq.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	d00e      	beq.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008afe:	e03c      	b.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008b00:	2bc0      	cmp	r3, #192	; 0xc0
 8008b02:	d037      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b08:	d018      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008b0a:	e036      	b.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fcaf 	bl	8009474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b1a:	e1ed      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b1c:	f107 0318 	add.w	r3, r7, #24
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fa0f 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b2a:	e1e5      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b2c:	f107 030c 	add.w	r3, r7, #12
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fb53 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b3a:	e1dd      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b3c:	4b60      	ldr	r3, [pc, #384]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008b4c:	4b5d      	ldr	r3, [pc, #372]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008b50:	e1d2      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b58:	d102      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008b5a:	4b5b      	ldr	r3, [pc, #364]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b5e:	e1cb      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b66:	d102      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008b68:	4b58      	ldr	r3, [pc, #352]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b6c:	e1c4      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b72:	e1c1      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b74:	4b56      	ldr	r3, [pc, #344]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b78:	e1be      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b7e:	bf00      	nop
 8008b80:	e1ba      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b88:	d153      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008b8a:	4b4d      	ldr	r3, [pc, #308]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008b92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b9a:	d01f      	beq.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ba0:	d805      	bhi.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008baa:	d00f      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008bac:	e03d      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008bae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bb2:	d037      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008bb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb8:	d018      	beq.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008bba:	e036      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fc57 	bl	8009474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bca:	e195      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bcc:	f107 0318 	add.w	r3, r7, #24
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f9b7 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bda:	e18d      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bdc:	f107 030c 	add.w	r3, r7, #12
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fafb 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bea:	e185      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bec:	4b34      	ldr	r3, [pc, #208]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008bfc:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c00:	e17a      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c08:	d102      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008c0a:	4b2f      	ldr	r3, [pc, #188]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c0e:	e173      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c16:	d102      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008c18:	4b2c      	ldr	r3, [pc, #176]	; (8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c1c:	e16c      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c22:	e169      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c24:	4b2a      	ldr	r3, [pc, #168]	; (8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c28:	e166      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c2e:	bf00      	nop
 8008c30:	e162      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c38:	d15d      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008c3a:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c4a:	d01f      	beq.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c50:	d805      	bhi.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008c56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c5a:	d00f      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008c5c:	e047      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008c5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c62:	d041      	beq.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c68:	d018      	beq.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008c6a:	e040      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fbff 	bl	8009474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7a:	e13d      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7c:	f107 0318 	add.w	r3, r7, #24
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f95f 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8a:	e135      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c8c:	f107 030c 	add.w	r3, r7, #12
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 faa3 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9a:	e12d      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c9c:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ca4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d102      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008cb0:	e122      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008cba:	4b03      	ldr	r3, [pc, #12]	; (8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cbe:	e11b      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	03d09000 	.word	0x03d09000
 8008cc8:	003d0900 	.word	0x003d0900
 8008ccc:	00f42400 	.word	0x00f42400
 8008cd0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cda:	d102      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008cdc:	4b89      	ldr	r3, [pc, #548]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce0:	e10a      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce6:	e107      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ce8:	4b87      	ldr	r3, [pc, #540]	; (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cec:	e104      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf2:	bf00      	nop
 8008cf4:	e100      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfc:	d153      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008cfe:	4b83      	ldr	r3, [pc, #524]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0e:	d01f      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d14:	d805      	bhi.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	d00f      	beq.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008d20:	e03d      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008d22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d26:	d037      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d2c:	d018      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008d2e:	e036      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fb9d 	bl	8009474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3e:	e0db      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d40:	f107 0318 	add.w	r3, r7, #24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f8fd 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d4e:	e0d3      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d50:	f107 030c 	add.w	r3, r7, #12
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fa41 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5e:	e0cb      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d60:	4b6a      	ldr	r3, [pc, #424]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d70:	4b67      	ldr	r3, [pc, #412]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d74:	e0c0      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d7c:	d102      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008d7e:	4b65      	ldr	r3, [pc, #404]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d82:	e0b9      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8a:	d102      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008d8c:	4b5d      	ldr	r3, [pc, #372]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d90:	e0b2      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d96:	e0af      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d98:	4b5b      	ldr	r3, [pc, #364]	; (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d9c:	e0ac      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008da2:	bf00      	nop
 8008da4:	e0a8      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dac:	d13d      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008dae:	4b57      	ldr	r3, [pc, #348]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbe:	d00c      	beq.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dc4:	d011      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d12b      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0318 	add.w	r3, r7, #24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f8b8 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd8:	e08e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dda:	f107 030c 	add.w	r3, r7, #12
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f9fc 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de8:	e086      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dea:	4b48      	ldr	r3, [pc, #288]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008dfa:	4b45      	ldr	r3, [pc, #276]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008dfe:	e07b      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e06:	d102      	bne.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008e08:	4b42      	ldr	r3, [pc, #264]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e0c:	e074      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e14:	d102      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008e16:	4b3b      	ldr	r3, [pc, #236]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1a:	e06d      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e20:	e06a      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e26:	bf00      	nop
 8008e28:	e066      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e30:	d11f      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e32:	4b36      	ldr	r3, [pc, #216]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e46:	d008      	beq.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008e48:	e00f      	b.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fb10 	bl	8009474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e58:	e04e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e5a:	f107 0318 	add.w	r3, r7, #24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f870 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e68:	e046      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e6e:	bf00      	nop
 8008e70:	e042      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e78:	d13c      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e8a:	d01e      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e90:	d805      	bhi.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e9a:	d00e      	beq.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008e9c:	e026      	b.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d01d      	beq.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ea8:	d01d      	beq.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eae:	d014      	beq.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008eb0:	e01c      	b.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008eb2:	f000 f831 	bl	8008f18 <HAL_RCCEx_GetD3PCLK1Freq>
 8008eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008eb8:	e01e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eba:	f107 0318 	add.w	r3, r7, #24
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f840 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec8:	e016      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eca:	f107 030c 	add.w	r3, r7, #12
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 f984 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed8:	e00e      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008eda:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ede:	e00b      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008ee0:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ee4:	e008      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eea:	e005      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef0:	bf00      	nop
 8008ef2:	e001      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3740      	adds	r7, #64	; 0x40
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	00f42400 	.word	0x00f42400
 8008f08:	00bb8000 	.word	0x00bb8000
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	003d0900 	.word	0x003d0900

08008f18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f1c:	f7fe fdf8 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 8008f20:	4601      	mov	r1, r0
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	091b      	lsrs	r3, r3, #4
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f2e:	5cd3      	ldrb	r3, [r2, r3]
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	080150e4 	.word	0x080150e4

08008f44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b089      	sub	sp, #36	; 0x24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f4c:	4b9d      	ldr	r3, [pc, #628]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008f56:	4b9b      	ldr	r3, [pc, #620]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	0b1b      	lsrs	r3, r3, #12
 8008f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f62:	4b98      	ldr	r3, [pc, #608]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	091b      	lsrs	r3, r3, #4
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f6e:	4b95      	ldr	r3, [pc, #596]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	08db      	lsrs	r3, r3, #3
 8008f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 810a 	beq.w	80091a6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d05a      	beq.n	800904e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d302      	bcc.n	8008fa2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d078      	beq.n	8009092 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008fa0:	e099      	b.n	80090d6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fa2:	4b88      	ldr	r3, [pc, #544]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0320 	and.w	r3, r3, #32
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d02d      	beq.n	800900a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fae:	4b85      	ldr	r3, [pc, #532]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	08db      	lsrs	r3, r3, #3
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	4a83      	ldr	r2, [pc, #524]	; (80091c8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008fba:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd8:	4b7a      	ldr	r3, [pc, #488]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80091cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009004:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009008:	e087      	b.n	800911a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009014:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80091d0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800901c:	4b69      	ldr	r3, [pc, #420]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009030:	eddf 5a66 	vldr	s11, [pc, #408]	; 80091cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009048:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800904c:	e065      	b.n	800911a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009058:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800905c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009060:	4b58      	ldr	r3, [pc, #352]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009070:	ed97 6a03 	vldr	s12, [r7, #12]
 8009074:	eddf 5a55 	vldr	s11, [pc, #340]	; 80091cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009090:	e043      	b.n	800911a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	ee07 3a90 	vmov	s15, r3
 8009098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80090a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a4:	4b47      	ldr	r3, [pc, #284]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ac:	ee07 3a90 	vmov	s15, r3
 80090b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80091cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80090bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d4:	e021      	b.n	800911a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	ee07 3a90 	vmov	s15, r3
 80090dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80090e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e8:	4b36      	ldr	r3, [pc, #216]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f0:	ee07 3a90 	vmov	s15, r3
 80090f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80091cc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009114:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009118:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800911a:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	0a5b      	lsrs	r3, r3, #9
 8009120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009124:	ee07 3a90 	vmov	s15, r3
 8009128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009134:	edd7 6a07 	vldr	s13, [r7, #28]
 8009138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800913c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009140:	ee17 2a90 	vmov	r2, s15
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	0c1b      	lsrs	r3, r3, #16
 800914e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800915e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009162:	edd7 6a07 	vldr	s13, [r7, #28]
 8009166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800916a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800916e:	ee17 2a90 	vmov	r2, s15
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009176:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	0e1b      	lsrs	r3, r3, #24
 800917c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800918c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009190:	edd7 6a07 	vldr	s13, [r7, #28]
 8009194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800919c:	ee17 2a90 	vmov	r2, s15
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80091a4:	e008      	b.n	80091b8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	609a      	str	r2, [r3, #8]
}
 80091b8:	bf00      	nop
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	58024400 	.word	0x58024400
 80091c8:	03d09000 	.word	0x03d09000
 80091cc:	46000000 	.word	0x46000000
 80091d0:	4c742400 	.word	0x4c742400
 80091d4:	4a742400 	.word	0x4a742400
 80091d8:	4b742400 	.word	0x4b742400

080091dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80091dc:	b480      	push	{r7}
 80091de:	b089      	sub	sp, #36	; 0x24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091e4:	4b9d      	ldr	r3, [pc, #628]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80091e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80091ee:	4b9b      	ldr	r3, [pc, #620]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	0d1b      	lsrs	r3, r3, #20
 80091f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80091fa:	4b98      	ldr	r3, [pc, #608]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009206:	4b95      	ldr	r3, [pc, #596]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920a:	08db      	lsrs	r3, r3, #3
 800920c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	fb02 f303 	mul.w	r3, r2, r3
 8009216:	ee07 3a90 	vmov	s15, r3
 800921a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 810a 	beq.w	800943e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d05a      	beq.n	80092e6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009230:	2b01      	cmp	r3, #1
 8009232:	d302      	bcc.n	800923a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009234:	2b02      	cmp	r3, #2
 8009236:	d078      	beq.n	800932a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009238:	e099      	b.n	800936e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800923a:	4b88      	ldr	r3, [pc, #544]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b00      	cmp	r3, #0
 8009244:	d02d      	beq.n	80092a2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009246:	4b85      	ldr	r3, [pc, #532]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	08db      	lsrs	r3, r3, #3
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	4a83      	ldr	r2, [pc, #524]	; (8009460 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009252:	fa22 f303 	lsr.w	r3, r2, r3
 8009256:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	ee07 3a90 	vmov	s15, r3
 800925e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	ee07 3a90 	vmov	s15, r3
 8009268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009270:	4b7a      	ldr	r3, [pc, #488]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	ed97 6a03 	vldr	s12, [r7, #12]
 8009284:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092a0:	e087      	b.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80092b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b4:	4b69      	ldr	r3, [pc, #420]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80092cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092e4:	e065      	b.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800946c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80092f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f8:	4b58      	ldr	r3, [pc, #352]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009308:	ed97 6a03 	vldr	s12, [r7, #12]
 800930c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009324:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009328:	e043      	b.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009334:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933c:	4b47      	ldr	r3, [pc, #284]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009350:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009368:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936c:	e021      	b.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009378:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800946c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800937c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009380:	4b36      	ldr	r3, [pc, #216]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009390:	ed97 6a03 	vldr	s12, [r7, #12]
 8009394:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009464 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093b0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80093b2:	4b2a      	ldr	r3, [pc, #168]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	0a5b      	lsrs	r3, r3, #9
 80093b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093bc:	ee07 3a90 	vmov	s15, r3
 80093c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d8:	ee17 2a90 	vmov	r2, s15
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80093e0:	4b1e      	ldr	r3, [pc, #120]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80093fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009406:	ee17 2a90 	vmov	r2, s15
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	0e1b      	lsrs	r3, r3, #24
 8009414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009418:	ee07 3a90 	vmov	s15, r3
 800941c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009424:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009428:	edd7 6a07 	vldr	s13, [r7, #28]
 800942c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009434:	ee17 2a90 	vmov	r2, s15
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800943c:	e008      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	609a      	str	r2, [r3, #8]
}
 8009450:	bf00      	nop
 8009452:	3724      	adds	r7, #36	; 0x24
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	58024400 	.word	0x58024400
 8009460:	03d09000 	.word	0x03d09000
 8009464:	46000000 	.word	0x46000000
 8009468:	4c742400 	.word	0x4c742400
 800946c:	4a742400 	.word	0x4a742400
 8009470:	4b742400 	.word	0x4b742400

08009474 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009474:	b480      	push	{r7}
 8009476:	b089      	sub	sp, #36	; 0x24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800947c:	4b9d      	ldr	r3, [pc, #628]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	f003 0303 	and.w	r3, r3, #3
 8009484:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009486:	4b9b      	ldr	r3, [pc, #620]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	091b      	lsrs	r3, r3, #4
 800948c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009490:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009492:	4b98      	ldr	r3, [pc, #608]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800949c:	4b95      	ldr	r3, [pc, #596]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800949e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a0:	08db      	lsrs	r3, r3, #3
 80094a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	fb02 f303 	mul.w	r3, r2, r3
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 810a 	beq.w	80096d4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d05a      	beq.n	800957c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d302      	bcc.n	80094d0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d078      	beq.n	80095c0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80094ce:	e099      	b.n	8009604 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094d0:	4b88      	ldr	r3, [pc, #544]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d02d      	beq.n	8009538 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094dc:	4b85      	ldr	r3, [pc, #532]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	08db      	lsrs	r3, r3, #3
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	4a84      	ldr	r2, [pc, #528]	; (80096f8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80094e8:	fa22 f303 	lsr.w	r3, r2, r3
 80094ec:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	ee07 3a90 	vmov	s15, r3
 80094f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009506:	4b7b      	ldr	r3, [pc, #492]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009516:	ed97 6a03 	vldr	s12, [r7, #12]
 800951a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800951e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009532:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009536:	e087      	b.n	8009648 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009542:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954a:	4b6a      	ldr	r3, [pc, #424]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955a:	ed97 6a03 	vldr	s12, [r7, #12]
 800955e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800957a:	e065      	b.n	8009648 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009704 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958e:	4b59      	ldr	r3, [pc, #356]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959e:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095be:	e043      	b.n	8009648 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009708 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b48      	ldr	r3, [pc, #288]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009602:	e021      	b.n	8009648 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009704 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b37      	ldr	r3, [pc, #220]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a03 	vldr	s12, [r7, #12]
 800962a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009646:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009648:	4b2a      	ldr	r3, [pc, #168]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800964a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964c:	0a5b      	lsrs	r3, r3, #9
 800964e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800965e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009662:	edd7 6a07 	vldr	s13, [r7, #28]
 8009666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800966e:	ee17 2a90 	vmov	r2, s15
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009676:	4b1f      	ldr	r3, [pc, #124]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800968c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009690:	edd7 6a07 	vldr	s13, [r7, #28]
 8009694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800969c:	ee17 2a90 	vmov	r2, s15
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80096a4:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	0e1b      	lsrs	r3, r3, #24
 80096aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096be:	edd7 6a07 	vldr	s13, [r7, #28]
 80096c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ca:	ee17 2a90 	vmov	r2, s15
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80096d2:	e008      	b.n	80096e6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	609a      	str	r2, [r3, #8]
}
 80096e6:	bf00      	nop
 80096e8:	3724      	adds	r7, #36	; 0x24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	58024400 	.word	0x58024400
 80096f8:	03d09000 	.word	0x03d09000
 80096fc:	46000000 	.word	0x46000000
 8009700:	4c742400 	.word	0x4c742400
 8009704:	4a742400 	.word	0x4a742400
 8009708:	4b742400 	.word	0x4b742400

0800970c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800971a:	4b53      	ldr	r3, [pc, #332]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d101      	bne.n	800972a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e099      	b.n	800985e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800972a:	4b4f      	ldr	r3, [pc, #316]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a4e      	ldr	r2, [pc, #312]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009736:	f7f8 faff 	bl	8001d38 <HAL_GetTick>
 800973a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800973c:	e008      	b.n	8009750 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800973e:	f7f8 fafb 	bl	8001d38 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d901      	bls.n	8009750 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e086      	b.n	800985e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009750:	4b45      	ldr	r3, [pc, #276]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1f0      	bne.n	800973e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800975c:	4b42      	ldr	r3, [pc, #264]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	031b      	lsls	r3, r3, #12
 800976a:	493f      	ldr	r1, [pc, #252]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 800976c:	4313      	orrs	r3, r2
 800976e:	628b      	str	r3, [r1, #40]	; 0x28
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	3b01      	subs	r3, #1
 8009776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	3b01      	subs	r3, #1
 8009780:	025b      	lsls	r3, r3, #9
 8009782:	b29b      	uxth	r3, r3
 8009784:	431a      	orrs	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	3b01      	subs	r3, #1
 800978c:	041b      	lsls	r3, r3, #16
 800978e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	3b01      	subs	r3, #1
 800979a:	061b      	lsls	r3, r3, #24
 800979c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097a0:	4931      	ldr	r1, [pc, #196]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097a6:	4b30      	ldr	r3, [pc, #192]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	492d      	ldr	r1, [pc, #180]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097b8:	4b2b      	ldr	r3, [pc, #172]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	f023 0220 	bic.w	r2, r3, #32
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	4928      	ldr	r1, [pc, #160]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097ca:	4b27      	ldr	r3, [pc, #156]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	4a26      	ldr	r2, [pc, #152]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097d0:	f023 0310 	bic.w	r3, r3, #16
 80097d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80097d6:	4b24      	ldr	r3, [pc, #144]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097da:	4b24      	ldr	r3, [pc, #144]	; (800986c <RCCEx_PLL2_Config+0x160>)
 80097dc:	4013      	ands	r3, r2
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	69d2      	ldr	r2, [r2, #28]
 80097e2:	00d2      	lsls	r2, r2, #3
 80097e4:	4920      	ldr	r1, [pc, #128]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097ea:	4b1f      	ldr	r3, [pc, #124]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097f0:	f043 0310 	orr.w	r3, r3, #16
 80097f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d106      	bne.n	800980a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	4a19      	ldr	r2, [pc, #100]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009808:	e00f      	b.n	800982a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d106      	bne.n	800981e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009810:	4b15      	ldr	r3, [pc, #84]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	4a14      	ldr	r2, [pc, #80]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800981a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800981c:	e005      	b.n	800982a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009822:	4a11      	ldr	r2, [pc, #68]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a0e      	ldr	r2, [pc, #56]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009836:	f7f8 fa7f 	bl	8001d38 <HAL_GetTick>
 800983a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800983c:	e008      	b.n	8009850 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800983e:	f7f8 fa7b 	bl	8001d38 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e006      	b.n	800985e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009850:	4b05      	ldr	r3, [pc, #20]	; (8009868 <RCCEx_PLL2_Config+0x15c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0f0      	beq.n	800983e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	58024400 	.word	0x58024400
 800986c:	ffff0007 	.word	0xffff0007

08009870 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800987e:	4b53      	ldr	r3, [pc, #332]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d101      	bne.n	800988e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e099      	b.n	80099c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800988e:	4b4f      	ldr	r3, [pc, #316]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a4e      	ldr	r2, [pc, #312]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989a:	f7f8 fa4d 	bl	8001d38 <HAL_GetTick>
 800989e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098a0:	e008      	b.n	80098b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80098a2:	f7f8 fa49 	bl	8001d38 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e086      	b.n	80099c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098b4:	4b45      	ldr	r3, [pc, #276]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f0      	bne.n	80098a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098c0:	4b42      	ldr	r3, [pc, #264]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	051b      	lsls	r3, r3, #20
 80098ce:	493f      	ldr	r1, [pc, #252]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	628b      	str	r3, [r1, #40]	; 0x28
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	3b01      	subs	r3, #1
 80098da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	025b      	lsls	r3, r3, #9
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	041b      	lsls	r3, r3, #16
 80098f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	061b      	lsls	r3, r3, #24
 8009900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009904:	4931      	ldr	r1, [pc, #196]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800990a:	4b30      	ldr	r3, [pc, #192]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	492d      	ldr	r1, [pc, #180]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009918:	4313      	orrs	r3, r2
 800991a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800991c:	4b2b      	ldr	r3, [pc, #172]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	4928      	ldr	r1, [pc, #160]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 800992a:	4313      	orrs	r3, r2
 800992c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800992e:	4b27      	ldr	r3, [pc, #156]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009932:	4a26      	ldr	r2, [pc, #152]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800993a:	4b24      	ldr	r3, [pc, #144]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 800993c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800993e:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <RCCEx_PLL3_Config+0x160>)
 8009940:	4013      	ands	r3, r2
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	69d2      	ldr	r2, [r2, #28]
 8009946:	00d2      	lsls	r2, r2, #3
 8009948:	4920      	ldr	r1, [pc, #128]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 800994a:	4313      	orrs	r3, r2
 800994c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800994e:	4b1f      	ldr	r3, [pc, #124]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	4a1e      	ldr	r2, [pc, #120]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009960:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	4a19      	ldr	r2, [pc, #100]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800996a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800996c:	e00f      	b.n	800998e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d106      	bne.n	8009982 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	4a14      	ldr	r2, [pc, #80]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 800997a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800997e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009980:	e005      	b.n	800998e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	4a11      	ldr	r2, [pc, #68]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800998c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800998e:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a0e      	ldr	r2, [pc, #56]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 8009994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999a:	f7f8 f9cd 	bl	8001d38 <HAL_GetTick>
 800999e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099a0:	e008      	b.n	80099b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099a2:	f7f8 f9c9 	bl	8001d38 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e006      	b.n	80099c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <RCCEx_PLL3_Config+0x15c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0f0      	beq.n	80099a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	58024400 	.word	0x58024400
 80099d0:	ffff0007 	.word	0xffff0007

080099d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e075      	b.n	8009ad2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7f7 fbf3 	bl	80011e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2203      	movs	r2, #3
 8009a02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f868 	bl	8009adc <HAL_SD_InitCard>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e05d      	b.n	8009ad2 <HAL_SD_Init+0xfe>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009a16:	f107 0308 	add.w	r3, r7, #8
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fd9f 	bl	800a560 <HAL_SD_GetCardStatus>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e052      	b.n	8009ad2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009a2c:	7e3b      	ldrb	r3, [r7, #24]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009a32:	7e7b      	ldrb	r3, [r7, #25]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d10a      	bne.n	8009a56 <HAL_SD_Init+0x82>
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <HAL_SD_Init+0x78>
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a52:	659a      	str	r2, [r3, #88]	; 0x58
 8009a54:	e00b      	b.n	8009a6e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d104      	bne.n	8009a68 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a64:	659a      	str	r2, [r3, #88]	; 0x58
 8009a66:	e002      	b.n	8009a6e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fe55 	bl	800a724 <HAL_SD_ConfigWideBusOperation>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e026      	b.n	8009ad2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009a84:	f7f8 f958 	bl	8001d38 <HAL_GetTick>
 8009a88:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a8a:	e011      	b.n	8009ab0 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009a8c:	f7f8 f954 	bl	8001d38 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d109      	bne.n	8009ab0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aa2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State= HAL_SD_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e010      	b.n	8009ad2 <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fee1 	bl	800a878 <HAL_SD_GetCardState>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d1e7      	bne.n	8009a8c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3728      	adds	r7, #40	; 0x28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b08d      	sub	sp, #52	; 0x34
 8009ae0:	af02      	add	r7, sp, #8
 8009ae2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009af4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009af8:	f7fe ff96 	bl	8008a28 <HAL_RCCEx_GetPeriphCLKFreq>
 8009afc:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	4a3a      	ldr	r2, [pc, #232]	; (8009bec <HAL_SD_InitCard+0x110>)
 8009b04:	fba2 2303 	umull	r2, r3, r2, r3
 8009b08:	091b      	lsrs	r3, r3, #4
 8009b0a:	61fb      	str	r3, [r7, #28]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681c      	ldr	r4, [r3, #0]
 8009b10:	466a      	mov	r2, sp
 8009b12:	f107 0318 	add.w	r3, r7, #24
 8009b16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b1a:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b1e:	f107 030c 	add.w	r3, r7, #12
 8009b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b24:	4620      	mov	r0, r4
 8009b26:	f003 fb95 	bl	800d254 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f003 fbd8 	bl	800d2e4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d008      	beq.n	8009b58 <HAL_SD_InitCard+0x7c>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009b46:	4a2a      	ldr	r2, [pc, #168]	; (8009bf0 <HAL_SD_InitCard+0x114>)
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4e:	3301      	adds	r3, #1
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7f8 f8fd 	bl	8001d50 <HAL_Delay>
 8009b56:	e002      	b.n	8009b5e <HAL_SD_InitCard+0x82>
  }
  else
  {
    HAL_Delay(2U);
 8009b58:	2002      	movs	r0, #2
 8009b5a:	f7f8 f8f9 	bl	8001d50 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 ff68 	bl	800aa34 <SD_PowerON>
 8009b64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00b      	beq.n	8009b84 <HAL_SD_InitCard+0xa8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e02e      	b.n	8009be2 <HAL_SD_InitCard+0x106>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fe97 	bl	800a8b8 <SD_InitCard>
 8009b8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <HAL_SD_InitCard+0xce>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e01b      	b.n	8009be2 <HAL_SD_InitCard+0x106>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f003 fc2c 	bl	800d410 <SDMMC_CmdBlockLength>
 8009bb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00f      	beq.n	8009be0 <HAL_SD_InitCard+0x104>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a0b      	ldr	r2, [pc, #44]	; (8009bf4 <HAL_SD_InitCard+0x118>)
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <HAL_SD_InitCard+0x106>
  }

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	372c      	adds	r7, #44	; 0x2c
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd90      	pop	{r4, r7, pc}
 8009bea:	bf00      	nop
 8009bec:	014f8b59 	.word	0x014f8b59
 8009bf0:	00012110 	.word	0x00012110
 8009bf4:	1fe00fff 	.word	0x1fe00fff

08009bf8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	; 0x30
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d107      	bne.n	8009c20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e08d      	b.n	8009d3c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	f040 8086 	bne.w	8009d3a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	635a      	str	r2, [r3, #52]	; 0x34

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	441a      	add	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d907      	bls.n	8009c52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e074      	b.n	8009d3c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2203      	movs	r2, #3
 8009c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	025a      	lsls	r2, r3, #9
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	629a      	str	r2, [r3, #40]	; 0x28

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d002      	beq.n	8009c7e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	025b      	lsls	r3, r3, #9
 8009c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	025b      	lsls	r3, r3, #9
 8009c88:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c8a:	2390      	movs	r3, #144	; 0x90
 8009c8c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f107 0210 	add.w	r2, r7, #16
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f003 fb87 	bl	800d3b8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68da      	ldr	r2, [r3, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d90a      	bls.n	8009ce6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2282      	movs	r2, #130	; 0x82
 8009cd4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f003 fbdd 	bl	800d49c <SDMMC_CmdReadMultiBlock>
 8009ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009ce4:	e009      	b.n	8009cfa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2281      	movs	r2, #129	; 0x81
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f003 fbaf 	bl	800d456 <SDMMC_CmdReadSingleBlock>
 8009cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d012      	beq.n	8009d26 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a0f      	ldr	r2, [pc, #60]	; (8009d44 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e00a      	b.n	8009d3c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009d34:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009d3a:	2302      	movs	r3, #2
  }
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3730      	adds	r7, #48	; 0x30
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	1fe00fff 	.word	0x1fe00fff

08009d48 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08c      	sub	sp, #48	; 0x30
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d107      	bne.n	8009d70 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e08d      	b.n	8009e8c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	f040 8086 	bne.w	8009e8a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	635a      	str	r2, [r3, #52]	; 0x34

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	441a      	add	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d907      	bls.n	8009da2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e074      	b.n	8009e8c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2203      	movs	r2, #3
 8009da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	025a      	lsls	r2, r3, #9
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	621a      	str	r2, [r3, #32]

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d002      	beq.n	8009dce <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	025b      	lsls	r3, r3, #9
 8009dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dce:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	025b      	lsls	r3, r3, #9
 8009dd8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009dda:	2390      	movs	r3, #144	; 0x90
 8009ddc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f107 0210 	add.w	r2, r7, #16
 8009df2:	4611      	mov	r1, r2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f003 fadf 	bl	800d3b8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e08:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2201      	movs	r2, #1
 8009e18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d90a      	bls.n	8009e36 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	22a0      	movs	r2, #160	; 0xa0
 8009e24:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f003 fb7b 	bl	800d528 <SDMMC_CmdWriteMultiBlock>
 8009e32:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009e34:	e009      	b.n	8009e4a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2290      	movs	r2, #144	; 0x90
 8009e3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e42:	4618      	mov	r0, r3
 8009e44:	f003 fb4d 	bl	800d4e2 <SDMMC_CmdWriteSingleBlock>
 8009e48:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d012      	beq.n	8009e76 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0f      	ldr	r2, [pc, #60]	; (8009e94 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e00a      	b.n	8009e8c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009e84:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e000      	b.n	8009e8c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009e8a:	2302      	movs	r3, #2
  }
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3730      	adds	r7, #48	; 0x30
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	1fe00fff 	.word	0x1fe00fff

08009e98 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <HAL_SD_IRQHandler+0x2e>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f003 0308 	and.w	r3, r3, #8
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 f8a0 	bl	800b004 <SD_Read_IT>
 8009ec4:	e19a      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80ac 	beq.w	800a02e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4b9d      	ldr	r3, [pc, #628]	; (800a160 <HAL_SD_IRQHandler+0x2c8>)
 8009eec:	400b      	ands	r3, r1
 8009eee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009efe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f0e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d038      	beq.n	8009f8c <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <HAL_SD_IRQHandler+0x96>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d011      	beq.n	8009f52 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f003 fb1c 	bl	800d570 <SDMMC_CmdStopTransfer>
 8009f38:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	431a      	orrs	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f959 	bl	800a204 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a83      	ldr	r2, [pc, #524]	; (800a164 <HAL_SD_IRQHandler+0x2cc>)
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	62da      	str	r2, [r3, #44]	; 0x2c
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <HAL_SD_IRQHandler+0xe4>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f003 ffcf 	bl	800df20 <HAL_SD_RxCpltCallback>
 8009f82:	e13b      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f003 ffc1 	bl	800df0c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f8a:	e137      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 8132 	beq.w	800a1fc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2200      	movs	r2, #0
 8009fae:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d104      	bne.n	8009fc4 <HAL_SD_IRQHandler+0x12c>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d011      	beq.n	8009fe8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f003 fad1 	bl	800d570 <SDMMC_CmdStopTransfer>
 8009fce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f90e 	bl	800a204 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	62da      	str	r2, [r3, #44]	; 0x2c
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f003 0310 	and.w	r3, r3, #16
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d104      	bne.n	800a00a <HAL_SD_IRQHandler+0x172>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f003 ff7e 	bl	800df0c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d105      	bne.n	800a026 <HAL_SD_IRQHandler+0x18e>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80eb 	beq.w	800a1fc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f003 ff7a 	bl	800df20 <HAL_SD_RxCpltCallback>
}
 800a02c:	e0e6      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <HAL_SD_IRQHandler+0x1b6>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 f822 	bl	800b090 <SD_Write_IT>
 800a04c:	e0d6      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a054:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 80a2 	beq.w	800a1a2 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	f043 0202 	orr.w	r2, r3, #2
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d005      	beq.n	800a092 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08a:	f043 0208 	orr.w	r2, r3, #8
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a4:	f043 0220 	orr.w	r2, r3, #32
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b2:	f003 0310 	and.w	r3, r3, #16
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0be:	f043 0210 	orr.w	r2, r3, #16
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a26      	ldr	r2, [pc, #152]	; (800a164 <HAL_SD_IRQHandler+0x2cc>)
 800a0cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a0dc:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ec:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a10c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f003 fa2c 	bl	800d570 <SDMMC_CmdStopTransfer>
 800a118:	4602      	mov	r2, r0
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a132:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a13c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f003 0308 	and.w	r3, r3, #8
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00f      	beq.n	800a168 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f854 	bl	800a204 <HAL_SD_ErrorCallback>
}
 800a15c:	e04e      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
 800a15e:	bf00      	nop
 800a160:	ffff3ec5 	.word	0xffff3ec5
 800a164:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d044      	beq.n	800a1fc <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a176:	2b00      	cmp	r3, #0
 800a178:	d040      	beq.n	800a1fc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a188:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2200      	movs	r2, #0
 800a190:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f832 	bl	800a204 <HAL_SD_ErrorCallback>
}
 800a1a0:	e02c      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d025      	beq.n	800a1fc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10c      	bne.n	800a1e2 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f003 0320 	and.w	r3, r3, #32
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 ffc4 	bl	800b160 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a1d8:	e010      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 ffac 	bl	800b138 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a1e0:	e00c      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f003 0320 	and.w	r3, r3, #32
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 ffad 	bl	800b14c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a1f2:	e003      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 ff95 	bl	800b124 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a1fa:	e7ff      	b.n	800a1fc <HAL_SD_IRQHandler+0x364>
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a226:	0f9b      	lsrs	r3, r3, #30
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a232:	0e9b      	lsrs	r3, r3, #26
 800a234:	b2db      	uxtb	r3, r3
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a244:	0e1b      	lsrs	r3, r3, #24
 800a246:	b2db      	uxtb	r3, r3
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a256:	0c1b      	lsrs	r3, r3, #16
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	b2da      	uxtb	r2, r3
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a278:	0d1b      	lsrs	r3, r3, #20
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a284:	0c1b      	lsrs	r3, r3, #16
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 030f 	and.w	r3, r3, #15
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a296:	0bdb      	lsrs	r3, r3, #15
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2a8:	0b9b      	lsrs	r3, r3, #14
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ba:	0b5b      	lsrs	r3, r3, #13
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2cc:	0b1b      	lsrs	r3, r3, #12
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d163      	bne.n	800a3b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ec:	009a      	lsls	r2, r3, #2
 800a2ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a2f8:	0f92      	lsrs	r2, r2, #30
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a304:	0edb      	lsrs	r3, r3, #27
 800a306:	b2db      	uxtb	r3, r3
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a316:	0e1b      	lsrs	r3, r3, #24
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a328:	0d5b      	lsrs	r3, r3, #21
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f003 0307 	and.w	r3, r3, #7
 800a330:	b2da      	uxtb	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a33a:	0c9b      	lsrs	r3, r3, #18
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	b2da      	uxtb	r2, r3
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a34c:	0bdb      	lsrs	r3, r3, #15
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	b2da      	uxtb	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	7e1b      	ldrb	r3, [r3, #24]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	f003 0307 	and.w	r3, r3, #7
 800a36e:	3302      	adds	r3, #2
 800a370:	2201      	movs	r2, #1
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a37a:	fb02 f203 	mul.w	r2, r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	7a1b      	ldrb	r3, [r3, #8]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f003 030f 	and.w	r3, r3, #15
 800a38c:	2201      	movs	r2, #1
 800a38e:	409a      	lsls	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a39c:	0a52      	lsrs	r2, r2, #9
 800a39e:	fb02 f203 	mul.w	r2, r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3ac:	655a      	str	r2, [r3, #84]	; 0x54
 800a3ae:	e031      	b.n	800a414 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d11d      	bne.n	800a3f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3bc:	041b      	lsls	r3, r3, #16
 800a3be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3c6:	0c1b      	lsrs	r3, r3, #16
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	029a      	lsls	r2, r3, #10
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	655a      	str	r2, [r3, #84]	; 0x54
 800a3f2:	e00f      	b.n	800a414 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a58      	ldr	r2, [pc, #352]	; (800a55c <HAL_SD_GetCardCSD+0x344>)
 800a3fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e09d      	b.n	800a550 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a418:	0b9b      	lsrs	r3, r3, #14
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	b2da      	uxtb	r2, r3
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a42a:	09db      	lsrs	r3, r3, #7
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a432:	b2da      	uxtb	r2, r3
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a442:	b2da      	uxtb	r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a44c:	0fdb      	lsrs	r3, r3, #31
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a458:	0f5b      	lsrs	r3, r3, #29
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0303 	and.w	r3, r3, #3
 800a460:	b2da      	uxtb	r2, r3
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a46a:	0e9b      	lsrs	r3, r3, #26
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	b2da      	uxtb	r2, r3
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a47c:	0d9b      	lsrs	r3, r3, #22
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	b2da      	uxtb	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a48e:	0d5b      	lsrs	r3, r3, #21
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	b2da      	uxtb	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4aa:	0c1b      	lsrs	r3, r3, #16
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4be:	0bdb      	lsrs	r3, r3, #15
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4d2:	0b9b      	lsrs	r3, r3, #14
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4e6:	0b5b      	lsrs	r3, r3, #13
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4fa:	0b1b      	lsrs	r3, r3, #12
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	b2da      	uxtb	r2, r3
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a50e:	0a9b      	lsrs	r3, r3, #10
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	b2da      	uxtb	r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	b2db      	uxtb	r3, r3
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	1fe00fff 	.word	0x1fe00fff

0800a560 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b094      	sub	sp, #80	; 0x50
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a570:	f107 0308 	add.w	r3, r7, #8
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fae6 	bl	800ab48 <SD_SendSDStatus>
 800a57c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a580:	2b00      	cmp	r3, #0
 800a582:	d011      	beq.n	800a5a8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a4f      	ldr	r2, [pc, #316]	; (800a6c8 <HAL_SD_GetCardStatus+0x168>)
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a592:	431a      	orrs	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a5a6:	e070      	b.n	800a68a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	099b      	lsrs	r3, r3, #6
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	0a1b      	lsrs	r3, r3, #8
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	0e1b      	lsrs	r3, r3, #24
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	061a      	lsls	r2, r3, #24
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	0e1b      	lsrs	r3, r3, #24
 800a5fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	b2da      	uxtb	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	0d1b      	lsrs	r3, r3, #20
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	f003 030f 	and.w	r3, r3, #15
 800a620:	b2da      	uxtb	r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a630:	b29a      	uxth	r2, r3
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	b29b      	uxth	r3, r3
 800a636:	b2db      	uxtb	r3, r3
 800a638:	b29b      	uxth	r3, r3
 800a63a:	4313      	orrs	r3, r2
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	0a9b      	lsrs	r3, r3, #10
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	0a1b      	lsrs	r3, r3, #8
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	091b      	lsrs	r3, r3, #4
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	f003 030f 	and.w	r3, r3, #15
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	0e1b      	lsrs	r3, r3, #24
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a692:	4618      	mov	r0, r3
 800a694:	f002 febc 	bl	800d410 <SDMMC_CmdBlockLength>
 800a698:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a69a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00d      	beq.n	800a6bc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a08      	ldr	r2, [pc, #32]	; (800a6c8 <HAL_SD_GetCardStatus+0x168>)
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ac:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a6bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3750      	adds	r7, #80	; 0x50
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	1fe00fff 	.word	0x1fe00fff

0800a6cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a724:	b590      	push	{r4, r7, lr}
 800a726:	b08d      	sub	sp, #52	; 0x34
 800a728:	af02      	add	r7, sp, #8
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2203      	movs	r2, #3
 800a738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	2b03      	cmp	r3, #3
 800a742:	d02e      	beq.n	800a7a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a74a:	d106      	bne.n	800a75a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	635a      	str	r2, [r3, #52]	; 0x34
 800a758:	e029      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a760:	d10a      	bne.n	800a778 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fae8 	bl	800ad38 <SD_WideBus_Enable>
 800a768:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	635a      	str	r2, [r3, #52]	; 0x34
 800a776:	e01a      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fb25 	bl	800adce <SD_WideBus_Disable>
 800a784:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	635a      	str	r2, [r3, #52]	; 0x34
 800a792:	e00c      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a798:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	635a      	str	r2, [r3, #52]	; 0x34
 800a7a0:	e005      	b.n	800a7ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d007      	beq.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a2e      	ldr	r2, [pc, #184]	; (800a874 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a7bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7c4:	e034      	b.n	800a830 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d903      	bls.n	800a7ec <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	61fb      	str	r3, [r7, #28]
 800a7ea:	e012      	b.n	800a812 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f4:	d103      	bne.n	800a7fe <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e009      	b.n	800a812 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a806:	d102      	bne.n	800a80e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a808:	2302      	movs	r3, #2
 800a80a:	61fb      	str	r3, [r7, #28]
 800a80c:	e001      	b.n	800a812 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a80e:	2304      	movs	r3, #4
 800a810:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681c      	ldr	r4, [r3, #0]
 800a816:	466a      	mov	r2, sp
 800a818:	f107 0318 	add.w	r3, r7, #24
 800a81c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a820:	e882 0003 	stmia.w	r2, {r0, r1}
 800a824:	f107 030c 	add.w	r3, r7, #12
 800a828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a82a:	4620      	mov	r0, r4
 800a82c:	f002 fd12 	bl	800d254 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a838:	4618      	mov	r0, r3
 800a83a:	f002 fde9 	bl	800d410 <SDMMC_CmdBlockLength>
 800a83e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00c      	beq.n	800a860 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a0a      	ldr	r2, [pc, #40]	; (800a874 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	372c      	adds	r7, #44	; 0x2c
 800a870:	46bd      	mov	sp, r7
 800a872:	bd90      	pop	{r4, r7, pc}
 800a874:	1fe00fff 	.word	0x1fe00fff

0800a878 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a884:	f107 030c 	add.w	r3, r7, #12
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa2c 	bl	800ace8 <SD_SendStatus>
 800a890:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	0a5b      	lsrs	r3, r3, #9
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a8ae:	693b      	ldr	r3, [r7, #16]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b091      	sub	sp, #68	; 0x44
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f002 fd1c 	bl	800d306 <SDMMC_GetPowerState>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d102      	bne.n	800a8da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a8d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a8d8:	e0a8      	b.n	800aa2c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d02e      	beq.n	800a940 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f002 ff68 	bl	800d7bc <SDMMC_CmdSendCID>
 800a8ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <SD_InitCard+0x40>
    {
      return errorstate;
 800a8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f6:	e099      	b.n	800aa2c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f002 fd47 	bl	800d392 <SDMMC_GetResponse>
 800a904:	4602      	mov	r2, r0
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2104      	movs	r1, #4
 800a910:	4618      	mov	r0, r3
 800a912:	f002 fd3e 	bl	800d392 <SDMMC_GetResponse>
 800a916:	4602      	mov	r2, r0
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2108      	movs	r1, #8
 800a922:	4618      	mov	r0, r3
 800a924:	f002 fd35 	bl	800d392 <SDMMC_GetResponse>
 800a928:	4602      	mov	r2, r0
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	210c      	movs	r1, #12
 800a934:	4618      	mov	r0, r3
 800a936:	f002 fd2c 	bl	800d392 <SDMMC_GetResponse>
 800a93a:	4602      	mov	r2, r0
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	2b03      	cmp	r3, #3
 800a946:	d00d      	beq.n	800a964 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f107 020e 	add.w	r2, r7, #14
 800a950:	4611      	mov	r1, r2
 800a952:	4618      	mov	r0, r3
 800a954:	f002 ff71 	bl	800d83a <SDMMC_CmdSetRelAdd>
 800a958:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <SD_InitCard+0xac>
    {
      return errorstate;
 800a960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a962:	e063      	b.n	800aa2c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d036      	beq.n	800a9da <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	461a      	mov	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97c:	041b      	lsls	r3, r3, #16
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f002 ff3a 	bl	800d7fa <SDMMC_CmdSendCSD>
 800a986:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <SD_InitCard+0xda>
    {
      return errorstate;
 800a98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a990:	e04c      	b.n	800aa2c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2100      	movs	r1, #0
 800a998:	4618      	mov	r0, r3
 800a99a:	f002 fcfa 	bl	800d392 <SDMMC_GetResponse>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f002 fcf1 	bl	800d392 <SDMMC_GetResponse>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2108      	movs	r1, #8
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f002 fce8 	bl	800d392 <SDMMC_GetResponse>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	210c      	movs	r1, #12
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f002 fcdf 	bl	800d392 <SDMMC_GetResponse>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2104      	movs	r1, #4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f002 fcd6 	bl	800d392 <SDMMC_GetResponse>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	0d1a      	lsrs	r2, r3, #20
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a9ee:	f107 0310 	add.w	r3, r7, #16
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff fc0f 	bl	800a218 <HAL_SD_GetCardCSD>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aa04:	e012      	b.n	800aa2c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0e:	041b      	lsls	r3, r3, #16
 800aa10:	f04f 0400 	mov.w	r4, #0
 800aa14:	461a      	mov	r2, r3
 800aa16:	4623      	mov	r3, r4
 800aa18:	4608      	mov	r0, r1
 800aa1a:	f002 fde5 	bl	800d5e8 <SDMMC_CmdSelDesel>
 800aa1e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <SD_InitCard+0x172>
  {
    return errorstate;
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	e000      	b.n	800aa2c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3744      	adds	r7, #68	; 0x44
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd90      	pop	{r4, r7, pc}

0800aa34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f002 fdef 	bl	800d630 <SDMMC_CmdGoIdleState>
 800aa52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <SD_PowerON+0x2a>
  {
    return errorstate;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	e06e      	b.n	800ab3c <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f002 fe02 	bl	800d66c <SDMMC_CmdOperCond>
 800aa68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00d      	beq.n	800aa8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f002 fdd8 	bl	800d630 <SDMMC_CmdGoIdleState>
 800aa80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <SD_PowerON+0x5e>
    {
      return errorstate;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	e057      	b.n	800ab3c <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d137      	bne.n	800ab0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f002 fe03 	bl	800d6ac <SDMMC_CmdAppCommand>
 800aaa6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d02d      	beq.n	800ab0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aab2:	e043      	b.n	800ab3c <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2100      	movs	r1, #0
 800aaba:	4618      	mov	r0, r3
 800aabc:	f002 fdf6 	bl	800d6ac <SDMMC_CmdAppCommand>
 800aac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <SD_PowerON+0x98>
    {
      return errorstate;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	e037      	b.n	800ab3c <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	491c      	ldr	r1, [pc, #112]	; (800ab44 <SD_PowerON+0x110>)
 800aad2:	4618      	mov	r0, r3
 800aad4:	f002 fe0d 	bl	800d6f2 <SDMMC_CmdAppOperCommand>
 800aad8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aae4:	e02a      	b.n	800ab3c <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2100      	movs	r1, #0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f002 fc50 	bl	800d392 <SDMMC_GetResponse>
 800aaf2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	0fdb      	lsrs	r3, r3, #31
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <SD_PowerON+0xcc>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e000      	b.n	800ab02 <SD_PowerON+0xce>
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]

    count++;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d802      	bhi.n	800ab1a <SD_PowerON+0xe6>
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0cc      	beq.n	800aab4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d902      	bls.n	800ab2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ab24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab28:	e008      	b.n	800ab3c <SD_PowerON+0x108>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	c1100000 	.word	0xc1100000

0800ab48 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08c      	sub	sp, #48	; 0x30
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab52:	f7f7 f8f1 	bl	8001d38 <HAL_GetTick>
 800ab56:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2100      	movs	r1, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f002 fc15 	bl	800d392 <SDMMC_GetResponse>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab72:	d102      	bne.n	800ab7a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab78:	e0b0      	b.n	800acdc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2140      	movs	r1, #64	; 0x40
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fc45 	bl	800d410 <SDMMC_CmdBlockLength>
 800ab86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	e0a0      	b.n	800acdc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba2:	041b      	lsls	r3, r3, #16
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f002 fd80 	bl	800d6ac <SDMMC_CmdAppCommand>
 800abac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d005      	beq.n	800abc0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	e08d      	b.n	800acdc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295
 800abc4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800abc6:	2340      	movs	r3, #64	; 0x40
 800abc8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800abca:	2360      	movs	r3, #96	; 0x60
 800abcc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800abce:	2302      	movs	r3, #2
 800abd0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f107 0208 	add.w	r2, r7, #8
 800abe2:	4611      	mov	r1, r2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f002 fbe7 	bl	800d3b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4618      	mov	r0, r3
 800abf0:	f002 fe68 	bl	800d8c4 <SDMMC_CmdStatusRegister>
 800abf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d02b      	beq.n	800ac54 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	e069      	b.n	800acdc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d013      	beq.n	800ac3e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ac16:	2300      	movs	r3, #0
 800ac18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac1a:	e00d      	b.n	800ac38 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f002 fb41 	bl	800d2a8 <SDMMC_ReadFIFO>
 800ac26:	4602      	mov	r2, r0
 800ac28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2a:	601a      	str	r2, [r3, #0]
        pData++;
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	3304      	adds	r3, #4
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac34:	3301      	adds	r3, #1
 800ac36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	2b07      	cmp	r3, #7
 800ac3c:	d9ee      	bls.n	800ac1c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac3e:	f7f7 f87b 	bl	8001d38 <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d102      	bne.n	800ac54 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac52:	e043      	b.n	800acdc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0d2      	beq.n	800ac08 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac68:	f003 0308 	and.w	r3, r3, #8
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac70:	2308      	movs	r3, #8
 800ac72:	e033      	b.n	800acdc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac82:	2302      	movs	r3, #2
 800ac84:	e02a      	b.n	800acdc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8c:	f003 0320 	and.w	r3, r3, #32
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d017      	beq.n	800acc4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ac94:	2320      	movs	r3, #32
 800ac96:	e021      	b.n	800acdc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f002 fb03 	bl	800d2a8 <SDMMC_ReadFIFO>
 800aca2:	4602      	mov	r2, r0
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	601a      	str	r2, [r3, #0]
    pData++;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	3304      	adds	r3, #4
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800acae:	f7f7 f843 	bl	8001d38 <HAL_GetTick>
 800acb2:	4602      	mov	r2, r0
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbc:	d102      	bne.n	800acc4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800acbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acc2:	e00b      	b.n	800acdc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e2      	bne.n	800ac98 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a03      	ldr	r2, [pc, #12]	; (800ace4 <SD_SendSDStatus+0x19c>)
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3730      	adds	r7, #48	; 0x30
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	18000f3a 	.word	0x18000f3a

0800ace8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d102      	bne.n	800acfe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800acf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acfc:	e018      	b.n	800ad30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad06:	041b      	lsls	r3, r3, #16
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	f002 fdb7 	bl	800d87e <SDMMC_CmdSendStatus>
 800ad10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	e009      	b.n	800ad30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2100      	movs	r1, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f002 fb35 	bl	800d392 <SDMMC_GetResponse>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad40:	2300      	movs	r3, #0
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	2300      	movs	r3, #0
 800ad46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f002 fb1f 	bl	800d392 <SDMMC_GetResponse>
 800ad54:	4603      	mov	r3, r0
 800ad56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad5e:	d102      	bne.n	800ad66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad64:	e02f      	b.n	800adc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad66:	f107 030c 	add.w	r3, r7, #12
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f879 	bl	800ae64 <SD_FindSCR>
 800ad72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	e023      	b.n	800adc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d01c      	beq.n	800adc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad90:	041b      	lsls	r3, r3, #16
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f002 fc89 	bl	800d6ac <SDMMC_CmdAppCommand>
 800ad9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	e00f      	b.n	800adc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2102      	movs	r1, #2
 800adac:	4618      	mov	r0, r3
 800adae:	f002 fcc0 	bl	800d732 <SDMMC_CmdBusWidth>
 800adb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	e003      	b.n	800adc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e001      	b.n	800adc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800adc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	2300      	movs	r3, #0
 800addc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2100      	movs	r1, #0
 800ade4:	4618      	mov	r0, r3
 800ade6:	f002 fad4 	bl	800d392 <SDMMC_GetResponse>
 800adea:	4603      	mov	r3, r0
 800adec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adf4:	d102      	bne.n	800adfc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800adf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adfa:	e02f      	b.n	800ae5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f82e 	bl	800ae64 <SD_FindSCR>
 800ae08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	e023      	b.n	800ae5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01c      	beq.n	800ae58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae26:	041b      	lsls	r3, r3, #16
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f002 fc3e 	bl	800d6ac <SDMMC_CmdAppCommand>
 800ae30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	e00f      	b.n	800ae5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f002 fc75 	bl	800d732 <SDMMC_CmdBusWidth>
 800ae48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	e003      	b.n	800ae5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	e001      	b.n	800ae5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08e      	sub	sp, #56	; 0x38
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae6e:	f7f6 ff63 	bl	8001d38 <HAL_GetTick>
 800ae72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60bb      	str	r3, [r7, #8]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2108      	movs	r1, #8
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 fac0 	bl	800d410 <SDMMC_CmdBlockLength>
 800ae90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	e0ad      	b.n	800aff8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea4:	041b      	lsls	r3, r3, #16
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f002 fbff 	bl	800d6ac <SDMMC_CmdAppCommand>
 800aeae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <SD_FindSCR+0x56>
  {
    return errorstate;
 800aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb8:	e09e      	b.n	800aff8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aeba:	f04f 33ff 	mov.w	r3, #4294967295
 800aebe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aec0:	2308      	movs	r3, #8
 800aec2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800aec4:	2330      	movs	r3, #48	; 0x30
 800aec6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aec8:	2302      	movs	r3, #2
 800aeca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aecc:	2300      	movs	r3, #0
 800aece:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aed0:	2301      	movs	r3, #1
 800aed2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f107 0210 	add.w	r2, r7, #16
 800aedc:	4611      	mov	r1, r2
 800aede:	4618      	mov	r0, r3
 800aee0:	f002 fa6a 	bl	800d3b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f002 fc45 	bl	800d778 <SDMMC_CmdSendSCR>
 800aeee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d027      	beq.n	800af46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	e07e      	b.n	800aff8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d113      	bne.n	800af30 <SD_FindSCR+0xcc>
 800af08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d110      	bne.n	800af30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f002 f9c8 	bl	800d2a8 <SDMMC_ReadFIFO>
 800af18:	4603      	mov	r3, r0
 800af1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4618      	mov	r0, r3
 800af22:	f002 f9c1 	bl	800d2a8 <SDMMC_ReadFIFO>
 800af26:	4603      	mov	r3, r0
 800af28:	60fb      	str	r3, [r7, #12]
      index++;
 800af2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2c:	3301      	adds	r3, #1
 800af2e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af30:	f7f6 ff02 	bl	8001d38 <HAL_GetTick>
 800af34:	4602      	mov	r2, r0
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d102      	bne.n	800af46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af44:	e058      	b.n	800aff8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af4c:	f240 532a 	movw	r3, #1322	; 0x52a
 800af50:	4013      	ands	r3, r2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0d1      	beq.n	800aefa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b00      	cmp	r3, #0
 800af62:	d005      	beq.n	800af70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2208      	movs	r2, #8
 800af6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800af6c:	2308      	movs	r3, #8
 800af6e:	e043      	b.n	800aff8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d005      	beq.n	800af8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2202      	movs	r2, #2
 800af84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800af86:	2302      	movs	r3, #2
 800af88:	e036      	b.n	800aff8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af90:	f003 0320 	and.w	r3, r3, #32
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2220      	movs	r2, #32
 800af9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800afa0:	2320      	movs	r3, #32
 800afa2:	e029      	b.n	800aff8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a15      	ldr	r2, [pc, #84]	; (800b000 <SD_FindSCR+0x19c>)
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	061a      	lsls	r2, r3, #24
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	0a1b      	lsrs	r3, r3, #8
 800afbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800afc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	0e1b      	lsrs	r3, r3, #24
 800afc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	601a      	str	r2, [r3, #0]
    scr++;
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	3304      	adds	r3, #4
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	061a      	lsls	r2, r3, #24
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afe0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	0a1b      	lsrs	r3, r3, #8
 800afe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800afea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	0e1b      	lsrs	r3, r3, #24
 800aff0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3738      	adds	r7, #56	; 0x38
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	18000f3a 	.word	0x18000f3a

0800b004 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b016:	2b1f      	cmp	r3, #31
 800b018:	d936      	bls.n	800b088 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]
 800b01e:	e027      	b.n	800b070 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f002 f93f 	bl	800d2a8 <SDMMC_ReadFIFO>
 800b02a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	3301      	adds	r3, #1
 800b038:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	0a1b      	lsrs	r3, r3, #8
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	3301      	adds	r3, #1
 800b048:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	0c1b      	lsrs	r3, r3, #16
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	3301      	adds	r3, #1
 800b058:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	0e1b      	lsrs	r3, r3, #24
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	3301      	adds	r3, #1
 800b068:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	3301      	adds	r3, #1
 800b06e:	617b      	str	r3, [r7, #20]
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2b07      	cmp	r3, #7
 800b074:	d9d4      	bls.n	800b020 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f1a3 0220 	sub.w	r2, r3, #32
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b088:	bf00      	nop
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	2b1f      	cmp	r3, #31
 800b0a4:	d93a      	bls.n	800b11c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]
 800b0aa:	e02b      	b.n	800b104 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	021a      	lsls	r2, r3, #8
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	041a      	lsls	r2, r3, #16
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	061a      	lsls	r2, r3, #24
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f107 020c 	add.w	r2, r7, #12
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 f8e2 	bl	800d2c2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	3301      	adds	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2b07      	cmp	r3, #7
 800b108:	d9d0      	bls.n	800b0ac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	f1a3 0220 	sub.w	r2, r3, #32
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	621a      	str	r2, [r3, #32]
  }
}
 800b11c:	bf00      	nop
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e049      	b.n	800b21a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7f6 fac8 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f000 fab2 	bl	800b71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b01      	cmp	r3, #1
 800b236:	d001      	beq.n	800b23c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e019      	b.n	800b270 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2202      	movs	r2, #2
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689a      	ldr	r2, [r3, #8]
 800b24a:	4b0c      	ldr	r3, [pc, #48]	; (800b27c <HAL_TIM_Base_Start+0x58>)
 800b24c:	4013      	ands	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b06      	cmp	r3, #6
 800b254:	d00b      	beq.n	800b26e <HAL_TIM_Base_Start+0x4a>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b25c:	d007      	beq.n	800b26e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f042 0201 	orr.w	r2, r2, #1
 800b26c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	00010007 	.word	0x00010007

0800b280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b01      	cmp	r3, #1
 800b292:	d001      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e021      	b.n	800b2dc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2202      	movs	r2, #2
 800b29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 0201 	orr.w	r2, r2, #1
 800b2ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <HAL_TIM_Base_Start_IT+0x68>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b06      	cmp	r3, #6
 800b2c0:	d00b      	beq.n	800b2da <HAL_TIM_Base_Start_IT+0x5a>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c8:	d007      	beq.n	800b2da <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 0201 	orr.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	00010007 	.word	0x00010007

0800b2ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d122      	bne.n	800b348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d11b      	bne.n	800b348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0202 	mvn.w	r2, #2
 800b318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f9d6 	bl	800b6e0 <HAL_TIM_IC_CaptureCallback>
 800b334:	e005      	b.n	800b342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f9c8 	bl	800b6cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f9d9 	bl	800b6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b04      	cmp	r3, #4
 800b354:	d122      	bne.n	800b39c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f003 0304 	and.w	r3, r3, #4
 800b360:	2b04      	cmp	r3, #4
 800b362:	d11b      	bne.n	800b39c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f06f 0204 	mvn.w	r2, #4
 800b36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2202      	movs	r2, #2
 800b372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f9ac 	bl	800b6e0 <HAL_TIM_IC_CaptureCallback>
 800b388:	e005      	b.n	800b396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f99e 	bl	800b6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f9af 	bl	800b6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0308 	and.w	r3, r3, #8
 800b3a6:	2b08      	cmp	r3, #8
 800b3a8:	d122      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 0308 	and.w	r3, r3, #8
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	d11b      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0208 	mvn.w	r2, #8
 800b3c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2204      	movs	r2, #4
 800b3c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f982 	bl	800b6e0 <HAL_TIM_IC_CaptureCallback>
 800b3dc:	e005      	b.n	800b3ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f974 	bl	800b6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f985 	bl	800b6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	f003 0310 	and.w	r3, r3, #16
 800b3fa:	2b10      	cmp	r3, #16
 800b3fc:	d122      	bne.n	800b444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b10      	cmp	r3, #16
 800b40a:	d11b      	bne.n	800b444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f06f 0210 	mvn.w	r2, #16
 800b414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2208      	movs	r2, #8
 800b41a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b426:	2b00      	cmp	r3, #0
 800b428:	d003      	beq.n	800b432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f958 	bl	800b6e0 <HAL_TIM_IC_CaptureCallback>
 800b430:	e005      	b.n	800b43e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f94a 	bl	800b6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f95b 	bl	800b6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d10e      	bne.n	800b470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	f003 0301 	and.w	r3, r3, #1
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d107      	bne.n	800b470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f06f 0201 	mvn.w	r2, #1
 800b468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7f5 fe80 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47a:	2b80      	cmp	r3, #128	; 0x80
 800b47c:	d10e      	bne.n	800b49c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b488:	2b80      	cmp	r3, #128	; 0x80
 800b48a:	d107      	bne.n	800b49c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fb0a 	bl	800bab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4aa:	d10e      	bne.n	800b4ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b6:	2b80      	cmp	r3, #128	; 0x80
 800b4b8:	d107      	bne.n	800b4ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fafd 	bl	800bac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	d10e      	bne.n	800b4f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e2:	2b40      	cmp	r3, #64	; 0x40
 800b4e4:	d107      	bne.n	800b4f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f909 	bl	800b708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f003 0320 	and.w	r3, r3, #32
 800b500:	2b20      	cmp	r3, #32
 800b502:	d10e      	bne.n	800b522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d107      	bne.n	800b522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f06f 0220 	mvn.w	r2, #32
 800b51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fabd 	bl	800ba9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
	...

0800b52c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d101      	bne.n	800b544 <HAL_TIM_ConfigClockSource+0x18>
 800b540:	2302      	movs	r3, #2
 800b542:	e0b7      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0x188>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2202      	movs	r2, #2
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	4b57      	ldr	r3, [pc, #348]	; (800b6bc <HAL_TIM_ConfigClockSource+0x190>)
 800b560:	4013      	ands	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b56a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b70      	cmp	r3, #112	; 0x70
 800b57a:	d02e      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0xae>
 800b57c:	2b70      	cmp	r3, #112	; 0x70
 800b57e:	d812      	bhi.n	800b5a6 <HAL_TIM_ConfigClockSource+0x7a>
 800b580:	2b30      	cmp	r3, #48	; 0x30
 800b582:	f000 8084 	beq.w	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b586:	2b30      	cmp	r3, #48	; 0x30
 800b588:	d806      	bhi.n	800b598 <HAL_TIM_ConfigClockSource+0x6c>
 800b58a:	2b10      	cmp	r3, #16
 800b58c:	d07f      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b58e:	2b20      	cmp	r3, #32
 800b590:	d07d      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d07b      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b596:	e084      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b598:	2b50      	cmp	r3, #80	; 0x50
 800b59a:	d048      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x102>
 800b59c:	2b60      	cmp	r3, #96	; 0x60
 800b59e:	d056      	beq.n	800b64e <HAL_TIM_ConfigClockSource+0x122>
 800b5a0:	2b40      	cmp	r3, #64	; 0x40
 800b5a2:	d064      	beq.n	800b66e <HAL_TIM_ConfigClockSource+0x142>
      break;
 800b5a4:	e07d      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b5a6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5aa:	d070      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b5ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5b0:	d809      	bhi.n	800b5c6 <HAL_TIM_ConfigClockSource+0x9a>
 800b5b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b6:	d027      	beq.n	800b608 <HAL_TIM_ConfigClockSource+0xdc>
 800b5b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5bc:	d067      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c2:	d06d      	beq.n	800b6a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5c4:	e06d      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b5c6:	4a3e      	ldr	r2, [pc, #248]	; (800b6c0 <HAL_TIM_ConfigClockSource+0x194>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d060      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b5cc:	4a3d      	ldr	r2, [pc, #244]	; (800b6c4 <HAL_TIM_ConfigClockSource+0x198>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d05d      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
 800b5d2:	4a3d      	ldr	r2, [pc, #244]	; (800b6c8 <HAL_TIM_ConfigClockSource+0x19c>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d05a      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x162>
      break;
 800b5d8:	e063      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	6899      	ldr	r1, [r3, #8]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	f000 f9af 	bl	800b94c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	609a      	str	r2, [r3, #8]
      break;
 800b606:	e04c      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	6899      	ldr	r1, [r3, #8]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f000 f998 	bl	800b94c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689a      	ldr	r2, [r3, #8]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b62a:	609a      	str	r2, [r3, #8]
      break;
 800b62c:	e039      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	6859      	ldr	r1, [r3, #4]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f000 f908 	bl	800b850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2150      	movs	r1, #80	; 0x50
 800b646:	4618      	mov	r0, r3
 800b648:	f000 f962 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b64c:	e029      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	6859      	ldr	r1, [r3, #4]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f000 f927 	bl	800b8ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2160      	movs	r1, #96	; 0x60
 800b666:	4618      	mov	r0, r3
 800b668:	f000 f952 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b66c:	e019      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	6859      	ldr	r1, [r3, #4]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f000 f8e8 	bl	800b850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2140      	movs	r1, #64	; 0x40
 800b686:	4618      	mov	r0, r3
 800b688:	f000 f942 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b68c:	e009      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f000 f939 	bl	800b910 <TIM_ITRx_SetConfig>
      break;
 800b69e:	e000      	b.n	800b6a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b6a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	ffceff88 	.word	0xffceff88
 800b6c0:	00100030 	.word	0x00100030
 800b6c4:	00100040 	.word	0x00100040
 800b6c8:	00100020 	.word	0x00100020

0800b6cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a40      	ldr	r2, [pc, #256]	; (800b830 <TIM_Base_SetConfig+0x114>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d013      	beq.n	800b75c <TIM_Base_SetConfig+0x40>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b73a:	d00f      	beq.n	800b75c <TIM_Base_SetConfig+0x40>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a3d      	ldr	r2, [pc, #244]	; (800b834 <TIM_Base_SetConfig+0x118>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00b      	beq.n	800b75c <TIM_Base_SetConfig+0x40>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a3c      	ldr	r2, [pc, #240]	; (800b838 <TIM_Base_SetConfig+0x11c>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d007      	beq.n	800b75c <TIM_Base_SetConfig+0x40>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a3b      	ldr	r2, [pc, #236]	; (800b83c <TIM_Base_SetConfig+0x120>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d003      	beq.n	800b75c <TIM_Base_SetConfig+0x40>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a3a      	ldr	r2, [pc, #232]	; (800b840 <TIM_Base_SetConfig+0x124>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d108      	bne.n	800b76e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a2f      	ldr	r2, [pc, #188]	; (800b830 <TIM_Base_SetConfig+0x114>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d01f      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b77c:	d01b      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a2c      	ldr	r2, [pc, #176]	; (800b834 <TIM_Base_SetConfig+0x118>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d017      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a2b      	ldr	r2, [pc, #172]	; (800b838 <TIM_Base_SetConfig+0x11c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d013      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a2a      	ldr	r2, [pc, #168]	; (800b83c <TIM_Base_SetConfig+0x120>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d00f      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a29      	ldr	r2, [pc, #164]	; (800b840 <TIM_Base_SetConfig+0x124>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d00b      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a28      	ldr	r2, [pc, #160]	; (800b844 <TIM_Base_SetConfig+0x128>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d007      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a27      	ldr	r2, [pc, #156]	; (800b848 <TIM_Base_SetConfig+0x12c>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d003      	beq.n	800b7b6 <TIM_Base_SetConfig+0x9a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a26      	ldr	r2, [pc, #152]	; (800b84c <TIM_Base_SetConfig+0x130>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d108      	bne.n	800b7c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a10      	ldr	r2, [pc, #64]	; (800b830 <TIM_Base_SetConfig+0x114>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d00f      	beq.n	800b814 <TIM_Base_SetConfig+0xf8>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a12      	ldr	r2, [pc, #72]	; (800b840 <TIM_Base_SetConfig+0x124>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d00b      	beq.n	800b814 <TIM_Base_SetConfig+0xf8>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a11      	ldr	r2, [pc, #68]	; (800b844 <TIM_Base_SetConfig+0x128>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d007      	beq.n	800b814 <TIM_Base_SetConfig+0xf8>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a10      	ldr	r2, [pc, #64]	; (800b848 <TIM_Base_SetConfig+0x12c>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d003      	beq.n	800b814 <TIM_Base_SetConfig+0xf8>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a0f      	ldr	r2, [pc, #60]	; (800b84c <TIM_Base_SetConfig+0x130>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d103      	bne.n	800b81c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	691a      	ldr	r2, [r3, #16]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	615a      	str	r2, [r3, #20]
}
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	40010000 	.word	0x40010000
 800b834:	40000400 	.word	0x40000400
 800b838:	40000800 	.word	0x40000800
 800b83c:	40000c00 	.word	0x40000c00
 800b840:	40010400 	.word	0x40010400
 800b844:	40014000 	.word	0x40014000
 800b848:	40014400 	.word	0x40014400
 800b84c:	40014800 	.word	0x40014800

0800b850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	f023 0201 	bic.w	r2, r3, #1
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b87a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	011b      	lsls	r3, r3, #4
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	4313      	orrs	r3, r2
 800b884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f023 030a 	bic.w	r3, r3, #10
 800b88c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	4313      	orrs	r3, r2
 800b894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	621a      	str	r2, [r3, #32]
}
 800b8a2:	bf00      	nop
 800b8a4:	371c      	adds	r7, #28
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr

0800b8ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b087      	sub	sp, #28
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f023 0210 	bic.w	r2, r3, #16
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	031b      	lsls	r3, r3, #12
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	693a      	ldr	r2, [r7, #16]
 800b900:	621a      	str	r2, [r3, #32]
}
 800b902:	bf00      	nop
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
	...

0800b910 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	4b09      	ldr	r3, [pc, #36]	; (800b948 <TIM_ITRx_SetConfig+0x38>)
 800b924:	4013      	ands	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	f043 0307 	orr.w	r3, r3, #7
 800b932:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	609a      	str	r2, [r3, #8]
}
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	ffcfff8f 	.word	0xffcfff8f

0800b94c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	021a      	lsls	r2, r3, #8
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	431a      	orrs	r2, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4313      	orrs	r3, r2
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	4313      	orrs	r3, r2
 800b978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	609a      	str	r2, [r3, #8]
}
 800b980:	bf00      	nop
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d101      	bne.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e068      	b.n	800ba76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a2e      	ldr	r2, [pc, #184]	; (800ba84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d004      	beq.n	800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a2d      	ldr	r2, [pc, #180]	; (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d108      	bne.n	800b9ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a1e      	ldr	r2, [pc, #120]	; (800ba84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d01d      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba16:	d018      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a1b      	ldr	r2, [pc, #108]	; (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d013      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a1a      	ldr	r2, [pc, #104]	; (800ba90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d00e      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a18      	ldr	r2, [pc, #96]	; (800ba94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d009      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a13      	ldr	r2, [pc, #76]	; (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d004      	beq.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a14      	ldr	r2, [pc, #80]	; (800ba98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d10c      	bne.n	800ba64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	40010000 	.word	0x40010000
 800ba88:	40010400 	.word	0x40010400
 800ba8c:	40000400 	.word	0x40000400
 800ba90:	40000800 	.word	0x40000800
 800ba94:	40000c00 	.word	0x40000c00
 800ba98:	40001800 	.word	0x40001800

0800ba9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e042      	b.n	800bb70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d106      	bne.n	800bb02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7f5 fe8b 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2224      	movs	r2, #36	; 0x24
 800bb06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 0201 	bic.w	r2, r2, #1
 800bb18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fa52 	bl	800bfc4 <UART_SetConfig>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d101      	bne.n	800bb2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e022      	b.n	800bb70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fff6 	bl	800cb24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689a      	ldr	r2, [r3, #8]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0201 	orr.w	r2, r2, #1
 800bb66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 f87d 	bl	800cc68 <UART_CheckIdleState>
 800bb6e:	4603      	mov	r3, r0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4613      	mov	r3, r2
 800bb84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	d170      	bne.n	800bc72 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <HAL_UART_Receive_DMA+0x24>
 800bb96:	88fb      	ldrh	r3, [r7, #6]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e069      	b.n	800bc74 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d101      	bne.n	800bbae <HAL_UART_Receive_DMA+0x36>
 800bbaa:	2302      	movs	r3, #2
 800bbac:	e062      	b.n	800bc74 <HAL_UART_Receive_DMA+0xfc>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	88fa      	ldrh	r2, [r7, #6]
 800bbc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2222      	movs	r2, #34	; 0x22
 800bbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d02c      	beq.n	800bc36 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbe0:	4a26      	ldr	r2, [pc, #152]	; (800bc7c <HAL_UART_Receive_DMA+0x104>)
 800bbe2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbe8:	4a25      	ldr	r2, [pc, #148]	; (800bc80 <HAL_UART_Receive_DMA+0x108>)
 800bbea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf0:	4a24      	ldr	r2, [pc, #144]	; (800bc84 <HAL_UART_Receive_DMA+0x10c>)
 800bbf2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3324      	adds	r3, #36	; 0x24
 800bc06:	4619      	mov	r1, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	f7f8 fb64 	bl	80042dc <HAL_DMA_Start_IT>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00d      	beq.n	800bc36 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2210      	movs	r2, #16
 800bc1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e01e      	b.n	800bc74 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc4c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f042 0201 	orr.w	r2, r2, #1
 800bc5c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689a      	ldr	r2, [r3, #8]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc6c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e000      	b.n	800bc74 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800bc72:	2302      	movs	r3, #2
  }
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	0800ce7d 	.word	0x0800ce7d
 800bc80:	0800cee3 	.word	0x0800cee3
 800bc84:	0800ceff 	.word	0x0800ceff

0800bc88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b088      	sub	sp, #32
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bca8:	69fa      	ldr	r2, [r7, #28]
 800bcaa:	f640 030f 	movw	r3, #2063	; 0x80f
 800bcae:	4013      	ands	r3, r2
 800bcb0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d118      	bne.n	800bcea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d013      	beq.n	800bcea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	f003 0320 	and.w	r3, r3, #32
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d009      	beq.n	800bcea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 8145 	beq.w	800bf6a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3
      }
      return;
 800bce8:	e13f      	b.n	800bf6a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 80e8 	beq.w	800bec2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4ba1      	ldr	r3, [pc, #644]	; (800bf7c <HAL_UART_IRQHandler+0x2f4>)
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d105      	bne.n	800bd08 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bcfc:	69ba      	ldr	r2, [r7, #24]
 800bcfe:	4ba0      	ldr	r3, [pc, #640]	; (800bf80 <HAL_UART_IRQHandler+0x2f8>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 80dd 	beq.w	800bec2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d010      	beq.n	800bd34 <HAL_UART_IRQHandler+0xac>
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2201      	movs	r2, #1
 800bd22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2a:	f043 0201 	orr.w	r2, r3, #1
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d010      	beq.n	800bd60 <HAL_UART_IRQHandler+0xd8>
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd56:	f043 0204 	orr.w	r2, r3, #4
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d010      	beq.n	800bd8c <HAL_UART_IRQHandler+0x104>
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd82:	f043 0202 	orr.w	r2, r3, #2
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	f003 0308 	and.w	r3, r3, #8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d015      	beq.n	800bdc2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d104      	bne.n	800bdaa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	4b76      	ldr	r3, [pc, #472]	; (800bf7c <HAL_UART_IRQHandler+0x2f4>)
 800bda4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00b      	beq.n	800bdc2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2208      	movs	r2, #8
 800bdb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb8:	f043 0208 	orr.w	r2, r3, #8
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d011      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x168>
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00c      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde6:	f043 0220 	orr.w	r2, r3, #32
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 80b9 	beq.w	800bf6e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	f003 0320 	and.w	r3, r3, #32
 800be02:	2b00      	cmp	r3, #0
 800be04:	d011      	beq.n	800be2a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d104      	bne.n	800be1a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3c:	2b40      	cmp	r3, #64	; 0x40
 800be3e:	d004      	beq.n	800be4a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be46:	2b00      	cmp	r3, #0
 800be48:	d031      	beq.n	800beae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fff2 	bl	800ce34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5a:	2b40      	cmp	r3, #64	; 0x40
 800be5c:	d123      	bne.n	800bea6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be72:	2b00      	cmp	r3, #0
 800be74:	d013      	beq.n	800be9e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be7a:	4a42      	ldr	r2, [pc, #264]	; (800bf84 <HAL_UART_IRQHandler+0x2fc>)
 800be7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be82:	4618      	mov	r0, r3
 800be84:	f7f8 ffb2 	bl	8004dec <HAL_DMA_Abort_IT>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d017      	beq.n	800bebe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800be98:	4610      	mov	r0, r2
 800be9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be9c:	e00f      	b.n	800bebe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f886 	bl	800bfb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea4:	e00b      	b.n	800bebe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f882 	bl	800bfb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beac:	e007      	b.n	800bebe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f87e 	bl	800bfb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800bebc:	e057      	b.n	800bf6e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bebe:	bf00      	nop
    return;
 800bec0:	e055      	b.n	800bf6e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00d      	beq.n	800bee8 <HAL_UART_IRQHandler+0x260>
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d008      	beq.n	800bee8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bede:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f001 f87c 	bl	800cfde <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bee6:	e045      	b.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d012      	beq.n	800bf18 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d104      	bne.n	800bf06 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d008      	beq.n	800bf18 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d031      	beq.n	800bf72 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	4798      	blx	r3
    }
    return;
 800bf16:	e02c      	b.n	800bf72 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <HAL_UART_IRQHandler+0x2ac>
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d003      	beq.n	800bf34 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 f83c 	bl	800cfaa <UART_EndTransmit_IT>
    return;
 800bf32:	e01f      	b.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d008      	beq.n	800bf50 <HAL_UART_IRQHandler+0x2c8>
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d003      	beq.n	800bf50 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 f85c 	bl	800d006 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf4e:	e011      	b.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00c      	beq.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	da09      	bge.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f846 	bl	800cff2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf66:	bf00      	nop
 800bf68:	e004      	b.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
      return;
 800bf6a:	bf00      	nop
 800bf6c:	e002      	b.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bf72:	bf00      	nop
  }
}
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	10000001 	.word	0x10000001
 800bf80:	04000120 	.word	0x04000120
 800bf84:	0800cf7f 	.word	0x0800cf7f

0800bf88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bfc8:	b08e      	sub	sp, #56	; 0x38
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff2:	4313      	orrs	r3, r2
 800bff4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	4bc1      	ldr	r3, [pc, #772]	; (800c304 <UART_SetConfig+0x340>)
 800bffe:	4013      	ands	r3, r2
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	6812      	ldr	r2, [r2, #0]
 800c004:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c006:	430b      	orrs	r3, r1
 800c008:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4ab7      	ldr	r2, [pc, #732]	; (800c308 <UART_SetConfig+0x344>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d004      	beq.n	800c03a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c036:	4313      	orrs	r3, r2
 800c038:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	689a      	ldr	r2, [r3, #8]
 800c040:	4bb2      	ldr	r3, [pc, #712]	; (800c30c <UART_SetConfig+0x348>)
 800c042:	4013      	ands	r3, r2
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6812      	ldr	r2, [r2, #0]
 800c048:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c04a:	430b      	orrs	r3, r1
 800c04c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	f023 010f 	bic.w	r1, r3, #15
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	430a      	orrs	r2, r1
 800c062:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4aa9      	ldr	r2, [pc, #676]	; (800c310 <UART_SetConfig+0x34c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d177      	bne.n	800c15e <UART_SetConfig+0x19a>
 800c06e:	4ba9      	ldr	r3, [pc, #676]	; (800c314 <UART_SetConfig+0x350>)
 800c070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c076:	2b28      	cmp	r3, #40	; 0x28
 800c078:	d86c      	bhi.n	800c154 <UART_SetConfig+0x190>
 800c07a:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <UART_SetConfig+0xbc>)
 800c07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c080:	0800c125 	.word	0x0800c125
 800c084:	0800c155 	.word	0x0800c155
 800c088:	0800c155 	.word	0x0800c155
 800c08c:	0800c155 	.word	0x0800c155
 800c090:	0800c155 	.word	0x0800c155
 800c094:	0800c155 	.word	0x0800c155
 800c098:	0800c155 	.word	0x0800c155
 800c09c:	0800c155 	.word	0x0800c155
 800c0a0:	0800c12d 	.word	0x0800c12d
 800c0a4:	0800c155 	.word	0x0800c155
 800c0a8:	0800c155 	.word	0x0800c155
 800c0ac:	0800c155 	.word	0x0800c155
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c155 	.word	0x0800c155
 800c0b8:	0800c155 	.word	0x0800c155
 800c0bc:	0800c155 	.word	0x0800c155
 800c0c0:	0800c135 	.word	0x0800c135
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c155 	.word	0x0800c155
 800c0cc:	0800c155 	.word	0x0800c155
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c155 	.word	0x0800c155
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c155 	.word	0x0800c155
 800c0e0:	0800c13d 	.word	0x0800c13d
 800c0e4:	0800c155 	.word	0x0800c155
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c155 	.word	0x0800c155
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c155 	.word	0x0800c155
 800c0f8:	0800c155 	.word	0x0800c155
 800c0fc:	0800c155 	.word	0x0800c155
 800c100:	0800c145 	.word	0x0800c145
 800c104:	0800c155 	.word	0x0800c155
 800c108:	0800c155 	.word	0x0800c155
 800c10c:	0800c155 	.word	0x0800c155
 800c110:	0800c155 	.word	0x0800c155
 800c114:	0800c155 	.word	0x0800c155
 800c118:	0800c155 	.word	0x0800c155
 800c11c:	0800c155 	.word	0x0800c155
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	2301      	movs	r3, #1
 800c126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12a:	e233      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c132:	e22f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c134:	2308      	movs	r3, #8
 800c136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c13a:	e22b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c13c:	2310      	movs	r3, #16
 800c13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c142:	e227      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c144:	2320      	movs	r3, #32
 800c146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c14a:	e223      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c14c:	2340      	movs	r3, #64	; 0x40
 800c14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c152:	e21f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c154:	2380      	movs	r3, #128	; 0x80
 800c156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15a:	bf00      	nop
 800c15c:	e21a      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a6d      	ldr	r2, [pc, #436]	; (800c318 <UART_SetConfig+0x354>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d132      	bne.n	800c1ce <UART_SetConfig+0x20a>
 800c168:	4b6a      	ldr	r3, [pc, #424]	; (800c314 <UART_SetConfig+0x350>)
 800c16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	2b05      	cmp	r3, #5
 800c172:	d827      	bhi.n	800c1c4 <UART_SetConfig+0x200>
 800c174:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <UART_SetConfig+0x1b8>)
 800c176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17a:	bf00      	nop
 800c17c:	0800c195 	.word	0x0800c195
 800c180:	0800c19d 	.word	0x0800c19d
 800c184:	0800c1a5 	.word	0x0800c1a5
 800c188:	0800c1ad 	.word	0x0800c1ad
 800c18c:	0800c1b5 	.word	0x0800c1b5
 800c190:	0800c1bd 	.word	0x0800c1bd
 800c194:	2300      	movs	r3, #0
 800c196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19a:	e1fb      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c19c:	2304      	movs	r3, #4
 800c19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1a2:	e1f7      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c1a4:	2308      	movs	r3, #8
 800c1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1aa:	e1f3      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1b2:	e1ef      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ba:	e1eb      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c1bc:	2340      	movs	r3, #64	; 0x40
 800c1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1c2:	e1e7      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c1c4:	2380      	movs	r3, #128	; 0x80
 800c1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ca:	bf00      	nop
 800c1cc:	e1e2      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a52      	ldr	r2, [pc, #328]	; (800c31c <UART_SetConfig+0x358>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d132      	bne.n	800c23e <UART_SetConfig+0x27a>
 800c1d8:	4b4e      	ldr	r3, [pc, #312]	; (800c314 <UART_SetConfig+0x350>)
 800c1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1dc:	f003 0307 	and.w	r3, r3, #7
 800c1e0:	2b05      	cmp	r3, #5
 800c1e2:	d827      	bhi.n	800c234 <UART_SetConfig+0x270>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <UART_SetConfig+0x228>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c205 	.word	0x0800c205
 800c1f0:	0800c20d 	.word	0x0800c20d
 800c1f4:	0800c215 	.word	0x0800c215
 800c1f8:	0800c21d 	.word	0x0800c21d
 800c1fc:	0800c225 	.word	0x0800c225
 800c200:	0800c22d 	.word	0x0800c22d
 800c204:	2300      	movs	r3, #0
 800c206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c20a:	e1c3      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c20c:	2304      	movs	r3, #4
 800c20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c212:	e1bf      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c214:	2308      	movs	r3, #8
 800c216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c21a:	e1bb      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c21c:	2310      	movs	r3, #16
 800c21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c222:	e1b7      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c224:	2320      	movs	r3, #32
 800c226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c22a:	e1b3      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c22c:	2340      	movs	r3, #64	; 0x40
 800c22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c232:	e1af      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c234:	2380      	movs	r3, #128	; 0x80
 800c236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c23a:	bf00      	nop
 800c23c:	e1aa      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a37      	ldr	r2, [pc, #220]	; (800c320 <UART_SetConfig+0x35c>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d132      	bne.n	800c2ae <UART_SetConfig+0x2ea>
 800c248:	4b32      	ldr	r3, [pc, #200]	; (800c314 <UART_SetConfig+0x350>)
 800c24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24c:	f003 0307 	and.w	r3, r3, #7
 800c250:	2b05      	cmp	r3, #5
 800c252:	d827      	bhi.n	800c2a4 <UART_SetConfig+0x2e0>
 800c254:	a201      	add	r2, pc, #4	; (adr r2, 800c25c <UART_SetConfig+0x298>)
 800c256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25a:	bf00      	nop
 800c25c:	0800c275 	.word	0x0800c275
 800c260:	0800c27d 	.word	0x0800c27d
 800c264:	0800c285 	.word	0x0800c285
 800c268:	0800c28d 	.word	0x0800c28d
 800c26c:	0800c295 	.word	0x0800c295
 800c270:	0800c29d 	.word	0x0800c29d
 800c274:	2300      	movs	r3, #0
 800c276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c27a:	e18b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c27c:	2304      	movs	r3, #4
 800c27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c282:	e187      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c284:	2308      	movs	r3, #8
 800c286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c28a:	e183      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c28c:	2310      	movs	r3, #16
 800c28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c292:	e17f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c294:	2320      	movs	r3, #32
 800c296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c29a:	e17b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c29c:	2340      	movs	r3, #64	; 0x40
 800c29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2a2:	e177      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c2a4:	2380      	movs	r3, #128	; 0x80
 800c2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2aa:	bf00      	nop
 800c2ac:	e172      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a1c      	ldr	r2, [pc, #112]	; (800c324 <UART_SetConfig+0x360>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d144      	bne.n	800c342 <UART_SetConfig+0x37e>
 800c2b8:	4b16      	ldr	r3, [pc, #88]	; (800c314 <UART_SetConfig+0x350>)
 800c2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2bc:	f003 0307 	and.w	r3, r3, #7
 800c2c0:	2b05      	cmp	r3, #5
 800c2c2:	d839      	bhi.n	800c338 <UART_SetConfig+0x374>
 800c2c4:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <UART_SetConfig+0x308>)
 800c2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ca:	bf00      	nop
 800c2cc:	0800c2e5 	.word	0x0800c2e5
 800c2d0:	0800c2ed 	.word	0x0800c2ed
 800c2d4:	0800c2f5 	.word	0x0800c2f5
 800c2d8:	0800c2fd 	.word	0x0800c2fd
 800c2dc:	0800c329 	.word	0x0800c329
 800c2e0:	0800c331 	.word	0x0800c331
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ea:	e153      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c2ec:	2304      	movs	r3, #4
 800c2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2f2:	e14f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c2f4:	2308      	movs	r3, #8
 800c2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2fa:	e14b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c2fc:	2310      	movs	r3, #16
 800c2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c302:	e147      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c304:	cfff69f3 	.word	0xcfff69f3
 800c308:	58000c00 	.word	0x58000c00
 800c30c:	11fff4ff 	.word	0x11fff4ff
 800c310:	40011000 	.word	0x40011000
 800c314:	58024400 	.word	0x58024400
 800c318:	40004400 	.word	0x40004400
 800c31c:	40004800 	.word	0x40004800
 800c320:	40004c00 	.word	0x40004c00
 800c324:	40005000 	.word	0x40005000
 800c328:	2320      	movs	r3, #32
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e131      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c330:	2340      	movs	r3, #64	; 0x40
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e12d      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c338:	2380      	movs	r3, #128	; 0x80
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33e:	bf00      	nop
 800c340:	e128      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4ab6      	ldr	r2, [pc, #728]	; (800c620 <UART_SetConfig+0x65c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d178      	bne.n	800c43e <UART_SetConfig+0x47a>
 800c34c:	4bb5      	ldr	r3, [pc, #724]	; (800c624 <UART_SetConfig+0x660>)
 800c34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c354:	2b28      	cmp	r3, #40	; 0x28
 800c356:	d86d      	bhi.n	800c434 <UART_SetConfig+0x470>
 800c358:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <UART_SetConfig+0x39c>)
 800c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35e:	bf00      	nop
 800c360:	0800c405 	.word	0x0800c405
 800c364:	0800c435 	.word	0x0800c435
 800c368:	0800c435 	.word	0x0800c435
 800c36c:	0800c435 	.word	0x0800c435
 800c370:	0800c435 	.word	0x0800c435
 800c374:	0800c435 	.word	0x0800c435
 800c378:	0800c435 	.word	0x0800c435
 800c37c:	0800c435 	.word	0x0800c435
 800c380:	0800c40d 	.word	0x0800c40d
 800c384:	0800c435 	.word	0x0800c435
 800c388:	0800c435 	.word	0x0800c435
 800c38c:	0800c435 	.word	0x0800c435
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c435 	.word	0x0800c435
 800c398:	0800c435 	.word	0x0800c435
 800c39c:	0800c435 	.word	0x0800c435
 800c3a0:	0800c415 	.word	0x0800c415
 800c3a4:	0800c435 	.word	0x0800c435
 800c3a8:	0800c435 	.word	0x0800c435
 800c3ac:	0800c435 	.word	0x0800c435
 800c3b0:	0800c435 	.word	0x0800c435
 800c3b4:	0800c435 	.word	0x0800c435
 800c3b8:	0800c435 	.word	0x0800c435
 800c3bc:	0800c435 	.word	0x0800c435
 800c3c0:	0800c41d 	.word	0x0800c41d
 800c3c4:	0800c435 	.word	0x0800c435
 800c3c8:	0800c435 	.word	0x0800c435
 800c3cc:	0800c435 	.word	0x0800c435
 800c3d0:	0800c435 	.word	0x0800c435
 800c3d4:	0800c435 	.word	0x0800c435
 800c3d8:	0800c435 	.word	0x0800c435
 800c3dc:	0800c435 	.word	0x0800c435
 800c3e0:	0800c425 	.word	0x0800c425
 800c3e4:	0800c435 	.word	0x0800c435
 800c3e8:	0800c435 	.word	0x0800c435
 800c3ec:	0800c435 	.word	0x0800c435
 800c3f0:	0800c435 	.word	0x0800c435
 800c3f4:	0800c435 	.word	0x0800c435
 800c3f8:	0800c435 	.word	0x0800c435
 800c3fc:	0800c435 	.word	0x0800c435
 800c400:	0800c42d 	.word	0x0800c42d
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40a:	e0c3      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c40c:	2304      	movs	r3, #4
 800c40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c412:	e0bf      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c414:	2308      	movs	r3, #8
 800c416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c41a:	e0bb      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c41c:	2310      	movs	r3, #16
 800c41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c422:	e0b7      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c424:	2320      	movs	r3, #32
 800c426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c42a:	e0b3      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c432:	e0af      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c434:	2380      	movs	r3, #128	; 0x80
 800c436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c43a:	bf00      	nop
 800c43c:	e0aa      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a79      	ldr	r2, [pc, #484]	; (800c628 <UART_SetConfig+0x664>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d132      	bne.n	800c4ae <UART_SetConfig+0x4ea>
 800c448:	4b76      	ldr	r3, [pc, #472]	; (800c624 <UART_SetConfig+0x660>)
 800c44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44c:	f003 0307 	and.w	r3, r3, #7
 800c450:	2b05      	cmp	r3, #5
 800c452:	d827      	bhi.n	800c4a4 <UART_SetConfig+0x4e0>
 800c454:	a201      	add	r2, pc, #4	; (adr r2, 800c45c <UART_SetConfig+0x498>)
 800c456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45a:	bf00      	nop
 800c45c:	0800c475 	.word	0x0800c475
 800c460:	0800c47d 	.word	0x0800c47d
 800c464:	0800c485 	.word	0x0800c485
 800c468:	0800c48d 	.word	0x0800c48d
 800c46c:	0800c495 	.word	0x0800c495
 800c470:	0800c49d 	.word	0x0800c49d
 800c474:	2300      	movs	r3, #0
 800c476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47a:	e08b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c47c:	2304      	movs	r3, #4
 800c47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c482:	e087      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c484:	2308      	movs	r3, #8
 800c486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c48a:	e083      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c48c:	2310      	movs	r3, #16
 800c48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c492:	e07f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c494:	2320      	movs	r3, #32
 800c496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c49a:	e07b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c49c:	2340      	movs	r3, #64	; 0x40
 800c49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4a2:	e077      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c4a4:	2380      	movs	r3, #128	; 0x80
 800c4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4aa:	bf00      	nop
 800c4ac:	e072      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a5e      	ldr	r2, [pc, #376]	; (800c62c <UART_SetConfig+0x668>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d132      	bne.n	800c51e <UART_SetConfig+0x55a>
 800c4b8:	4b5a      	ldr	r3, [pc, #360]	; (800c624 <UART_SetConfig+0x660>)
 800c4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4bc:	f003 0307 	and.w	r3, r3, #7
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	d827      	bhi.n	800c514 <UART_SetConfig+0x550>
 800c4c4:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <UART_SetConfig+0x508>)
 800c4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ca:	bf00      	nop
 800c4cc:	0800c4e5 	.word	0x0800c4e5
 800c4d0:	0800c4ed 	.word	0x0800c4ed
 800c4d4:	0800c4f5 	.word	0x0800c4f5
 800c4d8:	0800c4fd 	.word	0x0800c4fd
 800c4dc:	0800c505 	.word	0x0800c505
 800c4e0:	0800c50d 	.word	0x0800c50d
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ea:	e053      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4f2:	e04f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c4f4:	2308      	movs	r3, #8
 800c4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4fa:	e04b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c4fc:	2310      	movs	r3, #16
 800c4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c502:	e047      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c504:	2320      	movs	r3, #32
 800c506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c50a:	e043      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c50c:	2340      	movs	r3, #64	; 0x40
 800c50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c512:	e03f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c514:	2380      	movs	r3, #128	; 0x80
 800c516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c51a:	bf00      	nop
 800c51c:	e03a      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a43      	ldr	r2, [pc, #268]	; (800c630 <UART_SetConfig+0x66c>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d132      	bne.n	800c58e <UART_SetConfig+0x5ca>
 800c528:	4b3e      	ldr	r3, [pc, #248]	; (800c624 <UART_SetConfig+0x660>)
 800c52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c52c:	f003 0307 	and.w	r3, r3, #7
 800c530:	2b05      	cmp	r3, #5
 800c532:	d827      	bhi.n	800c584 <UART_SetConfig+0x5c0>
 800c534:	a201      	add	r2, pc, #4	; (adr r2, 800c53c <UART_SetConfig+0x578>)
 800c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53a:	bf00      	nop
 800c53c:	0800c555 	.word	0x0800c555
 800c540:	0800c55d 	.word	0x0800c55d
 800c544:	0800c565 	.word	0x0800c565
 800c548:	0800c56d 	.word	0x0800c56d
 800c54c:	0800c575 	.word	0x0800c575
 800c550:	0800c57d 	.word	0x0800c57d
 800c554:	2302      	movs	r3, #2
 800c556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c55a:	e01b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c55c:	2304      	movs	r3, #4
 800c55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c562:	e017      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c564:	2308      	movs	r3, #8
 800c566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c56a:	e013      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c56c:	2310      	movs	r3, #16
 800c56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c572:	e00f      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c574:	2320      	movs	r3, #32
 800c576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57a:	e00b      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c57c:	2340      	movs	r3, #64	; 0x40
 800c57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c582:	e007      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c584:	2380      	movs	r3, #128	; 0x80
 800c586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58a:	bf00      	nop
 800c58c:	e002      	b.n	800c594 <UART_SetConfig+0x5d0>
 800c58e:	2380      	movs	r3, #128	; 0x80
 800c590:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a25      	ldr	r2, [pc, #148]	; (800c630 <UART_SetConfig+0x66c>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	f040 80b8 	bne.w	800c710 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5a4:	2b08      	cmp	r3, #8
 800c5a6:	d019      	beq.n	800c5dc <UART_SetConfig+0x618>
 800c5a8:	2b08      	cmp	r3, #8
 800c5aa:	dc04      	bgt.n	800c5b6 <UART_SetConfig+0x5f2>
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d009      	beq.n	800c5c4 <UART_SetConfig+0x600>
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d00b      	beq.n	800c5cc <UART_SetConfig+0x608>
 800c5b4:	e042      	b.n	800c63c <UART_SetConfig+0x678>
 800c5b6:	2b20      	cmp	r3, #32
 800c5b8:	d02b      	beq.n	800c612 <UART_SetConfig+0x64e>
 800c5ba:	2b40      	cmp	r3, #64	; 0x40
 800c5bc:	d02c      	beq.n	800c618 <UART_SetConfig+0x654>
 800c5be:	2b10      	cmp	r3, #16
 800c5c0:	d014      	beq.n	800c5ec <UART_SetConfig+0x628>
 800c5c2:	e03b      	b.n	800c63c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5c4:	f7fc fca8 	bl	8008f18 <HAL_RCCEx_GetD3PCLK1Freq>
 800c5c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c5ca:	e03d      	b.n	800c648 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5cc:	f107 0314 	add.w	r3, r7, #20
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fc fcb7 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5da:	e035      	b.n	800c648 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5dc:	f107 0308 	add.w	r3, r7, #8
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fc fdfb 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5ea:	e02d      	b.n	800c648 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5ec:	4b0d      	ldr	r3, [pc, #52]	; (800c624 <UART_SetConfig+0x660>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d009      	beq.n	800c60c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5f8:	4b0a      	ldr	r3, [pc, #40]	; (800c624 <UART_SetConfig+0x660>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	08db      	lsrs	r3, r3, #3
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	4a0c      	ldr	r2, [pc, #48]	; (800c634 <UART_SetConfig+0x670>)
 800c604:	fa22 f303 	lsr.w	r3, r2, r3
 800c608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c60a:	e01d      	b.n	800c648 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c60c:	4b09      	ldr	r3, [pc, #36]	; (800c634 <UART_SetConfig+0x670>)
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c610:	e01a      	b.n	800c648 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c612:	4b09      	ldr	r3, [pc, #36]	; (800c638 <UART_SetConfig+0x674>)
 800c614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c616:	e017      	b.n	800c648 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c61c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c61e:	e013      	b.n	800c648 <UART_SetConfig+0x684>
 800c620:	40011400 	.word	0x40011400
 800c624:	58024400 	.word	0x58024400
 800c628:	40007800 	.word	0x40007800
 800c62c:	40007c00 	.word	0x40007c00
 800c630:	58000c00 	.word	0x58000c00
 800c634:	03d09000 	.word	0x03d09000
 800c638:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c646:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 824d 	beq.w	800caea <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c654:	4aad      	ldr	r2, [pc, #692]	; (800c90c <UART_SetConfig+0x948>)
 800c656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c65a:	461a      	mov	r2, r3
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c662:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	4613      	mov	r3, r2
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	4413      	add	r3, r2
 800c66e:	6a3a      	ldr	r2, [r7, #32]
 800c670:	429a      	cmp	r2, r3
 800c672:	d305      	bcc.n	800c680 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c67a:	6a3a      	ldr	r2, [r7, #32]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d903      	bls.n	800c688 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c686:	e230      	b.n	800caea <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	4618      	mov	r0, r3
 800c68c:	f04f 0100 	mov.w	r1, #0
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	4a9d      	ldr	r2, [pc, #628]	; (800c90c <UART_SetConfig+0x948>)
 800c696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	f04f 0400 	mov.w	r4, #0
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4623      	mov	r3, r4
 800c6a4:	f7f3 fe6c 	bl	8000380 <__aeabi_uldivmod>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	f04f 0300 	mov.w	r3, #0
 800c6b4:	f04f 0400 	mov.w	r4, #0
 800c6b8:	0214      	lsls	r4, r2, #8
 800c6ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c6be:	020b      	lsls	r3, r1, #8
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6852      	ldr	r2, [r2, #4]
 800c6c4:	0852      	lsrs	r2, r2, #1
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	f04f 0200 	mov.w	r2, #0
 800c6cc:	eb13 0b01 	adds.w	fp, r3, r1
 800c6d0:	eb44 0c02 	adc.w	ip, r4, r2
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	4661      	mov	r1, ip
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	f04f 0400 	mov.w	r4, #0
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4623      	mov	r3, r4
 800c6e4:	f7f3 fe4c 	bl	8000380 <__aeabi_uldivmod>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6f4:	d308      	bcc.n	800c708 <UART_SetConfig+0x744>
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6fc:	d204      	bcs.n	800c708 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c704:	60da      	str	r2, [r3, #12]
 800c706:	e1f0      	b.n	800caea <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c70e:	e1ec      	b.n	800caea <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c718:	f040 8100 	bne.w	800c91c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c71c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c720:	2b40      	cmp	r3, #64	; 0x40
 800c722:	f200 80b7 	bhi.w	800c894 <UART_SetConfig+0x8d0>
 800c726:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <UART_SetConfig+0x768>)
 800c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72c:	0800c831 	.word	0x0800c831
 800c730:	0800c839 	.word	0x0800c839
 800c734:	0800c895 	.word	0x0800c895
 800c738:	0800c895 	.word	0x0800c895
 800c73c:	0800c841 	.word	0x0800c841
 800c740:	0800c895 	.word	0x0800c895
 800c744:	0800c895 	.word	0x0800c895
 800c748:	0800c895 	.word	0x0800c895
 800c74c:	0800c851 	.word	0x0800c851
 800c750:	0800c895 	.word	0x0800c895
 800c754:	0800c895 	.word	0x0800c895
 800c758:	0800c895 	.word	0x0800c895
 800c75c:	0800c895 	.word	0x0800c895
 800c760:	0800c895 	.word	0x0800c895
 800c764:	0800c895 	.word	0x0800c895
 800c768:	0800c895 	.word	0x0800c895
 800c76c:	0800c861 	.word	0x0800c861
 800c770:	0800c895 	.word	0x0800c895
 800c774:	0800c895 	.word	0x0800c895
 800c778:	0800c895 	.word	0x0800c895
 800c77c:	0800c895 	.word	0x0800c895
 800c780:	0800c895 	.word	0x0800c895
 800c784:	0800c895 	.word	0x0800c895
 800c788:	0800c895 	.word	0x0800c895
 800c78c:	0800c895 	.word	0x0800c895
 800c790:	0800c895 	.word	0x0800c895
 800c794:	0800c895 	.word	0x0800c895
 800c798:	0800c895 	.word	0x0800c895
 800c79c:	0800c895 	.word	0x0800c895
 800c7a0:	0800c895 	.word	0x0800c895
 800c7a4:	0800c895 	.word	0x0800c895
 800c7a8:	0800c895 	.word	0x0800c895
 800c7ac:	0800c887 	.word	0x0800c887
 800c7b0:	0800c895 	.word	0x0800c895
 800c7b4:	0800c895 	.word	0x0800c895
 800c7b8:	0800c895 	.word	0x0800c895
 800c7bc:	0800c895 	.word	0x0800c895
 800c7c0:	0800c895 	.word	0x0800c895
 800c7c4:	0800c895 	.word	0x0800c895
 800c7c8:	0800c895 	.word	0x0800c895
 800c7cc:	0800c895 	.word	0x0800c895
 800c7d0:	0800c895 	.word	0x0800c895
 800c7d4:	0800c895 	.word	0x0800c895
 800c7d8:	0800c895 	.word	0x0800c895
 800c7dc:	0800c895 	.word	0x0800c895
 800c7e0:	0800c895 	.word	0x0800c895
 800c7e4:	0800c895 	.word	0x0800c895
 800c7e8:	0800c895 	.word	0x0800c895
 800c7ec:	0800c895 	.word	0x0800c895
 800c7f0:	0800c895 	.word	0x0800c895
 800c7f4:	0800c895 	.word	0x0800c895
 800c7f8:	0800c895 	.word	0x0800c895
 800c7fc:	0800c895 	.word	0x0800c895
 800c800:	0800c895 	.word	0x0800c895
 800c804:	0800c895 	.word	0x0800c895
 800c808:	0800c895 	.word	0x0800c895
 800c80c:	0800c895 	.word	0x0800c895
 800c810:	0800c895 	.word	0x0800c895
 800c814:	0800c895 	.word	0x0800c895
 800c818:	0800c895 	.word	0x0800c895
 800c81c:	0800c895 	.word	0x0800c895
 800c820:	0800c895 	.word	0x0800c895
 800c824:	0800c895 	.word	0x0800c895
 800c828:	0800c895 	.word	0x0800c895
 800c82c:	0800c88d 	.word	0x0800c88d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c830:	f7fb f99e 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800c834:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c836:	e033      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c838:	f7fb f9b0 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800c83c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c83e:	e02f      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c840:	f107 0314 	add.w	r3, r7, #20
 800c844:	4618      	mov	r0, r3
 800c846:	f7fc fb7d 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c84e:	e027      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c850:	f107 0308 	add.w	r3, r7, #8
 800c854:	4618      	mov	r0, r3
 800c856:	f7fc fcc1 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c85e:	e01f      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c860:	4b2b      	ldr	r3, [pc, #172]	; (800c910 <UART_SetConfig+0x94c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 0320 	and.w	r3, r3, #32
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d009      	beq.n	800c880 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c86c:	4b28      	ldr	r3, [pc, #160]	; (800c910 <UART_SetConfig+0x94c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	08db      	lsrs	r3, r3, #3
 800c872:	f003 0303 	and.w	r3, r3, #3
 800c876:	4a27      	ldr	r2, [pc, #156]	; (800c914 <UART_SetConfig+0x950>)
 800c878:	fa22 f303 	lsr.w	r3, r2, r3
 800c87c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c87e:	e00f      	b.n	800c8a0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800c880:	4b24      	ldr	r3, [pc, #144]	; (800c914 <UART_SetConfig+0x950>)
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c884:	e00c      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c886:	4b24      	ldr	r3, [pc, #144]	; (800c918 <UART_SetConfig+0x954>)
 800c888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c88a:	e009      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c88c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c892:	e005      	b.n	800c8a0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800c894:	2300      	movs	r3, #0
 800c896:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c89e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 8121 	beq.w	800caea <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ac:	4a17      	ldr	r2, [pc, #92]	; (800c90c <UART_SetConfig+0x948>)
 800c8ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8ba:	005a      	lsls	r2, r3, #1
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	085b      	lsrs	r3, r3, #1
 800c8c2:	441a      	add	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	2b0f      	cmp	r3, #15
 800c8d4:	d916      	bls.n	800c904 <UART_SetConfig+0x940>
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8dc:	d212      	bcs.n	800c904 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	f023 030f 	bic.w	r3, r3, #15
 800c8e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	085b      	lsrs	r3, r3, #1
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c900:	60da      	str	r2, [r3, #12]
 800c902:	e0f2      	b.n	800caea <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c90a:	e0ee      	b.n	800caea <UART_SetConfig+0xb26>
 800c90c:	080150fc 	.word	0x080150fc
 800c910:	58024400 	.word	0x58024400
 800c914:	03d09000 	.word	0x03d09000
 800c918:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800c91c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c920:	2b40      	cmp	r3, #64	; 0x40
 800c922:	f200 80b7 	bhi.w	800ca94 <UART_SetConfig+0xad0>
 800c926:	a201      	add	r2, pc, #4	; (adr r2, 800c92c <UART_SetConfig+0x968>)
 800c928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c92c:	0800ca31 	.word	0x0800ca31
 800c930:	0800ca39 	.word	0x0800ca39
 800c934:	0800ca95 	.word	0x0800ca95
 800c938:	0800ca95 	.word	0x0800ca95
 800c93c:	0800ca41 	.word	0x0800ca41
 800c940:	0800ca95 	.word	0x0800ca95
 800c944:	0800ca95 	.word	0x0800ca95
 800c948:	0800ca95 	.word	0x0800ca95
 800c94c:	0800ca51 	.word	0x0800ca51
 800c950:	0800ca95 	.word	0x0800ca95
 800c954:	0800ca95 	.word	0x0800ca95
 800c958:	0800ca95 	.word	0x0800ca95
 800c95c:	0800ca95 	.word	0x0800ca95
 800c960:	0800ca95 	.word	0x0800ca95
 800c964:	0800ca95 	.word	0x0800ca95
 800c968:	0800ca95 	.word	0x0800ca95
 800c96c:	0800ca61 	.word	0x0800ca61
 800c970:	0800ca95 	.word	0x0800ca95
 800c974:	0800ca95 	.word	0x0800ca95
 800c978:	0800ca95 	.word	0x0800ca95
 800c97c:	0800ca95 	.word	0x0800ca95
 800c980:	0800ca95 	.word	0x0800ca95
 800c984:	0800ca95 	.word	0x0800ca95
 800c988:	0800ca95 	.word	0x0800ca95
 800c98c:	0800ca95 	.word	0x0800ca95
 800c990:	0800ca95 	.word	0x0800ca95
 800c994:	0800ca95 	.word	0x0800ca95
 800c998:	0800ca95 	.word	0x0800ca95
 800c99c:	0800ca95 	.word	0x0800ca95
 800c9a0:	0800ca95 	.word	0x0800ca95
 800c9a4:	0800ca95 	.word	0x0800ca95
 800c9a8:	0800ca95 	.word	0x0800ca95
 800c9ac:	0800ca87 	.word	0x0800ca87
 800c9b0:	0800ca95 	.word	0x0800ca95
 800c9b4:	0800ca95 	.word	0x0800ca95
 800c9b8:	0800ca95 	.word	0x0800ca95
 800c9bc:	0800ca95 	.word	0x0800ca95
 800c9c0:	0800ca95 	.word	0x0800ca95
 800c9c4:	0800ca95 	.word	0x0800ca95
 800c9c8:	0800ca95 	.word	0x0800ca95
 800c9cc:	0800ca95 	.word	0x0800ca95
 800c9d0:	0800ca95 	.word	0x0800ca95
 800c9d4:	0800ca95 	.word	0x0800ca95
 800c9d8:	0800ca95 	.word	0x0800ca95
 800c9dc:	0800ca95 	.word	0x0800ca95
 800c9e0:	0800ca95 	.word	0x0800ca95
 800c9e4:	0800ca95 	.word	0x0800ca95
 800c9e8:	0800ca95 	.word	0x0800ca95
 800c9ec:	0800ca95 	.word	0x0800ca95
 800c9f0:	0800ca95 	.word	0x0800ca95
 800c9f4:	0800ca95 	.word	0x0800ca95
 800c9f8:	0800ca95 	.word	0x0800ca95
 800c9fc:	0800ca95 	.word	0x0800ca95
 800ca00:	0800ca95 	.word	0x0800ca95
 800ca04:	0800ca95 	.word	0x0800ca95
 800ca08:	0800ca95 	.word	0x0800ca95
 800ca0c:	0800ca95 	.word	0x0800ca95
 800ca10:	0800ca95 	.word	0x0800ca95
 800ca14:	0800ca95 	.word	0x0800ca95
 800ca18:	0800ca95 	.word	0x0800ca95
 800ca1c:	0800ca95 	.word	0x0800ca95
 800ca20:	0800ca95 	.word	0x0800ca95
 800ca24:	0800ca95 	.word	0x0800ca95
 800ca28:	0800ca95 	.word	0x0800ca95
 800ca2c:	0800ca8d 	.word	0x0800ca8d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca30:	f7fb f89e 	bl	8007b70 <HAL_RCC_GetPCLK1Freq>
 800ca34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca36:	e033      	b.n	800caa0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca38:	f7fb f8b0 	bl	8007b9c <HAL_RCC_GetPCLK2Freq>
 800ca3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca3e:	e02f      	b.n	800caa0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca40:	f107 0314 	add.w	r3, r7, #20
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fc fa7d 	bl	8008f44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca4e:	e027      	b.n	800caa0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca50:	f107 0308 	add.w	r3, r7, #8
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fc fbc1 	bl	80091dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca5e:	e01f      	b.n	800caa0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca60:	4b2c      	ldr	r3, [pc, #176]	; (800cb14 <UART_SetConfig+0xb50>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 0320 	and.w	r3, r3, #32
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d009      	beq.n	800ca80 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca6c:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <UART_SetConfig+0xb50>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	08db      	lsrs	r3, r3, #3
 800ca72:	f003 0303 	and.w	r3, r3, #3
 800ca76:	4a28      	ldr	r2, [pc, #160]	; (800cb18 <UART_SetConfig+0xb54>)
 800ca78:	fa22 f303 	lsr.w	r3, r2, r3
 800ca7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca7e:	e00f      	b.n	800caa0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800ca80:	4b25      	ldr	r3, [pc, #148]	; (800cb18 <UART_SetConfig+0xb54>)
 800ca82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca84:	e00c      	b.n	800caa0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca86:	4b25      	ldr	r3, [pc, #148]	; (800cb1c <UART_SetConfig+0xb58>)
 800ca88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca8a:	e009      	b.n	800caa0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca92:	e005      	b.n	800caa0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ca94:	2300      	movs	r3, #0
 800ca96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ca9e:	bf00      	nop
    }

    if (pclk != 0U)
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d021      	beq.n	800caea <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caaa:	4a1d      	ldr	r2, [pc, #116]	; (800cb20 <UART_SetConfig+0xb5c>)
 800caac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cab0:	461a      	mov	r2, r3
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	441a      	add	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac8:	b29b      	uxth	r3, r3
 800caca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	2b0f      	cmp	r3, #15
 800cad0:	d908      	bls.n	800cae4 <UART_SetConfig+0xb20>
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad8:	d204      	bcs.n	800cae4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cae0:	60da      	str	r2, [r3, #12]
 800cae2:	e002      	b.n	800caea <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2201      	movs	r2, #1
 800caee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800cb06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3738      	adds	r7, #56	; 0x38
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cb14:	58024400 	.word	0x58024400
 800cb18:	03d09000 	.word	0x03d09000
 800cb1c:	003d0900 	.word	0x003d0900
 800cb20:	080150fc 	.word	0x080150fc

0800cb24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00a      	beq.n	800cb4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb52:	f003 0302 	and.w	r3, r3, #2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00a      	beq.n	800cb92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb96:	f003 0308 	and.w	r3, r3, #8
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00a      	beq.n	800cbd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbda:	f003 0320 	and.w	r3, r3, #32
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00a      	beq.n	800cbf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	430a      	orrs	r2, r1
 800cbf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d01a      	beq.n	800cc3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc22:	d10a      	bne.n	800cc3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	430a      	orrs	r2, r1
 800cc38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00a      	beq.n	800cc5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	430a      	orrs	r2, r1
 800cc5a:	605a      	str	r2, [r3, #4]
  }
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af02      	add	r7, sp, #8
 800cc6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cc78:	f7f5 f85e 	bl	8001d38 <HAL_GetTick>
 800cc7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0308 	and.w	r3, r3, #8
 800cc88:	2b08      	cmp	r3, #8
 800cc8a:	d10e      	bne.n	800ccaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f82c 	bl	800ccf8 <UART_WaitOnFlagUntilTimeout>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cca6:	2303      	movs	r3, #3
 800cca8:	e022      	b.n	800ccf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	d10e      	bne.n	800ccd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f816 	bl	800ccf8 <UART_WaitOnFlagUntilTimeout>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e00c      	b.n	800ccf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2220      	movs	r2, #32
 800ccda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	4613      	mov	r3, r2
 800cd06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd08:	e062      	b.n	800cdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd10:	d05e      	beq.n	800cdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd12:	f7f5 f811 	bl	8001d38 <HAL_GetTick>
 800cd16:	4602      	mov	r2, r0
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d302      	bcc.n	800cd28 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d11d      	bne.n	800cd64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	689a      	ldr	r2, [r3, #8]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f022 0201 	bic.w	r2, r2, #1
 800cd46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e045      	b.n	800cdf0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0304 	and.w	r3, r3, #4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d02e      	beq.n	800cdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	69db      	ldr	r3, [r3, #28]
 800cd78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd80:	d126      	bne.n	800cdd0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689a      	ldr	r2, [r3, #8]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f022 0201 	bic.w	r2, r2, #1
 800cdaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2220      	movs	r2, #32
 800cdb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2220      	movs	r2, #32
 800cdb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e00f      	b.n	800cdf0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	69da      	ldr	r2, [r3, #28]
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	4013      	ands	r3, r2
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	bf0c      	ite	eq
 800cde0:	2301      	moveq	r3, #1
 800cde2:	2300      	movne	r3, #0
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	461a      	mov	r2, r3
 800cde8:	79fb      	ldrb	r3, [r7, #7]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d08d      	beq.n	800cd0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ce0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ce1e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2220      	movs	r2, #32
 800ce24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6899      	ldr	r1, [r3, #8]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	4b08      	ldr	r3, [pc, #32]	; (800ce78 <UART_EndRxTransfer+0x44>)
 800ce58:	400b      	ands	r3, r1
 800ce5a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2220      	movs	r2, #32
 800ce60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ce6a:	bf00      	nop
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	effffffe 	.word	0xeffffffe

0800ce7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	69db      	ldr	r3, [r3, #28]
 800ce8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce92:	d01f      	beq.n	800ced4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceaa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0201 	bic.w	r2, r2, #1
 800ceba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2220      	movs	r2, #32
 800ced0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7f3 fef3 	bl	8000cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ceda:	bf00      	nop
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f7ff f853 	bl	800bf9c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cef6:	bf00      	nop
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b086      	sub	sp, #24
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf26:	2b80      	cmp	r3, #128	; 0x80
 800cf28:	d109      	bne.n	800cf3e <UART_DMAError+0x40>
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b21      	cmp	r3, #33	; 0x21
 800cf2e:	d106      	bne.n	800cf3e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cf38:	6978      	ldr	r0, [r7, #20]
 800cf3a:	f7ff ff5d 	bl	800cdf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf48:	2b40      	cmp	r3, #64	; 0x40
 800cf4a:	d109      	bne.n	800cf60 <UART_DMAError+0x62>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b22      	cmp	r3, #34	; 0x22
 800cf50:	d106      	bne.n	800cf60 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cf5a:	6978      	ldr	r0, [r7, #20]
 800cf5c:	f7ff ff6a 	bl	800ce34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf66:	f043 0210 	orr.w	r2, r3, #16
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf70:	6978      	ldr	r0, [r7, #20]
 800cf72:	f7ff f81d 	bl	800bfb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f7ff f807 	bl	800bfb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b082      	sub	sp, #8
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfc0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7fe ffd9 	bl	800bf88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cfe6:	bf00      	nop
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b083      	sub	sp, #12
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cffa:	bf00      	nop
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d006:	b480      	push	{r7}
 800d008:	b083      	sub	sp, #12
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d00e:	bf00      	nop
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d101      	bne.n	800d030 <HAL_UARTEx_DisableFifoMode+0x16>
 800d02c:	2302      	movs	r3, #2
 800d02e:	e027      	b.n	800d080 <HAL_UARTEx_DisableFifoMode+0x66>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2224      	movs	r2, #36	; 0x24
 800d03c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f022 0201 	bic.w	r2, r2, #1
 800d056:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d05e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2220      	movs	r2, #32
 800d072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d101      	bne.n	800d0a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	e02d      	b.n	800d100 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2224      	movs	r2, #36	; 0x24
 800d0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0201 	bic.w	r2, r2, #1
 800d0ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 f84f 	bl	800d184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2220      	movs	r2, #32
 800d0f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d101      	bne.n	800d120 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d11c:	2302      	movs	r3, #2
 800d11e:	e02d      	b.n	800d17c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2224      	movs	r2, #36	; 0x24
 800d12c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 0201 	bic.w	r2, r2, #1
 800d146:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	430a      	orrs	r2, r1
 800d15a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f811 	bl	800d184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2220      	movs	r2, #32
 800d16e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d184:	b480      	push	{r7}
 800d186:	b089      	sub	sp, #36	; 0x24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d18c:	4a2f      	ldr	r2, [pc, #188]	; (800d24c <UARTEx_SetNbDataToProcess+0xc8>)
 800d18e:	f107 0314 	add.w	r3, r7, #20
 800d192:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d196:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d19a:	4a2d      	ldr	r2, [pc, #180]	; (800d250 <UARTEx_SetNbDataToProcess+0xcc>)
 800d19c:	f107 030c 	add.w	r3, r7, #12
 800d1a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d108      	bne.n	800d1c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1c0:	e03d      	b.n	800d23e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1c2:	2310      	movs	r3, #16
 800d1c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1c6:	2310      	movs	r3, #16
 800d1c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	0e5b      	lsrs	r3, r3, #25
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	f003 0307 	and.w	r3, r3, #7
 800d1d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	0f5b      	lsrs	r3, r3, #29
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	f003 0307 	and.w	r3, r3, #7
 800d1e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d1ea:	7fbb      	ldrb	r3, [r7, #30]
 800d1ec:	7f3a      	ldrb	r2, [r7, #28]
 800d1ee:	f107 0120 	add.w	r1, r7, #32
 800d1f2:	440a      	add	r2, r1
 800d1f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d1f8:	fb02 f303 	mul.w	r3, r2, r3
 800d1fc:	7f3a      	ldrb	r2, [r7, #28]
 800d1fe:	f107 0120 	add.w	r1, r7, #32
 800d202:	440a      	add	r2, r1
 800d204:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d208:	fb93 f3f2 	sdiv	r3, r3, r2
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d214:	7ffb      	ldrb	r3, [r7, #31]
 800d216:	7f7a      	ldrb	r2, [r7, #29]
 800d218:	f107 0120 	add.w	r1, r7, #32
 800d21c:	440a      	add	r2, r1
 800d21e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d222:	fb02 f303 	mul.w	r3, r2, r3
 800d226:	7f7a      	ldrb	r2, [r7, #29]
 800d228:	f107 0120 	add.w	r1, r7, #32
 800d22c:	440a      	add	r2, r1
 800d22e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d232:	fb93 f3f2 	sdiv	r3, r3, r2
 800d236:	b29a      	uxth	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d23e:	bf00      	nop
 800d240:	3724      	adds	r7, #36	; 0x24
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	08015078 	.word	0x08015078
 800d250:	08015080 	.word	0x08015080

0800d254 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d254:	b084      	sub	sp, #16
 800d256:	b480      	push	{r7}
 800d258:	b085      	sub	sp, #20
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	f107 001c 	add.w	r0, r7, #28
 800d262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d26a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d26c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d26e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d272:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d276:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d27a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	4b07      	ldr	r3, [pc, #28]	; (800d2a4 <SDMMC_Init+0x50>)
 800d288:	4013      	ands	r3, r2
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	431a      	orrs	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	b004      	add	sp, #16
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	ffc02c00 	.word	0xffc02c00

0800d2a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b083      	sub	sp, #12
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f043 0203 	orr.w	r2, r3, #3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0303 	and.w	r3, r3, #3
}
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
	...

0800d324 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d342:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d348:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d34e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68da      	ldr	r2, [r3, #12]
 800d35a:	4b06      	ldr	r3, [pc, #24]	; (800d374 <SDMMC_SendCommand+0x50>)
 800d35c:	4013      	ands	r3, r2
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	431a      	orrs	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3714      	adds	r7, #20
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	fffee0c0 	.word	0xfffee0c0

0800d378 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	b2db      	uxtb	r3, r3
}
 800d386:	4618      	mov	r0, r3
 800d388:	370c      	adds	r7, #12
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d392:	b480      	push	{r7}
 800d394:	b085      	sub	sp, #20
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3314      	adds	r3, #20
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	685a      	ldr	r2, [r3, #4]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d3e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d3ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d402:	2300      	movs	r3, #0

}
 800d404:	4618      	mov	r0, r3
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d41e:	2310      	movs	r3, #16
 800d420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d422:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d428:	2300      	movs	r3, #0
 800d42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d42c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	4619      	mov	r1, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7ff ff73 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d43e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d442:	2110      	movs	r1, #16
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 fa8d 	bl	800d964 <SDMMC_GetCmdResp1>
 800d44a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d44c:	69fb      	ldr	r3, [r7, #28]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3720      	adds	r7, #32
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b088      	sub	sp, #32
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d464:	2311      	movs	r3, #17
 800d466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	4619      	mov	r1, r3
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff ff50 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d484:	f241 3288 	movw	r2, #5000	; 0x1388
 800d488:	2111      	movs	r1, #17
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fa6a 	bl	800d964 <SDMMC_GetCmdResp1>
 800d490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d492:	69fb      	ldr	r3, [r7, #28]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3720      	adds	r7, #32
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d4aa:	2312      	movs	r3, #18
 800d4ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4be:	f107 0308 	add.w	r3, r7, #8
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff ff2d 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ce:	2112      	movs	r1, #18
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa47 	bl	800d964 <SDMMC_GetCmdResp1>
 800d4d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d8:	69fb      	ldr	r3, [r7, #28]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3720      	adds	r7, #32
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b088      	sub	sp, #32
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d4f0:	2318      	movs	r3, #24
 800d4f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d502:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d504:	f107 0308 	add.w	r3, r7, #8
 800d508:	4619      	mov	r1, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff ff0a 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d510:	f241 3288 	movw	r2, #5000	; 0x1388
 800d514:	2118      	movs	r1, #24
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fa24 	bl	800d964 <SDMMC_GetCmdResp1>
 800d51c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d51e:	69fb      	ldr	r3, [r7, #28]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3720      	adds	r7, #32
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d536:	2319      	movs	r3, #25
 800d538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d53a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d53e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d540:	2300      	movs	r3, #0
 800d542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d54a:	f107 0308 	add.w	r3, r7, #8
 800d54e:	4619      	mov	r1, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7ff fee7 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d556:	f241 3288 	movw	r2, #5000	; 0x1388
 800d55a:	2119      	movs	r1, #25
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa01 	bl	800d964 <SDMMC_GetCmdResp1>
 800d562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d564:	69fb      	ldr	r3, [r7, #28]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3720      	adds	r7, #32
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d578:	2300      	movs	r3, #0
 800d57a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d57c:	230c      	movs	r3, #12
 800d57e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d580:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d586:	2300      	movs	r3, #0
 800d588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d58a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d58e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5a8:	f107 0308 	add.w	r3, r7, #8
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff feb8 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d5b4:	4a0b      	ldr	r2, [pc, #44]	; (800d5e4 <SDMMC_CmdStopTransfer+0x74>)
 800d5b6:	210c      	movs	r1, #12
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f9d3 	bl	800d964 <SDMMC_GetCmdResp1>
 800d5be:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5d2:	d101      	bne.n	800d5d8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d5d8:	69fb      	ldr	r3, [r7, #28]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3720      	adds	r7, #32
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	05f5e100 	.word	0x05f5e100

0800d5e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d5f8:	2307      	movs	r3, #7
 800d5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d600:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d602:	2300      	movs	r3, #0
 800d604:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d60a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d60c:	f107 0310 	add.w	r3, r7, #16
 800d610:	4619      	mov	r1, r3
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f7ff fe86 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d618:	f241 3288 	movw	r2, #5000	; 0x1388
 800d61c:	2107      	movs	r1, #7
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 f9a0 	bl	800d964 <SDMMC_GetCmdResp1>
 800d624:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3728      	adds	r7, #40	; 0x28
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d638:	2300      	movs	r3, #0
 800d63a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d640:	2300      	movs	r3, #0
 800d642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d644:	2300      	movs	r3, #0
 800d646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d64c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d64e:	f107 0308 	add.w	r3, r7, #8
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff fe65 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f954 	bl	800d908 <SDMMC_GetCmdError>
 800d660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d662:	69fb      	ldr	r3, [r7, #28]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3720      	adds	r7, #32
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d674:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d67a:	2308      	movs	r3, #8
 800d67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d67e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d68c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d68e:	f107 0308 	add.w	r3, r7, #8
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff fe45 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fb56 	bl	800dd4c <SDMMC_GetCmdResp7>
 800d6a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6a2:	69fb      	ldr	r3, [r7, #28]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6ba:	2337      	movs	r3, #55	; 0x37
 800d6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6ce:	f107 0308 	add.w	r3, r7, #8
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff fe25 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d6da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6de:	2137      	movs	r1, #55	; 0x37
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 f93f 	bl	800d964 <SDMMC_GetCmdResp1>
 800d6e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3720      	adds	r7, #32
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b088      	sub	sp, #32
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d700:	2329      	movs	r3, #41	; 0x29
 800d702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d704:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d70a:	2300      	movs	r3, #0
 800d70c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d70e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d712:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d714:	f107 0308 	add.w	r3, r7, #8
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fe02 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fa5b 	bl	800dbdc <SDMMC_GetCmdResp3>
 800d726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d728:	69fb      	ldr	r3, [r7, #28]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3720      	adds	r7, #32
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b088      	sub	sp, #32
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d740:	2306      	movs	r3, #6
 800d742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d744:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d74e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d752:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fde2 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d760:	f241 3288 	movw	r2, #5000	; 0x1388
 800d764:	2106      	movs	r1, #6
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f8fc 	bl	800d964 <SDMMC_GetCmdResp1>
 800d76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d76e:	69fb      	ldr	r3, [r7, #28]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d780:	2300      	movs	r3, #0
 800d782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d784:	2333      	movs	r3, #51	; 0x33
 800d786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d78e:	2300      	movs	r3, #0
 800d790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d798:	f107 0308 	add.w	r3, r7, #8
 800d79c:	4619      	mov	r1, r3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7ff fdc0 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d7a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a8:	2133      	movs	r1, #51	; 0x33
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f8da 	bl	800d964 <SDMMC_GetCmdResp1>
 800d7b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3720      	adds	r7, #32
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d7cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d7d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7dc:	f107 0308 	add.w	r3, r7, #8
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff fd9e 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f9ad 	bl	800db48 <SDMMC_GetCmdResp2>
 800d7ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b088      	sub	sp, #32
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d808:	2309      	movs	r3, #9
 800d80a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d80c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d812:	2300      	movs	r3, #0
 800d814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d81a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d81c:	f107 0308 	add.w	r3, r7, #8
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fd7e 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f98d 	bl	800db48 <SDMMC_GetCmdResp2>
 800d82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d830:	69fb      	ldr	r3, [r7, #28]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3720      	adds	r7, #32
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b088      	sub	sp, #32
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d844:	2300      	movs	r3, #0
 800d846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d848:	2303      	movs	r3, #3
 800d84a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d852:	2300      	movs	r3, #0
 800d854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d85a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff fd5e 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	2103      	movs	r1, #3
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f9f5 	bl	800dc5c <SDMMC_GetCmdResp6>
 800d872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d874:	69fb      	ldr	r3, [r7, #28]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b088      	sub	sp, #32
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d88c:	230d      	movs	r3, #13
 800d88e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d890:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d896:	2300      	movs	r3, #0
 800d898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d89a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d89e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8a0:	f107 0308 	add.w	r3, r7, #8
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff fd3c 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d8ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8b0:	210d      	movs	r1, #13
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f856 	bl	800d964 <SDMMC_GetCmdResp1>
 800d8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8ba:	69fb      	ldr	r3, [r7, #28]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3720      	adds	r7, #32
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b088      	sub	sp, #32
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d8d0:	230d      	movs	r3, #13
 800d8d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8e4:	f107 0308 	add.w	r3, r7, #8
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7ff fd1a 	bl	800d324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f4:	210d      	movs	r1, #13
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f834 	bl	800d964 <SDMMC_GetCmdResp1>
 800d8fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8fe:	69fb      	ldr	r3, [r7, #28]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d910:	4b11      	ldr	r3, [pc, #68]	; (800d958 <SDMMC_GetCmdError+0x50>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a11      	ldr	r2, [pc, #68]	; (800d95c <SDMMC_GetCmdError+0x54>)
 800d916:	fba2 2303 	umull	r2, r3, r2, r3
 800d91a:	0a5b      	lsrs	r3, r3, #9
 800d91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d920:	fb02 f303 	mul.w	r3, r2, r3
 800d924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	1e5a      	subs	r2, r3, #1
 800d92a:	60fa      	str	r2, [r7, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d934:	e009      	b.n	800d94a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0f1      	beq.n	800d926 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a06      	ldr	r2, [pc, #24]	; (800d960 <SDMMC_GetCmdError+0x58>)
 800d946:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	24000000 	.word	0x24000000
 800d95c:	10624dd3 	.word	0x10624dd3
 800d960:	002000c5 	.word	0x002000c5

0800d964 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b088      	sub	sp, #32
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	460b      	mov	r3, r1
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d972:	4b70      	ldr	r3, [pc, #448]	; (800db34 <SDMMC_GetCmdResp1+0x1d0>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a70      	ldr	r2, [pc, #448]	; (800db38 <SDMMC_GetCmdResp1+0x1d4>)
 800d978:	fba2 2303 	umull	r2, r3, r2, r3
 800d97c:	0a5a      	lsrs	r2, r3, #9
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	fb02 f303 	mul.w	r3, r2, r3
 800d984:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	1e5a      	subs	r2, r3, #1
 800d98a:	61fa      	str	r2, [r7, #28]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d994:	e0c9      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	4b67      	ldr	r3, [pc, #412]	; (800db3c <SDMMC_GetCmdResp1+0x1d8>)
 800d9a0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d0ef      	beq.n	800d986 <SDMMC_GetCmdResp1+0x22>
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1ea      	bne.n	800d986 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b4:	f003 0304 	and.w	r3, r3, #4
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2204      	movs	r2, #4
 800d9c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9c2:	2304      	movs	r3, #4
 800d9c4:	e0b1      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d004      	beq.n	800d9dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e0a6      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4a58      	ldr	r2, [pc, #352]	; (800db40 <SDMMC_GetCmdResp1+0x1dc>)
 800d9e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7ff fcc8 	bl	800d378 <SDMMC_GetCommandResponse>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	7afb      	ldrb	r3, [r7, #11]
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d001      	beq.n	800d9f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e099      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7ff fcca 	bl	800d392 <SDMMC_GetResponse>
 800d9fe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4b50      	ldr	r3, [pc, #320]	; (800db44 <SDMMC_GetCmdResp1+0x1e0>)
 800da04:	4013      	ands	r3, r2
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e08d      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	da02      	bge.n	800da1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da18:	e087      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da24:	2340      	movs	r3, #64	; 0x40
 800da26:	e080      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da32:	2380      	movs	r3, #128	; 0x80
 800da34:	e079      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d002      	beq.n	800da46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da44:	e071      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da54:	e069      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da64:	e061      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da74:	e059      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da84:	e051      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da94:	e049      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800daa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800daa4:	e041      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dab4:	e039      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dac4:	e031      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dad4:	e029      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dae0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dae4:	e021      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800daf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800daf4:	e019      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800db04:	e011      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800db10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db14:	e009      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	f003 0308 	and.w	r3, r3, #8
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800db24:	e001      	b.n	800db2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	24000000 	.word	0x24000000
 800db38:	10624dd3 	.word	0x10624dd3
 800db3c:	00200045 	.word	0x00200045
 800db40:	002000c5 	.word	0x002000c5
 800db44:	fdffe008 	.word	0xfdffe008

0800db48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db50:	4b1f      	ldr	r3, [pc, #124]	; (800dbd0 <SDMMC_GetCmdResp2+0x88>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a1f      	ldr	r2, [pc, #124]	; (800dbd4 <SDMMC_GetCmdResp2+0x8c>)
 800db56:	fba2 2303 	umull	r2, r3, r2, r3
 800db5a:	0a5b      	lsrs	r3, r3, #9
 800db5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db60:	fb02 f303 	mul.w	r3, r2, r3
 800db64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	1e5a      	subs	r2, r3, #1
 800db6a:	60fa      	str	r2, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d102      	bne.n	800db76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db74:	e026      	b.n	800dbc4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0ef      	beq.n	800db66 <SDMMC_GetCmdResp2+0x1e>
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1ea      	bne.n	800db66 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db94:	f003 0304 	and.w	r3, r3, #4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d004      	beq.n	800dba6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2204      	movs	r2, #4
 800dba0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dba2:	2304      	movs	r3, #4
 800dba4:	e00e      	b.n	800dbc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e003      	b.n	800dbc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a06      	ldr	r2, [pc, #24]	; (800dbd8 <SDMMC_GetCmdResp2+0x90>)
 800dbc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	24000000 	.word	0x24000000
 800dbd4:	10624dd3 	.word	0x10624dd3
 800dbd8:	002000c5 	.word	0x002000c5

0800dbdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b085      	sub	sp, #20
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbe4:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <SDMMC_GetCmdResp3+0x74>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a1a      	ldr	r2, [pc, #104]	; (800dc54 <SDMMC_GetCmdResp3+0x78>)
 800dbea:	fba2 2303 	umull	r2, r3, r2, r3
 800dbee:	0a5b      	lsrs	r3, r3, #9
 800dbf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbf4:	fb02 f303 	mul.w	r3, r2, r3
 800dbf8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	1e5a      	subs	r2, r3, #1
 800dbfe:	60fa      	str	r2, [r7, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc08:	e01b      	b.n	800dc42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d0ef      	beq.n	800dbfa <SDMMC_GetCmdResp3+0x1e>
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1ea      	bne.n	800dbfa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d004      	beq.n	800dc3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2204      	movs	r2, #4
 800dc34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc36:	2304      	movs	r3, #4
 800dc38:	e003      	b.n	800dc42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a06      	ldr	r2, [pc, #24]	; (800dc58 <SDMMC_GetCmdResp3+0x7c>)
 800dc3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3714      	adds	r7, #20
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	24000000 	.word	0x24000000
 800dc54:	10624dd3 	.word	0x10624dd3
 800dc58:	002000c5 	.word	0x002000c5

0800dc5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	460b      	mov	r3, r1
 800dc66:	607a      	str	r2, [r7, #4]
 800dc68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc6a:	4b35      	ldr	r3, [pc, #212]	; (800dd40 <SDMMC_GetCmdResp6+0xe4>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a35      	ldr	r2, [pc, #212]	; (800dd44 <SDMMC_GetCmdResp6+0xe8>)
 800dc70:	fba2 2303 	umull	r2, r3, r2, r3
 800dc74:	0a5b      	lsrs	r3, r3, #9
 800dc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc7a:	fb02 f303 	mul.w	r3, r2, r3
 800dc7e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	1e5a      	subs	r2, r3, #1
 800dc84:	61fa      	str	r2, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d102      	bne.n	800dc90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc8e:	e052      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d0ef      	beq.n	800dc80 <SDMMC_GetCmdResp6+0x24>
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d1ea      	bne.n	800dc80 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcae:	f003 0304 	and.w	r3, r3, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d004      	beq.n	800dcc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2204      	movs	r2, #4
 800dcba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcbc:	2304      	movs	r3, #4
 800dcbe:	e03a      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d004      	beq.n	800dcd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e02f      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f7ff fb4e 	bl	800d378 <SDMMC_GetCommandResponse>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	461a      	mov	r2, r3
 800dce0:	7afb      	ldrb	r3, [r7, #11]
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d001      	beq.n	800dcea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e025      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	4a16      	ldr	r2, [pc, #88]	; (800dd48 <SDMMC_GetCmdResp6+0xec>)
 800dcee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f7ff fb4d 	bl	800d392 <SDMMC_GetResponse>
 800dcf8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d106      	bne.n	800dd12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	0c1b      	lsrs	r3, r3, #16
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e011      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd20:	e009      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd30:	e001      	b.n	800dd36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3720      	adds	r7, #32
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	24000000 	.word	0x24000000
 800dd44:	10624dd3 	.word	0x10624dd3
 800dd48:	002000c5 	.word	0x002000c5

0800dd4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd54:	4b22      	ldr	r3, [pc, #136]	; (800dde0 <SDMMC_GetCmdResp7+0x94>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a22      	ldr	r2, [pc, #136]	; (800dde4 <SDMMC_GetCmdResp7+0x98>)
 800dd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd5e:	0a5b      	lsrs	r3, r3, #9
 800dd60:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd64:	fb02 f303 	mul.w	r3, r2, r3
 800dd68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	1e5a      	subs	r2, r3, #1
 800dd6e:	60fa      	str	r2, [r7, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd78:	e02c      	b.n	800ddd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d0ef      	beq.n	800dd6a <SDMMC_GetCmdResp7+0x1e>
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1ea      	bne.n	800dd6a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd98:	f003 0304 	and.w	r3, r3, #4
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d004      	beq.n	800ddaa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2204      	movs	r2, #4
 800dda4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dda6:	2304      	movs	r3, #4
 800dda8:	e014      	b.n	800ddd4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddae:	f003 0301 	and.w	r3, r3, #1
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d004      	beq.n	800ddc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e009      	b.n	800ddd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d002      	beq.n	800ddd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2240      	movs	r2, #64	; 0x40
 800ddd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ddd2:	2300      	movs	r3, #0

}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr
 800dde0:	24000000 	.word	0x24000000
 800dde4:	10624dd3 	.word	0x10624dd3

0800dde8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ddec:	4904      	ldr	r1, [pc, #16]	; (800de00 <MX_FATFS_Init+0x18>)
 800ddee:	4805      	ldr	r0, [pc, #20]	; (800de04 <MX_FATFS_Init+0x1c>)
 800ddf0:	f002 fff4 	bl	8010ddc <FATFS_LinkDriver>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	4b03      	ldr	r3, [pc, #12]	; (800de08 <MX_FATFS_Init+0x20>)
 800ddfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ddfc:	bf00      	nop
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	2406ef34 	.word	0x2406ef34
 800de04:	08015114 	.word	0x08015114
 800de08:	2406ef30 	.word	0x2406ef30

0800de0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de0c:	b480      	push	{r7}
 800de0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de12:	4618      	mov	r0, r3
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de26:	f000 f885 	bl	800df34 <BSP_SD_IsDetected>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d001      	beq.n	800de34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800de30:	2302      	movs	r3, #2
 800de32:	e012      	b.n	800de5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800de34:	480b      	ldr	r0, [pc, #44]	; (800de64 <BSP_SD_Init+0x48>)
 800de36:	f7fb fdcd 	bl	80099d4 <HAL_SD_Init>
 800de3a:	4603      	mov	r3, r0
 800de3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d109      	bne.n	800de58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800de44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800de48:	4806      	ldr	r0, [pc, #24]	; (800de64 <BSP_SD_Init+0x48>)
 800de4a:	f7fc fc6b 	bl	800a724 <HAL_SD_ConfigWideBusOperation>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800de54:	2301      	movs	r3, #1
 800de56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800de58:	79fb      	ldrb	r3, [r7, #7]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	2406ec9c 	.word	0x2406ec9c

0800de68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	68f9      	ldr	r1, [r7, #12]
 800de7e:	4806      	ldr	r0, [pc, #24]	; (800de98 <BSP_SD_ReadBlocks_DMA+0x30>)
 800de80:	f7fb feba 	bl	8009bf8 <HAL_SD_ReadBlocks_DMA>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	2406ec9c 	.word	0x2406ec9c

0800de9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	68f9      	ldr	r1, [r7, #12]
 800deb2:	4806      	ldr	r0, [pc, #24]	; (800decc <BSP_SD_WriteBlocks_DMA+0x30>)
 800deb4:	f7fb ff48 	bl	8009d48 <HAL_SD_WriteBlocks_DMA>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d001      	beq.n	800dec2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3718      	adds	r7, #24
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	2406ec9c 	.word	0x2406ec9c

0800ded0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ded4:	4805      	ldr	r0, [pc, #20]	; (800deec <BSP_SD_GetCardState+0x1c>)
 800ded6:	f7fc fccf 	bl	800a878 <HAL_SD_GetCardState>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b04      	cmp	r3, #4
 800dede:	bf14      	ite	ne
 800dee0:	2301      	movne	r3, #1
 800dee2:	2300      	moveq	r3, #0
 800dee4:	b2db      	uxtb	r3, r3
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	2406ec9c 	.word	0x2406ec9c

0800def0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800def8:	6879      	ldr	r1, [r7, #4]
 800defa:	4803      	ldr	r0, [pc, #12]	; (800df08 <BSP_SD_GetCardInfo+0x18>)
 800defc:	f7fc fbe6 	bl	800a6cc <HAL_SD_GetCardInfo>
}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	2406ec9c 	.word	0x2406ec9c

0800df0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800df14:	f000 f9a0 	bl	800e258 <BSP_SD_WriteCpltCallback>
}
 800df18:	bf00      	nop
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800df28:	f000 f9a4 	bl	800e274 <BSP_SD_ReadCpltCallback>
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800df3a:	2301      	movs	r3, #1
 800df3c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	b2db      	uxtb	r3, r3
}
 800df42:	4618      	mov	r0, r3
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b084      	sub	sp, #16
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800df56:	f002 ffd9 	bl	8010f0c <osKernelSysTick>
 800df5a:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800df5c:	e006      	b.n	800df6c <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df5e:	f7ff ffb7 	bl	800ded0 <BSP_SD_GetCardState>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	e009      	b.n	800df80 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800df6c:	f002 ffce 	bl	8010f0c <osKernelSysTick>
 800df70:	4602      	mov	r2, r0
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d8f0      	bhi.n	800df5e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800df7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df80:	4618      	mov	r0, r3
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	4603      	mov	r3, r0
 800df90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800df92:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <SD_CheckStatus+0x38>)
 800df94:	2201      	movs	r2, #1
 800df96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800df98:	f7ff ff9a 	bl	800ded0 <BSP_SD_GetCardState>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d107      	bne.n	800dfb2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dfa2:	4b07      	ldr	r3, [pc, #28]	; (800dfc0 <SD_CheckStatus+0x38>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	f023 0301 	bic.w	r3, r3, #1
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <SD_CheckStatus+0x38>)
 800dfb0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dfb2:	4b03      	ldr	r3, [pc, #12]	; (800dfc0 <SD_CheckStatus+0x38>)
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	b2db      	uxtb	r3, r3
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	2400000d 	.word	0x2400000d

0800dfc4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dfc4:	b590      	push	{r4, r7, lr}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dfce:	4b20      	ldr	r3, [pc, #128]	; (800e050 <SD_initialize+0x8c>)
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800dfd4:	f002 ff8e 	bl	8010ef4 <osKernelRunning>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d030      	beq.n	800e040 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dfde:	f7ff ff1d 	bl	800de1c <BSP_SD_Init>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d107      	bne.n	800dff8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dfe8:	79fb      	ldrb	r3, [r7, #7]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7ff ffcc 	bl	800df88 <SD_CheckStatus>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
 800dff4:	4b16      	ldr	r3, [pc, #88]	; (800e050 <SD_initialize+0x8c>)
 800dff6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dff8:	4b15      	ldr	r3, [pc, #84]	; (800e050 <SD_initialize+0x8c>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d01e      	beq.n	800e040 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e002:	4b14      	ldr	r3, [pc, #80]	; (800e054 <SD_initialize+0x90>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10e      	bne.n	800e028 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e00a:	4b13      	ldr	r3, [pc, #76]	; (800e058 <SD_initialize+0x94>)
 800e00c:	f107 0408 	add.w	r4, r7, #8
 800e010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e016:	f107 0308 	add.w	r3, r7, #8
 800e01a:	2100      	movs	r1, #0
 800e01c:	4618      	mov	r0, r3
 800e01e:	f003 fa28 	bl	8011472 <osMessageCreate>
 800e022:	4602      	mov	r2, r0
 800e024:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <SD_initialize+0x90>)
 800e026:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e028:	4b0a      	ldr	r3, [pc, #40]	; (800e054 <SD_initialize+0x90>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d107      	bne.n	800e040 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e030:	4b07      	ldr	r3, [pc, #28]	; (800e050 <SD_initialize+0x8c>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	b2db      	uxtb	r3, r3
 800e036:	f043 0301 	orr.w	r3, r3, #1
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <SD_initialize+0x8c>)
 800e03e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e040:	4b03      	ldr	r3, [pc, #12]	; (800e050 <SD_initialize+0x8c>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	b2db      	uxtb	r3, r3
}
 800e046:	4618      	mov	r0, r3
 800e048:	371c      	adds	r7, #28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd90      	pop	{r4, r7, pc}
 800e04e:	bf00      	nop
 800e050:	2400000d 	.word	0x2400000d
 800e054:	24014900 	.word	0x24014900
 800e058:	08015088 	.word	0x08015088

0800e05c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	4603      	mov	r3, r0
 800e064:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff ff8d 	bl	800df88 <SD_CheckStatus>
 800e06e:	4603      	mov	r3, r0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08a      	sub	sp, #40	; 0x28
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60b9      	str	r1, [r7, #8]
 800e080:	607a      	str	r2, [r7, #4]
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	4603      	mov	r3, r0
 800e086:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e08e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e092:	f7ff ff5c 	bl	800df4e <SD_CheckStatusWithTimeout>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da02      	bge.n	800e0a2 <SD_read+0x2a>
  {
    return res;
 800e09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a0:	e032      	b.n	800e108 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	68b8      	ldr	r0, [r7, #8]
 800e0a8:	f7ff fede 	bl	800de68 <BSP_SD_ReadBlocks_DMA>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e0b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d124      	bne.n	800e104 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e0ba:	4b15      	ldr	r3, [pc, #84]	; (800e110 <SD_read+0x98>)
 800e0bc:	6819      	ldr	r1, [r3, #0]
 800e0be:	f107 0314 	add.w	r3, r7, #20
 800e0c2:	f247 5230 	movw	r2, #30000	; 0x7530
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f003 fa3c 	bl	8011544 <osMessageGet>

    if (event.status == osEventMessage)
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	2b10      	cmp	r3, #16
 800e0d0:	d118      	bne.n	800e104 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d115      	bne.n	800e104 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e0d8:	f002 ff18 	bl	8010f0c <osKernelSysTick>
 800e0dc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e0de:	e008      	b.n	800e0f2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0e0:	f7ff fef6 	bl	800ded0 <BSP_SD_GetCardState>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d103      	bne.n	800e0f2 <SD_read+0x7a>
              {
                res = RES_OK;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e0f0:	e008      	b.n	800e104 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e0f2:	f002 ff0b 	bl	8010f0c <osKernelSysTick>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	6a3b      	ldr	r3, [r7, #32]
 800e0fa:	1ad3      	subs	r3, r2, r3
 800e0fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800e100:	4293      	cmp	r3, r2
 800e102:	d9ed      	bls.n	800e0e0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3728      	adds	r7, #40	; 0x28
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	24014900 	.word	0x24014900

0800e114 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08a      	sub	sp, #40	; 0x28
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	607a      	str	r2, [r7, #4]
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	4603      	mov	r3, r0
 800e122:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e12a:	f247 5030 	movw	r0, #30000	; 0x7530
 800e12e:	f7ff ff0e 	bl	800df4e <SD_CheckStatusWithTimeout>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	da02      	bge.n	800e13e <SD_write+0x2a>
  {
    return res;
 800e138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e13c:	e02e      	b.n	800e19c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	68b8      	ldr	r0, [r7, #8]
 800e144:	f7ff feaa 	bl	800de9c <BSP_SD_WriteBlocks_DMA>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d124      	bne.n	800e198 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e14e:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <SD_write+0x90>)
 800e150:	6819      	ldr	r1, [r3, #0]
 800e152:	f107 0314 	add.w	r3, r7, #20
 800e156:	f247 5230 	movw	r2, #30000	; 0x7530
 800e15a:	4618      	mov	r0, r3
 800e15c:	f003 f9f2 	bl	8011544 <osMessageGet>

    if (event.status == osEventMessage)
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	2b10      	cmp	r3, #16
 800e164:	d118      	bne.n	800e198 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d115      	bne.n	800e198 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e16c:	f002 fece 	bl	8010f0c <osKernelSysTick>
 800e170:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e172:	e008      	b.n	800e186 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e174:	f7ff feac 	bl	800ded0 <BSP_SD_GetCardState>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d103      	bne.n	800e186 <SD_write+0x72>
          {
            res = RES_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e184:	e008      	b.n	800e198 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e186:	f002 fec1 	bl	8010f0c <osKernelSysTick>
 800e18a:	4602      	mov	r2, r0
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	f247 522f 	movw	r2, #29999	; 0x752f
 800e194:	4293      	cmp	r3, r2
 800e196:	d9ed      	bls.n	800e174 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3728      	adds	r7, #40	; 0x28
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	24014900 	.word	0x24014900

0800e1a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b08c      	sub	sp, #48	; 0x30
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	603a      	str	r2, [r7, #0]
 800e1b2:	71fb      	strb	r3, [r7, #7]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e1be:	4b25      	ldr	r3, [pc, #148]	; (800e254 <SD_ioctl+0xac>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 0301 	and.w	r3, r3, #1
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <SD_ioctl+0x28>
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e03c      	b.n	800e24a <SD_ioctl+0xa2>

  switch (cmd)
 800e1d0:	79bb      	ldrb	r3, [r7, #6]
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d834      	bhi.n	800e240 <SD_ioctl+0x98>
 800e1d6:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <SD_ioctl+0x34>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e1ed 	.word	0x0800e1ed
 800e1e0:	0800e1f5 	.word	0x0800e1f5
 800e1e4:	0800e20d 	.word	0x0800e20d
 800e1e8:	0800e227 	.word	0x0800e227
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e1f2:	e028      	b.n	800e246 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e1f4:	f107 0308 	add.w	r3, r7, #8
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7ff fe79 	bl	800def0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e1fe:	6a3a      	ldr	r2, [r7, #32]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e20a:	e01c      	b.n	800e246 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e20c:	f107 0308 	add.w	r3, r7, #8
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff fe6d 	bl	800def0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	b29a      	uxth	r2, r3
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e224:	e00f      	b.n	800e246 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e226:	f107 0308 	add.w	r3, r7, #8
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff fe60 	bl	800def0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	0a5a      	lsrs	r2, r3, #9
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e23e:	e002      	b.n	800e246 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e240:	2304      	movs	r3, #4
 800e242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3730      	adds	r7, #48	; 0x30
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	2400000d 	.word	0x2400000d

0800e258 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e25c:	4b04      	ldr	r3, [pc, #16]	; (800e270 <BSP_SD_WriteCpltCallback+0x18>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2200      	movs	r2, #0
 800e262:	2102      	movs	r1, #2
 800e264:	4618      	mov	r0, r3
 800e266:	f003 f92d 	bl	80114c4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e26a:	bf00      	nop
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	24014900 	.word	0x24014900

0800e274 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e278:	4b04      	ldr	r3, [pc, #16]	; (800e28c <BSP_SD_ReadCpltCallback+0x18>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2200      	movs	r2, #0
 800e27e:	2101      	movs	r1, #1
 800e280:	4618      	mov	r0, r3
 800e282:	f003 f91f 	bl	80114c4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e286:	bf00      	nop
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	24014900 	.word	0x24014900

0800e290 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	4a08      	ldr	r2, [pc, #32]	; (800e2c0 <disk_status+0x30>)
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	79fa      	ldrb	r2, [r7, #7]
 800e2a8:	4905      	ldr	r1, [pc, #20]	; (800e2c0 <disk_status+0x30>)
 800e2aa:	440a      	add	r2, r1
 800e2ac:	7a12      	ldrb	r2, [r2, #8]
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	4798      	blx	r3
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	2401492c 	.word	0x2401492c

0800e2c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	4a0d      	ldr	r2, [pc, #52]	; (800e30c <disk_initialize+0x48>)
 800e2d6:	5cd3      	ldrb	r3, [r2, r3]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d111      	bne.n	800e300 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	4a0b      	ldr	r2, [pc, #44]	; (800e30c <disk_initialize+0x48>)
 800e2e0:	2101      	movs	r1, #1
 800e2e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	4a09      	ldr	r2, [pc, #36]	; (800e30c <disk_initialize+0x48>)
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4413      	add	r3, r2
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	79fa      	ldrb	r2, [r7, #7]
 800e2f2:	4906      	ldr	r1, [pc, #24]	; (800e30c <disk_initialize+0x48>)
 800e2f4:	440a      	add	r2, r1
 800e2f6:	7a12      	ldrb	r2, [r2, #8]
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4798      	blx	r3
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e300:	7bfb      	ldrb	r3, [r7, #15]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	2401492c 	.word	0x2401492c

0800e310 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e310:	b590      	push	{r4, r7, lr}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
 800e31a:	603b      	str	r3, [r7, #0]
 800e31c:	4603      	mov	r3, r0
 800e31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	4a0a      	ldr	r2, [pc, #40]	; (800e34c <disk_read+0x3c>)
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	689c      	ldr	r4, [r3, #8]
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
 800e32e:	4a07      	ldr	r2, [pc, #28]	; (800e34c <disk_read+0x3c>)
 800e330:	4413      	add	r3, r2
 800e332:	7a18      	ldrb	r0, [r3, #8]
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	68b9      	ldr	r1, [r7, #8]
 800e33a:	47a0      	blx	r4
 800e33c:	4603      	mov	r3, r0
 800e33e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e340:	7dfb      	ldrb	r3, [r7, #23]
}
 800e342:	4618      	mov	r0, r3
 800e344:	371c      	adds	r7, #28
 800e346:	46bd      	mov	sp, r7
 800e348:	bd90      	pop	{r4, r7, pc}
 800e34a:	bf00      	nop
 800e34c:	2401492c 	.word	0x2401492c

0800e350 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e350:	b590      	push	{r4, r7, lr}
 800e352:	b087      	sub	sp, #28
 800e354:	af00      	add	r7, sp, #0
 800e356:	60b9      	str	r1, [r7, #8]
 800e358:	607a      	str	r2, [r7, #4]
 800e35a:	603b      	str	r3, [r7, #0]
 800e35c:	4603      	mov	r3, r0
 800e35e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e360:	7bfb      	ldrb	r3, [r7, #15]
 800e362:	4a0a      	ldr	r2, [pc, #40]	; (800e38c <disk_write+0x3c>)
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	68dc      	ldr	r4, [r3, #12]
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	4a07      	ldr	r2, [pc, #28]	; (800e38c <disk_write+0x3c>)
 800e370:	4413      	add	r3, r2
 800e372:	7a18      	ldrb	r0, [r3, #8]
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	68b9      	ldr	r1, [r7, #8]
 800e37a:	47a0      	blx	r4
 800e37c:	4603      	mov	r3, r0
 800e37e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e380:	7dfb      	ldrb	r3, [r7, #23]
}
 800e382:	4618      	mov	r0, r3
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	bd90      	pop	{r4, r7, pc}
 800e38a:	bf00      	nop
 800e38c:	2401492c 	.word	0x2401492c

0800e390 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	4603      	mov	r3, r0
 800e398:	603a      	str	r2, [r7, #0]
 800e39a:	71fb      	strb	r3, [r7, #7]
 800e39c:	460b      	mov	r3, r1
 800e39e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	4a09      	ldr	r2, [pc, #36]	; (800e3c8 <disk_ioctl+0x38>)
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	79fa      	ldrb	r2, [r7, #7]
 800e3ae:	4906      	ldr	r1, [pc, #24]	; (800e3c8 <disk_ioctl+0x38>)
 800e3b0:	440a      	add	r2, r1
 800e3b2:	7a10      	ldrb	r0, [r2, #8]
 800e3b4:	79b9      	ldrb	r1, [r7, #6]
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	4798      	blx	r3
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	2401492c 	.word	0x2401492c

0800e3cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e3dc:	89fb      	ldrh	r3, [r7, #14]
 800e3de:	021b      	lsls	r3, r3, #8
 800e3e0:	b21a      	sxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	b21b      	sxth	r3, r3
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	b21b      	sxth	r3, r3
 800e3ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e3ee:	89fb      	ldrh	r3, [r7, #14]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	3303      	adds	r3, #3
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	021b      	lsls	r3, r3, #8
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	3202      	adds	r2, #2
 800e414:	7812      	ldrb	r2, [r2, #0]
 800e416:	4313      	orrs	r3, r2
 800e418:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	021b      	lsls	r3, r3, #8
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	3201      	adds	r2, #1
 800e422:	7812      	ldrb	r2, [r2, #0]
 800e424:	4313      	orrs	r3, r2
 800e426:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	021b      	lsls	r3, r3, #8
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	7812      	ldrb	r2, [r2, #0]
 800e430:	4313      	orrs	r3, r2
 800e432:	60fb      	str	r3, [r7, #12]
	return rv;
 800e434:	68fb      	ldr	r3, [r7, #12]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3714      	adds	r7, #20
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e442:	b480      	push	{r7}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
 800e44a:	460b      	mov	r3, r1
 800e44c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	607a      	str	r2, [r7, #4]
 800e454:	887a      	ldrh	r2, [r7, #2]
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	701a      	strb	r2, [r3, #0]
 800e45a:	887b      	ldrh	r3, [r7, #2]
 800e45c:	0a1b      	lsrs	r3, r3, #8
 800e45e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	607a      	str	r2, [r7, #4]
 800e466:	887a      	ldrh	r2, [r7, #2]
 800e468:	b2d2      	uxtb	r2, r2
 800e46a:	701a      	strb	r2, [r3, #0]
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	b2d2      	uxtb	r2, r2
 800e48c:	701a      	strb	r2, [r3, #0]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	0a1b      	lsrs	r3, r3, #8
 800e492:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	b2d2      	uxtb	r2, r2
 800e49e:	701a      	strb	r2, [r3, #0]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	0a1b      	lsrs	r3, r3, #8
 800e4a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	0a1b      	lsrs	r3, r3, #8
 800e4b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	607a      	str	r2, [r7, #4]
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	b2d2      	uxtb	r2, r2
 800e4c2:	701a      	strb	r2, [r3, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e4d0:	b480      	push	{r7}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00d      	beq.n	800e506 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	1c53      	adds	r3, r2, #1
 800e4ee:	613b      	str	r3, [r7, #16]
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	1c59      	adds	r1, r3, #1
 800e4f4:	6179      	str	r1, [r7, #20]
 800e4f6:	7812      	ldrb	r2, [r2, #0]
 800e4f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	607b      	str	r3, [r7, #4]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1f1      	bne.n	800e4ea <mem_cpy+0x1a>
	}
}
 800e506:	bf00      	nop
 800e508:	371c      	adds	r7, #28
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e512:	b480      	push	{r7}
 800e514:	b087      	sub	sp, #28
 800e516:	af00      	add	r7, sp, #0
 800e518:	60f8      	str	r0, [r7, #12]
 800e51a:	60b9      	str	r1, [r7, #8]
 800e51c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	1c5a      	adds	r2, r3, #1
 800e526:	617a      	str	r2, [r7, #20]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3b01      	subs	r3, #1
 800e532:	607b      	str	r3, [r7, #4]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1f3      	bne.n	800e522 <mem_set+0x10>
}
 800e53a:	bf00      	nop
 800e53c:	371c      	adds	r7, #28
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e546:	b480      	push	{r7}
 800e548:	b089      	sub	sp, #36	; 0x24
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	60f8      	str	r0, [r7, #12]
 800e54e:	60b9      	str	r1, [r7, #8]
 800e550:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	61fb      	str	r3, [r7, #28]
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	61fa      	str	r2, [r7, #28]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	4619      	mov	r1, r3
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	61ba      	str	r2, [r7, #24]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	1acb      	subs	r3, r1, r3
 800e572:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	3b01      	subs	r3, #1
 800e578:	607b      	str	r3, [r7, #4]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <mem_cmp+0x40>
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0eb      	beq.n	800e55e <mem_cmp+0x18>

	return r;
 800e586:	697b      	ldr	r3, [r7, #20]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3724      	adds	r7, #36	; 0x24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e59e:	e002      	b.n	800e5a6 <chk_chr+0x12>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	607b      	str	r3, [r7, #4]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d005      	beq.n	800e5ba <chk_chr+0x26>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d1f2      	bne.n	800e5a0 <chk_chr+0xc>
	return *str;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	370c      	adds	r7, #12
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr

0800e5ca <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d009      	beq.n	800e5ec <lock_fs+0x22>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f002 fc38 	bl	8010e52 <ff_req_grant>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <lock_fs+0x22>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e000      	b.n	800e5ee <lock_fs+0x24>
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	460b      	mov	r3, r1
 800e600:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00d      	beq.n	800e624 <unlock_fs+0x2e>
 800e608:	78fb      	ldrb	r3, [r7, #3]
 800e60a:	2b0c      	cmp	r3, #12
 800e60c:	d00a      	beq.n	800e624 <unlock_fs+0x2e>
 800e60e:	78fb      	ldrb	r3, [r7, #3]
 800e610:	2b0b      	cmp	r3, #11
 800e612:	d007      	beq.n	800e624 <unlock_fs+0x2e>
 800e614:	78fb      	ldrb	r3, [r7, #3]
 800e616:	2b0f      	cmp	r3, #15
 800e618:	d004      	beq.n	800e624 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	4618      	mov	r0, r3
 800e620:	f002 fc2c 	bl	8010e7c <ff_rel_grant>
	}
}
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e636:	2300      	movs	r3, #0
 800e638:	60bb      	str	r3, [r7, #8]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	60fb      	str	r3, [r7, #12]
 800e63e:	e029      	b.n	800e694 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e640:	4a27      	ldr	r2, [pc, #156]	; (800e6e0 <chk_lock+0xb4>)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	011b      	lsls	r3, r3, #4
 800e646:	4413      	add	r3, r2
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d01d      	beq.n	800e68a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e64e:	4a24      	ldr	r2, [pc, #144]	; (800e6e0 <chk_lock+0xb4>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	011b      	lsls	r3, r3, #4
 800e654:	4413      	add	r3, r2
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d116      	bne.n	800e68e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e660:	4a1f      	ldr	r2, [pc, #124]	; (800e6e0 <chk_lock+0xb4>)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	011b      	lsls	r3, r3, #4
 800e666:	4413      	add	r3, r2
 800e668:	3304      	adds	r3, #4
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e670:	429a      	cmp	r2, r3
 800e672:	d10c      	bne.n	800e68e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e674:	4a1a      	ldr	r2, [pc, #104]	; (800e6e0 <chk_lock+0xb4>)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	011b      	lsls	r3, r3, #4
 800e67a:	4413      	add	r3, r2
 800e67c:	3308      	adds	r3, #8
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e684:	429a      	cmp	r2, r3
 800e686:	d102      	bne.n	800e68e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e688:	e007      	b.n	800e69a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e68a:	2301      	movs	r3, #1
 800e68c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3301      	adds	r3, #1
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d9d2      	bls.n	800e640 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d109      	bne.n	800e6b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <chk_lock+0x80>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d101      	bne.n	800e6b0 <chk_lock+0x84>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	e010      	b.n	800e6d2 <chk_lock+0xa6>
 800e6b0:	2312      	movs	r3, #18
 800e6b2:	e00e      	b.n	800e6d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d108      	bne.n	800e6cc <chk_lock+0xa0>
 800e6ba:	4a09      	ldr	r2, [pc, #36]	; (800e6e0 <chk_lock+0xb4>)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	011b      	lsls	r3, r3, #4
 800e6c0:	4413      	add	r3, r2
 800e6c2:	330c      	adds	r3, #12
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ca:	d101      	bne.n	800e6d0 <chk_lock+0xa4>
 800e6cc:	2310      	movs	r3, #16
 800e6ce:	e000      	b.n	800e6d2 <chk_lock+0xa6>
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3714      	adds	r7, #20
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	2401490c 	.word	0x2401490c

0800e6e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	607b      	str	r3, [r7, #4]
 800e6ee:	e002      	b.n	800e6f6 <enq_lock+0x12>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	607b      	str	r3, [r7, #4]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d806      	bhi.n	800e70a <enq_lock+0x26>
 800e6fc:	4a09      	ldr	r2, [pc, #36]	; (800e724 <enq_lock+0x40>)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	011b      	lsls	r3, r3, #4
 800e702:	4413      	add	r3, r2
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1f2      	bne.n	800e6f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	bf14      	ite	ne
 800e710:	2301      	movne	r3, #1
 800e712:	2300      	moveq	r3, #0
 800e714:	b2db      	uxtb	r3, r3
}
 800e716:	4618      	mov	r0, r3
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	2401490c 	.word	0x2401490c

0800e728 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e732:	2300      	movs	r3, #0
 800e734:	60fb      	str	r3, [r7, #12]
 800e736:	e01f      	b.n	800e778 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e738:	4a41      	ldr	r2, [pc, #260]	; (800e840 <inc_lock+0x118>)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	011b      	lsls	r3, r3, #4
 800e73e:	4413      	add	r3, r2
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	429a      	cmp	r2, r3
 800e748:	d113      	bne.n	800e772 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e74a:	4a3d      	ldr	r2, [pc, #244]	; (800e840 <inc_lock+0x118>)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	4413      	add	r3, r2
 800e752:	3304      	adds	r3, #4
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d109      	bne.n	800e772 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e75e:	4a38      	ldr	r2, [pc, #224]	; (800e840 <inc_lock+0x118>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	011b      	lsls	r3, r3, #4
 800e764:	4413      	add	r3, r2
 800e766:	3308      	adds	r3, #8
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e76e:	429a      	cmp	r2, r3
 800e770:	d006      	beq.n	800e780 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	3301      	adds	r3, #1
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d9dc      	bls.n	800e738 <inc_lock+0x10>
 800e77e:	e000      	b.n	800e782 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e780:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2b02      	cmp	r3, #2
 800e786:	d132      	bne.n	800e7ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e788:	2300      	movs	r3, #0
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	e002      	b.n	800e794 <inc_lock+0x6c>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	3301      	adds	r3, #1
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d806      	bhi.n	800e7a8 <inc_lock+0x80>
 800e79a:	4a29      	ldr	r2, [pc, #164]	; (800e840 <inc_lock+0x118>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	011b      	lsls	r3, r3, #4
 800e7a0:	4413      	add	r3, r2
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1f2      	bne.n	800e78e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d101      	bne.n	800e7b2 <inc_lock+0x8a>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e040      	b.n	800e834 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	4922      	ldr	r1, [pc, #136]	; (800e840 <inc_lock+0x118>)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	011b      	lsls	r3, r3, #4
 800e7bc:	440b      	add	r3, r1
 800e7be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	689a      	ldr	r2, [r3, #8]
 800e7c4:	491e      	ldr	r1, [pc, #120]	; (800e840 <inc_lock+0x118>)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	011b      	lsls	r3, r3, #4
 800e7ca:	440b      	add	r3, r1
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	695a      	ldr	r2, [r3, #20]
 800e7d4:	491a      	ldr	r1, [pc, #104]	; (800e840 <inc_lock+0x118>)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	011b      	lsls	r3, r3, #4
 800e7da:	440b      	add	r3, r1
 800e7dc:	3308      	adds	r3, #8
 800e7de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e7e0:	4a17      	ldr	r2, [pc, #92]	; (800e840 <inc_lock+0x118>)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	011b      	lsls	r3, r3, #4
 800e7e6:	4413      	add	r3, r2
 800e7e8:	330c      	adds	r3, #12
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d009      	beq.n	800e808 <inc_lock+0xe0>
 800e7f4:	4a12      	ldr	r2, [pc, #72]	; (800e840 <inc_lock+0x118>)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	011b      	lsls	r3, r3, #4
 800e7fa:	4413      	add	r3, r2
 800e7fc:	330c      	adds	r3, #12
 800e7fe:	881b      	ldrh	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <inc_lock+0xe0>
 800e804:	2300      	movs	r3, #0
 800e806:	e015      	b.n	800e834 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d108      	bne.n	800e820 <inc_lock+0xf8>
 800e80e:	4a0c      	ldr	r2, [pc, #48]	; (800e840 <inc_lock+0x118>)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	4413      	add	r3, r2
 800e816:	330c      	adds	r3, #12
 800e818:	881b      	ldrh	r3, [r3, #0]
 800e81a:	3301      	adds	r3, #1
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	e001      	b.n	800e824 <inc_lock+0xfc>
 800e820:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e824:	4906      	ldr	r1, [pc, #24]	; (800e840 <inc_lock+0x118>)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	011b      	lsls	r3, r3, #4
 800e82a:	440b      	add	r3, r1
 800e82c:	330c      	adds	r3, #12
 800e82e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	3301      	adds	r3, #1
}
 800e834:	4618      	mov	r0, r3
 800e836:	3714      	adds	r7, #20
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	2401490c 	.word	0x2401490c

0800e844 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	3b01      	subs	r3, #1
 800e850:	607b      	str	r3, [r7, #4]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d825      	bhi.n	800e8a4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e858:	4a17      	ldr	r2, [pc, #92]	; (800e8b8 <dec_lock+0x74>)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	011b      	lsls	r3, r3, #4
 800e85e:	4413      	add	r3, r2
 800e860:	330c      	adds	r3, #12
 800e862:	881b      	ldrh	r3, [r3, #0]
 800e864:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e866:	89fb      	ldrh	r3, [r7, #14]
 800e868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e86c:	d101      	bne.n	800e872 <dec_lock+0x2e>
 800e86e:	2300      	movs	r3, #0
 800e870:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e872:	89fb      	ldrh	r3, [r7, #14]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d002      	beq.n	800e87e <dec_lock+0x3a>
 800e878:	89fb      	ldrh	r3, [r7, #14]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e87e:	4a0e      	ldr	r2, [pc, #56]	; (800e8b8 <dec_lock+0x74>)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	4413      	add	r3, r2
 800e886:	330c      	adds	r3, #12
 800e888:	89fa      	ldrh	r2, [r7, #14]
 800e88a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e88c:	89fb      	ldrh	r3, [r7, #14]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d105      	bne.n	800e89e <dec_lock+0x5a>
 800e892:	4a09      	ldr	r2, [pc, #36]	; (800e8b8 <dec_lock+0x74>)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	011b      	lsls	r3, r3, #4
 800e898:	4413      	add	r3, r2
 800e89a:	2200      	movs	r2, #0
 800e89c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	737b      	strb	r3, [r7, #13]
 800e8a2:	e001      	b.n	800e8a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e8a4:	2302      	movs	r3, #2
 800e8a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e8a8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	2401490c 	.word	0x2401490c

0800e8bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	60fb      	str	r3, [r7, #12]
 800e8c8:	e010      	b.n	800e8ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e8ca:	4a0d      	ldr	r2, [pc, #52]	; (800e900 <clear_lock+0x44>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	4413      	add	r3, r2
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d105      	bne.n	800e8e6 <clear_lock+0x2a>
 800e8da:	4a09      	ldr	r2, [pc, #36]	; (800e900 <clear_lock+0x44>)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	011b      	lsls	r3, r3, #4
 800e8e0:	4413      	add	r3, r2
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d9eb      	bls.n	800e8ca <clear_lock+0xe>
	}
}
 800e8f2:	bf00      	nop
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	2401490c 	.word	0x2401490c

0800e904 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b086      	sub	sp, #24
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	78db      	ldrb	r3, [r3, #3]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d034      	beq.n	800e982 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e91c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7858      	ldrb	r0, [r3, #1]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e928:	2301      	movs	r3, #1
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	f7ff fd10 	bl	800e350 <disk_write>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e936:	2301      	movs	r3, #1
 800e938:	73fb      	strb	r3, [r7, #15]
 800e93a:	e022      	b.n	800e982 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e946:	697a      	ldr	r2, [r7, #20]
 800e948:	1ad2      	subs	r2, r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d217      	bcs.n	800e982 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	789b      	ldrb	r3, [r3, #2]
 800e956:	613b      	str	r3, [r7, #16]
 800e958:	e010      	b.n	800e97c <sync_window+0x78>
					wsect += fs->fsize;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	4413      	add	r3, r2
 800e962:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	7858      	ldrb	r0, [r3, #1]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e96e:	2301      	movs	r3, #1
 800e970:	697a      	ldr	r2, [r7, #20]
 800e972:	f7ff fced 	bl	800e350 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	3b01      	subs	r3, #1
 800e97a:	613b      	str	r3, [r7, #16]
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d8eb      	bhi.n	800e95a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e982:	7bfb      	ldrb	r3, [r7, #15]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d01b      	beq.n	800e9dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ffad 	bl	800e904 <sync_window>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e9ae:	7bfb      	ldrb	r3, [r7, #15]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d113      	bne.n	800e9dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7858      	ldrb	r0, [r3, #1]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9be:	2301      	movs	r3, #1
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	f7ff fca5 	bl	800e310 <disk_read>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d004      	beq.n	800e9d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
	...

0800e9e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7ff ff87 	bl	800e904 <sync_window>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e9fa:	7bfb      	ldrb	r3, [r7, #15]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d159      	bne.n	800eab4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	2b03      	cmp	r3, #3
 800ea06:	d149      	bne.n	800ea9c <sync_fs+0xb4>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	791b      	ldrb	r3, [r3, #4]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d145      	bne.n	800ea9c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	899b      	ldrh	r3, [r3, #12]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	f7ff fd78 	bl	800e512 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	3338      	adds	r3, #56	; 0x38
 800ea26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea2a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7ff fd07 	bl	800e442 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	3338      	adds	r3, #56	; 0x38
 800ea38:	4921      	ldr	r1, [pc, #132]	; (800eac0 <sync_fs+0xd8>)
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff fd1c 	bl	800e478 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3338      	adds	r3, #56	; 0x38
 800ea44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ea48:	491e      	ldr	r1, [pc, #120]	; (800eac4 <sync_fs+0xdc>)
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fd14 	bl	800e478 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3338      	adds	r3, #56	; 0x38
 800ea54:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	699b      	ldr	r3, [r3, #24]
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4610      	mov	r0, r2
 800ea60:	f7ff fd0a 	bl	800e478 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3338      	adds	r3, #56	; 0x38
 800ea68:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7ff fd00 	bl	800e478 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7858      	ldrb	r0, [r3, #1]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea90:	2301      	movs	r3, #1
 800ea92:	f7ff fc5d 	bl	800e350 <disk_write>
			fs->fsi_flag = 0;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	785b      	ldrb	r3, [r3, #1]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fc73 	bl	800e390 <disk_ioctl>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <sync_fs+0xcc>
 800eab0:	2301      	movs	r3, #1
 800eab2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	41615252 	.word	0x41615252
 800eac4:	61417272 	.word	0x61417272

0800eac8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	3b02      	subs	r3, #2
 800ead6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	69db      	ldr	r3, [r3, #28]
 800eadc:	3b02      	subs	r3, #2
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d301      	bcc.n	800eae8 <clust2sect+0x20>
 800eae4:	2300      	movs	r3, #0
 800eae6:	e008      	b.n	800eafa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	895b      	ldrh	r3, [r3, #10]
 800eaec:	461a      	mov	r2, r3
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	fb03 f202 	mul.w	r2, r3, r2
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf8:	4413      	add	r3, r2
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b086      	sub	sp, #24
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d904      	bls.n	800eb26 <get_fat+0x20>
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d302      	bcc.n	800eb2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800eb26:	2301      	movs	r3, #1
 800eb28:	617b      	str	r3, [r7, #20]
 800eb2a:	e0b7      	b.n	800ec9c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d05a      	beq.n	800ebf0 <get_fat+0xea>
 800eb3a:	2b03      	cmp	r3, #3
 800eb3c:	d07d      	beq.n	800ec3a <get_fat+0x134>
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	f040 80a2 	bne.w	800ec88 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	085b      	lsrs	r3, r3, #1
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb62:	4413      	add	r3, r2
 800eb64:	4619      	mov	r1, r3
 800eb66:	6938      	ldr	r0, [r7, #16]
 800eb68:	f7ff ff10 	bl	800e98c <move_window>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f040 808d 	bne.w	800ec8e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	1c5a      	adds	r2, r3, #1
 800eb78:	60fa      	str	r2, [r7, #12]
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	8992      	ldrh	r2, [r2, #12]
 800eb7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb82:	fb02 f201 	mul.w	r2, r2, r1
 800eb86:	1a9b      	subs	r3, r3, r2
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	899b      	ldrh	r3, [r3, #12]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800eba2:	4413      	add	r3, r2
 800eba4:	4619      	mov	r1, r3
 800eba6:	6938      	ldr	r0, [r7, #16]
 800eba8:	f7ff fef0 	bl	800e98c <move_window>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d16f      	bne.n	800ec92 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	899b      	ldrh	r3, [r3, #12]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebbe:	fb02 f201 	mul.w	r2, r2, r1
 800ebc2:	1a9b      	subs	r3, r3, r2
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ebcc:	021b      	lsls	r3, r3, #8
 800ebce:	461a      	mov	r2, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	f003 0301 	and.w	r3, r3, #1
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <get_fat+0xe0>
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	091b      	lsrs	r3, r3, #4
 800ebe4:	e002      	b.n	800ebec <get_fat+0xe6>
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebec:	617b      	str	r3, [r7, #20]
			break;
 800ebee:	e055      	b.n	800ec9c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	899b      	ldrh	r3, [r3, #12]
 800ebf8:	085b      	lsrs	r3, r3, #1
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec04:	4413      	add	r3, r2
 800ec06:	4619      	mov	r1, r3
 800ec08:	6938      	ldr	r0, [r7, #16]
 800ec0a:	f7ff febf 	bl	800e98c <move_window>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d140      	bne.n	800ec96 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	005b      	lsls	r3, r3, #1
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	8992      	ldrh	r2, [r2, #12]
 800ec22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec26:	fb02 f200 	mul.w	r2, r2, r0
 800ec2a:	1a9b      	subs	r3, r3, r2
 800ec2c:	440b      	add	r3, r1
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff fbcc 	bl	800e3cc <ld_word>
 800ec34:	4603      	mov	r3, r0
 800ec36:	617b      	str	r3, [r7, #20]
			break;
 800ec38:	e030      	b.n	800ec9c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	899b      	ldrh	r3, [r3, #12]
 800ec42:	089b      	lsrs	r3, r3, #2
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	4619      	mov	r1, r3
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec4e:	4413      	add	r3, r2
 800ec50:	4619      	mov	r1, r3
 800ec52:	6938      	ldr	r0, [r7, #16]
 800ec54:	f7ff fe9a 	bl	800e98c <move_window>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d11d      	bne.n	800ec9a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	8992      	ldrh	r2, [r2, #12]
 800ec6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec70:	fb02 f200 	mul.w	r2, r2, r0
 800ec74:	1a9b      	subs	r3, r3, r2
 800ec76:	440b      	add	r3, r1
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7ff fbbf 	bl	800e3fc <ld_dword>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ec84:	617b      	str	r3, [r7, #20]
			break;
 800ec86:	e009      	b.n	800ec9c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ec88:	2301      	movs	r3, #1
 800ec8a:	617b      	str	r3, [r7, #20]
 800ec8c:	e006      	b.n	800ec9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec8e:	bf00      	nop
 800ec90:	e004      	b.n	800ec9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec92:	bf00      	nop
 800ec94:	e002      	b.n	800ec9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec96:	bf00      	nop
 800ec98:	e000      	b.n	800ec9c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec9a:	bf00      	nop
		}
	}

	return val;
 800ec9c:	697b      	ldr	r3, [r7, #20]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3718      	adds	r7, #24
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eca6:	b590      	push	{r4, r7, lr}
 800eca8:	b089      	sub	sp, #36	; 0x24
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	60f8      	str	r0, [r7, #12]
 800ecae:	60b9      	str	r1, [r7, #8]
 800ecb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	f240 8106 	bls.w	800eeca <put_fat+0x224>
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	69db      	ldr	r3, [r3, #28]
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	f080 8100 	bcs.w	800eeca <put_fat+0x224>
		switch (fs->fs_type) {
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b02      	cmp	r3, #2
 800ecd0:	f000 8088 	beq.w	800ede4 <put_fat+0x13e>
 800ecd4:	2b03      	cmp	r3, #3
 800ecd6:	f000 80b0 	beq.w	800ee3a <put_fat+0x194>
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	f040 80f5 	bne.w	800eeca <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	61bb      	str	r3, [r7, #24]
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	085b      	lsrs	r3, r3, #1
 800ece8:	69ba      	ldr	r2, [r7, #24]
 800ecea:	4413      	add	r3, r2
 800ecec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	899b      	ldrh	r3, [r3, #12]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecfe:	4413      	add	r3, r2
 800ed00:	4619      	mov	r1, r3
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff fe42 	bl	800e98c <move_window>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed0c:	7ffb      	ldrb	r3, [r7, #31]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f040 80d4 	bne.w	800eebc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	1c5a      	adds	r2, r3, #1
 800ed1e:	61ba      	str	r2, [r7, #24]
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	8992      	ldrh	r2, [r2, #12]
 800ed24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed28:	fb02 f200 	mul.w	r2, r2, r0
 800ed2c:	1a9b      	subs	r3, r3, r2
 800ed2e:	440b      	add	r3, r1
 800ed30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f003 0301 	and.w	r3, r3, #1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00d      	beq.n	800ed58 <put_fat+0xb2>
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	b25b      	sxtb	r3, r3
 800ed42:	f003 030f 	and.w	r3, r3, #15
 800ed46:	b25a      	sxtb	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	011b      	lsls	r3, r3, #4
 800ed4e:	b25b      	sxtb	r3, r3
 800ed50:	4313      	orrs	r3, r2
 800ed52:	b25b      	sxtb	r3, r3
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	e001      	b.n	800ed5c <put_fat+0xb6>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2201      	movs	r2, #1
 800ed64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	899b      	ldrh	r3, [r3, #12]
 800ed6e:	4619      	mov	r1, r3
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed76:	4413      	add	r3, r2
 800ed78:	4619      	mov	r1, r3
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff fe06 	bl	800e98c <move_window>
 800ed80:	4603      	mov	r3, r0
 800ed82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed84:	7ffb      	ldrb	r3, [r7, #31]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f040 809a 	bne.w	800eec0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	899b      	ldrh	r3, [r3, #12]
 800ed96:	461a      	mov	r2, r3
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed9e:	fb02 f200 	mul.w	r2, r2, r0
 800eda2:	1a9b      	subs	r3, r3, r2
 800eda4:	440b      	add	r3, r1
 800eda6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d003      	beq.n	800edba <put_fat+0x114>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	091b      	lsrs	r3, r3, #4
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	e00e      	b.n	800edd8 <put_fat+0x132>
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	b25b      	sxtb	r3, r3
 800edc0:	f023 030f 	bic.w	r3, r3, #15
 800edc4:	b25a      	sxtb	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	0a1b      	lsrs	r3, r3, #8
 800edca:	b25b      	sxtb	r3, r3
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	b25b      	sxtb	r3, r3
 800edd2:	4313      	orrs	r3, r2
 800edd4:	b25b      	sxtb	r3, r3
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2201      	movs	r2, #1
 800ede0:	70da      	strb	r2, [r3, #3]
			break;
 800ede2:	e072      	b.n	800eeca <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	899b      	ldrh	r3, [r3, #12]
 800edec:	085b      	lsrs	r3, r3, #1
 800edee:	b29b      	uxth	r3, r3
 800edf0:	4619      	mov	r1, r3
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800edf8:	4413      	add	r3, r2
 800edfa:	4619      	mov	r1, r3
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f7ff fdc5 	bl	800e98c <move_window>
 800ee02:	4603      	mov	r3, r0
 800ee04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee06:	7ffb      	ldrb	r3, [r7, #31]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d15b      	bne.n	800eec4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	8992      	ldrh	r2, [r2, #12]
 800ee1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee1e:	fb02 f200 	mul.w	r2, r2, r0
 800ee22:	1a9b      	subs	r3, r3, r2
 800ee24:	440b      	add	r3, r1
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	b292      	uxth	r2, r2
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fb08 	bl	800e442 <st_word>
			fs->wflag = 1;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2201      	movs	r2, #1
 800ee36:	70da      	strb	r2, [r3, #3]
			break;
 800ee38:	e047      	b.n	800eeca <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	899b      	ldrh	r3, [r3, #12]
 800ee42:	089b      	lsrs	r3, r3, #2
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4619      	mov	r1, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee4e:	4413      	add	r3, r2
 800ee50:	4619      	mov	r1, r3
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7ff fd9a 	bl	800e98c <move_window>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee5c:	7ffb      	ldrb	r3, [r7, #31]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d132      	bne.n	800eec8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	8992      	ldrh	r2, [r2, #12]
 800ee76:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee7a:	fb02 f200 	mul.w	r2, r2, r0
 800ee7e:	1a9b      	subs	r3, r3, r2
 800ee80:	440b      	add	r3, r1
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff faba 	bl	800e3fc <ld_dword>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee8e:	4323      	orrs	r3, r4
 800ee90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	8992      	ldrh	r2, [r2, #12]
 800eea0:	fbb3 f0f2 	udiv	r0, r3, r2
 800eea4:	fb02 f200 	mul.w	r2, r2, r0
 800eea8:	1a9b      	subs	r3, r3, r2
 800eeaa:	440b      	add	r3, r1
 800eeac:	6879      	ldr	r1, [r7, #4]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7ff fae2 	bl	800e478 <st_dword>
			fs->wflag = 1;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	70da      	strb	r2, [r3, #3]
			break;
 800eeba:	e006      	b.n	800eeca <put_fat+0x224>
			if (res != FR_OK) break;
 800eebc:	bf00      	nop
 800eebe:	e004      	b.n	800eeca <put_fat+0x224>
			if (res != FR_OK) break;
 800eec0:	bf00      	nop
 800eec2:	e002      	b.n	800eeca <put_fat+0x224>
			if (res != FR_OK) break;
 800eec4:	bf00      	nop
 800eec6:	e000      	b.n	800eeca <put_fat+0x224>
			if (res != FR_OK) break;
 800eec8:	bf00      	nop
		}
	}
	return res;
 800eeca:	7ffb      	ldrb	r3, [r7, #31]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3724      	adds	r7, #36	; 0x24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd90      	pop	{r4, r7, pc}

0800eed4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d904      	bls.n	800eefa <remove_chain+0x26>
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	69db      	ldr	r3, [r3, #28]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d301      	bcc.n	800eefe <remove_chain+0x2a>
 800eefa:	2302      	movs	r3, #2
 800eefc:	e04b      	b.n	800ef96 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00c      	beq.n	800ef1e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ef04:	f04f 32ff 	mov.w	r2, #4294967295
 800ef08:	6879      	ldr	r1, [r7, #4]
 800ef0a:	69b8      	ldr	r0, [r7, #24]
 800ef0c:	f7ff fecb 	bl	800eca6 <put_fat>
 800ef10:	4603      	mov	r3, r0
 800ef12:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ef14:	7ffb      	ldrb	r3, [r7, #31]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <remove_chain+0x4a>
 800ef1a:	7ffb      	ldrb	r3, [r7, #31]
 800ef1c:	e03b      	b.n	800ef96 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef1e:	68b9      	ldr	r1, [r7, #8]
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f7ff fdf0 	bl	800eb06 <get_fat>
 800ef26:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d031      	beq.n	800ef92 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d101      	bne.n	800ef38 <remove_chain+0x64>
 800ef34:	2302      	movs	r3, #2
 800ef36:	e02e      	b.n	800ef96 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3e:	d101      	bne.n	800ef44 <remove_chain+0x70>
 800ef40:	2301      	movs	r3, #1
 800ef42:	e028      	b.n	800ef96 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef44:	2200      	movs	r2, #0
 800ef46:	68b9      	ldr	r1, [r7, #8]
 800ef48:	69b8      	ldr	r0, [r7, #24]
 800ef4a:	f7ff feac 	bl	800eca6 <put_fat>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ef52:	7ffb      	ldrb	r3, [r7, #31]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <remove_chain+0x88>
 800ef58:	7ffb      	ldrb	r3, [r7, #31]
 800ef5a:	e01c      	b.n	800ef96 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	699a      	ldr	r2, [r3, #24]
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	69db      	ldr	r3, [r3, #28]
 800ef64:	3b02      	subs	r3, #2
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d20b      	bcs.n	800ef82 <remove_chain+0xae>
			fs->free_clst++;
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	1c5a      	adds	r2, r3, #1
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	791b      	ldrb	r3, [r3, #4]
 800ef78:	f043 0301 	orr.w	r3, r3, #1
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	69db      	ldr	r3, [r3, #28]
 800ef8a:	68ba      	ldr	r2, [r7, #8]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d3c6      	bcc.n	800ef1e <remove_chain+0x4a>
 800ef90:	e000      	b.n	800ef94 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef92:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef94:	2300      	movs	r3, #0
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3720      	adds	r7, #32
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b088      	sub	sp, #32
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10d      	bne.n	800efd0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d004      	beq.n	800efca <create_chain+0x2c>
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	69db      	ldr	r3, [r3, #28]
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d31b      	bcc.n	800f002 <create_chain+0x64>
 800efca:	2301      	movs	r3, #1
 800efcc:	61bb      	str	r3, [r7, #24]
 800efce:	e018      	b.n	800f002 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff fd97 	bl	800eb06 <get_fat>
 800efd8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d801      	bhi.n	800efe4 <create_chain+0x46>
 800efe0:	2301      	movs	r3, #1
 800efe2:	e070      	b.n	800f0c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efea:	d101      	bne.n	800eff0 <create_chain+0x52>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	e06a      	b.n	800f0c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	69db      	ldr	r3, [r3, #28]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d201      	bcs.n	800effe <create_chain+0x60>
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	e063      	b.n	800f0c6 <create_chain+0x128>
		scl = clst;
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	3301      	adds	r3, #1
 800f00a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	69fa      	ldr	r2, [r7, #28]
 800f012:	429a      	cmp	r2, r3
 800f014:	d307      	bcc.n	800f026 <create_chain+0x88>
				ncl = 2;
 800f016:	2302      	movs	r3, #2
 800f018:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f01a:	69fa      	ldr	r2, [r7, #28]
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d901      	bls.n	800f026 <create_chain+0x88>
 800f022:	2300      	movs	r3, #0
 800f024:	e04f      	b.n	800f0c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f026:	69f9      	ldr	r1, [r7, #28]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7ff fd6c 	bl	800eb06 <get_fat>
 800f02e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00e      	beq.n	800f054 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d003      	beq.n	800f044 <create_chain+0xa6>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f042:	d101      	bne.n	800f048 <create_chain+0xaa>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	e03e      	b.n	800f0c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f048:	69fa      	ldr	r2, [r7, #28]
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d1da      	bne.n	800f006 <create_chain+0x68>
 800f050:	2300      	movs	r3, #0
 800f052:	e038      	b.n	800f0c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f054:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f056:	f04f 32ff 	mov.w	r2, #4294967295
 800f05a:	69f9      	ldr	r1, [r7, #28]
 800f05c:	6938      	ldr	r0, [r7, #16]
 800f05e:	f7ff fe22 	bl	800eca6 <put_fat>
 800f062:	4603      	mov	r3, r0
 800f064:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d109      	bne.n	800f080 <create_chain+0xe2>
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f072:	69fa      	ldr	r2, [r7, #28]
 800f074:	6839      	ldr	r1, [r7, #0]
 800f076:	6938      	ldr	r0, [r7, #16]
 800f078:	f7ff fe15 	bl	800eca6 <put_fat>
 800f07c:	4603      	mov	r3, r0
 800f07e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d116      	bne.n	800f0b4 <create_chain+0x116>
		fs->last_clst = ncl;
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	69fa      	ldr	r2, [r7, #28]
 800f08a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	699a      	ldr	r2, [r3, #24]
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	69db      	ldr	r3, [r3, #28]
 800f094:	3b02      	subs	r3, #2
 800f096:	429a      	cmp	r2, r3
 800f098:	d804      	bhi.n	800f0a4 <create_chain+0x106>
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	1e5a      	subs	r2, r3, #1
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	791b      	ldrb	r3, [r3, #4]
 800f0a8:	f043 0301 	orr.w	r3, r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	711a      	strb	r2, [r3, #4]
 800f0b2:	e007      	b.n	800f0c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f0b4:	7dfb      	ldrb	r3, [r7, #23]
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d102      	bne.n	800f0c0 <create_chain+0x122>
 800f0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f0be:	e000      	b.n	800f0c2 <create_chain+0x124>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f0c4:	69fb      	ldr	r3, [r7, #28]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3720      	adds	r7, #32
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f0ce:	b480      	push	{r7}
 800f0d0:	b087      	sub	sp, #28
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	899b      	ldrh	r3, [r3, #12]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	8952      	ldrh	r2, [r2, #10]
 800f0f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	1d1a      	adds	r2, r3, #4
 800f100:	613a      	str	r2, [r7, #16]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d101      	bne.n	800f110 <clmt_clust+0x42>
 800f10c:	2300      	movs	r3, #0
 800f10e:	e010      	b.n	800f132 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f110:	697a      	ldr	r2, [r7, #20]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	d307      	bcc.n	800f128 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f118:	697a      	ldr	r2, [r7, #20]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	617b      	str	r3, [r7, #20]
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	3304      	adds	r3, #4
 800f124:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f126:	e7e9      	b.n	800f0fc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f128:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	4413      	add	r3, r2
}
 800f132:	4618      	mov	r0, r3
 800f134:	371c      	adds	r7, #28
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b086      	sub	sp, #24
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f154:	d204      	bcs.n	800f160 <dir_sdi+0x22>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	f003 031f 	and.w	r3, r3, #31
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f160:	2302      	movs	r3, #2
 800f162:	e071      	b.n	800f248 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	683a      	ldr	r2, [r7, #0]
 800f168:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	689b      	ldr	r3, [r3, #8]
 800f16e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d106      	bne.n	800f184 <dir_sdi+0x46>
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d902      	bls.n	800f184 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f182:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d10c      	bne.n	800f1a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	095b      	lsrs	r3, r3, #5
 800f18e:	693a      	ldr	r2, [r7, #16]
 800f190:	8912      	ldrh	r2, [r2, #8]
 800f192:	4293      	cmp	r3, r2
 800f194:	d301      	bcc.n	800f19a <dir_sdi+0x5c>
 800f196:	2302      	movs	r3, #2
 800f198:	e056      	b.n	800f248 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	61da      	str	r2, [r3, #28]
 800f1a2:	e02d      	b.n	800f200 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	895b      	ldrh	r3, [r3, #10]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	899b      	ldrh	r3, [r3, #12]
 800f1ae:	fb03 f302 	mul.w	r3, r3, r2
 800f1b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1b4:	e019      	b.n	800f1ea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6979      	ldr	r1, [r7, #20]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff fca3 	bl	800eb06 <get_fat>
 800f1c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c8:	d101      	bne.n	800f1ce <dir_sdi+0x90>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e03c      	b.n	800f248 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d904      	bls.n	800f1de <dir_sdi+0xa0>
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	69db      	ldr	r3, [r3, #28]
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d301      	bcc.n	800f1e2 <dir_sdi+0xa4>
 800f1de:	2302      	movs	r3, #2
 800f1e0:	e032      	b.n	800f248 <dir_sdi+0x10a>
			ofs -= csz;
 800f1e2:	683a      	ldr	r2, [r7, #0]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d2e1      	bcs.n	800f1b6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f1f2:	6979      	ldr	r1, [r7, #20]
 800f1f4:	6938      	ldr	r0, [r7, #16]
 800f1f6:	f7ff fc67 	bl	800eac8 <clust2sect>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	697a      	ldr	r2, [r7, #20]
 800f204:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	69db      	ldr	r3, [r3, #28]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <dir_sdi+0xd4>
 800f20e:	2302      	movs	r3, #2
 800f210:	e01a      	b.n	800f248 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	69da      	ldr	r2, [r3, #28]
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	899b      	ldrh	r3, [r3, #12]
 800f21a:	4619      	mov	r1, r3
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f222:	441a      	add	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	899b      	ldrh	r3, [r3, #12]
 800f232:	461a      	mov	r2, r3
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	fbb3 f0f2 	udiv	r0, r3, r2
 800f23a:	fb02 f200 	mul.w	r2, r2, r0
 800f23e:	1a9b      	subs	r3, r3, r2
 800f240:	18ca      	adds	r2, r1, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	695b      	ldr	r3, [r3, #20]
 800f264:	3320      	adds	r3, #32
 800f266:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <dir_next+0x28>
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f276:	d301      	bcc.n	800f27c <dir_next+0x2c>
 800f278:	2304      	movs	r3, #4
 800f27a:	e0bb      	b.n	800f3f4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	899b      	ldrh	r3, [r3, #12]
 800f280:	461a      	mov	r2, r3
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	fbb3 f1f2 	udiv	r1, r3, r2
 800f288:	fb02 f201 	mul.w	r2, r2, r1
 800f28c:	1a9b      	subs	r3, r3, r2
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f040 809d 	bne.w	800f3ce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	1c5a      	adds	r2, r3, #1
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	699b      	ldr	r3, [r3, #24]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10b      	bne.n	800f2be <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	095b      	lsrs	r3, r3, #5
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	8912      	ldrh	r2, [r2, #8]
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	f0c0 808d 	bcc.w	800f3ce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	61da      	str	r2, [r3, #28]
 800f2ba:	2304      	movs	r3, #4
 800f2bc:	e09a      	b.n	800f3f4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	899b      	ldrh	r3, [r3, #12]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	8952      	ldrh	r2, [r2, #10]
 800f2ce:	3a01      	subs	r2, #1
 800f2d0:	4013      	ands	r3, r2
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d17b      	bne.n	800f3ce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	699b      	ldr	r3, [r3, #24]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	4610      	mov	r0, r2
 800f2e0:	f7ff fc11 	bl	800eb06 <get_fat>
 800f2e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d801      	bhi.n	800f2f0 <dir_next+0xa0>
 800f2ec:	2302      	movs	r3, #2
 800f2ee:	e081      	b.n	800f3f4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f6:	d101      	bne.n	800f2fc <dir_next+0xac>
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e07b      	b.n	800f3f4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	69db      	ldr	r3, [r3, #28]
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	429a      	cmp	r2, r3
 800f304:	d359      	bcc.n	800f3ba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d104      	bne.n	800f316 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	61da      	str	r2, [r3, #28]
 800f312:	2304      	movs	r3, #4
 800f314:	e06e      	b.n	800f3f4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	699b      	ldr	r3, [r3, #24]
 800f31c:	4619      	mov	r1, r3
 800f31e:	4610      	mov	r0, r2
 800f320:	f7ff fe3d 	bl	800ef9e <create_chain>
 800f324:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <dir_next+0xe0>
 800f32c:	2307      	movs	r3, #7
 800f32e:	e061      	b.n	800f3f4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d101      	bne.n	800f33a <dir_next+0xea>
 800f336:	2302      	movs	r3, #2
 800f338:	e05c      	b.n	800f3f4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f340:	d101      	bne.n	800f346 <dir_next+0xf6>
 800f342:	2301      	movs	r3, #1
 800f344:	e056      	b.n	800f3f4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff fadc 	bl	800e904 <sync_window>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <dir_next+0x106>
 800f352:	2301      	movs	r3, #1
 800f354:	e04e      	b.n	800f3f4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	899b      	ldrh	r3, [r3, #12]
 800f360:	461a      	mov	r2, r3
 800f362:	2100      	movs	r1, #0
 800f364:	f7ff f8d5 	bl	800e512 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f368:	2300      	movs	r3, #0
 800f36a:	613b      	str	r3, [r7, #16]
 800f36c:	6979      	ldr	r1, [r7, #20]
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f7ff fbaa 	bl	800eac8 <clust2sect>
 800f374:	4602      	mov	r2, r0
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	635a      	str	r2, [r3, #52]	; 0x34
 800f37a:	e012      	b.n	800f3a2 <dir_next+0x152>
						fs->wflag = 1;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2201      	movs	r2, #1
 800f380:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f7ff fabe 	bl	800e904 <sync_window>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <dir_next+0x142>
 800f38e:	2301      	movs	r3, #1
 800f390:	e030      	b.n	800f3f4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	3301      	adds	r3, #1
 800f396:	613b      	str	r3, [r7, #16]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	635a      	str	r2, [r3, #52]	; 0x34
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	895b      	ldrh	r3, [r3, #10]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d3e6      	bcc.n	800f37c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	1ad2      	subs	r2, r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f3c0:	6979      	ldr	r1, [r7, #20]
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f7ff fb80 	bl	800eac8 <clust2sect>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	899b      	ldrh	r3, [r3, #12]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3e6:	fb02 f200 	mul.w	r2, r2, r0
 800f3ea:	1a9b      	subs	r3, r3, r2
 800f3ec:	18ca      	adds	r2, r1, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f3f2:	2300      	movs	r3, #0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f40c:	2100      	movs	r1, #0
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f7ff fe95 	bl	800f13e <dir_sdi>
 800f414:	4603      	mov	r3, r0
 800f416:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f418:	7dfb      	ldrb	r3, [r7, #23]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d12b      	bne.n	800f476 <dir_alloc+0x7a>
		n = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	69db      	ldr	r3, [r3, #28]
 800f426:	4619      	mov	r1, r3
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7ff faaf 	bl	800e98c <move_window>
 800f42e:	4603      	mov	r3, r0
 800f430:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f432:	7dfb      	ldrb	r3, [r7, #23]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d11d      	bne.n	800f474 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6a1b      	ldr	r3, [r3, #32]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2be5      	cmp	r3, #229	; 0xe5
 800f440:	d004      	beq.n	800f44c <dir_alloc+0x50>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d107      	bne.n	800f45c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	3301      	adds	r3, #1
 800f450:	613b      	str	r3, [r7, #16]
 800f452:	693a      	ldr	r2, [r7, #16]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	429a      	cmp	r2, r3
 800f458:	d102      	bne.n	800f460 <dir_alloc+0x64>
 800f45a:	e00c      	b.n	800f476 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f45c:	2300      	movs	r3, #0
 800f45e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f460:	2101      	movs	r1, #1
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7ff fef4 	bl	800f250 <dir_next>
 800f468:	4603      	mov	r3, r0
 800f46a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d0d7      	beq.n	800f422 <dir_alloc+0x26>
 800f472:	e000      	b.n	800f476 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f474:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f476:	7dfb      	ldrb	r3, [r7, #23]
 800f478:	2b04      	cmp	r3, #4
 800f47a:	d101      	bne.n	800f480 <dir_alloc+0x84>
 800f47c:	2307      	movs	r3, #7
 800f47e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f480:	7dfb      	ldrb	r3, [r7, #23]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3718      	adds	r7, #24
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b084      	sub	sp, #16
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	331a      	adds	r3, #26
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe ff97 	bl	800e3cc <ld_word>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	2b03      	cmp	r3, #3
 800f4a8:	d109      	bne.n	800f4be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	3314      	adds	r3, #20
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fe ff8c 	bl	800e3cc <ld_word>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	041b      	lsls	r3, r3, #16
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f4be:	68fb      	ldr	r3, [r7, #12]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	331a      	adds	r3, #26
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	b292      	uxth	r2, r2
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fe ffaf 	bl	800e442 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	2b03      	cmp	r3, #3
 800f4ea:	d109      	bne.n	800f500 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f103 0214 	add.w	r2, r3, #20
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	0c1b      	lsrs	r3, r3, #16
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	f7fe ffa1 	bl	800e442 <st_word>
	}
}
 800f500:	bf00      	nop
 800f502:	3710      	adds	r7, #16
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f516:	2100      	movs	r1, #0
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7ff fe10 	bl	800f13e <dir_sdi>
 800f51e:	4603      	mov	r3, r0
 800f520:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f522:	7dfb      	ldrb	r3, [r7, #23]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <dir_find+0x24>
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	e03e      	b.n	800f5aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	4619      	mov	r1, r3
 800f532:	6938      	ldr	r0, [r7, #16]
 800f534:	f7ff fa2a 	bl	800e98c <move_window>
 800f538:	4603      	mov	r3, r0
 800f53a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d12f      	bne.n	800f5a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f54a:	7bfb      	ldrb	r3, [r7, #15]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d102      	bne.n	800f556 <dir_find+0x4e>
 800f550:	2304      	movs	r3, #4
 800f552:	75fb      	strb	r3, [r7, #23]
 800f554:	e028      	b.n	800f5a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a1b      	ldr	r3, [r3, #32]
 800f55a:	330b      	adds	r3, #11
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f562:	b2da      	uxtb	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a1b      	ldr	r3, [r3, #32]
 800f56c:	330b      	adds	r3, #11
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	f003 0308 	and.w	r3, r3, #8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10a      	bne.n	800f58e <dir_find+0x86>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a18      	ldr	r0, [r3, #32]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3324      	adds	r3, #36	; 0x24
 800f580:	220b      	movs	r2, #11
 800f582:	4619      	mov	r1, r3
 800f584:	f7fe ffdf 	bl	800e546 <mem_cmp>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00b      	beq.n	800f5a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f58e:	2100      	movs	r1, #0
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff fe5d 	bl	800f250 <dir_next>
 800f596:	4603      	mov	r3, r0
 800f598:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f59a:	7dfb      	ldrb	r3, [r7, #23]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d0c5      	beq.n	800f52c <dir_find+0x24>
 800f5a0:	e002      	b.n	800f5a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f5a2:	bf00      	nop
 800f5a4:	e000      	b.n	800f5a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5a6:	bf00      	nop

	return res;
 800f5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3718      	adds	r7, #24
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f5c0:	2101      	movs	r1, #1
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff ff1a 	bl	800f3fc <dir_alloc>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d11c      	bne.n	800f60c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	69db      	ldr	r3, [r3, #28]
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	68b8      	ldr	r0, [r7, #8]
 800f5da:	f7ff f9d7 	bl	800e98c <move_window>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d111      	bne.n	800f60c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6a1b      	ldr	r3, [r3, #32]
 800f5ec:	2220      	movs	r2, #32
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fe ff8e 	bl	800e512 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6a18      	ldr	r0, [r3, #32]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	3324      	adds	r3, #36	; 0x24
 800f5fe:	220b      	movs	r2, #11
 800f600:	4619      	mov	r1, r3
 800f602:	f7fe ff65 	bl	800e4d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	2201      	movs	r2, #1
 800f60a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b088      	sub	sp, #32
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	60fb      	str	r3, [r7, #12]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	3324      	adds	r3, #36	; 0x24
 800f62c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f62e:	220b      	movs	r2, #11
 800f630:	2120      	movs	r1, #32
 800f632:	68b8      	ldr	r0, [r7, #8]
 800f634:	f7fe ff6d 	bl	800e512 <mem_set>
	si = i = 0; ni = 8;
 800f638:	2300      	movs	r3, #0
 800f63a:	613b      	str	r3, [r7, #16]
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	617b      	str	r3, [r7, #20]
 800f640:	2308      	movs	r3, #8
 800f642:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	617a      	str	r2, [r7, #20]
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4413      	add	r3, r2
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f652:	7ffb      	ldrb	r3, [r7, #31]
 800f654:	2b20      	cmp	r3, #32
 800f656:	d94e      	bls.n	800f6f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f658:	7ffb      	ldrb	r3, [r7, #31]
 800f65a:	2b2f      	cmp	r3, #47	; 0x2f
 800f65c:	d006      	beq.n	800f66c <create_name+0x54>
 800f65e:	7ffb      	ldrb	r3, [r7, #31]
 800f660:	2b5c      	cmp	r3, #92	; 0x5c
 800f662:	d110      	bne.n	800f686 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f664:	e002      	b.n	800f66c <create_name+0x54>
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	3301      	adds	r3, #1
 800f66a:	617b      	str	r3, [r7, #20]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b2f      	cmp	r3, #47	; 0x2f
 800f676:	d0f6      	beq.n	800f666 <create_name+0x4e>
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	4413      	add	r3, r2
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b5c      	cmp	r3, #92	; 0x5c
 800f682:	d0f0      	beq.n	800f666 <create_name+0x4e>
			break;
 800f684:	e038      	b.n	800f6f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f686:	7ffb      	ldrb	r3, [r7, #31]
 800f688:	2b2e      	cmp	r3, #46	; 0x2e
 800f68a:	d003      	beq.n	800f694 <create_name+0x7c>
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	429a      	cmp	r2, r3
 800f692:	d30c      	bcc.n	800f6ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	2b0b      	cmp	r3, #11
 800f698:	d002      	beq.n	800f6a0 <create_name+0x88>
 800f69a:	7ffb      	ldrb	r3, [r7, #31]
 800f69c:	2b2e      	cmp	r3, #46	; 0x2e
 800f69e:	d001      	beq.n	800f6a4 <create_name+0x8c>
 800f6a0:	2306      	movs	r3, #6
 800f6a2:	e044      	b.n	800f72e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f6a4:	2308      	movs	r3, #8
 800f6a6:	613b      	str	r3, [r7, #16]
 800f6a8:	230b      	movs	r3, #11
 800f6aa:	61bb      	str	r3, [r7, #24]
			continue;
 800f6ac:	e022      	b.n	800f6f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f6ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	da04      	bge.n	800f6c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f6b6:	7ffb      	ldrb	r3, [r7, #31]
 800f6b8:	3b80      	subs	r3, #128	; 0x80
 800f6ba:	4a1f      	ldr	r2, [pc, #124]	; (800f738 <create_name+0x120>)
 800f6bc:	5cd3      	ldrb	r3, [r2, r3]
 800f6be:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f6c0:	7ffb      	ldrb	r3, [r7, #31]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	481d      	ldr	r0, [pc, #116]	; (800f73c <create_name+0x124>)
 800f6c6:	f7fe ff65 	bl	800e594 <chk_chr>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d001      	beq.n	800f6d4 <create_name+0xbc>
 800f6d0:	2306      	movs	r3, #6
 800f6d2:	e02c      	b.n	800f72e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f6d4:	7ffb      	ldrb	r3, [r7, #31]
 800f6d6:	2b60      	cmp	r3, #96	; 0x60
 800f6d8:	d905      	bls.n	800f6e6 <create_name+0xce>
 800f6da:	7ffb      	ldrb	r3, [r7, #31]
 800f6dc:	2b7a      	cmp	r3, #122	; 0x7a
 800f6de:	d802      	bhi.n	800f6e6 <create_name+0xce>
 800f6e0:	7ffb      	ldrb	r3, [r7, #31]
 800f6e2:	3b20      	subs	r3, #32
 800f6e4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	1c5a      	adds	r2, r3, #1
 800f6ea:	613a      	str	r2, [r7, #16]
 800f6ec:	68ba      	ldr	r2, [r7, #8]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	7ffa      	ldrb	r2, [r7, #31]
 800f6f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f6f4:	e7a6      	b.n	800f644 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f6f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	441a      	add	r2, r3
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d101      	bne.n	800f70c <create_name+0xf4>
 800f708:	2306      	movs	r3, #6
 800f70a:	e010      	b.n	800f72e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2be5      	cmp	r3, #229	; 0xe5
 800f712:	d102      	bne.n	800f71a <create_name+0x102>
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	2205      	movs	r2, #5
 800f718:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f71a:	7ffb      	ldrb	r3, [r7, #31]
 800f71c:	2b20      	cmp	r3, #32
 800f71e:	d801      	bhi.n	800f724 <create_name+0x10c>
 800f720:	2204      	movs	r2, #4
 800f722:	e000      	b.n	800f726 <create_name+0x10e>
 800f724:	2200      	movs	r2, #0
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	330b      	adds	r3, #11
 800f72a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f72c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3720      	adds	r7, #32
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	08015128 	.word	0x08015128
 800f73c:	08015098 	.word	0x08015098

0800f740 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f754:	e002      	b.n	800f75c <follow_path+0x1c>
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	3301      	adds	r3, #1
 800f75a:	603b      	str	r3, [r7, #0]
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b2f      	cmp	r3, #47	; 0x2f
 800f762:	d0f8      	beq.n	800f756 <follow_path+0x16>
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b5c      	cmp	r3, #92	; 0x5c
 800f76a:	d0f4      	beq.n	800f756 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	2200      	movs	r2, #0
 800f770:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	2b1f      	cmp	r3, #31
 800f778:	d80a      	bhi.n	800f790 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2280      	movs	r2, #128	; 0x80
 800f77e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f782:	2100      	movs	r1, #0
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7ff fcda 	bl	800f13e <dir_sdi>
 800f78a:	4603      	mov	r3, r0
 800f78c:	75fb      	strb	r3, [r7, #23]
 800f78e:	e048      	b.n	800f822 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f790:	463b      	mov	r3, r7
 800f792:	4619      	mov	r1, r3
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7ff ff3f 	bl	800f618 <create_name>
 800f79a:	4603      	mov	r3, r0
 800f79c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d139      	bne.n	800f818 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff feaf 	bl	800f508 <dir_find>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f7b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00a      	beq.n	800f7d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f7bc:	7dfb      	ldrb	r3, [r7, #23]
 800f7be:	2b04      	cmp	r3, #4
 800f7c0:	d12c      	bne.n	800f81c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	f003 0304 	and.w	r3, r3, #4
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d127      	bne.n	800f81c <follow_path+0xdc>
 800f7cc:	2305      	movs	r3, #5
 800f7ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f7d0:	e024      	b.n	800f81c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f7d2:	7afb      	ldrb	r3, [r7, #11]
 800f7d4:	f003 0304 	and.w	r3, r3, #4
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d121      	bne.n	800f820 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	799b      	ldrb	r3, [r3, #6]
 800f7e0:	f003 0310 	and.w	r3, r3, #16
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d102      	bne.n	800f7ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f7e8:	2305      	movs	r3, #5
 800f7ea:	75fb      	strb	r3, [r7, #23]
 800f7ec:	e019      	b.n	800f822 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	695b      	ldr	r3, [r3, #20]
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	8992      	ldrh	r2, [r2, #12]
 800f7fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800f800:	fb02 f200 	mul.w	r2, r2, r0
 800f804:	1a9b      	subs	r3, r3, r2
 800f806:	440b      	add	r3, r1
 800f808:	4619      	mov	r1, r3
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f7ff fe3d 	bl	800f48a <ld_clust>
 800f810:	4602      	mov	r2, r0
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f816:	e7bb      	b.n	800f790 <follow_path+0x50>
			if (res != FR_OK) break;
 800f818:	bf00      	nop
 800f81a:	e002      	b.n	800f822 <follow_path+0xe2>
				break;
 800f81c:	bf00      	nop
 800f81e:	e000      	b.n	800f822 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f820:	bf00      	nop
			}
		}
	}

	return res;
 800f822:	7dfb      	ldrb	r3, [r7, #23]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b087      	sub	sp, #28
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f834:	f04f 33ff 	mov.w	r3, #4294967295
 800f838:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d031      	beq.n	800f8a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	e002      	b.n	800f850 <get_ldnumber+0x24>
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	3301      	adds	r3, #1
 800f84e:	617b      	str	r3, [r7, #20]
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	2b20      	cmp	r3, #32
 800f856:	d903      	bls.n	800f860 <get_ldnumber+0x34>
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b3a      	cmp	r3, #58	; 0x3a
 800f85e:	d1f4      	bne.n	800f84a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b3a      	cmp	r3, #58	; 0x3a
 800f866:	d11c      	bne.n	800f8a2 <get_ldnumber+0x76>
			tp = *path;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	1c5a      	adds	r2, r3, #1
 800f872:	60fa      	str	r2, [r7, #12]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	3b30      	subs	r3, #48	; 0x30
 800f878:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b09      	cmp	r3, #9
 800f87e:	d80e      	bhi.n	800f89e <get_ldnumber+0x72>
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	429a      	cmp	r2, r3
 800f886:	d10a      	bne.n	800f89e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d107      	bne.n	800f89e <get_ldnumber+0x72>
					vol = (int)i;
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	3301      	adds	r3, #1
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	e002      	b.n	800f8a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f8a6:	693b      	ldr	r3, [r7, #16]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	371c      	adds	r7, #28
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	70da      	strb	r2, [r3, #3]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7ff f85c 	bl	800e98c <move_window>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <check_fs+0x2a>
 800f8da:	2304      	movs	r3, #4
 800f8dc:	e038      	b.n	800f950 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	3338      	adds	r3, #56	; 0x38
 800f8e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe fd70 	bl	800e3cc <ld_word>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d001      	beq.n	800f8fc <check_fs+0x48>
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	e029      	b.n	800f950 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f902:	2be9      	cmp	r3, #233	; 0xe9
 800f904:	d009      	beq.n	800f91a <check_fs+0x66>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f90c:	2beb      	cmp	r3, #235	; 0xeb
 800f90e:	d11e      	bne.n	800f94e <check_fs+0x9a>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f916:	2b90      	cmp	r3, #144	; 0x90
 800f918:	d119      	bne.n	800f94e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	3338      	adds	r3, #56	; 0x38
 800f91e:	3336      	adds	r3, #54	; 0x36
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe fd6b 	bl	800e3fc <ld_dword>
 800f926:	4603      	mov	r3, r0
 800f928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f92c:	4a0a      	ldr	r2, [pc, #40]	; (800f958 <check_fs+0xa4>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d101      	bne.n	800f936 <check_fs+0x82>
 800f932:	2300      	movs	r3, #0
 800f934:	e00c      	b.n	800f950 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	3338      	adds	r3, #56	; 0x38
 800f93a:	3352      	adds	r3, #82	; 0x52
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe fd5d 	bl	800e3fc <ld_dword>
 800f942:	4602      	mov	r2, r0
 800f944:	4b05      	ldr	r3, [pc, #20]	; (800f95c <check_fs+0xa8>)
 800f946:	429a      	cmp	r2, r3
 800f948:	d101      	bne.n	800f94e <check_fs+0x9a>
 800f94a:	2300      	movs	r3, #0
 800f94c:	e000      	b.n	800f950 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f94e:	2302      	movs	r3, #2
}
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	00544146 	.word	0x00544146
 800f95c:	33544146 	.word	0x33544146

0800f960 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b096      	sub	sp, #88	; 0x58
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	4613      	mov	r3, r2
 800f96c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	2200      	movs	r2, #0
 800f972:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f7ff ff59 	bl	800f82c <get_ldnumber>
 800f97a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	da01      	bge.n	800f986 <find_volume+0x26>
 800f982:	230b      	movs	r3, #11
 800f984:	e26c      	b.n	800fe60 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f986:	4aa4      	ldr	r2, [pc, #656]	; (800fc18 <find_volume+0x2b8>)
 800f988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f98e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f992:	2b00      	cmp	r3, #0
 800f994:	d101      	bne.n	800f99a <find_volume+0x3a>
 800f996:	230c      	movs	r3, #12
 800f998:	e262      	b.n	800fe60 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800f99a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f99c:	f7fe fe15 	bl	800e5ca <lock_fs>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d101      	bne.n	800f9aa <find_volume+0x4a>
 800f9a6:	230f      	movs	r3, #15
 800f9a8:	e25a      	b.n	800fe60 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f9b0:	79fb      	ldrb	r3, [r7, #7]
 800f9b2:	f023 0301 	bic.w	r3, r3, #1
 800f9b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d01a      	beq.n	800f9f6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	785b      	ldrb	r3, [r3, #1]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fe fc63 	bl	800e290 <disk_status>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f9d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9d4:	f003 0301 	and.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10c      	bne.n	800f9f6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f9dc:	79fb      	ldrb	r3, [r7, #7]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d007      	beq.n	800f9f2 <find_volume+0x92>
 800f9e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9e6:	f003 0304 	and.w	r3, r3, #4
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f9ee:	230a      	movs	r3, #10
 800f9f0:	e236      	b.n	800fe60 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	e234      	b.n	800fe60 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	785b      	ldrb	r3, [r3, #1]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fe fc5b 	bl	800e2c4 <disk_initialize>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fa14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa18:	f003 0301 	and.w	r3, r3, #1
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fa20:	2303      	movs	r3, #3
 800fa22:	e21d      	b.n	800fe60 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fa24:	79fb      	ldrb	r3, [r7, #7]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d007      	beq.n	800fa3a <find_volume+0xda>
 800fa2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa2e:	f003 0304 	and.w	r3, r3, #4
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800fa36:	230a      	movs	r3, #10
 800fa38:	e212      	b.n	800fe60 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3c:	7858      	ldrb	r0, [r3, #1]
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	330c      	adds	r3, #12
 800fa42:	461a      	mov	r2, r3
 800fa44:	2102      	movs	r1, #2
 800fa46:	f7fe fca3 	bl	800e390 <disk_ioctl>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <find_volume+0xf4>
 800fa50:	2301      	movs	r3, #1
 800fa52:	e205      	b.n	800fe60 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	899b      	ldrh	r3, [r3, #12]
 800fa58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa5c:	d80d      	bhi.n	800fa7a <find_volume+0x11a>
 800fa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa60:	899b      	ldrh	r3, [r3, #12]
 800fa62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa66:	d308      	bcc.n	800fa7a <find_volume+0x11a>
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	899b      	ldrh	r3, [r3, #12]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	899b      	ldrh	r3, [r3, #12]
 800fa72:	3b01      	subs	r3, #1
 800fa74:	4013      	ands	r3, r2
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <find_volume+0x11e>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e1f0      	b.n	800fe60 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fa82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fa84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa86:	f7ff ff15 	bl	800f8b4 <check_fs>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fa90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d14b      	bne.n	800fb30 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa98:	2300      	movs	r3, #0
 800fa9a:	643b      	str	r3, [r7, #64]	; 0x40
 800fa9c:	e01f      	b.n	800fade <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800faa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faa6:	011b      	lsls	r3, r3, #4
 800faa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800faac:	4413      	add	r3, r2
 800faae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab2:	3304      	adds	r3, #4
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d006      	beq.n	800fac8 <find_volume+0x168>
 800faba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabc:	3308      	adds	r3, #8
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fe fc9c 	bl	800e3fc <ld_dword>
 800fac4:	4602      	mov	r2, r0
 800fac6:	e000      	b.n	800faca <find_volume+0x16a>
 800fac8:	2200      	movs	r2, #0
 800faca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800facc:	009b      	lsls	r3, r3, #2
 800face:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fad2:	440b      	add	r3, r1
 800fad4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fada:	3301      	adds	r3, #1
 800fadc:	643b      	str	r3, [r7, #64]	; 0x40
 800fade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fae0:	2b03      	cmp	r3, #3
 800fae2:	d9dc      	bls.n	800fa9e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fae4:	2300      	movs	r3, #0
 800fae6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <find_volume+0x194>
 800faee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf0:	3b01      	subs	r3, #1
 800faf2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800faf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fafc:	4413      	add	r3, r2
 800fafe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fb02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d005      	beq.n	800fb16 <find_volume+0x1b6>
 800fb0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb0e:	f7ff fed1 	bl	800f8b4 <check_fs>
 800fb12:	4603      	mov	r3, r0
 800fb14:	e000      	b.n	800fb18 <find_volume+0x1b8>
 800fb16:	2303      	movs	r3, #3
 800fb18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fb1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d905      	bls.n	800fb30 <find_volume+0x1d0>
 800fb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb26:	3301      	adds	r3, #1
 800fb28:	643b      	str	r3, [r7, #64]	; 0x40
 800fb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb2c:	2b03      	cmp	r3, #3
 800fb2e:	d9e1      	bls.n	800faf4 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fb30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb34:	2b04      	cmp	r3, #4
 800fb36:	d101      	bne.n	800fb3c <find_volume+0x1dc>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e191      	b.n	800fe60 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fb3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d901      	bls.n	800fb48 <find_volume+0x1e8>
 800fb44:	230d      	movs	r3, #13
 800fb46:	e18b      	b.n	800fe60 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	3338      	adds	r3, #56	; 0x38
 800fb4c:	330b      	adds	r3, #11
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fe fc3c 	bl	800e3cc <ld_word>
 800fb54:	4603      	mov	r3, r0
 800fb56:	461a      	mov	r2, r3
 800fb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5a:	899b      	ldrh	r3, [r3, #12]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d001      	beq.n	800fb64 <find_volume+0x204>
 800fb60:	230d      	movs	r3, #13
 800fb62:	e17d      	b.n	800fe60 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb66:	3338      	adds	r3, #56	; 0x38
 800fb68:	3316      	adds	r3, #22
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fe fc2e 	bl	800e3cc <ld_word>
 800fb70:	4603      	mov	r3, r0
 800fb72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d106      	bne.n	800fb88 <find_volume+0x228>
 800fb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7c:	3338      	adds	r3, #56	; 0x38
 800fb7e:	3324      	adds	r3, #36	; 0x24
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe fc3b 	bl	800e3fc <ld_dword>
 800fb86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fb8c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	789b      	ldrb	r3, [r3, #2]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d005      	beq.n	800fbac <find_volume+0x24c>
 800fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba2:	789b      	ldrb	r3, [r3, #2]
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d001      	beq.n	800fbac <find_volume+0x24c>
 800fba8:	230d      	movs	r3, #13
 800fbaa:	e159      	b.n	800fe60 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	789b      	ldrb	r3, [r3, #2]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb4:	fb02 f303 	mul.w	r3, r2, r3
 800fbb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc8:	895b      	ldrh	r3, [r3, #10]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d008      	beq.n	800fbe0 <find_volume+0x280>
 800fbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd0:	895b      	ldrh	r3, [r3, #10]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	895b      	ldrh	r3, [r3, #10]
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	4013      	ands	r3, r2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d001      	beq.n	800fbe4 <find_volume+0x284>
 800fbe0:	230d      	movs	r3, #13
 800fbe2:	e13d      	b.n	800fe60 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	3338      	adds	r3, #56	; 0x38
 800fbe8:	3311      	adds	r3, #17
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fe fbee 	bl	800e3cc <ld_word>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfa:	891b      	ldrh	r3, [r3, #8]
 800fbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbfe:	8992      	ldrh	r2, [r2, #12]
 800fc00:	0952      	lsrs	r2, r2, #5
 800fc02:	b292      	uxth	r2, r2
 800fc04:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc08:	fb02 f201 	mul.w	r2, r2, r1
 800fc0c:	1a9b      	subs	r3, r3, r2
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d003      	beq.n	800fc1c <find_volume+0x2bc>
 800fc14:	230d      	movs	r3, #13
 800fc16:	e123      	b.n	800fe60 <find_volume+0x500>
 800fc18:	24014904 	.word	0x24014904

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1e:	3338      	adds	r3, #56	; 0x38
 800fc20:	3313      	adds	r3, #19
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe fbd2 	bl	800e3cc <ld_word>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fc2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d106      	bne.n	800fc40 <find_volume+0x2e0>
 800fc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc34:	3338      	adds	r3, #56	; 0x38
 800fc36:	3320      	adds	r3, #32
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fe fbdf 	bl	800e3fc <ld_dword>
 800fc3e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc42:	3338      	adds	r3, #56	; 0x38
 800fc44:	330e      	adds	r3, #14
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fe fbc0 	bl	800e3cc <ld_word>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fc50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d101      	bne.n	800fc5a <find_volume+0x2fa>
 800fc56:	230d      	movs	r3, #13
 800fc58:	e102      	b.n	800fe60 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fc5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5e:	4413      	add	r3, r2
 800fc60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc62:	8911      	ldrh	r1, [r2, #8]
 800fc64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc66:	8992      	ldrh	r2, [r2, #12]
 800fc68:	0952      	lsrs	r2, r2, #5
 800fc6a:	b292      	uxth	r2, r2
 800fc6c:	fbb1 f2f2 	udiv	r2, r1, r2
 800fc70:	b292      	uxth	r2, r2
 800fc72:	4413      	add	r3, r2
 800fc74:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fc76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d201      	bcs.n	800fc82 <find_volume+0x322>
 800fc7e:	230d      	movs	r3, #13
 800fc80:	e0ee      	b.n	800fe60 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fc82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc8a:	8952      	ldrh	r2, [r2, #10]
 800fc8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc90:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d101      	bne.n	800fc9c <find_volume+0x33c>
 800fc98:	230d      	movs	r3, #13
 800fc9a:	e0e1      	b.n	800fe60 <find_volume+0x500>
		fmt = FS_FAT32;
 800fc9c:	2303      	movs	r3, #3
 800fc9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d802      	bhi.n	800fcb2 <find_volume+0x352>
 800fcac:	2302      	movs	r3, #2
 800fcae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d802      	bhi.n	800fcc2 <find_volume+0x362>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	1c9a      	adds	r2, r3, #2
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fcd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd4:	441a      	add	r2, r3
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fcda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcde:	441a      	add	r2, r3
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fce8:	2b03      	cmp	r3, #3
 800fcea:	d11e      	bne.n	800fd2a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	3338      	adds	r3, #56	; 0x38
 800fcf0:	332a      	adds	r3, #42	; 0x2a
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fe fb6a 	bl	800e3cc <ld_word>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <find_volume+0x3a2>
 800fcfe:	230d      	movs	r3, #13
 800fd00:	e0ae      	b.n	800fe60 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd04:	891b      	ldrh	r3, [r3, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <find_volume+0x3ae>
 800fd0a:	230d      	movs	r3, #13
 800fd0c:	e0a8      	b.n	800fe60 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	3338      	adds	r3, #56	; 0x38
 800fd12:	332c      	adds	r3, #44	; 0x2c
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fe fb71 	bl	800e3fc <ld_dword>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	69db      	ldr	r3, [r3, #28]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	647b      	str	r3, [r7, #68]	; 0x44
 800fd28:	e01f      	b.n	800fd6a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2c:	891b      	ldrh	r3, [r3, #8]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <find_volume+0x3d6>
 800fd32:	230d      	movs	r3, #13
 800fd34:	e094      	b.n	800fe60 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd3c:	441a      	add	r2, r3
 800fd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd40:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fd42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	d103      	bne.n	800fd52 <find_volume+0x3f2>
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	69db      	ldr	r3, [r3, #28]
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	e00a      	b.n	800fd68 <find_volume+0x408>
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	69da      	ldr	r2, [r3, #28]
 800fd56:	4613      	mov	r3, r2
 800fd58:	005b      	lsls	r3, r3, #1
 800fd5a:	4413      	add	r3, r2
 800fd5c:	085a      	lsrs	r2, r3, #1
 800fd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd60:	69db      	ldr	r3, [r3, #28]
 800fd62:	f003 0301 	and.w	r3, r3, #1
 800fd66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fd68:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6c:	6a1a      	ldr	r2, [r3, #32]
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	899b      	ldrh	r3, [r3, #12]
 800fd72:	4619      	mov	r1, r3
 800fd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd76:	440b      	add	r3, r1
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd7c:	8989      	ldrh	r1, [r1, #12]
 800fd7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d201      	bcs.n	800fd8a <find_volume+0x42a>
 800fd86:	230d      	movs	r3, #13
 800fd88:	e06a      	b.n	800fe60 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd90:	619a      	str	r2, [r3, #24]
 800fd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd94:	699a      	ldr	r2, [r3, #24]
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	2280      	movs	r2, #128	; 0x80
 800fd9e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fda0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d149      	bne.n	800fe3c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	3338      	adds	r3, #56	; 0x38
 800fdac:	3330      	adds	r3, #48	; 0x30
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe fb0c 	bl	800e3cc <ld_word>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d140      	bne.n	800fe3c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fdba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdc2:	f7fe fde3 	bl	800e98c <move_window>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d137      	bne.n	800fe3c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	2200      	movs	r2, #0
 800fdd0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	3338      	adds	r3, #56	; 0x38
 800fdd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fe faf6 	bl	800e3cc <ld_word>
 800fde0:	4603      	mov	r3, r0
 800fde2:	461a      	mov	r2, r3
 800fde4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d127      	bne.n	800fe3c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdee:	3338      	adds	r3, #56	; 0x38
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fe fb03 	bl	800e3fc <ld_dword>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	4b1b      	ldr	r3, [pc, #108]	; (800fe68 <find_volume+0x508>)
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d11e      	bne.n	800fe3c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe00:	3338      	adds	r3, #56	; 0x38
 800fe02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fe faf8 	bl	800e3fc <ld_dword>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	4b17      	ldr	r3, [pc, #92]	; (800fe6c <find_volume+0x50c>)
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d113      	bne.n	800fe3c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	3338      	adds	r3, #56	; 0x38
 800fe18:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fe faed 	bl	800e3fc <ld_dword>
 800fe22:	4602      	mov	r2, r0
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2a:	3338      	adds	r3, #56	; 0x38
 800fe2c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fe fae3 	bl	800e3fc <ld_dword>
 800fe36:	4602      	mov	r2, r0
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fe42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fe44:	4b0a      	ldr	r3, [pc, #40]	; (800fe70 <find_volume+0x510>)
 800fe46:	881b      	ldrh	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	4b08      	ldr	r3, [pc, #32]	; (800fe70 <find_volume+0x510>)
 800fe4e:	801a      	strh	r2, [r3, #0]
 800fe50:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <find_volume+0x510>)
 800fe52:	881a      	ldrh	r2, [r3, #0]
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fe58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe5a:	f7fe fd2f 	bl	800e8bc <clear_lock>
#endif
	return FR_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3758      	adds	r7, #88	; 0x58
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	41615252 	.word	0x41615252
 800fe6c:	61417272 	.word	0x61417272
 800fe70:	24014908 	.word	0x24014908

0800fe74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fe7e:	2309      	movs	r3, #9
 800fe80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d02e      	beq.n	800fee6 <validate+0x72>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d02a      	beq.n	800fee6 <validate+0x72>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d025      	beq.n	800fee6 <validate+0x72>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	889a      	ldrh	r2, [r3, #4]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	88db      	ldrh	r3, [r3, #6]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d11e      	bne.n	800fee6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4618      	mov	r0, r3
 800feae:	f7fe fb8c 	bl	800e5ca <lock_fs>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d014      	beq.n	800fee2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	785b      	ldrb	r3, [r3, #1]
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe f9e6 	bl	800e290 <disk_status>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f003 0301 	and.w	r3, r3, #1
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d102      	bne.n	800fed4 <validate+0x60>
				res = FR_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	73fb      	strb	r3, [r7, #15]
 800fed2:	e008      	b.n	800fee6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2100      	movs	r1, #0
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fe fb8b 	bl	800e5f6 <unlock_fs>
 800fee0:	e001      	b.n	800fee6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800fee2:	230f      	movs	r3, #15
 800fee4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <validate+0x7e>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	e000      	b.n	800fef4 <validate+0x80>
 800fef2:	2300      	movs	r3, #0
 800fef4:	683a      	ldr	r2, [r7, #0]
 800fef6:	6013      	str	r3, [r2, #0]
	return res;
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3710      	adds	r7, #16
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
	...

0800ff04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b088      	sub	sp, #32
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ff16:	f107 0310 	add.w	r3, r7, #16
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7ff fc86 	bl	800f82c <get_ldnumber>
 800ff20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	da01      	bge.n	800ff2c <f_mount+0x28>
 800ff28:	230b      	movs	r3, #11
 800ff2a:	e048      	b.n	800ffbe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ff2c:	4a26      	ldr	r2, [pc, #152]	; (800ffc8 <f_mount+0xc4>)
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d00f      	beq.n	800ff5c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ff3c:	69b8      	ldr	r0, [r7, #24]
 800ff3e:	f7fe fcbd 	bl	800e8bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	4618      	mov	r0, r3
 800ff48:	f000 ff77 	bl	8010e3a <ff_del_syncobj>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d101      	bne.n	800ff56 <f_mount+0x52>
 800ff52:	2302      	movs	r3, #2
 800ff54:	e033      	b.n	800ffbe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ff56:	69bb      	ldr	r3, [r7, #24]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00f      	beq.n	800ff82 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	3310      	adds	r3, #16
 800ff70:	4619      	mov	r1, r3
 800ff72:	4610      	mov	r0, r2
 800ff74:	f000 ff41 	bl	8010dfa <ff_cre_syncobj>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <f_mount+0x7e>
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e01d      	b.n	800ffbe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	4910      	ldr	r1, [pc, #64]	; (800ffc8 <f_mount+0xc4>)
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d002      	beq.n	800ff98 <f_mount+0x94>
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d001      	beq.n	800ff9c <f_mount+0x98>
 800ff98:	2300      	movs	r3, #0
 800ff9a:	e010      	b.n	800ffbe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ff9c:	f107 010c 	add.w	r1, r7, #12
 800ffa0:	f107 0308 	add.w	r3, r7, #8
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7ff fcda 	bl	800f960 <find_volume>
 800ffac:	4603      	mov	r3, r0
 800ffae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	7dfa      	ldrb	r2, [r7, #23]
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe fb1d 	bl	800e5f6 <unlock_fs>
 800ffbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3720      	adds	r7, #32
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	24014904 	.word	0x24014904

0800ffcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b098      	sub	sp, #96	; 0x60
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d101      	bne.n	800ffe4 <f_open+0x18>
 800ffe0:	2309      	movs	r3, #9
 800ffe2:	e1c2      	b.n	801036a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ffe4:	79fb      	ldrb	r3, [r7, #7]
 800ffe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ffec:	79fa      	ldrb	r2, [r7, #7]
 800ffee:	f107 0110 	add.w	r1, r7, #16
 800fff2:	f107 0308 	add.w	r3, r7, #8
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7ff fcb2 	bl	800f960 <find_volume>
 800fffc:	4603      	mov	r3, r0
 800fffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010006:	2b00      	cmp	r3, #0
 8010008:	f040 819f 	bne.w	801034a <f_open+0x37e>
		dj.obj.fs = fs;
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010010:	68ba      	ldr	r2, [r7, #8]
 8010012:	f107 0314 	add.w	r3, r7, #20
 8010016:	4611      	mov	r1, r2
 8010018:	4618      	mov	r0, r3
 801001a:	f7ff fb91 	bl	800f740 <follow_path>
 801001e:	4603      	mov	r3, r0
 8010020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010028:	2b00      	cmp	r3, #0
 801002a:	d11a      	bne.n	8010062 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801002c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010030:	b25b      	sxtb	r3, r3
 8010032:	2b00      	cmp	r3, #0
 8010034:	da03      	bge.n	801003e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010036:	2306      	movs	r3, #6
 8010038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801003c:	e011      	b.n	8010062 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	f023 0301 	bic.w	r3, r3, #1
 8010044:	2b00      	cmp	r3, #0
 8010046:	bf14      	ite	ne
 8010048:	2301      	movne	r3, #1
 801004a:	2300      	moveq	r3, #0
 801004c:	b2db      	uxtb	r3, r3
 801004e:	461a      	mov	r2, r3
 8010050:	f107 0314 	add.w	r3, r7, #20
 8010054:	4611      	mov	r1, r2
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe fae8 	bl	800e62c <chk_lock>
 801005c:	4603      	mov	r3, r0
 801005e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010062:	79fb      	ldrb	r3, [r7, #7]
 8010064:	f003 031c 	and.w	r3, r3, #28
 8010068:	2b00      	cmp	r3, #0
 801006a:	d07f      	beq.n	801016c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801006c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010070:	2b00      	cmp	r3, #0
 8010072:	d017      	beq.n	80100a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010078:	2b04      	cmp	r3, #4
 801007a:	d10e      	bne.n	801009a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801007c:	f7fe fb32 	bl	800e6e4 <enq_lock>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <f_open+0xc8>
 8010086:	f107 0314 	add.w	r3, r7, #20
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff fa91 	bl	800f5b2 <dir_register>
 8010090:	4603      	mov	r3, r0
 8010092:	e000      	b.n	8010096 <f_open+0xca>
 8010094:	2312      	movs	r3, #18
 8010096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801009a:	79fb      	ldrb	r3, [r7, #7]
 801009c:	f043 0308 	orr.w	r3, r3, #8
 80100a0:	71fb      	strb	r3, [r7, #7]
 80100a2:	e010      	b.n	80100c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80100a4:	7ebb      	ldrb	r3, [r7, #26]
 80100a6:	f003 0311 	and.w	r3, r3, #17
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d003      	beq.n	80100b6 <f_open+0xea>
					res = FR_DENIED;
 80100ae:	2307      	movs	r3, #7
 80100b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80100b4:	e007      	b.n	80100c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	f003 0304 	and.w	r3, r3, #4
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d002      	beq.n	80100c6 <f_open+0xfa>
 80100c0:	2308      	movs	r3, #8
 80100c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80100c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d168      	bne.n	80101a0 <f_open+0x1d4>
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	f003 0308 	and.w	r3, r3, #8
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d063      	beq.n	80101a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80100d8:	f7fd fe98 	bl	800de0c <get_fattime>
 80100dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80100de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e0:	330e      	adds	r3, #14
 80100e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe f9c7 	bl	800e478 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	3316      	adds	r3, #22
 80100ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fe f9c1 	bl	800e478 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80100f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f8:	330b      	adds	r3, #11
 80100fa:	2220      	movs	r2, #32
 80100fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010102:	4611      	mov	r1, r2
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff f9c0 	bl	800f48a <ld_clust>
 801010a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010110:	2200      	movs	r2, #0
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff f9d8 	bl	800f4c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011a:	331c      	adds	r3, #28
 801011c:	2100      	movs	r1, #0
 801011e:	4618      	mov	r0, r3
 8010120:	f7fe f9aa 	bl	800e478 <st_dword>
					fs->wflag = 1;
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	2201      	movs	r2, #1
 8010128:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801012a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801012c:	2b00      	cmp	r3, #0
 801012e:	d037      	beq.n	80101a0 <f_open+0x1d4>
						dw = fs->winsect;
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010134:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010136:	f107 0314 	add.w	r3, r7, #20
 801013a:	2200      	movs	r2, #0
 801013c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801013e:	4618      	mov	r0, r3
 8010140:	f7fe fec8 	bl	800eed4 <remove_chain>
 8010144:	4603      	mov	r3, r0
 8010146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801014a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801014e:	2b00      	cmp	r3, #0
 8010150:	d126      	bne.n	80101a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010156:	4618      	mov	r0, r3
 8010158:	f7fe fc18 	bl	800e98c <move_window>
 801015c:	4603      	mov	r3, r0
 801015e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010166:	3a01      	subs	r2, #1
 8010168:	615a      	str	r2, [r3, #20]
 801016a:	e019      	b.n	80101a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801016c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010170:	2b00      	cmp	r3, #0
 8010172:	d115      	bne.n	80101a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010174:	7ebb      	ldrb	r3, [r7, #26]
 8010176:	f003 0310 	and.w	r3, r3, #16
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <f_open+0x1ba>
					res = FR_NO_FILE;
 801017e:	2304      	movs	r3, #4
 8010180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010184:	e00c      	b.n	80101a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d007      	beq.n	80101a0 <f_open+0x1d4>
 8010190:	7ebb      	ldrb	r3, [r7, #26]
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	2b00      	cmp	r3, #0
 8010198:	d002      	beq.n	80101a0 <f_open+0x1d4>
						res = FR_DENIED;
 801019a:	2307      	movs	r3, #7
 801019c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80101a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d128      	bne.n	80101fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80101a8:	79fb      	ldrb	r3, [r7, #7]
 80101aa:	f003 0308 	and.w	r3, r3, #8
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80101b2:	79fb      	ldrb	r3, [r7, #7]
 80101b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80101c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101c8:	79fb      	ldrb	r3, [r7, #7]
 80101ca:	f023 0301 	bic.w	r3, r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	bf14      	ite	ne
 80101d2:	2301      	movne	r3, #1
 80101d4:	2300      	moveq	r3, #0
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	461a      	mov	r2, r3
 80101da:	f107 0314 	add.w	r3, r7, #20
 80101de:	4611      	mov	r1, r2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fe faa1 	bl	800e728 <inc_lock>
 80101e6:	4602      	mov	r2, r0
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d102      	bne.n	80101fa <f_open+0x22e>
 80101f4:	2302      	movs	r3, #2
 80101f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80101fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f040 80a3 	bne.w	801034a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010208:	4611      	mov	r1, r2
 801020a:	4618      	mov	r0, r3
 801020c:	f7ff f93d 	bl	800f48a <ld_clust>
 8010210:	4602      	mov	r2, r0
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010218:	331c      	adds	r3, #28
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe f8ee 	bl	800e3fc <ld_dword>
 8010220:	4602      	mov	r2, r0
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2200      	movs	r2, #0
 801022a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801022c:	693a      	ldr	r2, [r7, #16]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	88da      	ldrh	r2, [r3, #6]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	79fa      	ldrb	r2, [r7, #7]
 801023e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2200      	movs	r2, #0
 8010244:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2200      	movs	r2, #0
 801024a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2200      	movs	r2, #0
 8010250:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	3330      	adds	r3, #48	; 0x30
 8010256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801025a:	2100      	movs	r1, #0
 801025c:	4618      	mov	r0, r3
 801025e:	f7fe f958 	bl	800e512 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	f003 0320 	and.w	r3, r3, #32
 8010268:	2b00      	cmp	r3, #0
 801026a:	d06e      	beq.n	801034a <f_open+0x37e>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d06a      	beq.n	801034a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	68da      	ldr	r2, [r3, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	895b      	ldrh	r3, [r3, #10]
 8010280:	461a      	mov	r2, r3
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	899b      	ldrh	r3, [r3, #12]
 8010286:	fb03 f302 	mul.w	r3, r3, r2
 801028a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	657b      	str	r3, [r7, #84]	; 0x54
 8010298:	e016      	b.n	80102c8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fe fc31 	bl	800eb06 <get_fat>
 80102a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80102a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d802      	bhi.n	80102b2 <f_open+0x2e6>
 80102ac:	2302      	movs	r3, #2
 80102ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80102b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b8:	d102      	bne.n	80102c0 <f_open+0x2f4>
 80102ba:	2301      	movs	r3, #1
 80102bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80102c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	657b      	str	r3, [r7, #84]	; 0x54
 80102c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d103      	bne.n	80102d8 <f_open+0x30c>
 80102d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d8e0      	bhi.n	801029a <f_open+0x2ce>
				}
				fp->clust = clst;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80102de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d131      	bne.n	801034a <f_open+0x37e>
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	899b      	ldrh	r3, [r3, #12]
 80102ea:	461a      	mov	r2, r3
 80102ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80102f2:	fb02 f201 	mul.w	r2, r2, r1
 80102f6:	1a9b      	subs	r3, r3, r2
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d026      	beq.n	801034a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010300:	4618      	mov	r0, r3
 8010302:	f7fe fbe1 	bl	800eac8 <clust2sect>
 8010306:	6478      	str	r0, [r7, #68]	; 0x44
 8010308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801030a:	2b00      	cmp	r3, #0
 801030c:	d103      	bne.n	8010316 <f_open+0x34a>
						res = FR_INT_ERR;
 801030e:	2302      	movs	r3, #2
 8010310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010314:	e019      	b.n	801034a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	899b      	ldrh	r3, [r3, #12]
 801031a:	461a      	mov	r2, r3
 801031c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801031e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010324:	441a      	add	r2, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	7858      	ldrb	r0, [r3, #1]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6a1a      	ldr	r2, [r3, #32]
 8010338:	2301      	movs	r3, #1
 801033a:	f7fd ffe9 	bl	800e310 <disk_read>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <f_open+0x37e>
 8010344:	2301      	movs	r3, #1
 8010346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801034a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <f_open+0x38c>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801035e:	4611      	mov	r1, r2
 8010360:	4618      	mov	r0, r3
 8010362:	f7fe f948 	bl	800e5f6 <unlock_fs>
 8010366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801036a:	4618      	mov	r0, r3
 801036c:	3760      	adds	r7, #96	; 0x60
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b08c      	sub	sp, #48	; 0x30
 8010376:	af00      	add	r7, sp, #0
 8010378:	60f8      	str	r0, [r7, #12]
 801037a:	60b9      	str	r1, [r7, #8]
 801037c:	607a      	str	r2, [r7, #4]
 801037e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2200      	movs	r2, #0
 8010388:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f107 0210 	add.w	r2, r7, #16
 8010390:	4611      	mov	r1, r2
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff fd6e 	bl	800fe74 <validate>
 8010398:	4603      	mov	r3, r0
 801039a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801039e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d107      	bne.n	80103b6 <f_write+0x44>
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	7d5b      	ldrb	r3, [r3, #21]
 80103aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80103ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d009      	beq.n	80103ca <f_write+0x58>
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fe f919 	bl	800e5f6 <unlock_fs>
 80103c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103c8:	e192      	b.n	80106f0 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	7d1b      	ldrb	r3, [r3, #20]
 80103ce:	f003 0302 	and.w	r3, r3, #2
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d106      	bne.n	80103e4 <f_write+0x72>
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2107      	movs	r1, #7
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe f90b 	bl	800e5f6 <unlock_fs>
 80103e0:	2307      	movs	r3, #7
 80103e2:	e185      	b.n	80106f0 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	699a      	ldr	r2, [r3, #24]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	441a      	add	r2, r3
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	699b      	ldr	r3, [r3, #24]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	f080 816a 	bcs.w	80106ca <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	43db      	mvns	r3, r3
 80103fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80103fe:	e164      	b.n	80106ca <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	699b      	ldr	r3, [r3, #24]
 8010404:	693a      	ldr	r2, [r7, #16]
 8010406:	8992      	ldrh	r2, [r2, #12]
 8010408:	fbb3 f1f2 	udiv	r1, r3, r2
 801040c:	fb02 f201 	mul.w	r2, r2, r1
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	2b00      	cmp	r3, #0
 8010414:	f040 810f 	bne.w	8010636 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	699b      	ldr	r3, [r3, #24]
 801041c:	693a      	ldr	r2, [r7, #16]
 801041e:	8992      	ldrh	r2, [r2, #12]
 8010420:	fbb3 f3f2 	udiv	r3, r3, r2
 8010424:	693a      	ldr	r2, [r7, #16]
 8010426:	8952      	ldrh	r2, [r2, #10]
 8010428:	3a01      	subs	r2, #1
 801042a:	4013      	ands	r3, r2
 801042c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d14d      	bne.n	80104d0 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d10c      	bne.n	8010456 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	2b00      	cmp	r3, #0
 8010446:	d11a      	bne.n	801047e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2100      	movs	r1, #0
 801044c:	4618      	mov	r0, r3
 801044e:	f7fe fda6 	bl	800ef9e <create_chain>
 8010452:	62b8      	str	r0, [r7, #40]	; 0x28
 8010454:	e013      	b.n	801047e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801045a:	2b00      	cmp	r3, #0
 801045c:	d007      	beq.n	801046e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	699b      	ldr	r3, [r3, #24]
 8010462:	4619      	mov	r1, r3
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f7fe fe32 	bl	800f0ce <clmt_clust>
 801046a:	62b8      	str	r0, [r7, #40]	; 0x28
 801046c:	e007      	b.n	801047e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	69db      	ldr	r3, [r3, #28]
 8010474:	4619      	mov	r1, r3
 8010476:	4610      	mov	r0, r2
 8010478:	f7fe fd91 	bl	800ef9e <create_chain>
 801047c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801047e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 8127 	beq.w	80106d4 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	2b01      	cmp	r3, #1
 801048a:	d109      	bne.n	80104a0 <f_write+0x12e>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2202      	movs	r2, #2
 8010490:	755a      	strb	r2, [r3, #21]
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2102      	movs	r1, #2
 8010496:	4618      	mov	r0, r3
 8010498:	f7fe f8ad 	bl	800e5f6 <unlock_fs>
 801049c:	2302      	movs	r3, #2
 801049e:	e127      	b.n	80106f0 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a6:	d109      	bne.n	80104bc <f_write+0x14a>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2201      	movs	r2, #1
 80104ac:	755a      	strb	r2, [r3, #21]
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	2101      	movs	r1, #1
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fe f89f 	bl	800e5f6 <unlock_fs>
 80104b8:	2301      	movs	r3, #1
 80104ba:	e119      	b.n	80106f0 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d102      	bne.n	80104d0 <f_write+0x15e>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	7d1b      	ldrb	r3, [r3, #20]
 80104d4:	b25b      	sxtb	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	da1d      	bge.n	8010516 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	7858      	ldrb	r0, [r3, #1]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6a1a      	ldr	r2, [r3, #32]
 80104e8:	2301      	movs	r3, #1
 80104ea:	f7fd ff31 	bl	800e350 <disk_write>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d009      	beq.n	8010508 <f_write+0x196>
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2201      	movs	r2, #1
 80104f8:	755a      	strb	r2, [r3, #21]
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	2101      	movs	r1, #1
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fe f879 	bl	800e5f6 <unlock_fs>
 8010504:	2301      	movs	r3, #1
 8010506:	e0f3      	b.n	80106f0 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	7d1b      	ldrb	r3, [r3, #20]
 801050c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010510:	b2da      	uxtb	r2, r3
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	69db      	ldr	r3, [r3, #28]
 801051c:	4619      	mov	r1, r3
 801051e:	4610      	mov	r0, r2
 8010520:	f7fe fad2 	bl	800eac8 <clust2sect>
 8010524:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d109      	bne.n	8010540 <f_write+0x1ce>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2202      	movs	r2, #2
 8010530:	755a      	strb	r2, [r3, #21]
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	2102      	movs	r1, #2
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe f85d 	bl	800e5f6 <unlock_fs>
 801053c:	2302      	movs	r3, #2
 801053e:	e0d7      	b.n	80106f0 <f_write+0x37e>
			sect += csect;
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	4413      	add	r3, r2
 8010546:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	899b      	ldrh	r3, [r3, #12]
 801054c:	461a      	mov	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	fbb3 f3f2 	udiv	r3, r3, r2
 8010554:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d048      	beq.n	80105ee <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801055c:	69ba      	ldr	r2, [r7, #24]
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	4413      	add	r3, r2
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	8952      	ldrh	r2, [r2, #10]
 8010566:	4293      	cmp	r3, r2
 8010568:	d905      	bls.n	8010576 <f_write+0x204>
					cc = fs->csize - csect;
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	895b      	ldrh	r3, [r3, #10]
 801056e:	461a      	mov	r2, r3
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	7858      	ldrb	r0, [r3, #1]
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	697a      	ldr	r2, [r7, #20]
 801057e:	69f9      	ldr	r1, [r7, #28]
 8010580:	f7fd fee6 	bl	800e350 <disk_write>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d009      	beq.n	801059e <f_write+0x22c>
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2201      	movs	r2, #1
 801058e:	755a      	strb	r2, [r3, #21]
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	2101      	movs	r1, #1
 8010594:	4618      	mov	r0, r3
 8010596:	f7fe f82e 	bl	800e5f6 <unlock_fs>
 801059a:	2301      	movs	r3, #1
 801059c:	e0a8      	b.n	80106f0 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6a1a      	ldr	r2, [r3, #32]
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	1ad3      	subs	r3, r2, r3
 80105a6:	6a3a      	ldr	r2, [r7, #32]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d918      	bls.n	80105de <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6a1a      	ldr	r2, [r3, #32]
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	1ad3      	subs	r3, r2, r3
 80105ba:	693a      	ldr	r2, [r7, #16]
 80105bc:	8992      	ldrh	r2, [r2, #12]
 80105be:	fb02 f303 	mul.w	r3, r2, r3
 80105c2:	69fa      	ldr	r2, [r7, #28]
 80105c4:	18d1      	adds	r1, r2, r3
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	899b      	ldrh	r3, [r3, #12]
 80105ca:	461a      	mov	r2, r3
 80105cc:	f7fd ff80 	bl	800e4d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	7d1b      	ldrb	r3, [r3, #20]
 80105d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	899b      	ldrh	r3, [r3, #12]
 80105e2:	461a      	mov	r2, r3
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	fb02 f303 	mul.w	r3, r2, r3
 80105ea:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80105ec:	e050      	b.n	8010690 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6a1b      	ldr	r3, [r3, #32]
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d01b      	beq.n	8010630 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	699a      	ldr	r2, [r3, #24]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010600:	429a      	cmp	r2, r3
 8010602:	d215      	bcs.n	8010630 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	7858      	ldrb	r0, [r3, #1]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801060e:	2301      	movs	r3, #1
 8010610:	697a      	ldr	r2, [r7, #20]
 8010612:	f7fd fe7d 	bl	800e310 <disk_read>
 8010616:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010618:	2b00      	cmp	r3, #0
 801061a:	d009      	beq.n	8010630 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2201      	movs	r2, #1
 8010620:	755a      	strb	r2, [r3, #21]
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	2101      	movs	r1, #1
 8010626:	4618      	mov	r0, r3
 8010628:	f7fd ffe5 	bl	800e5f6 <unlock_fs>
 801062c:	2301      	movs	r3, #1
 801062e:	e05f      	b.n	80106f0 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	899b      	ldrh	r3, [r3, #12]
 801063a:	4618      	mov	r0, r3
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	699b      	ldr	r3, [r3, #24]
 8010640:	693a      	ldr	r2, [r7, #16]
 8010642:	8992      	ldrh	r2, [r2, #12]
 8010644:	fbb3 f1f2 	udiv	r1, r3, r2
 8010648:	fb02 f201 	mul.w	r2, r2, r1
 801064c:	1a9b      	subs	r3, r3, r2
 801064e:	1ac3      	subs	r3, r0, r3
 8010650:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	429a      	cmp	r2, r3
 8010658:	d901      	bls.n	801065e <f_write+0x2ec>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	699b      	ldr	r3, [r3, #24]
 8010668:	693a      	ldr	r2, [r7, #16]
 801066a:	8992      	ldrh	r2, [r2, #12]
 801066c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010670:	fb02 f200 	mul.w	r2, r2, r0
 8010674:	1a9b      	subs	r3, r3, r2
 8010676:	440b      	add	r3, r1
 8010678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801067a:	69f9      	ldr	r1, [r7, #28]
 801067c:	4618      	mov	r0, r3
 801067e:	f7fd ff27 	bl	800e4d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	7d1b      	ldrb	r3, [r3, #20]
 8010686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801068a:	b2da      	uxtb	r2, r3
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010690:	69fa      	ldr	r2, [r7, #28]
 8010692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010694:	4413      	add	r3, r2
 8010696:	61fb      	str	r3, [r7, #28]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	699a      	ldr	r2, [r3, #24]
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069e:	441a      	add	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	619a      	str	r2, [r3, #24]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	68da      	ldr	r2, [r3, #12]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	bf38      	it	cc
 80106b0:	461a      	movcc	r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	60da      	str	r2, [r3, #12]
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106bc:	441a      	add	r2, r3
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	601a      	str	r2, [r3, #0]
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f47f ae97 	bne.w	8010400 <f_write+0x8e>
 80106d2:	e000      	b.n	80106d6 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80106d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	7d1b      	ldrb	r3, [r3, #20]
 80106da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106de:	b2da      	uxtb	r2, r3
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	2100      	movs	r1, #0
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fd ff84 	bl	800e5f6 <unlock_fs>
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3730      	adds	r7, #48	; 0x30
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b086      	sub	sp, #24
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f107 0208 	add.w	r2, r7, #8
 8010706:	4611      	mov	r1, r2
 8010708:	4618      	mov	r0, r3
 801070a:	f7ff fbb3 	bl	800fe74 <validate>
 801070e:	4603      	mov	r3, r0
 8010710:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010712:	7dfb      	ldrb	r3, [r7, #23]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d16d      	bne.n	80107f4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	7d1b      	ldrb	r3, [r3, #20]
 801071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010720:	2b00      	cmp	r3, #0
 8010722:	d067      	beq.n	80107f4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	7d1b      	ldrb	r3, [r3, #20]
 8010728:	b25b      	sxtb	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	da1a      	bge.n	8010764 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	7858      	ldrb	r0, [r3, #1]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a1a      	ldr	r2, [r3, #32]
 801073c:	2301      	movs	r3, #1
 801073e:	f7fd fe07 	bl	800e350 <disk_write>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d006      	beq.n	8010756 <f_sync+0x5e>
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	2101      	movs	r1, #1
 801074c:	4618      	mov	r0, r3
 801074e:	f7fd ff52 	bl	800e5f6 <unlock_fs>
 8010752:	2301      	movs	r3, #1
 8010754:	e055      	b.n	8010802 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	7d1b      	ldrb	r3, [r3, #20]
 801075a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801075e:	b2da      	uxtb	r2, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010764:	f7fd fb52 	bl	800de0c <get_fattime>
 8010768:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010770:	4619      	mov	r1, r3
 8010772:	4610      	mov	r0, r2
 8010774:	f7fe f90a 	bl	800e98c <move_window>
 8010778:	4603      	mov	r3, r0
 801077a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801077c:	7dfb      	ldrb	r3, [r7, #23]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d138      	bne.n	80107f4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010786:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	330b      	adds	r3, #11
 801078c:	781a      	ldrb	r2, [r3, #0]
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	330b      	adds	r3, #11
 8010792:	f042 0220 	orr.w	r2, r2, #32
 8010796:	b2d2      	uxtb	r2, r2
 8010798:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6818      	ldr	r0, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	689b      	ldr	r3, [r3, #8]
 80107a2:	461a      	mov	r2, r3
 80107a4:	68f9      	ldr	r1, [r7, #12]
 80107a6:	f7fe fe8f 	bl	800f4c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f103 021c 	add.w	r2, r3, #28
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	4619      	mov	r1, r3
 80107b6:	4610      	mov	r0, r2
 80107b8:	f7fd fe5e 	bl	800e478 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	3316      	adds	r3, #22
 80107c0:	6939      	ldr	r1, [r7, #16]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fd fe58 	bl	800e478 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	3312      	adds	r3, #18
 80107cc:	2100      	movs	r1, #0
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fd fe37 	bl	800e442 <st_word>
					fs->wflag = 1;
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	2201      	movs	r2, #1
 80107d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fe f903 	bl	800e9e8 <sync_fs>
 80107e2:	4603      	mov	r3, r0
 80107e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	7d1b      	ldrb	r3, [r3, #20]
 80107ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	7dfa      	ldrb	r2, [r7, #23]
 80107f8:	4611      	mov	r1, r2
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fd fefb 	bl	800e5f6 <unlock_fs>
 8010800:	7dfb      	ldrb	r3, [r7, #23]
}
 8010802:	4618      	mov	r0, r3
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801080a:	b580      	push	{r7, lr}
 801080c:	b084      	sub	sp, #16
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff ff70 	bl	80106f8 <f_sync>
 8010818:	4603      	mov	r3, r0
 801081a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801081c:	7bfb      	ldrb	r3, [r7, #15]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d11d      	bne.n	801085e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f107 0208 	add.w	r2, r7, #8
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f7ff fb22 	bl	800fe74 <validate>
 8010830:	4603      	mov	r3, r0
 8010832:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010834:	7bfb      	ldrb	r3, [r7, #15]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d111      	bne.n	801085e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	691b      	ldr	r3, [r3, #16]
 801083e:	4618      	mov	r0, r3
 8010840:	f7fe f800 	bl	800e844 <dec_lock>
 8010844:	4603      	mov	r3, r0
 8010846:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d102      	bne.n	8010854 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	2100      	movs	r1, #0
 8010858:	4618      	mov	r0, r3
 801085a:	f7fd fecc 	bl	800e5f6 <unlock_fs>
#endif
		}
	}
	return res;
 801085e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b090      	sub	sp, #64	; 0x40
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f107 0208 	add.w	r2, r7, #8
 8010878:	4611      	mov	r1, r2
 801087a:	4618      	mov	r0, r3
 801087c:	f7ff fafa 	bl	800fe74 <validate>
 8010880:	4603      	mov	r3, r0
 8010882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010886:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801088a:	2b00      	cmp	r3, #0
 801088c:	d103      	bne.n	8010896 <f_lseek+0x2e>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	7d5b      	ldrb	r3, [r3, #21]
 8010892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010896:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801089a:	2b00      	cmp	r3, #0
 801089c:	d009      	beq.n	80108b2 <f_lseek+0x4a>
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fd fea5 	bl	800e5f6 <unlock_fs>
 80108ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108b0:	e244      	b.n	8010d3c <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f000 80f2 	beq.w	8010aa0 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c2:	d164      	bne.n	801098e <f_lseek+0x126>
			tbl = fp->cltbl;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80108ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108cc:	1d1a      	adds	r2, r3, #4
 80108ce:	627a      	str	r2, [r7, #36]	; 0x24
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	617b      	str	r3, [r7, #20]
 80108d4:	2302      	movs	r3, #2
 80108d6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d044      	beq.n	801096e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80108e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e6:	613b      	str	r3, [r7, #16]
 80108e8:	2300      	movs	r3, #0
 80108ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	3302      	adds	r3, #2
 80108f0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80108f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	3301      	adds	r3, #1
 80108fa:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010900:	4618      	mov	r0, r3
 8010902:	f7fe f900 	bl	800eb06 <get_fat>
 8010906:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090a:	2b01      	cmp	r3, #1
 801090c:	d809      	bhi.n	8010922 <f_lseek+0xba>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2202      	movs	r2, #2
 8010912:	755a      	strb	r2, [r3, #21]
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2102      	movs	r1, #2
 8010918:	4618      	mov	r0, r3
 801091a:	f7fd fe6c 	bl	800e5f6 <unlock_fs>
 801091e:	2302      	movs	r3, #2
 8010920:	e20c      	b.n	8010d3c <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010928:	d109      	bne.n	801093e <f_lseek+0xd6>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2201      	movs	r2, #1
 801092e:	755a      	strb	r2, [r3, #21]
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	2101      	movs	r1, #1
 8010934:	4618      	mov	r0, r3
 8010936:	f7fd fe5e 	bl	800e5f6 <unlock_fs>
 801093a:	2301      	movs	r3, #1
 801093c:	e1fe      	b.n	8010d3c <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3301      	adds	r3, #1
 8010942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010944:	429a      	cmp	r2, r3
 8010946:	d0d4      	beq.n	80108f2 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	429a      	cmp	r2, r3
 801094e:	d809      	bhi.n	8010964 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	1d1a      	adds	r2, r3, #4
 8010954:	627a      	str	r2, [r7, #36]	; 0x24
 8010956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010958:	601a      	str	r2, [r3, #0]
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	1d1a      	adds	r2, r3, #4
 801095e:	627a      	str	r2, [r7, #36]	; 0x24
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	69db      	ldr	r3, [r3, #28]
 8010968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801096a:	429a      	cmp	r2, r3
 801096c:	d3ba      	bcc.n	80108e4 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010974:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	429a      	cmp	r2, r3
 801097c:	d803      	bhi.n	8010986 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	2200      	movs	r2, #0
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	e1d1      	b.n	8010d2a <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010986:	2311      	movs	r3, #17
 8010988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801098c:	e1cd      	b.n	8010d2a <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	68db      	ldr	r3, [r3, #12]
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	429a      	cmp	r2, r3
 8010996:	d902      	bls.n	801099e <f_lseek+0x136>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	683a      	ldr	r2, [r7, #0]
 80109a2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f000 81bf 	beq.w	8010d2a <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	3b01      	subs	r3, #1
 80109b0:	4619      	mov	r1, r3
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fe fb8b 	bl	800f0ce <clmt_clust>
 80109b8:	4602      	mov	r2, r0
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	69db      	ldr	r3, [r3, #28]
 80109c4:	4619      	mov	r1, r3
 80109c6:	4610      	mov	r0, r2
 80109c8:	f7fe f87e 	bl	800eac8 <clust2sect>
 80109cc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d109      	bne.n	80109e8 <f_lseek+0x180>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2202      	movs	r2, #2
 80109d8:	755a      	strb	r2, [r3, #21]
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	2102      	movs	r1, #2
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fd fe09 	bl	800e5f6 <unlock_fs>
 80109e4:	2302      	movs	r3, #2
 80109e6:	e1a9      	b.n	8010d3c <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	3b01      	subs	r3, #1
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	8992      	ldrh	r2, [r2, #12]
 80109f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	8952      	ldrh	r2, [r2, #10]
 80109f8:	3a01      	subs	r2, #1
 80109fa:	4013      	ands	r3, r2
 80109fc:	69ba      	ldr	r2, [r7, #24]
 80109fe:	4413      	add	r3, r2
 8010a00:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	8992      	ldrh	r2, [r2, #12]
 8010a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a0e:	fb02 f201 	mul.w	r2, r2, r1
 8010a12:	1a9b      	subs	r3, r3, r2
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 8188 	beq.w	8010d2a <f_lseek+0x4c2>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a1b      	ldr	r3, [r3, #32]
 8010a1e:	69ba      	ldr	r2, [r7, #24]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	f000 8182 	beq.w	8010d2a <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	7d1b      	ldrb	r3, [r3, #20]
 8010a2a:	b25b      	sxtb	r3, r3
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	da1d      	bge.n	8010a6c <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	7858      	ldrb	r0, [r3, #1]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a1a      	ldr	r2, [r3, #32]
 8010a3e:	2301      	movs	r3, #1
 8010a40:	f7fd fc86 	bl	800e350 <disk_write>
 8010a44:	4603      	mov	r3, r0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d009      	beq.n	8010a5e <f_lseek+0x1f6>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	755a      	strb	r2, [r3, #21]
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2101      	movs	r1, #1
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fd fdce 	bl	800e5f6 <unlock_fs>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e16e      	b.n	8010d3c <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	7d1b      	ldrb	r3, [r3, #20]
 8010a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	7858      	ldrb	r0, [r3, #1]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a76:	2301      	movs	r3, #1
 8010a78:	69ba      	ldr	r2, [r7, #24]
 8010a7a:	f7fd fc49 	bl	800e310 <disk_read>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d009      	beq.n	8010a98 <f_lseek+0x230>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2201      	movs	r2, #1
 8010a88:	755a      	strb	r2, [r3, #21]
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	2101      	movs	r1, #1
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fd fdb1 	bl	800e5f6 <unlock_fs>
 8010a94:	2301      	movs	r3, #1
 8010a96:	e151      	b.n	8010d3c <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	69ba      	ldr	r2, [r7, #24]
 8010a9c:	621a      	str	r2, [r3, #32]
 8010a9e:	e144      	b.n	8010d2a <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d908      	bls.n	8010abc <f_lseek+0x254>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	7d1b      	ldrb	r3, [r3, #20]
 8010aae:	f003 0302 	and.w	r3, r3, #2
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d102      	bne.n	8010abc <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aca:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 80ce 	beq.w	8010c70 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	895b      	ldrh	r3, [r3, #10]
 8010ad8:	461a      	mov	r2, r3
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	899b      	ldrh	r3, [r3, #12]
 8010ade:	fb03 f302 	mul.w	r3, r3, r2
 8010ae2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d01b      	beq.n	8010b22 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	1e5a      	subs	r2, r3, #1
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8010af4:	6a3b      	ldr	r3, [r7, #32]
 8010af6:	1e59      	subs	r1, r3, #1
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d30f      	bcc.n	8010b22 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	1e5a      	subs	r2, r3, #1
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	425b      	negs	r3, r3
 8010b0a:	401a      	ands	r2, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	69db      	ldr	r3, [r3, #28]
 8010b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b20:	e02c      	b.n	8010b7c <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	689b      	ldr	r3, [r3, #8]
 8010b26:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d123      	bne.n	8010b76 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2100      	movs	r1, #0
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fe fa33 	bl	800ef9e <create_chain>
 8010b38:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d109      	bne.n	8010b54 <f_lseek+0x2ec>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2202      	movs	r2, #2
 8010b44:	755a      	strb	r2, [r3, #21]
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	2102      	movs	r1, #2
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fd fd53 	bl	800e5f6 <unlock_fs>
 8010b50:	2302      	movs	r3, #2
 8010b52:	e0f3      	b.n	8010d3c <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b5a:	d109      	bne.n	8010b70 <f_lseek+0x308>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	755a      	strb	r2, [r3, #21]
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	2101      	movs	r1, #1
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fd fd45 	bl	800e5f6 <unlock_fs>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e0e5      	b.n	8010d3c <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b74:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b7a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d076      	beq.n	8010c70 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8010b82:	e044      	b.n	8010c0e <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	603b      	str	r3, [r7, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	699a      	ldr	r2, [r3, #24]
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	441a      	add	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	7d1b      	ldrb	r3, [r3, #20]
 8010b9c:	f003 0302 	and.w	r3, r3, #2
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d00b      	beq.n	8010bbc <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fe f9f8 	bl	800ef9e <create_chain>
 8010bae:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d108      	bne.n	8010bc8 <f_lseek+0x360>
							ofs = 0; break;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	603b      	str	r3, [r7, #0]
 8010bba:	e02c      	b.n	8010c16 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fd ffa0 	bl	800eb06 <get_fat>
 8010bc6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bce:	d109      	bne.n	8010be4 <f_lseek+0x37c>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	755a      	strb	r2, [r3, #21]
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	2101      	movs	r1, #1
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fd fd0b 	bl	800e5f6 <unlock_fs>
 8010be0:	2301      	movs	r3, #1
 8010be2:	e0ab      	b.n	8010d3c <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d904      	bls.n	8010bf4 <f_lseek+0x38c>
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	69db      	ldr	r3, [r3, #28]
 8010bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d309      	bcc.n	8010c08 <f_lseek+0x3a0>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	755a      	strb	r2, [r3, #21]
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2102      	movs	r1, #2
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fd fcf9 	bl	800e5f6 <unlock_fs>
 8010c04:	2302      	movs	r3, #2
 8010c06:	e099      	b.n	8010d3c <f_lseek+0x4d4>
					fp->clust = clst;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c0c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d8b6      	bhi.n	8010b84 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	699a      	ldr	r2, [r3, #24]
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	441a      	add	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	899b      	ldrh	r3, [r3, #12]
 8010c26:	461a      	mov	r2, r3
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c2e:	fb02 f201 	mul.w	r2, r2, r1
 8010c32:	1a9b      	subs	r3, r3, r2
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d01b      	beq.n	8010c70 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fd ff43 	bl	800eac8 <clust2sect>
 8010c42:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d109      	bne.n	8010c5e <f_lseek+0x3f6>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2202      	movs	r2, #2
 8010c4e:	755a      	strb	r2, [r3, #21]
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	2102      	movs	r1, #2
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7fd fcce 	bl	800e5f6 <unlock_fs>
 8010c5a:	2302      	movs	r3, #2
 8010c5c:	e06e      	b.n	8010d3c <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	899b      	ldrh	r3, [r3, #12]
 8010c62:	461a      	mov	r2, r3
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c6c:	4413      	add	r3, r2
 8010c6e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	699a      	ldr	r2, [r3, #24]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d90a      	bls.n	8010c92 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	699a      	ldr	r2, [r3, #24]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
 8010c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c8c:	b2da      	uxtb	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	68ba      	ldr	r2, [r7, #8]
 8010c98:	8992      	ldrh	r2, [r2, #12]
 8010c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c9e:	fb02 f201 	mul.w	r2, r2, r1
 8010ca2:	1a9b      	subs	r3, r3, r2
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d040      	beq.n	8010d2a <f_lseek+0x4c2>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6a1b      	ldr	r3, [r3, #32]
 8010cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d03b      	beq.n	8010d2a <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	7d1b      	ldrb	r3, [r3, #20]
 8010cb6:	b25b      	sxtb	r3, r3
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	da1d      	bge.n	8010cf8 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	7858      	ldrb	r0, [r3, #1]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a1a      	ldr	r2, [r3, #32]
 8010cca:	2301      	movs	r3, #1
 8010ccc:	f7fd fb40 	bl	800e350 <disk_write>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d009      	beq.n	8010cea <f_lseek+0x482>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2201      	movs	r2, #1
 8010cda:	755a      	strb	r2, [r3, #21]
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	2101      	movs	r1, #1
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fd fc88 	bl	800e5f6 <unlock_fs>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e028      	b.n	8010d3c <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	7d1b      	ldrb	r3, [r3, #20]
 8010cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	7858      	ldrb	r0, [r3, #1]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d02:	2301      	movs	r3, #1
 8010d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d06:	f7fd fb03 	bl	800e310 <disk_read>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d009      	beq.n	8010d24 <f_lseek+0x4bc>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2201      	movs	r2, #1
 8010d14:	755a      	strb	r2, [r3, #21]
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	2101      	movs	r1, #1
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fd fc6b 	bl	800e5f6 <unlock_fs>
 8010d20:	2301      	movs	r3, #1
 8010d22:	e00b      	b.n	8010d3c <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d28:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d30:	4611      	mov	r1, r2
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fd fc5f 	bl	800e5f6 <unlock_fs>
 8010d38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3740      	adds	r7, #64	; 0x40
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010d52:	2301      	movs	r3, #1
 8010d54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010d56:	2300      	movs	r3, #0
 8010d58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010d5a:	4b1f      	ldr	r3, [pc, #124]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d5c:	7a5b      	ldrb	r3, [r3, #9]
 8010d5e:	b2db      	uxtb	r3, r3
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d131      	bne.n	8010dc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010d64:	4b1c      	ldr	r3, [pc, #112]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d66:	7a5b      	ldrb	r3, [r3, #9]
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	4b1a      	ldr	r3, [pc, #104]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d6e:	2100      	movs	r1, #0
 8010d70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010d72:	4b19      	ldr	r3, [pc, #100]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d74:	7a5b      	ldrb	r3, [r3, #9]
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	4a17      	ldr	r2, [pc, #92]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	4413      	add	r3, r2
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010d82:	4b15      	ldr	r3, [pc, #84]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d84:	7a5b      	ldrb	r3, [r3, #9]
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	461a      	mov	r2, r3
 8010d8a:	4b13      	ldr	r3, [pc, #76]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d8c:	4413      	add	r3, r2
 8010d8e:	79fa      	ldrb	r2, [r7, #7]
 8010d90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010d92:	4b11      	ldr	r3, [pc, #68]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d94:	7a5b      	ldrb	r3, [r3, #9]
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	1c5a      	adds	r2, r3, #1
 8010d9a:	b2d1      	uxtb	r1, r2
 8010d9c:	4a0e      	ldr	r2, [pc, #56]	; (8010dd8 <FATFS_LinkDriverEx+0x94>)
 8010d9e:	7251      	strb	r1, [r2, #9]
 8010da0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010da2:	7dbb      	ldrb	r3, [r7, #22]
 8010da4:	3330      	adds	r3, #48	; 0x30
 8010da6:	b2da      	uxtb	r2, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	3301      	adds	r3, #1
 8010db0:	223a      	movs	r2, #58	; 0x3a
 8010db2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	3302      	adds	r3, #2
 8010db8:	222f      	movs	r2, #47	; 0x2f
 8010dba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	3303      	adds	r3, #3
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	371c      	adds	r7, #28
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	2401492c 	.word	0x2401492c

08010ddc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010de6:	2200      	movs	r2, #0
 8010de8:	6839      	ldr	r1, [r7, #0]
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff ffaa 	bl	8010d44 <FATFS_LinkDriverEx>
 8010df0:	4603      	mov	r3, r0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3708      	adds	r7, #8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b086      	sub	sp, #24
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	4603      	mov	r3, r0
 8010e02:	6039      	str	r1, [r7, #0]
 8010e04:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8010e06:	2300      	movs	r3, #0
 8010e08:	60fb      	str	r3, [r7, #12]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010e0e:	f107 030c 	add.w	r3, r7, #12
 8010e12:	2101      	movs	r1, #1
 8010e14:	4618      	mov	r0, r3
 8010e16:	f000 f961 	bl	80110dc <osSemaphoreCreate>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	bf14      	ite	ne
 8010e28:	2301      	movne	r3, #1
 8010e2a:	2300      	moveq	r3, #0
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	617b      	str	r3, [r7, #20]

    return ret;
 8010e30:	697b      	ldr	r3, [r7, #20]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b082      	sub	sp, #8
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 fa02 	bl	801124c <osSemaphoreDelete>
#endif
    return 1;
 8010e48:	2301      	movs	r3, #1
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b084      	sub	sp, #16
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010e5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 f96e 	bl	8011144 <osSemaphoreWait>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010e72:	68fb      	ldr	r3, [r7, #12]
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3710      	adds	r7, #16
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f9ab 	bl	80111e0 <osSemaphoreRelease>
#endif
}
 8010e8a:	bf00      	nop
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010e92:	b480      	push	{r7}
 8010e94:	b085      	sub	sp, #20
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	4603      	mov	r3, r0
 8010e9a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ea4:	2b84      	cmp	r3, #132	; 0x84
 8010ea6:	d005      	beq.n	8010eb4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010ea8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	4413      	add	r3, r2
 8010eb0:	3303      	adds	r3, #3
 8010eb2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ec8:	f3ef 8305 	mrs	r3, IPSR
 8010ecc:	607b      	str	r3, [r7, #4]
  return(result);
 8010ece:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	bf14      	ite	ne
 8010ed4:	2301      	movne	r3, #1
 8010ed6:	2300      	moveq	r3, #0
 8010ed8:	b2db      	uxtb	r3, r3
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010eea:	f001 fffd 	bl	8012ee8 <vTaskStartScheduler>
  
  return osOK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010ef8:	f002 fc0c 	bl	8013714 <xTaskGetSchedulerState>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d101      	bne.n	8010f06 <osKernelRunning+0x12>
    return 0;
 8010f02:	2300      	movs	r3, #0
 8010f04:	e000      	b.n	8010f08 <osKernelRunning+0x14>
  else
    return 1;
 8010f06:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010f10:	f7ff ffd7 	bl	8010ec2 <inHandlerMode>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d003      	beq.n	8010f22 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010f1a:	f002 f8fd 	bl	8013118 <xTaskGetTickCountFromISR>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	e002      	b.n	8010f28 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010f22:	f002 f8e9 	bl	80130f8 <xTaskGetTickCount>
 8010f26:	4603      	mov	r3, r0
  }
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f2e:	b089      	sub	sp, #36	; 0x24
 8010f30:	af04      	add	r7, sp, #16
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	695b      	ldr	r3, [r3, #20]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d020      	beq.n	8010f80 <osThreadCreate+0x54>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	699b      	ldr	r3, [r3, #24]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d01c      	beq.n	8010f80 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	685c      	ldr	r4, [r3, #4]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681d      	ldr	r5, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	691e      	ldr	r6, [r3, #16]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7ff ff9a 	bl	8010e92 <makeFreeRtosPriority>
 8010f5e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	695b      	ldr	r3, [r3, #20]
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f68:	9202      	str	r2, [sp, #8]
 8010f6a:	9301      	str	r3, [sp, #4]
 8010f6c:	9100      	str	r1, [sp, #0]
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	4632      	mov	r2, r6
 8010f72:	4629      	mov	r1, r5
 8010f74:	4620      	mov	r0, r4
 8010f76:	f001 fc99 	bl	80128ac <xTaskCreateStatic>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	e01c      	b.n	8010fba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	685c      	ldr	r4, [r3, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f8c:	b29e      	uxth	r6, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff ff7c 	bl	8010e92 <makeFreeRtosPriority>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	f107 030c 	add.w	r3, r7, #12
 8010fa0:	9301      	str	r3, [sp, #4]
 8010fa2:	9200      	str	r2, [sp, #0]
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	4632      	mov	r2, r6
 8010fa8:	4629      	mov	r1, r5
 8010faa:	4620      	mov	r0, r4
 8010fac:	f001 fcd8 	bl	8012960 <xTaskCreate>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d001      	beq.n	8010fba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	e000      	b.n	8010fbc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010fba:	68fb      	ldr	r3, [r7, #12]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fc4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af02      	add	r7, sp, #8
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8010fd6:	f7ff ff74 	bl	8010ec2 <inHandlerMode>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d01c      	beq.n	801101a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8010fe0:	6839      	ldr	r1, [r7, #0]
 8010fe2:	f107 0208 	add.w	r2, r7, #8
 8010fe6:	f107 030c 	add.w	r3, r7, #12
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	4613      	mov	r3, r2
 8010fee:	2201      	movs	r2, #1
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f002 fe69 	bl	8013cc8 <xTaskGenericNotifyFromISR>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d002      	beq.n	8011002 <osSignalSet+0x3e>
      return 0x80000000;
 8010ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011000:	e019      	b.n	8011036 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d015      	beq.n	8011034 <osSignalSet+0x70>
 8011008:	4b0d      	ldr	r3, [pc, #52]	; (8011040 <osSignalSet+0x7c>)
 801100a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	e00c      	b.n	8011034 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801101a:	6839      	ldr	r1, [r7, #0]
 801101c:	f107 0308 	add.w	r3, r7, #8
 8011020:	2201      	movs	r2, #1
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f002 fd9e 	bl	8013b64 <xTaskGenericNotify>
 8011028:	4603      	mov	r3, r0
 801102a:	2b01      	cmp	r3, #1
 801102c:	d002      	beq.n	8011034 <osSignalSet+0x70>
    return 0x80000000;
 801102e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011032:	e000      	b.n	8011036 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011034:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	e000ed04 	.word	0xe000ed04

08011044 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011044:	b590      	push	{r4, r7, lr}
 8011046:	b089      	sub	sp, #36	; 0x24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011050:	2300      	movs	r3, #0
 8011052:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011054:	2300      	movs	r3, #0
 8011056:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801105e:	d103      	bne.n	8011068 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011060:	f04f 33ff 	mov.w	r3, #4294967295
 8011064:	61fb      	str	r3, [r7, #28]
 8011066:	e009      	b.n	801107c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d006      	beq.n	801107c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d101      	bne.n	801107c <osSignalWait+0x38>
      ticks = 1;
 8011078:	2301      	movs	r3, #1
 801107a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 801107c:	f7ff ff21 	bl	8010ec2 <inHandlerMode>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d002      	beq.n	801108c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011086:	2382      	movs	r3, #130	; 0x82
 8011088:	613b      	str	r3, [r7, #16]
 801108a:	e01b      	b.n	80110c4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 801108c:	68b9      	ldr	r1, [r7, #8]
 801108e:	f107 0310 	add.w	r3, r7, #16
 8011092:	1d1a      	adds	r2, r3, #4
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	2000      	movs	r0, #0
 8011098:	f002 fd0a 	bl	8013ab0 <xTaskNotifyWait>
 801109c:	4603      	mov	r3, r0
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d008      	beq.n	80110b4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d102      	bne.n	80110ae <osSignalWait+0x6a>
 80110a8:	2300      	movs	r3, #0
 80110aa:	613b      	str	r3, [r7, #16]
 80110ac:	e00a      	b.n	80110c4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80110ae:	2340      	movs	r3, #64	; 0x40
 80110b0:	613b      	str	r3, [r7, #16]
 80110b2:	e007      	b.n	80110c4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	da02      	bge.n	80110c0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80110ba:	2386      	movs	r3, #134	; 0x86
 80110bc:	613b      	str	r3, [r7, #16]
 80110be:	e001      	b.n	80110c4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80110c0:	2308      	movs	r3, #8
 80110c2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	461c      	mov	r4, r3
 80110c8:	f107 0310 	add.w	r3, r7, #16
 80110cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80110d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	3724      	adds	r7, #36	; 0x24
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd90      	pop	{r4, r7, pc}

080110dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af02      	add	r7, sp, #8
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d010      	beq.n	8011110 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d10b      	bne.n	801110c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685a      	ldr	r2, [r3, #4]
 80110f8:	2303      	movs	r3, #3
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	4613      	mov	r3, r2
 80110fe:	2200      	movs	r2, #0
 8011100:	2100      	movs	r1, #0
 8011102:	2001      	movs	r0, #1
 8011104:	f000 fd12 	bl	8011b2c <xQueueGenericCreateStatic>
 8011108:	4603      	mov	r3, r0
 801110a:	e016      	b.n	801113a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801110c:	2300      	movs	r3, #0
 801110e:	e014      	b.n	801113a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	2b01      	cmp	r3, #1
 8011114:	d110      	bne.n	8011138 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8011116:	2203      	movs	r2, #3
 8011118:	2100      	movs	r1, #0
 801111a:	2001      	movs	r0, #1
 801111c:	f000 fd79 	bl	8011c12 <xQueueGenericCreate>
 8011120:	60f8      	str	r0, [r7, #12]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d005      	beq.n	8011134 <osSemaphoreCreate+0x58>
 8011128:	2300      	movs	r3, #0
 801112a:	2200      	movs	r2, #0
 801112c:	2100      	movs	r1, #0
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 fdce 	bl	8011cd0 <xQueueGenericSend>
      return sema;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	e000      	b.n	801113a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011138:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
	...

08011144 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801114e:	2300      	movs	r3, #0
 8011150:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d101      	bne.n	801115c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011158:	2380      	movs	r3, #128	; 0x80
 801115a:	e03a      	b.n	80111d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011166:	d103      	bne.n	8011170 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011168:	f04f 33ff 	mov.w	r3, #4294967295
 801116c:	60fb      	str	r3, [r7, #12]
 801116e:	e009      	b.n	8011184 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d006      	beq.n	8011184 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d101      	bne.n	8011184 <osSemaphoreWait+0x40>
      ticks = 1;
 8011180:	2301      	movs	r3, #1
 8011182:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011184:	f7ff fe9d 	bl	8010ec2 <inHandlerMode>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d017      	beq.n	80111be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801118e:	f107 0308 	add.w	r3, r7, #8
 8011192:	461a      	mov	r2, r3
 8011194:	2100      	movs	r1, #0
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f001 f996 	bl	80124c8 <xQueueReceiveFromISR>
 801119c:	4603      	mov	r3, r0
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d001      	beq.n	80111a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80111a2:	23ff      	movs	r3, #255	; 0xff
 80111a4:	e015      	b.n	80111d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d011      	beq.n	80111d0 <osSemaphoreWait+0x8c>
 80111ac:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <osSemaphoreWait+0x98>)
 80111ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	e008      	b.n	80111d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80111be:	68f9      	ldr	r1, [r7, #12]
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f001 f879 	bl	80122b8 <xQueueSemaphoreTake>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d001      	beq.n	80111d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80111cc:	23ff      	movs	r3, #255	; 0xff
 80111ce:	e000      	b.n	80111d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	e000ed04 	.word	0xe000ed04

080111e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80111e8:	2300      	movs	r3, #0
 80111ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80111ec:	2300      	movs	r3, #0
 80111ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80111f0:	f7ff fe67 	bl	8010ec2 <inHandlerMode>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d016      	beq.n	8011228 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80111fa:	f107 0308 	add.w	r3, r7, #8
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fef3 	bl	8011fec <xQueueGiveFromISR>
 8011206:	4603      	mov	r3, r0
 8011208:	2b01      	cmp	r3, #1
 801120a:	d001      	beq.n	8011210 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801120c:	23ff      	movs	r3, #255	; 0xff
 801120e:	e017      	b.n	8011240 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d013      	beq.n	801123e <osSemaphoreRelease+0x5e>
 8011216:	4b0c      	ldr	r3, [pc, #48]	; (8011248 <osSemaphoreRelease+0x68>)
 8011218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	f3bf 8f4f 	dsb	sy
 8011222:	f3bf 8f6f 	isb	sy
 8011226:	e00a      	b.n	801123e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011228:	2300      	movs	r3, #0
 801122a:	2200      	movs	r2, #0
 801122c:	2100      	movs	r1, #0
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fd4e 	bl	8011cd0 <xQueueGenericSend>
 8011234:	4603      	mov	r3, r0
 8011236:	2b01      	cmp	r3, #1
 8011238:	d001      	beq.n	801123e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801123a:	23ff      	movs	r3, #255	; 0xff
 801123c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801123e:	68fb      	ldr	r3, [r7, #12]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011254:	f7ff fe35 	bl	8010ec2 <inHandlerMode>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d001      	beq.n	8011262 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801125e:	2382      	movs	r3, #130	; 0x82
 8011260:	e003      	b.n	801126a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f001 f9ad 	bl	80125c2 <vQueueDelete>

  return osOK; 
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3708      	adds	r7, #8
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	3303      	adds	r3, #3
 8011280:	f023 0303 	bic.w	r3, r3, #3
 8011284:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011286:	2014      	movs	r0, #20
 8011288:	f003 f89a 	bl	80143c0 <pvPortMalloc>
 801128c:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d046      	beq.n	8011322 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	2200      	movs	r2, #0
 80112a6:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f003 f887 	bl	80143c0 <pvPortMalloc>
 80112b2:	4602      	mov	r2, r0
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d02b      	beq.n	8011318 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	fb02 f303 	mul.w	r3, r2, r3
 80112ca:	4618      	mov	r0, r3
 80112cc:	f003 f878 	bl	80143c0 <pvPortMalloc>
 80112d0:	4602      	mov	r2, r0
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d011      	beq.n	8011302 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80112de:	2300      	movs	r3, #0
 80112e0:	613b      	str	r3, [r7, #16]
 80112e2:	e008      	b.n	80112f6 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	685a      	ldr	r2, [r3, #4]
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	4413      	add	r3, r2
 80112ec:	2200      	movs	r2, #0
 80112ee:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	3301      	adds	r3, #1
 80112f4:	613b      	str	r3, [r7, #16]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	693a      	ldr	r2, [r7, #16]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d3f1      	bcc.n	80112e4 <osPoolCreate+0x72>
 8011300:	e00f      	b.n	8011322 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	4618      	mov	r0, r3
 8011308:	f003 f91c 	bl	8014544 <vPortFree>
        vPortFree(thePool);
 801130c:	6978      	ldr	r0, [r7, #20]
 801130e:	f003 f919 	bl	8014544 <vPortFree>
        thePool = NULL;
 8011312:	2300      	movs	r3, #0
 8011314:	617b      	str	r3, [r7, #20]
 8011316:	e004      	b.n	8011322 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011318:	6978      	ldr	r0, [r7, #20]
 801131a:	f003 f913 	bl	8014544 <vPortFree>
      thePool = NULL;
 801131e:	2300      	movs	r3, #0
 8011320:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011322:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011324:	4618      	mov	r0, r3
 8011326:	3718      	adds	r7, #24
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08a      	sub	sp, #40	; 0x28
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011334:	2300      	movs	r3, #0
 8011336:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011338:	2300      	movs	r3, #0
 801133a:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801133c:	f7ff fdc1 	bl	8010ec2 <inHandlerMode>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d00e      	beq.n	8011364 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011346:	f3ef 8211 	mrs	r2, BASEPRI
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	617a      	str	r2, [r7, #20]
 801135c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801135e:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011360:	627b      	str	r3, [r7, #36]	; 0x24
 8011362:	e001      	b.n	8011368 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011364:	f002 ff12 	bl	801418c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011368:	2300      	movs	r3, #0
 801136a:	61fb      	str	r3, [r7, #28]
 801136c:	e029      	b.n	80113c2 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	691a      	ldr	r2, [r3, #16]
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	4413      	add	r3, r2
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	6892      	ldr	r2, [r2, #8]
 801137a:	fbb3 f1f2 	udiv	r1, r3, r2
 801137e:	fb02 f201 	mul.w	r2, r2, r1
 8011382:	1a9b      	subs	r3, r3, r2
 8011384:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685a      	ldr	r2, [r3, #4]
 801138a:	69bb      	ldr	r3, [r7, #24]
 801138c:	4413      	add	r3, r2
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d113      	bne.n	80113bc <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	685a      	ldr	r2, [r3, #4]
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	4413      	add	r3, r2
 801139c:	2201      	movs	r2, #1
 801139e:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	4619      	mov	r1, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	69ba      	ldr	r2, [r7, #24]
 80113ac:	fb02 f303 	mul.w	r3, r2, r3
 80113b0:	440b      	add	r3, r1
 80113b2:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	611a      	str	r2, [r3, #16]
      break;
 80113ba:	e007      	b.n	80113cc <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	3301      	adds	r3, #1
 80113c0:	61fb      	str	r3, [r7, #28]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	69fa      	ldr	r2, [r7, #28]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d3d0      	bcc.n	801136e <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80113cc:	f7ff fd79 	bl	8010ec2 <inHandlerMode>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d005      	beq.n	80113e2 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f383 8811 	msr	BASEPRI, r3
 80113e0:	e001      	b.n	80113e6 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80113e2:	f002 ff01 	bl	80141e8 <vPortExitCritical>
  }
  
  return p;
 80113e6:	6a3b      	ldr	r3, [r7, #32]
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3728      	adds	r7, #40	; 0x28
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b085      	sub	sp, #20
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d101      	bne.n	8011404 <osPoolFree+0x14>
    return osErrorParameter;
 8011400:	2380      	movs	r3, #128	; 0x80
 8011402:	e030      	b.n	8011466 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d101      	bne.n	801140e <osPoolFree+0x1e>
    return osErrorParameter;
 801140a:	2380      	movs	r3, #128	; 0x80
 801140c:	e02b      	b.n	8011466 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	683a      	ldr	r2, [r7, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	d201      	bcs.n	801141c <osPoolFree+0x2c>
    return osErrorParameter;
 8011418:	2380      	movs	r3, #128	; 0x80
 801141a:	e024      	b.n	8011466 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	6812      	ldr	r2, [r2, #0]
 8011422:	1a9b      	subs	r3, r3, r2
 8011424:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	68da      	ldr	r2, [r3, #12]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011430:	fb02 f201 	mul.w	r2, r2, r1
 8011434:	1a9b      	subs	r3, r3, r2
 8011436:	2b00      	cmp	r3, #0
 8011438:	d001      	beq.n	801143e <osPoolFree+0x4e>
    return osErrorParameter;
 801143a:	2380      	movs	r3, #128	; 0x80
 801143c:	e013      	b.n	8011466 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	fbb2 f3f3 	udiv	r3, r2, r3
 8011448:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	429a      	cmp	r2, r3
 8011452:	d301      	bcc.n	8011458 <osPoolFree+0x68>
    return osErrorParameter;
 8011454:	2380      	movs	r3, #128	; 0x80
 8011456:	e006      	b.n	8011466 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	4413      	add	r3, r2
 8011460:	2200      	movs	r2, #0
 8011462:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3714      	adds	r7, #20
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr

08011472 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011472:	b590      	push	{r4, r7, lr}
 8011474:	b085      	sub	sp, #20
 8011476:	af02      	add	r7, sp, #8
 8011478:	6078      	str	r0, [r7, #4]
 801147a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	689b      	ldr	r3, [r3, #8]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d012      	beq.n	80114aa <osMessageCreate+0x38>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00e      	beq.n	80114aa <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6818      	ldr	r0, [r3, #0]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6859      	ldr	r1, [r3, #4]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	689a      	ldr	r2, [r3, #8]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	68dc      	ldr	r4, [r3, #12]
 801149c:	2300      	movs	r3, #0
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	4623      	mov	r3, r4
 80114a2:	f000 fb43 	bl	8011b2c <xQueueGenericCreateStatic>
 80114a6:	4603      	mov	r3, r0
 80114a8:	e008      	b.n	80114bc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6818      	ldr	r0, [r3, #0]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	4619      	mov	r1, r3
 80114b6:	f000 fbac 	bl	8011c12 <xQueueGenericCreate>
 80114ba:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd90      	pop	{r4, r7, pc}

080114c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b086      	sub	sp, #24
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80114d0:	2300      	movs	r3, #0
 80114d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d101      	bne.n	80114e2 <osMessagePut+0x1e>
    ticks = 1;
 80114de:	2301      	movs	r3, #1
 80114e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80114e2:	f7ff fcee 	bl	8010ec2 <inHandlerMode>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d018      	beq.n	801151e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80114ec:	f107 0210 	add.w	r2, r7, #16
 80114f0:	f107 0108 	add.w	r1, r7, #8
 80114f4:	2300      	movs	r3, #0
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f000 fce4 	bl	8011ec4 <xQueueGenericSendFromISR>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b01      	cmp	r3, #1
 8011500:	d001      	beq.n	8011506 <osMessagePut+0x42>
      return osErrorOS;
 8011502:	23ff      	movs	r3, #255	; 0xff
 8011504:	e018      	b.n	8011538 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d014      	beq.n	8011536 <osMessagePut+0x72>
 801150c:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <osMessagePut+0x7c>)
 801150e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	f3bf 8f4f 	dsb	sy
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	e00b      	b.n	8011536 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801151e:	f107 0108 	add.w	r1, r7, #8
 8011522:	2300      	movs	r3, #0
 8011524:	697a      	ldr	r2, [r7, #20]
 8011526:	68f8      	ldr	r0, [r7, #12]
 8011528:	f000 fbd2 	bl	8011cd0 <xQueueGenericSend>
 801152c:	4603      	mov	r3, r0
 801152e:	2b01      	cmp	r3, #1
 8011530:	d001      	beq.n	8011536 <osMessagePut+0x72>
      return osErrorOS;
 8011532:	23ff      	movs	r3, #255	; 0xff
 8011534:	e000      	b.n	8011538 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011536:	2300      	movs	r3, #0
}
 8011538:	4618      	mov	r0, r3
 801153a:	3718      	adds	r7, #24
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	e000ed04 	.word	0xe000ed04

08011544 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011544:	b590      	push	{r4, r7, lr}
 8011546:	b08b      	sub	sp, #44	; 0x2c
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011554:	2300      	movs	r3, #0
 8011556:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10a      	bne.n	8011574 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801155e:	2380      	movs	r3, #128	; 0x80
 8011560:	617b      	str	r3, [r7, #20]
    return event;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	461c      	mov	r4, r3
 8011566:	f107 0314 	add.w	r3, r7, #20
 801156a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801156e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011572:	e054      	b.n	801161e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011574:	2300      	movs	r3, #0
 8011576:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011578:	2300      	movs	r3, #0
 801157a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011582:	d103      	bne.n	801158c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011584:	f04f 33ff 	mov.w	r3, #4294967295
 8011588:	627b      	str	r3, [r7, #36]	; 0x24
 801158a:	e009      	b.n	80115a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d006      	beq.n	80115a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <osMessageGet+0x5c>
      ticks = 1;
 801159c:	2301      	movs	r3, #1
 801159e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80115a0:	f7ff fc8f 	bl	8010ec2 <inHandlerMode>
 80115a4:	4603      	mov	r3, r0
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d01c      	beq.n	80115e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80115aa:	f107 0220 	add.w	r2, r7, #32
 80115ae:	f107 0314 	add.w	r3, r7, #20
 80115b2:	3304      	adds	r3, #4
 80115b4:	4619      	mov	r1, r3
 80115b6:	68b8      	ldr	r0, [r7, #8]
 80115b8:	f000 ff86 	bl	80124c8 <xQueueReceiveFromISR>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d102      	bne.n	80115c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80115c2:	2310      	movs	r3, #16
 80115c4:	617b      	str	r3, [r7, #20]
 80115c6:	e001      	b.n	80115cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80115c8:	2300      	movs	r3, #0
 80115ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d01d      	beq.n	801160e <osMessageGet+0xca>
 80115d2:	4b15      	ldr	r3, [pc, #84]	; (8011628 <osMessageGet+0xe4>)
 80115d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115d8:	601a      	str	r2, [r3, #0]
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	f3bf 8f6f 	isb	sy
 80115e2:	e014      	b.n	801160e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80115e4:	f107 0314 	add.w	r3, r7, #20
 80115e8:	3304      	adds	r3, #4
 80115ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115ec:	4619      	mov	r1, r3
 80115ee:	68b8      	ldr	r0, [r7, #8]
 80115f0:	f000 fd86 	bl	8012100 <xQueueReceive>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d102      	bne.n	8011600 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80115fa:	2310      	movs	r3, #16
 80115fc:	617b      	str	r3, [r7, #20]
 80115fe:	e006      	b.n	801160e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011602:	2b00      	cmp	r3, #0
 8011604:	d101      	bne.n	801160a <osMessageGet+0xc6>
 8011606:	2300      	movs	r3, #0
 8011608:	e000      	b.n	801160c <osMessageGet+0xc8>
 801160a:	2340      	movs	r3, #64	; 0x40
 801160c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	461c      	mov	r4, r3
 8011612:	f107 0314 	add.w	r3, r7, #20
 8011616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801161a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	372c      	adds	r7, #44	; 0x2c
 8011622:	46bd      	mov	sp, r7
 8011624:	bd90      	pop	{r4, r7, pc}
 8011626:	bf00      	nop
 8011628:	e000ed04 	.word	0xe000ed04

0801162c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 801162c:	b590      	push	{r4, r7, lr}
 801162e:	b087      	sub	sp, #28
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	60fb      	str	r3, [r7, #12]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	613b      	str	r3, [r7, #16]
 8011642:	2300      	movs	r3, #0
 8011644:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	689c      	ldr	r4, [r3, #8]
 801164a:	200c      	movs	r0, #12
 801164c:	f002 feb8 	bl	80143c0 <pvPortMalloc>
 8011650:	4603      	mov	r3, r0
 8011652:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d101      	bne.n	8011662 <osMailCreate+0x36>
    return NULL;
 801165e:	2300      	movs	r3, #0
 8011660:	e038      	b.n	80116d4 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6818      	ldr	r0, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	681c      	ldr	r4, [r3, #0]
 8011676:	2200      	movs	r2, #0
 8011678:	2104      	movs	r1, #4
 801167a:	f000 faca 	bl	8011c12 <xQueueGenericCreate>
 801167e:	4603      	mov	r3, r0
 8011680:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d107      	bne.n	801169e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4618      	mov	r0, r3
 8011696:	f002 ff55 	bl	8014544 <vPortFree>
    return NULL;
 801169a:	2300      	movs	r3, #0
 801169c:	e01a      	b.n	80116d4 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	689b      	ldr	r3, [r3, #8]
 80116a2:	681c      	ldr	r4, [r3, #0]
 80116a4:	f107 030c 	add.w	r3, r7, #12
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7ff fde2 	bl	8011272 <osPoolCreate>
 80116ae:	4603      	mov	r3, r0
 80116b0:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d107      	bne.n	80116ce <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f002 ff3d 	bl	8014544 <vPortFree>
    return NULL;
 80116ca:	2300      	movs	r3, #0
 80116cc:	e002      	b.n	80116d4 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	371c      	adds	r7, #28
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd90      	pop	{r4, r7, pc}

080116dc <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <osMailAlloc+0x14>
    return NULL;
 80116ec:	2300      	movs	r3, #0
 80116ee:	e006      	b.n	80116fe <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7ff fe19 	bl	801132c <osPoolAlloc>
 80116fa:	60f8      	str	r0, [r7, #12]
  
  return p;
 80116fc:	68fb      	ldr	r3, [r7, #12]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
	...

08011708 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d101      	bne.n	801171c <osMailPut+0x14>
    return osErrorParameter;
 8011718:	2380      	movs	r3, #128	; 0x80
 801171a:	e02c      	b.n	8011776 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 801171c:	2300      	movs	r3, #0
 801171e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011720:	f7ff fbcf 	bl	8010ec2 <inHandlerMode>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d018      	beq.n	801175c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6858      	ldr	r0, [r3, #4]
 801172e:	f107 020c 	add.w	r2, r7, #12
 8011732:	4639      	mov	r1, r7
 8011734:	2300      	movs	r3, #0
 8011736:	f000 fbc5 	bl	8011ec4 <xQueueGenericSendFromISR>
 801173a:	4603      	mov	r3, r0
 801173c:	2b01      	cmp	r3, #1
 801173e:	d001      	beq.n	8011744 <osMailPut+0x3c>
      return osErrorOS;
 8011740:	23ff      	movs	r3, #255	; 0xff
 8011742:	e018      	b.n	8011776 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d014      	beq.n	8011774 <osMailPut+0x6c>
 801174a:	4b0d      	ldr	r3, [pc, #52]	; (8011780 <osMailPut+0x78>)
 801174c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	f3bf 8f6f 	isb	sy
 801175a:	e00b      	b.n	8011774 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6858      	ldr	r0, [r3, #4]
 8011760:	4639      	mov	r1, r7
 8011762:	2300      	movs	r3, #0
 8011764:	2200      	movs	r2, #0
 8011766:	f000 fab3 	bl	8011cd0 <xQueueGenericSend>
 801176a:	4603      	mov	r3, r0
 801176c:	2b01      	cmp	r3, #1
 801176e:	d001      	beq.n	8011774 <osMailPut+0x6c>
      return osErrorOS;
 8011770:	23ff      	movs	r3, #255	; 0xff
 8011772:	e000      	b.n	8011776 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8011774:	2300      	movs	r3, #0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	e000ed04 	.word	0xe000ed04

08011784 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b08b      	sub	sp, #44	; 0x2c
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d10a      	bne.n	80117b0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801179a:	2380      	movs	r3, #128	; 0x80
 801179c:	617b      	str	r3, [r7, #20]
    return event;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	461c      	mov	r4, r3
 80117a2:	f107 0314 	add.w	r3, r7, #20
 80117a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80117aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80117ae:	e056      	b.n	801185e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80117b0:	2300      	movs	r3, #0
 80117b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80117b4:	2300      	movs	r3, #0
 80117b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117be:	d103      	bne.n	80117c8 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80117c0:	f04f 33ff 	mov.w	r3, #4294967295
 80117c4:	627b      	str	r3, [r7, #36]	; 0x24
 80117c6:	e009      	b.n	80117dc <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d006      	beq.n	80117dc <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80117d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d101      	bne.n	80117dc <osMailGet+0x58>
      ticks = 1;
 80117d8:	2301      	movs	r3, #1
 80117da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80117dc:	f7ff fb71 	bl	8010ec2 <inHandlerMode>
 80117e0:	4603      	mov	r3, r0
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d01d      	beq.n	8011822 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	6858      	ldr	r0, [r3, #4]
 80117ea:	f107 0220 	add.w	r2, r7, #32
 80117ee:	f107 0314 	add.w	r3, r7, #20
 80117f2:	3304      	adds	r3, #4
 80117f4:	4619      	mov	r1, r3
 80117f6:	f000 fe67 	bl	80124c8 <xQueueReceiveFromISR>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d102      	bne.n	8011806 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8011800:	2320      	movs	r3, #32
 8011802:	617b      	str	r3, [r7, #20]
 8011804:	e001      	b.n	801180a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8011806:	2300      	movs	r3, #0
 8011808:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801180a:	6a3b      	ldr	r3, [r7, #32]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d01e      	beq.n	801184e <osMailGet+0xca>
 8011810:	4b15      	ldr	r3, [pc, #84]	; (8011868 <osMailGet+0xe4>)
 8011812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011816:	601a      	str	r2, [r3, #0]
 8011818:	f3bf 8f4f 	dsb	sy
 801181c:	f3bf 8f6f 	isb	sy
 8011820:	e015      	b.n	801184e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	6858      	ldr	r0, [r3, #4]
 8011826:	f107 0314 	add.w	r3, r7, #20
 801182a:	3304      	adds	r3, #4
 801182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801182e:	4619      	mov	r1, r3
 8011830:	f000 fc66 	bl	8012100 <xQueueReceive>
 8011834:	4603      	mov	r3, r0
 8011836:	2b01      	cmp	r3, #1
 8011838:	d102      	bne.n	8011840 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 801183a:	2320      	movs	r3, #32
 801183c:	617b      	str	r3, [r7, #20]
 801183e:	e006      	b.n	801184e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011842:	2b00      	cmp	r3, #0
 8011844:	d101      	bne.n	801184a <osMailGet+0xc6>
 8011846:	2300      	movs	r3, #0
 8011848:	e000      	b.n	801184c <osMailGet+0xc8>
 801184a:	2340      	movs	r3, #64	; 0x40
 801184c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	461c      	mov	r4, r3
 8011852:	f107 0314 	add.w	r3, r7, #20
 8011856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801185a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	372c      	adds	r7, #44	; 0x2c
 8011862:	46bd      	mov	sp, r7
 8011864:	bd90      	pop	{r4, r7, pc}
 8011866:	bf00      	nop
 8011868:	e000ed04 	.word	0xe000ed04

0801186c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d101      	bne.n	8011880 <osMailFree+0x14>
    return osErrorParameter;
 801187c:	2380      	movs	r3, #128	; 0x80
 801187e:	e006      	b.n	801188e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	689b      	ldr	r3, [r3, #8]
 8011884:	6839      	ldr	r1, [r7, #0]
 8011886:	4618      	mov	r0, r3
 8011888:	f7ff fdb2 	bl	80113f0 <osPoolFree>
 801188c:	4603      	mov	r3, r0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3708      	adds	r7, #8
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}

08011896 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b082      	sub	sp, #8
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f001 f994 	bl	8012bcc <vTaskSuspend>
  
  return osOK;
 80118a4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80118b8:	f7ff fb03 	bl	8010ec2 <inHandlerMode>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00e      	beq.n	80118e0 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f001 faa0 	bl	8012e08 <xTaskResumeFromISR>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d10b      	bne.n	80118e6 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80118ce:	4b08      	ldr	r3, [pc, #32]	; (80118f0 <osThreadResume+0x40>)
 80118d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118d4:	601a      	str	r2, [r3, #0]
 80118d6:	f3bf 8f4f 	dsb	sy
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	e002      	b.n	80118e6 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f001 fa35 	bl	8012d50 <vTaskResume>
  }
  return osOK;
 80118e6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	e000ed04 	.word	0xe000ed04

080118f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f103 0208 	add.w	r2, r3, #8
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f04f 32ff 	mov.w	r2, #4294967295
 801190c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f103 0208 	add.w	r2, r3, #8
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f103 0208 	add.w	r2, r3, #8
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011928:	bf00      	nop
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011942:	bf00      	nop
 8011944:	370c      	adds	r7, #12
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr

0801194e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801194e:	b480      	push	{r7}
 8011950:	b085      	sub	sp, #20
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
 8011956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	689a      	ldr	r2, [r3, #8]
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	689b      	ldr	r3, [r3, #8]
 8011970:	683a      	ldr	r2, [r7, #0]
 8011972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	683a      	ldr	r2, [r7, #0]
 8011978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	1c5a      	adds	r2, r3, #1
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	601a      	str	r2, [r3, #0]
}
 801198a:	bf00      	nop
 801198c:	3714      	adds	r7, #20
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011996:	b480      	push	{r7}
 8011998:	b085      	sub	sp, #20
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
 801199e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ac:	d103      	bne.n	80119b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	691b      	ldr	r3, [r3, #16]
 80119b2:	60fb      	str	r3, [r7, #12]
 80119b4:	e00c      	b.n	80119d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	3308      	adds	r3, #8
 80119ba:	60fb      	str	r3, [r7, #12]
 80119bc:	e002      	b.n	80119c4 <vListInsert+0x2e>
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	60fb      	str	r3, [r7, #12]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	68ba      	ldr	r2, [r7, #8]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d2f6      	bcs.n	80119be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	685a      	ldr	r2, [r3, #4]
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	683a      	ldr	r2, [r7, #0]
 80119de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	1c5a      	adds	r2, r3, #1
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	601a      	str	r2, [r3, #0]
}
 80119fc:	bf00      	nop
 80119fe:	3714      	adds	r7, #20
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b085      	sub	sp, #20
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	691b      	ldr	r3, [r3, #16]
 8011a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	6892      	ldr	r2, [r2, #8]
 8011a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	6852      	ldr	r2, [r2, #4]
 8011a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d103      	bne.n	8011a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	689a      	ldr	r2, [r3, #8]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	1e5a      	subs	r2, r3, #1
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3714      	adds	r7, #20
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d109      	bne.n	8011a84 <xQueueGenericReset+0x28>
	__asm volatile
 8011a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a74:	f383 8811 	msr	BASEPRI, r3
 8011a78:	f3bf 8f6f 	isb	sy
 8011a7c:	f3bf 8f4f 	dsb	sy
 8011a80:	60bb      	str	r3, [r7, #8]
 8011a82:	e7fe      	b.n	8011a82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011a84:	f002 fb82 	bl	801418c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a90:	68f9      	ldr	r1, [r7, #12]
 8011a92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a94:	fb01 f303 	mul.w	r3, r1, r3
 8011a98:	441a      	add	r2, r3
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	68f9      	ldr	r1, [r7, #12]
 8011ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011aba:	fb01 f303 	mul.w	r3, r1, r3
 8011abe:	441a      	add	r2, r3
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	22ff      	movs	r2, #255	; 0xff
 8011ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	22ff      	movs	r2, #255	; 0xff
 8011ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d114      	bne.n	8011b04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d01a      	beq.n	8011b18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	3310      	adds	r3, #16
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f001 fc5e 	bl	80133a8 <xTaskRemoveFromEventList>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d012      	beq.n	8011b18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011af2:	4b0d      	ldr	r3, [pc, #52]	; (8011b28 <xQueueGenericReset+0xcc>)
 8011af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011af8:	601a      	str	r2, [r3, #0]
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	e009      	b.n	8011b18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	3310      	adds	r3, #16
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff fef3 	bl	80118f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	3324      	adds	r3, #36	; 0x24
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7ff feee 	bl	80118f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b18:	f002 fb66 	bl	80141e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b1c:	2301      	movs	r3, #1
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	e000ed04 	.word	0xe000ed04

08011b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b08e      	sub	sp, #56	; 0x38
 8011b30:	af02      	add	r7, sp, #8
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	607a      	str	r2, [r7, #4]
 8011b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d109      	bne.n	8011b54 <xQueueGenericCreateStatic+0x28>
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b52:	e7fe      	b.n	8011b52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d109      	bne.n	8011b6e <xQueueGenericCreateStatic+0x42>
 8011b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5e:	f383 8811 	msr	BASEPRI, r3
 8011b62:	f3bf 8f6f 	isb	sy
 8011b66:	f3bf 8f4f 	dsb	sy
 8011b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8011b6c:	e7fe      	b.n	8011b6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d002      	beq.n	8011b7a <xQueueGenericCreateStatic+0x4e>
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d001      	beq.n	8011b7e <xQueueGenericCreateStatic+0x52>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e000      	b.n	8011b80 <xQueueGenericCreateStatic+0x54>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d109      	bne.n	8011b98 <xQueueGenericCreateStatic+0x6c>
 8011b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
 8011b94:	623b      	str	r3, [r7, #32]
 8011b96:	e7fe      	b.n	8011b96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d102      	bne.n	8011ba4 <xQueueGenericCreateStatic+0x78>
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d101      	bne.n	8011ba8 <xQueueGenericCreateStatic+0x7c>
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	e000      	b.n	8011baa <xQueueGenericCreateStatic+0x7e>
 8011ba8:	2300      	movs	r3, #0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d109      	bne.n	8011bc2 <xQueueGenericCreateStatic+0x96>
 8011bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	61fb      	str	r3, [r7, #28]
 8011bc0:	e7fe      	b.n	8011bc0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011bc2:	2348      	movs	r3, #72	; 0x48
 8011bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	2b48      	cmp	r3, #72	; 0x48
 8011bca:	d009      	beq.n	8011be0 <xQueueGenericCreateStatic+0xb4>
 8011bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd0:	f383 8811 	msr	BASEPRI, r3
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	61bb      	str	r3, [r7, #24]
 8011bde:	e7fe      	b.n	8011bde <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011be0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d00d      	beq.n	8011c08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011bf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfa:	9300      	str	r3, [sp, #0]
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	68b9      	ldr	r1, [r7, #8]
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f000 f844 	bl	8011c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3730      	adds	r7, #48	; 0x30
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b08a      	sub	sp, #40	; 0x28
 8011c16:	af02      	add	r7, sp, #8
 8011c18:	60f8      	str	r0, [r7, #12]
 8011c1a:	60b9      	str	r1, [r7, #8]
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d109      	bne.n	8011c3a <xQueueGenericCreate+0x28>
 8011c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2a:	f383 8811 	msr	BASEPRI, r3
 8011c2e:	f3bf 8f6f 	isb	sy
 8011c32:	f3bf 8f4f 	dsb	sy
 8011c36:	613b      	str	r3, [r7, #16]
 8011c38:	e7fe      	b.n	8011c38 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d102      	bne.n	8011c46 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011c40:	2300      	movs	r3, #0
 8011c42:	61fb      	str	r3, [r7, #28]
 8011c44:	e004      	b.n	8011c50 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	fb02 f303 	mul.w	r3, r2, r3
 8011c4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	3348      	adds	r3, #72	; 0x48
 8011c54:	4618      	mov	r0, r3
 8011c56:	f002 fbb3 	bl	80143c0 <pvPortMalloc>
 8011c5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011c5c:	69bb      	ldr	r3, [r7, #24]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d011      	beq.n	8011c86 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	3348      	adds	r3, #72	; 0x48
 8011c6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c74:	79fa      	ldrb	r2, [r7, #7]
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	697a      	ldr	r2, [r7, #20]
 8011c7e:	68b9      	ldr	r1, [r7, #8]
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f000 f805 	bl	8011c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c86:	69bb      	ldr	r3, [r7, #24]
	}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3720      	adds	r7, #32
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
 8011c9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d103      	bne.n	8011cac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	69ba      	ldr	r2, [r7, #24]
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	e002      	b.n	8011cb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	68ba      	ldr	r2, [r7, #8]
 8011cbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011cbe:	2101      	movs	r1, #1
 8011cc0:	69b8      	ldr	r0, [r7, #24]
 8011cc2:	f7ff fecb 	bl	8011a5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011cc6:	bf00      	nop
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
	...

08011cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08e      	sub	sp, #56	; 0x38
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
 8011cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d109      	bne.n	8011d00 <xQueueGenericSend+0x30>
 8011cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cfe:	e7fe      	b.n	8011cfe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d103      	bne.n	8011d0e <xQueueGenericSend+0x3e>
 8011d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d101      	bne.n	8011d12 <xQueueGenericSend+0x42>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e000      	b.n	8011d14 <xQueueGenericSend+0x44>
 8011d12:	2300      	movs	r3, #0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d109      	bne.n	8011d2c <xQueueGenericSend+0x5c>
 8011d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1c:	f383 8811 	msr	BASEPRI, r3
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	f3bf 8f4f 	dsb	sy
 8011d28:	627b      	str	r3, [r7, #36]	; 0x24
 8011d2a:	e7fe      	b.n	8011d2a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d103      	bne.n	8011d3a <xQueueGenericSend+0x6a>
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d101      	bne.n	8011d3e <xQueueGenericSend+0x6e>
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	e000      	b.n	8011d40 <xQueueGenericSend+0x70>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d109      	bne.n	8011d58 <xQueueGenericSend+0x88>
 8011d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d48:	f383 8811 	msr	BASEPRI, r3
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	623b      	str	r3, [r7, #32]
 8011d56:	e7fe      	b.n	8011d56 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d58:	f001 fcdc 	bl	8013714 <xTaskGetSchedulerState>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d102      	bne.n	8011d68 <xQueueGenericSend+0x98>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d101      	bne.n	8011d6c <xQueueGenericSend+0x9c>
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e000      	b.n	8011d6e <xQueueGenericSend+0x9e>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d109      	bne.n	8011d86 <xQueueGenericSend+0xb6>
 8011d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d76:	f383 8811 	msr	BASEPRI, r3
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	61fb      	str	r3, [r7, #28]
 8011d84:	e7fe      	b.n	8011d84 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d86:	f002 fa01 	bl	801418c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d302      	bcc.n	8011d9c <xQueueGenericSend+0xcc>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b02      	cmp	r3, #2
 8011d9a:	d129      	bne.n	8011df0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d9c:	683a      	ldr	r2, [r7, #0]
 8011d9e:	68b9      	ldr	r1, [r7, #8]
 8011da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011da2:	f000 fc48 	bl	8012636 <prvCopyDataToQueue>
 8011da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d010      	beq.n	8011dd2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db2:	3324      	adds	r3, #36	; 0x24
 8011db4:	4618      	mov	r0, r3
 8011db6:	f001 faf7 	bl	80133a8 <xTaskRemoveFromEventList>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d013      	beq.n	8011de8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011dc0:	4b3f      	ldr	r3, [pc, #252]	; (8011ec0 <xQueueGenericSend+0x1f0>)
 8011dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dc6:	601a      	str	r2, [r3, #0]
 8011dc8:	f3bf 8f4f 	dsb	sy
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	e00a      	b.n	8011de8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d007      	beq.n	8011de8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011dd8:	4b39      	ldr	r3, [pc, #228]	; (8011ec0 <xQueueGenericSend+0x1f0>)
 8011dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dde:	601a      	str	r2, [r3, #0]
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011de8:	f002 f9fe 	bl	80141e8 <vPortExitCritical>
				return pdPASS;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e063      	b.n	8011eb8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d103      	bne.n	8011dfe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011df6:	f002 f9f7 	bl	80141e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e05c      	b.n	8011eb8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d106      	bne.n	8011e12 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e04:	f107 0314 	add.w	r3, r7, #20
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f001 fb2f 	bl	801346c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e0e:	2301      	movs	r3, #1
 8011e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e12:	f002 f9e9 	bl	80141e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e16:	f001 f8c5 	bl	8012fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e1a:	f002 f9b7 	bl	801418c <vPortEnterCritical>
 8011e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e24:	b25b      	sxtb	r3, r3
 8011e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2a:	d103      	bne.n	8011e34 <xQueueGenericSend+0x164>
 8011e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e3a:	b25b      	sxtb	r3, r3
 8011e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e40:	d103      	bne.n	8011e4a <xQueueGenericSend+0x17a>
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	2200      	movs	r2, #0
 8011e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e4a:	f002 f9cd 	bl	80141e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e4e:	1d3a      	adds	r2, r7, #4
 8011e50:	f107 0314 	add.w	r3, r7, #20
 8011e54:	4611      	mov	r1, r2
 8011e56:	4618      	mov	r0, r3
 8011e58:	f001 fb1e 	bl	8013498 <xTaskCheckForTimeOut>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d124      	bne.n	8011eac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e64:	f000 fcdf 	bl	8012826 <prvIsQueueFull>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d018      	beq.n	8011ea0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e70:	3310      	adds	r3, #16
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	4611      	mov	r1, r2
 8011e76:	4618      	mov	r0, r3
 8011e78:	f001 fa72 	bl	8013360 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e7e:	f000 fc6a 	bl	8012756 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011e82:	f001 f89d 	bl	8012fc0 <xTaskResumeAll>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f47f af7c 	bne.w	8011d86 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011e8e:	4b0c      	ldr	r3, [pc, #48]	; (8011ec0 <xQueueGenericSend+0x1f0>)
 8011e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e94:	601a      	str	r2, [r3, #0]
 8011e96:	f3bf 8f4f 	dsb	sy
 8011e9a:	f3bf 8f6f 	isb	sy
 8011e9e:	e772      	b.n	8011d86 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ea2:	f000 fc58 	bl	8012756 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ea6:	f001 f88b 	bl	8012fc0 <xTaskResumeAll>
 8011eaa:	e76c      	b.n	8011d86 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eae:	f000 fc52 	bl	8012756 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011eb2:	f001 f885 	bl	8012fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3738      	adds	r7, #56	; 0x38
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	e000ed04 	.word	0xe000ed04

08011ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b08e      	sub	sp, #56	; 0x38
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
 8011ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d109      	bne.n	8011ef0 <xQueueGenericSendFromISR+0x2c>
 8011edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee0:	f383 8811 	msr	BASEPRI, r3
 8011ee4:	f3bf 8f6f 	isb	sy
 8011ee8:	f3bf 8f4f 	dsb	sy
 8011eec:	627b      	str	r3, [r7, #36]	; 0x24
 8011eee:	e7fe      	b.n	8011eee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d103      	bne.n	8011efe <xQueueGenericSendFromISR+0x3a>
 8011ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d101      	bne.n	8011f02 <xQueueGenericSendFromISR+0x3e>
 8011efe:	2301      	movs	r3, #1
 8011f00:	e000      	b.n	8011f04 <xQueueGenericSendFromISR+0x40>
 8011f02:	2300      	movs	r3, #0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d109      	bne.n	8011f1c <xQueueGenericSendFromISR+0x58>
 8011f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0c:	f383 8811 	msr	BASEPRI, r3
 8011f10:	f3bf 8f6f 	isb	sy
 8011f14:	f3bf 8f4f 	dsb	sy
 8011f18:	623b      	str	r3, [r7, #32]
 8011f1a:	e7fe      	b.n	8011f1a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	d103      	bne.n	8011f2a <xQueueGenericSendFromISR+0x66>
 8011f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d101      	bne.n	8011f2e <xQueueGenericSendFromISR+0x6a>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e000      	b.n	8011f30 <xQueueGenericSendFromISR+0x6c>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d109      	bne.n	8011f48 <xQueueGenericSendFromISR+0x84>
 8011f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f38:	f383 8811 	msr	BASEPRI, r3
 8011f3c:	f3bf 8f6f 	isb	sy
 8011f40:	f3bf 8f4f 	dsb	sy
 8011f44:	61fb      	str	r3, [r7, #28]
 8011f46:	e7fe      	b.n	8011f46 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f48:	f002 f9fc 	bl	8014344 <vPortValidateInterruptPriority>
	__asm volatile
 8011f4c:	f3ef 8211 	mrs	r2, BASEPRI
 8011f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f54:	f383 8811 	msr	BASEPRI, r3
 8011f58:	f3bf 8f6f 	isb	sy
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	61ba      	str	r2, [r7, #24]
 8011f62:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011f64:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d302      	bcc.n	8011f7a <xQueueGenericSendFromISR+0xb6>
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	2b02      	cmp	r3, #2
 8011f78:	d12c      	bne.n	8011fd4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	68b9      	ldr	r1, [r7, #8]
 8011f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f8a:	f000 fb54 	bl	8012636 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011f8e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f96:	d112      	bne.n	8011fbe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d016      	beq.n	8011fce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa2:	3324      	adds	r3, #36	; 0x24
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f001 f9ff 	bl	80133a8 <xTaskRemoveFromEventList>
 8011faa:	4603      	mov	r3, r0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00e      	beq.n	8011fce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00b      	beq.n	8011fce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	601a      	str	r2, [r3, #0]
 8011fbc:	e007      	b.n	8011fce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	b25a      	sxtb	r2, r3
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011fd2:	e001      	b.n	8011fd8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3738      	adds	r7, #56	; 0x38
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08e      	sub	sp, #56	; 0x38
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d109      	bne.n	8012014 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012004:	f383 8811 	msr	BASEPRI, r3
 8012008:	f3bf 8f6f 	isb	sy
 801200c:	f3bf 8f4f 	dsb	sy
 8012010:	623b      	str	r3, [r7, #32]
 8012012:	e7fe      	b.n	8012012 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012018:	2b00      	cmp	r3, #0
 801201a:	d009      	beq.n	8012030 <xQueueGiveFromISR+0x44>
 801201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	61fb      	str	r3, [r7, #28]
 801202e:	e7fe      	b.n	801202e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d103      	bne.n	8012040 <xQueueGiveFromISR+0x54>
 8012038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d101      	bne.n	8012044 <xQueueGiveFromISR+0x58>
 8012040:	2301      	movs	r3, #1
 8012042:	e000      	b.n	8012046 <xQueueGiveFromISR+0x5a>
 8012044:	2300      	movs	r3, #0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d109      	bne.n	801205e <xQueueGiveFromISR+0x72>
 801204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204e:	f383 8811 	msr	BASEPRI, r3
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	f3bf 8f4f 	dsb	sy
 801205a:	61bb      	str	r3, [r7, #24]
 801205c:	e7fe      	b.n	801205c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801205e:	f002 f971 	bl	8014344 <vPortValidateInterruptPriority>
	__asm volatile
 8012062:	f3ef 8211 	mrs	r2, BASEPRI
 8012066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801206a:	f383 8811 	msr	BASEPRI, r3
 801206e:	f3bf 8f6f 	isb	sy
 8012072:	f3bf 8f4f 	dsb	sy
 8012076:	617a      	str	r2, [r7, #20]
 8012078:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801207a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801207c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012082:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801208a:	429a      	cmp	r2, r3
 801208c:	d22b      	bcs.n	80120e6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a8:	d112      	bne.n	80120d0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d016      	beq.n	80120e0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b4:	3324      	adds	r3, #36	; 0x24
 80120b6:	4618      	mov	r0, r3
 80120b8:	f001 f976 	bl	80133a8 <xTaskRemoveFromEventList>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00e      	beq.n	80120e0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00b      	beq.n	80120e0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	2201      	movs	r2, #1
 80120cc:	601a      	str	r2, [r3, #0]
 80120ce:	e007      	b.n	80120e0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80120d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120d4:	3301      	adds	r3, #1
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	b25a      	sxtb	r2, r3
 80120da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80120e0:	2301      	movs	r3, #1
 80120e2:	637b      	str	r3, [r7, #52]	; 0x34
 80120e4:	e001      	b.n	80120ea <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80120e6:	2300      	movs	r3, #0
 80120e8:	637b      	str	r3, [r7, #52]	; 0x34
 80120ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3738      	adds	r7, #56	; 0x38
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
	...

08012100 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b08c      	sub	sp, #48	; 0x30
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801210c:	2300      	movs	r3, #0
 801210e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012116:	2b00      	cmp	r3, #0
 8012118:	d109      	bne.n	801212e <xQueueReceive+0x2e>
	__asm volatile
 801211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211e:	f383 8811 	msr	BASEPRI, r3
 8012122:	f3bf 8f6f 	isb	sy
 8012126:	f3bf 8f4f 	dsb	sy
 801212a:	623b      	str	r3, [r7, #32]
 801212c:	e7fe      	b.n	801212c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d103      	bne.n	801213c <xQueueReceive+0x3c>
 8012134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012138:	2b00      	cmp	r3, #0
 801213a:	d101      	bne.n	8012140 <xQueueReceive+0x40>
 801213c:	2301      	movs	r3, #1
 801213e:	e000      	b.n	8012142 <xQueueReceive+0x42>
 8012140:	2300      	movs	r3, #0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d109      	bne.n	801215a <xQueueReceive+0x5a>
 8012146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214a:	f383 8811 	msr	BASEPRI, r3
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	f3bf 8f4f 	dsb	sy
 8012156:	61fb      	str	r3, [r7, #28]
 8012158:	e7fe      	b.n	8012158 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801215a:	f001 fadb 	bl	8013714 <xTaskGetSchedulerState>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d102      	bne.n	801216a <xQueueReceive+0x6a>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <xQueueReceive+0x6e>
 801216a:	2301      	movs	r3, #1
 801216c:	e000      	b.n	8012170 <xQueueReceive+0x70>
 801216e:	2300      	movs	r3, #0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d109      	bne.n	8012188 <xQueueReceive+0x88>
 8012174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012178:	f383 8811 	msr	BASEPRI, r3
 801217c:	f3bf 8f6f 	isb	sy
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	61bb      	str	r3, [r7, #24]
 8012186:	e7fe      	b.n	8012186 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012188:	f002 f800 	bl	801418c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012190:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012194:	2b00      	cmp	r3, #0
 8012196:	d01f      	beq.n	80121d8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012198:	68b9      	ldr	r1, [r7, #8]
 801219a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801219c:	f000 fab5 	bl	801270a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a2:	1e5a      	subs	r2, r3, #1
 80121a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121aa:	691b      	ldr	r3, [r3, #16]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00f      	beq.n	80121d0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	3310      	adds	r3, #16
 80121b4:	4618      	mov	r0, r3
 80121b6:	f001 f8f7 	bl	80133a8 <xTaskRemoveFromEventList>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d007      	beq.n	80121d0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80121c0:	4b3c      	ldr	r3, [pc, #240]	; (80122b4 <xQueueReceive+0x1b4>)
 80121c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121c6:	601a      	str	r2, [r3, #0]
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80121d0:	f002 f80a 	bl	80141e8 <vPortExitCritical>
				return pdPASS;
 80121d4:	2301      	movs	r3, #1
 80121d6:	e069      	b.n	80122ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d103      	bne.n	80121e6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80121de:	f002 f803 	bl	80141e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80121e2:	2300      	movs	r3, #0
 80121e4:	e062      	b.n	80122ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d106      	bne.n	80121fa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121ec:	f107 0310 	add.w	r3, r7, #16
 80121f0:	4618      	mov	r0, r3
 80121f2:	f001 f93b 	bl	801346c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80121f6:	2301      	movs	r3, #1
 80121f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80121fa:	f001 fff5 	bl	80141e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121fe:	f000 fed1 	bl	8012fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012202:	f001 ffc3 	bl	801418c <vPortEnterCritical>
 8012206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801220c:	b25b      	sxtb	r3, r3
 801220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012212:	d103      	bne.n	801221c <xQueueReceive+0x11c>
 8012214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012216:	2200      	movs	r2, #0
 8012218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012222:	b25b      	sxtb	r3, r3
 8012224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012228:	d103      	bne.n	8012232 <xQueueReceive+0x132>
 801222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222c:	2200      	movs	r2, #0
 801222e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012232:	f001 ffd9 	bl	80141e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012236:	1d3a      	adds	r2, r7, #4
 8012238:	f107 0310 	add.w	r3, r7, #16
 801223c:	4611      	mov	r1, r2
 801223e:	4618      	mov	r0, r3
 8012240:	f001 f92a 	bl	8013498 <xTaskCheckForTimeOut>
 8012244:	4603      	mov	r3, r0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d123      	bne.n	8012292 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801224a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801224c:	f000 fad5 	bl	80127fa <prvIsQueueEmpty>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d017      	beq.n	8012286 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012258:	3324      	adds	r3, #36	; 0x24
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	4611      	mov	r1, r2
 801225e:	4618      	mov	r0, r3
 8012260:	f001 f87e 	bl	8013360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012266:	f000 fa76 	bl	8012756 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801226a:	f000 fea9 	bl	8012fc0 <xTaskResumeAll>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d189      	bne.n	8012188 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012274:	4b0f      	ldr	r3, [pc, #60]	; (80122b4 <xQueueReceive+0x1b4>)
 8012276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801227a:	601a      	str	r2, [r3, #0]
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	f3bf 8f6f 	isb	sy
 8012284:	e780      	b.n	8012188 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012288:	f000 fa65 	bl	8012756 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801228c:	f000 fe98 	bl	8012fc0 <xTaskResumeAll>
 8012290:	e77a      	b.n	8012188 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012294:	f000 fa5f 	bl	8012756 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012298:	f000 fe92 	bl	8012fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801229c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801229e:	f000 faac 	bl	80127fa <prvIsQueueEmpty>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f43f af6f 	beq.w	8012188 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3730      	adds	r7, #48	; 0x30
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	e000ed04 	.word	0xe000ed04

080122b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b08e      	sub	sp, #56	; 0x38
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80122c2:	2300      	movs	r3, #0
 80122c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80122ca:	2300      	movs	r3, #0
 80122cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d109      	bne.n	80122e8 <xQueueSemaphoreTake+0x30>
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	623b      	str	r3, [r7, #32]
 80122e6:	e7fe      	b.n	80122e6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80122e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <xQueueSemaphoreTake+0x4c>
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	61fb      	str	r3, [r7, #28]
 8012302:	e7fe      	b.n	8012302 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012304:	f001 fa06 	bl	8013714 <xTaskGetSchedulerState>
 8012308:	4603      	mov	r3, r0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d102      	bne.n	8012314 <xQueueSemaphoreTake+0x5c>
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d101      	bne.n	8012318 <xQueueSemaphoreTake+0x60>
 8012314:	2301      	movs	r3, #1
 8012316:	e000      	b.n	801231a <xQueueSemaphoreTake+0x62>
 8012318:	2300      	movs	r3, #0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d109      	bne.n	8012332 <xQueueSemaphoreTake+0x7a>
 801231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012322:	f383 8811 	msr	BASEPRI, r3
 8012326:	f3bf 8f6f 	isb	sy
 801232a:	f3bf 8f4f 	dsb	sy
 801232e:	61bb      	str	r3, [r7, #24]
 8012330:	e7fe      	b.n	8012330 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012332:	f001 ff2b 	bl	801418c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801233a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233e:	2b00      	cmp	r3, #0
 8012340:	d024      	beq.n	801238c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012344:	1e5a      	subs	r2, r3, #1
 8012346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012348:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d104      	bne.n	801235c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012352:	f001 fb99 	bl	8013a88 <pvTaskIncrementMutexHeldCount>
 8012356:	4602      	mov	r2, r0
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	691b      	ldr	r3, [r3, #16]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00f      	beq.n	8012384 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012366:	3310      	adds	r3, #16
 8012368:	4618      	mov	r0, r3
 801236a:	f001 f81d 	bl	80133a8 <xTaskRemoveFromEventList>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d007      	beq.n	8012384 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012374:	4b53      	ldr	r3, [pc, #332]	; (80124c4 <xQueueSemaphoreTake+0x20c>)
 8012376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012384:	f001 ff30 	bl	80141e8 <vPortExitCritical>
				return pdPASS;
 8012388:	2301      	movs	r3, #1
 801238a:	e096      	b.n	80124ba <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d110      	bne.n	80123b4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	2b00      	cmp	r3, #0
 8012396:	d009      	beq.n	80123ac <xQueueSemaphoreTake+0xf4>
 8012398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801239c:	f383 8811 	msr	BASEPRI, r3
 80123a0:	f3bf 8f6f 	isb	sy
 80123a4:	f3bf 8f4f 	dsb	sy
 80123a8:	617b      	str	r3, [r7, #20]
 80123aa:	e7fe      	b.n	80123aa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80123ac:	f001 ff1c 	bl	80141e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123b0:	2300      	movs	r3, #0
 80123b2:	e082      	b.n	80124ba <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123ba:	f107 030c 	add.w	r3, r7, #12
 80123be:	4618      	mov	r0, r3
 80123c0:	f001 f854 	bl	801346c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123c4:	2301      	movs	r3, #1
 80123c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123c8:	f001 ff0e 	bl	80141e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123cc:	f000 fdea 	bl	8012fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123d0:	f001 fedc 	bl	801418c <vPortEnterCritical>
 80123d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123da:	b25b      	sxtb	r3, r3
 80123dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e0:	d103      	bne.n	80123ea <xQueueSemaphoreTake+0x132>
 80123e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e4:	2200      	movs	r2, #0
 80123e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123f0:	b25b      	sxtb	r3, r3
 80123f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f6:	d103      	bne.n	8012400 <xQueueSemaphoreTake+0x148>
 80123f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fa:	2200      	movs	r2, #0
 80123fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012400:	f001 fef2 	bl	80141e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012404:	463a      	mov	r2, r7
 8012406:	f107 030c 	add.w	r3, r7, #12
 801240a:	4611      	mov	r1, r2
 801240c:	4618      	mov	r0, r3
 801240e:	f001 f843 	bl	8013498 <xTaskCheckForTimeOut>
 8012412:	4603      	mov	r3, r0
 8012414:	2b00      	cmp	r3, #0
 8012416:	d132      	bne.n	801247e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801241a:	f000 f9ee 	bl	80127fa <prvIsQueueEmpty>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d026      	beq.n	8012472 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d109      	bne.n	8012440 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801242c:	f001 feae 	bl	801418c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	4618      	mov	r0, r3
 8012436:	f001 f98b 	bl	8013750 <xTaskPriorityInherit>
 801243a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801243c:	f001 fed4 	bl	80141e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	3324      	adds	r3, #36	; 0x24
 8012444:	683a      	ldr	r2, [r7, #0]
 8012446:	4611      	mov	r1, r2
 8012448:	4618      	mov	r0, r3
 801244a:	f000 ff89 	bl	8013360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801244e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012450:	f000 f981 	bl	8012756 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012454:	f000 fdb4 	bl	8012fc0 <xTaskResumeAll>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	f47f af69 	bne.w	8012332 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012460:	4b18      	ldr	r3, [pc, #96]	; (80124c4 <xQueueSemaphoreTake+0x20c>)
 8012462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012466:	601a      	str	r2, [r3, #0]
 8012468:	f3bf 8f4f 	dsb	sy
 801246c:	f3bf 8f6f 	isb	sy
 8012470:	e75f      	b.n	8012332 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012474:	f000 f96f 	bl	8012756 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012478:	f000 fda2 	bl	8012fc0 <xTaskResumeAll>
 801247c:	e759      	b.n	8012332 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801247e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012480:	f000 f969 	bl	8012756 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012484:	f000 fd9c 	bl	8012fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801248a:	f000 f9b6 	bl	80127fa <prvIsQueueEmpty>
 801248e:	4603      	mov	r3, r0
 8012490:	2b00      	cmp	r3, #0
 8012492:	f43f af4e 	beq.w	8012332 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00d      	beq.n	80124b8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801249c:	f001 fe76 	bl	801418c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124a2:	f000 f8b0 	bl	8012606 <prvGetDisinheritPriorityAfterTimeout>
 80124a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80124a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124aa:	689b      	ldr	r3, [r3, #8]
 80124ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124ae:	4618      	mov	r0, r3
 80124b0:	f001 fa52 	bl	8013958 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80124b4:	f001 fe98 	bl	80141e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80124b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3738      	adds	r7, #56	; 0x38
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop
 80124c4:	e000ed04 	.word	0xe000ed04

080124c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b08e      	sub	sp, #56	; 0x38
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80124d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d109      	bne.n	80124f2 <xQueueReceiveFromISR+0x2a>
 80124de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e2:	f383 8811 	msr	BASEPRI, r3
 80124e6:	f3bf 8f6f 	isb	sy
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	623b      	str	r3, [r7, #32]
 80124f0:	e7fe      	b.n	80124f0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d103      	bne.n	8012500 <xQueueReceiveFromISR+0x38>
 80124f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d101      	bne.n	8012504 <xQueueReceiveFromISR+0x3c>
 8012500:	2301      	movs	r3, #1
 8012502:	e000      	b.n	8012506 <xQueueReceiveFromISR+0x3e>
 8012504:	2300      	movs	r3, #0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d109      	bne.n	801251e <xQueueReceiveFromISR+0x56>
 801250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250e:	f383 8811 	msr	BASEPRI, r3
 8012512:	f3bf 8f6f 	isb	sy
 8012516:	f3bf 8f4f 	dsb	sy
 801251a:	61fb      	str	r3, [r7, #28]
 801251c:	e7fe      	b.n	801251c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801251e:	f001 ff11 	bl	8014344 <vPortValidateInterruptPriority>
	__asm volatile
 8012522:	f3ef 8211 	mrs	r2, BASEPRI
 8012526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252a:	f383 8811 	msr	BASEPRI, r3
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f3bf 8f4f 	dsb	sy
 8012536:	61ba      	str	r2, [r7, #24]
 8012538:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801253a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801253c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012542:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	2b00      	cmp	r3, #0
 8012548:	d02f      	beq.n	80125aa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012558:	f000 f8d7 	bl	801270a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255e:	1e5a      	subs	r2, r3, #1
 8012560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012562:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256c:	d112      	bne.n	8012594 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d016      	beq.n	80125a4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012578:	3310      	adds	r3, #16
 801257a:	4618      	mov	r0, r3
 801257c:	f000 ff14 	bl	80133a8 <xTaskRemoveFromEventList>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00e      	beq.n	80125a4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00b      	beq.n	80125a4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2201      	movs	r2, #1
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	e007      	b.n	80125a4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012598:	3301      	adds	r3, #1
 801259a:	b2db      	uxtb	r3, r3
 801259c:	b25a      	sxtb	r2, r3
 801259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80125a4:	2301      	movs	r3, #1
 80125a6:	637b      	str	r3, [r7, #52]	; 0x34
 80125a8:	e001      	b.n	80125ae <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80125aa:	2300      	movs	r3, #0
 80125ac:	637b      	str	r3, [r7, #52]	; 0x34
 80125ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3738      	adds	r7, #56	; 0x38
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}

080125c2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b084      	sub	sp, #16
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d109      	bne.n	80125e8 <vQueueDelete+0x26>
	__asm volatile
 80125d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d8:	f383 8811 	msr	BASEPRI, r3
 80125dc:	f3bf 8f6f 	isb	sy
 80125e0:	f3bf 8f4f 	dsb	sy
 80125e4:	60bb      	str	r3, [r7, #8]
 80125e6:	e7fe      	b.n	80125e6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f000 f935 	bl	8012858 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d102      	bne.n	80125fe <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f001 ffa3 	bl	8014544 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80125fe:	bf00      	nop
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012606:	b480      	push	{r7}
 8012608:	b085      	sub	sp, #20
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012612:	2b00      	cmp	r3, #0
 8012614:	d006      	beq.n	8012624 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f1c3 0307 	rsb	r3, r3, #7
 8012620:	60fb      	str	r3, [r7, #12]
 8012622:	e001      	b.n	8012628 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012624:	2300      	movs	r3, #0
 8012626:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012628:	68fb      	ldr	r3, [r7, #12]
	}
 801262a:	4618      	mov	r0, r3
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr

08012636 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012636:	b580      	push	{r7, lr}
 8012638:	b086      	sub	sp, #24
 801263a:	af00      	add	r7, sp, #0
 801263c:	60f8      	str	r0, [r7, #12]
 801263e:	60b9      	str	r1, [r7, #8]
 8012640:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012642:	2300      	movs	r3, #0
 8012644:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801264a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012650:	2b00      	cmp	r3, #0
 8012652:	d10d      	bne.n	8012670 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d14d      	bne.n	80126f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	4618      	mov	r0, r3
 8012662:	f001 f8f5 	bl	8013850 <xTaskPriorityDisinherit>
 8012666:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2200      	movs	r2, #0
 801266c:	609a      	str	r2, [r3, #8]
 801266e:	e043      	b.n	80126f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d119      	bne.n	80126aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	6858      	ldr	r0, [r3, #4]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801267e:	461a      	mov	r2, r3
 8012680:	68b9      	ldr	r1, [r7, #8]
 8012682:	f002 f89d 	bl	80147c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	685a      	ldr	r2, [r3, #4]
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801268e:	441a      	add	r2, r3
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	685a      	ldr	r2, [r3, #4]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	689b      	ldr	r3, [r3, #8]
 801269c:	429a      	cmp	r2, r3
 801269e:	d32b      	bcc.n	80126f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	605a      	str	r2, [r3, #4]
 80126a8:	e026      	b.n	80126f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	68d8      	ldr	r0, [r3, #12]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126b2:	461a      	mov	r2, r3
 80126b4:	68b9      	ldr	r1, [r7, #8]
 80126b6:	f002 f883 	bl	80147c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	68da      	ldr	r2, [r3, #12]
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126c2:	425b      	negs	r3, r3
 80126c4:	441a      	add	r2, r3
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	68da      	ldr	r2, [r3, #12]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d207      	bcs.n	80126e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	689a      	ldr	r2, [r3, #8]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126de:	425b      	negs	r3, r3
 80126e0:	441a      	add	r2, r3
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d105      	bne.n	80126f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d002      	beq.n	80126f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	3b01      	subs	r3, #1
 80126f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	1c5a      	adds	r2, r3, #1
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012700:	697b      	ldr	r3, [r7, #20]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b082      	sub	sp, #8
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012718:	2b00      	cmp	r3, #0
 801271a:	d018      	beq.n	801274e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	68da      	ldr	r2, [r3, #12]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012724:	441a      	add	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	68da      	ldr	r2, [r3, #12]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	689b      	ldr	r3, [r3, #8]
 8012732:	429a      	cmp	r2, r3
 8012734:	d303      	bcc.n	801273e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	68d9      	ldr	r1, [r3, #12]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012746:	461a      	mov	r2, r3
 8012748:	6838      	ldr	r0, [r7, #0]
 801274a:	f002 f839 	bl	80147c0 <memcpy>
	}
}
 801274e:	bf00      	nop
 8012750:	3708      	adds	r7, #8
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012756:	b580      	push	{r7, lr}
 8012758:	b084      	sub	sp, #16
 801275a:	af00      	add	r7, sp, #0
 801275c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801275e:	f001 fd15 	bl	801418c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012768:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801276a:	e011      	b.n	8012790 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012770:	2b00      	cmp	r3, #0
 8012772:	d012      	beq.n	801279a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	3324      	adds	r3, #36	; 0x24
 8012778:	4618      	mov	r0, r3
 801277a:	f000 fe15 	bl	80133a8 <xTaskRemoveFromEventList>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d001      	beq.n	8012788 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012784:	f000 fee8 	bl	8013558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	3b01      	subs	r3, #1
 801278c:	b2db      	uxtb	r3, r3
 801278e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dce9      	bgt.n	801276c <prvUnlockQueue+0x16>
 8012798:	e000      	b.n	801279c <prvUnlockQueue+0x46>
					break;
 801279a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	22ff      	movs	r2, #255	; 0xff
 80127a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80127a4:	f001 fd20 	bl	80141e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80127a8:	f001 fcf0 	bl	801418c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127b4:	e011      	b.n	80127da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	691b      	ldr	r3, [r3, #16]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d012      	beq.n	80127e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	3310      	adds	r3, #16
 80127c2:	4618      	mov	r0, r3
 80127c4:	f000 fdf0 	bl	80133a8 <xTaskRemoveFromEventList>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d001      	beq.n	80127d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80127ce:	f000 fec3 	bl	8013558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80127d2:	7bbb      	ldrb	r3, [r7, #14]
 80127d4:	3b01      	subs	r3, #1
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	dce9      	bgt.n	80127b6 <prvUnlockQueue+0x60>
 80127e2:	e000      	b.n	80127e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80127e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	22ff      	movs	r2, #255	; 0xff
 80127ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80127ee:	f001 fcfb 	bl	80141e8 <vPortExitCritical>
}
 80127f2:	bf00      	nop
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b084      	sub	sp, #16
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012802:	f001 fcc3 	bl	801418c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801280a:	2b00      	cmp	r3, #0
 801280c:	d102      	bne.n	8012814 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801280e:	2301      	movs	r3, #1
 8012810:	60fb      	str	r3, [r7, #12]
 8012812:	e001      	b.n	8012818 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012814:	2300      	movs	r3, #0
 8012816:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012818:	f001 fce6 	bl	80141e8 <vPortExitCritical>

	return xReturn;
 801281c:	68fb      	ldr	r3, [r7, #12]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012826:	b580      	push	{r7, lr}
 8012828:	b084      	sub	sp, #16
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801282e:	f001 fcad 	bl	801418c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801283a:	429a      	cmp	r2, r3
 801283c:	d102      	bne.n	8012844 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801283e:	2301      	movs	r3, #1
 8012840:	60fb      	str	r3, [r7, #12]
 8012842:	e001      	b.n	8012848 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012844:	2300      	movs	r3, #0
 8012846:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012848:	f001 fcce 	bl	80141e8 <vPortExitCritical>

	return xReturn;
 801284c:	68fb      	ldr	r3, [r7, #12]
}
 801284e:	4618      	mov	r0, r3
 8012850:	3710      	adds	r7, #16
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
	...

08012858 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012858:	b480      	push	{r7}
 801285a:	b085      	sub	sp, #20
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012860:	2300      	movs	r3, #0
 8012862:	60fb      	str	r3, [r7, #12]
 8012864:	e016      	b.n	8012894 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012866:	4a10      	ldr	r2, [pc, #64]	; (80128a8 <vQueueUnregisterQueue+0x50>)
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	00db      	lsls	r3, r3, #3
 801286c:	4413      	add	r3, r2
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	429a      	cmp	r2, r3
 8012874:	d10b      	bne.n	801288e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012876:	4a0c      	ldr	r2, [pc, #48]	; (80128a8 <vQueueUnregisterQueue+0x50>)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2100      	movs	r1, #0
 801287c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012880:	4a09      	ldr	r2, [pc, #36]	; (80128a8 <vQueueUnregisterQueue+0x50>)
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	00db      	lsls	r3, r3, #3
 8012886:	4413      	add	r3, r2
 8012888:	2200      	movs	r2, #0
 801288a:	605a      	str	r2, [r3, #4]
				break;
 801288c:	e005      	b.n	801289a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	3301      	adds	r3, #1
 8012892:	60fb      	str	r3, [r7, #12]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	2b07      	cmp	r3, #7
 8012898:	d9e5      	bls.n	8012866 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801289a:	bf00      	nop
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr
 80128a6:	bf00      	nop
 80128a8:	24070fa0 	.word	0x24070fa0

080128ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b08e      	sub	sp, #56	; 0x38
 80128b0:	af04      	add	r7, sp, #16
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
 80128b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80128ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d109      	bne.n	80128d4 <xTaskCreateStatic+0x28>
 80128c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c4:	f383 8811 	msr	BASEPRI, r3
 80128c8:	f3bf 8f6f 	isb	sy
 80128cc:	f3bf 8f4f 	dsb	sy
 80128d0:	623b      	str	r3, [r7, #32]
 80128d2:	e7fe      	b.n	80128d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80128d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d109      	bne.n	80128ee <xTaskCreateStatic+0x42>
 80128da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128de:	f383 8811 	msr	BASEPRI, r3
 80128e2:	f3bf 8f6f 	isb	sy
 80128e6:	f3bf 8f4f 	dsb	sy
 80128ea:	61fb      	str	r3, [r7, #28]
 80128ec:	e7fe      	b.n	80128ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80128ee:	2354      	movs	r3, #84	; 0x54
 80128f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	2b54      	cmp	r3, #84	; 0x54
 80128f6:	d009      	beq.n	801290c <xTaskCreateStatic+0x60>
 80128f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fc:	f383 8811 	msr	BASEPRI, r3
 8012900:	f3bf 8f6f 	isb	sy
 8012904:	f3bf 8f4f 	dsb	sy
 8012908:	61bb      	str	r3, [r7, #24]
 801290a:	e7fe      	b.n	801290a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801290c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012910:	2b00      	cmp	r3, #0
 8012912:	d01e      	beq.n	8012952 <xTaskCreateStatic+0xa6>
 8012914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012916:	2b00      	cmp	r3, #0
 8012918:	d01b      	beq.n	8012952 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012922:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012926:	2202      	movs	r2, #2
 8012928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801292c:	2300      	movs	r3, #0
 801292e:	9303      	str	r3, [sp, #12]
 8012930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012932:	9302      	str	r3, [sp, #8]
 8012934:	f107 0314 	add.w	r3, r7, #20
 8012938:	9301      	str	r3, [sp, #4]
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	9300      	str	r3, [sp, #0]
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	68b9      	ldr	r1, [r7, #8]
 8012944:	68f8      	ldr	r0, [r7, #12]
 8012946:	f000 f850 	bl	80129ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801294a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801294c:	f000 f8d4 	bl	8012af8 <prvAddNewTaskToReadyList>
 8012950:	e001      	b.n	8012956 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8012952:	2300      	movs	r3, #0
 8012954:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012956:	697b      	ldr	r3, [r7, #20]
	}
 8012958:	4618      	mov	r0, r3
 801295a:	3728      	adds	r7, #40	; 0x28
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012960:	b580      	push	{r7, lr}
 8012962:	b08c      	sub	sp, #48	; 0x30
 8012964:	af04      	add	r7, sp, #16
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	603b      	str	r3, [r7, #0]
 801296c:	4613      	mov	r3, r2
 801296e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012970:	88fb      	ldrh	r3, [r7, #6]
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4618      	mov	r0, r3
 8012976:	f001 fd23 	bl	80143c0 <pvPortMalloc>
 801297a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d00e      	beq.n	80129a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012982:	2054      	movs	r0, #84	; 0x54
 8012984:	f001 fd1c 	bl	80143c0 <pvPortMalloc>
 8012988:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d003      	beq.n	8012998 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	697a      	ldr	r2, [r7, #20]
 8012994:	631a      	str	r2, [r3, #48]	; 0x30
 8012996:	e005      	b.n	80129a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012998:	6978      	ldr	r0, [r7, #20]
 801299a:	f001 fdd3 	bl	8014544 <vPortFree>
 801299e:	e001      	b.n	80129a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d017      	beq.n	80129da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	2200      	movs	r2, #0
 80129ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80129b2:	88fa      	ldrh	r2, [r7, #6]
 80129b4:	2300      	movs	r3, #0
 80129b6:	9303      	str	r3, [sp, #12]
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	9302      	str	r3, [sp, #8]
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	9301      	str	r3, [sp, #4]
 80129c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c2:	9300      	str	r3, [sp, #0]
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	68b9      	ldr	r1, [r7, #8]
 80129c8:	68f8      	ldr	r0, [r7, #12]
 80129ca:	f000 f80e 	bl	80129ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80129ce:	69f8      	ldr	r0, [r7, #28]
 80129d0:	f000 f892 	bl	8012af8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80129d4:	2301      	movs	r3, #1
 80129d6:	61bb      	str	r3, [r7, #24]
 80129d8:	e002      	b.n	80129e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80129da:	f04f 33ff 	mov.w	r3, #4294967295
 80129de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80129e0:	69bb      	ldr	r3, [r7, #24]
	}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3720      	adds	r7, #32
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b088      	sub	sp, #32
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	60f8      	str	r0, [r7, #12]
 80129f2:	60b9      	str	r1, [r7, #8]
 80129f4:	607a      	str	r2, [r7, #4]
 80129f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80129f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80129fc:	6879      	ldr	r1, [r7, #4]
 80129fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012a02:	440b      	add	r3, r1
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4413      	add	r3, r2
 8012a08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	f023 0307 	bic.w	r3, r3, #7
 8012a10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	f003 0307 	and.w	r3, r3, #7
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d009      	beq.n	8012a30 <prvInitialiseNewTask+0x46>
 8012a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a20:	f383 8811 	msr	BASEPRI, r3
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	e7fe      	b.n	8012a2e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d01f      	beq.n	8012a76 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a36:	2300      	movs	r3, #0
 8012a38:	61fb      	str	r3, [r7, #28]
 8012a3a:	e012      	b.n	8012a62 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012a3c:	68ba      	ldr	r2, [r7, #8]
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	4413      	add	r3, r2
 8012a42:	7819      	ldrb	r1, [r3, #0]
 8012a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	4413      	add	r3, r2
 8012a4a:	3334      	adds	r3, #52	; 0x34
 8012a4c:	460a      	mov	r2, r1
 8012a4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012a50:	68ba      	ldr	r2, [r7, #8]
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	4413      	add	r3, r2
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d006      	beq.n	8012a6a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a5c:	69fb      	ldr	r3, [r7, #28]
 8012a5e:	3301      	adds	r3, #1
 8012a60:	61fb      	str	r3, [r7, #28]
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	2b0f      	cmp	r3, #15
 8012a66:	d9e9      	bls.n	8012a3c <prvInitialiseNewTask+0x52>
 8012a68:	e000      	b.n	8012a6c <prvInitialiseNewTask+0x82>
			{
				break;
 8012a6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012a74:	e003      	b.n	8012a7e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	2b06      	cmp	r3, #6
 8012a82:	d901      	bls.n	8012a88 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012a84:	2306      	movs	r3, #6
 8012a86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a96:	2200      	movs	r2, #0
 8012a98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9c:	3304      	adds	r3, #4
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fe ff48 	bl	8011934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa6:	3318      	adds	r3, #24
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fe ff43 	bl	8011934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab6:	f1c3 0207 	rsb	r2, r3, #7
 8012aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012acc:	2200      	movs	r2, #0
 8012ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	68f9      	ldr	r1, [r7, #12]
 8012ad6:	69b8      	ldr	r0, [r7, #24]
 8012ad8:	f001 fa34 	bl	8013f44 <pxPortInitialiseStack>
 8012adc:	4602      	mov	r2, r0
 8012ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012aee:	bf00      	nop
 8012af0:	3720      	adds	r7, #32
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
	...

08012af8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012b00:	f001 fb44 	bl	801418c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012b04:	4b2a      	ldr	r3, [pc, #168]	; (8012bb0 <prvAddNewTaskToReadyList+0xb8>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	4a29      	ldr	r2, [pc, #164]	; (8012bb0 <prvAddNewTaskToReadyList+0xb8>)
 8012b0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012b0e:	4b29      	ldr	r3, [pc, #164]	; (8012bb4 <prvAddNewTaskToReadyList+0xbc>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d109      	bne.n	8012b2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012b16:	4a27      	ldr	r2, [pc, #156]	; (8012bb4 <prvAddNewTaskToReadyList+0xbc>)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012b1c:	4b24      	ldr	r3, [pc, #144]	; (8012bb0 <prvAddNewTaskToReadyList+0xb8>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d110      	bne.n	8012b46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012b24:	f000 fd3c 	bl	80135a0 <prvInitialiseTaskLists>
 8012b28:	e00d      	b.n	8012b46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012b2a:	4b23      	ldr	r3, [pc, #140]	; (8012bb8 <prvAddNewTaskToReadyList+0xc0>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d109      	bne.n	8012b46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012b32:	4b20      	ldr	r3, [pc, #128]	; (8012bb4 <prvAddNewTaskToReadyList+0xbc>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d802      	bhi.n	8012b46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012b40:	4a1c      	ldr	r2, [pc, #112]	; (8012bb4 <prvAddNewTaskToReadyList+0xbc>)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012b46:	4b1d      	ldr	r3, [pc, #116]	; (8012bbc <prvAddNewTaskToReadyList+0xc4>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	4a1b      	ldr	r2, [pc, #108]	; (8012bbc <prvAddNewTaskToReadyList+0xc4>)
 8012b4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b54:	2201      	movs	r2, #1
 8012b56:	409a      	lsls	r2, r3
 8012b58:	4b19      	ldr	r3, [pc, #100]	; (8012bc0 <prvAddNewTaskToReadyList+0xc8>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	4a18      	ldr	r2, [pc, #96]	; (8012bc0 <prvAddNewTaskToReadyList+0xc8>)
 8012b60:	6013      	str	r3, [r2, #0]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b66:	4613      	mov	r3, r2
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4413      	add	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4a15      	ldr	r2, [pc, #84]	; (8012bc4 <prvAddNewTaskToReadyList+0xcc>)
 8012b70:	441a      	add	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	3304      	adds	r3, #4
 8012b76:	4619      	mov	r1, r3
 8012b78:	4610      	mov	r0, r2
 8012b7a:	f7fe fee8 	bl	801194e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012b7e:	f001 fb33 	bl	80141e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012b82:	4b0d      	ldr	r3, [pc, #52]	; (8012bb8 <prvAddNewTaskToReadyList+0xc0>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d00e      	beq.n	8012ba8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012b8a:	4b0a      	ldr	r3, [pc, #40]	; (8012bb4 <prvAddNewTaskToReadyList+0xbc>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d207      	bcs.n	8012ba8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012b98:	4b0b      	ldr	r3, [pc, #44]	; (8012bc8 <prvAddNewTaskToReadyList+0xd0>)
 8012b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b9e:	601a      	str	r2, [r3, #0]
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ba8:	bf00      	nop
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	24014a38 	.word	0x24014a38
 8012bb4:	24014938 	.word	0x24014938
 8012bb8:	24014a44 	.word	0x24014a44
 8012bbc:	24014a54 	.word	0x24014a54
 8012bc0:	24014a40 	.word	0x24014a40
 8012bc4:	2401493c 	.word	0x2401493c
 8012bc8:	e000ed04 	.word	0xe000ed04

08012bcc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012bd4:	f001 fada 	bl	801418c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d102      	bne.n	8012be4 <vTaskSuspend+0x18>
 8012bde:	4b3c      	ldr	r3, [pc, #240]	; (8012cd0 <vTaskSuspend+0x104>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	e000      	b.n	8012be6 <vTaskSuspend+0x1a>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	3304      	adds	r3, #4
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe ff0b 	bl	8011a08 <uxListRemove>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d115      	bne.n	8012c24 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bfc:	4935      	ldr	r1, [pc, #212]	; (8012cd4 <vTaskSuspend+0x108>)
 8012bfe:	4613      	mov	r3, r2
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	4413      	add	r3, r2
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	440b      	add	r3, r1
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d10a      	bne.n	8012c24 <vTaskSuspend+0x58>
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c12:	2201      	movs	r2, #1
 8012c14:	fa02 f303 	lsl.w	r3, r2, r3
 8012c18:	43da      	mvns	r2, r3
 8012c1a:	4b2f      	ldr	r3, [pc, #188]	; (8012cd8 <vTaskSuspend+0x10c>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4013      	ands	r3, r2
 8012c20:	4a2d      	ldr	r2, [pc, #180]	; (8012cd8 <vTaskSuspend+0x10c>)
 8012c22:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d004      	beq.n	8012c36 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	3318      	adds	r3, #24
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fe fee9 	bl	8011a08 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	3304      	adds	r3, #4
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	4827      	ldr	r0, [pc, #156]	; (8012cdc <vTaskSuspend+0x110>)
 8012c3e:	f7fe fe86 	bl	801194e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d103      	bne.n	8012c56 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2200      	movs	r2, #0
 8012c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012c56:	f001 fac7 	bl	80141e8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012c5a:	4b21      	ldr	r3, [pc, #132]	; (8012ce0 <vTaskSuspend+0x114>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012c62:	f001 fa93 	bl	801418c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012c66:	f000 fd35 	bl	80136d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012c6a:	f001 fabd 	bl	80141e8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012c6e:	4b18      	ldr	r3, [pc, #96]	; (8012cd0 <vTaskSuspend+0x104>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d126      	bne.n	8012cc6 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8012c78:	4b19      	ldr	r3, [pc, #100]	; (8012ce0 <vTaskSuspend+0x114>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d016      	beq.n	8012cae <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012c80:	4b18      	ldr	r3, [pc, #96]	; (8012ce4 <vTaskSuspend+0x118>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d009      	beq.n	8012c9c <vTaskSuspend+0xd0>
 8012c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8c:	f383 8811 	msr	BASEPRI, r3
 8012c90:	f3bf 8f6f 	isb	sy
 8012c94:	f3bf 8f4f 	dsb	sy
 8012c98:	60bb      	str	r3, [r7, #8]
 8012c9a:	e7fe      	b.n	8012c9a <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8012c9c:	4b12      	ldr	r3, [pc, #72]	; (8012ce8 <vTaskSuspend+0x11c>)
 8012c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ca2:	601a      	str	r2, [r3, #0]
 8012ca4:	f3bf 8f4f 	dsb	sy
 8012ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012cac:	e00b      	b.n	8012cc6 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012cae:	4b0b      	ldr	r3, [pc, #44]	; (8012cdc <vTaskSuspend+0x110>)
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	4b0e      	ldr	r3, [pc, #56]	; (8012cec <vTaskSuspend+0x120>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d103      	bne.n	8012cc2 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8012cba:	4b05      	ldr	r3, [pc, #20]	; (8012cd0 <vTaskSuspend+0x104>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	601a      	str	r2, [r3, #0]
	}
 8012cc0:	e001      	b.n	8012cc6 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8012cc2:	f000 faf3 	bl	80132ac <vTaskSwitchContext>
	}
 8012cc6:	bf00      	nop
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	24014938 	.word	0x24014938
 8012cd4:	2401493c 	.word	0x2401493c
 8012cd8:	24014a40 	.word	0x24014a40
 8012cdc:	24014a24 	.word	0x24014a24
 8012ce0:	24014a44 	.word	0x24014a44
 8012ce4:	24014a60 	.word	0x24014a60
 8012ce8:	e000ed04 	.word	0xe000ed04
 8012cec:	24014a38 	.word	0x24014a38

08012cf0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b087      	sub	sp, #28
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d109      	bne.n	8012d1a <prvTaskIsTaskSuspended+0x2a>
 8012d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0a:	f383 8811 	msr	BASEPRI, r3
 8012d0e:	f3bf 8f6f 	isb	sy
 8012d12:	f3bf 8f4f 	dsb	sy
 8012d16:	60fb      	str	r3, [r7, #12]
 8012d18:	e7fe      	b.n	8012d18 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	695b      	ldr	r3, [r3, #20]
 8012d1e:	4a0a      	ldr	r2, [pc, #40]	; (8012d48 <prvTaskIsTaskSuspended+0x58>)
 8012d20:	4293      	cmp	r3, r2
 8012d22:	d10a      	bne.n	8012d3a <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d28:	4a08      	ldr	r2, [pc, #32]	; (8012d4c <prvTaskIsTaskSuspended+0x5c>)
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d005      	beq.n	8012d3a <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d101      	bne.n	8012d3a <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8012d36:	2301      	movs	r3, #1
 8012d38:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d3a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	371c      	adds	r7, #28
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr
 8012d48:	24014a24 	.word	0x24014a24
 8012d4c:	240149f8 	.word	0x240149f8

08012d50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d109      	bne.n	8012d76 <vTaskResume+0x26>
 8012d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d66:	f383 8811 	msr	BASEPRI, r3
 8012d6a:	f3bf 8f6f 	isb	sy
 8012d6e:	f3bf 8f4f 	dsb	sy
 8012d72:	60bb      	str	r3, [r7, #8]
 8012d74:	e7fe      	b.n	8012d74 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8012d76:	4b20      	ldr	r3, [pc, #128]	; (8012df8 <vTaskResume+0xa8>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d037      	beq.n	8012df0 <vTaskResume+0xa0>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d034      	beq.n	8012df0 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8012d86:	f001 fa01 	bl	801418c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f7ff ffb0 	bl	8012cf0 <prvTaskIsTaskSuspended>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d02a      	beq.n	8012dec <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	3304      	adds	r3, #4
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fe fe34 	bl	8011a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012da4:	2201      	movs	r2, #1
 8012da6:	409a      	lsls	r2, r3
 8012da8:	4b14      	ldr	r3, [pc, #80]	; (8012dfc <vTaskResume+0xac>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4313      	orrs	r3, r2
 8012dae:	4a13      	ldr	r2, [pc, #76]	; (8012dfc <vTaskResume+0xac>)
 8012db0:	6013      	str	r3, [r2, #0]
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db6:	4613      	mov	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	4413      	add	r3, r2
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	4a10      	ldr	r2, [pc, #64]	; (8012e00 <vTaskResume+0xb0>)
 8012dc0:	441a      	add	r2, r3
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	3304      	adds	r3, #4
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	4610      	mov	r0, r2
 8012dca:	f7fe fdc0 	bl	801194e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dd2:	4b09      	ldr	r3, [pc, #36]	; (8012df8 <vTaskResume+0xa8>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d307      	bcc.n	8012dec <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <vTaskResume+0xb4>)
 8012dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012de2:	601a      	str	r2, [r3, #0]
 8012de4:	f3bf 8f4f 	dsb	sy
 8012de8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012dec:	f001 f9fc 	bl	80141e8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012df0:	bf00      	nop
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	24014938 	.word	0x24014938
 8012dfc:	24014a40 	.word	0x24014a40
 8012e00:	2401493c 	.word	0x2401493c
 8012e04:	e000ed04 	.word	0xe000ed04

08012e08 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b08a      	sub	sp, #40	; 0x28
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8012e10:	2300      	movs	r3, #0
 8012e12:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d109      	bne.n	8012e32 <xTaskResumeFromISR+0x2a>
 8012e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e22:	f383 8811 	msr	BASEPRI, r3
 8012e26:	f3bf 8f6f 	isb	sy
 8012e2a:	f3bf 8f4f 	dsb	sy
 8012e2e:	61bb      	str	r3, [r7, #24]
 8012e30:	e7fe      	b.n	8012e30 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e32:	f001 fa87 	bl	8014344 <vPortValidateInterruptPriority>
	__asm volatile
 8012e36:	f3ef 8211 	mrs	r2, BASEPRI
 8012e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3e:	f383 8811 	msr	BASEPRI, r3
 8012e42:	f3bf 8f6f 	isb	sy
 8012e46:	f3bf 8f4f 	dsb	sy
 8012e4a:	617a      	str	r2, [r7, #20]
 8012e4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012e4e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e50:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012e52:	6a38      	ldr	r0, [r7, #32]
 8012e54:	f7ff ff4c 	bl	8012cf0 <prvTaskIsTaskSuspended>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d02f      	beq.n	8012ebe <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e5e:	4b1d      	ldr	r3, [pc, #116]	; (8012ed4 <xTaskResumeFromISR+0xcc>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d125      	bne.n	8012eb2 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e66:	6a3b      	ldr	r3, [r7, #32]
 8012e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e6a:	4b1b      	ldr	r3, [pc, #108]	; (8012ed8 <xTaskResumeFromISR+0xd0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d301      	bcc.n	8012e78 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8012e74:	2301      	movs	r3, #1
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	3304      	adds	r3, #4
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fe fdc3 	bl	8011a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e86:	2201      	movs	r2, #1
 8012e88:	409a      	lsls	r2, r3
 8012e8a:	4b14      	ldr	r3, [pc, #80]	; (8012edc <xTaskResumeFromISR+0xd4>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	4a12      	ldr	r2, [pc, #72]	; (8012edc <xTaskResumeFromISR+0xd4>)
 8012e92:	6013      	str	r3, [r2, #0]
 8012e94:	6a3b      	ldr	r3, [r7, #32]
 8012e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e98:	4613      	mov	r3, r2
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	4413      	add	r3, r2
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	4a0f      	ldr	r2, [pc, #60]	; (8012ee0 <xTaskResumeFromISR+0xd8>)
 8012ea2:	441a      	add	r2, r3
 8012ea4:	6a3b      	ldr	r3, [r7, #32]
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	4610      	mov	r0, r2
 8012eac:	f7fe fd4f 	bl	801194e <vListInsertEnd>
 8012eb0:	e005      	b.n	8012ebe <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012eb2:	6a3b      	ldr	r3, [r7, #32]
 8012eb4:	3318      	adds	r3, #24
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	480a      	ldr	r0, [pc, #40]	; (8012ee4 <xTaskResumeFromISR+0xdc>)
 8012eba:	f7fe fd48 	bl	801194e <vListInsertEnd>
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3728      	adds	r7, #40	; 0x28
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	24014a60 	.word	0x24014a60
 8012ed8:	24014938 	.word	0x24014938
 8012edc:	24014a40 	.word	0x24014a40
 8012ee0:	2401493c 	.word	0x2401493c
 8012ee4:	240149f8 	.word	0x240149f8

08012ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b08a      	sub	sp, #40	; 0x28
 8012eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012ef6:	463a      	mov	r2, r7
 8012ef8:	1d39      	adds	r1, r7, #4
 8012efa:	f107 0308 	add.w	r3, r7, #8
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ed fcf2 	bl	80008e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f04:	6839      	ldr	r1, [r7, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	9202      	str	r2, [sp, #8]
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	2300      	movs	r3, #0
 8012f10:	9300      	str	r3, [sp, #0]
 8012f12:	2300      	movs	r3, #0
 8012f14:	460a      	mov	r2, r1
 8012f16:	491d      	ldr	r1, [pc, #116]	; (8012f8c <vTaskStartScheduler+0xa4>)
 8012f18:	481d      	ldr	r0, [pc, #116]	; (8012f90 <vTaskStartScheduler+0xa8>)
 8012f1a:	f7ff fcc7 	bl	80128ac <xTaskCreateStatic>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	4b1c      	ldr	r3, [pc, #112]	; (8012f94 <vTaskStartScheduler+0xac>)
 8012f22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f24:	4b1b      	ldr	r3, [pc, #108]	; (8012f94 <vTaskStartScheduler+0xac>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	617b      	str	r3, [r7, #20]
 8012f30:	e001      	b.n	8012f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d115      	bne.n	8012f68 <vTaskStartScheduler+0x80>
	__asm volatile
 8012f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f40:	f383 8811 	msr	BASEPRI, r3
 8012f44:	f3bf 8f6f 	isb	sy
 8012f48:	f3bf 8f4f 	dsb	sy
 8012f4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f4e:	4b12      	ldr	r3, [pc, #72]	; (8012f98 <vTaskStartScheduler+0xb0>)
 8012f50:	f04f 32ff 	mov.w	r2, #4294967295
 8012f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012f56:	4b11      	ldr	r3, [pc, #68]	; (8012f9c <vTaskStartScheduler+0xb4>)
 8012f58:	2201      	movs	r2, #1
 8012f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012f5c:	4b10      	ldr	r3, [pc, #64]	; (8012fa0 <vTaskStartScheduler+0xb8>)
 8012f5e:	2200      	movs	r2, #0
 8012f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012f62:	f001 f875 	bl	8014050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012f66:	e00d      	b.n	8012f84 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f6e:	d109      	bne.n	8012f84 <vTaskStartScheduler+0x9c>
 8012f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f74:	f383 8811 	msr	BASEPRI, r3
 8012f78:	f3bf 8f6f 	isb	sy
 8012f7c:	f3bf 8f4f 	dsb	sy
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	e7fe      	b.n	8012f82 <vTaskStartScheduler+0x9a>
}
 8012f84:	bf00      	nop
 8012f86:	3718      	adds	r7, #24
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	080150dc 	.word	0x080150dc
 8012f90:	08013571 	.word	0x08013571
 8012f94:	24014a5c 	.word	0x24014a5c
 8012f98:	24014a58 	.word	0x24014a58
 8012f9c:	24014a44 	.word	0x24014a44
 8012fa0:	24014a3c 	.word	0x24014a3c

08012fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012fa8:	4b04      	ldr	r3, [pc, #16]	; (8012fbc <vTaskSuspendAll+0x18>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	3301      	adds	r3, #1
 8012fae:	4a03      	ldr	r2, [pc, #12]	; (8012fbc <vTaskSuspendAll+0x18>)
 8012fb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012fb2:	bf00      	nop
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr
 8012fbc:	24014a60 	.word	0x24014a60

08012fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012fce:	4b41      	ldr	r3, [pc, #260]	; (80130d4 <xTaskResumeAll+0x114>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d109      	bne.n	8012fea <xTaskResumeAll+0x2a>
 8012fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fda:	f383 8811 	msr	BASEPRI, r3
 8012fde:	f3bf 8f6f 	isb	sy
 8012fe2:	f3bf 8f4f 	dsb	sy
 8012fe6:	603b      	str	r3, [r7, #0]
 8012fe8:	e7fe      	b.n	8012fe8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012fea:	f001 f8cf 	bl	801418c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012fee:	4b39      	ldr	r3, [pc, #228]	; (80130d4 <xTaskResumeAll+0x114>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	3b01      	subs	r3, #1
 8012ff4:	4a37      	ldr	r2, [pc, #220]	; (80130d4 <xTaskResumeAll+0x114>)
 8012ff6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ff8:	4b36      	ldr	r3, [pc, #216]	; (80130d4 <xTaskResumeAll+0x114>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d161      	bne.n	80130c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013000:	4b35      	ldr	r3, [pc, #212]	; (80130d8 <xTaskResumeAll+0x118>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d05d      	beq.n	80130c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013008:	e02e      	b.n	8013068 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801300a:	4b34      	ldr	r3, [pc, #208]	; (80130dc <xTaskResumeAll+0x11c>)
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	68db      	ldr	r3, [r3, #12]
 8013010:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	3318      	adds	r3, #24
 8013016:	4618      	mov	r0, r3
 8013018:	f7fe fcf6 	bl	8011a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	3304      	adds	r3, #4
 8013020:	4618      	mov	r0, r3
 8013022:	f7fe fcf1 	bl	8011a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801302a:	2201      	movs	r2, #1
 801302c:	409a      	lsls	r2, r3
 801302e:	4b2c      	ldr	r3, [pc, #176]	; (80130e0 <xTaskResumeAll+0x120>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4313      	orrs	r3, r2
 8013034:	4a2a      	ldr	r2, [pc, #168]	; (80130e0 <xTaskResumeAll+0x120>)
 8013036:	6013      	str	r3, [r2, #0]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801303c:	4613      	mov	r3, r2
 801303e:	009b      	lsls	r3, r3, #2
 8013040:	4413      	add	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	4a27      	ldr	r2, [pc, #156]	; (80130e4 <xTaskResumeAll+0x124>)
 8013046:	441a      	add	r2, r3
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	3304      	adds	r3, #4
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7fe fc7d 	bl	801194e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013058:	4b23      	ldr	r3, [pc, #140]	; (80130e8 <xTaskResumeAll+0x128>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305e:	429a      	cmp	r2, r3
 8013060:	d302      	bcc.n	8013068 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013062:	4b22      	ldr	r3, [pc, #136]	; (80130ec <xTaskResumeAll+0x12c>)
 8013064:	2201      	movs	r2, #1
 8013066:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013068:	4b1c      	ldr	r3, [pc, #112]	; (80130dc <xTaskResumeAll+0x11c>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d1cc      	bne.n	801300a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d001      	beq.n	801307a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013076:	f000 fb2d 	bl	80136d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801307a:	4b1d      	ldr	r3, [pc, #116]	; (80130f0 <xTaskResumeAll+0x130>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d010      	beq.n	80130a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013086:	f000 f859 	bl	801313c <xTaskIncrementTick>
 801308a:	4603      	mov	r3, r0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d002      	beq.n	8013096 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013090:	4b16      	ldr	r3, [pc, #88]	; (80130ec <xTaskResumeAll+0x12c>)
 8013092:	2201      	movs	r2, #1
 8013094:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	3b01      	subs	r3, #1
 801309a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1f1      	bne.n	8013086 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80130a2:	4b13      	ldr	r3, [pc, #76]	; (80130f0 <xTaskResumeAll+0x130>)
 80130a4:	2200      	movs	r2, #0
 80130a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130a8:	4b10      	ldr	r3, [pc, #64]	; (80130ec <xTaskResumeAll+0x12c>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d009      	beq.n	80130c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80130b0:	2301      	movs	r3, #1
 80130b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80130b4:	4b0f      	ldr	r3, [pc, #60]	; (80130f4 <xTaskResumeAll+0x134>)
 80130b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ba:	601a      	str	r2, [r3, #0]
 80130bc:	f3bf 8f4f 	dsb	sy
 80130c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80130c4:	f001 f890 	bl	80141e8 <vPortExitCritical>

	return xAlreadyYielded;
 80130c8:	68bb      	ldr	r3, [r7, #8]
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	24014a60 	.word	0x24014a60
 80130d8:	24014a38 	.word	0x24014a38
 80130dc:	240149f8 	.word	0x240149f8
 80130e0:	24014a40 	.word	0x24014a40
 80130e4:	2401493c 	.word	0x2401493c
 80130e8:	24014938 	.word	0x24014938
 80130ec:	24014a4c 	.word	0x24014a4c
 80130f0:	24014a48 	.word	0x24014a48
 80130f4:	e000ed04 	.word	0xe000ed04

080130f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80130fe:	4b05      	ldr	r3, [pc, #20]	; (8013114 <xTaskGetTickCount+0x1c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013104:	687b      	ldr	r3, [r7, #4]
}
 8013106:	4618      	mov	r0, r3
 8013108:	370c      	adds	r7, #12
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	24014a3c 	.word	0x24014a3c

08013118 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801311e:	f001 f911 	bl	8014344 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013122:	2300      	movs	r3, #0
 8013124:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013126:	4b04      	ldr	r3, [pc, #16]	; (8013138 <xTaskGetTickCountFromISR+0x20>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801312c:	683b      	ldr	r3, [r7, #0]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	24014a3c 	.word	0x24014a3c

0801313c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b086      	sub	sp, #24
 8013140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013142:	2300      	movs	r3, #0
 8013144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013146:	4b4e      	ldr	r3, [pc, #312]	; (8013280 <xTaskIncrementTick+0x144>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	f040 8087 	bne.w	801325e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013150:	4b4c      	ldr	r3, [pc, #304]	; (8013284 <xTaskIncrementTick+0x148>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	3301      	adds	r3, #1
 8013156:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013158:	4a4a      	ldr	r2, [pc, #296]	; (8013284 <xTaskIncrementTick+0x148>)
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d11f      	bne.n	80131a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013164:	4b48      	ldr	r3, [pc, #288]	; (8013288 <xTaskIncrementTick+0x14c>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d009      	beq.n	8013182 <xTaskIncrementTick+0x46>
 801316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013172:	f383 8811 	msr	BASEPRI, r3
 8013176:	f3bf 8f6f 	isb	sy
 801317a:	f3bf 8f4f 	dsb	sy
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	e7fe      	b.n	8013180 <xTaskIncrementTick+0x44>
 8013182:	4b41      	ldr	r3, [pc, #260]	; (8013288 <xTaskIncrementTick+0x14c>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	60fb      	str	r3, [r7, #12]
 8013188:	4b40      	ldr	r3, [pc, #256]	; (801328c <xTaskIncrementTick+0x150>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a3e      	ldr	r2, [pc, #248]	; (8013288 <xTaskIncrementTick+0x14c>)
 801318e:	6013      	str	r3, [r2, #0]
 8013190:	4a3e      	ldr	r2, [pc, #248]	; (801328c <xTaskIncrementTick+0x150>)
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6013      	str	r3, [r2, #0]
 8013196:	4b3e      	ldr	r3, [pc, #248]	; (8013290 <xTaskIncrementTick+0x154>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	3301      	adds	r3, #1
 801319c:	4a3c      	ldr	r2, [pc, #240]	; (8013290 <xTaskIncrementTick+0x154>)
 801319e:	6013      	str	r3, [r2, #0]
 80131a0:	f000 fa98 	bl	80136d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131a4:	4b3b      	ldr	r3, [pc, #236]	; (8013294 <xTaskIncrementTick+0x158>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d348      	bcc.n	8013240 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131ae:	4b36      	ldr	r3, [pc, #216]	; (8013288 <xTaskIncrementTick+0x14c>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d104      	bne.n	80131c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131b8:	4b36      	ldr	r3, [pc, #216]	; (8013294 <xTaskIncrementTick+0x158>)
 80131ba:	f04f 32ff 	mov.w	r2, #4294967295
 80131be:	601a      	str	r2, [r3, #0]
					break;
 80131c0:	e03e      	b.n	8013240 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131c2:	4b31      	ldr	r3, [pc, #196]	; (8013288 <xTaskIncrementTick+0x14c>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	68db      	ldr	r3, [r3, #12]
 80131ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80131d2:	693a      	ldr	r2, [r7, #16]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d203      	bcs.n	80131e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80131da:	4a2e      	ldr	r2, [pc, #184]	; (8013294 <xTaskIncrementTick+0x158>)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80131e0:	e02e      	b.n	8013240 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	3304      	adds	r3, #4
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe fc0e 	bl	8011a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d004      	beq.n	80131fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	3318      	adds	r3, #24
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fe fc05 	bl	8011a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013202:	2201      	movs	r2, #1
 8013204:	409a      	lsls	r2, r3
 8013206:	4b24      	ldr	r3, [pc, #144]	; (8013298 <xTaskIncrementTick+0x15c>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4313      	orrs	r3, r2
 801320c:	4a22      	ldr	r2, [pc, #136]	; (8013298 <xTaskIncrementTick+0x15c>)
 801320e:	6013      	str	r3, [r2, #0]
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013214:	4613      	mov	r3, r2
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	4413      	add	r3, r2
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4a1f      	ldr	r2, [pc, #124]	; (801329c <xTaskIncrementTick+0x160>)
 801321e:	441a      	add	r2, r3
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	3304      	adds	r3, #4
 8013224:	4619      	mov	r1, r3
 8013226:	4610      	mov	r0, r2
 8013228:	f7fe fb91 	bl	801194e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013230:	4b1b      	ldr	r3, [pc, #108]	; (80132a0 <xTaskIncrementTick+0x164>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013236:	429a      	cmp	r2, r3
 8013238:	d3b9      	bcc.n	80131ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801323a:	2301      	movs	r3, #1
 801323c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801323e:	e7b6      	b.n	80131ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013240:	4b17      	ldr	r3, [pc, #92]	; (80132a0 <xTaskIncrementTick+0x164>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013246:	4915      	ldr	r1, [pc, #84]	; (801329c <xTaskIncrementTick+0x160>)
 8013248:	4613      	mov	r3, r2
 801324a:	009b      	lsls	r3, r3, #2
 801324c:	4413      	add	r3, r2
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	440b      	add	r3, r1
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2b01      	cmp	r3, #1
 8013256:	d907      	bls.n	8013268 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013258:	2301      	movs	r3, #1
 801325a:	617b      	str	r3, [r7, #20]
 801325c:	e004      	b.n	8013268 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801325e:	4b11      	ldr	r3, [pc, #68]	; (80132a4 <xTaskIncrementTick+0x168>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	3301      	adds	r3, #1
 8013264:	4a0f      	ldr	r2, [pc, #60]	; (80132a4 <xTaskIncrementTick+0x168>)
 8013266:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013268:	4b0f      	ldr	r3, [pc, #60]	; (80132a8 <xTaskIncrementTick+0x16c>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d001      	beq.n	8013274 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013270:	2301      	movs	r3, #1
 8013272:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013274:	697b      	ldr	r3, [r7, #20]
}
 8013276:	4618      	mov	r0, r3
 8013278:	3718      	adds	r7, #24
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	24014a60 	.word	0x24014a60
 8013284:	24014a3c 	.word	0x24014a3c
 8013288:	240149f0 	.word	0x240149f0
 801328c:	240149f4 	.word	0x240149f4
 8013290:	24014a50 	.word	0x24014a50
 8013294:	24014a58 	.word	0x24014a58
 8013298:	24014a40 	.word	0x24014a40
 801329c:	2401493c 	.word	0x2401493c
 80132a0:	24014938 	.word	0x24014938
 80132a4:	24014a48 	.word	0x24014a48
 80132a8:	24014a4c 	.word	0x24014a4c

080132ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b087      	sub	sp, #28
 80132b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132b2:	4b26      	ldr	r3, [pc, #152]	; (801334c <vTaskSwitchContext+0xa0>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d003      	beq.n	80132c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132ba:	4b25      	ldr	r3, [pc, #148]	; (8013350 <vTaskSwitchContext+0xa4>)
 80132bc:	2201      	movs	r2, #1
 80132be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132c0:	e03e      	b.n	8013340 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80132c2:	4b23      	ldr	r3, [pc, #140]	; (8013350 <vTaskSwitchContext+0xa4>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132c8:	4b22      	ldr	r3, [pc, #136]	; (8013354 <vTaskSwitchContext+0xa8>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	fab3 f383 	clz	r3, r3
 80132d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80132d6:	7afb      	ldrb	r3, [r7, #11]
 80132d8:	f1c3 031f 	rsb	r3, r3, #31
 80132dc:	617b      	str	r3, [r7, #20]
 80132de:	491e      	ldr	r1, [pc, #120]	; (8013358 <vTaskSwitchContext+0xac>)
 80132e0:	697a      	ldr	r2, [r7, #20]
 80132e2:	4613      	mov	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	4413      	add	r3, r2
 80132e8:	009b      	lsls	r3, r3, #2
 80132ea:	440b      	add	r3, r1
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d109      	bne.n	8013306 <vTaskSwitchContext+0x5a>
	__asm volatile
 80132f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f6:	f383 8811 	msr	BASEPRI, r3
 80132fa:	f3bf 8f6f 	isb	sy
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	607b      	str	r3, [r7, #4]
 8013304:	e7fe      	b.n	8013304 <vTaskSwitchContext+0x58>
 8013306:	697a      	ldr	r2, [r7, #20]
 8013308:	4613      	mov	r3, r2
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	4413      	add	r3, r2
 801330e:	009b      	lsls	r3, r3, #2
 8013310:	4a11      	ldr	r2, [pc, #68]	; (8013358 <vTaskSwitchContext+0xac>)
 8013312:	4413      	add	r3, r2
 8013314:	613b      	str	r3, [r7, #16]
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	685a      	ldr	r2, [r3, #4]
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	605a      	str	r2, [r3, #4]
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	685a      	ldr	r2, [r3, #4]
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	3308      	adds	r3, #8
 8013328:	429a      	cmp	r2, r3
 801332a:	d104      	bne.n	8013336 <vTaskSwitchContext+0x8a>
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	685a      	ldr	r2, [r3, #4]
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	605a      	str	r2, [r3, #4]
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	4a07      	ldr	r2, [pc, #28]	; (801335c <vTaskSwitchContext+0xb0>)
 801333e:	6013      	str	r3, [r2, #0]
}
 8013340:	bf00      	nop
 8013342:	371c      	adds	r7, #28
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr
 801334c:	24014a60 	.word	0x24014a60
 8013350:	24014a4c 	.word	0x24014a4c
 8013354:	24014a40 	.word	0x24014a40
 8013358:	2401493c 	.word	0x2401493c
 801335c:	24014938 	.word	0x24014938

08013360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d109      	bne.n	8013384 <vTaskPlaceOnEventList+0x24>
 8013370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	60fb      	str	r3, [r7, #12]
 8013382:	e7fe      	b.n	8013382 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013384:	4b07      	ldr	r3, [pc, #28]	; (80133a4 <vTaskPlaceOnEventList+0x44>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	3318      	adds	r3, #24
 801338a:	4619      	mov	r1, r3
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f7fe fb02 	bl	8011996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013392:	2101      	movs	r1, #1
 8013394:	6838      	ldr	r0, [r7, #0]
 8013396:	f000 fd6f 	bl	8013e78 <prvAddCurrentTaskToDelayedList>
}
 801339a:	bf00      	nop
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	24014938 	.word	0x24014938

080133a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d109      	bne.n	80133d2 <xTaskRemoveFromEventList+0x2a>
 80133be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	60fb      	str	r3, [r7, #12]
 80133d0:	e7fe      	b.n	80133d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	3318      	adds	r3, #24
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fe fb16 	bl	8011a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133dc:	4b1d      	ldr	r3, [pc, #116]	; (8013454 <xTaskRemoveFromEventList+0xac>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d11c      	bne.n	801341e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	3304      	adds	r3, #4
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7fe fb0d 	bl	8011a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f2:	2201      	movs	r2, #1
 80133f4:	409a      	lsls	r2, r3
 80133f6:	4b18      	ldr	r3, [pc, #96]	; (8013458 <xTaskRemoveFromEventList+0xb0>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	4313      	orrs	r3, r2
 80133fc:	4a16      	ldr	r2, [pc, #88]	; (8013458 <xTaskRemoveFromEventList+0xb0>)
 80133fe:	6013      	str	r3, [r2, #0]
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013404:	4613      	mov	r3, r2
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	4413      	add	r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	4a13      	ldr	r2, [pc, #76]	; (801345c <xTaskRemoveFromEventList+0xb4>)
 801340e:	441a      	add	r2, r3
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	3304      	adds	r3, #4
 8013414:	4619      	mov	r1, r3
 8013416:	4610      	mov	r0, r2
 8013418:	f7fe fa99 	bl	801194e <vListInsertEnd>
 801341c:	e005      	b.n	801342a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	3318      	adds	r3, #24
 8013422:	4619      	mov	r1, r3
 8013424:	480e      	ldr	r0, [pc, #56]	; (8013460 <xTaskRemoveFromEventList+0xb8>)
 8013426:	f7fe fa92 	bl	801194e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801342e:	4b0d      	ldr	r3, [pc, #52]	; (8013464 <xTaskRemoveFromEventList+0xbc>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013434:	429a      	cmp	r2, r3
 8013436:	d905      	bls.n	8013444 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013438:	2301      	movs	r3, #1
 801343a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801343c:	4b0a      	ldr	r3, [pc, #40]	; (8013468 <xTaskRemoveFromEventList+0xc0>)
 801343e:	2201      	movs	r2, #1
 8013440:	601a      	str	r2, [r3, #0]
 8013442:	e001      	b.n	8013448 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013444:	2300      	movs	r3, #0
 8013446:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013448:	697b      	ldr	r3, [r7, #20]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	24014a60 	.word	0x24014a60
 8013458:	24014a40 	.word	0x24014a40
 801345c:	2401493c 	.word	0x2401493c
 8013460:	240149f8 	.word	0x240149f8
 8013464:	24014938 	.word	0x24014938
 8013468:	24014a4c 	.word	0x24014a4c

0801346c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013474:	4b06      	ldr	r3, [pc, #24]	; (8013490 <vTaskInternalSetTimeOutState+0x24>)
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801347c:	4b05      	ldr	r3, [pc, #20]	; (8013494 <vTaskInternalSetTimeOutState+0x28>)
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	605a      	str	r2, [r3, #4]
}
 8013484:	bf00      	nop
 8013486:	370c      	adds	r7, #12
 8013488:	46bd      	mov	sp, r7
 801348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348e:	4770      	bx	lr
 8013490:	24014a50 	.word	0x24014a50
 8013494:	24014a3c 	.word	0x24014a3c

08013498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b088      	sub	sp, #32
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d109      	bne.n	80134bc <xTaskCheckForTimeOut+0x24>
 80134a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ac:	f383 8811 	msr	BASEPRI, r3
 80134b0:	f3bf 8f6f 	isb	sy
 80134b4:	f3bf 8f4f 	dsb	sy
 80134b8:	613b      	str	r3, [r7, #16]
 80134ba:	e7fe      	b.n	80134ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d109      	bne.n	80134d6 <xTaskCheckForTimeOut+0x3e>
 80134c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c6:	f383 8811 	msr	BASEPRI, r3
 80134ca:	f3bf 8f6f 	isb	sy
 80134ce:	f3bf 8f4f 	dsb	sy
 80134d2:	60fb      	str	r3, [r7, #12]
 80134d4:	e7fe      	b.n	80134d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80134d6:	f000 fe59 	bl	801418c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80134da:	4b1d      	ldr	r3, [pc, #116]	; (8013550 <xTaskCheckForTimeOut+0xb8>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	69ba      	ldr	r2, [r7, #24]
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134f2:	d102      	bne.n	80134fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80134f4:	2300      	movs	r3, #0
 80134f6:	61fb      	str	r3, [r7, #28]
 80134f8:	e023      	b.n	8013542 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	4b15      	ldr	r3, [pc, #84]	; (8013554 <xTaskCheckForTimeOut+0xbc>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	429a      	cmp	r2, r3
 8013504:	d007      	beq.n	8013516 <xTaskCheckForTimeOut+0x7e>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	69ba      	ldr	r2, [r7, #24]
 801350c:	429a      	cmp	r2, r3
 801350e:	d302      	bcc.n	8013516 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013510:	2301      	movs	r3, #1
 8013512:	61fb      	str	r3, [r7, #28]
 8013514:	e015      	b.n	8013542 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	697a      	ldr	r2, [r7, #20]
 801351c:	429a      	cmp	r2, r3
 801351e:	d20b      	bcs.n	8013538 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	1ad2      	subs	r2, r2, r3
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7ff ff9d 	bl	801346c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013532:	2300      	movs	r3, #0
 8013534:	61fb      	str	r3, [r7, #28]
 8013536:	e004      	b.n	8013542 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	2200      	movs	r2, #0
 801353c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801353e:	2301      	movs	r3, #1
 8013540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013542:	f000 fe51 	bl	80141e8 <vPortExitCritical>

	return xReturn;
 8013546:	69fb      	ldr	r3, [r7, #28]
}
 8013548:	4618      	mov	r0, r3
 801354a:	3720      	adds	r7, #32
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	24014a3c 	.word	0x24014a3c
 8013554:	24014a50 	.word	0x24014a50

08013558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013558:	b480      	push	{r7}
 801355a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801355c:	4b03      	ldr	r3, [pc, #12]	; (801356c <vTaskMissedYield+0x14>)
 801355e:	2201      	movs	r2, #1
 8013560:	601a      	str	r2, [r3, #0]
}
 8013562:	bf00      	nop
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr
 801356c:	24014a4c 	.word	0x24014a4c

08013570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013578:	f000 f852 	bl	8013620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801357c:	4b06      	ldr	r3, [pc, #24]	; (8013598 <prvIdleTask+0x28>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d9f9      	bls.n	8013578 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013584:	4b05      	ldr	r3, [pc, #20]	; (801359c <prvIdleTask+0x2c>)
 8013586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801358a:	601a      	str	r2, [r3, #0]
 801358c:	f3bf 8f4f 	dsb	sy
 8013590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013594:	e7f0      	b.n	8013578 <prvIdleTask+0x8>
 8013596:	bf00      	nop
 8013598:	2401493c 	.word	0x2401493c
 801359c:	e000ed04 	.word	0xe000ed04

080135a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135a6:	2300      	movs	r3, #0
 80135a8:	607b      	str	r3, [r7, #4]
 80135aa:	e00c      	b.n	80135c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	4613      	mov	r3, r2
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	4413      	add	r3, r2
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	4a12      	ldr	r2, [pc, #72]	; (8013600 <prvInitialiseTaskLists+0x60>)
 80135b8:	4413      	add	r3, r2
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7fe f99a 	bl	80118f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	3301      	adds	r3, #1
 80135c4:	607b      	str	r3, [r7, #4]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2b06      	cmp	r3, #6
 80135ca:	d9ef      	bls.n	80135ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80135cc:	480d      	ldr	r0, [pc, #52]	; (8013604 <prvInitialiseTaskLists+0x64>)
 80135ce:	f7fe f991 	bl	80118f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80135d2:	480d      	ldr	r0, [pc, #52]	; (8013608 <prvInitialiseTaskLists+0x68>)
 80135d4:	f7fe f98e 	bl	80118f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80135d8:	480c      	ldr	r0, [pc, #48]	; (801360c <prvInitialiseTaskLists+0x6c>)
 80135da:	f7fe f98b 	bl	80118f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80135de:	480c      	ldr	r0, [pc, #48]	; (8013610 <prvInitialiseTaskLists+0x70>)
 80135e0:	f7fe f988 	bl	80118f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80135e4:	480b      	ldr	r0, [pc, #44]	; (8013614 <prvInitialiseTaskLists+0x74>)
 80135e6:	f7fe f985 	bl	80118f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80135ea:	4b0b      	ldr	r3, [pc, #44]	; (8013618 <prvInitialiseTaskLists+0x78>)
 80135ec:	4a05      	ldr	r2, [pc, #20]	; (8013604 <prvInitialiseTaskLists+0x64>)
 80135ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80135f0:	4b0a      	ldr	r3, [pc, #40]	; (801361c <prvInitialiseTaskLists+0x7c>)
 80135f2:	4a05      	ldr	r2, [pc, #20]	; (8013608 <prvInitialiseTaskLists+0x68>)
 80135f4:	601a      	str	r2, [r3, #0]
}
 80135f6:	bf00      	nop
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	2401493c 	.word	0x2401493c
 8013604:	240149c8 	.word	0x240149c8
 8013608:	240149dc 	.word	0x240149dc
 801360c:	240149f8 	.word	0x240149f8
 8013610:	24014a0c 	.word	0x24014a0c
 8013614:	24014a24 	.word	0x24014a24
 8013618:	240149f0 	.word	0x240149f0
 801361c:	240149f4 	.word	0x240149f4

08013620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013626:	e019      	b.n	801365c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013628:	f000 fdb0 	bl	801418c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801362c:	4b0f      	ldr	r3, [pc, #60]	; (801366c <prvCheckTasksWaitingTermination+0x4c>)
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	68db      	ldr	r3, [r3, #12]
 8013632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	3304      	adds	r3, #4
 8013638:	4618      	mov	r0, r3
 801363a:	f7fe f9e5 	bl	8011a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801363e:	4b0c      	ldr	r3, [pc, #48]	; (8013670 <prvCheckTasksWaitingTermination+0x50>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	3b01      	subs	r3, #1
 8013644:	4a0a      	ldr	r2, [pc, #40]	; (8013670 <prvCheckTasksWaitingTermination+0x50>)
 8013646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013648:	4b0a      	ldr	r3, [pc, #40]	; (8013674 <prvCheckTasksWaitingTermination+0x54>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3b01      	subs	r3, #1
 801364e:	4a09      	ldr	r2, [pc, #36]	; (8013674 <prvCheckTasksWaitingTermination+0x54>)
 8013650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013652:	f000 fdc9 	bl	80141e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f000 f80e 	bl	8013678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801365c:	4b05      	ldr	r3, [pc, #20]	; (8013674 <prvCheckTasksWaitingTermination+0x54>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1e1      	bne.n	8013628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013664:	bf00      	nop
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	24014a0c 	.word	0x24014a0c
 8013670:	24014a38 	.word	0x24014a38
 8013674:	24014a20 	.word	0x24014a20

08013678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013686:	2b00      	cmp	r3, #0
 8013688:	d108      	bne.n	801369c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801368e:	4618      	mov	r0, r3
 8013690:	f000 ff58 	bl	8014544 <vPortFree>
				vPortFree( pxTCB );
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 ff55 	bl	8014544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801369a:	e017      	b.n	80136cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d103      	bne.n	80136ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 ff4c 	bl	8014544 <vPortFree>
	}
 80136ac:	e00e      	b.n	80136cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136b4:	2b02      	cmp	r3, #2
 80136b6:	d009      	beq.n	80136cc <prvDeleteTCB+0x54>
 80136b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136bc:	f383 8811 	msr	BASEPRI, r3
 80136c0:	f3bf 8f6f 	isb	sy
 80136c4:	f3bf 8f4f 	dsb	sy
 80136c8:	60fb      	str	r3, [r7, #12]
 80136ca:	e7fe      	b.n	80136ca <prvDeleteTCB+0x52>
	}
 80136cc:	bf00      	nop
 80136ce:	3710      	adds	r7, #16
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136da:	4b0c      	ldr	r3, [pc, #48]	; (801370c <prvResetNextTaskUnblockTime+0x38>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d104      	bne.n	80136ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80136e4:	4b0a      	ldr	r3, [pc, #40]	; (8013710 <prvResetNextTaskUnblockTime+0x3c>)
 80136e6:	f04f 32ff 	mov.w	r2, #4294967295
 80136ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80136ec:	e008      	b.n	8013700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136ee:	4b07      	ldr	r3, [pc, #28]	; (801370c <prvResetNextTaskUnblockTime+0x38>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	68db      	ldr	r3, [r3, #12]
 80136f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	4a04      	ldr	r2, [pc, #16]	; (8013710 <prvResetNextTaskUnblockTime+0x3c>)
 80136fe:	6013      	str	r3, [r2, #0]
}
 8013700:	bf00      	nop
 8013702:	370c      	adds	r7, #12
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr
 801370c:	240149f0 	.word	0x240149f0
 8013710:	24014a58 	.word	0x24014a58

08013714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013714:	b480      	push	{r7}
 8013716:	b083      	sub	sp, #12
 8013718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801371a:	4b0b      	ldr	r3, [pc, #44]	; (8013748 <xTaskGetSchedulerState+0x34>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d102      	bne.n	8013728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013722:	2301      	movs	r3, #1
 8013724:	607b      	str	r3, [r7, #4]
 8013726:	e008      	b.n	801373a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013728:	4b08      	ldr	r3, [pc, #32]	; (801374c <xTaskGetSchedulerState+0x38>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d102      	bne.n	8013736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013730:	2302      	movs	r3, #2
 8013732:	607b      	str	r3, [r7, #4]
 8013734:	e001      	b.n	801373a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013736:	2300      	movs	r3, #0
 8013738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801373a:	687b      	ldr	r3, [r7, #4]
	}
 801373c:	4618      	mov	r0, r3
 801373e:	370c      	adds	r7, #12
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr
 8013748:	24014a44 	.word	0x24014a44
 801374c:	24014a60 	.word	0x24014a60

08013750 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801375c:	2300      	movs	r3, #0
 801375e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d069      	beq.n	801383a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801376a:	4b36      	ldr	r3, [pc, #216]	; (8013844 <xTaskPriorityInherit+0xf4>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013770:	429a      	cmp	r2, r3
 8013772:	d259      	bcs.n	8013828 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	699b      	ldr	r3, [r3, #24]
 8013778:	2b00      	cmp	r3, #0
 801377a:	db06      	blt.n	801378a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801377c:	4b31      	ldr	r3, [pc, #196]	; (8013844 <xTaskPriorityInherit+0xf4>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013782:	f1c3 0207 	rsb	r2, r3, #7
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	6959      	ldr	r1, [r3, #20]
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013792:	4613      	mov	r3, r2
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	4413      	add	r3, r2
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	4a2b      	ldr	r2, [pc, #172]	; (8013848 <xTaskPriorityInherit+0xf8>)
 801379c:	4413      	add	r3, r2
 801379e:	4299      	cmp	r1, r3
 80137a0:	d13a      	bne.n	8013818 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	3304      	adds	r3, #4
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fe f92e 	bl	8011a08 <uxListRemove>
 80137ac:	4603      	mov	r3, r0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d115      	bne.n	80137de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b6:	4924      	ldr	r1, [pc, #144]	; (8013848 <xTaskPriorityInherit+0xf8>)
 80137b8:	4613      	mov	r3, r2
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	4413      	add	r3, r2
 80137be:	009b      	lsls	r3, r3, #2
 80137c0:	440b      	add	r3, r1
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10a      	bne.n	80137de <xTaskPriorityInherit+0x8e>
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137cc:	2201      	movs	r2, #1
 80137ce:	fa02 f303 	lsl.w	r3, r2, r3
 80137d2:	43da      	mvns	r2, r3
 80137d4:	4b1d      	ldr	r3, [pc, #116]	; (801384c <xTaskPriorityInherit+0xfc>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4013      	ands	r3, r2
 80137da:	4a1c      	ldr	r2, [pc, #112]	; (801384c <xTaskPriorityInherit+0xfc>)
 80137dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80137de:	4b19      	ldr	r3, [pc, #100]	; (8013844 <xTaskPriorityInherit+0xf4>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ec:	2201      	movs	r2, #1
 80137ee:	409a      	lsls	r2, r3
 80137f0:	4b16      	ldr	r3, [pc, #88]	; (801384c <xTaskPriorityInherit+0xfc>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4313      	orrs	r3, r2
 80137f6:	4a15      	ldr	r2, [pc, #84]	; (801384c <xTaskPriorityInherit+0xfc>)
 80137f8:	6013      	str	r3, [r2, #0]
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fe:	4613      	mov	r3, r2
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	4a10      	ldr	r2, [pc, #64]	; (8013848 <xTaskPriorityInherit+0xf8>)
 8013808:	441a      	add	r2, r3
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	3304      	adds	r3, #4
 801380e:	4619      	mov	r1, r3
 8013810:	4610      	mov	r0, r2
 8013812:	f7fe f89c 	bl	801194e <vListInsertEnd>
 8013816:	e004      	b.n	8013822 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013818:	4b0a      	ldr	r3, [pc, #40]	; (8013844 <xTaskPriorityInherit+0xf4>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013822:	2301      	movs	r3, #1
 8013824:	60fb      	str	r3, [r7, #12]
 8013826:	e008      	b.n	801383a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801382c:	4b05      	ldr	r3, [pc, #20]	; (8013844 <xTaskPriorityInherit+0xf4>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013832:	429a      	cmp	r2, r3
 8013834:	d201      	bcs.n	801383a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013836:	2301      	movs	r3, #1
 8013838:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801383a:	68fb      	ldr	r3, [r7, #12]
	}
 801383c:	4618      	mov	r0, r3
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	24014938 	.word	0x24014938
 8013848:	2401493c 	.word	0x2401493c
 801384c:	24014a40 	.word	0x24014a40

08013850 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013850:	b580      	push	{r7, lr}
 8013852:	b086      	sub	sp, #24
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801385c:	2300      	movs	r3, #0
 801385e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d06c      	beq.n	8013940 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013866:	4b39      	ldr	r3, [pc, #228]	; (801394c <xTaskPriorityDisinherit+0xfc>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	429a      	cmp	r2, r3
 801386e:	d009      	beq.n	8013884 <xTaskPriorityDisinherit+0x34>
 8013870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	60fb      	str	r3, [r7, #12]
 8013882:	e7fe      	b.n	8013882 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013888:	2b00      	cmp	r3, #0
 801388a:	d109      	bne.n	80138a0 <xTaskPriorityDisinherit+0x50>
 801388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	60bb      	str	r3, [r7, #8]
 801389e:	e7fe      	b.n	801389e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138a4:	1e5a      	subs	r2, r3, #1
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d044      	beq.n	8013940 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d140      	bne.n	8013940 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	3304      	adds	r3, #4
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fe f8a0 	bl	8011a08 <uxListRemove>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d115      	bne.n	80138fa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138d2:	491f      	ldr	r1, [pc, #124]	; (8013950 <xTaskPriorityDisinherit+0x100>)
 80138d4:	4613      	mov	r3, r2
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	4413      	add	r3, r2
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	440b      	add	r3, r1
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10a      	bne.n	80138fa <xTaskPriorityDisinherit+0xaa>
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e8:	2201      	movs	r2, #1
 80138ea:	fa02 f303 	lsl.w	r3, r2, r3
 80138ee:	43da      	mvns	r2, r3
 80138f0:	4b18      	ldr	r3, [pc, #96]	; (8013954 <xTaskPriorityDisinherit+0x104>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4013      	ands	r3, r2
 80138f6:	4a17      	ldr	r2, [pc, #92]	; (8013954 <xTaskPriorityDisinherit+0x104>)
 80138f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013906:	f1c3 0207 	rsb	r2, r3, #7
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013912:	2201      	movs	r2, #1
 8013914:	409a      	lsls	r2, r3
 8013916:	4b0f      	ldr	r3, [pc, #60]	; (8013954 <xTaskPriorityDisinherit+0x104>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4313      	orrs	r3, r2
 801391c:	4a0d      	ldr	r2, [pc, #52]	; (8013954 <xTaskPriorityDisinherit+0x104>)
 801391e:	6013      	str	r3, [r2, #0]
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013924:	4613      	mov	r3, r2
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	4413      	add	r3, r2
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	4a08      	ldr	r2, [pc, #32]	; (8013950 <xTaskPriorityDisinherit+0x100>)
 801392e:	441a      	add	r2, r3
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	3304      	adds	r3, #4
 8013934:	4619      	mov	r1, r3
 8013936:	4610      	mov	r0, r2
 8013938:	f7fe f809 	bl	801194e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801393c:	2301      	movs	r3, #1
 801393e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013940:	697b      	ldr	r3, [r7, #20]
	}
 8013942:	4618      	mov	r0, r3
 8013944:	3718      	adds	r7, #24
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	24014938 	.word	0x24014938
 8013950:	2401493c 	.word	0x2401493c
 8013954:	24014a40 	.word	0x24014a40

08013958 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013958:	b580      	push	{r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013966:	2301      	movs	r3, #1
 8013968:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	f000 8081 	beq.w	8013a74 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013976:	2b00      	cmp	r3, #0
 8013978:	d109      	bne.n	801398e <vTaskPriorityDisinheritAfterTimeout+0x36>
 801397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397e:	f383 8811 	msr	BASEPRI, r3
 8013982:	f3bf 8f6f 	isb	sy
 8013986:	f3bf 8f4f 	dsb	sy
 801398a:	60fb      	str	r3, [r7, #12]
 801398c:	e7fe      	b.n	801398c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013992:	683a      	ldr	r2, [r7, #0]
 8013994:	429a      	cmp	r2, r3
 8013996:	d902      	bls.n	801399e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	61fb      	str	r3, [r7, #28]
 801399c:	e002      	b.n	80139a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80139a4:	69bb      	ldr	r3, [r7, #24]
 80139a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a8:	69fa      	ldr	r2, [r7, #28]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d062      	beq.n	8013a74 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d15d      	bne.n	8013a74 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80139b8:	4b30      	ldr	r3, [pc, #192]	; (8013a7c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	69ba      	ldr	r2, [r7, #24]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d109      	bne.n	80139d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80139c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c6:	f383 8811 	msr	BASEPRI, r3
 80139ca:	f3bf 8f6f 	isb	sy
 80139ce:	f3bf 8f4f 	dsb	sy
 80139d2:	60bb      	str	r3, [r7, #8]
 80139d4:	e7fe      	b.n	80139d4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80139dc:	69bb      	ldr	r3, [r7, #24]
 80139de:	69fa      	ldr	r2, [r7, #28]
 80139e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80139e2:	69bb      	ldr	r3, [r7, #24]
 80139e4:	699b      	ldr	r3, [r3, #24]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	db04      	blt.n	80139f4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	f1c3 0207 	rsb	r2, r3, #7
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	6959      	ldr	r1, [r3, #20]
 80139f8:	693a      	ldr	r2, [r7, #16]
 80139fa:	4613      	mov	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	4413      	add	r3, r2
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	4a1f      	ldr	r2, [pc, #124]	; (8013a80 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013a04:	4413      	add	r3, r2
 8013a06:	4299      	cmp	r1, r3
 8013a08:	d134      	bne.n	8013a74 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fd fffa 	bl	8011a08 <uxListRemove>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d115      	bne.n	8013a46 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a1e:	4918      	ldr	r1, [pc, #96]	; (8013a80 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013a20:	4613      	mov	r3, r2
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	4413      	add	r3, r2
 8013a26:	009b      	lsls	r3, r3, #2
 8013a28:	440b      	add	r3, r1
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d10a      	bne.n	8013a46 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8013a30:	69bb      	ldr	r3, [r7, #24]
 8013a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a34:	2201      	movs	r2, #1
 8013a36:	fa02 f303 	lsl.w	r3, r2, r3
 8013a3a:	43da      	mvns	r2, r3
 8013a3c:	4b11      	ldr	r3, [pc, #68]	; (8013a84 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	4013      	ands	r3, r2
 8013a42:	4a10      	ldr	r2, [pc, #64]	; (8013a84 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	409a      	lsls	r2, r3
 8013a4e:	4b0d      	ldr	r3, [pc, #52]	; (8013a84 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	4313      	orrs	r3, r2
 8013a54:	4a0b      	ldr	r2, [pc, #44]	; (8013a84 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a56:	6013      	str	r3, [r2, #0]
 8013a58:	69bb      	ldr	r3, [r7, #24]
 8013a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	4413      	add	r3, r2
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	4a06      	ldr	r2, [pc, #24]	; (8013a80 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013a66:	441a      	add	r2, r3
 8013a68:	69bb      	ldr	r3, [r7, #24]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7fd ff6d 	bl	801194e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a74:	bf00      	nop
 8013a76:	3720      	adds	r7, #32
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	24014938 	.word	0x24014938
 8013a80:	2401493c 	.word	0x2401493c
 8013a84:	24014a40 	.word	0x24014a40

08013a88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013a88:	b480      	push	{r7}
 8013a8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013a8c:	4b07      	ldr	r3, [pc, #28]	; (8013aac <pvTaskIncrementMutexHeldCount+0x24>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d004      	beq.n	8013a9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013a94:	4b05      	ldr	r3, [pc, #20]	; (8013aac <pvTaskIncrementMutexHeldCount+0x24>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a9a:	3201      	adds	r2, #1
 8013a9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013a9e:	4b03      	ldr	r3, [pc, #12]	; (8013aac <pvTaskIncrementMutexHeldCount+0x24>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
	}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr
 8013aac:	24014938 	.word	0x24014938

08013ab0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b086      	sub	sp, #24
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	60b9      	str	r1, [r7, #8]
 8013aba:	607a      	str	r2, [r7, #4]
 8013abc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013abe:	f000 fb65 	bl	801418c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013ac2:	4b26      	ldr	r3, [pc, #152]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	2b02      	cmp	r3, #2
 8013ace:	d01a      	beq.n	8013b06 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013ad0:	4b22      	ldr	r3, [pc, #136]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	43d2      	mvns	r2, r2
 8013ada:	400a      	ands	r2, r1
 8013adc:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013ade:	4b1f      	ldr	r3, [pc, #124]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00b      	beq.n	8013b06 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013aee:	2101      	movs	r1, #1
 8013af0:	6838      	ldr	r0, [r7, #0]
 8013af2:	f000 f9c1 	bl	8013e78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013af6:	4b1a      	ldr	r3, [pc, #104]	; (8013b60 <xTaskNotifyWait+0xb0>)
 8013af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013b06:	f000 fb6f 	bl	80141e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013b0a:	f000 fb3f 	bl	801418c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d004      	beq.n	8013b1e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013b14:	4b11      	ldr	r3, [pc, #68]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013b1e:	4b0f      	ldr	r3, [pc, #60]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b02      	cmp	r3, #2
 8013b2a:	d002      	beq.n	8013b32 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	e008      	b.n	8013b44 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013b32:	4b0a      	ldr	r3, [pc, #40]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	43d2      	mvns	r2, r2
 8013b3c:	400a      	ands	r2, r1
 8013b3e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013b40:	2301      	movs	r3, #1
 8013b42:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b44:	4b05      	ldr	r3, [pc, #20]	; (8013b5c <xTaskNotifyWait+0xac>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013b4e:	f000 fb4b 	bl	80141e8 <vPortExitCritical>

		return xReturn;
 8013b52:	697b      	ldr	r3, [r7, #20]
	}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3718      	adds	r7, #24
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	24014938 	.word	0x24014938
 8013b60:	e000ed04 	.word	0xe000ed04

08013b64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b08a      	sub	sp, #40	; 0x28
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	60b9      	str	r1, [r7, #8]
 8013b6e:	603b      	str	r3, [r7, #0]
 8013b70:	4613      	mov	r3, r2
 8013b72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013b74:	2301      	movs	r3, #1
 8013b76:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d109      	bne.n	8013b92 <xTaskGenericNotify+0x2e>
 8013b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b82:	f383 8811 	msr	BASEPRI, r3
 8013b86:	f3bf 8f6f 	isb	sy
 8013b8a:	f3bf 8f4f 	dsb	sy
 8013b8e:	61bb      	str	r3, [r7, #24]
 8013b90:	e7fe      	b.n	8013b90 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013b96:	f000 faf9 	bl	801418c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d003      	beq.n	8013ba8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013ba0:	6a3b      	ldr	r3, [r7, #32]
 8013ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013ba8:	6a3b      	ldr	r3, [r7, #32]
 8013baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013bae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013bb0:	6a3b      	ldr	r3, [r7, #32]
 8013bb2:	2202      	movs	r2, #2
 8013bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013bb8:	79fb      	ldrb	r3, [r7, #7]
 8013bba:	2b04      	cmp	r3, #4
 8013bbc:	d827      	bhi.n	8013c0e <xTaskGenericNotify+0xaa>
 8013bbe:	a201      	add	r2, pc, #4	; (adr r2, 8013bc4 <xTaskGenericNotify+0x60>)
 8013bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc4:	08013c2d 	.word	0x08013c2d
 8013bc8:	08013bd9 	.word	0x08013bd9
 8013bcc:	08013be7 	.word	0x08013be7
 8013bd0:	08013bf3 	.word	0x08013bf3
 8013bd4:	08013bfb 	.word	0x08013bfb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013bd8:	6a3b      	ldr	r3, [r7, #32]
 8013bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	431a      	orrs	r2, r3
 8013be0:	6a3b      	ldr	r3, [r7, #32]
 8013be2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013be4:	e025      	b.n	8013c32 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013be6:	6a3b      	ldr	r3, [r7, #32]
 8013be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bea:	1c5a      	adds	r2, r3, #1
 8013bec:	6a3b      	ldr	r3, [r7, #32]
 8013bee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013bf0:	e01f      	b.n	8013c32 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013bf2:	6a3b      	ldr	r3, [r7, #32]
 8013bf4:	68ba      	ldr	r2, [r7, #8]
 8013bf6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013bf8:	e01b      	b.n	8013c32 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013bfa:	7ffb      	ldrb	r3, [r7, #31]
 8013bfc:	2b02      	cmp	r3, #2
 8013bfe:	d003      	beq.n	8013c08 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013c00:	6a3b      	ldr	r3, [r7, #32]
 8013c02:	68ba      	ldr	r2, [r7, #8]
 8013c04:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013c06:	e014      	b.n	8013c32 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8013c08:	2300      	movs	r3, #0
 8013c0a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013c0c:	e011      	b.n	8013c32 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c16:	d00b      	beq.n	8013c30 <xTaskGenericNotify+0xcc>
 8013c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1c:	f383 8811 	msr	BASEPRI, r3
 8013c20:	f3bf 8f6f 	isb	sy
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	617b      	str	r3, [r7, #20]
 8013c2a:	e7fe      	b.n	8013c2a <xTaskGenericNotify+0xc6>
					break;
 8013c2c:	bf00      	nop
 8013c2e:	e000      	b.n	8013c32 <xTaskGenericNotify+0xce>

					break;
 8013c30:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013c32:	7ffb      	ldrb	r3, [r7, #31]
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d138      	bne.n	8013caa <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c38:	6a3b      	ldr	r3, [r7, #32]
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fd fee3 	bl	8011a08 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013c42:	6a3b      	ldr	r3, [r7, #32]
 8013c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c46:	2201      	movs	r2, #1
 8013c48:	409a      	lsls	r2, r3
 8013c4a:	4b1b      	ldr	r3, [pc, #108]	; (8013cb8 <xTaskGenericNotify+0x154>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	4a19      	ldr	r2, [pc, #100]	; (8013cb8 <xTaskGenericNotify+0x154>)
 8013c52:	6013      	str	r3, [r2, #0]
 8013c54:	6a3b      	ldr	r3, [r7, #32]
 8013c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c58:	4613      	mov	r3, r2
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	4413      	add	r3, r2
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	4a16      	ldr	r2, [pc, #88]	; (8013cbc <xTaskGenericNotify+0x158>)
 8013c62:	441a      	add	r2, r3
 8013c64:	6a3b      	ldr	r3, [r7, #32]
 8013c66:	3304      	adds	r3, #4
 8013c68:	4619      	mov	r1, r3
 8013c6a:	4610      	mov	r0, r2
 8013c6c:	f7fd fe6f 	bl	801194e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013c70:	6a3b      	ldr	r3, [r7, #32]
 8013c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d009      	beq.n	8013c8c <xTaskGenericNotify+0x128>
 8013c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c7c:	f383 8811 	msr	BASEPRI, r3
 8013c80:	f3bf 8f6f 	isb	sy
 8013c84:	f3bf 8f4f 	dsb	sy
 8013c88:	613b      	str	r3, [r7, #16]
 8013c8a:	e7fe      	b.n	8013c8a <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c8c:	6a3b      	ldr	r3, [r7, #32]
 8013c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c90:	4b0b      	ldr	r3, [pc, #44]	; (8013cc0 <xTaskGenericNotify+0x15c>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d907      	bls.n	8013caa <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013c9a:	4b0a      	ldr	r3, [pc, #40]	; (8013cc4 <xTaskGenericNotify+0x160>)
 8013c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ca0:	601a      	str	r2, [r3, #0]
 8013ca2:	f3bf 8f4f 	dsb	sy
 8013ca6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013caa:	f000 fa9d 	bl	80141e8 <vPortExitCritical>

		return xReturn;
 8013cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3728      	adds	r7, #40	; 0x28
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	24014a40 	.word	0x24014a40
 8013cbc:	2401493c 	.word	0x2401493c
 8013cc0:	24014938 	.word	0x24014938
 8013cc4:	e000ed04 	.word	0xe000ed04

08013cc8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b08e      	sub	sp, #56	; 0x38
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	603b      	str	r3, [r7, #0]
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013cd8:	2301      	movs	r3, #1
 8013cda:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d109      	bne.n	8013cf6 <xTaskGenericNotifyFromISR+0x2e>
 8013ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce6:	f383 8811 	msr	BASEPRI, r3
 8013cea:	f3bf 8f6f 	isb	sy
 8013cee:	f3bf 8f4f 	dsb	sy
 8013cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8013cf4:	e7fe      	b.n	8013cf4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cf6:	f000 fb25 	bl	8014344 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8013d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d06:	f383 8811 	msr	BASEPRI, r3
 8013d0a:	f3bf 8f6f 	isb	sy
 8013d0e:	f3bf 8f4f 	dsb	sy
 8013d12:	623a      	str	r2, [r7, #32]
 8013d14:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013d16:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d18:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d003      	beq.n	8013d28 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d34:	2202      	movs	r2, #2
 8013d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013d3a:	79fb      	ldrb	r3, [r7, #7]
 8013d3c:	2b04      	cmp	r3, #4
 8013d3e:	d829      	bhi.n	8013d94 <xTaskGenericNotifyFromISR+0xcc>
 8013d40:	a201      	add	r2, pc, #4	; (adr r2, 8013d48 <xTaskGenericNotifyFromISR+0x80>)
 8013d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d46:	bf00      	nop
 8013d48:	08013db3 	.word	0x08013db3
 8013d4c:	08013d5d 	.word	0x08013d5d
 8013d50:	08013d6b 	.word	0x08013d6b
 8013d54:	08013d77 	.word	0x08013d77
 8013d58:	08013d7f 	.word	0x08013d7f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	431a      	orrs	r2, r3
 8013d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d66:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013d68:	e026      	b.n	8013db8 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d6e:	1c5a      	adds	r2, r3, #1
 8013d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d72:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013d74:	e020      	b.n	8013db8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013d7c:	e01c      	b.n	8013db8 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013d82:	2b02      	cmp	r3, #2
 8013d84:	d003      	beq.n	8013d8e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013d8c:	e014      	b.n	8013db8 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013d92:	e011      	b.n	8013db8 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d9c:	d00b      	beq.n	8013db6 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8013d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da2:	f383 8811 	msr	BASEPRI, r3
 8013da6:	f3bf 8f6f 	isb	sy
 8013daa:	f3bf 8f4f 	dsb	sy
 8013dae:	61bb      	str	r3, [r7, #24]
 8013db0:	e7fe      	b.n	8013db0 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8013db2:	bf00      	nop
 8013db4:	e000      	b.n	8013db8 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8013db6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013db8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d144      	bne.n	8013e4a <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d009      	beq.n	8013ddc <xTaskGenericNotifyFromISR+0x114>
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	617b      	str	r3, [r7, #20]
 8013dda:	e7fe      	b.n	8013dda <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ddc:	4b20      	ldr	r3, [pc, #128]	; (8013e60 <xTaskGenericNotifyFromISR+0x198>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d11c      	bne.n	8013e1e <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de6:	3304      	adds	r3, #4
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fd fe0d 	bl	8011a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df2:	2201      	movs	r2, #1
 8013df4:	409a      	lsls	r2, r3
 8013df6:	4b1b      	ldr	r3, [pc, #108]	; (8013e64 <xTaskGenericNotifyFromISR+0x19c>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4313      	orrs	r3, r2
 8013dfc:	4a19      	ldr	r2, [pc, #100]	; (8013e64 <xTaskGenericNotifyFromISR+0x19c>)
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e04:	4613      	mov	r3, r2
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	4413      	add	r3, r2
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	4a16      	ldr	r2, [pc, #88]	; (8013e68 <xTaskGenericNotifyFromISR+0x1a0>)
 8013e0e:	441a      	add	r2, r3
 8013e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e12:	3304      	adds	r3, #4
 8013e14:	4619      	mov	r1, r3
 8013e16:	4610      	mov	r0, r2
 8013e18:	f7fd fd99 	bl	801194e <vListInsertEnd>
 8013e1c:	e005      	b.n	8013e2a <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e20:	3318      	adds	r3, #24
 8013e22:	4619      	mov	r1, r3
 8013e24:	4811      	ldr	r0, [pc, #68]	; (8013e6c <xTaskGenericNotifyFromISR+0x1a4>)
 8013e26:	f7fd fd92 	bl	801194e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e2e:	4b10      	ldr	r3, [pc, #64]	; (8013e70 <xTaskGenericNotifyFromISR+0x1a8>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d908      	bls.n	8013e4a <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d002      	beq.n	8013e44 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e40:	2201      	movs	r2, #1
 8013e42:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013e44:	4b0b      	ldr	r3, [pc, #44]	; (8013e74 <xTaskGenericNotifyFromISR+0x1ac>)
 8013e46:	2201      	movs	r2, #1
 8013e48:	601a      	str	r2, [r3, #0]
 8013e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3738      	adds	r7, #56	; 0x38
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	24014a60 	.word	0x24014a60
 8013e64:	24014a40 	.word	0x24014a40
 8013e68:	2401493c 	.word	0x2401493c
 8013e6c:	240149f8 	.word	0x240149f8
 8013e70:	24014938 	.word	0x24014938
 8013e74:	24014a4c 	.word	0x24014a4c

08013e78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013e82:	4b29      	ldr	r3, [pc, #164]	; (8013f28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e88:	4b28      	ldr	r3, [pc, #160]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	3304      	adds	r3, #4
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7fd fdba 	bl	8011a08 <uxListRemove>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d10b      	bne.n	8013eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013e9a:	4b24      	ldr	r3, [pc, #144]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ea6:	43da      	mvns	r2, r3
 8013ea8:	4b21      	ldr	r3, [pc, #132]	; (8013f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4013      	ands	r3, r2
 8013eae:	4a20      	ldr	r2, [pc, #128]	; (8013f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb8:	d10a      	bne.n	8013ed0 <prvAddCurrentTaskToDelayedList+0x58>
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d007      	beq.n	8013ed0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ec0:	4b1a      	ldr	r3, [pc, #104]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	481a      	ldr	r0, [pc, #104]	; (8013f34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013eca:	f7fd fd40 	bl	801194e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013ece:	e026      	b.n	8013f1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013ed0:	68fa      	ldr	r2, [r7, #12]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013ed8:	4b14      	ldr	r3, [pc, #80]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013ee0:	68ba      	ldr	r2, [r7, #8]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d209      	bcs.n	8013efc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ee8:	4b13      	ldr	r3, [pc, #76]	; (8013f38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	4b0f      	ldr	r3, [pc, #60]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	f7fd fd4e 	bl	8011996 <vListInsert>
}
 8013efa:	e010      	b.n	8013f1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013efc:	4b0f      	ldr	r3, [pc, #60]	; (8013f3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8013efe:	681a      	ldr	r2, [r3, #0]
 8013f00:	4b0a      	ldr	r3, [pc, #40]	; (8013f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	3304      	adds	r3, #4
 8013f06:	4619      	mov	r1, r3
 8013f08:	4610      	mov	r0, r2
 8013f0a:	f7fd fd44 	bl	8011996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013f0e:	4b0c      	ldr	r3, [pc, #48]	; (8013f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	68ba      	ldr	r2, [r7, #8]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d202      	bcs.n	8013f1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013f18:	4a09      	ldr	r2, [pc, #36]	; (8013f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	6013      	str	r3, [r2, #0]
}
 8013f1e:	bf00      	nop
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	24014a3c 	.word	0x24014a3c
 8013f2c:	24014938 	.word	0x24014938
 8013f30:	24014a40 	.word	0x24014a40
 8013f34:	24014a24 	.word	0x24014a24
 8013f38:	240149f4 	.word	0x240149f4
 8013f3c:	240149f0 	.word	0x240149f0
 8013f40:	24014a58 	.word	0x24014a58

08013f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013f44:	b480      	push	{r7}
 8013f46:	b085      	sub	sp, #20
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	3b04      	subs	r3, #4
 8013f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	3b04      	subs	r3, #4
 8013f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	f023 0201 	bic.w	r2, r3, #1
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	3b04      	subs	r3, #4
 8013f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013f74:	4a0c      	ldr	r2, [pc, #48]	; (8013fa8 <pxPortInitialiseStack+0x64>)
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	3b14      	subs	r3, #20
 8013f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	3b04      	subs	r3, #4
 8013f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f06f 0202 	mvn.w	r2, #2
 8013f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	3b20      	subs	r3, #32
 8013f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3714      	adds	r7, #20
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr
 8013fa8:	08013fad 	.word	0x08013fad

08013fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013fac:	b480      	push	{r7}
 8013fae:	b085      	sub	sp, #20
 8013fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013fb6:	4b11      	ldr	r3, [pc, #68]	; (8013ffc <prvTaskExitError+0x50>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fbe:	d009      	beq.n	8013fd4 <prvTaskExitError+0x28>
	__asm volatile
 8013fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc4:	f383 8811 	msr	BASEPRI, r3
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	60fb      	str	r3, [r7, #12]
 8013fd2:	e7fe      	b.n	8013fd2 <prvTaskExitError+0x26>
 8013fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd8:	f383 8811 	msr	BASEPRI, r3
 8013fdc:	f3bf 8f6f 	isb	sy
 8013fe0:	f3bf 8f4f 	dsb	sy
 8013fe4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013fe6:	bf00      	nop
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d0fc      	beq.n	8013fe8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013fee:	bf00      	nop
 8013ff0:	3714      	adds	r7, #20
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	24000010 	.word	0x24000010

08014000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014000:	4b07      	ldr	r3, [pc, #28]	; (8014020 <pxCurrentTCBConst2>)
 8014002:	6819      	ldr	r1, [r3, #0]
 8014004:	6808      	ldr	r0, [r1, #0]
 8014006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801400a:	f380 8809 	msr	PSP, r0
 801400e:	f3bf 8f6f 	isb	sy
 8014012:	f04f 0000 	mov.w	r0, #0
 8014016:	f380 8811 	msr	BASEPRI, r0
 801401a:	4770      	bx	lr
 801401c:	f3af 8000 	nop.w

08014020 <pxCurrentTCBConst2>:
 8014020:	24014938 	.word	0x24014938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014024:	bf00      	nop
 8014026:	bf00      	nop

08014028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014028:	4808      	ldr	r0, [pc, #32]	; (801404c <prvPortStartFirstTask+0x24>)
 801402a:	6800      	ldr	r0, [r0, #0]
 801402c:	6800      	ldr	r0, [r0, #0]
 801402e:	f380 8808 	msr	MSP, r0
 8014032:	f04f 0000 	mov.w	r0, #0
 8014036:	f380 8814 	msr	CONTROL, r0
 801403a:	b662      	cpsie	i
 801403c:	b661      	cpsie	f
 801403e:	f3bf 8f4f 	dsb	sy
 8014042:	f3bf 8f6f 	isb	sy
 8014046:	df00      	svc	0
 8014048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801404a:	bf00      	nop
 801404c:	e000ed08 	.word	0xe000ed08

08014050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014056:	4b44      	ldr	r3, [pc, #272]	; (8014168 <xPortStartScheduler+0x118>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a44      	ldr	r2, [pc, #272]	; (801416c <xPortStartScheduler+0x11c>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d109      	bne.n	8014074 <xPortStartScheduler+0x24>
 8014060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014064:	f383 8811 	msr	BASEPRI, r3
 8014068:	f3bf 8f6f 	isb	sy
 801406c:	f3bf 8f4f 	dsb	sy
 8014070:	613b      	str	r3, [r7, #16]
 8014072:	e7fe      	b.n	8014072 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014074:	4b3c      	ldr	r3, [pc, #240]	; (8014168 <xPortStartScheduler+0x118>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a3d      	ldr	r2, [pc, #244]	; (8014170 <xPortStartScheduler+0x120>)
 801407a:	4293      	cmp	r3, r2
 801407c:	d109      	bne.n	8014092 <xPortStartScheduler+0x42>
 801407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014082:	f383 8811 	msr	BASEPRI, r3
 8014086:	f3bf 8f6f 	isb	sy
 801408a:	f3bf 8f4f 	dsb	sy
 801408e:	60fb      	str	r3, [r7, #12]
 8014090:	e7fe      	b.n	8014090 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014092:	4b38      	ldr	r3, [pc, #224]	; (8014174 <xPortStartScheduler+0x124>)
 8014094:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	b2db      	uxtb	r3, r3
 801409c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	22ff      	movs	r2, #255	; 0xff
 80140a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80140ac:	78fb      	ldrb	r3, [r7, #3]
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80140b4:	b2da      	uxtb	r2, r3
 80140b6:	4b30      	ldr	r3, [pc, #192]	; (8014178 <xPortStartScheduler+0x128>)
 80140b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80140ba:	4b30      	ldr	r3, [pc, #192]	; (801417c <xPortStartScheduler+0x12c>)
 80140bc:	2207      	movs	r2, #7
 80140be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80140c0:	e009      	b.n	80140d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80140c2:	4b2e      	ldr	r3, [pc, #184]	; (801417c <xPortStartScheduler+0x12c>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	3b01      	subs	r3, #1
 80140c8:	4a2c      	ldr	r2, [pc, #176]	; (801417c <xPortStartScheduler+0x12c>)
 80140ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80140cc:	78fb      	ldrb	r3, [r7, #3]
 80140ce:	b2db      	uxtb	r3, r3
 80140d0:	005b      	lsls	r3, r3, #1
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80140d6:	78fb      	ldrb	r3, [r7, #3]
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140de:	2b80      	cmp	r3, #128	; 0x80
 80140e0:	d0ef      	beq.n	80140c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80140e2:	4b26      	ldr	r3, [pc, #152]	; (801417c <xPortStartScheduler+0x12c>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f1c3 0307 	rsb	r3, r3, #7
 80140ea:	2b04      	cmp	r3, #4
 80140ec:	d009      	beq.n	8014102 <xPortStartScheduler+0xb2>
 80140ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f2:	f383 8811 	msr	BASEPRI, r3
 80140f6:	f3bf 8f6f 	isb	sy
 80140fa:	f3bf 8f4f 	dsb	sy
 80140fe:	60bb      	str	r3, [r7, #8]
 8014100:	e7fe      	b.n	8014100 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014102:	4b1e      	ldr	r3, [pc, #120]	; (801417c <xPortStartScheduler+0x12c>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	021b      	lsls	r3, r3, #8
 8014108:	4a1c      	ldr	r2, [pc, #112]	; (801417c <xPortStartScheduler+0x12c>)
 801410a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801410c:	4b1b      	ldr	r3, [pc, #108]	; (801417c <xPortStartScheduler+0x12c>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014114:	4a19      	ldr	r2, [pc, #100]	; (801417c <xPortStartScheduler+0x12c>)
 8014116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	b2da      	uxtb	r2, r3
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014120:	4b17      	ldr	r3, [pc, #92]	; (8014180 <xPortStartScheduler+0x130>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	4a16      	ldr	r2, [pc, #88]	; (8014180 <xPortStartScheduler+0x130>)
 8014126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801412a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801412c:	4b14      	ldr	r3, [pc, #80]	; (8014180 <xPortStartScheduler+0x130>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	4a13      	ldr	r2, [pc, #76]	; (8014180 <xPortStartScheduler+0x130>)
 8014132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014138:	f000 f8d6 	bl	80142e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801413c:	4b11      	ldr	r3, [pc, #68]	; (8014184 <xPortStartScheduler+0x134>)
 801413e:	2200      	movs	r2, #0
 8014140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014142:	f000 f8f5 	bl	8014330 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014146:	4b10      	ldr	r3, [pc, #64]	; (8014188 <xPortStartScheduler+0x138>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a0f      	ldr	r2, [pc, #60]	; (8014188 <xPortStartScheduler+0x138>)
 801414c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014152:	f7ff ff69 	bl	8014028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014156:	f7ff f8a9 	bl	80132ac <vTaskSwitchContext>
	prvTaskExitError();
 801415a:	f7ff ff27 	bl	8013fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3718      	adds	r7, #24
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}
 8014168:	e000ed00 	.word	0xe000ed00
 801416c:	410fc271 	.word	0x410fc271
 8014170:	410fc270 	.word	0x410fc270
 8014174:	e000e400 	.word	0xe000e400
 8014178:	24014a64 	.word	0x24014a64
 801417c:	24014a68 	.word	0x24014a68
 8014180:	e000ed20 	.word	0xe000ed20
 8014184:	24000010 	.word	0x24000010
 8014188:	e000ef34 	.word	0xe000ef34

0801418c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80141a4:	4b0e      	ldr	r3, [pc, #56]	; (80141e0 <vPortEnterCritical+0x54>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	3301      	adds	r3, #1
 80141aa:	4a0d      	ldr	r2, [pc, #52]	; (80141e0 <vPortEnterCritical+0x54>)
 80141ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80141ae:	4b0c      	ldr	r3, [pc, #48]	; (80141e0 <vPortEnterCritical+0x54>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d10e      	bne.n	80141d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80141b6:	4b0b      	ldr	r3, [pc, #44]	; (80141e4 <vPortEnterCritical+0x58>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d009      	beq.n	80141d4 <vPortEnterCritical+0x48>
 80141c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c4:	f383 8811 	msr	BASEPRI, r3
 80141c8:	f3bf 8f6f 	isb	sy
 80141cc:	f3bf 8f4f 	dsb	sy
 80141d0:	603b      	str	r3, [r7, #0]
 80141d2:	e7fe      	b.n	80141d2 <vPortEnterCritical+0x46>
	}
}
 80141d4:	bf00      	nop
 80141d6:	370c      	adds	r7, #12
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr
 80141e0:	24000010 	.word	0x24000010
 80141e4:	e000ed04 	.word	0xe000ed04

080141e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80141ee:	4b11      	ldr	r3, [pc, #68]	; (8014234 <vPortExitCritical+0x4c>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d109      	bne.n	801420a <vPortExitCritical+0x22>
 80141f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fa:	f383 8811 	msr	BASEPRI, r3
 80141fe:	f3bf 8f6f 	isb	sy
 8014202:	f3bf 8f4f 	dsb	sy
 8014206:	607b      	str	r3, [r7, #4]
 8014208:	e7fe      	b.n	8014208 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801420a:	4b0a      	ldr	r3, [pc, #40]	; (8014234 <vPortExitCritical+0x4c>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	3b01      	subs	r3, #1
 8014210:	4a08      	ldr	r2, [pc, #32]	; (8014234 <vPortExitCritical+0x4c>)
 8014212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014214:	4b07      	ldr	r3, [pc, #28]	; (8014234 <vPortExitCritical+0x4c>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d104      	bne.n	8014226 <vPortExitCritical+0x3e>
 801421c:	2300      	movs	r3, #0
 801421e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014226:	bf00      	nop
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	24000010 	.word	0x24000010
	...

08014240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014240:	f3ef 8009 	mrs	r0, PSP
 8014244:	f3bf 8f6f 	isb	sy
 8014248:	4b15      	ldr	r3, [pc, #84]	; (80142a0 <pxCurrentTCBConst>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	f01e 0f10 	tst.w	lr, #16
 8014250:	bf08      	it	eq
 8014252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425a:	6010      	str	r0, [r2, #0]
 801425c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014264:	f380 8811 	msr	BASEPRI, r0
 8014268:	f3bf 8f4f 	dsb	sy
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	f7ff f81c 	bl	80132ac <vTaskSwitchContext>
 8014274:	f04f 0000 	mov.w	r0, #0
 8014278:	f380 8811 	msr	BASEPRI, r0
 801427c:	bc09      	pop	{r0, r3}
 801427e:	6819      	ldr	r1, [r3, #0]
 8014280:	6808      	ldr	r0, [r1, #0]
 8014282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014286:	f01e 0f10 	tst.w	lr, #16
 801428a:	bf08      	it	eq
 801428c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014290:	f380 8809 	msr	PSP, r0
 8014294:	f3bf 8f6f 	isb	sy
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop
 801429c:	f3af 8000 	nop.w

080142a0 <pxCurrentTCBConst>:
 80142a0:	24014938 	.word	0x24014938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80142a4:	bf00      	nop
 80142a6:	bf00      	nop

080142a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
	__asm volatile
 80142ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b2:	f383 8811 	msr	BASEPRI, r3
 80142b6:	f3bf 8f6f 	isb	sy
 80142ba:	f3bf 8f4f 	dsb	sy
 80142be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80142c0:	f7fe ff3c 	bl	801313c <xTaskIncrementTick>
 80142c4:	4603      	mov	r3, r0
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d003      	beq.n	80142d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80142ca:	4b06      	ldr	r3, [pc, #24]	; (80142e4 <SysTick_Handler+0x3c>)
 80142cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142d0:	601a      	str	r2, [r3, #0]
 80142d2:	2300      	movs	r3, #0
 80142d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80142dc:	bf00      	nop
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	e000ed04 	.word	0xe000ed04

080142e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80142e8:	b480      	push	{r7}
 80142ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80142ec:	4b0b      	ldr	r3, [pc, #44]	; (801431c <vPortSetupTimerInterrupt+0x34>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80142f2:	4b0b      	ldr	r3, [pc, #44]	; (8014320 <vPortSetupTimerInterrupt+0x38>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80142f8:	4b0a      	ldr	r3, [pc, #40]	; (8014324 <vPortSetupTimerInterrupt+0x3c>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4a0a      	ldr	r2, [pc, #40]	; (8014328 <vPortSetupTimerInterrupt+0x40>)
 80142fe:	fba2 2303 	umull	r2, r3, r2, r3
 8014302:	099b      	lsrs	r3, r3, #6
 8014304:	4a09      	ldr	r2, [pc, #36]	; (801432c <vPortSetupTimerInterrupt+0x44>)
 8014306:	3b01      	subs	r3, #1
 8014308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801430a:	4b04      	ldr	r3, [pc, #16]	; (801431c <vPortSetupTimerInterrupt+0x34>)
 801430c:	2207      	movs	r2, #7
 801430e:	601a      	str	r2, [r3, #0]
}
 8014310:	bf00      	nop
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr
 801431a:	bf00      	nop
 801431c:	e000e010 	.word	0xe000e010
 8014320:	e000e018 	.word	0xe000e018
 8014324:	24000000 	.word	0x24000000
 8014328:	10624dd3 	.word	0x10624dd3
 801432c:	e000e014 	.word	0xe000e014

08014330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014340 <vPortEnableVFP+0x10>
 8014334:	6801      	ldr	r1, [r0, #0]
 8014336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801433a:	6001      	str	r1, [r0, #0]
 801433c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801433e:	bf00      	nop
 8014340:	e000ed88 	.word	0xe000ed88

08014344 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014344:	b480      	push	{r7}
 8014346:	b085      	sub	sp, #20
 8014348:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801434a:	f3ef 8305 	mrs	r3, IPSR
 801434e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2b0f      	cmp	r3, #15
 8014354:	d913      	bls.n	801437e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014356:	4a16      	ldr	r2, [pc, #88]	; (80143b0 <vPortValidateInterruptPriority+0x6c>)
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	4413      	add	r3, r2
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014360:	4b14      	ldr	r3, [pc, #80]	; (80143b4 <vPortValidateInterruptPriority+0x70>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	7afa      	ldrb	r2, [r7, #11]
 8014366:	429a      	cmp	r2, r3
 8014368:	d209      	bcs.n	801437e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436e:	f383 8811 	msr	BASEPRI, r3
 8014372:	f3bf 8f6f 	isb	sy
 8014376:	f3bf 8f4f 	dsb	sy
 801437a:	607b      	str	r3, [r7, #4]
 801437c:	e7fe      	b.n	801437c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801437e:	4b0e      	ldr	r3, [pc, #56]	; (80143b8 <vPortValidateInterruptPriority+0x74>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014386:	4b0d      	ldr	r3, [pc, #52]	; (80143bc <vPortValidateInterruptPriority+0x78>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	429a      	cmp	r2, r3
 801438c:	d909      	bls.n	80143a2 <vPortValidateInterruptPriority+0x5e>
 801438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014392:	f383 8811 	msr	BASEPRI, r3
 8014396:	f3bf 8f6f 	isb	sy
 801439a:	f3bf 8f4f 	dsb	sy
 801439e:	603b      	str	r3, [r7, #0]
 80143a0:	e7fe      	b.n	80143a0 <vPortValidateInterruptPriority+0x5c>
	}
 80143a2:	bf00      	nop
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr
 80143ae:	bf00      	nop
 80143b0:	e000e3f0 	.word	0xe000e3f0
 80143b4:	24014a64 	.word	0x24014a64
 80143b8:	e000ed0c 	.word	0xe000ed0c
 80143bc:	24014a68 	.word	0x24014a68

080143c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b08a      	sub	sp, #40	; 0x28
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80143c8:	2300      	movs	r3, #0
 80143ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80143cc:	f7fe fdea 	bl	8012fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80143d0:	4b57      	ldr	r3, [pc, #348]	; (8014530 <pvPortMalloc+0x170>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d101      	bne.n	80143dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80143d8:	f000 f90c 	bl	80145f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80143dc:	4b55      	ldr	r3, [pc, #340]	; (8014534 <pvPortMalloc+0x174>)
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4013      	ands	r3, r2
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f040 808c 	bne.w	8014502 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d01c      	beq.n	801442a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80143f0:	2208      	movs	r2, #8
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	4413      	add	r3, r2
 80143f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f003 0307 	and.w	r3, r3, #7
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d013      	beq.n	801442a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f023 0307 	bic.w	r3, r3, #7
 8014408:	3308      	adds	r3, #8
 801440a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f003 0307 	and.w	r3, r3, #7
 8014412:	2b00      	cmp	r3, #0
 8014414:	d009      	beq.n	801442a <pvPortMalloc+0x6a>
 8014416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441a:	f383 8811 	msr	BASEPRI, r3
 801441e:	f3bf 8f6f 	isb	sy
 8014422:	f3bf 8f4f 	dsb	sy
 8014426:	617b      	str	r3, [r7, #20]
 8014428:	e7fe      	b.n	8014428 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d068      	beq.n	8014502 <pvPortMalloc+0x142>
 8014430:	4b41      	ldr	r3, [pc, #260]	; (8014538 <pvPortMalloc+0x178>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	687a      	ldr	r2, [r7, #4]
 8014436:	429a      	cmp	r2, r3
 8014438:	d863      	bhi.n	8014502 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801443a:	4b40      	ldr	r3, [pc, #256]	; (801453c <pvPortMalloc+0x17c>)
 801443c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801443e:	4b3f      	ldr	r3, [pc, #252]	; (801453c <pvPortMalloc+0x17c>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014444:	e004      	b.n	8014450 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	429a      	cmp	r2, r3
 8014458:	d903      	bls.n	8014462 <pvPortMalloc+0xa2>
 801445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d1f1      	bne.n	8014446 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014462:	4b33      	ldr	r3, [pc, #204]	; (8014530 <pvPortMalloc+0x170>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014468:	429a      	cmp	r2, r3
 801446a:	d04a      	beq.n	8014502 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801446c:	6a3b      	ldr	r3, [r7, #32]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2208      	movs	r2, #8
 8014472:	4413      	add	r3, r2
 8014474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	6a3b      	ldr	r3, [r7, #32]
 801447c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014480:	685a      	ldr	r2, [r3, #4]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	1ad2      	subs	r2, r2, r3
 8014486:	2308      	movs	r3, #8
 8014488:	005b      	lsls	r3, r3, #1
 801448a:	429a      	cmp	r2, r3
 801448c:	d91e      	bls.n	80144cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4413      	add	r3, r2
 8014494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	f003 0307 	and.w	r3, r3, #7
 801449c:	2b00      	cmp	r3, #0
 801449e:	d009      	beq.n	80144b4 <pvPortMalloc+0xf4>
 80144a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a4:	f383 8811 	msr	BASEPRI, r3
 80144a8:	f3bf 8f6f 	isb	sy
 80144ac:	f3bf 8f4f 	dsb	sy
 80144b0:	613b      	str	r3, [r7, #16]
 80144b2:	e7fe      	b.n	80144b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80144b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	1ad2      	subs	r2, r2, r3
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80144c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c2:	687a      	ldr	r2, [r7, #4]
 80144c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80144c6:	69b8      	ldr	r0, [r7, #24]
 80144c8:	f000 f8f6 	bl	80146b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80144cc:	4b1a      	ldr	r3, [pc, #104]	; (8014538 <pvPortMalloc+0x178>)
 80144ce:	681a      	ldr	r2, [r3, #0]
 80144d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	4a18      	ldr	r2, [pc, #96]	; (8014538 <pvPortMalloc+0x178>)
 80144d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80144da:	4b17      	ldr	r3, [pc, #92]	; (8014538 <pvPortMalloc+0x178>)
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	4b18      	ldr	r3, [pc, #96]	; (8014540 <pvPortMalloc+0x180>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d203      	bcs.n	80144ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80144e6:	4b14      	ldr	r3, [pc, #80]	; (8014538 <pvPortMalloc+0x178>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a15      	ldr	r2, [pc, #84]	; (8014540 <pvPortMalloc+0x180>)
 80144ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80144ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f0:	685a      	ldr	r2, [r3, #4]
 80144f2:	4b10      	ldr	r3, [pc, #64]	; (8014534 <pvPortMalloc+0x174>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	431a      	orrs	r2, r3
 80144f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80144fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fe:	2200      	movs	r2, #0
 8014500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014502:	f7fe fd5d 	bl	8012fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014506:	69fb      	ldr	r3, [r7, #28]
 8014508:	f003 0307 	and.w	r3, r3, #7
 801450c:	2b00      	cmp	r3, #0
 801450e:	d009      	beq.n	8014524 <pvPortMalloc+0x164>
 8014510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014514:	f383 8811 	msr	BASEPRI, r3
 8014518:	f3bf 8f6f 	isb	sy
 801451c:	f3bf 8f4f 	dsb	sy
 8014520:	60fb      	str	r3, [r7, #12]
 8014522:	e7fe      	b.n	8014522 <pvPortMalloc+0x162>
	return pvReturn;
 8014524:	69fb      	ldr	r3, [r7, #28]
}
 8014526:	4618      	mov	r0, r3
 8014528:	3728      	adds	r7, #40	; 0x28
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	24064a74 	.word	0x24064a74
 8014534:	24064a80 	.word	0x24064a80
 8014538:	24064a78 	.word	0x24064a78
 801453c:	24064a6c 	.word	0x24064a6c
 8014540:	24064a7c 	.word	0x24064a7c

08014544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d046      	beq.n	80145e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014556:	2308      	movs	r3, #8
 8014558:	425b      	negs	r3, r3
 801455a:	697a      	ldr	r2, [r7, #20]
 801455c:	4413      	add	r3, r2
 801455e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	685a      	ldr	r2, [r3, #4]
 8014568:	4b20      	ldr	r3, [pc, #128]	; (80145ec <vPortFree+0xa8>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	4013      	ands	r3, r2
 801456e:	2b00      	cmp	r3, #0
 8014570:	d109      	bne.n	8014586 <vPortFree+0x42>
 8014572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014576:	f383 8811 	msr	BASEPRI, r3
 801457a:	f3bf 8f6f 	isb	sy
 801457e:	f3bf 8f4f 	dsb	sy
 8014582:	60fb      	str	r3, [r7, #12]
 8014584:	e7fe      	b.n	8014584 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d009      	beq.n	80145a2 <vPortFree+0x5e>
 801458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	60bb      	str	r3, [r7, #8]
 80145a0:	e7fe      	b.n	80145a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	685a      	ldr	r2, [r3, #4]
 80145a6:	4b11      	ldr	r3, [pc, #68]	; (80145ec <vPortFree+0xa8>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	4013      	ands	r3, r2
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d019      	beq.n	80145e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80145b0:	693b      	ldr	r3, [r7, #16]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d115      	bne.n	80145e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	685a      	ldr	r2, [r3, #4]
 80145bc:	4b0b      	ldr	r3, [pc, #44]	; (80145ec <vPortFree+0xa8>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	43db      	mvns	r3, r3
 80145c2:	401a      	ands	r2, r3
 80145c4:	693b      	ldr	r3, [r7, #16]
 80145c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80145c8:	f7fe fcec 	bl	8012fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	685a      	ldr	r2, [r3, #4]
 80145d0:	4b07      	ldr	r3, [pc, #28]	; (80145f0 <vPortFree+0xac>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4413      	add	r3, r2
 80145d6:	4a06      	ldr	r2, [pc, #24]	; (80145f0 <vPortFree+0xac>)
 80145d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80145da:	6938      	ldr	r0, [r7, #16]
 80145dc:	f000 f86c 	bl	80146b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80145e0:	f7fe fcee 	bl	8012fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80145e4:	bf00      	nop
 80145e6:	3718      	adds	r7, #24
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	24064a80 	.word	0x24064a80
 80145f0:	24064a78 	.word	0x24064a78

080145f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80145f4:	b480      	push	{r7}
 80145f6:	b085      	sub	sp, #20
 80145f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80145fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80145fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014600:	4b27      	ldr	r3, [pc, #156]	; (80146a0 <prvHeapInit+0xac>)
 8014602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f003 0307 	and.w	r3, r3, #7
 801460a:	2b00      	cmp	r3, #0
 801460c:	d00c      	beq.n	8014628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	3307      	adds	r3, #7
 8014612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f023 0307 	bic.w	r3, r3, #7
 801461a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	4a1f      	ldr	r2, [pc, #124]	; (80146a0 <prvHeapInit+0xac>)
 8014624:	4413      	add	r3, r2
 8014626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801462c:	4a1d      	ldr	r2, [pc, #116]	; (80146a4 <prvHeapInit+0xb0>)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014632:	4b1c      	ldr	r3, [pc, #112]	; (80146a4 <prvHeapInit+0xb0>)
 8014634:	2200      	movs	r2, #0
 8014636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	68ba      	ldr	r2, [r7, #8]
 801463c:	4413      	add	r3, r2
 801463e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014640:	2208      	movs	r2, #8
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	1a9b      	subs	r3, r3, r2
 8014646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f023 0307 	bic.w	r3, r3, #7
 801464e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	4a15      	ldr	r2, [pc, #84]	; (80146a8 <prvHeapInit+0xb4>)
 8014654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014656:	4b14      	ldr	r3, [pc, #80]	; (80146a8 <prvHeapInit+0xb4>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	2200      	movs	r2, #0
 801465c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801465e:	4b12      	ldr	r3, [pc, #72]	; (80146a8 <prvHeapInit+0xb4>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	2200      	movs	r2, #0
 8014664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	1ad2      	subs	r2, r2, r3
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014674:	4b0c      	ldr	r3, [pc, #48]	; (80146a8 <prvHeapInit+0xb4>)
 8014676:	681a      	ldr	r2, [r3, #0]
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	4a0a      	ldr	r2, [pc, #40]	; (80146ac <prvHeapInit+0xb8>)
 8014682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	4a09      	ldr	r2, [pc, #36]	; (80146b0 <prvHeapInit+0xbc>)
 801468a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801468c:	4b09      	ldr	r3, [pc, #36]	; (80146b4 <prvHeapInit+0xc0>)
 801468e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014692:	601a      	str	r2, [r3, #0]
}
 8014694:	bf00      	nop
 8014696:	3714      	adds	r7, #20
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr
 80146a0:	24014a6c 	.word	0x24014a6c
 80146a4:	24064a6c 	.word	0x24064a6c
 80146a8:	24064a74 	.word	0x24064a74
 80146ac:	24064a7c 	.word	0x24064a7c
 80146b0:	24064a78 	.word	0x24064a78
 80146b4:	24064a80 	.word	0x24064a80

080146b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80146b8:	b480      	push	{r7}
 80146ba:	b085      	sub	sp, #20
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80146c0:	4b28      	ldr	r3, [pc, #160]	; (8014764 <prvInsertBlockIntoFreeList+0xac>)
 80146c2:	60fb      	str	r3, [r7, #12]
 80146c4:	e002      	b.n	80146cc <prvInsertBlockIntoFreeList+0x14>
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	60fb      	str	r3, [r7, #12]
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d8f7      	bhi.n	80146c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	68ba      	ldr	r2, [r7, #8]
 80146e0:	4413      	add	r3, r2
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d108      	bne.n	80146fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	685a      	ldr	r2, [r3, #4]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	441a      	add	r2, r3
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	68ba      	ldr	r2, [r7, #8]
 8014704:	441a      	add	r2, r3
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	429a      	cmp	r2, r3
 801470c:	d118      	bne.n	8014740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	681a      	ldr	r2, [r3, #0]
 8014712:	4b15      	ldr	r3, [pc, #84]	; (8014768 <prvInsertBlockIntoFreeList+0xb0>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	429a      	cmp	r2, r3
 8014718:	d00d      	beq.n	8014736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685a      	ldr	r2, [r3, #4]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	441a      	add	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	681a      	ldr	r2, [r3, #0]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	e008      	b.n	8014748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014736:	4b0c      	ldr	r3, [pc, #48]	; (8014768 <prvInsertBlockIntoFreeList+0xb0>)
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	601a      	str	r2, [r3, #0]
 801473e:	e003      	b.n	8014748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681a      	ldr	r2, [r3, #0]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014748:	68fa      	ldr	r2, [r7, #12]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	429a      	cmp	r2, r3
 801474e:	d002      	beq.n	8014756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014756:	bf00      	nop
 8014758:	3714      	adds	r7, #20
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr
 8014762:	bf00      	nop
 8014764:	24064a6c 	.word	0x24064a6c
 8014768:	24064a74 	.word	0x24064a74

0801476c <__errno>:
 801476c:	4b01      	ldr	r3, [pc, #4]	; (8014774 <__errno+0x8>)
 801476e:	6818      	ldr	r0, [r3, #0]
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	24000014 	.word	0x24000014

08014778 <__libc_init_array>:
 8014778:	b570      	push	{r4, r5, r6, lr}
 801477a:	4e0d      	ldr	r6, [pc, #52]	; (80147b0 <__libc_init_array+0x38>)
 801477c:	4c0d      	ldr	r4, [pc, #52]	; (80147b4 <__libc_init_array+0x3c>)
 801477e:	1ba4      	subs	r4, r4, r6
 8014780:	10a4      	asrs	r4, r4, #2
 8014782:	2500      	movs	r5, #0
 8014784:	42a5      	cmp	r5, r4
 8014786:	d109      	bne.n	801479c <__libc_init_array+0x24>
 8014788:	4e0b      	ldr	r6, [pc, #44]	; (80147b8 <__libc_init_array+0x40>)
 801478a:	4c0c      	ldr	r4, [pc, #48]	; (80147bc <__libc_init_array+0x44>)
 801478c:	f000 fc3c 	bl	8015008 <_init>
 8014790:	1ba4      	subs	r4, r4, r6
 8014792:	10a4      	asrs	r4, r4, #2
 8014794:	2500      	movs	r5, #0
 8014796:	42a5      	cmp	r5, r4
 8014798:	d105      	bne.n	80147a6 <__libc_init_array+0x2e>
 801479a:	bd70      	pop	{r4, r5, r6, pc}
 801479c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80147a0:	4798      	blx	r3
 80147a2:	3501      	adds	r5, #1
 80147a4:	e7ee      	b.n	8014784 <__libc_init_array+0xc>
 80147a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80147aa:	4798      	blx	r3
 80147ac:	3501      	adds	r5, #1
 80147ae:	e7f2      	b.n	8014796 <__libc_init_array+0x1e>
 80147b0:	080151e4 	.word	0x080151e4
 80147b4:	080151e4 	.word	0x080151e4
 80147b8:	080151e4 	.word	0x080151e4
 80147bc:	080151e8 	.word	0x080151e8

080147c0 <memcpy>:
 80147c0:	b510      	push	{r4, lr}
 80147c2:	1e43      	subs	r3, r0, #1
 80147c4:	440a      	add	r2, r1
 80147c6:	4291      	cmp	r1, r2
 80147c8:	d100      	bne.n	80147cc <memcpy+0xc>
 80147ca:	bd10      	pop	{r4, pc}
 80147cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147d4:	e7f7      	b.n	80147c6 <memcpy+0x6>

080147d6 <memset>:
 80147d6:	4402      	add	r2, r0
 80147d8:	4603      	mov	r3, r0
 80147da:	4293      	cmp	r3, r2
 80147dc:	d100      	bne.n	80147e0 <memset+0xa>
 80147de:	4770      	bx	lr
 80147e0:	f803 1b01 	strb.w	r1, [r3], #1
 80147e4:	e7f9      	b.n	80147da <memset+0x4>
	...

080147e8 <sniprintf>:
 80147e8:	b40c      	push	{r2, r3}
 80147ea:	b530      	push	{r4, r5, lr}
 80147ec:	4b17      	ldr	r3, [pc, #92]	; (801484c <sniprintf+0x64>)
 80147ee:	1e0c      	subs	r4, r1, #0
 80147f0:	b09d      	sub	sp, #116	; 0x74
 80147f2:	681d      	ldr	r5, [r3, #0]
 80147f4:	da08      	bge.n	8014808 <sniprintf+0x20>
 80147f6:	238b      	movs	r3, #139	; 0x8b
 80147f8:	602b      	str	r3, [r5, #0]
 80147fa:	f04f 30ff 	mov.w	r0, #4294967295
 80147fe:	b01d      	add	sp, #116	; 0x74
 8014800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014804:	b002      	add	sp, #8
 8014806:	4770      	bx	lr
 8014808:	f44f 7302 	mov.w	r3, #520	; 0x208
 801480c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014810:	bf14      	ite	ne
 8014812:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014816:	4623      	moveq	r3, r4
 8014818:	9304      	str	r3, [sp, #16]
 801481a:	9307      	str	r3, [sp, #28]
 801481c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014820:	9002      	str	r0, [sp, #8]
 8014822:	9006      	str	r0, [sp, #24]
 8014824:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014828:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801482a:	ab21      	add	r3, sp, #132	; 0x84
 801482c:	a902      	add	r1, sp, #8
 801482e:	4628      	mov	r0, r5
 8014830:	9301      	str	r3, [sp, #4]
 8014832:	f000 f867 	bl	8014904 <_svfiprintf_r>
 8014836:	1c43      	adds	r3, r0, #1
 8014838:	bfbc      	itt	lt
 801483a:	238b      	movlt	r3, #139	; 0x8b
 801483c:	602b      	strlt	r3, [r5, #0]
 801483e:	2c00      	cmp	r4, #0
 8014840:	d0dd      	beq.n	80147fe <sniprintf+0x16>
 8014842:	9b02      	ldr	r3, [sp, #8]
 8014844:	2200      	movs	r2, #0
 8014846:	701a      	strb	r2, [r3, #0]
 8014848:	e7d9      	b.n	80147fe <sniprintf+0x16>
 801484a:	bf00      	nop
 801484c:	24000014 	.word	0x24000014

08014850 <__ssputs_r>:
 8014850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014854:	688e      	ldr	r6, [r1, #8]
 8014856:	429e      	cmp	r6, r3
 8014858:	4682      	mov	sl, r0
 801485a:	460c      	mov	r4, r1
 801485c:	4690      	mov	r8, r2
 801485e:	4699      	mov	r9, r3
 8014860:	d837      	bhi.n	80148d2 <__ssputs_r+0x82>
 8014862:	898a      	ldrh	r2, [r1, #12]
 8014864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014868:	d031      	beq.n	80148ce <__ssputs_r+0x7e>
 801486a:	6825      	ldr	r5, [r4, #0]
 801486c:	6909      	ldr	r1, [r1, #16]
 801486e:	1a6f      	subs	r7, r5, r1
 8014870:	6965      	ldr	r5, [r4, #20]
 8014872:	2302      	movs	r3, #2
 8014874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014878:	fb95 f5f3 	sdiv	r5, r5, r3
 801487c:	f109 0301 	add.w	r3, r9, #1
 8014880:	443b      	add	r3, r7
 8014882:	429d      	cmp	r5, r3
 8014884:	bf38      	it	cc
 8014886:	461d      	movcc	r5, r3
 8014888:	0553      	lsls	r3, r2, #21
 801488a:	d530      	bpl.n	80148ee <__ssputs_r+0x9e>
 801488c:	4629      	mov	r1, r5
 801488e:	f000 fb21 	bl	8014ed4 <_malloc_r>
 8014892:	4606      	mov	r6, r0
 8014894:	b950      	cbnz	r0, 80148ac <__ssputs_r+0x5c>
 8014896:	230c      	movs	r3, #12
 8014898:	f8ca 3000 	str.w	r3, [sl]
 801489c:	89a3      	ldrh	r3, [r4, #12]
 801489e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148a2:	81a3      	strh	r3, [r4, #12]
 80148a4:	f04f 30ff 	mov.w	r0, #4294967295
 80148a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ac:	463a      	mov	r2, r7
 80148ae:	6921      	ldr	r1, [r4, #16]
 80148b0:	f7ff ff86 	bl	80147c0 <memcpy>
 80148b4:	89a3      	ldrh	r3, [r4, #12]
 80148b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80148ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148be:	81a3      	strh	r3, [r4, #12]
 80148c0:	6126      	str	r6, [r4, #16]
 80148c2:	6165      	str	r5, [r4, #20]
 80148c4:	443e      	add	r6, r7
 80148c6:	1bed      	subs	r5, r5, r7
 80148c8:	6026      	str	r6, [r4, #0]
 80148ca:	60a5      	str	r5, [r4, #8]
 80148cc:	464e      	mov	r6, r9
 80148ce:	454e      	cmp	r6, r9
 80148d0:	d900      	bls.n	80148d4 <__ssputs_r+0x84>
 80148d2:	464e      	mov	r6, r9
 80148d4:	4632      	mov	r2, r6
 80148d6:	4641      	mov	r1, r8
 80148d8:	6820      	ldr	r0, [r4, #0]
 80148da:	f000 fa93 	bl	8014e04 <memmove>
 80148de:	68a3      	ldr	r3, [r4, #8]
 80148e0:	1b9b      	subs	r3, r3, r6
 80148e2:	60a3      	str	r3, [r4, #8]
 80148e4:	6823      	ldr	r3, [r4, #0]
 80148e6:	441e      	add	r6, r3
 80148e8:	6026      	str	r6, [r4, #0]
 80148ea:	2000      	movs	r0, #0
 80148ec:	e7dc      	b.n	80148a8 <__ssputs_r+0x58>
 80148ee:	462a      	mov	r2, r5
 80148f0:	f000 fb4a 	bl	8014f88 <_realloc_r>
 80148f4:	4606      	mov	r6, r0
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d1e2      	bne.n	80148c0 <__ssputs_r+0x70>
 80148fa:	6921      	ldr	r1, [r4, #16]
 80148fc:	4650      	mov	r0, sl
 80148fe:	f000 fa9b 	bl	8014e38 <_free_r>
 8014902:	e7c8      	b.n	8014896 <__ssputs_r+0x46>

08014904 <_svfiprintf_r>:
 8014904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014908:	461d      	mov	r5, r3
 801490a:	898b      	ldrh	r3, [r1, #12]
 801490c:	061f      	lsls	r7, r3, #24
 801490e:	b09d      	sub	sp, #116	; 0x74
 8014910:	4680      	mov	r8, r0
 8014912:	460c      	mov	r4, r1
 8014914:	4616      	mov	r6, r2
 8014916:	d50f      	bpl.n	8014938 <_svfiprintf_r+0x34>
 8014918:	690b      	ldr	r3, [r1, #16]
 801491a:	b96b      	cbnz	r3, 8014938 <_svfiprintf_r+0x34>
 801491c:	2140      	movs	r1, #64	; 0x40
 801491e:	f000 fad9 	bl	8014ed4 <_malloc_r>
 8014922:	6020      	str	r0, [r4, #0]
 8014924:	6120      	str	r0, [r4, #16]
 8014926:	b928      	cbnz	r0, 8014934 <_svfiprintf_r+0x30>
 8014928:	230c      	movs	r3, #12
 801492a:	f8c8 3000 	str.w	r3, [r8]
 801492e:	f04f 30ff 	mov.w	r0, #4294967295
 8014932:	e0c8      	b.n	8014ac6 <_svfiprintf_r+0x1c2>
 8014934:	2340      	movs	r3, #64	; 0x40
 8014936:	6163      	str	r3, [r4, #20]
 8014938:	2300      	movs	r3, #0
 801493a:	9309      	str	r3, [sp, #36]	; 0x24
 801493c:	2320      	movs	r3, #32
 801493e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014942:	2330      	movs	r3, #48	; 0x30
 8014944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014948:	9503      	str	r5, [sp, #12]
 801494a:	f04f 0b01 	mov.w	fp, #1
 801494e:	4637      	mov	r7, r6
 8014950:	463d      	mov	r5, r7
 8014952:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014956:	b10b      	cbz	r3, 801495c <_svfiprintf_r+0x58>
 8014958:	2b25      	cmp	r3, #37	; 0x25
 801495a:	d13e      	bne.n	80149da <_svfiprintf_r+0xd6>
 801495c:	ebb7 0a06 	subs.w	sl, r7, r6
 8014960:	d00b      	beq.n	801497a <_svfiprintf_r+0x76>
 8014962:	4653      	mov	r3, sl
 8014964:	4632      	mov	r2, r6
 8014966:	4621      	mov	r1, r4
 8014968:	4640      	mov	r0, r8
 801496a:	f7ff ff71 	bl	8014850 <__ssputs_r>
 801496e:	3001      	adds	r0, #1
 8014970:	f000 80a4 	beq.w	8014abc <_svfiprintf_r+0x1b8>
 8014974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014976:	4453      	add	r3, sl
 8014978:	9309      	str	r3, [sp, #36]	; 0x24
 801497a:	783b      	ldrb	r3, [r7, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	f000 809d 	beq.w	8014abc <_svfiprintf_r+0x1b8>
 8014982:	2300      	movs	r3, #0
 8014984:	f04f 32ff 	mov.w	r2, #4294967295
 8014988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801498c:	9304      	str	r3, [sp, #16]
 801498e:	9307      	str	r3, [sp, #28]
 8014990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014994:	931a      	str	r3, [sp, #104]	; 0x68
 8014996:	462f      	mov	r7, r5
 8014998:	2205      	movs	r2, #5
 801499a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801499e:	4850      	ldr	r0, [pc, #320]	; (8014ae0 <_svfiprintf_r+0x1dc>)
 80149a0:	f7eb fc9e 	bl	80002e0 <memchr>
 80149a4:	9b04      	ldr	r3, [sp, #16]
 80149a6:	b9d0      	cbnz	r0, 80149de <_svfiprintf_r+0xda>
 80149a8:	06d9      	lsls	r1, r3, #27
 80149aa:	bf44      	itt	mi
 80149ac:	2220      	movmi	r2, #32
 80149ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149b2:	071a      	lsls	r2, r3, #28
 80149b4:	bf44      	itt	mi
 80149b6:	222b      	movmi	r2, #43	; 0x2b
 80149b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149bc:	782a      	ldrb	r2, [r5, #0]
 80149be:	2a2a      	cmp	r2, #42	; 0x2a
 80149c0:	d015      	beq.n	80149ee <_svfiprintf_r+0xea>
 80149c2:	9a07      	ldr	r2, [sp, #28]
 80149c4:	462f      	mov	r7, r5
 80149c6:	2000      	movs	r0, #0
 80149c8:	250a      	movs	r5, #10
 80149ca:	4639      	mov	r1, r7
 80149cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149d0:	3b30      	subs	r3, #48	; 0x30
 80149d2:	2b09      	cmp	r3, #9
 80149d4:	d94d      	bls.n	8014a72 <_svfiprintf_r+0x16e>
 80149d6:	b1b8      	cbz	r0, 8014a08 <_svfiprintf_r+0x104>
 80149d8:	e00f      	b.n	80149fa <_svfiprintf_r+0xf6>
 80149da:	462f      	mov	r7, r5
 80149dc:	e7b8      	b.n	8014950 <_svfiprintf_r+0x4c>
 80149de:	4a40      	ldr	r2, [pc, #256]	; (8014ae0 <_svfiprintf_r+0x1dc>)
 80149e0:	1a80      	subs	r0, r0, r2
 80149e2:	fa0b f000 	lsl.w	r0, fp, r0
 80149e6:	4318      	orrs	r0, r3
 80149e8:	9004      	str	r0, [sp, #16]
 80149ea:	463d      	mov	r5, r7
 80149ec:	e7d3      	b.n	8014996 <_svfiprintf_r+0x92>
 80149ee:	9a03      	ldr	r2, [sp, #12]
 80149f0:	1d11      	adds	r1, r2, #4
 80149f2:	6812      	ldr	r2, [r2, #0]
 80149f4:	9103      	str	r1, [sp, #12]
 80149f6:	2a00      	cmp	r2, #0
 80149f8:	db01      	blt.n	80149fe <_svfiprintf_r+0xfa>
 80149fa:	9207      	str	r2, [sp, #28]
 80149fc:	e004      	b.n	8014a08 <_svfiprintf_r+0x104>
 80149fe:	4252      	negs	r2, r2
 8014a00:	f043 0302 	orr.w	r3, r3, #2
 8014a04:	9207      	str	r2, [sp, #28]
 8014a06:	9304      	str	r3, [sp, #16]
 8014a08:	783b      	ldrb	r3, [r7, #0]
 8014a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8014a0c:	d10c      	bne.n	8014a28 <_svfiprintf_r+0x124>
 8014a0e:	787b      	ldrb	r3, [r7, #1]
 8014a10:	2b2a      	cmp	r3, #42	; 0x2a
 8014a12:	d133      	bne.n	8014a7c <_svfiprintf_r+0x178>
 8014a14:	9b03      	ldr	r3, [sp, #12]
 8014a16:	1d1a      	adds	r2, r3, #4
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	9203      	str	r2, [sp, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	bfb8      	it	lt
 8014a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a24:	3702      	adds	r7, #2
 8014a26:	9305      	str	r3, [sp, #20]
 8014a28:	4d2e      	ldr	r5, [pc, #184]	; (8014ae4 <_svfiprintf_r+0x1e0>)
 8014a2a:	7839      	ldrb	r1, [r7, #0]
 8014a2c:	2203      	movs	r2, #3
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f7eb fc56 	bl	80002e0 <memchr>
 8014a34:	b138      	cbz	r0, 8014a46 <_svfiprintf_r+0x142>
 8014a36:	2340      	movs	r3, #64	; 0x40
 8014a38:	1b40      	subs	r0, r0, r5
 8014a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8014a3e:	9b04      	ldr	r3, [sp, #16]
 8014a40:	4303      	orrs	r3, r0
 8014a42:	3701      	adds	r7, #1
 8014a44:	9304      	str	r3, [sp, #16]
 8014a46:	7839      	ldrb	r1, [r7, #0]
 8014a48:	4827      	ldr	r0, [pc, #156]	; (8014ae8 <_svfiprintf_r+0x1e4>)
 8014a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a4e:	2206      	movs	r2, #6
 8014a50:	1c7e      	adds	r6, r7, #1
 8014a52:	f7eb fc45 	bl	80002e0 <memchr>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d038      	beq.n	8014acc <_svfiprintf_r+0x1c8>
 8014a5a:	4b24      	ldr	r3, [pc, #144]	; (8014aec <_svfiprintf_r+0x1e8>)
 8014a5c:	bb13      	cbnz	r3, 8014aa4 <_svfiprintf_r+0x1a0>
 8014a5e:	9b03      	ldr	r3, [sp, #12]
 8014a60:	3307      	adds	r3, #7
 8014a62:	f023 0307 	bic.w	r3, r3, #7
 8014a66:	3308      	adds	r3, #8
 8014a68:	9303      	str	r3, [sp, #12]
 8014a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a6c:	444b      	add	r3, r9
 8014a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a70:	e76d      	b.n	801494e <_svfiprintf_r+0x4a>
 8014a72:	fb05 3202 	mla	r2, r5, r2, r3
 8014a76:	2001      	movs	r0, #1
 8014a78:	460f      	mov	r7, r1
 8014a7a:	e7a6      	b.n	80149ca <_svfiprintf_r+0xc6>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	3701      	adds	r7, #1
 8014a80:	9305      	str	r3, [sp, #20]
 8014a82:	4619      	mov	r1, r3
 8014a84:	250a      	movs	r5, #10
 8014a86:	4638      	mov	r0, r7
 8014a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a8c:	3a30      	subs	r2, #48	; 0x30
 8014a8e:	2a09      	cmp	r2, #9
 8014a90:	d903      	bls.n	8014a9a <_svfiprintf_r+0x196>
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d0c8      	beq.n	8014a28 <_svfiprintf_r+0x124>
 8014a96:	9105      	str	r1, [sp, #20]
 8014a98:	e7c6      	b.n	8014a28 <_svfiprintf_r+0x124>
 8014a9a:	fb05 2101 	mla	r1, r5, r1, r2
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	4607      	mov	r7, r0
 8014aa2:	e7f0      	b.n	8014a86 <_svfiprintf_r+0x182>
 8014aa4:	ab03      	add	r3, sp, #12
 8014aa6:	9300      	str	r3, [sp, #0]
 8014aa8:	4622      	mov	r2, r4
 8014aaa:	4b11      	ldr	r3, [pc, #68]	; (8014af0 <_svfiprintf_r+0x1ec>)
 8014aac:	a904      	add	r1, sp, #16
 8014aae:	4640      	mov	r0, r8
 8014ab0:	f3af 8000 	nop.w
 8014ab4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014ab8:	4681      	mov	r9, r0
 8014aba:	d1d6      	bne.n	8014a6a <_svfiprintf_r+0x166>
 8014abc:	89a3      	ldrh	r3, [r4, #12]
 8014abe:	065b      	lsls	r3, r3, #25
 8014ac0:	f53f af35 	bmi.w	801492e <_svfiprintf_r+0x2a>
 8014ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ac6:	b01d      	add	sp, #116	; 0x74
 8014ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014acc:	ab03      	add	r3, sp, #12
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	4622      	mov	r2, r4
 8014ad2:	4b07      	ldr	r3, [pc, #28]	; (8014af0 <_svfiprintf_r+0x1ec>)
 8014ad4:	a904      	add	r1, sp, #16
 8014ad6:	4640      	mov	r0, r8
 8014ad8:	f000 f882 	bl	8014be0 <_printf_i>
 8014adc:	e7ea      	b.n	8014ab4 <_svfiprintf_r+0x1b0>
 8014ade:	bf00      	nop
 8014ae0:	080151a8 	.word	0x080151a8
 8014ae4:	080151ae 	.word	0x080151ae
 8014ae8:	080151b2 	.word	0x080151b2
 8014aec:	00000000 	.word	0x00000000
 8014af0:	08014851 	.word	0x08014851

08014af4 <_printf_common>:
 8014af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014af8:	4691      	mov	r9, r2
 8014afa:	461f      	mov	r7, r3
 8014afc:	688a      	ldr	r2, [r1, #8]
 8014afe:	690b      	ldr	r3, [r1, #16]
 8014b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b04:	4293      	cmp	r3, r2
 8014b06:	bfb8      	it	lt
 8014b08:	4613      	movlt	r3, r2
 8014b0a:	f8c9 3000 	str.w	r3, [r9]
 8014b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b12:	4606      	mov	r6, r0
 8014b14:	460c      	mov	r4, r1
 8014b16:	b112      	cbz	r2, 8014b1e <_printf_common+0x2a>
 8014b18:	3301      	adds	r3, #1
 8014b1a:	f8c9 3000 	str.w	r3, [r9]
 8014b1e:	6823      	ldr	r3, [r4, #0]
 8014b20:	0699      	lsls	r1, r3, #26
 8014b22:	bf42      	ittt	mi
 8014b24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014b28:	3302      	addmi	r3, #2
 8014b2a:	f8c9 3000 	strmi.w	r3, [r9]
 8014b2e:	6825      	ldr	r5, [r4, #0]
 8014b30:	f015 0506 	ands.w	r5, r5, #6
 8014b34:	d107      	bne.n	8014b46 <_printf_common+0x52>
 8014b36:	f104 0a19 	add.w	sl, r4, #25
 8014b3a:	68e3      	ldr	r3, [r4, #12]
 8014b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8014b40:	1a9b      	subs	r3, r3, r2
 8014b42:	42ab      	cmp	r3, r5
 8014b44:	dc28      	bgt.n	8014b98 <_printf_common+0xa4>
 8014b46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014b4a:	6822      	ldr	r2, [r4, #0]
 8014b4c:	3300      	adds	r3, #0
 8014b4e:	bf18      	it	ne
 8014b50:	2301      	movne	r3, #1
 8014b52:	0692      	lsls	r2, r2, #26
 8014b54:	d42d      	bmi.n	8014bb2 <_printf_common+0xbe>
 8014b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b5a:	4639      	mov	r1, r7
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	47c0      	blx	r8
 8014b60:	3001      	adds	r0, #1
 8014b62:	d020      	beq.n	8014ba6 <_printf_common+0xb2>
 8014b64:	6823      	ldr	r3, [r4, #0]
 8014b66:	68e5      	ldr	r5, [r4, #12]
 8014b68:	f8d9 2000 	ldr.w	r2, [r9]
 8014b6c:	f003 0306 	and.w	r3, r3, #6
 8014b70:	2b04      	cmp	r3, #4
 8014b72:	bf08      	it	eq
 8014b74:	1aad      	subeq	r5, r5, r2
 8014b76:	68a3      	ldr	r3, [r4, #8]
 8014b78:	6922      	ldr	r2, [r4, #16]
 8014b7a:	bf0c      	ite	eq
 8014b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b80:	2500      	movne	r5, #0
 8014b82:	4293      	cmp	r3, r2
 8014b84:	bfc4      	itt	gt
 8014b86:	1a9b      	subgt	r3, r3, r2
 8014b88:	18ed      	addgt	r5, r5, r3
 8014b8a:	f04f 0900 	mov.w	r9, #0
 8014b8e:	341a      	adds	r4, #26
 8014b90:	454d      	cmp	r5, r9
 8014b92:	d11a      	bne.n	8014bca <_printf_common+0xd6>
 8014b94:	2000      	movs	r0, #0
 8014b96:	e008      	b.n	8014baa <_printf_common+0xb6>
 8014b98:	2301      	movs	r3, #1
 8014b9a:	4652      	mov	r2, sl
 8014b9c:	4639      	mov	r1, r7
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	47c0      	blx	r8
 8014ba2:	3001      	adds	r0, #1
 8014ba4:	d103      	bne.n	8014bae <_printf_common+0xba>
 8014ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8014baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bae:	3501      	adds	r5, #1
 8014bb0:	e7c3      	b.n	8014b3a <_printf_common+0x46>
 8014bb2:	18e1      	adds	r1, r4, r3
 8014bb4:	1c5a      	adds	r2, r3, #1
 8014bb6:	2030      	movs	r0, #48	; 0x30
 8014bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014bbc:	4422      	add	r2, r4
 8014bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014bc6:	3302      	adds	r3, #2
 8014bc8:	e7c5      	b.n	8014b56 <_printf_common+0x62>
 8014bca:	2301      	movs	r3, #1
 8014bcc:	4622      	mov	r2, r4
 8014bce:	4639      	mov	r1, r7
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	47c0      	blx	r8
 8014bd4:	3001      	adds	r0, #1
 8014bd6:	d0e6      	beq.n	8014ba6 <_printf_common+0xb2>
 8014bd8:	f109 0901 	add.w	r9, r9, #1
 8014bdc:	e7d8      	b.n	8014b90 <_printf_common+0x9c>
	...

08014be0 <_printf_i>:
 8014be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014be4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014be8:	460c      	mov	r4, r1
 8014bea:	7e09      	ldrb	r1, [r1, #24]
 8014bec:	b085      	sub	sp, #20
 8014bee:	296e      	cmp	r1, #110	; 0x6e
 8014bf0:	4617      	mov	r7, r2
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	4698      	mov	r8, r3
 8014bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bf8:	f000 80b3 	beq.w	8014d62 <_printf_i+0x182>
 8014bfc:	d822      	bhi.n	8014c44 <_printf_i+0x64>
 8014bfe:	2963      	cmp	r1, #99	; 0x63
 8014c00:	d036      	beq.n	8014c70 <_printf_i+0x90>
 8014c02:	d80a      	bhi.n	8014c1a <_printf_i+0x3a>
 8014c04:	2900      	cmp	r1, #0
 8014c06:	f000 80b9 	beq.w	8014d7c <_printf_i+0x19c>
 8014c0a:	2958      	cmp	r1, #88	; 0x58
 8014c0c:	f000 8083 	beq.w	8014d16 <_printf_i+0x136>
 8014c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014c18:	e032      	b.n	8014c80 <_printf_i+0xa0>
 8014c1a:	2964      	cmp	r1, #100	; 0x64
 8014c1c:	d001      	beq.n	8014c22 <_printf_i+0x42>
 8014c1e:	2969      	cmp	r1, #105	; 0x69
 8014c20:	d1f6      	bne.n	8014c10 <_printf_i+0x30>
 8014c22:	6820      	ldr	r0, [r4, #0]
 8014c24:	6813      	ldr	r3, [r2, #0]
 8014c26:	0605      	lsls	r5, r0, #24
 8014c28:	f103 0104 	add.w	r1, r3, #4
 8014c2c:	d52a      	bpl.n	8014c84 <_printf_i+0xa4>
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	6011      	str	r1, [r2, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	da03      	bge.n	8014c3e <_printf_i+0x5e>
 8014c36:	222d      	movs	r2, #45	; 0x2d
 8014c38:	425b      	negs	r3, r3
 8014c3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014c3e:	486f      	ldr	r0, [pc, #444]	; (8014dfc <_printf_i+0x21c>)
 8014c40:	220a      	movs	r2, #10
 8014c42:	e039      	b.n	8014cb8 <_printf_i+0xd8>
 8014c44:	2973      	cmp	r1, #115	; 0x73
 8014c46:	f000 809d 	beq.w	8014d84 <_printf_i+0x1a4>
 8014c4a:	d808      	bhi.n	8014c5e <_printf_i+0x7e>
 8014c4c:	296f      	cmp	r1, #111	; 0x6f
 8014c4e:	d020      	beq.n	8014c92 <_printf_i+0xb2>
 8014c50:	2970      	cmp	r1, #112	; 0x70
 8014c52:	d1dd      	bne.n	8014c10 <_printf_i+0x30>
 8014c54:	6823      	ldr	r3, [r4, #0]
 8014c56:	f043 0320 	orr.w	r3, r3, #32
 8014c5a:	6023      	str	r3, [r4, #0]
 8014c5c:	e003      	b.n	8014c66 <_printf_i+0x86>
 8014c5e:	2975      	cmp	r1, #117	; 0x75
 8014c60:	d017      	beq.n	8014c92 <_printf_i+0xb2>
 8014c62:	2978      	cmp	r1, #120	; 0x78
 8014c64:	d1d4      	bne.n	8014c10 <_printf_i+0x30>
 8014c66:	2378      	movs	r3, #120	; 0x78
 8014c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014c6c:	4864      	ldr	r0, [pc, #400]	; (8014e00 <_printf_i+0x220>)
 8014c6e:	e055      	b.n	8014d1c <_printf_i+0x13c>
 8014c70:	6813      	ldr	r3, [r2, #0]
 8014c72:	1d19      	adds	r1, r3, #4
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	6011      	str	r1, [r2, #0]
 8014c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c80:	2301      	movs	r3, #1
 8014c82:	e08c      	b.n	8014d9e <_printf_i+0x1be>
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	6011      	str	r1, [r2, #0]
 8014c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014c8c:	bf18      	it	ne
 8014c8e:	b21b      	sxthne	r3, r3
 8014c90:	e7cf      	b.n	8014c32 <_printf_i+0x52>
 8014c92:	6813      	ldr	r3, [r2, #0]
 8014c94:	6825      	ldr	r5, [r4, #0]
 8014c96:	1d18      	adds	r0, r3, #4
 8014c98:	6010      	str	r0, [r2, #0]
 8014c9a:	0628      	lsls	r0, r5, #24
 8014c9c:	d501      	bpl.n	8014ca2 <_printf_i+0xc2>
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	e002      	b.n	8014ca8 <_printf_i+0xc8>
 8014ca2:	0668      	lsls	r0, r5, #25
 8014ca4:	d5fb      	bpl.n	8014c9e <_printf_i+0xbe>
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	4854      	ldr	r0, [pc, #336]	; (8014dfc <_printf_i+0x21c>)
 8014caa:	296f      	cmp	r1, #111	; 0x6f
 8014cac:	bf14      	ite	ne
 8014cae:	220a      	movne	r2, #10
 8014cb0:	2208      	moveq	r2, #8
 8014cb2:	2100      	movs	r1, #0
 8014cb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014cb8:	6865      	ldr	r5, [r4, #4]
 8014cba:	60a5      	str	r5, [r4, #8]
 8014cbc:	2d00      	cmp	r5, #0
 8014cbe:	f2c0 8095 	blt.w	8014dec <_printf_i+0x20c>
 8014cc2:	6821      	ldr	r1, [r4, #0]
 8014cc4:	f021 0104 	bic.w	r1, r1, #4
 8014cc8:	6021      	str	r1, [r4, #0]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d13d      	bne.n	8014d4a <_printf_i+0x16a>
 8014cce:	2d00      	cmp	r5, #0
 8014cd0:	f040 808e 	bne.w	8014df0 <_printf_i+0x210>
 8014cd4:	4665      	mov	r5, ip
 8014cd6:	2a08      	cmp	r2, #8
 8014cd8:	d10b      	bne.n	8014cf2 <_printf_i+0x112>
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	07db      	lsls	r3, r3, #31
 8014cde:	d508      	bpl.n	8014cf2 <_printf_i+0x112>
 8014ce0:	6923      	ldr	r3, [r4, #16]
 8014ce2:	6862      	ldr	r2, [r4, #4]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	bfde      	ittt	le
 8014ce8:	2330      	movle	r3, #48	; 0x30
 8014cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014cf2:	ebac 0305 	sub.w	r3, ip, r5
 8014cf6:	6123      	str	r3, [r4, #16]
 8014cf8:	f8cd 8000 	str.w	r8, [sp]
 8014cfc:	463b      	mov	r3, r7
 8014cfe:	aa03      	add	r2, sp, #12
 8014d00:	4621      	mov	r1, r4
 8014d02:	4630      	mov	r0, r6
 8014d04:	f7ff fef6 	bl	8014af4 <_printf_common>
 8014d08:	3001      	adds	r0, #1
 8014d0a:	d14d      	bne.n	8014da8 <_printf_i+0x1c8>
 8014d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d10:	b005      	add	sp, #20
 8014d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d16:	4839      	ldr	r0, [pc, #228]	; (8014dfc <_printf_i+0x21c>)
 8014d18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014d1c:	6813      	ldr	r3, [r2, #0]
 8014d1e:	6821      	ldr	r1, [r4, #0]
 8014d20:	1d1d      	adds	r5, r3, #4
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	6015      	str	r5, [r2, #0]
 8014d26:	060a      	lsls	r2, r1, #24
 8014d28:	d50b      	bpl.n	8014d42 <_printf_i+0x162>
 8014d2a:	07ca      	lsls	r2, r1, #31
 8014d2c:	bf44      	itt	mi
 8014d2e:	f041 0120 	orrmi.w	r1, r1, #32
 8014d32:	6021      	strmi	r1, [r4, #0]
 8014d34:	b91b      	cbnz	r3, 8014d3e <_printf_i+0x15e>
 8014d36:	6822      	ldr	r2, [r4, #0]
 8014d38:	f022 0220 	bic.w	r2, r2, #32
 8014d3c:	6022      	str	r2, [r4, #0]
 8014d3e:	2210      	movs	r2, #16
 8014d40:	e7b7      	b.n	8014cb2 <_printf_i+0xd2>
 8014d42:	064d      	lsls	r5, r1, #25
 8014d44:	bf48      	it	mi
 8014d46:	b29b      	uxthmi	r3, r3
 8014d48:	e7ef      	b.n	8014d2a <_printf_i+0x14a>
 8014d4a:	4665      	mov	r5, ip
 8014d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014d50:	fb02 3311 	mls	r3, r2, r1, r3
 8014d54:	5cc3      	ldrb	r3, [r0, r3]
 8014d56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	2900      	cmp	r1, #0
 8014d5e:	d1f5      	bne.n	8014d4c <_printf_i+0x16c>
 8014d60:	e7b9      	b.n	8014cd6 <_printf_i+0xf6>
 8014d62:	6813      	ldr	r3, [r2, #0]
 8014d64:	6825      	ldr	r5, [r4, #0]
 8014d66:	6961      	ldr	r1, [r4, #20]
 8014d68:	1d18      	adds	r0, r3, #4
 8014d6a:	6010      	str	r0, [r2, #0]
 8014d6c:	0628      	lsls	r0, r5, #24
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	d501      	bpl.n	8014d76 <_printf_i+0x196>
 8014d72:	6019      	str	r1, [r3, #0]
 8014d74:	e002      	b.n	8014d7c <_printf_i+0x19c>
 8014d76:	066a      	lsls	r2, r5, #25
 8014d78:	d5fb      	bpl.n	8014d72 <_printf_i+0x192>
 8014d7a:	8019      	strh	r1, [r3, #0]
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	6123      	str	r3, [r4, #16]
 8014d80:	4665      	mov	r5, ip
 8014d82:	e7b9      	b.n	8014cf8 <_printf_i+0x118>
 8014d84:	6813      	ldr	r3, [r2, #0]
 8014d86:	1d19      	adds	r1, r3, #4
 8014d88:	6011      	str	r1, [r2, #0]
 8014d8a:	681d      	ldr	r5, [r3, #0]
 8014d8c:	6862      	ldr	r2, [r4, #4]
 8014d8e:	2100      	movs	r1, #0
 8014d90:	4628      	mov	r0, r5
 8014d92:	f7eb faa5 	bl	80002e0 <memchr>
 8014d96:	b108      	cbz	r0, 8014d9c <_printf_i+0x1bc>
 8014d98:	1b40      	subs	r0, r0, r5
 8014d9a:	6060      	str	r0, [r4, #4]
 8014d9c:	6863      	ldr	r3, [r4, #4]
 8014d9e:	6123      	str	r3, [r4, #16]
 8014da0:	2300      	movs	r3, #0
 8014da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014da6:	e7a7      	b.n	8014cf8 <_printf_i+0x118>
 8014da8:	6923      	ldr	r3, [r4, #16]
 8014daa:	462a      	mov	r2, r5
 8014dac:	4639      	mov	r1, r7
 8014dae:	4630      	mov	r0, r6
 8014db0:	47c0      	blx	r8
 8014db2:	3001      	adds	r0, #1
 8014db4:	d0aa      	beq.n	8014d0c <_printf_i+0x12c>
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	079b      	lsls	r3, r3, #30
 8014dba:	d413      	bmi.n	8014de4 <_printf_i+0x204>
 8014dbc:	68e0      	ldr	r0, [r4, #12]
 8014dbe:	9b03      	ldr	r3, [sp, #12]
 8014dc0:	4298      	cmp	r0, r3
 8014dc2:	bfb8      	it	lt
 8014dc4:	4618      	movlt	r0, r3
 8014dc6:	e7a3      	b.n	8014d10 <_printf_i+0x130>
 8014dc8:	2301      	movs	r3, #1
 8014dca:	464a      	mov	r2, r9
 8014dcc:	4639      	mov	r1, r7
 8014dce:	4630      	mov	r0, r6
 8014dd0:	47c0      	blx	r8
 8014dd2:	3001      	adds	r0, #1
 8014dd4:	d09a      	beq.n	8014d0c <_printf_i+0x12c>
 8014dd6:	3501      	adds	r5, #1
 8014dd8:	68e3      	ldr	r3, [r4, #12]
 8014dda:	9a03      	ldr	r2, [sp, #12]
 8014ddc:	1a9b      	subs	r3, r3, r2
 8014dde:	42ab      	cmp	r3, r5
 8014de0:	dcf2      	bgt.n	8014dc8 <_printf_i+0x1e8>
 8014de2:	e7eb      	b.n	8014dbc <_printf_i+0x1dc>
 8014de4:	2500      	movs	r5, #0
 8014de6:	f104 0919 	add.w	r9, r4, #25
 8014dea:	e7f5      	b.n	8014dd8 <_printf_i+0x1f8>
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d1ac      	bne.n	8014d4a <_printf_i+0x16a>
 8014df0:	7803      	ldrb	r3, [r0, #0]
 8014df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014df6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014dfa:	e76c      	b.n	8014cd6 <_printf_i+0xf6>
 8014dfc:	080151b9 	.word	0x080151b9
 8014e00:	080151ca 	.word	0x080151ca

08014e04 <memmove>:
 8014e04:	4288      	cmp	r0, r1
 8014e06:	b510      	push	{r4, lr}
 8014e08:	eb01 0302 	add.w	r3, r1, r2
 8014e0c:	d807      	bhi.n	8014e1e <memmove+0x1a>
 8014e0e:	1e42      	subs	r2, r0, #1
 8014e10:	4299      	cmp	r1, r3
 8014e12:	d00a      	beq.n	8014e2a <memmove+0x26>
 8014e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014e1c:	e7f8      	b.n	8014e10 <memmove+0xc>
 8014e1e:	4283      	cmp	r3, r0
 8014e20:	d9f5      	bls.n	8014e0e <memmove+0xa>
 8014e22:	1881      	adds	r1, r0, r2
 8014e24:	1ad2      	subs	r2, r2, r3
 8014e26:	42d3      	cmn	r3, r2
 8014e28:	d100      	bne.n	8014e2c <memmove+0x28>
 8014e2a:	bd10      	pop	{r4, pc}
 8014e2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014e34:	e7f7      	b.n	8014e26 <memmove+0x22>
	...

08014e38 <_free_r>:
 8014e38:	b538      	push	{r3, r4, r5, lr}
 8014e3a:	4605      	mov	r5, r0
 8014e3c:	2900      	cmp	r1, #0
 8014e3e:	d045      	beq.n	8014ecc <_free_r+0x94>
 8014e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e44:	1f0c      	subs	r4, r1, #4
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	bfb8      	it	lt
 8014e4a:	18e4      	addlt	r4, r4, r3
 8014e4c:	f000 f8d2 	bl	8014ff4 <__malloc_lock>
 8014e50:	4a1f      	ldr	r2, [pc, #124]	; (8014ed0 <_free_r+0x98>)
 8014e52:	6813      	ldr	r3, [r2, #0]
 8014e54:	4610      	mov	r0, r2
 8014e56:	b933      	cbnz	r3, 8014e66 <_free_r+0x2e>
 8014e58:	6063      	str	r3, [r4, #4]
 8014e5a:	6014      	str	r4, [r2, #0]
 8014e5c:	4628      	mov	r0, r5
 8014e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e62:	f000 b8c8 	b.w	8014ff6 <__malloc_unlock>
 8014e66:	42a3      	cmp	r3, r4
 8014e68:	d90c      	bls.n	8014e84 <_free_r+0x4c>
 8014e6a:	6821      	ldr	r1, [r4, #0]
 8014e6c:	1862      	adds	r2, r4, r1
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	bf04      	itt	eq
 8014e72:	681a      	ldreq	r2, [r3, #0]
 8014e74:	685b      	ldreq	r3, [r3, #4]
 8014e76:	6063      	str	r3, [r4, #4]
 8014e78:	bf04      	itt	eq
 8014e7a:	1852      	addeq	r2, r2, r1
 8014e7c:	6022      	streq	r2, [r4, #0]
 8014e7e:	6004      	str	r4, [r0, #0]
 8014e80:	e7ec      	b.n	8014e5c <_free_r+0x24>
 8014e82:	4613      	mov	r3, r2
 8014e84:	685a      	ldr	r2, [r3, #4]
 8014e86:	b10a      	cbz	r2, 8014e8c <_free_r+0x54>
 8014e88:	42a2      	cmp	r2, r4
 8014e8a:	d9fa      	bls.n	8014e82 <_free_r+0x4a>
 8014e8c:	6819      	ldr	r1, [r3, #0]
 8014e8e:	1858      	adds	r0, r3, r1
 8014e90:	42a0      	cmp	r0, r4
 8014e92:	d10b      	bne.n	8014eac <_free_r+0x74>
 8014e94:	6820      	ldr	r0, [r4, #0]
 8014e96:	4401      	add	r1, r0
 8014e98:	1858      	adds	r0, r3, r1
 8014e9a:	4282      	cmp	r2, r0
 8014e9c:	6019      	str	r1, [r3, #0]
 8014e9e:	d1dd      	bne.n	8014e5c <_free_r+0x24>
 8014ea0:	6810      	ldr	r0, [r2, #0]
 8014ea2:	6852      	ldr	r2, [r2, #4]
 8014ea4:	605a      	str	r2, [r3, #4]
 8014ea6:	4401      	add	r1, r0
 8014ea8:	6019      	str	r1, [r3, #0]
 8014eaa:	e7d7      	b.n	8014e5c <_free_r+0x24>
 8014eac:	d902      	bls.n	8014eb4 <_free_r+0x7c>
 8014eae:	230c      	movs	r3, #12
 8014eb0:	602b      	str	r3, [r5, #0]
 8014eb2:	e7d3      	b.n	8014e5c <_free_r+0x24>
 8014eb4:	6820      	ldr	r0, [r4, #0]
 8014eb6:	1821      	adds	r1, r4, r0
 8014eb8:	428a      	cmp	r2, r1
 8014eba:	bf04      	itt	eq
 8014ebc:	6811      	ldreq	r1, [r2, #0]
 8014ebe:	6852      	ldreq	r2, [r2, #4]
 8014ec0:	6062      	str	r2, [r4, #4]
 8014ec2:	bf04      	itt	eq
 8014ec4:	1809      	addeq	r1, r1, r0
 8014ec6:	6021      	streq	r1, [r4, #0]
 8014ec8:	605c      	str	r4, [r3, #4]
 8014eca:	e7c7      	b.n	8014e5c <_free_r+0x24>
 8014ecc:	bd38      	pop	{r3, r4, r5, pc}
 8014ece:	bf00      	nop
 8014ed0:	24064a84 	.word	0x24064a84

08014ed4 <_malloc_r>:
 8014ed4:	b570      	push	{r4, r5, r6, lr}
 8014ed6:	1ccd      	adds	r5, r1, #3
 8014ed8:	f025 0503 	bic.w	r5, r5, #3
 8014edc:	3508      	adds	r5, #8
 8014ede:	2d0c      	cmp	r5, #12
 8014ee0:	bf38      	it	cc
 8014ee2:	250c      	movcc	r5, #12
 8014ee4:	2d00      	cmp	r5, #0
 8014ee6:	4606      	mov	r6, r0
 8014ee8:	db01      	blt.n	8014eee <_malloc_r+0x1a>
 8014eea:	42a9      	cmp	r1, r5
 8014eec:	d903      	bls.n	8014ef6 <_malloc_r+0x22>
 8014eee:	230c      	movs	r3, #12
 8014ef0:	6033      	str	r3, [r6, #0]
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	bd70      	pop	{r4, r5, r6, pc}
 8014ef6:	f000 f87d 	bl	8014ff4 <__malloc_lock>
 8014efa:	4a21      	ldr	r2, [pc, #132]	; (8014f80 <_malloc_r+0xac>)
 8014efc:	6814      	ldr	r4, [r2, #0]
 8014efe:	4621      	mov	r1, r4
 8014f00:	b991      	cbnz	r1, 8014f28 <_malloc_r+0x54>
 8014f02:	4c20      	ldr	r4, [pc, #128]	; (8014f84 <_malloc_r+0xb0>)
 8014f04:	6823      	ldr	r3, [r4, #0]
 8014f06:	b91b      	cbnz	r3, 8014f10 <_malloc_r+0x3c>
 8014f08:	4630      	mov	r0, r6
 8014f0a:	f000 f863 	bl	8014fd4 <_sbrk_r>
 8014f0e:	6020      	str	r0, [r4, #0]
 8014f10:	4629      	mov	r1, r5
 8014f12:	4630      	mov	r0, r6
 8014f14:	f000 f85e 	bl	8014fd4 <_sbrk_r>
 8014f18:	1c43      	adds	r3, r0, #1
 8014f1a:	d124      	bne.n	8014f66 <_malloc_r+0x92>
 8014f1c:	230c      	movs	r3, #12
 8014f1e:	6033      	str	r3, [r6, #0]
 8014f20:	4630      	mov	r0, r6
 8014f22:	f000 f868 	bl	8014ff6 <__malloc_unlock>
 8014f26:	e7e4      	b.n	8014ef2 <_malloc_r+0x1e>
 8014f28:	680b      	ldr	r3, [r1, #0]
 8014f2a:	1b5b      	subs	r3, r3, r5
 8014f2c:	d418      	bmi.n	8014f60 <_malloc_r+0x8c>
 8014f2e:	2b0b      	cmp	r3, #11
 8014f30:	d90f      	bls.n	8014f52 <_malloc_r+0x7e>
 8014f32:	600b      	str	r3, [r1, #0]
 8014f34:	50cd      	str	r5, [r1, r3]
 8014f36:	18cc      	adds	r4, r1, r3
 8014f38:	4630      	mov	r0, r6
 8014f3a:	f000 f85c 	bl	8014ff6 <__malloc_unlock>
 8014f3e:	f104 000b 	add.w	r0, r4, #11
 8014f42:	1d23      	adds	r3, r4, #4
 8014f44:	f020 0007 	bic.w	r0, r0, #7
 8014f48:	1ac3      	subs	r3, r0, r3
 8014f4a:	d0d3      	beq.n	8014ef4 <_malloc_r+0x20>
 8014f4c:	425a      	negs	r2, r3
 8014f4e:	50e2      	str	r2, [r4, r3]
 8014f50:	e7d0      	b.n	8014ef4 <_malloc_r+0x20>
 8014f52:	428c      	cmp	r4, r1
 8014f54:	684b      	ldr	r3, [r1, #4]
 8014f56:	bf16      	itet	ne
 8014f58:	6063      	strne	r3, [r4, #4]
 8014f5a:	6013      	streq	r3, [r2, #0]
 8014f5c:	460c      	movne	r4, r1
 8014f5e:	e7eb      	b.n	8014f38 <_malloc_r+0x64>
 8014f60:	460c      	mov	r4, r1
 8014f62:	6849      	ldr	r1, [r1, #4]
 8014f64:	e7cc      	b.n	8014f00 <_malloc_r+0x2c>
 8014f66:	1cc4      	adds	r4, r0, #3
 8014f68:	f024 0403 	bic.w	r4, r4, #3
 8014f6c:	42a0      	cmp	r0, r4
 8014f6e:	d005      	beq.n	8014f7c <_malloc_r+0xa8>
 8014f70:	1a21      	subs	r1, r4, r0
 8014f72:	4630      	mov	r0, r6
 8014f74:	f000 f82e 	bl	8014fd4 <_sbrk_r>
 8014f78:	3001      	adds	r0, #1
 8014f7a:	d0cf      	beq.n	8014f1c <_malloc_r+0x48>
 8014f7c:	6025      	str	r5, [r4, #0]
 8014f7e:	e7db      	b.n	8014f38 <_malloc_r+0x64>
 8014f80:	24064a84 	.word	0x24064a84
 8014f84:	24064a88 	.word	0x24064a88

08014f88 <_realloc_r>:
 8014f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f8a:	4607      	mov	r7, r0
 8014f8c:	4614      	mov	r4, r2
 8014f8e:	460e      	mov	r6, r1
 8014f90:	b921      	cbnz	r1, 8014f9c <_realloc_r+0x14>
 8014f92:	4611      	mov	r1, r2
 8014f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014f98:	f7ff bf9c 	b.w	8014ed4 <_malloc_r>
 8014f9c:	b922      	cbnz	r2, 8014fa8 <_realloc_r+0x20>
 8014f9e:	f7ff ff4b 	bl	8014e38 <_free_r>
 8014fa2:	4625      	mov	r5, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa8:	f000 f826 	bl	8014ff8 <_malloc_usable_size_r>
 8014fac:	42a0      	cmp	r0, r4
 8014fae:	d20f      	bcs.n	8014fd0 <_realloc_r+0x48>
 8014fb0:	4621      	mov	r1, r4
 8014fb2:	4638      	mov	r0, r7
 8014fb4:	f7ff ff8e 	bl	8014ed4 <_malloc_r>
 8014fb8:	4605      	mov	r5, r0
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d0f2      	beq.n	8014fa4 <_realloc_r+0x1c>
 8014fbe:	4631      	mov	r1, r6
 8014fc0:	4622      	mov	r2, r4
 8014fc2:	f7ff fbfd 	bl	80147c0 <memcpy>
 8014fc6:	4631      	mov	r1, r6
 8014fc8:	4638      	mov	r0, r7
 8014fca:	f7ff ff35 	bl	8014e38 <_free_r>
 8014fce:	e7e9      	b.n	8014fa4 <_realloc_r+0x1c>
 8014fd0:	4635      	mov	r5, r6
 8014fd2:	e7e7      	b.n	8014fa4 <_realloc_r+0x1c>

08014fd4 <_sbrk_r>:
 8014fd4:	b538      	push	{r3, r4, r5, lr}
 8014fd6:	4c06      	ldr	r4, [pc, #24]	; (8014ff0 <_sbrk_r+0x1c>)
 8014fd8:	2300      	movs	r3, #0
 8014fda:	4605      	mov	r5, r0
 8014fdc:	4608      	mov	r0, r1
 8014fde:	6023      	str	r3, [r4, #0]
 8014fe0:	f7ec fa64 	bl	80014ac <_sbrk>
 8014fe4:	1c43      	adds	r3, r0, #1
 8014fe6:	d102      	bne.n	8014fee <_sbrk_r+0x1a>
 8014fe8:	6823      	ldr	r3, [r4, #0]
 8014fea:	b103      	cbz	r3, 8014fee <_sbrk_r+0x1a>
 8014fec:	602b      	str	r3, [r5, #0]
 8014fee:	bd38      	pop	{r3, r4, r5, pc}
 8014ff0:	24070fe0 	.word	0x24070fe0

08014ff4 <__malloc_lock>:
 8014ff4:	4770      	bx	lr

08014ff6 <__malloc_unlock>:
 8014ff6:	4770      	bx	lr

08014ff8 <_malloc_usable_size_r>:
 8014ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ffc:	1f18      	subs	r0, r3, #4
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	bfbc      	itt	lt
 8015002:	580b      	ldrlt	r3, [r1, r0]
 8015004:	18c0      	addlt	r0, r0, r3
 8015006:	4770      	bx	lr

08015008 <_init>:
 8015008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801500a:	bf00      	nop
 801500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801500e:	bc08      	pop	{r3}
 8015010:	469e      	mov	lr, r3
 8015012:	4770      	bx	lr

08015014 <_fini>:
 8015014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015016:	bf00      	nop
 8015018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801501a:	bc08      	pop	{r3}
 801501c:	469e      	mov	lr, r3
 801501e:	4770      	bx	lr
