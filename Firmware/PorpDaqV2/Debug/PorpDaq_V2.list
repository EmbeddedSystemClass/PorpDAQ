
PorpDaq_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014dd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08015070  08015070  00025070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801522c  0801522c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801522c  0801522c  0002522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015234  08015234  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015234  08015234  00025234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015238  08015238  00025238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0801523c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00070f64  24000080  080152b4  00030080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24070fe4  080152b4  00030fe4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042cfb  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006aaf  00000000  00000000  00072da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022b0  00000000  00000000  00079850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002008  00000000  00000000  0007bb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003fca5  00000000  00000000  0007db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000243e2  00000000  00000000  000bd7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0018794a  00000000  00000000  000e1b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002694d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093ec  00000000  00000000  00269554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015058 	.word	0x08015058

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08015058 	.word	0x08015058

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC3_Init>:
 * @brief ADC3 Initialisation function
 * LQFP100 Package has a max frequency of 19MHz.
 *
 */
void MX_ADC3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	619a      	str	r2, [r3, #24]

  /** Common config
   */
  hadc3.Instance = ADC3;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_ADC3_Init+0xc8>)
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <MX_ADC3_Init+0xcc>)
 800069c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006d2:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <MX_ADC3_Init+0xc8>)
 80006fe:	f001 fde7 	bl	80022d0 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 fd68 	bl	80011dc <Error_Handler>
   */
  // BGA Package can sample for at least 16.5 cycles to
  // still be within the limit for 500Khz. This chip apparently
  // won't sample correctly at anything less than 2.5 cycles
  // Sampling time
  sConfig.Channel = ADC_CHANNEL_0;
 800070c:	2301      	movs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000710:	2306      	movs	r3, #6
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000718:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800071c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071e:	2304      	movs	r3, #4
 8000720:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_ADC3_Init+0xc8>)
 8000730:	f002 fae2 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 800073a:	f000 fd4f 	bl	80011dc <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24064b04 	.word	0x24064b04
 800074c:	58026000 	.word	0x58026000

08000750 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a31      	ldr	r2, [pc, #196]	; (8000824 <HAL_ADC_MspInit+0xd4>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d15c      	bne.n	800081c <HAL_ADC_MspInit+0xcc>
  {
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 800076a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a28      	ldr	r2, [pc, #160]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_ADC_MspInit+0xd8>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    Use a direct channel for fastest ADC channel
     */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800079e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80007a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80007a6:	f001 fb25 	bl	8001df4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <HAL_ADC_MspInit+0xe0>)
 80007ae:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007b2:	2273      	movs	r2, #115	; 0x73
 80007b4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <HAL_ADC_MspInit+0xdc>)
 80007f2:	f003 fa3b 	bl	8003c6c <HAL_DMA_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80007fc:	f000 fcee 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_ADC_MspInit+0xdc>)
 8000804:	64da      	str	r2, [r3, #76]	; 0x4c
 8000806:	4a09      	ldr	r2, [pc, #36]	; (800082c <HAL_ADC_MspInit+0xdc>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2105      	movs	r1, #5
 8000810:	207f      	movs	r0, #127	; 0x7f
 8000812:	f003 f98b 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000816:	207f      	movs	r0, #127	; 0x7f
 8000818:	f003 f9a2 	bl	8003b60 <HAL_NVIC_EnableIRQ>
  }
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58026000 	.word	0x58026000
 8000828:	58024400 	.word	0x58024400
 800082c:	24064a8c 	.word	0x24064a8c
 8000830:	40020010 	.word	0x40020010

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_DMA_Init+0x5c>)
 800083c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_DMA_Init+0x5c>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_DMA_Init+0x5c>)
 800084c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	200b      	movs	r0, #11
 800085e:	f003 f965 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000862:	200b      	movs	r0, #11
 8000864:	f003 f97c 	bl	8003b60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2105      	movs	r1, #5
 800086c:	200c      	movs	r0, #12
 800086e:	f003 f95d 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000872:	200c      	movs	r0, #12
 8000874:	f003 f974 	bl	8003b60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	200d      	movs	r0, #13
 800087e:	f003 f955 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000882:	200d      	movs	r0, #13
 8000884:	f003 f96c 	bl	8003b60 <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400

08000894 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80008a6:	2320      	movs	r3, #32
 80008a8:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80008ae:	e00b      	b.n	80008c8 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <SCB_InvalidateDCache_by_Addr+0x50>)
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4413      	add	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dcf0      	bgt.n	80008b0 <SCB_InvalidateDCache_by_Addr+0x1c>
 80008ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80008d6:	bf00      	nop
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <vApplicationGetIdleTaskMemory+0x2c>)
 80008f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <vApplicationGetIdleTaskMemory+0x30>)
 80008fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	240080a8 	.word	0x240080a8
 8000918:	240080fc 	.word	0x240080fc

0800091c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800091c:	b5b0      	push	{r4, r5, r7, lr}
 800091e:	b092      	sub	sp, #72	; 0x48
 8000920:	af00      	add	r7, sp, #0
  osThreadDef(prod_task, vProducer, osPriorityHigh, 0, 9216 );
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_FREERTOS_Init+0x7c>)
 8000924:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000928:	461d      	mov	r5, r3
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000932:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  prodTaskHandle = osThreadCreate(osThread(prod_task), NULL);
 8000936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f010 fb19 	bl	8010f74 <osThreadCreate>
 8000942:	4602      	mov	r2, r0
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_FREERTOS_Init+0x80>)
 8000946:	601a      	str	r2, [r3, #0]

  osThreadDef(con_task, vConsumer, osPriorityHigh, 0, 10752 );
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_FREERTOS_Init+0x84>)
 800094a:	f107 0410 	add.w	r4, r7, #16
 800094e:	461d      	mov	r5, r3
 8000950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  conTaskHandle = osThreadCreate(osThread(con_task), NULL);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f010 fb06 	bl	8010f74 <osThreadCreate>
 8000968:	4602      	mov	r2, r0
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_FREERTOS_Init+0x88>)
 800096c:	601a      	str	r2, [r3, #0]

  osMailQDef(mail, MAIL_SIZE, ADC_DATA);
 800096e:	2306      	movs	r3, #6
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	60bb      	str	r3, [r7, #8]
  adcDataMailId = osMailCreate(osMailQ(mail), NULL);
 800097e:	463b      	mov	r3, r7
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f010 fe76 	bl	8011674 <osMailCreate>
 8000988:	4602      	mov	r2, r0
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_FREERTOS_Init+0x8c>)
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	3748      	adds	r7, #72	; 0x48
 8000992:	46bd      	mov	sp, r7
 8000994:	bdb0      	pop	{r4, r5, r7, pc}
 8000996:	bf00      	nop
 8000998:	0801507c 	.word	0x0801507c
 800099c:	24064b6c 	.word	0x24064b6c
 80009a0:	080150a4 	.word	0x080150a4
 80009a4:	24064b68 	.word	0x24064b68
 80009a8:	2406dc2c 	.word	0x2406dc2c

080009ac <mountSDCard>:
/**
 * @brief Mounts SD Card
 * @retval Nothing
 */
void mountSDCard(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  if(f_mount(&FatFSInstance, SDPath, 1)==FR_OK)
 80009b0:	2201      	movs	r2, #1
 80009b2:	4915      	ldr	r1, [pc, #84]	; (8000a08 <mountSDCard+0x5c>)
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <mountSDCard+0x60>)
 80009b6:	f00f fac9 	bl	800ff4c <f_mount>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d120      	bne.n	8000a02 <mountSDCard+0x56>
  {
    // Turn on LED if mount was successful
    LED_ON();
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <mountSDCard+0x64>)
 80009c8:	f006 f93a 	bl	8006c40 <HAL_GPIO_WritePin>
    if(f_open(&wavFile, WAV_FILE, FA_WRITE|FA_CREATE_ALWAYS) == FR_OK)
 80009cc:	220a      	movs	r2, #10
 80009ce:	4911      	ldr	r1, [pc, #68]	; (8000a14 <mountSDCard+0x68>)
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <mountSDCard+0x6c>)
 80009d2:	f00f fb1f 	bl	8010014 <f_open>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d112      	bne.n	8000a02 <mountSDCard+0x56>
    {
      // Initialise the WAV Header
      InitialiseWavEncoder(AUDIO_FREQ, wavHeaderBuff, &WaveFormat);
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <mountSDCard+0x70>)
 80009de:	4910      	ldr	r1, [pc, #64]	; (8000a20 <mountSDCard+0x74>)
 80009e0:	4810      	ldr	r0, [pc, #64]	; (8000a24 <mountSDCard+0x78>)
 80009e2:	f001 f835 	bl	8001a50 <InitialiseWavEncoder>
      // Write header file
      wav_write_result = f_write(&wavFile, wavHeaderBuff, 44,(void*)&bytes_written);
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <mountSDCard+0x7c>)
 80009e8:	222c      	movs	r2, #44	; 0x2c
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <mountSDCard+0x74>)
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <mountSDCard+0x6c>)
 80009ee:	f00f fce4 	bl	80103ba <f_write>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <mountSDCard+0x80>)
 80009f8:	701a      	strb	r2, [r3, #0]
      // return size of file
      file_size = bytes_written;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <mountSDCard+0x7c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <mountSDCard+0x84>)
 8000a00:	6013      	str	r3, [r2, #0]
    }
  }
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2406ef34 	.word	0x2406ef34
 8000a0c:	24068bac 	.word	0x24068bac
 8000a10:	58020400 	.word	0x58020400
 8000a14:	2406ec74 	.word	0x2406ec74
 8000a18:	2406dc44 	.word	0x2406dc44
 8000a1c:	2406637c 	.word	0x2406637c
 8000a20:	24069be4 	.word	0x24069be4
 8000a24:	0007a120 	.word	0x0007a120
 8000a28:	240080a4 	.word	0x240080a4
 8000a2c:	2406dc34 	.word	0x2406dc34
 8000a30:	2406ec88 	.word	0x2406ec88

08000a34 <setFileName>:
 * @brief sets filename for each
 * WAV file on each UART RX callback
 * @retval nothing
 */
void setFileName(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  // use waypoint index to write file name here
  waypoint_index++;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <setFileName+0x20>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <setFileName+0x20>)
 8000a40:	6013      	str	r3, [r2, #0]
  snprintf(WAV_FILE, sizeof(WAV_FILE), "%d.wav", waypoint_index);
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <setFileName+0x20>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <setFileName+0x24>)
 8000a48:	2108      	movs	r1, #8
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <setFileName+0x28>)
 8000a4c:	f013 fef4 	bl	8014838 <sniprintf>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	240080a0 	.word	0x240080a0
 8000a58:	080150c0 	.word	0x080150c0
 8000a5c:	2406ec74 	.word	0x2406ec74

08000a60 <startADC>:
/**
 * Starts the ADC
 * @retval nothing
 */
void startADC(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc_values, ADC_BUFFER_LENGTH) != HAL_OK)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	4902      	ldr	r1, [pc, #8]	; (8000a74 <startADC+0x14>)
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <startADC+0x18>)
 8000a6c:	f001 fdd0 	bl	8002610 <HAL_ADC_Start_DMA>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	240000a0 	.word	0x240000a0
 8000a78:	24064b04 	.word	0x24064b04

08000a7c <stopADC>:

/**
 * @brief Stops the ADC
 */
void stopADC(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  if(HAL_ADC_Stop_DMA(&hadc3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <stopADC+0x18>)
 8000a82:	f001 fe89 	bl	8002798 <HAL_ADC_Stop_DMA>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <stopADC+0x14>
  {
    Error_Handler();
 8000a8c:	f000 fba6 	bl	80011dc <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24064b04 	.word	0x24064b04

08000a98 <vProducer>:
 * @brief Producer Thread
 * Starts the ADC and mounts
 * the SDCard
 */
void vProducer(void const * argument)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6178      	str	r0, [r7, #20]
  for(;;)
  {
    prodEvent = osSignalWait(0x01, osWaitForever);
 8000aa0:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <vProducer+0x3c>)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f010 faee 	bl	801108c <osSignalWait>
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(prodEvent.status == osEventSignal)
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <vProducer+0x3c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d1ee      	bne.n	8000aa0 <vProducer+0x8>
    {
      startADC();
 8000ac2:	f7ff ffcd 	bl	8000a60 <startADC>
      mountSDCard();
 8000ac6:	f7ff ff71 	bl	80009ac <mountSDCard>
      osThreadSuspend(NULL);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f010 ff07 	bl	80118de <osThreadSuspend>
    prodEvent = osSignalWait(0x01, osWaitForever);
 8000ad0:	e7e6      	b.n	8000aa0 <vProducer+0x8>
 8000ad2:	bf00      	nop
 8000ad4:	2406dc38 	.word	0x2406dc38

08000ad8 <vConsumer>:
 * runs the FFT compute
 * function
 * @retval None
 */
void vConsumer(void const * argument)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6178      	str	r0, [r7, #20]
  ADC_DATA *rx_data;
  for(;;)
  {
    // Wait for signal to start writing data
    writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000ae0:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <vConsumer+0xe8>)
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	4c37      	ldr	r4, [pc, #220]	; (8000bc4 <vConsumer+0xec>)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	4618      	mov	r0, r3
 8000aee:	f010 fe6d 	bl	80117cc <osMailGet>
 8000af2:	463b      	mov	r3, r7
 8000af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(writeEvent.status == osEventMail)
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <vConsumer+0xec>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	d124      	bne.n	8000b4e <vConsumer+0x76>
    {
      // write Data to SD card
      rx_data =  writeEvent.value.p;
 8000b04:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <vConsumer+0xec>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	61fb      	str	r3, [r7, #28]
      memcpy(sd_buff, rx_data->data, sizeof(sd_buff));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b10:	4619      	mov	r1, r3
 8000b12:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <vConsumer+0xf0>)
 8000b14:	f013 fe7c 	bl	8014810 <memcpy>
      if(wav_write_result == FR_OK)
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <vConsumer+0xf4>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d110      	bne.n	8000b42 <vConsumer+0x6a>
      {
        if( f_write(&wavFile, (uint8_t*)sd_buff, sizeof(sd_buff), (void*)&bytes_written) == FR_OK)
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <vConsumer+0xf8>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b26:	4928      	ldr	r1, [pc, #160]	; (8000bc8 <vConsumer+0xf0>)
 8000b28:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <vConsumer+0xfc>)
 8000b2a:	f00f fc46 	bl	80103ba <f_write>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <vConsumer+0x6a>
        {
          file_size+=bytes_written;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <vConsumer+0x100>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <vConsumer+0xf8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a26      	ldr	r2, [pc, #152]	; (8000bd8 <vConsumer+0x100>)
 8000b40:	6013      	str	r3, [r2, #0]
        }
      }
      //  computeFFT();
      // Release datra from queue after writing
      osMailFree(adcDataMailId, rx_data);
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <vConsumer+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	69f9      	ldr	r1, [r7, #28]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f010 feb3 	bl	80118b4 <osMailFree>
    }

    // Wait for signal to stop recording dara
    consEvent = osSignalWait(0x02, 0);
 8000b4e:	4c23      	ldr	r4, [pc, #140]	; (8000bdc <vConsumer+0x104>)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f010 fa98 	bl	801108c <osSignalWait>
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(consEvent.status == osEventSignal)
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <vConsumer+0x104>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d1b8      	bne.n	8000ae0 <vConsumer+0x8>
    {
      stopADC();
 8000b6e:	f7ff ff85 	bl	8000a7c <stopADC>
      if(f_lseek(&wavFile, 0) == FR_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <vConsumer+0xfc>)
 8000b76:	f00f fe9b 	bl	80108b0 <f_lseek>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1af      	bne.n	8000ae0 <vConsumer+0x8>
      {
        WavHeaderUpdate(wavHeaderBuff, &WaveFormat, file_size);
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <vConsumer+0x100>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4916      	ldr	r1, [pc, #88]	; (8000be0 <vConsumer+0x108>)
 8000b88:	4816      	ldr	r0, [pc, #88]	; (8000be4 <vConsumer+0x10c>)
 8000b8a:	f000 ff1f 	bl	80019cc <WavHeaderUpdate>
        // Update wav File
        if(f_write(&wavFile, wavHeaderBuff, sizeof(WaveFormat), (void*)&bytes_written)==FR_OK)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <vConsumer+0xf8>)
 8000b90:	222c      	movs	r2, #44	; 0x2c
 8000b92:	4914      	ldr	r1, [pc, #80]	; (8000be4 <vConsumer+0x10c>)
 8000b94:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <vConsumer+0xfc>)
 8000b96:	f00f fc10 	bl	80103ba <f_write>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d19f      	bne.n	8000ae0 <vConsumer+0x8>
        {
          //close file
          f_close(&wavFile);
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <vConsumer+0xfc>)
 8000ba2:	f00f fe56 	bl	8010852 <f_close>
          // Turn off the LED
          LED_OFF();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <vConsumer+0x110>)
 8000bae:	f006 f847 	bl	8006c40 <HAL_GPIO_WritePin>
          // release to Producer thread
          osThreadResume(prodTaskHandle);
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <vConsumer+0x114>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f010 fe9e 	bl	80118f8 <osThreadResume>
    writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000bbc:	e790      	b.n	8000ae0 <vConsumer+0x8>
 8000bbe:	bf00      	nop
 8000bc0:	2406dc2c 	.word	0x2406dc2c
 8000bc4:	2406ec7c 	.word	0x2406ec7c
 8000bc8:	24069c28 	.word	0x24069c28
 8000bcc:	2406dc34 	.word	0x2406dc34
 8000bd0:	240080a4 	.word	0x240080a4
 8000bd4:	2406dc44 	.word	0x2406dc44
 8000bd8:	2406ec88 	.word	0x2406ec88
 8000bdc:	2406ec8c 	.word	0x2406ec8c
 8000be0:	2406637c 	.word	0x2406637c
 8000be4:	24069be4 	.word	0x24069be4
 8000be8:	58020400 	.word	0x58020400
 8000bec:	24064b6c 	.word	0x24064b6c

08000bf0 <HAL_ADC_ConvHalfCpltCallback>:




void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  // Invalidate Cache address. Just casual H7 things
  SCB_InvalidateDCache_by_Addr((uint32_t*)&adc_values[0], ADC_BUFFER_LENGTH);
 8000bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000bfe:	f7ff fe49 	bl	8000894 <SCB_InvalidateDCache_by_Addr>
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f010 fd8a 	bl	8011724 <osMailAlloc>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000c14:	601a      	str	r2, [r3, #0]
  memcpy(prod_data->data, adc_values, sizeof(adc_values)/2);
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	490a      	ldr	r1, [pc, #40]	; (8000c48 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f013 fdf5 	bl	8014810 <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4610      	mov	r0, r2
 8000c32:	f010 fd8d 	bl	8011750 <osMailPut>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000c3c:	601a      	str	r2, [r3, #0]
    // Handle Error here
  }



}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	240000a0 	.word	0x240000a0
 8000c4c:	2406dc2c 	.word	0x2406dc2c
 8000c50:	2406dc30 	.word	0x2406dc30
 8000c54:	2406dc28 	.word	0x2406dc28

08000c58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]


  SCB_InvalidateDCache_by_Addr((uint32_t *) &adc_values[ADC_BUFFER_LENGTH/2], ADC_BUFFER_LENGTH);
 8000c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c66:	f7ff fe15 	bl	8000894 <SCB_InvalidateDCache_by_Addr>
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c72:	4618      	mov	r0, r3
 8000c74:	f010 fd56 	bl	8011724 <osMailAlloc>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c7c:	601a      	str	r2, [r3, #0]
  memcpy(prod_data->data, adc_values + ADC_BUFFER_LENGTH/2, sizeof(adc_values)/2);
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f013 fdc0 	bl	8014810 <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f010 fd58 	bl	8011750 <osMailPut>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_ADC_ConvCpltCallback+0x64>)
 8000ca6:	601a      	str	r2, [r3, #0]
  if( mail_retval != osOK)
  {
    // Handle Error here
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240040a0 	.word	0x240040a0
 8000cb4:	2406dc2c 	.word	0x2406dc2c
 8000cb8:	2406dc30 	.word	0x2406dc30
 8000cbc:	2406dc28 	.word	0x2406dc28

08000cc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == UART8)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_UART_RxCpltCallback+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d115      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x3e>
  {
    // Wait for data from the pi.
    if(uart_rx_buffer == 0x31)
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_RxCpltCallback+0x4c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b31      	cmp	r3, #49	; 0x31
 8000cd8:	d107      	bne.n	8000cea <HAL_UART_RxCpltCallback+0x2a>
    {
      setFileName();
 8000cda:	f7ff feab 	bl	8000a34 <setFileName>
      osSignalSet(prodTaskHandle, 0x01);
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_UART_RxCpltCallback+0x50>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f010 f991 	bl	801100c <osSignalSet>
    }
    if(uart_rx_buffer == 0x32)
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_UART_RxCpltCallback+0x4c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b32      	cmp	r3, #50	; 0x32
 8000cf0:	d105      	bne.n	8000cfe <HAL_UART_RxCpltCallback+0x3e>
    {
      osSignalSet(conTaskHandle, 0x02);
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_UART_RxCpltCallback+0x54>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f010 f987 	bl	801100c <osSignalSet>
    }
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40007c00 	.word	0x40007c00
 8000d0c:	2406ec98 	.word	0x2406ec98
 8000d10:	24064b6c 	.word	0x24064b6c
 8000d14:	24064b68 	.word	0x24064b68

08000d18 <MX_GPIO_Init>:

/**
 * @brief Initialise GPIO Pins
 */
void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a30      	ldr	r2, [pc, #192]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_GPIO_Init+0xe0>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STAT_GPIO_Port, LED_STAT_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MX_GPIO_Init+0xe4>)
 8000dcc:	f005 ff38 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO LED pin*/
  GPIO_InitStruct.Pin = LED_STAT_Pin;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STAT_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_GPIO_Init+0xe4>)
 8000dea:	f005 fd79 	bl	80068e0 <HAL_GPIO_Init>

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58020400 	.word	0x58020400

08000e00 <SCB_EnableICache>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e08:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <SCB_EnableICache+0x3c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e18:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <SCB_EnableICache+0x3c>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <SCB_EnableICache+0x3c>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e2c:	f3bf 8f6f 	isb	sy
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <SCB_EnableDCache>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e58:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0b5b      	lsrs	r3, r3, #13
 8000e5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e62:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e6c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	015a      	lsls	r2, r3, #5
 8000e72:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e76:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e7c:	490f      	ldr	r1, [pc, #60]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1ef      	bne.n	8000e6e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e5      	bne.n	8000e64 <SCB_EnableDCache+0x24>
 8000e98:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <SCB_EnableDCache+0x7c>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6153      	str	r3, [r2, #20]
 8000ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eac:	f3bf 8f6f 	isb	sy
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0


  /* MPU Configuration */
  MPU_Config();
 8000ec4:	f000 f94a 	bl	800115c <MPU_Config>

  /* Enable I-Cache */
  SCB_EnableICache();
 8000ec8:	f7ff ff9a 	bl	8000e00 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ecc:	f7ff ffb8 	bl	8000e40 <SCB_EnableDCache>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 ff06 	bl	8001ce0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f818 	bl	8000f08 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f7ff ff1e 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f7ff fcaa 	bl	8000834 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000ee0:	f000 f980 	bl	80011e4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000ee4:	f00c ffa4 	bl	800de30 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000ee8:	f000 fbc6 	bl	8001678 <MX_TIM3_Init>
  MX_UART8_Init();
 8000eec:	f000 fc6c 	bl	80017c8 <MX_UART8_Init>
  MX_ADC3_Init();
 8000ef0:	f7ff fbc6 	bl	8000680 <MX_ADC3_Init>
  Timer_Start();
 8000ef4:	f000 f924 	bl	8001140 <Timer_Start>
  Init_UART_RX();
 8000ef8:	f000 f910 	bl	800111c <Init_UART_RX>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000efc:	f7ff fd0e 	bl	800091c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f00:	f010 f815 	bl	8010f2e <osKernelStart>


  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x44>
	...

08000f08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0cc      	sub	sp, #304	; 0x130
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f12:	224c      	movs	r2, #76	; 0x4c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f013 fc85 	bl	8014826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f013 fc7e 	bl	8014826 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	23bc      	movs	r3, #188	; 0xbc
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f013 fc76 	bl	8014826 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f005 fe9a 	bl	8006c74 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <SystemClock_Config+0x204>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	4a70      	ldr	r2, [pc, #448]	; (800110c <SystemClock_Config+0x204>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f52:	4b6e      	ldr	r3, [pc, #440]	; (800110c <SystemClock_Config+0x204>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <SystemClock_Config+0x208>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f66:	4a6a      	ldr	r2, [pc, #424]	; (8001110 <SystemClock_Config+0x208>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <SystemClock_Config+0x208>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f7e:	bf00      	nop
 8000f80:	4b63      	ldr	r3, [pc, #396]	; (8001110 <SystemClock_Config+0x208>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f8c:	d1f8      	bne.n	8000f80 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f8e:	4b61      	ldr	r3, [pc, #388]	; (8001114 <SystemClock_Config+0x20c>)
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	4a5f      	ldr	r2, [pc, #380]	; (8001114 <SystemClock_Config+0x20c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000fbe:	2309      	movs	r3, #9
 8000fc0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000fe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fe6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fe7a 	bl	8006ce8 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000ffa:	f000 f8ef 	bl	80011dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	233f      	movs	r3, #63	; 0x3f
 8001000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
      |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2303      	movs	r3, #3
 8001006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001010:	2308      	movs	r3, #8
 8001012:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001016:	2340      	movs	r3, #64	; 0x40
 8001018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800101c:	2340      	movs	r3, #64	; 0x40
 800101e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001030:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fa66 	bl	8007508 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8001042:	f000 f8cb 	bl	80011dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SDMMC
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <SystemClock_Config+0x210>)
 800104c:	601a      	str	r2, [r3, #0]
      |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2209      	movs	r2, #9
 800105c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2201      	movs	r2, #1
 8001064:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2202      	movs	r2, #2
 800106c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2202      	movs	r2, #2
 8001074:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	22c0      	movs	r2, #192	; 0xc0
 800107c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2220      	movs	r2, #32
 8001084:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800108e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2201      	movs	r2, #1
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	220c      	movs	r2, #12
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2202      	movs	r2, #2
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2204      	movs	r2, #4
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2202      	movs	r2, #2
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2200      	movs	r2, #0
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2200      	movs	r2, #0
 80010da:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	2200      	movs	r2, #0
 80010e2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 fdce 	bl	8007c94 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x1fa>
  {
    Error_Handler();
 80010fe:	f000 f86d 	bl	80011dc <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58000400 	.word	0x58000400
 8001110:	58024800 	.word	0x58024800
 8001114:	58024400 	.word	0x58024400
 8001118:	00090002 	.word	0x00090002

0800111c <Init_UART_RX>:
/**
 * @brief Initialises UART RX DMA Transfer
 * @retval Nothing
 */
void Init_UART_RX(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  if(HAL_UART_Receive_DMA(&huart8, &uart_rx_buffer, 1) != HAL_OK )
 8001120:	2201      	movs	r2, #1
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <Init_UART_RX+0x1c>)
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <Init_UART_RX+0x20>)
 8001126:	f00a fd4b 	bl	800bbc0 <HAL_UART_Receive_DMA>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <Init_UART_RX+0x18>
  {
    Error_Handler();
 8001130:	f000 f854 	bl	80011dc <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2406ec98 	.word	0x2406ec98
 800113c:	2406eea0 	.word	0x2406eea0

08001140 <Timer_Start>:
/**
 * @brief Starts ADC Timer
 * @retval None
 */
void Timer_Start(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <Timer_Start+0x18>)
 8001146:	f00a f891 	bl	800b26c <HAL_TIM_Base_Start>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <Timer_Start+0x14>
  {
    Error_Handler();
 8001150:	f000 f844 	bl	80011dc <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2406ed64 	.word	0x2406ed64

0800115c <MPU_Config>:
/**
 * @brief Configures MPU for RAM D1 region
 * @retval None
 */
void MPU_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800116e:	f002 fd05 	bl	8003b7c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected*/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001172:	2301      	movs	r3, #1
 8001174:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001176:	2300      	movs	r3, #0
 8001178:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800117a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800117e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001180:	2312      	movs	r3, #18
 8001182:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001184:	2300      	movs	r3, #0
 8001186:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001188:	2301      	movs	r3, #1
 800118a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800118c:	2303      	movs	r3, #3
 800118e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fd1e 	bl	8003be4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011a8:	2004      	movs	r0, #4
 80011aa:	f002 fcfd 	bl	8003ba8 <HAL_MPU_Enable>

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ca:	f000 fdc5 	bl	8001d58 <HAL_IncTick>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40001000 	.word	0x40001000

080011dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <Error_Handler+0x6>

080011e4 <MX_SDMMC1_SD_Init>:
 * Uncomment the Transceiver
 * code generated by CubeMX as it wont
 *  be used
 */
void MX_SDMMC1_SD_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_SDMMC1_SD_Init+0x44>)
 80011ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 80011fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001200:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 800120a:	2202      	movs	r2, #2
 800120c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_SDMMC1_SD_Init+0x40>)
 8001210:	f008 fc04 	bl	8009a1c <HAL_SD_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800121a:	f7ff ffdf 	bl	80011dc <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2406ec9c 	.word	0x2406ec9c
 8001228:	52007000 	.word	0x52007000

0800122c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_SD_MspInit+0xd8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d155      	bne.n	80012fa <HAL_SD_MspInit+0xce>
  {
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_SD_MspInit+0xdc>)
 8001250:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001254:	4a2c      	ldr	r2, [pc, #176]	; (8001308 <HAL_SD_MspInit+0xdc>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_SD_MspInit+0xdc>)
 8001260:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_SD_MspInit+0xdc>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a25      	ldr	r2, [pc, #148]	; (8001308 <HAL_SD_MspInit+0xdc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_SD_MspInit+0xdc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_SD_MspInit+0xdc>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_SD_MspInit+0xdc>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_SD_MspInit+0xdc>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012ac:	617b      	str	r3, [r7, #20]
        |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80012ba:	230c      	movs	r3, #12
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <HAL_SD_MspInit+0xe0>)
 80012c6:	f005 fb0b 	bl	80068e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ca:	2304      	movs	r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80012da:	230c      	movs	r3, #12
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480a      	ldr	r0, [pc, #40]	; (8001310 <HAL_SD_MspInit+0xe4>)
 80012e6:	f005 fafb 	bl	80068e0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2107      	movs	r1, #7
 80012ee:	2031      	movs	r0, #49	; 0x31
 80012f0:	f002 fc1c 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012f4:	2031      	movs	r0, #49	; 0x31
 80012f6:	f002 fc33 	bl	8003b60 <HAL_NVIC_EnableIRQ>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	52007000 	.word	0x52007000
 8001308:	58024400 	.word	0x58024400
 800130c:	58020800 	.word	0x58020800
 8001310:	58020c00 	.word	0x58020c00

08001314 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_MspInit+0x38>)
 800131c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_MspInit+0x38>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_MspInit+0x38>)
 800132c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	210f      	movs	r1, #15
 800133c:	f06f 0001 	mvn.w	r0, #1
 8001340:	f002 fbf4 	bl	8003b2c <HAL_NVIC_SetPriority>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58024400 	.word	0x58024400

08001350 <HAL_InitTick>:
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	d827      	bhi.n	80013ae <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800135e:	2200      	movs	r2, #0
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	2036      	movs	r0, #54	; 0x36
 8001364:	f002 fbe2 	bl	8003b2c <HAL_NVIC_SetPriority>

    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001368:	2036      	movs	r0, #54	; 0x36
 800136a:	f002 fbf9 	bl	8003b60 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_InitTick+0xc4>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_InitTick+0xc8>)
 8001376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137a:	4a27      	ldr	r2, [pc, #156]	; (8001418 <HAL_InitTick+0xc8>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_InitTick+0xc8>)
 8001386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001392:	f107 0210 	add.w	r2, r7, #16
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fc37 	bl	8007c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d106      	bne.n	80013ba <HAL_InitTick+0x6a>
 80013ac:	e001      	b.n	80013b2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e02b      	b.n	800140a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013b2:	f006 fc01 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 80013b6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013b8:	e004      	b.n	80013c4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ba:	f006 fbfd 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 80013be:	4603      	mov	r3, r0
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <HAL_InitTick+0xcc>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9b      	lsrs	r3, r3, #18
 80013ce:	3b01      	subs	r3, #1
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_InitTick+0xd0>)
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_InitTick+0xd4>)
 80013d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_InitTick+0xd0>)
 80013da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_InitTick+0xd0>)
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_InitTick+0xd0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_InitTick+0xd0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_InitTick+0xd0>)
 80013f4:	f009 fee2 	bl	800b1bc <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d104      	bne.n	8001408 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013fe:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_InitTick+0xd0>)
 8001400:	f009 ff62 	bl	800b2c8 <HAL_TIM_Base_Start_IT>
 8001404:	4603      	mov	r3, r0
 8001406:	e000      	b.n	800140a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	3740      	adds	r7, #64	; 0x40
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	24000008 	.word	0x24000008
 8001418:	58024400 	.word	0x58024400
 800141c:	431bde83 	.word	0x431bde83
 8001420:	2406ed18 	.word	0x2406ed18
 8001424:	40001000 	.word	0x40001000

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_adc3);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA1_Stream0_IRQHandler+0x10>)
 800145a:	f003 ff2f 	bl	80052bc <HAL_DMA_IRQHandler>

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	24064a8c 	.word	0x24064a8c

08001468 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA1_Stream1_IRQHandler+0x10>)
 800146e:	f003 ff25 	bl	80052bc <HAL_DMA_IRQHandler>

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2406edb0 	.word	0x2406edb0

0800147c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA1_Stream2_IRQHandler+0x10>)
 8001482:	f003 ff1b 	bl	80052bc <HAL_DMA_IRQHandler>

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2406ee28 	.word	0x2406ee28

08001490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM3_IRQHandler+0x10>)
 8001496:	f009 ff4d 	bl	800b334 <HAL_TIM_IRQHandler>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2406ed64 	.word	0x2406ed64

080014a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <SDMMC1_IRQHandler+0x10>)
 80014aa:	f008 fd19 	bl	8009ee0 <HAL_SD_IRQHandler>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2406ec9c 	.word	0x2406ec9c

080014b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <TIM6_DAC_IRQHandler+0x10>)
 80014be:	f009 ff39 	bl	800b334 <HAL_TIM_IRQHandler>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2406ed18 	.word	0x2406ed18

080014cc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart8);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <UART8_IRQHandler+0x10>)
 80014d2:	f00a fbfd 	bl	800bcd0 <HAL_UART_IRQHandler>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2406eea0 	.word	0x2406eea0

080014e0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc3);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <ADC3_IRQHandler+0x10>)
 80014e6:	f001 f9b9 	bl	800285c <HAL_ADC_IRQHandler>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24064b04 	.word	0x24064b04

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f013 f94a 	bl	80147bc <__errno>
 8001528:	4602      	mov	r2, r0
 800152a:	230c      	movs	r3, #12
 800152c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	24080000 	.word	0x24080000
 8001554:	00000400 	.word	0x00000400
 8001558:	240148fc 	.word	0x240148fc
 800155c:	24070fe8 	.word	0x24070fe8

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <SystemInit+0xec>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a38      	ldr	r2, [pc, #224]	; (800164c <SystemInit+0xec>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <SystemInit+0xf0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	2b06      	cmp	r3, #6
 800157e:	d807      	bhi.n	8001590 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001580:	4b33      	ldr	r3, [pc, #204]	; (8001650 <SystemInit+0xf0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 030f 	bic.w	r3, r3, #15
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <SystemInit+0xf0>)
 800158a:	f043 0307 	orr.w	r3, r3, #7
 800158e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <SystemInit+0xf4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <SystemInit+0xf4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <SystemInit+0xf4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <SystemInit+0xf4>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	492b      	ldr	r1, [pc, #172]	; (8001654 <SystemInit+0xf4>)
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <SystemInit+0xf8>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <SystemInit+0xf0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	d907      	bls.n	80015ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <SystemInit+0xf0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 030f 	bic.w	r3, r3, #15
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <SystemInit+0xf0>)
 80015c4:	f043 0307 	orr.w	r3, r3, #7
 80015c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <SystemInit+0xf4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <SystemInit+0xf4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <SystemInit+0xf4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <SystemInit+0xf4>)
 80015de:	4a1f      	ldr	r2, [pc, #124]	; (800165c <SystemInit+0xfc>)
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <SystemInit+0xf4>)
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <SystemInit+0x100>)
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <SystemInit+0xf4>)
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <SystemInit+0x104>)
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <SystemInit+0xf4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <SystemInit+0xf4>)
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <SystemInit+0x104>)
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <SystemInit+0xf4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <SystemInit+0xf4>)
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <SystemInit+0x104>)
 8001604:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <SystemInit+0xf4>)
 8001608:	2200      	movs	r2, #0
 800160a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <SystemInit+0xf4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <SystemInit+0xf4>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <SystemInit+0xf4>)
 800161a:	2200      	movs	r2, #0
 800161c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <SystemInit+0x108>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <SystemInit+0x10c>)
 8001624:	4013      	ands	r3, r2
 8001626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800162a:	d202      	bcs.n	8001632 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SystemInit+0x110>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <SystemInit+0x114>)
 8001634:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001638:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SystemInit+0xec>)
 800163c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001640:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	52002000 	.word	0x52002000
 8001654:	58024400 	.word	0x58024400
 8001658:	eaf6ed7f 	.word	0xeaf6ed7f
 800165c:	02020200 	.word	0x02020200
 8001660:	01ff0000 	.word	0x01ff0000
 8001664:	01010280 	.word	0x01010280
 8001668:	5c001000 	.word	0x5c001000
 800166c:	ffff0000 	.word	0xffff0000
 8001670:	51008108 	.word	0x51008108
 8001674:	52004000 	.word	0x52004000

08001678 <MX_TIM3_Init>:
/**
 * @brief Initialises Timer 3 to run
 * at 500Khz
 */
void MX_TIM3_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b092      	sub	sp, #72	; 0x48
 800167c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2220      	movs	r2, #32
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f013 f8c1 	bl	8014826 <memset>

  uint32_t latency = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t timer_prescaler = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  // Get timer clock source frequency
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 80016b0:	463a      	mov	r2, r7
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 faaa 	bl	8007c10 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <MX_TIM3_Init+0x52>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 80016c2:	f006 fa79 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 80016c6:	6478      	str	r0, [r7, #68]	; 0x44
 80016c8:	e004      	b.n	80016d4 <MX_TIM3_Init+0x5c>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80016ca:	f006 fa75 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 80016ce:	4603      	mov	r3, r0
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 80016d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <MX_TIM3_Init+0xf0>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0f5b      	lsrs	r3, r3, #29
 80016de:	3301      	adds	r3, #1
 80016e0:	643b      	str	r3, [r7, #64]	; 0x40
  htim3.Instance = TIM3;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <MX_TIM3_Init+0xf4>)
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <MX_TIM3_Init+0xf8>)
 80016e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (timer_prescaler - 1);
 80016e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <MX_TIM3_Init+0xf4>)
 80016ee:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_TIM3_Init+0xf4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80016f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <MX_TIM3_Init+0xfc>)
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <MX_TIM3_Init+0xf4>)
 8001708:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_TIM3_Init+0xf4>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_TIM3_Init+0xf4>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001716:	4815      	ldr	r0, [pc, #84]	; (800176c <MX_TIM3_Init+0xf4>)
 8001718:	f009 fd50 	bl	800b1bc <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001722:	f7ff fd5b 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001730:	4619      	mov	r1, r3
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <MX_TIM3_Init+0xf4>)
 8001734:	f009 ff1e 	bl	800b574 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800173e:	f7ff fd4d 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001742:	2320      	movs	r3, #32
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_TIM3_Init+0xf4>)
 8001752:	f00a f93f 	bl	800b9d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 800175c:	f7ff fd3e 	bl	80011dc <Error_Handler>
  }

}
 8001760:	bf00      	nop
 8001762:	3748      	adds	r7, #72	; 0x48
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	d1b8bacb 	.word	0xd1b8bacb
 800176c:	2406ed64 	.word	0x2406ed64
 8001770:	40000400 	.word	0x40000400
 8001774:	0007a120 	.word	0x0007a120

08001778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_TIM_Base_MspInit+0x48>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d116      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_TIM_Base_MspInit+0x4c>)
 800178c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_Base_MspInit+0x4c>)
 800179c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2105      	movs	r1, #5
 80017ac:	201d      	movs	r0, #29
 80017ae:	f002 f9bd 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017b2:	201d      	movs	r0, #29
 80017b4:	f002 f9d4 	bl	8003b60 <HAL_NVIC_EnableIRQ>

  }
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40000400 	.word	0x40000400
 80017c4:	58024400 	.word	0x58024400

080017c8 <MX_UART8_Init>:
/**
 * @brief UART8 Init Function
 * runs at 921600 bps
 */
void MX_UART8_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_UART8_Init+0x90>)
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <MX_UART8_Init+0x94>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 921600;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_UART8_Init+0x90>)
 80017d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017d8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_UART8_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_UART8_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_UART8_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_UART8_Init+0x90>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_UART8_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_UART8_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_UART8_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_UART8_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_UART8_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <MX_UART8_Init+0x90>)
 8001812:	f00a f985 	bl	800bb20 <HAL_UART_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800181c:	f7ff fcde 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_UART8_Init+0x90>)
 8001824:	f00b fc56 	bl	800d0d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800182e:	f7ff fcd5 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <MX_UART8_Init+0x90>)
 8001836:	f00b fc8b 	bl	800d150 <HAL_UARTEx_SetRxFifoThreshold>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001840:	f7ff fccc 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_UART8_Init+0x90>)
 8001846:	f00b fc0c 	bl	800d062 <HAL_UARTEx_DisableFifoMode>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001850:	f7ff fcc4 	bl	80011dc <Error_Handler>
  }

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2406eea0 	.word	0x2406eea0
 800185c:	40007c00 	.word	0x40007c00

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <HAL_UART_MspInit+0x150>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 8092 	bne.w	80019a8 <HAL_UART_MspInit+0x148>
  {
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_UART_MspInit+0x154>)
 8001886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800188a:	4a4a      	ldr	r2, [pc, #296]	; (80019b4 <HAL_UART_MspInit+0x154>)
 800188c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001890:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_UART_MspInit+0x154>)
 8001896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a2:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <HAL_UART_MspInit+0x154>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_UART_MspInit+0x154>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <HAL_UART_MspInit+0x154>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018c0:	2303      	movs	r3, #3
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80018d0:	2308      	movs	r3, #8
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4837      	ldr	r0, [pc, #220]	; (80019b8 <HAL_UART_MspInit+0x158>)
 80018dc:	f005 f800 	bl	80068e0 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream1;
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_UART_MspInit+0x15c>)
 80018e2:	4a37      	ldr	r2, [pc, #220]	; (80019c0 <HAL_UART_MspInit+0x160>)
 80018e4:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80018e6:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_UART_MspInit+0x15c>)
 80018e8:	2251      	movs	r2, #81	; 0x51
 80018ea:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_UART_MspInit+0x15c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_UART_MspInit+0x15c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_UART_MspInit+0x15c>)
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_UART_MspInit+0x15c>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_UART_MspInit+0x15c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_UART_MspInit+0x15c>)
 800190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001912:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_UART_MspInit+0x15c>)
 8001916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191a:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_UART_MspInit+0x15c>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001922:	4826      	ldr	r0, [pc, #152]	; (80019bc <HAL_UART_MspInit+0x15c>)
 8001924:	f002 f9a2 	bl	8003c6c <HAL_DMA_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800192e:	f7ff fc55 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_UART_MspInit+0x15c>)
 8001936:	679a      	str	r2, [r3, #120]	; 0x78
 8001938:	4a20      	ldr	r2, [pc, #128]	; (80019bc <HAL_UART_MspInit+0x15c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <HAL_UART_MspInit+0x168>)
 8001942:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001946:	2252      	movs	r2, #82	; 0x52
 8001948:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195c:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 800197c:	4811      	ldr	r0, [pc, #68]	; (80019c4 <HAL_UART_MspInit+0x164>)
 800197e:	f002 f975 	bl	8003c6c <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001988:	f7ff fc28 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001990:	675a      	str	r2, [r3, #116]	; 0x74
 8001992:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_UART_MspInit+0x164>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 7, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2107      	movs	r1, #7
 800199c:	2053      	movs	r0, #83	; 0x53
 800199e:	f002 f8c5 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80019a2:	2053      	movs	r0, #83	; 0x53
 80019a4:	f002 f8dc 	bl	8003b60 <HAL_NVIC_EnableIRQ>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40007c00 	.word	0x40007c00
 80019b4:	58024400 	.word	0x58024400
 80019b8:	58021000 	.word	0x58021000
 80019bc:	2406edb0 	.word	0x2406edb0
 80019c0:	40020028 	.word	0x40020028
 80019c4:	2406ee28 	.word	0x2406ee28
 80019c8:	40020040 	.word	0x40020040

080019cc <WavHeaderUpdate>:
#include "wav.h"

uint32_t WavHeaderUpdate(uint8_t* pHeader, WAV_Format* wavFormatStruct,  uint32_t file_size)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  // Rewrite the value of the sampling time here.
  uint32_t header_file_size = file_size - 8;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b08      	subs	r3, #8
 80019dc:	617b      	str	r3, [r7, #20]
  pHeader[4] = (uint8_t) (header_file_size);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3304      	adds	r3, #4
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t) (header_file_size >> 8);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	0a1a      	lsrs	r2, r3, #8
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3305      	adds	r3, #5
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t) (header_file_size >> 16);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	0c1a      	lsrs	r2, r3, #16
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3306      	adds	r3, #6
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t) (header_file_size >> 24);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	0e1a      	lsrs	r2, r3, #24
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3307      	adds	r3, #7
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]

  //rewrite the Value of sample data.
  uint32_t data_file_size = file_size - 44;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b2c      	subs	r3, #44	; 0x2c
 8001a10:	613b      	str	r3, [r7, #16]
  pHeader[40] = (uint8_t) (data_file_size);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3328      	adds	r3, #40	; 0x28
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t) (data_file_size >> 8);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	0a1a      	lsrs	r2, r3, #8
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3329      	adds	r3, #41	; 0x29
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t) (data_file_size >> 16);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	0c1a      	lsrs	r2, r3, #16
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	332a      	adds	r3, #42	; 0x2a
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t) (data_file_size >> 24);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	0e1a      	lsrs	r2, r3, #24
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	332b      	adds	r3, #43	; 0x2b
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]

  return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <InitialiseWavEncoder>:
 * @param Freq: Sampling Frequency
 * @param pHeader: Pointer to the WAV file header to be written
 * @retval 0 if successful, !0 otherwise
 */
uint32_t InitialiseWavEncoder(uint32_t Freq, uint8_t *pHeader, WAV_Format* WaveFormat)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]

  WaveFormat->SampleRate = Freq; // Audio sampling frequency @ 500KHz
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	619a      	str	r2, [r3, #24]
  //WaveFormat.SampleRate = 44100;
  WaveFormat->NumChannels = 1; // Stereo;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	82da      	strh	r2, [r3, #22]
  WaveFormat->BitsPerSample = 16; // Useful bits per sample;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat->FileSize = 0x003D0900; // 1.92MB Filesize - 8 bytes 8 bytes (which is size of "RIFF" + size of file header)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <InitialiseWavEncoder+0x78>)
 8001a72:	605a      	str	r2, [r3, #4]
  WaveFormat->SubChunk1Size = 16; // or should it be 16?
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2210      	movs	r2, #16
 8001a78:	611a      	str	r2, [r3, #16]
  WaveFormat->ByteRate =  WaveFormat->SampleRate * (WaveFormat->BitsPerSample/8) * (WaveFormat->NumChannels);  // Bytes per second which is sample rate * block aligj
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	b292      	uxth	r2, r2
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	8ad2      	ldrh	r2, [r2, #22]
 8001a8e:	fb02 f203 	mul.w	r2, r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	61da      	str	r2, [r3, #28]

  WaveFormat->BlockAlign = WaveFormat->NumChannels * (WaveFormat->BitsPerSample/8); // number of bytes in a frame
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	8ada      	ldrh	r2, [r3, #22]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	fb12 f303 	smulbb	r3, r2, r3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	841a      	strh	r2, [r3, #32]

  // Parse the rest of the data here.
  // If function returns anything other than 1,
  // break function.
  if(ProcessWavHeader(pHeader, WaveFormat) == 1)
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	68b8      	ldr	r0, [r7, #8]
 8001ab0:	f000 f80c 	bl	8001acc <ProcessWavHeader>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <InitialiseWavEncoder+0x6e>
  {
    return 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <InitialiseWavEncoder+0x70>
  }

  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	003d0900 	.word	0x003d0900

08001acc <ProcessWavHeader>:
 *	 @param pheader: Wave Header Buffer to completed
 *  @param wavFormatStruct: Pointer to the wave struct
 *  @retval 0 if passed, !0 otherwise
 */
uint32_t ProcessWavHeader(uint8_t* pHeader, WAV_Format* wavFormatStruct)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /***********Header*******************/
  //	Chunk which is always "RIFF"
  pHeader[0] = 'R';
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2252      	movs	r2, #82	; 0x52
 8001ada:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	2249      	movs	r2, #73	; 0x49
 8001ae2:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	2246      	movs	r2, #70	; 0x46
 8001aea:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3303      	adds	r3, #3
 8001af0:	2246      	movs	r2, #70	; 0x46
 8001af2:	701a      	strb	r2, [r3, #0]

  // File length : Total length minus 8 bytes. Can always write back after each recording session.
  //4000000 bytes = 0x003D0900
  pHeader[4] = 0x00;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x00;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3305      	adds	r3, #5
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x00;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3306      	adds	r3, #6
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3307      	adds	r3, #7
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

  // File Format: "Always "WAVE" for WAV files
  pHeader[8]  = 'W';
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3308      	adds	r3, #8
 8001b18:	2257      	movs	r2, #87	; 0x57
 8001b1a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3309      	adds	r3, #9
 8001b20:	2241      	movs	r2, #65	; 0x41
 8001b22:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	330a      	adds	r3, #10
 8001b28:	2256      	movs	r2, #86	; 0x56
 8001b2a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	330b      	adds	r3, #11
 8001b30:	2245      	movs	r2, #69	; 0x45
 8001b32:	701a      	strb	r2, [r3, #0]

  /*************Format Chunk*** add single space at end too ***/
  pHeader[12] = 'f';
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	330c      	adds	r3, #12
 8001b38:	2266      	movs	r2, #102	; 0x66
 8001b3a:	701a      	strb	r2, [r3, #0]
  pHeader[13] = 'm';
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	330d      	adds	r3, #13
 8001b40:	226d      	movs	r2, #109	; 0x6d
 8001b42:	701a      	strb	r2, [r3, #0]
  pHeader[14] = 't';
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330e      	adds	r3, #14
 8001b48:	2274      	movs	r2, #116	; 0x74
 8001b4a:	701a      	strb	r2, [r3, #0]
  pHeader[15] = ' ';
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	330f      	adds	r3, #15
 8001b50:	2220      	movs	r2, #32
 8001b52:	701a      	strb	r2, [r3, #0]

  // chunk size in bytes, 0x10
  pHeader[16] = 0x10;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3310      	adds	r3, #16
 8001b58:	2210      	movs	r2, #16
 8001b5a:	701a      	strb	r2, [r3, #0]
  pHeader[17] = 0x00;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3311      	adds	r3, #17
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
  pHeader[18] = 0x00;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3312      	adds	r3, #18
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
  pHeader[19] = 0x00;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3313      	adds	r3, #19
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]

  // Audio Format. Always 1 for WAV files in PCM format
  pHeader[20] = 0x01;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3314      	adds	r3, #20
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
  pHeader[21] = 0x00;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3315      	adds	r3, #21
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

  // Number of channels: Mono 0x01 or stereo 0x02. Pass Struct member through
  pHeader[22] = wavFormatStruct->NumChannels;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	8ada      	ldrh	r2, [r3, #22]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3316      	adds	r3, #22
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
  pHeader[23] = 0x00;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3317      	adds	r3, #23
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]

  // Sample Rate in Hz -- To be written in little Endian.
  // 500000 =  0x0007A120 ==> [24] = 0x20, 27 = 0x00
  // This masks the 32 bit integers into single bytes
  // https://stackoverflow.com/questions/10493411/what-is-bit-masking
  pHeader[24] = (uint8_t) ((wavFormatStruct->SampleRate & 0xFFFF));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
  pHeader[25] = (uint8_t) ((wavFormatStruct->SampleRate >> 8 )& 0xFFFF);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	0a1a      	lsrs	r2, r3, #8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3319      	adds	r3, #25
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
  pHeader[26] = (uint8_t) ((wavFormatStruct->SampleRate >> 16)& 0xFFFF);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	0c1a      	lsrs	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	331a      	adds	r3, #26
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
  pHeader[27] = (uint8_t) ((wavFormatStruct->SampleRate >> 24 )& 0xFFFF);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	0e1a      	lsrs	r2, r3, #24
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	331b      	adds	r3, #27
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

  /** Byte Rate***/
  pHeader[28] = (uint8_t) ((wavFormatStruct->ByteRate & 0xFFFF));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	331c      	adds	r3, #28
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
  pHeader[29] = (uint8_t) ((wavFormatStruct->ByteRate >> 8 )& 0xFFFF);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	0a1a      	lsrs	r2, r3, #8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	331d      	adds	r3, #29
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
  pHeader[30] = (uint8_t) ((wavFormatStruct->ByteRate >> 16)& 0xFFFF);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	0c1a      	lsrs	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	331e      	adds	r3, #30
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
  pHeader[31] = (uint8_t) ((wavFormatStruct->ByteRate >> 24 )& 0xFFFF);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	0e1a      	lsrs	r2, r3, #24
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	331f      	adds	r3, #31
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	701a      	strb	r2, [r3, #0]


  /** Block ALignment usually takes up one byte **/
  pHeader[32] = wavFormatStruct->BlockAlign;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	8c1a      	ldrh	r2, [r3, #32]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
  pHeader[33] = 0x00;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3321      	adds	r3, #33	; 0x21
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

  pHeader[32] = 0x04;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3320      	adds	r3, #32
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	701a      	strb	r2, [r3, #0]
  pHeader[33] = 0x00;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3321      	adds	r3, #33	; 0x21
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]

  /**** Bits per sample **/
  pHeader[34]  = wavFormatStruct->BitsPerSample;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3322      	adds	r3, #34	; 0x22
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3323      	adds	r3, #35	; 0x23
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

  /***************Data Chunk ************************/
  // Always "data"
  pHeader[36]  = 'd';
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3324      	adds	r3, #36	; 0x24
 8001c40:	2264      	movs	r2, #100	; 0x64
 8001c42:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3325      	adds	r3, #37	; 0x25
 8001c48:	2261      	movs	r2, #97	; 0x61
 8001c4a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3326      	adds	r3, #38	; 0x26
 8001c50:	2274      	movs	r2, #116	; 0x74
 8001c52:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3327      	adds	r3, #39	; 0x27
 8001c58:	2261      	movs	r2, #97	; 0x61
 8001c5a:	701a      	strb	r2, [r3, #0]

  // Data Length or number of element in sample data
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3328      	adds	r3, #40	; 0x28
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x00;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3329      	adds	r3, #41	; 0x29
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x00;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	332a      	adds	r3, #42	; 0x2a
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	332b      	adds	r3, #43	; 0x2b
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]

  //upon success
  return 0;
 8001c7c:	2300      	movs	r3, #0

}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c90:	f7ff fc66 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c96:	e003      	b.n	8001ca0 <LoopCopyDataInit>

08001c98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001c9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c9e:	3104      	adds	r1, #4

08001ca0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca0:	480a      	ldr	r0, [pc, #40]	; (8001ccc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ca4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ca6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ca8:	d3f6      	bcc.n	8001c98 <CopyDataInit>
  ldr  r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001cac:	e002      	b.n	8001cb4 <LoopFillZerobss>

08001cae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb0:	f842 3b04 	str.w	r3, [r2], #4

08001cb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001cb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cb8:	d3f9      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f012 fd85 	bl	80147c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cbe:	f7ff f8ff 	bl	8000ec0 <main>
  bx  lr    
 8001cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001cc8:	0801523c 	.word	0x0801523c
  ldr  r0, =_sdata
 8001ccc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001cd0:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8001cd4:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8001cd8:	24070fe4 	.word	0x24070fe4

08001cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f001 ff15 	bl	8003b16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cec:	f005 fdc2 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4601      	mov	r1, r0
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_Init+0x68>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_Init+0x6c>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa21 f303 	lsr.w	r3, r1, r3
 8001d08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_Init+0x68>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_Init+0x6c>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <HAL_Init+0x70>)
 8001d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <HAL_Init+0x74>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff fb10 	bl	8001350 <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e002      	b.n	8001d40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3a:	f7ff faeb 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	08015134 	.word	0x08015134
 8001d50:	24000004 	.word	0x24000004
 8001d54:	24000000 	.word	0x24000000

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2400000c 	.word	0x2400000c
 8001d7c:	2406ef2c 	.word	0x2406ef2c

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2406ef2c 	.word	0x2406ef2c

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_Delay+0x40>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2400000c 	.word	0x2400000c

08001ddc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_GetREVID+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0c1b      	lsrs	r3, r3, #16
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	5c001000 	.word	0x5c001000

08001df4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	58000400 	.word	0x58000400

08001e20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3360      	adds	r3, #96	; 0x60
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	611a      	str	r2, [r3, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b087      	sub	sp, #28
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]
  }
}
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3330      	adds	r3, #48	; 0x30
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	211f      	movs	r1, #31
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	f003 011f 	and.w	r1, r3, #31
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f023 0203 	bic.w	r2, r3, #3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b087      	sub	sp, #28
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3314      	adds	r3, #20
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0e5b      	lsrs	r3, r3, #25
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	0d1b      	lsrs	r3, r3, #20
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2107      	movs	r1, #7
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	0d1b      	lsrs	r3, r3, #20
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	431a      	orrs	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0318 	and.w	r3, r3, #24
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002074:	40d9      	lsrs	r1, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	400b      	ands	r3, r1
 800207a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	000fffff 	.word	0x000fffff

08002098 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020de:	4013      	ands	r3, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6093      	str	r3, [r2, #8]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	5fffffc0 	.word	0x5fffffc0

080020f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002108:	d101      	bne.n	800210e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <LL_ADC_EnableInternalRegulator+0x24>)
 800212a:	4013      	ands	r3, r2
 800212c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	6fffffc0 	.word	0x6fffffc0

08002144 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002158:	d101      	bne.n	800215e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <LL_ADC_Enable+0x24>)
 800217a:	4013      	ands	r3, r2
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	7fffffc0 	.word	0x7fffffc0

08002194 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <LL_ADC_Disable+0x24>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	f043 0202 	orr.w	r2, r3, #2
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	7fffffc0 	.word	0x7fffffc0

080021bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_IsEnabled+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_IsEnabled+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d101      	bne.n	80021fa <LL_ADC_IsDisableOngoing+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_ADC_IsDisableOngoing+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <LL_ADC_REG_StartConversion+0x24>)
 8002216:	4013      	ands	r3, r2
 8002218:	f043 0204 	orr.w	r2, r3, #4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	7fffffc0 	.word	0x7fffffc0

08002230 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <LL_ADC_REG_StopConversion+0x24>)
 800223e:	4013      	ands	r3, r2
 8002240:	f043 0210 	orr.w	r2, r3, #16
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	7fffffc0 	.word	0x7fffffc0

08002258 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d101      	bne.n	8002270 <LL_ADC_REG_IsConversionOngoing+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <LL_ADC_INJ_StopConversion+0x24>)
 800228e:	4013      	ands	r3, r2
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	7fffffc0 	.word	0x7fffffc0

080022a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d101      	bne.n	80022c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e18e      	b.n	8002608 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe fa29 	bl	8000750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff feef 	bl	80020f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fed5 	bl	80020d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff0a 	bl	8002144 <LL_ADC_IsInternalRegulatorEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff feee 	bl	800211c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002340:	4b9a      	ldr	r3, [pc, #616]	; (80025ac <HAL_ADC_Init+0x2dc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a9a      	ldr	r2, [pc, #616]	; (80025b0 <HAL_ADC_Init+0x2e0>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002350:	e002      	b.n	8002358 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff feee 	bl	8002144 <LL_ADC_IsInternalRegulatorEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff62 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 8002394:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 8129 	bne.w	80025f6 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 8125 	bne.w	80025f6 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023b4:	f043 0202 	orr.w	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fefb 	bl	80021bc <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d136      	bne.n	800243a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a78      	ldr	r2, [pc, #480]	; (80025b4 <HAL_ADC_Init+0x2e4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_Init+0x110>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a77      	ldr	r2, [pc, #476]	; (80025b8 <HAL_ADC_Init+0x2e8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10e      	bne.n	80023fe <HAL_ADC_Init+0x12e>
 80023e0:	4874      	ldr	r0, [pc, #464]	; (80025b4 <HAL_ADC_Init+0x2e4>)
 80023e2:	f7ff feeb 	bl	80021bc <LL_ADC_IsEnabled>
 80023e6:	4604      	mov	r4, r0
 80023e8:	4873      	ldr	r0, [pc, #460]	; (80025b8 <HAL_ADC_Init+0x2e8>)
 80023ea:	f7ff fee7 	bl	80021bc <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4323      	orrs	r3, r4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e008      	b.n	8002410 <HAL_ADC_Init+0x140>
 80023fe:	486f      	ldr	r0, [pc, #444]	; (80025bc <HAL_ADC_Init+0x2ec>)
 8002400:	f7ff fedc 	bl	80021bc <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_ADC_Init+0x2e4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_ADC_Init+0x158>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_ADC_Init+0x2e8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_ADC_Init+0x15c>
 8002428:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_ADC_Init+0x2f0>)
 800242a:	e000      	b.n	800242e <HAL_ADC_Init+0x15e>
 800242c:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_ADC_Init+0x2f4>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7ff fcf3 	bl	8001e20 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800243a:	f7ff fccf 	bl	8001ddc <HAL_GetREVID>
 800243e:	4602      	mov	r2, r0
 8002440:	f241 0303 	movw	r3, #4099	; 0x1003
 8002444:	429a      	cmp	r2, r3
 8002446:	d914      	bls.n	8002472 <HAL_ADC_Init+0x1a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b10      	cmp	r3, #16
 800244e:	d110      	bne.n	8002472 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7d5b      	ldrb	r3, [r3, #21]
 8002454:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800245a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002460:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7f1b      	ldrb	r3, [r3, #28]
 8002466:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002468:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800246a:	f043 030c 	orr.w	r3, r3, #12
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e00d      	b.n	800248e <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7d5b      	ldrb	r3, [r3, #21]
 8002476:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800247c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002482:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7f1b      	ldrb	r3, [r3, #28]
 8002488:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7f1b      	ldrb	r3, [r3, #28]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	3b01      	subs	r3, #1
 800249c:	045b      	lsls	r3, r3, #17
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <HAL_ADC_Init+0x2f8>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	69b9      	ldr	r1, [r7, #24]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff febd 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 80024de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fedf 	bl	80022a8 <LL_ADC_INJ_IsConversionOngoing>
 80024ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d14a      	bne.n	8002588 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d147      	bne.n	8002588 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7d1b      	ldrb	r3, [r3, #20]
 80024fc:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <HAL_ADC_Init+0x2fc>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	69b9      	ldr	r1, [r7, #24]
 8002516:	430b      	orrs	r3, r1
 8002518:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002520:	2b01      	cmp	r3, #1
 8002522:	d11b      	bne.n	800255c <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_ADC_Init+0x300>)
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002538:	3a01      	subs	r2, #1
 800253a:	0411      	lsls	r1, r2, #16
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800254c:	430a      	orrs	r2, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e007      	b.n	800256c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f001 f8f0 	bl	8003768 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d121      	bne.n	80025d4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f023 010f 	bic.w	r1, r3, #15
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
 80025a8:	e01c      	b.n	80025e4 <HAL_ADC_Init+0x314>
 80025aa:	bf00      	nop
 80025ac:	24000000 	.word	0x24000000
 80025b0:	053e2d63 	.word	0x053e2d63
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40022100 	.word	0x40022100
 80025bc:	58026000 	.word	0x58026000
 80025c0:	40022300 	.word	0x40022300
 80025c4:	58026300 	.word	0x58026300
 80025c8:	fff0c003 	.word	0xfff0c003
 80025cc:	ffffbffc 	.word	0xffffbffc
 80025d0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 020f 	bic.w	r2, r2, #15
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
 80025f4:	e007      	b.n	8002606 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002606:	7ffb      	ldrb	r3, [r7, #31]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3724      	adds	r7, #36	; 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}

08002610 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a55      	ldr	r2, [pc, #340]	; (8002778 <HAL_ADC_Start_DMA+0x168>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Start_DMA+0x20>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a54      	ldr	r2, [pc, #336]	; (800277c <HAL_ADC_Start_DMA+0x16c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_ADC_Start_DMA+0x24>
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_ADC_Start_DMA+0x170>)
 8002632:	e000      	b.n	8002636 <HAL_ADC_Start_DMA+0x26>
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_ADC_Start_DMA+0x174>)
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd2e 	bl	8002098 <LL_ADC_GetMultimode>
 800263c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe08 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 808c 	bne.w	8002768 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Start_DMA+0x4e>
 800265a:	2302      	movs	r3, #2
 800265c:	e087      	b.n	800276e <HAL_ADC_Start_DMA+0x15e>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d002      	beq.n	8002678 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b09      	cmp	r3, #9
 8002676:	d170      	bne.n	800275a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 ff05 	bl	8003488 <ADC_Enable>
 800267e:	4603      	mov	r3, r0
 8002680:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d163      	bne.n	8002750 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_ADC_Start_DMA+0x178>)
 800268e:	4013      	ands	r3, r2
 8002690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a37      	ldr	r2, [pc, #220]	; (800277c <HAL_ADC_Start_DMA+0x16c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Start_DMA+0x98>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e000      	b.n	80026aa <HAL_ADC_Start_DMA+0x9a>
 80026a8:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_ADC_Start_DMA+0x168>)
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d002      	beq.n	80026b8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f023 0206 	bic.w	r2, r3, #6
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	659a      	str	r2, [r3, #88]	; 0x58
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	4a28      	ldr	r2, [pc, #160]	; (800278c <HAL_ADC_Start_DMA+0x17c>)
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_ADC_Start_DMA+0x180>)
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_ADC_Start_DMA+0x184>)
 80026fa:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	221c      	movs	r2, #28
 8002702:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0210 	orr.w	r2, r2, #16
 800271a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7ff fc41 	bl	8001fae <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3340      	adds	r3, #64	; 0x40
 8002736:	4619      	mov	r1, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f001 fdf2 	bl	8004324 <HAL_DMA_Start_IT>
 8002740:	4603      	mov	r3, r0
 8002742:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fd5d 	bl	8002208 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800274e:	e00d      	b.n	800276c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002758:	e008      	b.n	800276c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002766:	e001      	b.n	800276c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002768:	2302      	movs	r3, #2
 800276a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800276c:	7dfb      	ldrb	r3, [r7, #23]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40022000 	.word	0x40022000
 800277c:	40022100 	.word	0x40022100
 8002780:	40022300 	.word	0x40022300
 8002784:	58026300 	.word	0x58026300
 8002788:	fffff0fe 	.word	0xfffff0fe
 800278c:	08003641 	.word	0x08003641
 8002790:	08003719 	.word	0x08003719
 8002794:	08003735 	.word	0x08003735

08002798 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Stop_DMA+0x16>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e04f      	b.n	800284e <HAL_ADC_Stop_DMA+0xb6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027b6:	2103      	movs	r1, #3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fdb1 	bl	8003320 <ADC_ConversionStop>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d13d      	bne.n	8002844 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0203 	bic.w	r2, r2, #3
 80027d6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d10f      	bne.n	8002806 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 f804 	bl	80047f8 <HAL_DMA_Abort>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0210 	bic.w	r2, r2, #16
 8002814:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 feb7 	bl	8003590 <ADC_Disable>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e002      	b.n	800282e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 feb1 	bl	8003590 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_ADC_Stop_DMA+0xc0>)
 800283a:	4013      	ands	r3, r2
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	ffffeefe 	.word	0xffffeefe

0800285c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <HAL_ADC_IRQHandler+0x240>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_ADC_IRQHandler+0x30>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a86      	ldr	r2, [pc, #536]	; (8002aa0 <HAL_ADC_IRQHandler+0x244>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_ADC_IRQHandler+0x34>
 800288c:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <HAL_ADC_IRQHandler+0x248>)
 800288e:	e000      	b.n	8002892 <HAL_ADC_IRQHandler+0x36>
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_ADC_IRQHandler+0x24c>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fc00 	bl	8002098 <LL_ADC_GetMultimode>
 8002898:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x78>
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f001 f86e 	bl	80039a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_IRQHandler+0x8c>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8083 	beq.w	80029fa <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d07d      	beq.n	80029fa <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fb08 	bl	8001f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d062      	beq.n	80029ec <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5d      	ldr	r2, [pc, #372]	; (8002aa0 <HAL_ADC_IRQHandler+0x244>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d002      	beq.n	8002936 <HAL_ADC_IRQHandler+0xda>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e000      	b.n	8002938 <HAL_ADC_IRQHandler+0xdc>
 8002936:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <HAL_ADC_IRQHandler+0x240>)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4293      	cmp	r3, r2
 800293e:	d008      	beq.n	8002952 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d002      	beq.n	8002952 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b09      	cmp	r3, #9
 8002950:	d104      	bne.n	800295c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	e00c      	b.n	8002976 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4f      	ldr	r2, [pc, #316]	; (8002aa0 <HAL_ADC_IRQHandler+0x244>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d002      	beq.n	800296c <HAL_ADC_IRQHandler+0x110>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e000      	b.n	800296e <HAL_ADC_IRQHandler+0x112>
 800296c:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <HAL_ADC_IRQHandler+0x240>)
 800296e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d135      	bne.n	80029ec <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b08      	cmp	r3, #8
 800298c:	d12e      	bne.n	80029ec <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc60 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d11a      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 020c 	bic.w	r2, r2, #12
 80029ac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d112      	bne.n	80029ec <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
 80029d2:	e00b      	b.n	80029ec <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fe f933 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	220c      	movs	r2, #12
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_ADC_IRQHandler+0x1b2>
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a0 	beq.w	8002b5a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 809a 	beq.w	8002b5a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fac6 	bl	8001fd4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a48:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fa6e 	bl	8001f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a54:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_ADC_IRQHandler+0x244>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d002      	beq.n	8002a66 <HAL_ADC_IRQHandler+0x20a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_IRQHandler+0x20c>
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_ADC_IRQHandler+0x240>)
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d008      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d002      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b07      	cmp	r3, #7
 8002a80:	d104      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	e014      	b.n	8002ab6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <HAL_ADC_IRQHandler+0x244>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00a      	beq.n	8002aac <HAL_ADC_IRQHandler+0x250>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e008      	b.n	8002aae <HAL_ADC_IRQHandler+0x252>
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40022100 	.word	0x40022100
 8002aa4:	40022300 	.word	0x40022300
 8002aa8:	58026300 	.word	0x58026300
 8002aac:	4b84      	ldr	r3, [pc, #528]	; (8002cc0 <HAL_ADC_IRQHandler+0x464>)
 8002aae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10c      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d142      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d03f      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d13a      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d133      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d12e      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fbd8 	bl	80022a8 <LL_ADC_INJ_IsConversionOngoing>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11a      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b0c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d112      	bne.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
 8002b32:	e00b      	b.n	8002b4c <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f043 0210 	orr.w	r2, r3, #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 ff03 	bl	8003958 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2260      	movs	r2, #96	; 0x60
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d011      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x32c>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8a8 	bl	8002cd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x35c>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fee9 	bl	8003980 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d012      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x38c>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fedb 	bl	8003994 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d043      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x41e>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d03e      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
 8002c08:	e021      	b.n	8002c4e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_ADC_IRQHandler+0x464>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x3c8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_ADC_IRQHandler+0x468>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x3cc>
 8002c24:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_ADC_IRQHandler+0x46c>)
 8002c26:	e000      	b.n	8002c2a <HAL_ADC_IRQHandler+0x3ce>
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_ADC_IRQHandler+0x470>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fa42 	bl	80020b4 <LL_ADC_GetMultiDMATransfer>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e008      	b.n	8002c4e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10e      	bne.n	8002c72 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f043 0202 	orr.w	r2, r3, #2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f839 	bl	8002ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d018      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x45a>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d013      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f043 0208 	orr.w	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fe5b 	bl	800396c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40022100 	.word	0x40022100
 8002cc8:	40022300 	.word	0x40022300
 8002ccc:	58026300 	.word	0x58026300

08002cd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b099      	sub	sp, #100	; 0x64
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a99      	ldr	r2, [pc, #612]	; (8002f78 <HAL_ADC_ConfigChannel+0x280>)
 8002d12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x2a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e2e6      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x5f8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fa92 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 82cb 	bne.w	80032d2 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d108      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x62>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2201      	movs	r2, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	e00f      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x82>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2201      	movs	r2, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	69d1      	ldr	r1, [r2, #28]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f7ff f8de 	bl	8001f56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa5a 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa7c 	bl	80022a8 <LL_ADC_INJ_IsConversionOngoing>
 8002db0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 80b3 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 80af 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7ff f913 	bl	8001ffa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dd4:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <HAL_ADC_ConfigChannel+0x284>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de0:	d10b      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x102>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	e01d      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x13e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x128>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	e00a      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x13e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d027      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4e:	f7ff f81b 	bl	8001e88 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	7e5b      	ldrb	r3, [r3, #25]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x170>
 8002e62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e66:	e000      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x172>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f7ff f845 	bl	8001efa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	7e1b      	ldrb	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d102      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x18e>
 8002e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e84:	e000      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x190>
 8002e86:	2300      	movs	r3, #0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f7ff f81d 	bl	8001ec8 <LL_ADC_SetDataRightShift>
 8002e8e:	e047      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ed6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	069b      	lsls	r3, r3, #26
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f949 	bl	80021bc <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 81d9 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7ff f886 	bl	8002050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <HAL_ADC_ConfigChannel+0x280>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 8101 	bne.w	8003152 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x288>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e016      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x2ae>
 8002f78:	47ff0000 	.word	0x47ff0000
 8002f7c:	5c001000 	.word	0x5c001000
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d064      	beq.n	8003074 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x2ce>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc4:	e00e      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x2ec>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x30c>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	e010      	b.n	8003026 <HAL_ADC_ConfigChannel+0x32e>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	ea42 0103 	orr.w	r1, r2, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_ADC_ConfigChannel+0x354>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0e9b      	lsrs	r3, r3, #26
 800303c:	3301      	adds	r3, #1
 800303e:	f003 021f 	and.w	r2, r3, #31
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	e011      	b.n	8003070 <HAL_ADC_ConfigChannel+0x378>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003070:	430b      	orrs	r3, r1
 8003072:	e069      	b.n	8003148 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x398>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	069b      	lsls	r3, r3, #26
 800308a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308e:	e00e      	b.n	80030ae <HAL_ADC_ConfigChannel+0x3b6>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	61fb      	str	r3, [r7, #28]
  return result;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	069b      	lsls	r3, r3, #26
 80030aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x3d6>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0e9b      	lsrs	r3, r3, #26
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	e010      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x3f8>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	617b      	str	r3, [r7, #20]
  return result;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_ADC_ConfigChannel+0x424>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	3301      	adds	r3, #1
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	3b1e      	subs	r3, #30
 8003114:	051b      	lsls	r3, r3, #20
 8003116:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800311a:	e014      	b.n	8003146 <HAL_ADC_ConfigChannel+0x44e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	60fb      	str	r3, [r7, #12]
  return result;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	3b1e      	subs	r3, #30
 8003140:	051b      	lsls	r3, r3, #20
 8003142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003146:	430b      	orrs	r3, r1
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	6892      	ldr	r2, [r2, #8]
 800314c:	4619      	mov	r1, r3
 800314e:	f7fe ff54 	bl	8001ffa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f280 80c4 	bge.w	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a65      	ldr	r2, [pc, #404]	; (80032f8 <HAL_ADC_ConfigChannel+0x600>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x478>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a64      	ldr	r2, [pc, #400]	; (80032fc <HAL_ADC_ConfigChannel+0x604>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x47c>
 8003170:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_ADC_ConfigChannel+0x608>)
 8003172:	e000      	b.n	8003176 <HAL_ADC_ConfigChannel+0x47e>
 8003174:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_ADC_ConfigChannel+0x60c>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fe78 	bl	8001e6c <LL_ADC_GetCommonPathInternalCh>
 800317c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <HAL_ADC_ConfigChannel+0x600>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x49a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_ADC_ConfigChannel+0x604>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10e      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x4b8>
 8003192:	4859      	ldr	r0, [pc, #356]	; (80032f8 <HAL_ADC_ConfigChannel+0x600>)
 8003194:	f7ff f812 	bl	80021bc <LL_ADC_IsEnabled>
 8003198:	4604      	mov	r4, r0
 800319a:	4858      	ldr	r0, [pc, #352]	; (80032fc <HAL_ADC_ConfigChannel+0x604>)
 800319c:	f7ff f80e 	bl	80021bc <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e008      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x4ca>
 80031b0:	4855      	ldr	r0, [pc, #340]	; (8003308 <HAL_ADC_ConfigChannel+0x610>)
 80031b2:	f7ff f803 	bl	80021bc <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d07b      	beq.n	80032be <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a50      	ldr	r2, [pc, #320]	; (800330c <HAL_ADC_ConfigChannel+0x614>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d12e      	bne.n	800322e <HAL_ADC_ConfigChannel+0x536>
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d129      	bne.n	800322e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a4a      	ldr	r2, [pc, #296]	; (8003308 <HAL_ADC_ConfigChannel+0x610>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d17f      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <HAL_ADC_ConfigChannel+0x600>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x500>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_ADC_ConfigChannel+0x604>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x504>
 80031f8:	4a41      	ldr	r2, [pc, #260]	; (8003300 <HAL_ADC_ConfigChannel+0x608>)
 80031fa:	e000      	b.n	80031fe <HAL_ADC_ConfigChannel+0x506>
 80031fc:	4a41      	ldr	r2, [pc, #260]	; (8003304 <HAL_ADC_ConfigChannel+0x60c>)
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7fe fe1d 	bl	8001e46 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_ADC_ConfigChannel+0x618>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	4a40      	ldr	r2, [pc, #256]	; (8003314 <HAL_ADC_ConfigChannel+0x61c>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3b01      	subs	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800322c:	e05a      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a39      	ldr	r2, [pc, #228]	; (8003318 <HAL_ADC_ConfigChannel+0x620>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d11e      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x57e>
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a30      	ldr	r2, [pc, #192]	; (8003308 <HAL_ADC_ConfigChannel+0x610>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d14b      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_ADC_ConfigChannel+0x600>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x568>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_ADC_ConfigChannel+0x604>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x56c>
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <HAL_ADC_ConfigChannel+0x608>)
 8003262:	e000      	b.n	8003266 <HAL_ADC_ConfigChannel+0x56e>
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_ADC_ConfigChannel+0x60c>)
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7fe fde9 	bl	8001e46 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003274:	e036      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_ADC_ConfigChannel+0x624>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d131      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
 8003280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d12c      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_ADC_ConfigChannel+0x610>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d127      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_ADC_ConfigChannel+0x600>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_ConfigChannel+0x5b0>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_ADC_ConfigChannel+0x604>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x5b4>
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_ADC_ConfigChannel+0x608>)
 80032aa:	e000      	b.n	80032ae <HAL_ADC_ConfigChannel+0x5b6>
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_ADC_ConfigChannel+0x60c>)
 80032ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7fe fdc5 	bl	8001e46 <LL_ADC_SetCommonPathInternalCh>
 80032bc:	e012      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80032d0:	e008      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3764      	adds	r7, #100	; 0x64
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40022100 	.word	0x40022100
 8003300:	40022300 	.word	0x40022300
 8003304:	58026300 	.word	0x58026300
 8003308:	58026000 	.word	0x58026000
 800330c:	cb840000 	.word	0xcb840000
 8003310:	24000000 	.word	0x24000000
 8003314:	053e2d63 	.word	0x053e2d63
 8003318:	c7520000 	.word	0xc7520000
 800331c:	cfb80000 	.word	0xcfb80000

08003320 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe ff8e 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 800333c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe ffb0 	bl	80022a8 <LL_ADC_INJ_IsConversionOngoing>
 8003348:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8090 	beq.w	8003478 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d02a      	beq.n	80033bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7d5b      	ldrb	r3, [r3, #21]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d126      	bne.n	80033bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7d1b      	ldrb	r3, [r3, #20]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d122      	bne.n	80033bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800337a:	e014      	b.n	80033a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4a41      	ldr	r2, [pc, #260]	; (8003484 <ADC_ConversionStop+0x164>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d90d      	bls.n	80033a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e06c      	b.n	800347a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d1e3      	bne.n	800337c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d014      	beq.n	80033ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe ff46 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe ff03 	bl	80021e2 <LL_ADC_IsDisableOngoing>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff22 	bl	8002230 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d014      	beq.n	800341c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe ff56 	bl	80022a8 <LL_ADC_INJ_IsConversionOngoing>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe feeb 	bl	80021e2 <LL_ADC_IsDisableOngoing>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe ff32 	bl	8002280 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d004      	beq.n	800342c <ADC_ConversionStop+0x10c>
 8003422:	2b03      	cmp	r3, #3
 8003424:	d105      	bne.n	8003432 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003426:	230c      	movs	r3, #12
 8003428:	617b      	str	r3, [r7, #20]
        break;
 800342a:	e005      	b.n	8003438 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800342c:	2308      	movs	r3, #8
 800342e:	617b      	str	r3, [r7, #20]
        break;
 8003430:	e002      	b.n	8003438 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003432:	2304      	movs	r3, #4
 8003434:	617b      	str	r3, [r7, #20]
        break;
 8003436:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003438:	f7fe fca2 	bl	8001d80 <HAL_GetTick>
 800343c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800343e:	e014      	b.n	800346a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003440:	f7fe fc9e 	bl	8001d80 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b05      	cmp	r3, #5
 800344c:	d90d      	bls.n	800346a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0210 	orr.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e007      	b.n	800347a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e3      	bne.n	8003440 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	000cdbff 	.word	0x000cdbff

08003488 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fe91 	bl	80021bc <LL_ADC_IsEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d167      	bne.n	8003570 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <ADC_Enable+0xf4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e053      	b.n	8003572 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fe4c 	bl	800216c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034d4:	f7fe fc54 	bl	8001d80 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <ADC_Enable+0xf8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <ADC_Enable+0x66>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <ADC_Enable+0xfc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <ADC_Enable+0x6a>
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <ADC_Enable+0x100>)
 80034f0:	e000      	b.n	80034f4 <ADC_Enable+0x6c>
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <ADC_Enable+0x104>)
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fdcf 	bl	8002098 <LL_ADC_GetMultimode>
 80034fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <ADC_Enable+0xfc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d002      	beq.n	800350c <ADC_Enable+0x84>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e000      	b.n	800350e <ADC_Enable+0x86>
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <ADC_Enable+0xf8>)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d129      	bne.n	8003570 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351c:	e021      	b.n	8003562 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fe4a 	bl	80021bc <LL_ADC_IsEnabled>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fe1a 	bl	800216c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003538:	f7fe fc22 	bl	8001d80 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d90d      	bls.n	8003562 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e007      	b.n	8003572 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d1d6      	bne.n	800351e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	8000003f 	.word	0x8000003f
 8003580:	40022000 	.word	0x40022000
 8003584:	40022100 	.word	0x40022100
 8003588:	40022300 	.word	0x40022300
 800358c:	58026300 	.word	0x58026300

08003590 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fe20 	bl	80021e2 <LL_ADC_IsDisableOngoing>
 80035a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fe07 	bl	80021bc <LL_ADC_IsEnabled>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d040      	beq.n	8003636 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d13d      	bne.n	8003636 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030d 	and.w	r3, r3, #13
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10c      	bne.n	80035e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe fde1 	bl	8002194 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2203      	movs	r2, #3
 80035d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035da:	f7fe fbd1 	bl	8001d80 <HAL_GetTick>
 80035de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035e0:	e022      	b.n	8003628 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e01c      	b.n	8003638 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035fe:	f7fe fbbf 	bl	8001d80 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d90d      	bls.n	8003628 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e3      	bne.n	80035fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d14b      	bne.n	80036f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d021      	beq.n	80036b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fc59 	bl	8001f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d032      	beq.n	80036ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d12b      	bne.n	80036ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11f      	bne.n	80036ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
 80036b6:	e018      	b.n	80036ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d111      	bne.n	80036ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7fd fab4 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036f0:	e00e      	b.n	8003710 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff faf0 	bl	8002ce4 <HAL_ADC_ErrorCallback>
}
 8003704:	e004      	b.n	8003710 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7fd fa62 	bl	8000bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	f043 0204 	orr.w	r2, r3, #4
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff fac2 	bl	8002ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a70      	ldr	r2, [pc, #448]	; (8003938 <ADC_ConfigureBoostMode+0x1d0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <ADC_ConfigureBoostMode+0x1c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6f      	ldr	r2, [pc, #444]	; (800393c <ADC_ConfigureBoostMode+0x1d4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d109      	bne.n	8003798 <ADC_ConfigureBoostMode+0x30>
 8003784:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <ADC_ConfigureBoostMode+0x1d8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e008      	b.n	80037aa <ADC_ConfigureBoostMode+0x42>
 8003798:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <ADC_ConfigureBoostMode+0x1dc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01a      	beq.n	80037e4 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037ae:	f004 f9d3 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 80037b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037bc:	d006      	beq.n	80037cc <ADC_ConfigureBoostMode+0x64>
 80037be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c2:	d00b      	beq.n	80037dc <ADC_ConfigureBoostMode+0x74>
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d000      	beq.n	80037cc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80037ca:	e05d      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	60fb      	str	r3, [r7, #12]
        break;
 80037da:	e055      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	60fb      	str	r3, [r7, #12]
        break;
 80037e2:	e051      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037e8:	f005 f942 	bl	8008a70 <HAL_RCCEx_GetPeriphCLKFreq>
 80037ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037f6:	d02a      	beq.n	800384e <ADC_ConfigureBoostMode+0xe6>
 80037f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037fc:	d813      	bhi.n	8003826 <ADC_ConfigureBoostMode+0xbe>
 80037fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003802:	d024      	beq.n	800384e <ADC_ConfigureBoostMode+0xe6>
 8003804:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003808:	d806      	bhi.n	8003818 <ADC_ConfigureBoostMode+0xb0>
 800380a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800380e:	d01e      	beq.n	800384e <ADC_ConfigureBoostMode+0xe6>
 8003810:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003814:	d01b      	beq.n	800384e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003816:	e037      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381c:	d017      	beq.n	800384e <ADC_ConfigureBoostMode+0xe6>
 800381e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003822:	d014      	beq.n	800384e <ADC_ConfigureBoostMode+0xe6>
        break;
 8003824:	e030      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003826:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800382a:	d021      	beq.n	8003870 <ADC_ConfigureBoostMode+0x108>
 800382c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003830:	d806      	bhi.n	8003840 <ADC_ConfigureBoostMode+0xd8>
 8003832:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003836:	d013      	beq.n	8003860 <ADC_ConfigureBoostMode+0xf8>
 8003838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800383c:	d014      	beq.n	8003868 <ADC_ConfigureBoostMode+0x100>
        break;
 800383e:	e023      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003840:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003844:	d018      	beq.n	8003878 <ADC_ConfigureBoostMode+0x110>
 8003846:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800384a:	d019      	beq.n	8003880 <ADC_ConfigureBoostMode+0x118>
        break;
 800384c:	e01c      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	60fb      	str	r3, [r7, #12]
        break;
 800385e:	e013      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
        break;
 8003866:	e00f      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	60fb      	str	r3, [r7, #12]
        break;
 800386e:	e00b      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	60fb      	str	r3, [r7, #12]
        break;
 8003876:	e007      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	09db      	lsrs	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
        break;
 800387e:	e003      	b.n	8003888 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	60fb      	str	r3, [r7, #12]
        break;
 8003886:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003888:	f7fe faa8 	bl	8001ddc <HAL_GetREVID>
 800388c:	4602      	mov	r2, r0
 800388e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003892:	429a      	cmp	r2, r3
 8003894:	d815      	bhi.n	80038c2 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <ADC_ConfigureBoostMode+0x1e0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d908      	bls.n	80038b0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ac:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038ae:	e03e      	b.n	800392e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	e035      	b.n	800392e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a20      	ldr	r2, [pc, #128]	; (800394c <ADC_ConfigureBoostMode+0x1e4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d808      	bhi.n	80038e2 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	e025      	b.n	800392e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <ADC_ConfigureBoostMode+0x1e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d80a      	bhi.n	8003900 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	e016      	b.n	800392e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <ADC_ConfigureBoostMode+0x1ec>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d80a      	bhi.n	800391e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	e007      	b.n	800392e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800392c:	609a      	str	r2, [r3, #8]
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40022000 	.word	0x40022000
 800393c:	40022100 	.word	0x40022100
 8003940:	40022300 	.word	0x40022300
 8003944:	58026300 	.word	0x58026300
 8003948:	01312d00 	.word	0x01312d00
 800394c:	005f5e10 	.word	0x005f5e10
 8003950:	00bebc20 	.word	0x00bebc20
 8003954:	017d7840 	.word	0x017d7840

08003958 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <__NVIC_SetPriorityGrouping>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <__NVIC_SetPriorityGrouping+0x40>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d8:	4013      	ands	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <__NVIC_SetPriorityGrouping+0x40>)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	60d3      	str	r3, [r2, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00
 8003a00:	05fa0000 	.word	0x05fa0000

08003a04 <__NVIC_GetPriorityGrouping>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <__NVIC_GetPriorityGrouping+0x18>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	f003 0307 	and.w	r3, r3, #7
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_EnableIRQ>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	db0b      	blt.n	8003a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4907      	ldr	r1, [pc, #28]	; (8003a58 <__NVIC_EnableIRQ+0x38>)
 8003a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2001      	movs	r0, #1
 8003a42:	fa00 f202 	lsl.w	r2, r0, r2
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000e100 	.word	0xe000e100

08003a5c <__NVIC_SetPriority>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db0a      	blt.n	8003a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	490c      	ldr	r1, [pc, #48]	; (8003aa8 <__NVIC_SetPriority+0x4c>)
 8003a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a84:	e00a      	b.n	8003a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4908      	ldr	r1, [pc, #32]	; (8003aac <__NVIC_SetPriority+0x50>)
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	3b04      	subs	r3, #4
 8003a94:	0112      	lsls	r2, r2, #4
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	440b      	add	r3, r1
 8003a9a:	761a      	strb	r2, [r3, #24]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000e100 	.word	0xe000e100
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <NVIC_EncodePriority>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f1c3 0307 	rsb	r3, r3, #7
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	bf28      	it	cs
 8003ace:	2304      	movcs	r3, #4
 8003ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d902      	bls.n	8003ae0 <NVIC_EncodePriority+0x30>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3b03      	subs	r3, #3
 8003ade:	e000      	b.n	8003ae2 <NVIC_EncodePriority+0x32>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	401a      	ands	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af8:	f04f 31ff 	mov.w	r1, #4294967295
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	43d9      	mvns	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b08:	4313      	orrs	r3, r2
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff4c 	bl	80039bc <__NVIC_SetPriorityGrouping>
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b3a:	f7ff ff63 	bl	8003a04 <__NVIC_GetPriorityGrouping>
 8003b3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	6978      	ldr	r0, [r7, #20]
 8003b46:	f7ff ffb3 	bl	8003ab0 <NVIC_EncodePriority>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ff82 	bl	8003a5c <__NVIC_SetPriority>
}
 8003b58:	bf00      	nop
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff56 	bl	8003a20 <__NVIC_EnableIRQ>
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003b80:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_MPU_Disable+0x24>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <HAL_MPU_Disable+0x24>)
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_MPU_Disable+0x28>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	605a      	str	r2, [r3, #4]
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	e000ed90 	.word	0xe000ed90

08003ba8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <HAL_MPU_Enable+0x34>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_MPU_Enable+0x38>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_MPU_Enable+0x38>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bca:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	e000ed90 	.word	0xe000ed90
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	785a      	ldrb	r2, [r3, #1]
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_MPU_ConfigRegion+0x84>)
 8003bf2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d029      	beq.n	8003c50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003bfc:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_MPU_ConfigRegion+0x84>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7b1b      	ldrb	r3, [r3, #12]
 8003c08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	7adb      	ldrb	r3, [r3, #11]
 8003c0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7a9b      	ldrb	r3, [r3, #10]
 8003c16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7b5b      	ldrb	r3, [r3, #13]
 8003c1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7b9b      	ldrb	r3, [r3, #14]
 8003c26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7bdb      	ldrb	r3, [r3, #15]
 8003c2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7a5b      	ldrb	r3, [r3, #9]
 8003c36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7a1b      	ldrb	r3, [r3, #8]
 8003c3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003c4e:	e005      	b.n	8003c5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_MPU_ConfigRegion+0x84>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003c56:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_MPU_ConfigRegion+0x84>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000ed90 	.word	0xe000ed90

08003c6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7fe f884 	bl	8001d80 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e316      	b.n	80042b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a66      	ldr	r2, [pc, #408]	; (8003e24 <HAL_DMA_Init+0x1b8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d04a      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_DMA_Init+0x1bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a63      	ldr	r2, [pc, #396]	; (8003e2c <HAL_DMA_Init+0x1c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d040      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a62      	ldr	r2, [pc, #392]	; (8003e30 <HAL_DMA_Init+0x1c4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d03b      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a60      	ldr	r2, [pc, #384]	; (8003e34 <HAL_DMA_Init+0x1c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d036      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5f      	ldr	r2, [pc, #380]	; (8003e38 <HAL_DMA_Init+0x1cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d031      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5d      	ldr	r2, [pc, #372]	; (8003e3c <HAL_DMA_Init+0x1d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02c      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5c      	ldr	r2, [pc, #368]	; (8003e40 <HAL_DMA_Init+0x1d4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d027      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5a      	ldr	r2, [pc, #360]	; (8003e44 <HAL_DMA_Init+0x1d8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d022      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a59      	ldr	r2, [pc, #356]	; (8003e48 <HAL_DMA_Init+0x1dc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01d      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a57      	ldr	r2, [pc, #348]	; (8003e4c <HAL_DMA_Init+0x1e0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d018      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a56      	ldr	r2, [pc, #344]	; (8003e50 <HAL_DMA_Init+0x1e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_DMA_Init+0x1e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a53      	ldr	r2, [pc, #332]	; (8003e58 <HAL_DMA_Init+0x1ec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a51      	ldr	r2, [pc, #324]	; (8003e5c <HAL_DMA_Init+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_DMA_Init+0xb8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a50      	ldr	r2, [pc, #320]	; (8003e60 <HAL_DMA_Init+0x1f4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_DMA_Init+0xbc>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_DMA_Init+0xbe>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 813b 	beq.w	8003fa6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <HAL_DMA_Init+0x1b8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d04a      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <HAL_DMA_Init+0x1bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d045      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <HAL_DMA_Init+0x1c0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d040      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <HAL_DMA_Init+0x1c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d03b      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a31      	ldr	r2, [pc, #196]	; (8003e34 <HAL_DMA_Init+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d036      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a30      	ldr	r2, [pc, #192]	; (8003e38 <HAL_DMA_Init+0x1cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d031      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <HAL_DMA_Init+0x1d0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02c      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2d      	ldr	r2, [pc, #180]	; (8003e40 <HAL_DMA_Init+0x1d4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d027      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <HAL_DMA_Init+0x1d8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <HAL_DMA_Init+0x1dc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d01d      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <HAL_DMA_Init+0x1e0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <HAL_DMA_Init+0x1e4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <HAL_DMA_Init+0x1e8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <HAL_DMA_Init+0x1ec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <HAL_DMA_Init+0x1f0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_DMA_Init+0x174>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <HAL_DMA_Init+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <HAL_DMA_Init+0x186>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e007      	b.n	8003e02 <HAL_DMA_Init+0x196>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e02:	e02f      	b.n	8003e64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e04:	f7fd ffbc 	bl	8001d80 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d928      	bls.n	8003e64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e246      	b.n	80042b2 <HAL_DMA_Init+0x646>
 8003e24:	40020010 	.word	0x40020010
 8003e28:	40020028 	.word	0x40020028
 8003e2c:	40020040 	.word	0x40020040
 8003e30:	40020058 	.word	0x40020058
 8003e34:	40020070 	.word	0x40020070
 8003e38:	40020088 	.word	0x40020088
 8003e3c:	400200a0 	.word	0x400200a0
 8003e40:	400200b8 	.word	0x400200b8
 8003e44:	40020410 	.word	0x40020410
 8003e48:	40020428 	.word	0x40020428
 8003e4c:	40020440 	.word	0x40020440
 8003e50:	40020458 	.word	0x40020458
 8003e54:	40020470 	.word	0x40020470
 8003e58:	40020488 	.word	0x40020488
 8003e5c:	400204a0 	.word	0x400204a0
 8003e60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1c8      	bne.n	8003e04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4b83      	ldr	r3, [pc, #524]	; (800408c <HAL_DMA_Init+0x420>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d107      	bne.n	8003ec8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ec8:	4b71      	ldr	r3, [pc, #452]	; (8004090 <HAL_DMA_Init+0x424>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b71      	ldr	r3, [pc, #452]	; (8004094 <HAL_DMA_Init+0x428>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d328      	bcc.n	8003f28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b28      	cmp	r3, #40	; 0x28
 8003edc:	d903      	bls.n	8003ee6 <HAL_DMA_Init+0x27a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee4:	d917      	bls.n	8003f16 <HAL_DMA_Init+0x2aa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b3e      	cmp	r3, #62	; 0x3e
 8003eec:	d903      	bls.n	8003ef6 <HAL_DMA_Init+0x28a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b42      	cmp	r3, #66	; 0x42
 8003ef4:	d90f      	bls.n	8003f16 <HAL_DMA_Init+0x2aa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b46      	cmp	r3, #70	; 0x46
 8003efc:	d903      	bls.n	8003f06 <HAL_DMA_Init+0x29a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b48      	cmp	r3, #72	; 0x48
 8003f04:	d907      	bls.n	8003f16 <HAL_DMA_Init+0x2aa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8003f0c:	d905      	bls.n	8003f1a <HAL_DMA_Init+0x2ae>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b52      	cmp	r3, #82	; 0x52
 8003f14:	d801      	bhi.n	8003f1a <HAL_DMA_Init+0x2ae>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_DMA_Init+0x2b0>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0307 	bic.w	r3, r3, #7
 8003f3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d117      	bne.n	8003f82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f002 fb31 	bl	80065cc <DMA_CheckFifoParam>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e197      	b.n	80042b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f002 fa6c 	bl	8006468 <DMA_CalcBaseAndBitshift>
 8003f90:	4603      	mov	r3, r0
 8003f92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	223f      	movs	r2, #63	; 0x3f
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	e0cd      	b.n	8004142 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3b      	ldr	r2, [pc, #236]	; (8004098 <HAL_DMA_Init+0x42c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a39      	ldr	r2, [pc, #228]	; (800409c <HAL_DMA_Init+0x430>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <HAL_DMA_Init+0x434>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a36      	ldr	r2, [pc, #216]	; (80040a4 <HAL_DMA_Init+0x438>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a35      	ldr	r2, [pc, #212]	; (80040a8 <HAL_DMA_Init+0x43c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a33      	ldr	r2, [pc, #204]	; (80040ac <HAL_DMA_Init+0x440>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <HAL_DMA_Init+0x444>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Init+0x38a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <HAL_DMA_Init+0x448>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Init+0x38e>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_Init+0x390>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8097 	beq.w	8004130 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a24      	ldr	r2, [pc, #144]	; (8004098 <HAL_DMA_Init+0x42c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d021      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_DMA_Init+0x430>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01c      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <HAL_DMA_Init+0x434>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d017      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_DMA_Init+0x438>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d012      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <HAL_DMA_Init+0x43c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00d      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_DMA_Init+0x440>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d008      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_DMA_Init+0x444>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <HAL_DMA_Init+0x3e4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <HAL_DMA_Init+0x448>)
 800404e:	4293      	cmp	r3, r2
 8004050:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_DMA_Init+0x44c>)
 800406e:	4013      	ands	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d020      	beq.n	80040bc <HAL_DMA_Init+0x450>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d102      	bne.n	8004088 <HAL_DMA_Init+0x41c>
 8004082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004086:	e01a      	b.n	80040be <HAL_DMA_Init+0x452>
 8004088:	2300      	movs	r3, #0
 800408a:	e018      	b.n	80040be <HAL_DMA_Init+0x452>
 800408c:	fe10803f 	.word	0xfe10803f
 8004090:	5c001000 	.word	0x5c001000
 8004094:	ffff0000 	.word	0xffff0000
 8004098:	58025408 	.word	0x58025408
 800409c:	5802541c 	.word	0x5802541c
 80040a0:	58025430 	.word	0x58025430
 80040a4:	58025444 	.word	0x58025444
 80040a8:	58025458 	.word	0x58025458
 80040ac:	5802546c 	.word	0x5802546c
 80040b0:	58025480 	.word	0x58025480
 80040b4:	58025494 	.word	0x58025494
 80040b8:	fffe000f 	.word	0xfffe000f
 80040bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	4b6e      	ldr	r3, [pc, #440]	; (80042bc <HAL_DMA_Init+0x650>)
 8004104:	4413      	add	r3, r2
 8004106:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_DMA_Init+0x654>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f002 f9a7 	bl	8006468 <DMA_CalcBaseAndBitshift>
 800411a:	4603      	mov	r3, r0
 800411c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	e008      	b.n	8004142 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0b7      	b.n	80042b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5f      	ldr	r2, [pc, #380]	; (80042c4 <HAL_DMA_Init+0x658>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d072      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5d      	ldr	r2, [pc, #372]	; (80042c8 <HAL_DMA_Init+0x65c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d06d      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5c      	ldr	r2, [pc, #368]	; (80042cc <HAL_DMA_Init+0x660>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d068      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a5a      	ldr	r2, [pc, #360]	; (80042d0 <HAL_DMA_Init+0x664>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d063      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a59      	ldr	r2, [pc, #356]	; (80042d4 <HAL_DMA_Init+0x668>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d05e      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a57      	ldr	r2, [pc, #348]	; (80042d8 <HAL_DMA_Init+0x66c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d059      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a56      	ldr	r2, [pc, #344]	; (80042dc <HAL_DMA_Init+0x670>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d054      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a54      	ldr	r2, [pc, #336]	; (80042e0 <HAL_DMA_Init+0x674>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d04f      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a53      	ldr	r2, [pc, #332]	; (80042e4 <HAL_DMA_Init+0x678>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d04a      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a51      	ldr	r2, [pc, #324]	; (80042e8 <HAL_DMA_Init+0x67c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d045      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a50      	ldr	r2, [pc, #320]	; (80042ec <HAL_DMA_Init+0x680>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a4e      	ldr	r2, [pc, #312]	; (80042f0 <HAL_DMA_Init+0x684>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d03b      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a4d      	ldr	r2, [pc, #308]	; (80042f4 <HAL_DMA_Init+0x688>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d036      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a4b      	ldr	r2, [pc, #300]	; (80042f8 <HAL_DMA_Init+0x68c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4a      	ldr	r2, [pc, #296]	; (80042fc <HAL_DMA_Init+0x690>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d02c      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a48      	ldr	r2, [pc, #288]	; (8004300 <HAL_DMA_Init+0x694>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d027      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a47      	ldr	r2, [pc, #284]	; (8004304 <HAL_DMA_Init+0x698>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d022      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a45      	ldr	r2, [pc, #276]	; (8004308 <HAL_DMA_Init+0x69c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01d      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a44      	ldr	r2, [pc, #272]	; (800430c <HAL_DMA_Init+0x6a0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a42      	ldr	r2, [pc, #264]	; (8004310 <HAL_DMA_Init+0x6a4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a41      	ldr	r2, [pc, #260]	; (8004314 <HAL_DMA_Init+0x6a8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <HAL_DMA_Init+0x6ac>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3e      	ldr	r2, [pc, #248]	; (800431c <HAL_DMA_Init+0x6b0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Init+0x5c6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <HAL_DMA_Init+0x6b4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_DMA_Init+0x5ca>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_DMA_Init+0x5cc>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d032      	beq.n	80042a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f002 fa41 	bl	80066c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d102      	bne.n	8004250 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004264:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <HAL_DMA_Init+0x624>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d80c      	bhi.n	8004290 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f002 fabe 	bl	80067f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e008      	b.n	80042a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	a7fdabf8 	.word	0xa7fdabf8
 80042c0:	cccccccd 	.word	0xcccccccd
 80042c4:	40020010 	.word	0x40020010
 80042c8:	40020028 	.word	0x40020028
 80042cc:	40020040 	.word	0x40020040
 80042d0:	40020058 	.word	0x40020058
 80042d4:	40020070 	.word	0x40020070
 80042d8:	40020088 	.word	0x40020088
 80042dc:	400200a0 	.word	0x400200a0
 80042e0:	400200b8 	.word	0x400200b8
 80042e4:	40020410 	.word	0x40020410
 80042e8:	40020428 	.word	0x40020428
 80042ec:	40020440 	.word	0x40020440
 80042f0:	40020458 	.word	0x40020458
 80042f4:	40020470 	.word	0x40020470
 80042f8:	40020488 	.word	0x40020488
 80042fc:	400204a0 	.word	0x400204a0
 8004300:	400204b8 	.word	0x400204b8
 8004304:	58025408 	.word	0x58025408
 8004308:	5802541c 	.word	0x5802541c
 800430c:	58025430 	.word	0x58025430
 8004310:	58025444 	.word	0x58025444
 8004314:	58025458 	.word	0x58025458
 8004318:	5802546c 	.word	0x5802546c
 800431c:	58025480 	.word	0x58025480
 8004320:	58025494 	.word	0x58025494

08004324 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e226      	b.n	800478e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_DMA_Start_IT+0x2a>
 800434a:	2302      	movs	r3, #2
 800434c:	e21f      	b.n	800478e <HAL_DMA_Start_IT+0x46a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	f040 820a 	bne.w	8004778 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a68      	ldr	r2, [pc, #416]	; (8004518 <HAL_DMA_Start_IT+0x1f4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d04a      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a66      	ldr	r2, [pc, #408]	; (800451c <HAL_DMA_Start_IT+0x1f8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d045      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a65      	ldr	r2, [pc, #404]	; (8004520 <HAL_DMA_Start_IT+0x1fc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d040      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a63      	ldr	r2, [pc, #396]	; (8004524 <HAL_DMA_Start_IT+0x200>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d03b      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a62      	ldr	r2, [pc, #392]	; (8004528 <HAL_DMA_Start_IT+0x204>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d036      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a60      	ldr	r2, [pc, #384]	; (800452c <HAL_DMA_Start_IT+0x208>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d031      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a5f      	ldr	r2, [pc, #380]	; (8004530 <HAL_DMA_Start_IT+0x20c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d02c      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a5d      	ldr	r2, [pc, #372]	; (8004534 <HAL_DMA_Start_IT+0x210>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d027      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a5c      	ldr	r2, [pc, #368]	; (8004538 <HAL_DMA_Start_IT+0x214>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5a      	ldr	r2, [pc, #360]	; (800453c <HAL_DMA_Start_IT+0x218>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01d      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a59      	ldr	r2, [pc, #356]	; (8004540 <HAL_DMA_Start_IT+0x21c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a57      	ldr	r2, [pc, #348]	; (8004544 <HAL_DMA_Start_IT+0x220>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a56      	ldr	r2, [pc, #344]	; (8004548 <HAL_DMA_Start_IT+0x224>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a54      	ldr	r2, [pc, #336]	; (800454c <HAL_DMA_Start_IT+0x228>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a53      	ldr	r2, [pc, #332]	; (8004550 <HAL_DMA_Start_IT+0x22c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_DMA_Start_IT+0xee>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a51      	ldr	r2, [pc, #324]	; (8004554 <HAL_DMA_Start_IT+0x230>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d108      	bne.n	8004424 <HAL_DMA_Start_IT+0x100>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e007      	b.n	8004434 <HAL_DMA_Start_IT+0x110>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f001 fe68 	bl	8006110 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a34      	ldr	r2, [pc, #208]	; (8004518 <HAL_DMA_Start_IT+0x1f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d04a      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_DMA_Start_IT+0x1f8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d045      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a31      	ldr	r2, [pc, #196]	; (8004520 <HAL_DMA_Start_IT+0x1fc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d040      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_DMA_Start_IT+0x200>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d03b      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2e      	ldr	r2, [pc, #184]	; (8004528 <HAL_DMA_Start_IT+0x204>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d036      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2d      	ldr	r2, [pc, #180]	; (800452c <HAL_DMA_Start_IT+0x208>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d031      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <HAL_DMA_Start_IT+0x20c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02c      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_DMA_Start_IT+0x210>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d027      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_DMA_Start_IT+0x214>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_DMA_Start_IT+0x218>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01d      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_DMA_Start_IT+0x21c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a24      	ldr	r2, [pc, #144]	; (8004544 <HAL_DMA_Start_IT+0x220>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_DMA_Start_IT+0x224>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_DMA_Start_IT+0x228>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <HAL_DMA_Start_IT+0x22c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_DMA_Start_IT+0x1bc>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_DMA_Start_IT+0x230>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_DMA_Start_IT+0x1c0>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_DMA_Start_IT+0x1c2>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d036      	beq.n	8004558 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 021e 	bic.w	r2, r3, #30
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0216 	orr.w	r2, r2, #22
 80044fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d03e      	beq.n	8004584 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0208 	orr.w	r2, r2, #8
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e035      	b.n	8004584 <HAL_DMA_Start_IT+0x260>
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 020e 	bic.w	r2, r3, #14
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 020a 	orr.w	r2, r2, #10
 800456a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0204 	orr.w	r2, r2, #4
 8004582:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a83      	ldr	r2, [pc, #524]	; (8004798 <HAL_DMA_Start_IT+0x474>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d072      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a82      	ldr	r2, [pc, #520]	; (800479c <HAL_DMA_Start_IT+0x478>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d06d      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a80      	ldr	r2, [pc, #512]	; (80047a0 <HAL_DMA_Start_IT+0x47c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d068      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a7f      	ldr	r2, [pc, #508]	; (80047a4 <HAL_DMA_Start_IT+0x480>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d063      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_DMA_Start_IT+0x484>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d05e      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a7c      	ldr	r2, [pc, #496]	; (80047ac <HAL_DMA_Start_IT+0x488>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d059      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <HAL_DMA_Start_IT+0x48c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d054      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a79      	ldr	r2, [pc, #484]	; (80047b4 <HAL_DMA_Start_IT+0x490>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d04f      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a77      	ldr	r2, [pc, #476]	; (80047b8 <HAL_DMA_Start_IT+0x494>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04a      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a76      	ldr	r2, [pc, #472]	; (80047bc <HAL_DMA_Start_IT+0x498>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d045      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a74      	ldr	r2, [pc, #464]	; (80047c0 <HAL_DMA_Start_IT+0x49c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d040      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a73      	ldr	r2, [pc, #460]	; (80047c4 <HAL_DMA_Start_IT+0x4a0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d03b      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a71      	ldr	r2, [pc, #452]	; (80047c8 <HAL_DMA_Start_IT+0x4a4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d036      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a70      	ldr	r2, [pc, #448]	; (80047cc <HAL_DMA_Start_IT+0x4a8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d031      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6e      	ldr	r2, [pc, #440]	; (80047d0 <HAL_DMA_Start_IT+0x4ac>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02c      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6d      	ldr	r2, [pc, #436]	; (80047d4 <HAL_DMA_Start_IT+0x4b0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d027      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6b      	ldr	r2, [pc, #428]	; (80047d8 <HAL_DMA_Start_IT+0x4b4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_DMA_Start_IT+0x4b8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01d      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a68      	ldr	r2, [pc, #416]	; (80047e0 <HAL_DMA_Start_IT+0x4bc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a67      	ldr	r2, [pc, #412]	; (80047e4 <HAL_DMA_Start_IT+0x4c0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a65      	ldr	r2, [pc, #404]	; (80047e8 <HAL_DMA_Start_IT+0x4c4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a64      	ldr	r2, [pc, #400]	; (80047ec <HAL_DMA_Start_IT+0x4c8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a62      	ldr	r2, [pc, #392]	; (80047f0 <HAL_DMA_Start_IT+0x4cc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_DMA_Start_IT+0x350>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a61      	ldr	r2, [pc, #388]	; (80047f4 <HAL_DMA_Start_IT+0x4d0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_DMA_Start_IT+0x354>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_DMA_Start_IT+0x356>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01a      	beq.n	80046b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a37      	ldr	r2, [pc, #220]	; (8004798 <HAL_DMA_Start_IT+0x474>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d04a      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a36      	ldr	r2, [pc, #216]	; (800479c <HAL_DMA_Start_IT+0x478>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d045      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <HAL_DMA_Start_IT+0x47c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d040      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a33      	ldr	r2, [pc, #204]	; (80047a4 <HAL_DMA_Start_IT+0x480>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d03b      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a31      	ldr	r2, [pc, #196]	; (80047a8 <HAL_DMA_Start_IT+0x484>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d036      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a30      	ldr	r2, [pc, #192]	; (80047ac <HAL_DMA_Start_IT+0x488>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d031      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2e      	ldr	r2, [pc, #184]	; (80047b0 <HAL_DMA_Start_IT+0x48c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02c      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <HAL_DMA_Start_IT+0x490>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d027      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <HAL_DMA_Start_IT+0x494>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <HAL_DMA_Start_IT+0x498>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d01d      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <HAL_DMA_Start_IT+0x49c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <HAL_DMA_Start_IT+0x4a0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <HAL_DMA_Start_IT+0x4a4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_DMA_Start_IT+0x4a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <HAL_DMA_Start_IT+0x4ac>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_DMA_Start_IT+0x430>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a21      	ldr	r2, [pc, #132]	; (80047d4 <HAL_DMA_Start_IT+0x4b0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <HAL_DMA_Start_IT+0x442>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e012      	b.n	800478c <HAL_DMA_Start_IT+0x468>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e009      	b.n	800478c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40020010 	.word	0x40020010
 800479c:	40020028 	.word	0x40020028
 80047a0:	40020040 	.word	0x40020040
 80047a4:	40020058 	.word	0x40020058
 80047a8:	40020070 	.word	0x40020070
 80047ac:	40020088 	.word	0x40020088
 80047b0:	400200a0 	.word	0x400200a0
 80047b4:	400200b8 	.word	0x400200b8
 80047b8:	40020410 	.word	0x40020410
 80047bc:	40020428 	.word	0x40020428
 80047c0:	40020440 	.word	0x40020440
 80047c4:	40020458 	.word	0x40020458
 80047c8:	40020470 	.word	0x40020470
 80047cc:	40020488 	.word	0x40020488
 80047d0:	400204a0 	.word	0x400204a0
 80047d4:	400204b8 	.word	0x400204b8
 80047d8:	58025408 	.word	0x58025408
 80047dc:	5802541c 	.word	0x5802541c
 80047e0:	58025430 	.word	0x58025430
 80047e4:	58025444 	.word	0x58025444
 80047e8:	58025458 	.word	0x58025458
 80047ec:	5802546c 	.word	0x5802546c
 80047f0:	58025480 	.word	0x58025480
 80047f4:	58025494 	.word	0x58025494

080047f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004800:	f7fd fabe 	bl	8001d80 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e2dc      	b.n	8004dca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d008      	beq.n	800482e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e2cd      	b.n	8004dca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a76      	ldr	r2, [pc, #472]	; (8004a0c <HAL_DMA_Abort+0x214>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a74      	ldr	r2, [pc, #464]	; (8004a10 <HAL_DMA_Abort+0x218>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a73      	ldr	r2, [pc, #460]	; (8004a14 <HAL_DMA_Abort+0x21c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a71      	ldr	r2, [pc, #452]	; (8004a18 <HAL_DMA_Abort+0x220>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a70      	ldr	r2, [pc, #448]	; (8004a1c <HAL_DMA_Abort+0x224>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a6e      	ldr	r2, [pc, #440]	; (8004a20 <HAL_DMA_Abort+0x228>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a6d      	ldr	r2, [pc, #436]	; (8004a24 <HAL_DMA_Abort+0x22c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <HAL_DMA_Abort+0x230>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6a      	ldr	r2, [pc, #424]	; (8004a2c <HAL_DMA_Abort+0x234>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a68      	ldr	r2, [pc, #416]	; (8004a30 <HAL_DMA_Abort+0x238>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a67      	ldr	r2, [pc, #412]	; (8004a34 <HAL_DMA_Abort+0x23c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a65      	ldr	r2, [pc, #404]	; (8004a38 <HAL_DMA_Abort+0x240>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a64      	ldr	r2, [pc, #400]	; (8004a3c <HAL_DMA_Abort+0x244>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a62      	ldr	r2, [pc, #392]	; (8004a40 <HAL_DMA_Abort+0x248>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a61      	ldr	r2, [pc, #388]	; (8004a44 <HAL_DMA_Abort+0x24c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_Abort+0xd6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5f      	ldr	r2, [pc, #380]	; (8004a48 <HAL_DMA_Abort+0x250>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_DMA_Abort+0xda>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_DMA_Abort+0xdc>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 021e 	bic.w	r2, r2, #30
 80048e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e00a      	b.n	8004916 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 020e 	bic.w	r2, r2, #14
 800490e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <HAL_DMA_Abort+0x214>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d072      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3a      	ldr	r2, [pc, #232]	; (8004a10 <HAL_DMA_Abort+0x218>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d06d      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <HAL_DMA_Abort+0x21c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d068      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a37      	ldr	r2, [pc, #220]	; (8004a18 <HAL_DMA_Abort+0x220>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d063      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a36      	ldr	r2, [pc, #216]	; (8004a1c <HAL_DMA_Abort+0x224>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d05e      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <HAL_DMA_Abort+0x228>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d059      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a33      	ldr	r2, [pc, #204]	; (8004a24 <HAL_DMA_Abort+0x22c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d054      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_DMA_Abort+0x230>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04f      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a30      	ldr	r2, [pc, #192]	; (8004a2c <HAL_DMA_Abort+0x234>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d04a      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <HAL_DMA_Abort+0x238>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d045      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <HAL_DMA_Abort+0x23c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d040      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a2b      	ldr	r2, [pc, #172]	; (8004a38 <HAL_DMA_Abort+0x240>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d03b      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <HAL_DMA_Abort+0x244>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d036      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_DMA_Abort+0x248>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d031      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <HAL_DMA_Abort+0x24c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d02c      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <HAL_DMA_Abort+0x250>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d027      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <HAL_DMA_Abort+0x254>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d022      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <HAL_DMA_Abort+0x258>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01d      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <HAL_DMA_Abort+0x25c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d018      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_DMA_Abort+0x260>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_DMA_Abort+0x264>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00e      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <HAL_DMA_Abort+0x268>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_DMA_Abort+0x26c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_DMA_Abort+0x20e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_DMA_Abort+0x270>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d132      	bne.n	8004a6c <HAL_DMA_Abort+0x274>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e031      	b.n	8004a6e <HAL_DMA_Abort+0x276>
 8004a0a:	bf00      	nop
 8004a0c:	40020010 	.word	0x40020010
 8004a10:	40020028 	.word	0x40020028
 8004a14:	40020040 	.word	0x40020040
 8004a18:	40020058 	.word	0x40020058
 8004a1c:	40020070 	.word	0x40020070
 8004a20:	40020088 	.word	0x40020088
 8004a24:	400200a0 	.word	0x400200a0
 8004a28:	400200b8 	.word	0x400200b8
 8004a2c:	40020410 	.word	0x40020410
 8004a30:	40020428 	.word	0x40020428
 8004a34:	40020440 	.word	0x40020440
 8004a38:	40020458 	.word	0x40020458
 8004a3c:	40020470 	.word	0x40020470
 8004a40:	40020488 	.word	0x40020488
 8004a44:	400204a0 	.word	0x400204a0
 8004a48:	400204b8 	.word	0x400204b8
 8004a4c:	58025408 	.word	0x58025408
 8004a50:	5802541c 	.word	0x5802541c
 8004a54:	58025430 	.word	0x58025430
 8004a58:	58025444 	.word	0x58025444
 8004a5c:	58025458 	.word	0x58025458
 8004a60:	5802546c 	.word	0x5802546c
 8004a64:	58025480 	.word	0x58025480
 8004a68:	58025494 	.word	0x58025494
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6d      	ldr	r2, [pc, #436]	; (8004c3c <HAL_DMA_Abort+0x444>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d04a      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6b      	ldr	r2, [pc, #428]	; (8004c40 <HAL_DMA_Abort+0x448>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d045      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a6a      	ldr	r2, [pc, #424]	; (8004c44 <HAL_DMA_Abort+0x44c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d040      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a68      	ldr	r2, [pc, #416]	; (8004c48 <HAL_DMA_Abort+0x450>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d03b      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <HAL_DMA_Abort+0x454>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d036      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <HAL_DMA_Abort+0x458>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d031      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a64      	ldr	r2, [pc, #400]	; (8004c54 <HAL_DMA_Abort+0x45c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d02c      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a62      	ldr	r2, [pc, #392]	; (8004c58 <HAL_DMA_Abort+0x460>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d027      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <HAL_DMA_Abort+0x464>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a5f      	ldr	r2, [pc, #380]	; (8004c60 <HAL_DMA_Abort+0x468>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <HAL_DMA_Abort+0x46c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a5c      	ldr	r2, [pc, #368]	; (8004c68 <HAL_DMA_Abort+0x470>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <HAL_DMA_Abort+0x474>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a59      	ldr	r2, [pc, #356]	; (8004c70 <HAL_DMA_Abort+0x478>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a58      	ldr	r2, [pc, #352]	; (8004c74 <HAL_DMA_Abort+0x47c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_DMA_Abort+0x32a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a56      	ldr	r2, [pc, #344]	; (8004c78 <HAL_DMA_Abort+0x480>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <HAL_DMA_Abort+0x33c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e007      	b.n	8004b44 <HAL_DMA_Abort+0x34c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b44:	e013      	b.n	8004b6e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b46:	f7fd f91b 	bl	8001d80 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	d90c      	bls.n	8004b6e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2203      	movs	r2, #3
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e12d      	b.n	8004dca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2f      	ldr	r2, [pc, #188]	; (8004c3c <HAL_DMA_Abort+0x444>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d04a      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2d      	ldr	r2, [pc, #180]	; (8004c40 <HAL_DMA_Abort+0x448>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d045      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <HAL_DMA_Abort+0x44c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d040      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <HAL_DMA_Abort+0x450>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d03b      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <HAL_DMA_Abort+0x454>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d036      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <HAL_DMA_Abort+0x458>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d031      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a26      	ldr	r2, [pc, #152]	; (8004c54 <HAL_DMA_Abort+0x45c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d02c      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a24      	ldr	r2, [pc, #144]	; (8004c58 <HAL_DMA_Abort+0x460>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d027      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <HAL_DMA_Abort+0x464>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d022      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <HAL_DMA_Abort+0x468>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01d      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <HAL_DMA_Abort+0x46c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_DMA_Abort+0x470>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <HAL_DMA_Abort+0x474>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_DMA_Abort+0x478>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <HAL_DMA_Abort+0x47c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_DMA_Abort+0x422>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_DMA_Abort+0x480>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_DMA_Abort+0x426>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <HAL_DMA_Abort+0x428>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d02b      	beq.n	8004c7c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	223f      	movs	r2, #63	; 0x3f
 8004c34:	409a      	lsls	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	e02a      	b.n	8004c92 <HAL_DMA_Abort+0x49a>
 8004c3c:	40020010 	.word	0x40020010
 8004c40:	40020028 	.word	0x40020028
 8004c44:	40020040 	.word	0x40020040
 8004c48:	40020058 	.word	0x40020058
 8004c4c:	40020070 	.word	0x40020070
 8004c50:	40020088 	.word	0x40020088
 8004c54:	400200a0 	.word	0x400200a0
 8004c58:	400200b8 	.word	0x400200b8
 8004c5c:	40020410 	.word	0x40020410
 8004c60:	40020428 	.word	0x40020428
 8004c64:	40020440 	.word	0x40020440
 8004c68:	40020458 	.word	0x40020458
 8004c6c:	40020470 	.word	0x40020470
 8004c70:	40020488 	.word	0x40020488
 8004c74:	400204a0 	.word	0x400204a0
 8004c78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4f      	ldr	r2, [pc, #316]	; (8004dd4 <HAL_DMA_Abort+0x5dc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d072      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a4d      	ldr	r2, [pc, #308]	; (8004dd8 <HAL_DMA_Abort+0x5e0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d06d      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a4c      	ldr	r2, [pc, #304]	; (8004ddc <HAL_DMA_Abort+0x5e4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d068      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <HAL_DMA_Abort+0x5e8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d063      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a49      	ldr	r2, [pc, #292]	; (8004de4 <HAL_DMA_Abort+0x5ec>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d05e      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a47      	ldr	r2, [pc, #284]	; (8004de8 <HAL_DMA_Abort+0x5f0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d059      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a46      	ldr	r2, [pc, #280]	; (8004dec <HAL_DMA_Abort+0x5f4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d054      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a44      	ldr	r2, [pc, #272]	; (8004df0 <HAL_DMA_Abort+0x5f8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04f      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a43      	ldr	r2, [pc, #268]	; (8004df4 <HAL_DMA_Abort+0x5fc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d04a      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a41      	ldr	r2, [pc, #260]	; (8004df8 <HAL_DMA_Abort+0x600>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d045      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a40      	ldr	r2, [pc, #256]	; (8004dfc <HAL_DMA_Abort+0x604>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d040      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3e      	ldr	r2, [pc, #248]	; (8004e00 <HAL_DMA_Abort+0x608>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d03b      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3d      	ldr	r2, [pc, #244]	; (8004e04 <HAL_DMA_Abort+0x60c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d036      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <HAL_DMA_Abort+0x610>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d031      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a3a      	ldr	r2, [pc, #232]	; (8004e0c <HAL_DMA_Abort+0x614>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d02c      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_DMA_Abort+0x618>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d027      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a37      	ldr	r2, [pc, #220]	; (8004e14 <HAL_DMA_Abort+0x61c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d022      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a35      	ldr	r2, [pc, #212]	; (8004e18 <HAL_DMA_Abort+0x620>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a34      	ldr	r2, [pc, #208]	; (8004e1c <HAL_DMA_Abort+0x624>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <HAL_DMA_Abort+0x628>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_DMA_Abort+0x62c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <HAL_DMA_Abort+0x630>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2e      	ldr	r2, [pc, #184]	; (8004e2c <HAL_DMA_Abort+0x634>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_DMA_Abort+0x58a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <HAL_DMA_Abort+0x638>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <HAL_DMA_Abort+0x58e>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <HAL_DMA_Abort+0x590>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d94:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004db6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	58025408 	.word	0x58025408
 8004e18:	5802541c 	.word	0x5802541c
 8004e1c:	58025430 	.word	0x58025430
 8004e20:	58025444 	.word	0x58025444
 8004e24:	58025458 	.word	0x58025458
 8004e28:	5802546c 	.word	0x5802546c
 8004e2c:	58025480 	.word	0x58025480
 8004e30:	58025494 	.word	0x58025494

08004e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e205      	b.n	8005252 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d004      	beq.n	8004e5c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e1fa      	b.n	8005252 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a8c      	ldr	r2, [pc, #560]	; (8005094 <HAL_DMA_Abort_IT+0x260>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a8b      	ldr	r2, [pc, #556]	; (8005098 <HAL_DMA_Abort_IT+0x264>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a89      	ldr	r2, [pc, #548]	; (800509c <HAL_DMA_Abort_IT+0x268>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a88      	ldr	r2, [pc, #544]	; (80050a0 <HAL_DMA_Abort_IT+0x26c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a86      	ldr	r2, [pc, #536]	; (80050a4 <HAL_DMA_Abort_IT+0x270>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a85      	ldr	r2, [pc, #532]	; (80050a8 <HAL_DMA_Abort_IT+0x274>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a83      	ldr	r2, [pc, #524]	; (80050ac <HAL_DMA_Abort_IT+0x278>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a82      	ldr	r2, [pc, #520]	; (80050b0 <HAL_DMA_Abort_IT+0x27c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a80      	ldr	r2, [pc, #512]	; (80050b4 <HAL_DMA_Abort_IT+0x280>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a7f      	ldr	r2, [pc, #508]	; (80050b8 <HAL_DMA_Abort_IT+0x284>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7d      	ldr	r2, [pc, #500]	; (80050bc <HAL_DMA_Abort_IT+0x288>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_DMA_Abort_IT+0x28c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a7a      	ldr	r2, [pc, #488]	; (80050c4 <HAL_DMA_Abort_IT+0x290>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a79      	ldr	r2, [pc, #484]	; (80050c8 <HAL_DMA_Abort_IT+0x294>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a77      	ldr	r2, [pc, #476]	; (80050cc <HAL_DMA_Abort_IT+0x298>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_Abort_IT+0xc8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a76      	ldr	r2, [pc, #472]	; (80050d0 <HAL_DMA_Abort_IT+0x29c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_DMA_Abort_IT+0xcc>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_DMA_Abort_IT+0xce>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d065      	beq.n	8004fd2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a60      	ldr	r2, [pc, #384]	; (8005094 <HAL_DMA_Abort_IT+0x260>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d04a      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5e      	ldr	r2, [pc, #376]	; (8005098 <HAL_DMA_Abort_IT+0x264>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d045      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5d      	ldr	r2, [pc, #372]	; (800509c <HAL_DMA_Abort_IT+0x268>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d040      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_DMA_Abort_IT+0x26c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5a      	ldr	r2, [pc, #360]	; (80050a4 <HAL_DMA_Abort_IT+0x270>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d036      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a58      	ldr	r2, [pc, #352]	; (80050a8 <HAL_DMA_Abort_IT+0x274>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a57      	ldr	r2, [pc, #348]	; (80050ac <HAL_DMA_Abort_IT+0x278>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d02c      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a55      	ldr	r2, [pc, #340]	; (80050b0 <HAL_DMA_Abort_IT+0x27c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d027      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a54      	ldr	r2, [pc, #336]	; (80050b4 <HAL_DMA_Abort_IT+0x280>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	; (80050b8 <HAL_DMA_Abort_IT+0x284>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a51      	ldr	r2, [pc, #324]	; (80050bc <HAL_DMA_Abort_IT+0x288>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a4f      	ldr	r2, [pc, #316]	; (80050c0 <HAL_DMA_Abort_IT+0x28c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a4e      	ldr	r2, [pc, #312]	; (80050c4 <HAL_DMA_Abort_IT+0x290>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4c      	ldr	r2, [pc, #304]	; (80050c8 <HAL_DMA_Abort_IT+0x294>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4b      	ldr	r2, [pc, #300]	; (80050cc <HAL_DMA_Abort_IT+0x298>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_DMA_Abort_IT+0x17a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a49      	ldr	r2, [pc, #292]	; (80050d0 <HAL_DMA_Abort_IT+0x29c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <HAL_DMA_Abort_IT+0x18c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e147      	b.n	8005250 <HAL_DMA_Abort_IT+0x41c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e13e      	b.n	8005250 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 020e 	bic.w	r2, r2, #14
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <HAL_DMA_Abort_IT+0x260>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d04a      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <HAL_DMA_Abort_IT+0x264>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d045      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a28      	ldr	r2, [pc, #160]	; (800509c <HAL_DMA_Abort_IT+0x268>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d040      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <HAL_DMA_Abort_IT+0x26c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d03b      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <HAL_DMA_Abort_IT+0x270>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d036      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <HAL_DMA_Abort_IT+0x274>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d031      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a22      	ldr	r2, [pc, #136]	; (80050ac <HAL_DMA_Abort_IT+0x278>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d02c      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <HAL_DMA_Abort_IT+0x27c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d027      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HAL_DMA_Abort_IT+0x280>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <HAL_DMA_Abort_IT+0x284>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <HAL_DMA_Abort_IT+0x288>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_DMA_Abort_IT+0x28c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a19      	ldr	r2, [pc, #100]	; (80050c4 <HAL_DMA_Abort_IT+0x290>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <HAL_DMA_Abort_IT+0x294>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a16      	ldr	r2, [pc, #88]	; (80050cc <HAL_DMA_Abort_IT+0x298>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_DMA_Abort_IT+0x24e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <HAL_DMA_Abort_IT+0x29c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d128      	bne.n	80050d4 <HAL_DMA_Abort_IT+0x2a0>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e027      	b.n	80050e4 <HAL_DMA_Abort_IT+0x2b0>
 8005094:	40020010 	.word	0x40020010
 8005098:	40020028 	.word	0x40020028
 800509c:	40020040 	.word	0x40020040
 80050a0:	40020058 	.word	0x40020058
 80050a4:	40020070 	.word	0x40020070
 80050a8:	40020088 	.word	0x40020088
 80050ac:	400200a0 	.word	0x400200a0
 80050b0:	400200b8 	.word	0x400200b8
 80050b4:	40020410 	.word	0x40020410
 80050b8:	40020428 	.word	0x40020428
 80050bc:	40020440 	.word	0x40020440
 80050c0:	40020458 	.word	0x40020458
 80050c4:	40020470 	.word	0x40020470
 80050c8:	40020488 	.word	0x40020488
 80050cc:	400204a0 	.word	0x400204a0
 80050d0:	400204b8 	.word	0x400204b8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a5c      	ldr	r2, [pc, #368]	; (800525c <HAL_DMA_Abort_IT+0x428>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d072      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a5b      	ldr	r2, [pc, #364]	; (8005260 <HAL_DMA_Abort_IT+0x42c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d06d      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a59      	ldr	r2, [pc, #356]	; (8005264 <HAL_DMA_Abort_IT+0x430>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d068      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a58      	ldr	r2, [pc, #352]	; (8005268 <HAL_DMA_Abort_IT+0x434>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d063      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a56      	ldr	r2, [pc, #344]	; (800526c <HAL_DMA_Abort_IT+0x438>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d05e      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a55      	ldr	r2, [pc, #340]	; (8005270 <HAL_DMA_Abort_IT+0x43c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d059      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a53      	ldr	r2, [pc, #332]	; (8005274 <HAL_DMA_Abort_IT+0x440>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d054      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a52      	ldr	r2, [pc, #328]	; (8005278 <HAL_DMA_Abort_IT+0x444>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d04f      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a50      	ldr	r2, [pc, #320]	; (800527c <HAL_DMA_Abort_IT+0x448>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d04a      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4f      	ldr	r2, [pc, #316]	; (8005280 <HAL_DMA_Abort_IT+0x44c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d045      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4d      	ldr	r2, [pc, #308]	; (8005284 <HAL_DMA_Abort_IT+0x450>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d040      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a4c      	ldr	r2, [pc, #304]	; (8005288 <HAL_DMA_Abort_IT+0x454>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d03b      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a4a      	ldr	r2, [pc, #296]	; (800528c <HAL_DMA_Abort_IT+0x458>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d036      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a49      	ldr	r2, [pc, #292]	; (8005290 <HAL_DMA_Abort_IT+0x45c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d031      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a47      	ldr	r2, [pc, #284]	; (8005294 <HAL_DMA_Abort_IT+0x460>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02c      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a46      	ldr	r2, [pc, #280]	; (8005298 <HAL_DMA_Abort_IT+0x464>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d027      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a44      	ldr	r2, [pc, #272]	; (800529c <HAL_DMA_Abort_IT+0x468>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a43      	ldr	r2, [pc, #268]	; (80052a0 <HAL_DMA_Abort_IT+0x46c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a41      	ldr	r2, [pc, #260]	; (80052a4 <HAL_DMA_Abort_IT+0x470>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <HAL_DMA_Abort_IT+0x474>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3e      	ldr	r2, [pc, #248]	; (80052ac <HAL_DMA_Abort_IT+0x478>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3d      	ldr	r2, [pc, #244]	; (80052b0 <HAL_DMA_Abort_IT+0x47c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3b      	ldr	r2, [pc, #236]	; (80052b4 <HAL_DMA_Abort_IT+0x480>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x3a0>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <HAL_DMA_Abort_IT+0x484>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_Abort_IT+0x3a4>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_DMA_Abort_IT+0x3a6>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d028      	beq.n	8005230 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800520c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005224:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800522e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40020010 	.word	0x40020010
 8005260:	40020028 	.word	0x40020028
 8005264:	40020040 	.word	0x40020040
 8005268:	40020058 	.word	0x40020058
 800526c:	40020070 	.word	0x40020070
 8005270:	40020088 	.word	0x40020088
 8005274:	400200a0 	.word	0x400200a0
 8005278:	400200b8 	.word	0x400200b8
 800527c:	40020410 	.word	0x40020410
 8005280:	40020428 	.word	0x40020428
 8005284:	40020440 	.word	0x40020440
 8005288:	40020458 	.word	0x40020458
 800528c:	40020470 	.word	0x40020470
 8005290:	40020488 	.word	0x40020488
 8005294:	400204a0 	.word	0x400204a0
 8005298:	400204b8 	.word	0x400204b8
 800529c:	58025408 	.word	0x58025408
 80052a0:	5802541c 	.word	0x5802541c
 80052a4:	58025430 	.word	0x58025430
 80052a8:	58025444 	.word	0x58025444
 80052ac:	58025458 	.word	0x58025458
 80052b0:	5802546c 	.word	0x5802546c
 80052b4:	58025480 	.word	0x58025480
 80052b8:	58025494 	.word	0x58025494

080052bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052c8:	4b67      	ldr	r3, [pc, #412]	; (8005468 <HAL_DMA_IRQHandler+0x1ac>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a67      	ldr	r2, [pc, #412]	; (800546c <HAL_DMA_IRQHandler+0x1b0>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a9b      	lsrs	r3, r3, #10
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a5f      	ldr	r2, [pc, #380]	; (8005470 <HAL_DMA_IRQHandler+0x1b4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_DMA_IRQHandler+0x1b8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a5c      	ldr	r2, [pc, #368]	; (8005478 <HAL_DMA_IRQHandler+0x1bc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a5a      	ldr	r2, [pc, #360]	; (800547c <HAL_DMA_IRQHandler+0x1c0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a59      	ldr	r2, [pc, #356]	; (8005480 <HAL_DMA_IRQHandler+0x1c4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a57      	ldr	r2, [pc, #348]	; (8005484 <HAL_DMA_IRQHandler+0x1c8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a56      	ldr	r2, [pc, #344]	; (8005488 <HAL_DMA_IRQHandler+0x1cc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a54      	ldr	r2, [pc, #336]	; (800548c <HAL_DMA_IRQHandler+0x1d0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a53      	ldr	r2, [pc, #332]	; (8005490 <HAL_DMA_IRQHandler+0x1d4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a51      	ldr	r2, [pc, #324]	; (8005494 <HAL_DMA_IRQHandler+0x1d8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a50      	ldr	r2, [pc, #320]	; (8005498 <HAL_DMA_IRQHandler+0x1dc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a4e      	ldr	r2, [pc, #312]	; (800549c <HAL_DMA_IRQHandler+0x1e0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4d      	ldr	r2, [pc, #308]	; (80054a0 <HAL_DMA_IRQHandler+0x1e4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a4b      	ldr	r2, [pc, #300]	; (80054a4 <HAL_DMA_IRQHandler+0x1e8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4a      	ldr	r2, [pc, #296]	; (80054a8 <HAL_DMA_IRQHandler+0x1ec>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_IRQHandler+0xd2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a48      	ldr	r2, [pc, #288]	; (80054ac <HAL_DMA_IRQHandler+0x1f0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_DMA_IRQHandler+0xd6>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_DMA_IRQHandler+0xd8>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 842b 	beq.w	8005bf0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2208      	movs	r2, #8
 80053a4:	409a      	lsls	r2, r3
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80a2 	beq.w	80054f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2e      	ldr	r2, [pc, #184]	; (8005470 <HAL_DMA_IRQHandler+0x1b4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d04a      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2d      	ldr	r2, [pc, #180]	; (8005474 <HAL_DMA_IRQHandler+0x1b8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d045      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <HAL_DMA_IRQHandler+0x1bc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d040      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2a      	ldr	r2, [pc, #168]	; (800547c <HAL_DMA_IRQHandler+0x1c0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d03b      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a28      	ldr	r2, [pc, #160]	; (8005480 <HAL_DMA_IRQHandler+0x1c4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d036      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a27      	ldr	r2, [pc, #156]	; (8005484 <HAL_DMA_IRQHandler+0x1c8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d031      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a25      	ldr	r2, [pc, #148]	; (8005488 <HAL_DMA_IRQHandler+0x1cc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d02c      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a24      	ldr	r2, [pc, #144]	; (800548c <HAL_DMA_IRQHandler+0x1d0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d027      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a22      	ldr	r2, [pc, #136]	; (8005490 <HAL_DMA_IRQHandler+0x1d4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_DMA_IRQHandler+0x1d8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <HAL_DMA_IRQHandler+0x1dc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1e      	ldr	r2, [pc, #120]	; (800549c <HAL_DMA_IRQHandler+0x1e0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_DMA_IRQHandler+0x1e4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_DMA_IRQHandler+0x1e8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <HAL_DMA_IRQHandler+0x1ec>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_DMA_IRQHandler+0x194>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_DMA_IRQHandler+0x1f0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d12f      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x1f4>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e02e      	b.n	80054c4 <HAL_DMA_IRQHandler+0x208>
 8005466:	bf00      	nop
 8005468:	24000000 	.word	0x24000000
 800546c:	1b4e81b5 	.word	0x1b4e81b5
 8005470:	40020010 	.word	0x40020010
 8005474:	40020028 	.word	0x40020028
 8005478:	40020040 	.word	0x40020040
 800547c:	40020058 	.word	0x40020058
 8005480:	40020070 	.word	0x40020070
 8005484:	40020088 	.word	0x40020088
 8005488:	400200a0 	.word	0x400200a0
 800548c:	400200b8 	.word	0x400200b8
 8005490:	40020410 	.word	0x40020410
 8005494:	40020428 	.word	0x40020428
 8005498:	40020440 	.word	0x40020440
 800549c:	40020458 	.word	0x40020458
 80054a0:	40020470 	.word	0x40020470
 80054a4:	40020488 	.word	0x40020488
 80054a8:	400204a0 	.word	0x400204a0
 80054ac:	400204b8 	.word	0x400204b8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0204 	bic.w	r2, r2, #4
 80054d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2208      	movs	r2, #8
 80054e2:	409a      	lsls	r2, r3
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f043 0201 	orr.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06e      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a69      	ldr	r2, [pc, #420]	; (80056b4 <HAL_DMA_IRQHandler+0x3f8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d04a      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a67      	ldr	r2, [pc, #412]	; (80056b8 <HAL_DMA_IRQHandler+0x3fc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d045      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a66      	ldr	r2, [pc, #408]	; (80056bc <HAL_DMA_IRQHandler+0x400>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d040      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a64      	ldr	r2, [pc, #400]	; (80056c0 <HAL_DMA_IRQHandler+0x404>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d03b      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_DMA_IRQHandler+0x408>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d036      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a61      	ldr	r2, [pc, #388]	; (80056c8 <HAL_DMA_IRQHandler+0x40c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a60      	ldr	r2, [pc, #384]	; (80056cc <HAL_DMA_IRQHandler+0x410>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d02c      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5e      	ldr	r2, [pc, #376]	; (80056d0 <HAL_DMA_IRQHandler+0x414>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d027      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a5d      	ldr	r2, [pc, #372]	; (80056d4 <HAL_DMA_IRQHandler+0x418>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <HAL_DMA_IRQHandler+0x41c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01d      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a5a      	ldr	r2, [pc, #360]	; (80056dc <HAL_DMA_IRQHandler+0x420>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a58      	ldr	r2, [pc, #352]	; (80056e0 <HAL_DMA_IRQHandler+0x424>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <HAL_DMA_IRQHandler+0x428>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a55      	ldr	r2, [pc, #340]	; (80056e8 <HAL_DMA_IRQHandler+0x42c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a54      	ldr	r2, [pc, #336]	; (80056ec <HAL_DMA_IRQHandler+0x430>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_DMA_IRQHandler+0x2ee>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a52      	ldr	r2, [pc, #328]	; (80056f0 <HAL_DMA_IRQHandler+0x434>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10a      	bne.n	80055c0 <HAL_DMA_IRQHandler+0x304>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf14      	ite	ne
 80055b8:	2301      	movne	r3, #1
 80055ba:	2300      	moveq	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	e003      	b.n	80055c8 <HAL_DMA_IRQHandler+0x30c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2201      	movs	r2, #1
 80055d6:	409a      	lsls	r2, r3
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	f043 0202 	orr.w	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2204      	movs	r2, #4
 80055f2:	409a      	lsls	r2, r3
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 808f 	beq.w	800571c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <HAL_DMA_IRQHandler+0x3f8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d04a      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2a      	ldr	r2, [pc, #168]	; (80056b8 <HAL_DMA_IRQHandler+0x3fc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d045      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a29      	ldr	r2, [pc, #164]	; (80056bc <HAL_DMA_IRQHandler+0x400>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d040      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a27      	ldr	r2, [pc, #156]	; (80056c0 <HAL_DMA_IRQHandler+0x404>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d03b      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <HAL_DMA_IRQHandler+0x408>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d036      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <HAL_DMA_IRQHandler+0x40c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d031      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a23      	ldr	r2, [pc, #140]	; (80056cc <HAL_DMA_IRQHandler+0x410>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d02c      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <HAL_DMA_IRQHandler+0x414>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d027      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a20      	ldr	r2, [pc, #128]	; (80056d4 <HAL_DMA_IRQHandler+0x418>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d022      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <HAL_DMA_IRQHandler+0x41c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01d      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_DMA_IRQHandler+0x420>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d018      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <HAL_DMA_IRQHandler+0x424>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <HAL_DMA_IRQHandler+0x428>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00e      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <HAL_DMA_IRQHandler+0x42c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d009      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a17      	ldr	r2, [pc, #92]	; (80056ec <HAL_DMA_IRQHandler+0x430>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_DMA_IRQHandler+0x3e2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <HAL_DMA_IRQHandler+0x434>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d12a      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x438>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e023      	b.n	80056fc <HAL_DMA_IRQHandler+0x440>
 80056b4:	40020010 	.word	0x40020010
 80056b8:	40020028 	.word	0x40020028
 80056bc:	40020040 	.word	0x40020040
 80056c0:	40020058 	.word	0x40020058
 80056c4:	40020070 	.word	0x40020070
 80056c8:	40020088 	.word	0x40020088
 80056cc:	400200a0 	.word	0x400200a0
 80056d0:	400200b8 	.word	0x400200b8
 80056d4:	40020410 	.word	0x40020410
 80056d8:	40020428 	.word	0x40020428
 80056dc:	40020440 	.word	0x40020440
 80056e0:	40020458 	.word	0x40020458
 80056e4:	40020470 	.word	0x40020470
 80056e8:	40020488 	.word	0x40020488
 80056ec:	400204a0 	.word	0x400204a0
 80056f0:	400204b8 	.word	0x400204b8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2204      	movs	r2, #4
 800570a:	409a      	lsls	r2, r3
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f043 0204 	orr.w	r2, r3, #4
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2210      	movs	r2, #16
 8005726:	409a      	lsls	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80a6 	beq.w	800587e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a85      	ldr	r2, [pc, #532]	; (800594c <HAL_DMA_IRQHandler+0x690>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a83      	ldr	r2, [pc, #524]	; (8005950 <HAL_DMA_IRQHandler+0x694>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a82      	ldr	r2, [pc, #520]	; (8005954 <HAL_DMA_IRQHandler+0x698>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a80      	ldr	r2, [pc, #512]	; (8005958 <HAL_DMA_IRQHandler+0x69c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a7f      	ldr	r2, [pc, #508]	; (800595c <HAL_DMA_IRQHandler+0x6a0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a7d      	ldr	r2, [pc, #500]	; (8005960 <HAL_DMA_IRQHandler+0x6a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7c      	ldr	r2, [pc, #496]	; (8005964 <HAL_DMA_IRQHandler+0x6a8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a7a      	ldr	r2, [pc, #488]	; (8005968 <HAL_DMA_IRQHandler+0x6ac>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a79      	ldr	r2, [pc, #484]	; (800596c <HAL_DMA_IRQHandler+0x6b0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a77      	ldr	r2, [pc, #476]	; (8005970 <HAL_DMA_IRQHandler+0x6b4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a76      	ldr	r2, [pc, #472]	; (8005974 <HAL_DMA_IRQHandler+0x6b8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a74      	ldr	r2, [pc, #464]	; (8005978 <HAL_DMA_IRQHandler+0x6bc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a73      	ldr	r2, [pc, #460]	; (800597c <HAL_DMA_IRQHandler+0x6c0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a71      	ldr	r2, [pc, #452]	; (8005980 <HAL_DMA_IRQHandler+0x6c4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a70      	ldr	r2, [pc, #448]	; (8005984 <HAL_DMA_IRQHandler+0x6c8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x516>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a6e      	ldr	r2, [pc, #440]	; (8005988 <HAL_DMA_IRQHandler+0x6cc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10a      	bne.n	80057e8 <HAL_DMA_IRQHandler+0x52c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e009      	b.n	80057fc <HAL_DMA_IRQHandler+0x540>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d03e      	beq.n	800587e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2210      	movs	r2, #16
 800580a:	409a      	lsls	r2, r3
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d018      	beq.n	8005850 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d108      	bne.n	800583e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d024      	beq.n	800587e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
 800583c:	e01f      	b.n	800587e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01b      	beq.n	800587e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
 800584e:	e016      	b.n	800587e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0208 	bic.w	r2, r2, #8
 800586c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2220      	movs	r2, #32
 8005888:	409a      	lsls	r2, r3
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8110 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <HAL_DMA_IRQHandler+0x690>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d04a      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_DMA_IRQHandler+0x694>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d045      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <HAL_DMA_IRQHandler+0x698>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d040      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a28      	ldr	r2, [pc, #160]	; (8005958 <HAL_DMA_IRQHandler+0x69c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d03b      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a26      	ldr	r2, [pc, #152]	; (800595c <HAL_DMA_IRQHandler+0x6a0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d036      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a25      	ldr	r2, [pc, #148]	; (8005960 <HAL_DMA_IRQHandler+0x6a4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d031      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a23      	ldr	r2, [pc, #140]	; (8005964 <HAL_DMA_IRQHandler+0x6a8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02c      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a22      	ldr	r2, [pc, #136]	; (8005968 <HAL_DMA_IRQHandler+0x6ac>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d027      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a20      	ldr	r2, [pc, #128]	; (800596c <HAL_DMA_IRQHandler+0x6b0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d022      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_DMA_IRQHandler+0x6b4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d01d      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <HAL_DMA_IRQHandler+0x6b8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_DMA_IRQHandler+0x6bc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1a      	ldr	r2, [pc, #104]	; (800597c <HAL_DMA_IRQHandler+0x6c0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_DMA_IRQHandler+0x6c4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a17      	ldr	r2, [pc, #92]	; (8005984 <HAL_DMA_IRQHandler+0x6c8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_DMA_IRQHandler+0x678>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a16      	ldr	r2, [pc, #88]	; (8005988 <HAL_DMA_IRQHandler+0x6cc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d12b      	bne.n	800598c <HAL_DMA_IRQHandler+0x6d0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf14      	ite	ne
 8005942:	2301      	movne	r3, #1
 8005944:	2300      	moveq	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e02a      	b.n	80059a0 <HAL_DMA_IRQHandler+0x6e4>
 800594a:	bf00      	nop
 800594c:	40020010 	.word	0x40020010
 8005950:	40020028 	.word	0x40020028
 8005954:	40020040 	.word	0x40020040
 8005958:	40020058 	.word	0x40020058
 800595c:	40020070 	.word	0x40020070
 8005960:	40020088 	.word	0x40020088
 8005964:	400200a0 	.word	0x400200a0
 8005968:	400200b8 	.word	0x400200b8
 800596c:	40020410 	.word	0x40020410
 8005970:	40020428 	.word	0x40020428
 8005974:	40020440 	.word	0x40020440
 8005978:	40020458 	.word	0x40020458
 800597c:	40020470 	.word	0x40020470
 8005980:	40020488 	.word	0x40020488
 8005984:	400204a0 	.word	0x400204a0
 8005988:	400204b8 	.word	0x400204b8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8087 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2220      	movs	r2, #32
 80059b0:	409a      	lsls	r2, r3
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d139      	bne.n	8005a36 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0216 	bic.w	r2, r2, #22
 80059d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <HAL_DMA_IRQHandler+0x736>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0208 	bic.w	r2, r2, #8
 8005a00:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	223f      	movs	r2, #63	; 0x3f
 8005a0c:	409a      	lsls	r2, r3
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 834a 	beq.w	80060c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
          }
          return;
 8005a34:	e344      	b.n	80060c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d108      	bne.n	8005a64 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d02c      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
 8005a62:	e027      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d023      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
 8005a74:	e01e      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10f      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0210 	bic.w	r2, r2, #16
 8005a92:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8306 	beq.w	80060ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8088 	beq.w	8005bdc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7a      	ldr	r2, [pc, #488]	; (8005cc4 <HAL_DMA_IRQHandler+0xa08>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d04a      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a79      	ldr	r2, [pc, #484]	; (8005cc8 <HAL_DMA_IRQHandler+0xa0c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d045      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a77      	ldr	r2, [pc, #476]	; (8005ccc <HAL_DMA_IRQHandler+0xa10>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a76      	ldr	r2, [pc, #472]	; (8005cd0 <HAL_DMA_IRQHandler+0xa14>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d03b      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a74      	ldr	r2, [pc, #464]	; (8005cd4 <HAL_DMA_IRQHandler+0xa18>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d036      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a73      	ldr	r2, [pc, #460]	; (8005cd8 <HAL_DMA_IRQHandler+0xa1c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d031      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a71      	ldr	r2, [pc, #452]	; (8005cdc <HAL_DMA_IRQHandler+0xa20>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02c      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a70      	ldr	r2, [pc, #448]	; (8005ce0 <HAL_DMA_IRQHandler+0xa24>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d027      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6e      	ldr	r2, [pc, #440]	; (8005ce4 <HAL_DMA_IRQHandler+0xa28>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6d      	ldr	r2, [pc, #436]	; (8005ce8 <HAL_DMA_IRQHandler+0xa2c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d01d      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6b      	ldr	r2, [pc, #428]	; (8005cec <HAL_DMA_IRQHandler+0xa30>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6a      	ldr	r2, [pc, #424]	; (8005cf0 <HAL_DMA_IRQHandler+0xa34>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a68      	ldr	r2, [pc, #416]	; (8005cf4 <HAL_DMA_IRQHandler+0xa38>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a67      	ldr	r2, [pc, #412]	; (8005cf8 <HAL_DMA_IRQHandler+0xa3c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a65      	ldr	r2, [pc, #404]	; (8005cfc <HAL_DMA_IRQHandler+0xa40>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x8b8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a64      	ldr	r2, [pc, #400]	; (8005d00 <HAL_DMA_IRQHandler+0xa44>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <HAL_DMA_IRQHandler+0x8ca>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e007      	b.n	8005b96 <HAL_DMA_IRQHandler+0x8da>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d307      	bcc.n	8005bb2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f2      	bne.n	8005b96 <HAL_DMA_IRQHandler+0x8da>
 8005bb0:	e000      	b.n	8005bb4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005bb2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2203      	movs	r2, #3
 8005bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005bd2:	e003      	b.n	8005bdc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8272 	beq.w	80060ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
 8005bee:	e26c      	b.n	80060ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a43      	ldr	r2, [pc, #268]	; (8005d04 <HAL_DMA_IRQHandler+0xa48>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a42      	ldr	r2, [pc, #264]	; (8005d08 <HAL_DMA_IRQHandler+0xa4c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a40      	ldr	r2, [pc, #256]	; (8005d0c <HAL_DMA_IRQHandler+0xa50>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3f      	ldr	r2, [pc, #252]	; (8005d10 <HAL_DMA_IRQHandler+0xa54>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3d      	ldr	r2, [pc, #244]	; (8005d14 <HAL_DMA_IRQHandler+0xa58>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3c      	ldr	r2, [pc, #240]	; (8005d18 <HAL_DMA_IRQHandler+0xa5c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3a      	ldr	r2, [pc, #232]	; (8005d1c <HAL_DMA_IRQHandler+0xa60>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x984>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a39      	ldr	r2, [pc, #228]	; (8005d20 <HAL_DMA_IRQHandler+0xa64>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_DMA_IRQHandler+0x988>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_DMA_IRQHandler+0x98a>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 823f 	beq.w	80060ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	409a      	lsls	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80cd 	beq.w	8005e04 <HAL_DMA_IRQHandler+0xb48>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80c7 	beq.w	8005e04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2204      	movs	r2, #4
 8005c80:	409a      	lsls	r2, r3
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d049      	beq.n	8005d24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8210 	beq.w	80060c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cac:	e20a      	b.n	80060c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8206 	beq.w	80060c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cc0:	e200      	b.n	80060c4 <HAL_DMA_IRQHandler+0xe08>
 8005cc2:	bf00      	nop
 8005cc4:	40020010 	.word	0x40020010
 8005cc8:	40020028 	.word	0x40020028
 8005ccc:	40020040 	.word	0x40020040
 8005cd0:	40020058 	.word	0x40020058
 8005cd4:	40020070 	.word	0x40020070
 8005cd8:	40020088 	.word	0x40020088
 8005cdc:	400200a0 	.word	0x400200a0
 8005ce0:	400200b8 	.word	0x400200b8
 8005ce4:	40020410 	.word	0x40020410
 8005ce8:	40020428 	.word	0x40020428
 8005cec:	40020440 	.word	0x40020440
 8005cf0:	40020458 	.word	0x40020458
 8005cf4:	40020470 	.word	0x40020470
 8005cf8:	40020488 	.word	0x40020488
 8005cfc:	400204a0 	.word	0x400204a0
 8005d00:	400204b8 	.word	0x400204b8
 8005d04:	58025408 	.word	0x58025408
 8005d08:	5802541c 	.word	0x5802541c
 8005d0c:	58025430 	.word	0x58025430
 8005d10:	58025444 	.word	0x58025444
 8005d14:	58025458 	.word	0x58025458
 8005d18:	5802546c 	.word	0x5802546c
 8005d1c:	58025480 	.word	0x58025480
 8005d20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d160      	bne.n	8005df0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a8c      	ldr	r2, [pc, #560]	; (8005f64 <HAL_DMA_IRQHandler+0xca8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d04a      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a8a      	ldr	r2, [pc, #552]	; (8005f68 <HAL_DMA_IRQHandler+0xcac>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d045      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a89      	ldr	r2, [pc, #548]	; (8005f6c <HAL_DMA_IRQHandler+0xcb0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d040      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a87      	ldr	r2, [pc, #540]	; (8005f70 <HAL_DMA_IRQHandler+0xcb4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d03b      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a86      	ldr	r2, [pc, #536]	; (8005f74 <HAL_DMA_IRQHandler+0xcb8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d036      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a84      	ldr	r2, [pc, #528]	; (8005f78 <HAL_DMA_IRQHandler+0xcbc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d031      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a83      	ldr	r2, [pc, #524]	; (8005f7c <HAL_DMA_IRQHandler+0xcc0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d02c      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a81      	ldr	r2, [pc, #516]	; (8005f80 <HAL_DMA_IRQHandler+0xcc4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d027      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a80      	ldr	r2, [pc, #512]	; (8005f84 <HAL_DMA_IRQHandler+0xcc8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a7e      	ldr	r2, [pc, #504]	; (8005f88 <HAL_DMA_IRQHandler+0xccc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01d      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a7d      	ldr	r2, [pc, #500]	; (8005f8c <HAL_DMA_IRQHandler+0xcd0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a7b      	ldr	r2, [pc, #492]	; (8005f90 <HAL_DMA_IRQHandler+0xcd4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a7a      	ldr	r2, [pc, #488]	; (8005f94 <HAL_DMA_IRQHandler+0xcd8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a78      	ldr	r2, [pc, #480]	; (8005f98 <HAL_DMA_IRQHandler+0xcdc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a77      	ldr	r2, [pc, #476]	; (8005f9c <HAL_DMA_IRQHandler+0xce0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_DMA_IRQHandler+0xb12>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a75      	ldr	r2, [pc, #468]	; (8005fa0 <HAL_DMA_IRQHandler+0xce4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d108      	bne.n	8005de0 <HAL_DMA_IRQHandler+0xb24>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0208 	bic.w	r2, r2, #8
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e007      	b.n	8005df0 <HAL_DMA_IRQHandler+0xb34>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8165 	beq.w	80060c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e02:	e15f      	b.n	80060c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80c5 	beq.w	8005fa4 <HAL_DMA_IRQHandler+0xce8>
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80bf 	beq.w	8005fa4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	2202      	movs	r2, #2
 8005e30:	409a      	lsls	r2, r3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d018      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 813a 	beq.w	80060c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e5c:	e134      	b.n	80060c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 8130 	beq.w	80060c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e70:	e12a      	b.n	80060c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d168      	bne.n	8005f4e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a38      	ldr	r2, [pc, #224]	; (8005f64 <HAL_DMA_IRQHandler+0xca8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d04a      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a37      	ldr	r2, [pc, #220]	; (8005f68 <HAL_DMA_IRQHandler+0xcac>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d045      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a35      	ldr	r2, [pc, #212]	; (8005f6c <HAL_DMA_IRQHandler+0xcb0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d040      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a34      	ldr	r2, [pc, #208]	; (8005f70 <HAL_DMA_IRQHandler+0xcb4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d03b      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a32      	ldr	r2, [pc, #200]	; (8005f74 <HAL_DMA_IRQHandler+0xcb8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d036      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a31      	ldr	r2, [pc, #196]	; (8005f78 <HAL_DMA_IRQHandler+0xcbc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d031      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2f      	ldr	r2, [pc, #188]	; (8005f7c <HAL_DMA_IRQHandler+0xcc0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02c      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2e      	ldr	r2, [pc, #184]	; (8005f80 <HAL_DMA_IRQHandler+0xcc4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d027      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <HAL_DMA_IRQHandler+0xcc8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d022      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a2b      	ldr	r2, [pc, #172]	; (8005f88 <HAL_DMA_IRQHandler+0xccc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d01d      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a29      	ldr	r2, [pc, #164]	; (8005f8c <HAL_DMA_IRQHandler+0xcd0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d018      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a28      	ldr	r2, [pc, #160]	; (8005f90 <HAL_DMA_IRQHandler+0xcd4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <HAL_DMA_IRQHandler+0xcd8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00e      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <HAL_DMA_IRQHandler+0xcdc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d009      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a23      	ldr	r2, [pc, #140]	; (8005f9c <HAL_DMA_IRQHandler+0xce0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <HAL_DMA_IRQHandler+0xc60>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a22      	ldr	r2, [pc, #136]	; (8005fa0 <HAL_DMA_IRQHandler+0xce4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d108      	bne.n	8005f2e <HAL_DMA_IRQHandler+0xc72>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0214 	bic.w	r2, r2, #20
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e007      	b.n	8005f3e <HAL_DMA_IRQHandler+0xc82>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 020a 	bic.w	r2, r2, #10
 8005f3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80b8 	beq.w	80060c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f60:	e0b2      	b.n	80060c8 <HAL_DMA_IRQHandler+0xe0c>
 8005f62:	bf00      	nop
 8005f64:	40020010 	.word	0x40020010
 8005f68:	40020028 	.word	0x40020028
 8005f6c:	40020040 	.word	0x40020040
 8005f70:	40020058 	.word	0x40020058
 8005f74:	40020070 	.word	0x40020070
 8005f78:	40020088 	.word	0x40020088
 8005f7c:	400200a0 	.word	0x400200a0
 8005f80:	400200b8 	.word	0x400200b8
 8005f84:	40020410 	.word	0x40020410
 8005f88:	40020428 	.word	0x40020428
 8005f8c:	40020440 	.word	0x40020440
 8005f90:	40020458 	.word	0x40020458
 8005f94:	40020470 	.word	0x40020470
 8005f98:	40020488 	.word	0x40020488
 8005f9c:	400204a0 	.word	0x400204a0
 8005fa0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2208      	movs	r2, #8
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8088 	beq.w	80060ca <HAL_DMA_IRQHandler+0xe0e>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8082 	beq.w	80060ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a41      	ldr	r2, [pc, #260]	; (80060d0 <HAL_DMA_IRQHandler+0xe14>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d04a      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3f      	ldr	r2, [pc, #252]	; (80060d4 <HAL_DMA_IRQHandler+0xe18>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d045      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a3e      	ldr	r2, [pc, #248]	; (80060d8 <HAL_DMA_IRQHandler+0xe1c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d040      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <HAL_DMA_IRQHandler+0xe20>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d03b      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3b      	ldr	r2, [pc, #236]	; (80060e0 <HAL_DMA_IRQHandler+0xe24>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d036      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a39      	ldr	r2, [pc, #228]	; (80060e4 <HAL_DMA_IRQHandler+0xe28>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d031      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <HAL_DMA_IRQHandler+0xe2c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d02c      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a36      	ldr	r2, [pc, #216]	; (80060ec <HAL_DMA_IRQHandler+0xe30>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d027      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a35      	ldr	r2, [pc, #212]	; (80060f0 <HAL_DMA_IRQHandler+0xe34>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a33      	ldr	r2, [pc, #204]	; (80060f4 <HAL_DMA_IRQHandler+0xe38>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a32      	ldr	r2, [pc, #200]	; (80060f8 <HAL_DMA_IRQHandler+0xe3c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a30      	ldr	r2, [pc, #192]	; (80060fc <HAL_DMA_IRQHandler+0xe40>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <HAL_DMA_IRQHandler+0xe44>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <HAL_DMA_IRQHandler+0xe48>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <HAL_DMA_IRQHandler+0xe4c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_DMA_IRQHandler+0xdaa>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2a      	ldr	r2, [pc, #168]	; (800610c <HAL_DMA_IRQHandler+0xe50>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d108      	bne.n	8006078 <HAL_DMA_IRQHandler+0xdbc>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 021c 	bic.w	r2, r2, #28
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e007      	b.n	8006088 <HAL_DMA_IRQHandler+0xdcc>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 020e 	bic.w	r2, r2, #14
 8006086:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	2201      	movs	r2, #1
 8006092:	409a      	lsls	r2, r3
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
 80060be:	e004      	b.n	80060ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060ca:	3728      	adds	r7, #40	; 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40020010 	.word	0x40020010
 80060d4:	40020028 	.word	0x40020028
 80060d8:	40020040 	.word	0x40020040
 80060dc:	40020058 	.word	0x40020058
 80060e0:	40020070 	.word	0x40020070
 80060e4:	40020088 	.word	0x40020088
 80060e8:	400200a0 	.word	0x400200a0
 80060ec:	400200b8 	.word	0x400200b8
 80060f0:	40020410 	.word	0x40020410
 80060f4:	40020428 	.word	0x40020428
 80060f8:	40020440 	.word	0x40020440
 80060fc:	40020458 	.word	0x40020458
 8006100:	40020470 	.word	0x40020470
 8006104:	40020488 	.word	0x40020488
 8006108:	400204a0 	.word	0x400204a0
 800610c:	400204b8 	.word	0x400204b8

08006110 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a84      	ldr	r2, [pc, #528]	; (8006340 <DMA_SetConfig+0x230>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d072      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a82      	ldr	r2, [pc, #520]	; (8006344 <DMA_SetConfig+0x234>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d06d      	beq.n	800621a <DMA_SetConfig+0x10a>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a81      	ldr	r2, [pc, #516]	; (8006348 <DMA_SetConfig+0x238>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d068      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a7f      	ldr	r2, [pc, #508]	; (800634c <DMA_SetConfig+0x23c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d063      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a7e      	ldr	r2, [pc, #504]	; (8006350 <DMA_SetConfig+0x240>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d05e      	beq.n	800621a <DMA_SetConfig+0x10a>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a7c      	ldr	r2, [pc, #496]	; (8006354 <DMA_SetConfig+0x244>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d059      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7b      	ldr	r2, [pc, #492]	; (8006358 <DMA_SetConfig+0x248>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d054      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a79      	ldr	r2, [pc, #484]	; (800635c <DMA_SetConfig+0x24c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d04f      	beq.n	800621a <DMA_SetConfig+0x10a>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a78      	ldr	r2, [pc, #480]	; (8006360 <DMA_SetConfig+0x250>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04a      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a76      	ldr	r2, [pc, #472]	; (8006364 <DMA_SetConfig+0x254>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d045      	beq.n	800621a <DMA_SetConfig+0x10a>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a75      	ldr	r2, [pc, #468]	; (8006368 <DMA_SetConfig+0x258>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d040      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a73      	ldr	r2, [pc, #460]	; (800636c <DMA_SetConfig+0x25c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d03b      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a72      	ldr	r2, [pc, #456]	; (8006370 <DMA_SetConfig+0x260>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a70      	ldr	r2, [pc, #448]	; (8006374 <DMA_SetConfig+0x264>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a6f      	ldr	r2, [pc, #444]	; (8006378 <DMA_SetConfig+0x268>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d02c      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a6d      	ldr	r2, [pc, #436]	; (800637c <DMA_SetConfig+0x26c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a6c      	ldr	r2, [pc, #432]	; (8006380 <DMA_SetConfig+0x270>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6a      	ldr	r2, [pc, #424]	; (8006384 <DMA_SetConfig+0x274>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01d      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a69      	ldr	r2, [pc, #420]	; (8006388 <DMA_SetConfig+0x278>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a67      	ldr	r2, [pc, #412]	; (800638c <DMA_SetConfig+0x27c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a66      	ldr	r2, [pc, #408]	; (8006390 <DMA_SetConfig+0x280>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <DMA_SetConfig+0x10a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a64      	ldr	r2, [pc, #400]	; (8006394 <DMA_SetConfig+0x284>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a63      	ldr	r2, [pc, #396]	; (8006398 <DMA_SetConfig+0x288>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <DMA_SetConfig+0x10a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a61      	ldr	r2, [pc, #388]	; (800639c <DMA_SetConfig+0x28c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <DMA_SetConfig+0x10e>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <DMA_SetConfig+0x110>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800622c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800623e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a3e      	ldr	r2, [pc, #248]	; (8006340 <DMA_SetConfig+0x230>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d04a      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3d      	ldr	r2, [pc, #244]	; (8006344 <DMA_SetConfig+0x234>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d045      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3b      	ldr	r2, [pc, #236]	; (8006348 <DMA_SetConfig+0x238>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d040      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a3a      	ldr	r2, [pc, #232]	; (800634c <DMA_SetConfig+0x23c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d03b      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a38      	ldr	r2, [pc, #224]	; (8006350 <DMA_SetConfig+0x240>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d036      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a37      	ldr	r2, [pc, #220]	; (8006354 <DMA_SetConfig+0x244>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d031      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a35      	ldr	r2, [pc, #212]	; (8006358 <DMA_SetConfig+0x248>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d02c      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a34      	ldr	r2, [pc, #208]	; (800635c <DMA_SetConfig+0x24c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d027      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a32      	ldr	r2, [pc, #200]	; (8006360 <DMA_SetConfig+0x250>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d022      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a31      	ldr	r2, [pc, #196]	; (8006364 <DMA_SetConfig+0x254>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d01d      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <DMA_SetConfig+0x258>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d018      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2e      	ldr	r2, [pc, #184]	; (800636c <DMA_SetConfig+0x25c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d013      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <DMA_SetConfig+0x260>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00e      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2b      	ldr	r2, [pc, #172]	; (8006374 <DMA_SetConfig+0x264>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d009      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <DMA_SetConfig+0x268>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <DMA_SetConfig+0x1d0>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a28      	ldr	r2, [pc, #160]	; (800637c <DMA_SetConfig+0x26c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d101      	bne.n	80062e4 <DMA_SetConfig+0x1d4>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <DMA_SetConfig+0x1d6>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d05a      	beq.n	80063a0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	223f      	movs	r2, #63	; 0x3f
 80062f4:	409a      	lsls	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006308:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d108      	bne.n	800632c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800632a:	e087      	b.n	800643c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
}
 800633c:	e07e      	b.n	800643c <DMA_SetConfig+0x32c>
 800633e:	bf00      	nop
 8006340:	40020010 	.word	0x40020010
 8006344:	40020028 	.word	0x40020028
 8006348:	40020040 	.word	0x40020040
 800634c:	40020058 	.word	0x40020058
 8006350:	40020070 	.word	0x40020070
 8006354:	40020088 	.word	0x40020088
 8006358:	400200a0 	.word	0x400200a0
 800635c:	400200b8 	.word	0x400200b8
 8006360:	40020410 	.word	0x40020410
 8006364:	40020428 	.word	0x40020428
 8006368:	40020440 	.word	0x40020440
 800636c:	40020458 	.word	0x40020458
 8006370:	40020470 	.word	0x40020470
 8006374:	40020488 	.word	0x40020488
 8006378:	400204a0 	.word	0x400204a0
 800637c:	400204b8 	.word	0x400204b8
 8006380:	58025408 	.word	0x58025408
 8006384:	5802541c 	.word	0x5802541c
 8006388:	58025430 	.word	0x58025430
 800638c:	58025444 	.word	0x58025444
 8006390:	58025458 	.word	0x58025458
 8006394:	5802546c 	.word	0x5802546c
 8006398:	58025480 	.word	0x58025480
 800639c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <DMA_SetConfig+0x338>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a27      	ldr	r2, [pc, #156]	; (800644c <DMA_SetConfig+0x33c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a25      	ldr	r2, [pc, #148]	; (8006450 <DMA_SetConfig+0x340>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a24      	ldr	r2, [pc, #144]	; (8006454 <DMA_SetConfig+0x344>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a22      	ldr	r2, [pc, #136]	; (8006458 <DMA_SetConfig+0x348>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a21      	ldr	r2, [pc, #132]	; (800645c <DMA_SetConfig+0x34c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <DMA_SetConfig+0x350>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <DMA_SetConfig+0x2e0>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <DMA_SetConfig+0x354>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d101      	bne.n	80063f4 <DMA_SetConfig+0x2e4>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <DMA_SetConfig+0x2e6>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d020      	beq.n	800643c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2201      	movs	r2, #1
 8006404:	409a      	lsls	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d108      	bne.n	800642c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	60da      	str	r2, [r3, #12]
}
 800642a:	e007      	b.n	800643c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	58025408 	.word	0x58025408
 800644c:	5802541c 	.word	0x5802541c
 8006450:	58025430 	.word	0x58025430
 8006454:	58025444 	.word	0x58025444
 8006458:	58025458 	.word	0x58025458
 800645c:	5802546c 	.word	0x5802546c
 8006460:	58025480 	.word	0x58025480
 8006464:	58025494 	.word	0x58025494

08006468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a42      	ldr	r2, [pc, #264]	; (8006580 <DMA_CalcBaseAndBitshift+0x118>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d04a      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a41      	ldr	r2, [pc, #260]	; (8006584 <DMA_CalcBaseAndBitshift+0x11c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d045      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a3f      	ldr	r2, [pc, #252]	; (8006588 <DMA_CalcBaseAndBitshift+0x120>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d040      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3e      	ldr	r2, [pc, #248]	; (800658c <DMA_CalcBaseAndBitshift+0x124>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d03b      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3c      	ldr	r2, [pc, #240]	; (8006590 <DMA_CalcBaseAndBitshift+0x128>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d036      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a3b      	ldr	r2, [pc, #236]	; (8006594 <DMA_CalcBaseAndBitshift+0x12c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d031      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a39      	ldr	r2, [pc, #228]	; (8006598 <DMA_CalcBaseAndBitshift+0x130>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d02c      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a38      	ldr	r2, [pc, #224]	; (800659c <DMA_CalcBaseAndBitshift+0x134>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d027      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a36      	ldr	r2, [pc, #216]	; (80065a0 <DMA_CalcBaseAndBitshift+0x138>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d022      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a35      	ldr	r2, [pc, #212]	; (80065a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01d      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a33      	ldr	r2, [pc, #204]	; (80065a8 <DMA_CalcBaseAndBitshift+0x140>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d018      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a32      	ldr	r2, [pc, #200]	; (80065ac <DMA_CalcBaseAndBitshift+0x144>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d013      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a30      	ldr	r2, [pc, #192]	; (80065b0 <DMA_CalcBaseAndBitshift+0x148>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00e      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a2f      	ldr	r2, [pc, #188]	; (80065b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d009      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <DMA_CalcBaseAndBitshift+0x150>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <DMA_CalcBaseAndBitshift+0xa8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <DMA_CalcBaseAndBitshift+0x154>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d101      	bne.n	8006514 <DMA_CalcBaseAndBitshift+0xac>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <DMA_CalcBaseAndBitshift+0xae>
 8006514:	2300      	movs	r3, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d024      	beq.n	8006564 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	3b10      	subs	r3, #16
 8006522:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <DMA_CalcBaseAndBitshift+0x158>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	091b      	lsrs	r3, r3, #4
 800652a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	4a24      	ldr	r2, [pc, #144]	; (80065c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006534:	5cd3      	ldrb	r3, [r2, r3]
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b03      	cmp	r3, #3
 8006540:	d908      	bls.n	8006554 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	4b1f      	ldr	r3, [pc, #124]	; (80065c8 <DMA_CalcBaseAndBitshift+0x160>)
 800654a:	4013      	ands	r3, r2
 800654c:	1d1a      	adds	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	659a      	str	r2, [r3, #88]	; 0x58
 8006552:	e00d      	b.n	8006570 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <DMA_CalcBaseAndBitshift+0x160>)
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6593      	str	r3, [r2, #88]	; 0x58
 8006562:	e005      	b.n	8006570 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	40020010 	.word	0x40020010
 8006584:	40020028 	.word	0x40020028
 8006588:	40020040 	.word	0x40020040
 800658c:	40020058 	.word	0x40020058
 8006590:	40020070 	.word	0x40020070
 8006594:	40020088 	.word	0x40020088
 8006598:	400200a0 	.word	0x400200a0
 800659c:	400200b8 	.word	0x400200b8
 80065a0:	40020410 	.word	0x40020410
 80065a4:	40020428 	.word	0x40020428
 80065a8:	40020440 	.word	0x40020440
 80065ac:	40020458 	.word	0x40020458
 80065b0:	40020470 	.word	0x40020470
 80065b4:	40020488 	.word	0x40020488
 80065b8:	400204a0 	.word	0x400204a0
 80065bc:	400204b8 	.word	0x400204b8
 80065c0:	aaaaaaab 	.word	0xaaaaaaab
 80065c4:	08015144 	.word	0x08015144
 80065c8:	fffffc00 	.word	0xfffffc00

080065cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d120      	bne.n	8006622 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d858      	bhi.n	800669a <DMA_CheckFifoParam+0xce>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <DMA_CheckFifoParam+0x24>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006613 	.word	0x08006613
 80065f8:	08006601 	.word	0x08006601
 80065fc:	0800669b 	.word	0x0800669b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d048      	beq.n	800669e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006610:	e045      	b.n	800669e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800661a:	d142      	bne.n	80066a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006620:	e03f      	b.n	80066a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662a:	d123      	bne.n	8006674 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	2b03      	cmp	r3, #3
 8006632:	d838      	bhi.n	80066a6 <DMA_CheckFifoParam+0xda>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <DMA_CheckFifoParam+0x70>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	0800664d 	.word	0x0800664d
 8006640:	08006653 	.word	0x08006653
 8006644:	0800664d 	.word	0x0800664d
 8006648:	08006665 	.word	0x08006665
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
        break;
 8006650:	e030      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d025      	beq.n	80066aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006662:	e022      	b.n	80066aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800666c:	d11f      	bne.n	80066ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006672:	e01c      	b.n	80066ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	2b02      	cmp	r3, #2
 800667a:	d902      	bls.n	8006682 <DMA_CheckFifoParam+0xb6>
 800667c:	2b03      	cmp	r3, #3
 800667e:	d003      	beq.n	8006688 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006680:	e018      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
        break;
 8006686:	e015      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
    break;
 8006698:	e00b      	b.n	80066b2 <DMA_CheckFifoParam+0xe6>
        break;
 800669a:	bf00      	nop
 800669c:	e00a      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        break;
 800669e:	bf00      	nop
 80066a0:	e008      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        break;
 80066a2:	bf00      	nop
 80066a4:	e006      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        break;
 80066a6:	bf00      	nop
 80066a8:	e004      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        break;
 80066aa:	bf00      	nop
 80066ac:	e002      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
        break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <DMA_CheckFifoParam+0xe8>
    break;
 80066b2:	bf00      	nop
    }
  }

  return status;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop

080066c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a38      	ldr	r2, [pc, #224]	; (80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a36      	ldr	r2, [pc, #216]	; (80067bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a35      	ldr	r2, [pc, #212]	; (80067c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a33      	ldr	r2, [pc, #204]	; (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a32      	ldr	r2, [pc, #200]	; (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a30      	ldr	r2, [pc, #192]	; (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2f      	ldr	r2, [pc, #188]	; (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01a      	beq.n	8006762 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	3b08      	subs	r3, #8
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	091b      	lsrs	r3, r3, #4
 800673c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4b26      	ldr	r3, [pc, #152]	; (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	461a      	mov	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a24      	ldr	r2, [pc, #144]	; (80067e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006750:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	2201      	movs	r2, #1
 800675a:	409a      	lsls	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006760:	e024      	b.n	80067ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	3b10      	subs	r3, #16
 800676a:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800676c:	fba2 2303 	umull	r2, r3, r2, r3
 8006770:	091b      	lsrs	r3, r3, #4
 8006772:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d806      	bhi.n	800678a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d902      	bls.n	800678a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3308      	adds	r3, #8
 8006788:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800679c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	58025408 	.word	0x58025408
 80067bc:	5802541c 	.word	0x5802541c
 80067c0:	58025430 	.word	0x58025430
 80067c4:	58025444 	.word	0x58025444
 80067c8:	58025458 	.word	0x58025458
 80067cc:	5802546c 	.word	0x5802546c
 80067d0:	58025480 	.word	0x58025480
 80067d4:	58025494 	.word	0x58025494
 80067d8:	cccccccd 	.word	0xcccccccd
 80067dc:	16009600 	.word	0x16009600
 80067e0:	58025880 	.word	0x58025880
 80067e4:	aaaaaaab 	.word	0xaaaaaaab
 80067e8:	400204b8 	.word	0x400204b8
 80067ec:	4002040f 	.word	0x4002040f
 80067f0:	10008200 	.word	0x10008200
 80067f4:	40020880 	.word	0x40020880

080067f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d04a      	beq.n	80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d847      	bhi.n	80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d022      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a24      	ldr	r2, [pc, #144]	; (80068b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01d      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d018      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a21      	ldr	r2, [pc, #132]	; (80068bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00e      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d101      	bne.n	8006868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006868:	2300      	movs	r3, #0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006880:	671a      	str	r2, [r3, #112]	; 0x70
 8006882:	e009      	b.n	8006898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	461a      	mov	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a11      	ldr	r2, [pc, #68]	; (80068dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006896:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3b01      	subs	r3, #1
 800689c:	2201      	movs	r2, #1
 800689e:	409a      	lsls	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	58025408 	.word	0x58025408
 80068b4:	5802541c 	.word	0x5802541c
 80068b8:	58025430 	.word	0x58025430
 80068bc:	58025444 	.word	0x58025444
 80068c0:	58025458 	.word	0x58025458
 80068c4:	5802546c 	.word	0x5802546c
 80068c8:	58025480 	.word	0x58025480
 80068cc:	58025494 	.word	0x58025494
 80068d0:	1600963f 	.word	0x1600963f
 80068d4:	58025940 	.word	0x58025940
 80068d8:	1000823f 	.word	0x1000823f
 80068dc:	40020940 	.word	0x40020940

080068e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b089      	sub	sp, #36	; 0x24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068ee:	4b89      	ldr	r3, [pc, #548]	; (8006b14 <HAL_GPIO_Init+0x234>)
 80068f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068f2:	e194      	b.n	8006c1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	2101      	movs	r1, #1
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	4013      	ands	r3, r2
 8006902:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8186 	beq.w	8006c18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d00b      	beq.n	800692c <HAL_GPIO_Init+0x4c>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d007      	beq.n	800692c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006920:	2b11      	cmp	r3, #17
 8006922:	d003      	beq.n	800692c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b12      	cmp	r3, #18
 800692a:	d130      	bne.n	800698e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	2203      	movs	r2, #3
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4013      	ands	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006962:	2201      	movs	r2, #1
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	4013      	ands	r3, r2
 8006970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	f003 0201 	and.w	r2, r3, #1
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4313      	orrs	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	2203      	movs	r2, #3
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d003      	beq.n	80069ce <HAL_GPIO_Init+0xee>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b12      	cmp	r3, #18
 80069cc:	d123      	bne.n	8006a16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	08da      	lsrs	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3208      	adds	r2, #8
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	220f      	movs	r2, #15
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43db      	mvns	r3, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	08da      	lsrs	r2, r3, #3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3208      	adds	r2, #8
 8006a10:	69b9      	ldr	r1, [r7, #24]
 8006a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	2203      	movs	r2, #3
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	43db      	mvns	r3, r3
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f003 0203 	and.w	r2, r3, #3
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80e0 	beq.w	8006c18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a58:	4b2f      	ldr	r3, [pc, #188]	; (8006b18 <HAL_GPIO_Init+0x238>)
 8006a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a5e:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <HAL_GPIO_Init+0x238>)
 8006a60:	f043 0302 	orr.w	r3, r3, #2
 8006a64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_GPIO_Init+0x238>)
 8006a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a76:	4a29      	ldr	r2, [pc, #164]	; (8006b1c <HAL_GPIO_Init+0x23c>)
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	220f      	movs	r2, #15
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	43db      	mvns	r3, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4013      	ands	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <HAL_GPIO_Init+0x240>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d052      	beq.n	8006b48 <HAL_GPIO_Init+0x268>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <HAL_GPIO_Init+0x244>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d031      	beq.n	8006b0e <HAL_GPIO_Init+0x22e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <HAL_GPIO_Init+0x248>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d02b      	beq.n	8006b0a <HAL_GPIO_Init+0x22a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <HAL_GPIO_Init+0x24c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d025      	beq.n	8006b06 <HAL_GPIO_Init+0x226>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_GPIO_Init+0x250>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01f      	beq.n	8006b02 <HAL_GPIO_Init+0x222>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <HAL_GPIO_Init+0x254>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d019      	beq.n	8006afe <HAL_GPIO_Init+0x21e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1a      	ldr	r2, [pc, #104]	; (8006b38 <HAL_GPIO_Init+0x258>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_GPIO_Init+0x21a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <HAL_GPIO_Init+0x25c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00d      	beq.n	8006af6 <HAL_GPIO_Init+0x216>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <HAL_GPIO_Init+0x260>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <HAL_GPIO_Init+0x212>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <HAL_GPIO_Init+0x264>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d101      	bne.n	8006aee <HAL_GPIO_Init+0x20e>
 8006aea:	2309      	movs	r3, #9
 8006aec:	e02d      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006aee:	230a      	movs	r3, #10
 8006af0:	e02b      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006af2:	2308      	movs	r3, #8
 8006af4:	e029      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006af6:	2307      	movs	r3, #7
 8006af8:	e027      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006afa:	2306      	movs	r3, #6
 8006afc:	e025      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006afe:	2305      	movs	r3, #5
 8006b00:	e023      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006b02:	2304      	movs	r3, #4
 8006b04:	e021      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006b06:	2303      	movs	r3, #3
 8006b08:	e01f      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e01d      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e01b      	b.n	8006b4a <HAL_GPIO_Init+0x26a>
 8006b12:	bf00      	nop
 8006b14:	58000080 	.word	0x58000080
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	58000400 	.word	0x58000400
 8006b20:	58020000 	.word	0x58020000
 8006b24:	58020400 	.word	0x58020400
 8006b28:	58020800 	.word	0x58020800
 8006b2c:	58020c00 	.word	0x58020c00
 8006b30:	58021000 	.word	0x58021000
 8006b34:	58021400 	.word	0x58021400
 8006b38:	58021800 	.word	0x58021800
 8006b3c:	58021c00 	.word	0x58021c00
 8006b40:	58022000 	.word	0x58022000
 8006b44:	58022400 	.word	0x58022400
 8006b48:	2300      	movs	r3, #0
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	f002 0203 	and.w	r2, r2, #3
 8006b50:	0092      	lsls	r2, r2, #2
 8006b52:	4093      	lsls	r3, r2
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b5a:	4938      	ldr	r1, [pc, #224]	; (8006c3c <HAL_GPIO_Init+0x35c>)
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	089b      	lsrs	r3, r3, #2
 8006b60:	3302      	adds	r3, #2
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	43db      	mvns	r3, r3
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	4013      	ands	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f ae63 	bne.w	80068f4 <HAL_GPIO_Init+0x14>
  }
}
 8006c2e:	bf00      	nop
 8006c30:	3724      	adds	r7, #36	; 0x24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	58000400 	.word	0x58000400

08006c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c50:	787b      	ldrb	r3, [r7, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c56:	887a      	ldrh	r2, [r7, #2]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c5c:	e003      	b.n	8006c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c5e:	887b      	ldrh	r3, [r7, #2]
 8006c60:	041a      	lsls	r2, r3, #16
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	619a      	str	r2, [r3, #24]
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c7c:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d00a      	beq.n	8006c9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c88:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d001      	beq.n	8006c9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01f      	b.n	8006cda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e01d      	b.n	8006cda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f023 0207 	bic.w	r2, r3, #7
 8006ca6:	490f      	ldr	r1, [pc, #60]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cae:	f7fb f867 	bl	8001d80 <HAL_GetTick>
 8006cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cb4:	e009      	b.n	8006cca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cb6:	f7fb f863 	bl	8001d80 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc4:	d901      	bls.n	8006cca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e007      	b.n	8006cda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd6:	d1ee      	bne.n	8006cb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	58024800 	.word	0x58024800

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e3ff      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8087 	beq.w	8006e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d08:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d12:	4b97      	ldr	r3, [pc, #604]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2b10      	cmp	r3, #16
 8006d1c:	d007      	beq.n	8006d2e <HAL_RCC_OscConfig+0x46>
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	2b18      	cmp	r3, #24
 8006d22:	d110      	bne.n	8006d46 <HAL_RCC_OscConfig+0x5e>
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d10b      	bne.n	8006d46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2e:	4b90      	ldr	r3, [pc, #576]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d06c      	beq.n	8006e14 <HAL_RCC_OscConfig+0x12c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d168      	bne.n	8006e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e3d9      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCC_OscConfig+0x76>
 8006d50:	4b87      	ldr	r3, [pc, #540]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a86      	ldr	r2, [pc, #536]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e02e      	b.n	8006dbc <HAL_RCC_OscConfig+0xd4>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCC_OscConfig+0x98>
 8006d66:	4b82      	ldr	r3, [pc, #520]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a81      	ldr	r2, [pc, #516]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	4b7f      	ldr	r3, [pc, #508]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a7e      	ldr	r2, [pc, #504]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	e01d      	b.n	8006dbc <HAL_RCC_OscConfig+0xd4>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d88:	d10c      	bne.n	8006da4 <HAL_RCC_OscConfig+0xbc>
 8006d8a:	4b79      	ldr	r3, [pc, #484]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a78      	ldr	r2, [pc, #480]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	4b76      	ldr	r3, [pc, #472]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a75      	ldr	r2, [pc, #468]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e00b      	b.n	8006dbc <HAL_RCC_OscConfig+0xd4>
 8006da4:	4b72      	ldr	r3, [pc, #456]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a71      	ldr	r2, [pc, #452]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	4b6f      	ldr	r3, [pc, #444]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a6e      	ldr	r2, [pc, #440]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d013      	beq.n	8006dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fa ffdc 	bl	8001d80 <HAL_GetTick>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dcc:	f7fa ffd8 	bl	8001d80 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b64      	cmp	r3, #100	; 0x64
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e38d      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dde:	4b64      	ldr	r3, [pc, #400]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0xe4>
 8006dea:	e014      	b.n	8006e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fa ffc8 	bl	8001d80 <HAL_GetTick>
 8006df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006df4:	f7fa ffc4 	bl	8001d80 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b64      	cmp	r3, #100	; 0x64
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e379      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e06:	4b5a      	ldr	r3, [pc, #360]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x10c>
 8006e12:	e000      	b.n	8006e16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80ae 	beq.w	8006f80 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e24:	4b52      	ldr	r3, [pc, #328]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e2e:	4b50      	ldr	r3, [pc, #320]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <HAL_RCC_OscConfig+0x162>
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	2b18      	cmp	r3, #24
 8006e3e:	d13a      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x1ce>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d135      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e4a:	4b49      	ldr	r3, [pc, #292]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_RCC_OscConfig+0x17a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e34b      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e62:	f7fa ffbb 	bl	8001ddc <HAL_GetREVID>
 8006e66:	4602      	mov	r2, r0
 8006e68:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d817      	bhi.n	8006ea0 <HAL_RCC_OscConfig+0x1b8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d108      	bne.n	8006e8a <HAL_RCC_OscConfig+0x1a2>
 8006e78:	4b3d      	ldr	r3, [pc, #244]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e80:	4a3b      	ldr	r2, [pc, #236]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e88:	e07a      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e8a:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	031b      	lsls	r3, r3, #12
 8006e98:	4935      	ldr	r1, [pc, #212]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e9e:	e06f      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea0:	4b33      	ldr	r3, [pc, #204]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	4930      	ldr	r1, [pc, #192]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb4:	e064      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d045      	beq.n	8006f4a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ebe:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 0219 	bic.w	r2, r3, #25
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	4929      	ldr	r1, [pc, #164]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed0:	f7fa ff56 	bl	8001d80 <HAL_GetTick>
 8006ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ed8:	f7fa ff52 	bl	8001d80 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e307      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eea:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0f0      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef6:	f7fa ff71 	bl	8001ddc <HAL_GetREVID>
 8006efa:	4602      	mov	r2, r0
 8006efc:	f241 0303 	movw	r3, #4099	; 0x1003
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d817      	bhi.n	8006f34 <HAL_RCC_OscConfig+0x24c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d108      	bne.n	8006f1e <HAL_RCC_OscConfig+0x236>
 8006f0c:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f14:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1a:	6053      	str	r3, [r2, #4]
 8006f1c:	e030      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	031b      	lsls	r3, r3, #12
 8006f2c:	4910      	ldr	r1, [pc, #64]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	604b      	str	r3, [r1, #4]
 8006f32:	e025      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	061b      	lsls	r3, r3, #24
 8006f42:	490b      	ldr	r1, [pc, #44]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	604b      	str	r3, [r1, #4]
 8006f48:	e01a      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f4a:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f56:	f7fa ff13 	bl	8001d80 <HAL_GetTick>
 8006f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f5e:	f7fa ff0f 	bl	8001d80 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d903      	bls.n	8006f74 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e2c4      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
 8006f70:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f74:	4ba4      	ldr	r3, [pc, #656]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ee      	bne.n	8006f5e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80a9 	beq.w	80070e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f8e:	4b9e      	ldr	r3, [pc, #632]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f98:	4b9b      	ldr	r3, [pc, #620]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d007      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x2cc>
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b18      	cmp	r3, #24
 8006fa8:	d13a      	bne.n	8007020 <HAL_RCC_OscConfig+0x338>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d135      	bne.n	8007020 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fb4:	4b94      	ldr	r3, [pc, #592]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <HAL_RCC_OscConfig+0x2e4>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	2b80      	cmp	r3, #128	; 0x80
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e296      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fcc:	f7fa ff06 	bl	8001ddc <HAL_GetREVID>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f241 0303 	movw	r3, #4099	; 0x1003
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d817      	bhi.n	800700a <HAL_RCC_OscConfig+0x322>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d108      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x30c>
 8006fe2:	4b89      	ldr	r3, [pc, #548]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fea:	4a87      	ldr	r2, [pc, #540]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ff2:	e075      	b.n	80070e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ff4:	4b84      	ldr	r3, [pc, #528]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	069b      	lsls	r3, r3, #26
 8007002:	4981      	ldr	r1, [pc, #516]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007004:	4313      	orrs	r3, r2
 8007006:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007008:	e06a      	b.n	80070e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800700a:	4b7f      	ldr	r3, [pc, #508]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	061b      	lsls	r3, r3, #24
 8007018:	497b      	ldr	r1, [pc, #492]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800701a:	4313      	orrs	r3, r2
 800701c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800701e:	e05f      	b.n	80070e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d042      	beq.n	80070ae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007028:	4b77      	ldr	r3, [pc, #476]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a76      	ldr	r2, [pc, #472]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800702e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fa fea4 	bl	8001d80 <HAL_GetTick>
 8007038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800703c:	f7fa fea0 	bl	8001d80 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e255      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800704e:	4b6e      	ldr	r3, [pc, #440]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800705a:	f7fa febf 	bl	8001ddc <HAL_GetREVID>
 800705e:	4602      	mov	r2, r0
 8007060:	f241 0303 	movw	r3, #4099	; 0x1003
 8007064:	429a      	cmp	r2, r3
 8007066:	d817      	bhi.n	8007098 <HAL_RCC_OscConfig+0x3b0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	2b20      	cmp	r3, #32
 800706e:	d108      	bne.n	8007082 <HAL_RCC_OscConfig+0x39a>
 8007070:	4b65      	ldr	r3, [pc, #404]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007078:	4a63      	ldr	r2, [pc, #396]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800707a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800707e:	6053      	str	r3, [r2, #4]
 8007080:	e02e      	b.n	80070e0 <HAL_RCC_OscConfig+0x3f8>
 8007082:	4b61      	ldr	r3, [pc, #388]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	069b      	lsls	r3, r3, #26
 8007090:	495d      	ldr	r1, [pc, #372]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007092:	4313      	orrs	r3, r2
 8007094:	604b      	str	r3, [r1, #4]
 8007096:	e023      	b.n	80070e0 <HAL_RCC_OscConfig+0x3f8>
 8007098:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	061b      	lsls	r3, r3, #24
 80070a6:	4958      	ldr	r1, [pc, #352]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60cb      	str	r3, [r1, #12]
 80070ac:	e018      	b.n	80070e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070ae:	4b56      	ldr	r3, [pc, #344]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a55      	ldr	r2, [pc, #340]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80070b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ba:	f7fa fe61 	bl	8001d80 <HAL_GetTick>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80070c2:	f7fa fe5d 	bl	8001d80 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e212      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070d4:	4b4c      	ldr	r3, [pc, #304]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f0      	bne.n	80070c2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d036      	beq.n	800715a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d019      	beq.n	8007128 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070f4:	4b44      	ldr	r3, [pc, #272]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80070f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f8:	4a43      	ldr	r2, [pc, #268]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7fa fe3e 	bl	8001d80 <HAL_GetTick>
 8007104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007108:	f7fa fe3a 	bl	8001d80 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e1ef      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800711a:	4b3b      	ldr	r3, [pc, #236]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800711c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCC_OscConfig+0x420>
 8007126:	e018      	b.n	800715a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007128:	4b37      	ldr	r3, [pc, #220]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800712a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712c:	4a36      	ldr	r2, [pc, #216]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007134:	f7fa fe24 	bl	8001d80 <HAL_GetTick>
 8007138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800713c:	f7fa fe20 	bl	8001d80 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e1d5      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800714e:	4b2e      	ldr	r3, [pc, #184]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d036      	beq.n	80071d4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d019      	beq.n	80071a2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007178:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800717a:	f7fa fe01 	bl	8001d80 <HAL_GetTick>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007182:	f7fa fdfd 	bl	8001d80 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e1b2      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007194:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0f0      	beq.n	8007182 <HAL_RCC_OscConfig+0x49a>
 80071a0:	e018      	b.n	80071d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071a2:	4b19      	ldr	r3, [pc, #100]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a18      	ldr	r2, [pc, #96]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80071a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071ae:	f7fa fde7 	bl	8001d80 <HAL_GetTick>
 80071b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071b6:	f7fa fde3 	bl	8001d80 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e198      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071c8:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <HAL_RCC_OscConfig+0x520>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f0      	bne.n	80071b6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8085 	beq.w	80072ec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <HAL_RCC_OscConfig+0x524>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a09      	ldr	r2, [pc, #36]	; (800720c <HAL_RCC_OscConfig+0x524>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ee:	f7fa fdc7 	bl	8001d80 <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071f4:	e00c      	b.n	8007210 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fa fdc3 	bl	8001d80 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b64      	cmp	r3, #100	; 0x64
 8007202:	d905      	bls.n	8007210 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e178      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
 8007208:	58024400 	.word	0x58024400
 800720c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007210:	4b96      	ldr	r3, [pc, #600]	; (800746c <HAL_RCC_OscConfig+0x784>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0ec      	beq.n	80071f6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d106      	bne.n	8007232 <HAL_RCC_OscConfig+0x54a>
 8007224:	4b92      	ldr	r3, [pc, #584]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	4a91      	ldr	r2, [pc, #580]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	6713      	str	r3, [r2, #112]	; 0x70
 8007230:	e02d      	b.n	800728e <HAL_RCC_OscConfig+0x5a6>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10c      	bne.n	8007254 <HAL_RCC_OscConfig+0x56c>
 800723a:	4b8d      	ldr	r3, [pc, #564]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	4a8c      	ldr	r2, [pc, #560]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	6713      	str	r3, [r2, #112]	; 0x70
 8007246:	4b8a      	ldr	r3, [pc, #552]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	4a89      	ldr	r2, [pc, #548]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800724c:	f023 0304 	bic.w	r3, r3, #4
 8007250:	6713      	str	r3, [r2, #112]	; 0x70
 8007252:	e01c      	b.n	800728e <HAL_RCC_OscConfig+0x5a6>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b05      	cmp	r3, #5
 800725a:	d10c      	bne.n	8007276 <HAL_RCC_OscConfig+0x58e>
 800725c:	4b84      	ldr	r3, [pc, #528]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	4a83      	ldr	r2, [pc, #524]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007262:	f043 0304 	orr.w	r3, r3, #4
 8007266:	6713      	str	r3, [r2, #112]	; 0x70
 8007268:	4b81      	ldr	r3, [pc, #516]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	4a80      	ldr	r2, [pc, #512]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6713      	str	r3, [r2, #112]	; 0x70
 8007274:	e00b      	b.n	800728e <HAL_RCC_OscConfig+0x5a6>
 8007276:	4b7e      	ldr	r3, [pc, #504]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	4a7d      	ldr	r2, [pc, #500]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	6713      	str	r3, [r2, #112]	; 0x70
 8007282:	4b7b      	ldr	r3, [pc, #492]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4a7a      	ldr	r2, [pc, #488]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d015      	beq.n	80072c2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007296:	f7fa fd73 	bl	8001d80 <HAL_GetTick>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800729c:	e00a      	b.n	80072b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fa fd6f 	bl	8001d80 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e122      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b4:	4b6e      	ldr	r3, [pc, #440]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0ee      	beq.n	800729e <HAL_RCC_OscConfig+0x5b6>
 80072c0:	e014      	b.n	80072ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c2:	f7fa fd5d 	bl	8001d80 <HAL_GetTick>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072c8:	e00a      	b.n	80072e0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ca:	f7fa fd59 	bl	8001d80 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d8:	4293      	cmp	r3, r2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e10c      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072e0:	4b63      	ldr	r3, [pc, #396]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1ee      	bne.n	80072ca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8101 	beq.w	80074f8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80072f6:	4b5e      	ldr	r3, [pc, #376]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072fe:	2b18      	cmp	r3, #24
 8007300:	f000 80bc 	beq.w	800747c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b02      	cmp	r3, #2
 800730a:	f040 8095 	bne.w	8007438 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730e:	4b58      	ldr	r3, [pc, #352]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a57      	ldr	r2, [pc, #348]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731a:	f7fa fd31 	bl	8001d80 <HAL_GetTick>
 800731e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007322:	f7fa fd2d 	bl	8001d80 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e0e2      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007334:	4b4e      	ldr	r3, [pc, #312]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1f0      	bne.n	8007322 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007340:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007344:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <HAL_RCC_OscConfig+0x78c>)
 8007346:	4013      	ands	r3, r2
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007350:	0112      	lsls	r2, r2, #4
 8007352:	430a      	orrs	r2, r1
 8007354:	4946      	ldr	r1, [pc, #280]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007356:	4313      	orrs	r3, r2
 8007358:	628b      	str	r3, [r1, #40]	; 0x28
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	3b01      	subs	r3, #1
 8007360:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	3b01      	subs	r3, #1
 800736a:	025b      	lsls	r3, r3, #9
 800736c:	b29b      	uxth	r3, r3
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	3b01      	subs	r3, #1
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	3b01      	subs	r3, #1
 8007384:	061b      	lsls	r3, r3, #24
 8007386:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800738a:	4939      	ldr	r1, [pc, #228]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800738c:	4313      	orrs	r3, r2
 800738e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007390:	4b37      	ldr	r3, [pc, #220]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	4a36      	ldr	r2, [pc, #216]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800739c:	4b34      	ldr	r3, [pc, #208]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a0:	4b35      	ldr	r3, [pc, #212]	; (8007478 <HAL_RCC_OscConfig+0x790>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073a8:	00d2      	lsls	r2, r2, #3
 80073aa:	4931      	ldr	r1, [pc, #196]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073b0:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	f023 020c 	bic.w	r2, r3, #12
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	492c      	ldr	r1, [pc, #176]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073c2:	4b2b      	ldr	r3, [pc, #172]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	f023 0202 	bic.w	r2, r3, #2
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	4928      	ldr	r1, [pc, #160]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073d4:	4b26      	ldr	r3, [pc, #152]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	4a25      	ldr	r2, [pc, #148]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e0:	4b23      	ldr	r3, [pc, #140]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	4a22      	ldr	r2, [pc, #136]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073ec:	4b20      	ldr	r3, [pc, #128]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80073f8:	4b1d      	ldr	r3, [pc, #116]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a1c      	ldr	r2, [pc, #112]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007404:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a19      	ldr	r2, [pc, #100]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800740a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800740e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fa fcb6 	bl	8001d80 <HAL_GetTick>
 8007414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007418:	f7fa fcb2 	bl	8001d80 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e067      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0x730>
 8007436:	e05f      	b.n	80074f8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 800743e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007444:	f7fa fc9c 	bl	8001d80 <HAL_GetTick>
 8007448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800744c:	f7fa fc98 	bl	8001d80 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e04d      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_RCC_OscConfig+0x788>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0x764>
 800746a:	e045      	b.n	80074f8 <HAL_RCC_OscConfig+0x810>
 800746c:	58024800 	.word	0x58024800
 8007470:	58024400 	.word	0x58024400
 8007474:	fffffc0c 	.word	0xfffffc0c
 8007478:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800747c:	4b21      	ldr	r3, [pc, #132]	; (8007504 <HAL_RCC_OscConfig+0x81c>)
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_RCC_OscConfig+0x81c>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b01      	cmp	r3, #1
 800748e:	d031      	beq.n	80074f4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f003 0203 	and.w	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d12a      	bne.n	80074f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	091b      	lsrs	r3, r3, #4
 80074a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d122      	bne.n	80074f4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d11a      	bne.n	80074f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	0a5b      	lsrs	r3, r3, #9
 80074c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d111      	bne.n	80074f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074de:	429a      	cmp	r2, r3
 80074e0:	d108      	bne.n	80074f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d001      	beq.n	80074f8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3730      	adds	r7, #48	; 0x30
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400

08007508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e19c      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800751c:	4b8a      	ldr	r3, [pc, #552]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d910      	bls.n	800754c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752a:	4b87      	ldr	r3, [pc, #540]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 020f 	bic.w	r2, r3, #15
 8007532:	4985      	ldr	r1, [pc, #532]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800753a:	4b83      	ldr	r3, [pc, #524]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d001      	beq.n	800754c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e184      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d010      	beq.n	800757a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	4b7b      	ldr	r3, [pc, #492]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007564:	429a      	cmp	r2, r3
 8007566:	d908      	bls.n	800757a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007568:	4b78      	ldr	r3, [pc, #480]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	4975      	ldr	r1, [pc, #468]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007576:	4313      	orrs	r3, r2
 8007578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d010      	beq.n	80075a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	4b70      	ldr	r3, [pc, #448]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007592:	429a      	cmp	r2, r3
 8007594:	d908      	bls.n	80075a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007596:	4b6d      	ldr	r3, [pc, #436]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	496a      	ldr	r1, [pc, #424]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	4b64      	ldr	r3, [pc, #400]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d908      	bls.n	80075d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075c4:	4b61      	ldr	r3, [pc, #388]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	495e      	ldr	r1, [pc, #376]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69da      	ldr	r2, [r3, #28]
 80075e6:	4b59      	ldr	r3, [pc, #356]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d908      	bls.n	8007604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075f2:	4b56      	ldr	r3, [pc, #344]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	4953      	ldr	r1, [pc, #332]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007600:	4313      	orrs	r3, r2
 8007602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	4b4d      	ldr	r3, [pc, #308]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	429a      	cmp	r2, r3
 800761e:	d908      	bls.n	8007632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007620:	4b4a      	ldr	r3, [pc, #296]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f023 020f 	bic.w	r2, r3, #15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	4947      	ldr	r1, [pc, #284]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800762e:	4313      	orrs	r3, r2
 8007630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d055      	beq.n	80076ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800763e:	4b43      	ldr	r3, [pc, #268]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	4940      	ldr	r1, [pc, #256]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800764c:	4313      	orrs	r3, r2
 800764e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d107      	bne.n	8007668 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007658:	4b3c      	ldr	r3, [pc, #240]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d121      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e0f6      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d107      	bne.n	8007680 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007670:	4b36      	ldr	r3, [pc, #216]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d115      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e0ea      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d107      	bne.n	8007698 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007688:	4b30      	ldr	r3, [pc, #192]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0de      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007698:	4b2c      	ldr	r3, [pc, #176]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0d6      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076a8:	4b28      	ldr	r3, [pc, #160]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f023 0207 	bic.w	r2, r3, #7
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	4925      	ldr	r1, [pc, #148]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ba:	f7fa fb61 	bl	8001d80 <HAL_GetTick>
 80076be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c0:	e00a      	b.n	80076d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c2:	f7fa fb5d 	bl	8001d80 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d901      	bls.n	80076d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e0be      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d8:	4b1c      	ldr	r3, [pc, #112]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d1eb      	bne.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	429a      	cmp	r2, r3
 8007704:	d208      	bcs.n	8007718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f023 020f 	bic.w	r2, r3, #15
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	490e      	ldr	r1, [pc, #56]	; (800774c <HAL_RCC_ClockConfig+0x244>)
 8007714:	4313      	orrs	r3, r2
 8007716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d214      	bcs.n	8007750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b08      	ldr	r3, [pc, #32]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f023 020f 	bic.w	r2, r3, #15
 800772e:	4906      	ldr	r1, [pc, #24]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	4313      	orrs	r3, r2
 8007734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007736:	4b04      	ldr	r3, [pc, #16]	; (8007748 <HAL_RCC_ClockConfig+0x240>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d005      	beq.n	8007750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e086      	b.n	8007856 <HAL_RCC_ClockConfig+0x34e>
 8007748:	52002000 	.word	0x52002000
 800774c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d010      	beq.n	800777e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	4b3f      	ldr	r3, [pc, #252]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007768:	429a      	cmp	r2, r3
 800776a:	d208      	bcs.n	800777e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800776c:	4b3c      	ldr	r3, [pc, #240]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	4939      	ldr	r1, [pc, #228]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 800777a:	4313      	orrs	r3, r2
 800777c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d010      	beq.n	80077ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	4b34      	ldr	r3, [pc, #208]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007796:	429a      	cmp	r2, r3
 8007798:	d208      	bcs.n	80077ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800779a:	4b31      	ldr	r3, [pc, #196]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	492e      	ldr	r1, [pc, #184]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d010      	beq.n	80077da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	4b28      	ldr	r3, [pc, #160]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d208      	bcs.n	80077da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077c8:	4b25      	ldr	r3, [pc, #148]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	4922      	ldr	r1, [pc, #136]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d010      	beq.n	8007808 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69da      	ldr	r2, [r3, #28]
 80077ea:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d208      	bcs.n	8007808 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077f6:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	4917      	ldr	r1, [pc, #92]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 8007804:	4313      	orrs	r3, r2
 8007806:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007808:	f000 f834 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 800780c:	4601      	mov	r1, r0
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	0a1b      	lsrs	r3, r3, #8
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	4a12      	ldr	r2, [pc, #72]	; (8007864 <HAL_RCC_ClockConfig+0x35c>)
 800781a:	5cd3      	ldrb	r3, [r2, r3]
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	fa21 f303 	lsr.w	r3, r1, r3
 8007824:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007826:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <HAL_RCC_ClockConfig+0x358>)
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	4a0d      	ldr	r2, [pc, #52]	; (8007864 <HAL_RCC_ClockConfig+0x35c>)
 8007830:	5cd3      	ldrb	r3, [r2, r3]
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
 800783c:	4a0a      	ldr	r2, [pc, #40]	; (8007868 <HAL_RCC_ClockConfig+0x360>)
 800783e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <HAL_RCC_ClockConfig+0x364>)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007846:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <HAL_RCC_ClockConfig+0x368>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f7f9 fd80 	bl	8001350 <HAL_InitTick>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
 8007864:	08015134 	.word	0x08015134
 8007868:	24000004 	.word	0x24000004
 800786c:	24000000 	.word	0x24000000
 8007870:	24000008 	.word	0x24000008

08007874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	; 0x24
 8007878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800787a:	4baf      	ldr	r3, [pc, #700]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007882:	2b18      	cmp	r3, #24
 8007884:	f200 814e 	bhi.w	8007b24 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007888:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078f5 	.word	0x080078f5
 8007894:	08007b25 	.word	0x08007b25
 8007898:	08007b25 	.word	0x08007b25
 800789c:	08007b25 	.word	0x08007b25
 80078a0:	08007b25 	.word	0x08007b25
 80078a4:	08007b25 	.word	0x08007b25
 80078a8:	08007b25 	.word	0x08007b25
 80078ac:	08007b25 	.word	0x08007b25
 80078b0:	0800791b 	.word	0x0800791b
 80078b4:	08007b25 	.word	0x08007b25
 80078b8:	08007b25 	.word	0x08007b25
 80078bc:	08007b25 	.word	0x08007b25
 80078c0:	08007b25 	.word	0x08007b25
 80078c4:	08007b25 	.word	0x08007b25
 80078c8:	08007b25 	.word	0x08007b25
 80078cc:	08007b25 	.word	0x08007b25
 80078d0:	08007921 	.word	0x08007921
 80078d4:	08007b25 	.word	0x08007b25
 80078d8:	08007b25 	.word	0x08007b25
 80078dc:	08007b25 	.word	0x08007b25
 80078e0:	08007b25 	.word	0x08007b25
 80078e4:	08007b25 	.word	0x08007b25
 80078e8:	08007b25 	.word	0x08007b25
 80078ec:	08007b25 	.word	0x08007b25
 80078f0:	08007927 	.word	0x08007927
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f4:	4b90      	ldr	r3, [pc, #576]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007900:	4b8d      	ldr	r3, [pc, #564]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	08db      	lsrs	r3, r3, #3
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	4a8c      	ldr	r2, [pc, #560]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
 8007910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007912:	e10a      	b.n	8007b2a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007914:	4b89      	ldr	r3, [pc, #548]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007916:	61bb      	str	r3, [r7, #24]
    break;
 8007918:	e107      	b.n	8007b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800791a:	4b89      	ldr	r3, [pc, #548]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800791c:	61bb      	str	r3, [r7, #24]
    break;
 800791e:	e104      	b.n	8007b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007920:	4b88      	ldr	r3, [pc, #544]	; (8007b44 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007922:	61bb      	str	r3, [r7, #24]
    break;
 8007924:	e101      	b.n	8007b2a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007926:	4b84      	ldr	r3, [pc, #528]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007930:	4b81      	ldr	r3, [pc, #516]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800793a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800793c:	4b7e      	ldr	r3, [pc, #504]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007946:	4b7c      	ldr	r3, [pc, #496]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	08db      	lsrs	r3, r3, #3
 800794c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	fb02 f303 	mul.w	r3, r2, r3
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80da 	beq.w	8007b1e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d05a      	beq.n	8007a26 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007970:	2b01      	cmp	r3, #1
 8007972:	d302      	bcc.n	800797a <HAL_RCC_GetSysClockFreq+0x106>
 8007974:	2b02      	cmp	r3, #2
 8007976:	d078      	beq.n	8007a6a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007978:	e099      	b.n	8007aae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800797a:	4b6f      	ldr	r3, [pc, #444]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02d      	beq.n	80079e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007986:	4b6c      	ldr	r3, [pc, #432]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	08db      	lsrs	r3, r3, #3
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	4a6a      	ldr	r2, [pc, #424]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007992:	fa22 f303 	lsr.w	r3, r2, r3
 8007996:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b0:	4b61      	ldr	r3, [pc, #388]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b8:	ee07 3a90 	vmov	s15, r3
 80079bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80079c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 80079c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80079e0:	e087      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007b4c <HAL_RCC_GetSysClockFreq+0x2d8>
 80079f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f4:	4b50      	ldr	r3, [pc, #320]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a08:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a24:	e065      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a30:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007b50 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a38:	4b3f      	ldr	r3, [pc, #252]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a68:	e043      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a74:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007b54 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7c:	4b2e      	ldr	r3, [pc, #184]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a90:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aac:	e021      	b.n	8007af2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007b50 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ad4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007af0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007af2:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afc:	3301      	adds	r3, #1
 8007afe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b16:	ee17 3a90 	vmov	r3, s15
 8007b1a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007b1c:	e005      	b.n	8007b2a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61bb      	str	r3, [r7, #24]
    break;
 8007b22:	e002      	b.n	8007b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007b26:	61bb      	str	r3, [r7, #24]
    break;
 8007b28:	bf00      	nop
  }

  return sysclockfreq;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3724      	adds	r7, #36	; 0x24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	03d09000 	.word	0x03d09000
 8007b40:	003d0900 	.word	0x003d0900
 8007b44:	00f42400 	.word	0x00f42400
 8007b48:	46000000 	.word	0x46000000
 8007b4c:	4c742400 	.word	0x4c742400
 8007b50:	4a742400 	.word	0x4a742400
 8007b54:	4b742400 	.word	0x4b742400

08007b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b5e:	f7ff fe89 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 8007b62:	4601      	mov	r1, r0
 8007b64:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	4a0f      	ldr	r2, [pc, #60]	; (8007bac <HAL_RCC_GetHCLKFreq+0x54>)
 8007b70:	5cd3      	ldrb	r3, [r2, r3]
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	fa21 f303 	lsr.w	r3, r1, r3
 8007b7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	4a09      	ldr	r2, [pc, #36]	; (8007bac <HAL_RCC_GetHCLKFreq+0x54>)
 8007b86:	5cd3      	ldrb	r3, [r2, r3]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	4a07      	ldr	r2, [pc, #28]	; (8007bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b96:	4a07      	ldr	r2, [pc, #28]	; (8007bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b9c:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	08015134 	.word	0x08015134
 8007bb0:	24000004 	.word	0x24000004
 8007bb4:	24000000 	.word	0x24000000

08007bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007bbc:	f7ff ffcc 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	091b      	lsrs	r3, r3, #4
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007bce:	5cd3      	ldrb	r3, [r2, r3]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	08015134 	.word	0x08015134

08007be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007be8:	f7ff ffb6 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8007bec:	4601      	mov	r1, r0
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bfa:	5cd3      	ldrb	r3, [r2, r3]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	08015134 	.word	0x08015134

08007c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	223f      	movs	r2, #63	; 0x3f
 8007c1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c20:	4b1a      	ldr	r3, [pc, #104]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f003 0207 	and.w	r2, r3, #7
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007c2c:	4b17      	ldr	r3, [pc, #92]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f003 020f 	and.w	r2, r3, #15
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c44:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c50:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c68:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <HAL_RCC_GetClockConfig+0x7c>)
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <HAL_RCC_GetClockConfig+0x80>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 020f 	and.w	r2, r3, #15
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	601a      	str	r2, [r3, #0]
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	52002000 	.word	0x52002000

08007c94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d03d      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb8:	d013      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cbe:	d802      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007cc4:	e01f      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cca:	d013      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007ccc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cd0:	d01c      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007cd2:	e018      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd4:	4baf      	ldr	r3, [pc, #700]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	4aae      	ldr	r2, [pc, #696]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ce0:	e015      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 fd33 	bl	8009754 <RCCEx_PLL2_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cf2:	e00c      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3324      	adds	r3, #36	; 0x24
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fddc 	bl	80098b8 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0a:	e000      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d14:	4b9f      	ldr	r3, [pc, #636]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d20:	499c      	ldr	r1, [pc, #624]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	650b      	str	r3, [r1, #80]	; 0x50
 8007d26:	e001      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d03d      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d826      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007d40:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d46:	bf00      	nop
 8007d48:	08007d5d 	.word	0x08007d5d
 8007d4c:	08007d6b 	.word	0x08007d6b
 8007d50:	08007d7d 	.word	0x08007d7d
 8007d54:	08007d95 	.word	0x08007d95
 8007d58:	08007d95 	.word	0x08007d95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5c:	4b8d      	ldr	r3, [pc, #564]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	4a8c      	ldr	r2, [pc, #560]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d68:	e015      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 fcef 	bl	8009754 <RCCEx_PLL2_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d7a:	e00c      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3324      	adds	r3, #36	; 0x24
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fd98 	bl	80098b8 <RCCEx_PLL3_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
      break;
 8007d92:	e000      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d9c:	4b7d      	ldr	r3, [pc, #500]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	f023 0207 	bic.w	r2, r3, #7
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da8:	497a      	ldr	r1, [pc, #488]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	650b      	str	r3, [r1, #80]	; 0x50
 8007dae:	e001      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d03e      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc4:	2b80      	cmp	r3, #128	; 0x80
 8007dc6:	d01c      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007dc8:	2b80      	cmp	r3, #128	; 0x80
 8007dca:	d804      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d00d      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007dd4:	e01e      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8007dd8:	d01f      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dde:	d01e      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007de0:	e018      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de2:	4b6c      	ldr	r3, [pc, #432]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	4a6b      	ldr	r2, [pc, #428]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dee:	e017      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 fcac 	bl	8009754 <RCCEx_PLL2_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e00:	e00e      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 fd55 	bl	80098b8 <RCCEx_PLL3_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e12:	e005      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
      break;
 8007e18:	e002      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e26:	4b5b      	ldr	r3, [pc, #364]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	4958      	ldr	r1, [pc, #352]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	650b      	str	r3, [r1, #80]	; 0x50
 8007e38:	e001      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d044      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e54:	d01f      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5a:	d805      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e64:	d00e      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007e66:	e01f      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007e68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e6c:	d01f      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007e6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e72:	d01e      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007e74:	e018      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e76:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7a:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e82:	e017      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 fc62 	bl	8009754 <RCCEx_PLL2_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e94:	e00e      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fd0b 	bl	80098b8 <RCCEx_PLL3_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ea6:	e005      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007eae:	bf00      	nop
 8007eb0:	e000      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007eba:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ec8:	4932      	ldr	r1, [pc, #200]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	658b      	str	r3, [r1, #88]	; 0x58
 8007ece:	e001      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d044      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eea:	d01f      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ef0:	d805      	bhi.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007efa:	d00e      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007efc:	e01f      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f02:	d01f      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f08:	d01e      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007f0a:	e018      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0c:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a20      	ldr	r2, [pc, #128]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f18:	e017      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fc17 	bl	8009754 <RCCEx_PLL2_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f2a:	e00e      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3324      	adds	r3, #36	; 0x24
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fcc0 	bl	80098b8 <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f3c:	e005      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
      break;
 8007f42:	e002      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f50:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f5e:	490d      	ldr	r1, [pc, #52]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	658b      	str	r3, [r1, #88]	; 0x58
 8007f64:	e001      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d035      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d00c      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007f7e:	2b10      	cmp	r3, #16
 8007f80:	d802      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01b      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007f86:	e017      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d00c      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007f8c:	2b30      	cmp	r3, #48	; 0x30
 8007f8e:	d018      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007f90:	e012      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007f92:	bf00      	nop
 8007f94:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f98:	4baf      	ldr	r3, [pc, #700]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	4aae      	ldr	r2, [pc, #696]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fa4:	e00e      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	2102      	movs	r1, #2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fbd1 	bl	8009754 <RCCEx_PLL2_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fb6:	e005      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbc:	e002      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fca:	4ba3      	ldr	r3, [pc, #652]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd6:	49a0      	ldr	r1, [pc, #640]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fdc:	e001      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d042      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ff6:	d01f      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffc:	d805      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008006:	d00e      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008008:	e01f      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800800a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800800e:	d01f      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008014:	d01e      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008016:	e018      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008018:	4b8f      	ldr	r3, [pc, #572]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	4a8e      	ldr	r2, [pc, #568]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800801e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008024:	e017      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3304      	adds	r3, #4
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f001 fb91 	bl	8009754 <RCCEx_PLL2_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008036:	e00e      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3324      	adds	r3, #36	; 0x24
 800803c:	2100      	movs	r1, #0
 800803e:	4618      	mov	r0, r3
 8008040:	f001 fc3a 	bl	80098b8 <RCCEx_PLL3_Config>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008048:	e005      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
      break;
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800805c:	4b7e      	ldr	r3, [pc, #504]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800805e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008060:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008068:	497b      	ldr	r1, [pc, #492]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800806a:	4313      	orrs	r3, r2
 800806c:	650b      	str	r3, [r1, #80]	; 0x50
 800806e:	e001      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d042      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008088:	d01b      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800808a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808e:	d805      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d022      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800809a:	e01b      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800809c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080a0:	d01d      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80080a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080a6:	d01c      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80080a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ac:	d01b      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80080ae:	e011      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	2101      	movs	r1, #1
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 fb4c 	bl	8009754 <RCCEx_PLL2_Config>
 80080bc:	4603      	mov	r3, r0
 80080be:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080c0:	e012      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3324      	adds	r3, #36	; 0x24
 80080c6:	2101      	movs	r1, #1
 80080c8:	4618      	mov	r0, r3
 80080ca:	f001 fbf5 	bl	80098b8 <RCCEx_PLL3_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080d2:	e009      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
      break;
 80080d8:	e006      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80080da:	bf00      	nop
 80080dc:	e004      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80080de:	bf00      	nop
 80080e0:	e002      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80080e2:	bf00      	nop
 80080e4:	e000      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80080e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080ee:	4b5a      	ldr	r3, [pc, #360]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080fa:	4957      	ldr	r1, [pc, #348]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	650b      	str	r3, [r1, #80]	; 0x50
 8008100:	e001      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d044      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811c:	d01b      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800811e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008122:	d805      	bhi.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d022      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800812c:	d00a      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800812e:	e01b      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008134:	d01d      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800813a:	d01c      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800813c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008140:	d01b      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008142:	e011      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3304      	adds	r3, #4
 8008148:	2101      	movs	r1, #1
 800814a:	4618      	mov	r0, r3
 800814c:	f001 fb02 	bl	8009754 <RCCEx_PLL2_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008154:	e012      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3324      	adds	r3, #36	; 0x24
 800815a:	2101      	movs	r1, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fbab 	bl	80098b8 <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008166:	e009      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
      break;
 800816c:	e006      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800816e:	bf00      	nop
 8008170:	e004      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008172:	bf00      	nop
 8008174:	e002      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008176:	bf00      	nop
 8008178:	e000      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800817a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008182:	4b35      	ldr	r3, [pc, #212]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008190:	4931      	ldr	r1, [pc, #196]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008192:	4313      	orrs	r3, r2
 8008194:	658b      	str	r3, [r1, #88]	; 0x58
 8008196:	e001      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d02d      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b0:	d005      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80081b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b6:	d009      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d013      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80081bc:	e00f      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081be:	4b26      	ldr	r3, [pc, #152]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	4a25      	ldr	r2, [pc, #148]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081ca:	e00c      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3304      	adds	r3, #4
 80081d0:	2101      	movs	r1, #1
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fabe 	bl	8009754 <RCCEx_PLL2_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081dc:	e003      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
      break;
 80081e2:	e000      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80081e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081ec:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f8:	4917      	ldr	r1, [pc, #92]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	650b      	str	r3, [r1, #80]	; 0x50
 80081fe:	e001      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d035      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008214:	2b03      	cmp	r3, #3
 8008216:	d81b      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	0800825d 	.word	0x0800825d
 8008224:	08008231 	.word	0x08008231
 8008228:	0800823f 	.word	0x0800823f
 800822c:	0800825d 	.word	0x0800825d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a08      	ldr	r2, [pc, #32]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800823c:	e00f      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3304      	adds	r3, #4
 8008242:	2102      	movs	r1, #2
 8008244:	4618      	mov	r0, r3
 8008246:	f001 fa85 	bl	8009754 <RCCEx_PLL2_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800824e:	e006      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]
      break;
 8008254:	e003      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008256:	bf00      	nop
 8008258:	58024400 	.word	0x58024400
      break;
 800825c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008264:	4bba      	ldr	r3, [pc, #744]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008268:	f023 0203 	bic.w	r2, r3, #3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008270:	49b7      	ldr	r1, [pc, #732]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008272:	4313      	orrs	r3, r2
 8008274:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008276:	e001      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8086 	beq.w	8008396 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800828a:	4bb2      	ldr	r3, [pc, #712]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4ab1      	ldr	r2, [pc, #708]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008294:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008296:	f7f9 fd73 	bl	8001d80 <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800829c:	e009      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800829e:	f7f9 fd6f 	bl	8001d80 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b64      	cmp	r3, #100	; 0x64
 80082aa:	d902      	bls.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	75fb      	strb	r3, [r7, #23]
        break;
 80082b0:	e005      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082b2:	4ba8      	ldr	r3, [pc, #672]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0ef      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d166      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082c4:	4ba2      	ldr	r3, [pc, #648]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ce:	4053      	eors	r3, r2
 80082d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d013      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082d8:	4b9d      	ldr	r3, [pc, #628]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082e2:	4b9b      	ldr	r3, [pc, #620]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	4a9a      	ldr	r2, [pc, #616]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082ee:	4b98      	ldr	r3, [pc, #608]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	4a97      	ldr	r2, [pc, #604]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80082fa:	4a95      	ldr	r2, [pc, #596]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830a:	d115      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830c:	f7f9 fd38 	bl	8001d80 <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008312:	e00b      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008314:	f7f9 fd34 	bl	8001d80 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008322:	4293      	cmp	r3, r2
 8008324:	d902      	bls.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	75fb      	strb	r3, [r7, #23]
            break;
 800832a:	e005      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800832c:	4b88      	ldr	r3, [pc, #544]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0ed      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d126      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800834c:	d10d      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800834e:	4b80      	ldr	r3, [pc, #512]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800835c:	0919      	lsrs	r1, r3, #4
 800835e:	4b7e      	ldr	r3, [pc, #504]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008360:	400b      	ands	r3, r1
 8008362:	497b      	ldr	r1, [pc, #492]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008364:	4313      	orrs	r3, r2
 8008366:	610b      	str	r3, [r1, #16]
 8008368:	e005      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800836a:	4b79      	ldr	r3, [pc, #484]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	4a78      	ldr	r2, [pc, #480]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008370:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008374:	6113      	str	r3, [r2, #16]
 8008376:	4b76      	ldr	r3, [pc, #472]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008384:	4972      	ldr	r1, [pc, #456]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008386:	4313      	orrs	r3, r2
 8008388:	670b      	str	r3, [r1, #112]	; 0x70
 800838a:	e004      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	75bb      	strb	r3, [r7, #22]
 8008390:	e001      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d07d      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a6:	2b28      	cmp	r3, #40	; 0x28
 80083a8:	d866      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80083aa:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	0800847f 	.word	0x0800847f
 80083b4:	08008479 	.word	0x08008479
 80083b8:	08008479 	.word	0x08008479
 80083bc:	08008479 	.word	0x08008479
 80083c0:	08008479 	.word	0x08008479
 80083c4:	08008479 	.word	0x08008479
 80083c8:	08008479 	.word	0x08008479
 80083cc:	08008479 	.word	0x08008479
 80083d0:	08008455 	.word	0x08008455
 80083d4:	08008479 	.word	0x08008479
 80083d8:	08008479 	.word	0x08008479
 80083dc:	08008479 	.word	0x08008479
 80083e0:	08008479 	.word	0x08008479
 80083e4:	08008479 	.word	0x08008479
 80083e8:	08008479 	.word	0x08008479
 80083ec:	08008479 	.word	0x08008479
 80083f0:	08008467 	.word	0x08008467
 80083f4:	08008479 	.word	0x08008479
 80083f8:	08008479 	.word	0x08008479
 80083fc:	08008479 	.word	0x08008479
 8008400:	08008479 	.word	0x08008479
 8008404:	08008479 	.word	0x08008479
 8008408:	08008479 	.word	0x08008479
 800840c:	08008479 	.word	0x08008479
 8008410:	0800847f 	.word	0x0800847f
 8008414:	08008479 	.word	0x08008479
 8008418:	08008479 	.word	0x08008479
 800841c:	08008479 	.word	0x08008479
 8008420:	08008479 	.word	0x08008479
 8008424:	08008479 	.word	0x08008479
 8008428:	08008479 	.word	0x08008479
 800842c:	08008479 	.word	0x08008479
 8008430:	0800847f 	.word	0x0800847f
 8008434:	08008479 	.word	0x08008479
 8008438:	08008479 	.word	0x08008479
 800843c:	08008479 	.word	0x08008479
 8008440:	08008479 	.word	0x08008479
 8008444:	08008479 	.word	0x08008479
 8008448:	08008479 	.word	0x08008479
 800844c:	08008479 	.word	0x08008479
 8008450:	0800847f 	.word	0x0800847f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	2101      	movs	r1, #1
 800845a:	4618      	mov	r0, r3
 800845c:	f001 f97a 	bl	8009754 <RCCEx_PLL2_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008464:	e00c      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3324      	adds	r3, #36	; 0x24
 800846a:	2101      	movs	r1, #1
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fa23 	bl	80098b8 <RCCEx_PLL3_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008476:	e003      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
      break;
 800847c:	e000      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800847e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008486:	4b32      	ldr	r3, [pc, #200]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008492:	492f      	ldr	r1, [pc, #188]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008494:	4313      	orrs	r3, r2
 8008496:	654b      	str	r3, [r1, #84]	; 0x54
 8008498:	e001      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d037      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d820      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084fb 	.word	0x080084fb
 80084bc:	080084d1 	.word	0x080084d1
 80084c0:	080084e3 	.word	0x080084e3
 80084c4:	080084fb 	.word	0x080084fb
 80084c8:	080084fb 	.word	0x080084fb
 80084cc:	080084fb 	.word	0x080084fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	2101      	movs	r1, #1
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f93c 	bl	8009754 <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80084e0:	e00c      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3324      	adds	r3, #36	; 0x24
 80084e6:	2101      	movs	r1, #1
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f9e5 	bl	80098b8 <RCCEx_PLL3_Config>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80084f2:	e003      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	75fb      	strb	r3, [r7, #23]
      break;
 80084f8:	e000      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80084fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008506:	f023 0207 	bic.w	r2, r3, #7
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800850e:	4910      	ldr	r1, [pc, #64]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008510:	4313      	orrs	r3, r2
 8008512:	654b      	str	r3, [r1, #84]	; 0x54
 8008514:	e001      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d040      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852c:	2b05      	cmp	r3, #5
 800852e:	d827      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008530:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	08008587 	.word	0x08008587
 800853c:	0800855d 	.word	0x0800855d
 8008540:	0800856f 	.word	0x0800856f
 8008544:	08008587 	.word	0x08008587
 8008548:	08008587 	.word	0x08008587
 800854c:	08008587 	.word	0x08008587
 8008550:	58024400 	.word	0x58024400
 8008554:	58024800 	.word	0x58024800
 8008558:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3304      	adds	r3, #4
 8008560:	2101      	movs	r1, #1
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f8f6 	bl	8009754 <RCCEx_PLL2_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800856c:	e00c      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3324      	adds	r3, #36	; 0x24
 8008572:	2101      	movs	r1, #1
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f99f 	bl	80098b8 <RCCEx_PLL3_Config>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800857e:	e003      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
      break;
 8008584:	e000      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800858e:	4bb2      	ldr	r3, [pc, #712]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	f023 0207 	bic.w	r2, r3, #7
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859c:	49ae      	ldr	r1, [pc, #696]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	658b      	str	r3, [r1, #88]	; 0x58
 80085a2:	e001      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d044      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085be:	d01b      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80085c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c4:	d805      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d022      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80085ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ce:	d00a      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80085d0:	e01b      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d6:	d01d      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80085d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085dc:	d01c      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80085de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085e2:	d01b      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80085e4:	e011      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 f8b1 	bl	8009754 <RCCEx_PLL2_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80085f6:	e012      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3324      	adds	r3, #36	; 0x24
 80085fc:	2102      	movs	r1, #2
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 f95a 	bl	80098b8 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008608:	e009      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
      break;
 800860e:	e006      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008610:	bf00      	nop
 8008612:	e004      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008614:	bf00      	nop
 8008616:	e002      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008618:	bf00      	nop
 800861a:	e000      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800861c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008624:	4b8c      	ldr	r3, [pc, #560]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008628:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008632:	4989      	ldr	r1, [pc, #548]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008634:	4313      	orrs	r3, r2
 8008636:	654b      	str	r3, [r1, #84]	; 0x54
 8008638:	e001      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d044      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008654:	d01b      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8008656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865a:	d805      	bhi.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d022      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008664:	d00a      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008666:	e01b      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866c:	d01d      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800866e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008672:	d01c      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008678:	d01b      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800867a:	e011      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3304      	adds	r3, #4
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f001 f866 	bl	8009754 <RCCEx_PLL2_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800868c:	e012      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3324      	adds	r3, #36	; 0x24
 8008692:	2102      	movs	r1, #2
 8008694:	4618      	mov	r0, r3
 8008696:	f001 f90f 	bl	80098b8 <RCCEx_PLL3_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800869e:	e009      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]
      break;
 80086a4:	e006      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086a6:	bf00      	nop
 80086a8:	e004      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086aa:	bf00      	nop
 80086ac:	e002      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086ae:	bf00      	nop
 80086b0:	e000      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10a      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086ba:	4b67      	ldr	r3, [pc, #412]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086c8:	4963      	ldr	r1, [pc, #396]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	658b      	str	r3, [r1, #88]	; 0x58
 80086ce:	e001      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d044      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ea:	d01b      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80086ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f0:	d805      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d022      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80086f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fa:	d00a      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086fc:	e01b      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80086fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008702:	d01d      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008704:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008708:	d01c      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800870a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800870e:	d01b      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008710:	e011      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f81b 	bl	8009754 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008722:	e012      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	2102      	movs	r1, #2
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f8c4 	bl	80098b8 <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008734:	e009      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	e006      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800873c:	bf00      	nop
 800873e:	e004      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008740:	bf00      	nop
 8008742:	e002      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008744:	bf00      	nop
 8008746:	e000      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008750:	4b41      	ldr	r3, [pc, #260]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008754:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800875e:	493e      	ldr	r1, [pc, #248]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008760:	4313      	orrs	r3, r2
 8008762:	658b      	str	r3, [r1, #88]	; 0x58
 8008764:	e001      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01a      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008780:	d10a      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3324      	adds	r3, #36	; 0x24
 8008786:	2102      	movs	r1, #2
 8008788:	4618      	mov	r0, r3
 800878a:	f001 f895 	bl	80098b8 <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008798:	4b2f      	ldr	r3, [pc, #188]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800879a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a6:	492c      	ldr	r1, [pc, #176]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01a      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c2:	d10a      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3324      	adds	r3, #36	; 0x24
 80087c8:	2102      	movs	r1, #2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 f874 	bl	80098b8 <RCCEx_PLL3_Config>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087da:	4b1f      	ldr	r3, [pc, #124]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087e8:	491b      	ldr	r1, [pc, #108]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d032      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008804:	d00d      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800880a:	d016      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d111      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3304      	adds	r3, #4
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f000 ff9c 	bl	8009754 <RCCEx_PLL2_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008820:	e00c      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3324      	adds	r3, #36	; 0x24
 8008826:	2102      	movs	r1, #2
 8008828:	4618      	mov	r0, r3
 800882a:	f001 f845 	bl	80098b8 <RCCEx_PLL3_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008832:	e003      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
      break;
 8008838:	e000      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800883a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10c      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008846:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008850:	4901      	ldr	r1, [pc, #4]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008852:	4313      	orrs	r3, r2
 8008854:	658b      	str	r3, [r1, #88]	; 0x58
 8008856:	e003      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d02f      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008876:	d00c      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008878:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800887c:	d015      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800887e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008882:	d10f      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008884:	4b79      	ldr	r3, [pc, #484]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a78      	ldr	r2, [pc, #480]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800888a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008890:	e00c      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3324      	adds	r3, #36	; 0x24
 8008896:	2101      	movs	r1, #1
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f80d 	bl	80098b8 <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80088a2:	e003      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
      break;
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80088aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088b2:	4b6e      	ldr	r3, [pc, #440]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	496a      	ldr	r1, [pc, #424]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	654b      	str	r3, [r1, #84]	; 0x54
 80088c6:	e001      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d029      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80088e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e4:	d007      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80088e6:	e00f      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e8:	4b60      	ldr	r3, [pc, #384]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	4a5f      	ldr	r2, [pc, #380]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80088f4:	e00b      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3304      	adds	r3, #4
 80088fa:	2102      	movs	r1, #2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 ff29 	bl	8009754 <RCCEx_PLL2_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008906:	e002      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]
      break;
 800890c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008914:	4b55      	ldr	r3, [pc, #340]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008920:	4952      	ldr	r1, [pc, #328]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008922:	4313      	orrs	r3, r2
 8008924:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008926:	e001      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3324      	adds	r3, #36	; 0x24
 800893c:	2102      	movs	r1, #2
 800893e:	4618      	mov	r0, r3
 8008940:	f000 ffba 	bl	80098b8 <RCCEx_PLL3_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d02f      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800895e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008962:	d00c      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008968:	d802      	bhi.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d011      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800896e:	e00d      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008974:	d00f      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800897a:	d00e      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800897c:	e006      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800897e:	4b3b      	ldr	r3, [pc, #236]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	4a3a      	ldr	r2, [pc, #232]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800898a:	e007      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	75fb      	strb	r3, [r7, #23]
      break;
 8008990:	e004      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008992:	bf00      	nop
 8008994:	e002      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008996:	bf00      	nop
 8008998:	e000      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800899a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089a2:	4b32      	ldr	r3, [pc, #200]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ae:	492f      	ldr	r1, [pc, #188]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	654b      	str	r3, [r1, #84]	; 0x54
 80089b4:	e001      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089c6:	4b29      	ldr	r3, [pc, #164]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d2:	4926      	ldr	r1, [pc, #152]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d009      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089e4:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089f2:	491e      	ldr	r1, [pc, #120]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a04:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a10:	4916      	ldr	r1, [pc, #88]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00d      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a2c:	6113      	str	r3, [r2, #16]
 8008a2e:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a38:	490c      	ldr	r1, [pc, #48]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da08      	bge.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a52:	4906      	ldr	r1, [pc, #24]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008a58:	7dbb      	ldrb	r3, [r7, #22]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	58024400 	.word	0x58024400

08008a70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b090      	sub	sp, #64	; 0x40
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a7e:	d150      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008a80:	4ba1      	ldr	r3, [pc, #644]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d844      	bhi.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008aad 	.word	0x08008aad
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008acd 	.word	0x08008acd
 8008aa4:	08008b15 	.word	0x08008b15
 8008aa8:	08008add 	.word	0x08008add
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fd03 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aba:	e241      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008abc:	f107 0318 	add.w	r3, r7, #24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fa63 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aca:	e239      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fba7 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ada:	e231      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008adc:	4b8a      	ldr	r3, [pc, #552]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008aec:	4b87      	ldr	r3, [pc, #540]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008af0:	e226      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008af8:	d102      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008afa:	4b85      	ldr	r3, [pc, #532]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008afe:	e21f      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b06:	d102      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008b08:	4b82      	ldr	r3, [pc, #520]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b0c:	e218      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b12:	e215      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b14:	4b80      	ldr	r3, [pc, #512]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b18:	e212      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b1e:	bf00      	nop
 8008b20:	e20e      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b28:	d14f      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008b2a:	4b77      	ldr	r3, [pc, #476]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008b32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	2b80      	cmp	r3, #128	; 0x80
 8008b38:	d01c      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008b3a:	2b80      	cmp	r3, #128	; 0x80
 8008b3c:	d804      	bhi.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	d00e      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008b46:	e03c      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008b48:	2bc0      	cmp	r3, #192	; 0xc0
 8008b4a:	d037      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b50:	d018      	beq.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008b52:	e036      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fcaf 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b62:	e1ed      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b64:	f107 0318 	add.w	r3, r7, #24
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fa0f 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b72:	e1e5      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b74:	f107 030c 	add.w	r3, r7, #12
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fb53 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b82:	e1dd      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b84:	4b60      	ldr	r3, [pc, #384]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d102      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008b94:	4b5d      	ldr	r3, [pc, #372]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008b98:	e1d2      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ba0:	d102      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008ba2:	4b5b      	ldr	r3, [pc, #364]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ba6:	e1cb      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bae:	d102      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008bb0:	4b58      	ldr	r3, [pc, #352]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb4:	e1c4      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bba:	e1c1      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bbc:	4b56      	ldr	r3, [pc, #344]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc0:	e1be      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc6:	bf00      	nop
 8008bc8:	e1ba      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bd0:	d153      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008bd2:	4b4d      	ldr	r3, [pc, #308]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008bda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be2:	d01f      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be8:	d805      	bhi.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf2:	d00f      	beq.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008bf4:	e03d      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008bf6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bfa:	d037      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c00:	d018      	beq.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008c02:	e036      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fc57 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c12:	e195      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c14:	f107 0318 	add.w	r3, r7, #24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 f9b7 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c22:	e18d      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c24:	f107 030c 	add.w	r3, r7, #12
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fafb 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c32:	e185      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c34:	4b34      	ldr	r3, [pc, #208]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c3c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d102      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c44:	4b31      	ldr	r3, [pc, #196]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c48:	e17a      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c50:	d102      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008c52:	4b2f      	ldr	r3, [pc, #188]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c56:	e173      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c5e:	d102      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008c60:	4b2c      	ldr	r3, [pc, #176]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c64:	e16c      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6a:	e169      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c6c:	4b2a      	ldr	r3, [pc, #168]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c70:	e166      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c76:	bf00      	nop
 8008c78:	e162      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c80:	d15d      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008c82:	4b21      	ldr	r3, [pc, #132]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c86:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c92:	d01f      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c98:	d805      	bhi.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ca2:	d00f      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008ca4:	e047      	b.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008ca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008caa:	d041      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cb0:	d018      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008cb2:	e040      	b.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fbff 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc2:	e13d      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc4:	f107 0318 	add.w	r3, r7, #24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f95f 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd2:	e135      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd4:	f107 030c 	add.w	r3, r7, #12
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 faa3 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce2:	e12d      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ce4:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008cf8:	e122      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d00:	d10c      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008d02:	4b03      	ldr	r3, [pc, #12]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d06:	e11b      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008d08:	58024400 	.word	0x58024400
 8008d0c:	03d09000 	.word	0x03d09000
 8008d10:	003d0900 	.word	0x003d0900
 8008d14:	00f42400 	.word	0x00f42400
 8008d18:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d22:	d102      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008d24:	4b89      	ldr	r3, [pc, #548]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d28:	e10a      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2e:	e107      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d30:	4b87      	ldr	r3, [pc, #540]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d34:	e104      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3a:	bf00      	nop
 8008d3c:	e100      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d44:	d153      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008d46:	4b83      	ldr	r3, [pc, #524]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d56:	d01f      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5c:	d805      	bhi.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d66:	d00f      	beq.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008d68:	e03d      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d6e:	d037      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d74:	d018      	beq.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008d76:	e036      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fb9d 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d86:	e0db      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d88:	f107 0318 	add.w	r3, r7, #24
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f8fd 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d96:	e0d3      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fa41 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008da6:	e0cb      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008da8:	4b6a      	ldr	r3, [pc, #424]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008db0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008db8:	4b67      	ldr	r3, [pc, #412]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008dbc:	e0c0      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc4:	d102      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008dc6:	4b65      	ldr	r3, [pc, #404]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dca:	e0b9      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dd2:	d102      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008dd4:	4b5d      	ldr	r3, [pc, #372]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dd8:	e0b2      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dde:	e0af      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008de0:	4b5b      	ldr	r3, [pc, #364]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de4:	e0ac      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dea:	bf00      	nop
 8008dec:	e0a8      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008df4:	d13d      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008df6:	4b57      	ldr	r3, [pc, #348]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dfe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e06:	d00c      	beq.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e0c:	d011      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d12b      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e12:	f107 0318 	add.w	r3, r7, #24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f8b8 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e20:	e08e      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e22:	f107 030c 	add.w	r3, r7, #12
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 f9fc 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e30:	e086      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e32:	4b48      	ldr	r3, [pc, #288]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e42:	4b45      	ldr	r3, [pc, #276]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e46:	e07b      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e4e:	d102      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008e50:	4b42      	ldr	r3, [pc, #264]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e54:	e074      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5c:	d102      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008e5e:	4b3b      	ldr	r3, [pc, #236]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e62:	e06d      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e68:	e06a      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e6e:	bf00      	nop
 8008e70:	e066      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e78:	d11f      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e7a:	4b36      	ldr	r3, [pc, #216]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8e:	d008      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008e90:	e00f      	b.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fb10 	bl	80094bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ea0:	e04e      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea2:	f107 0318 	add.w	r3, r7, #24
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f870 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eb0:	e046      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eb6:	bf00      	nop
 8008eb8:	e042      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ec0:	d13c      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008ec2:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008eca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed2:	d01e      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed8:	d805      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00d      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee2:	d00e      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008ee4:	e026      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eea:	d01d      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ef0:	d01d      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ef6:	d014      	beq.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008ef8:	e01c      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008efa:	f000 f831 	bl	8008f60 <HAL_RCCEx_GetD3PCLK1Freq>
 8008efe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008f00:	e01e      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f02:	f107 0318 	add.w	r3, r7, #24
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f840 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f10:	e016      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f12:	f107 030c 	add.w	r3, r7, #12
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f984 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f20:	e00e      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008f22:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f26:	e00b      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2c:	e008      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f32:	e005      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f38:	bf00      	nop
 8008f3a:	e001      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3740      	adds	r7, #64	; 0x40
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	00bb8000 	.word	0x00bb8000
 8008f54:	58024400 	.word	0x58024400
 8008f58:	03d09000 	.word	0x03d09000
 8008f5c:	003d0900 	.word	0x003d0900

08008f60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f64:	f7fe fdf8 	bl	8007b58 <HAL_RCC_GetHCLKFreq>
 8008f68:	4601      	mov	r1, r0
 8008f6a:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	091b      	lsrs	r3, r3, #4
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	4a04      	ldr	r2, [pc, #16]	; (8008f88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f76:	5cd3      	ldrb	r3, [r2, r3]
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	58024400 	.word	0x58024400
 8008f88:	08015134 	.word	0x08015134

08008f8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b089      	sub	sp, #36	; 0x24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f94:	4b9d      	ldr	r3, [pc, #628]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008f9e:	4b9b      	ldr	r3, [pc, #620]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	0b1b      	lsrs	r3, r3, #12
 8008fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008faa:	4b98      	ldr	r3, [pc, #608]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	091b      	lsrs	r3, r3, #4
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008fb6:	4b95      	ldr	r3, [pc, #596]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fba:	08db      	lsrs	r3, r3, #3
 8008fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 810a 	beq.w	80091ee <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d05a      	beq.n	8009096 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d302      	bcc.n	8008fea <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d078      	beq.n	80090da <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008fe8:	e099      	b.n	800911e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fea:	4b88      	ldr	r3, [pc, #544]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d02d      	beq.n	8009052 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ff6:	4b85      	ldr	r3, [pc, #532]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	08db      	lsrs	r3, r3, #3
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	4a83      	ldr	r2, [pc, #524]	; (8009210 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009002:	fa22 f303 	lsr.w	r3, r2, r3
 8009006:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009020:	4b7a      	ldr	r3, [pc, #488]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009030:	ed97 6a03 	vldr	s12, [r7, #12]
 8009034:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009214 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009050:	e087      	b.n	8009162 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009218 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009064:	4b69      	ldr	r3, [pc, #420]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906c:	ee07 3a90 	vmov	s15, r3
 8009070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009074:	ed97 6a03 	vldr	s12, [r7, #12]
 8009078:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009214 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800907c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009090:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009094:	e065      	b.n	8009162 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	ee07 3a90 	vmov	s15, r3
 800909c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80090a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a8:	4b58      	ldr	r3, [pc, #352]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80090bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009214 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80090c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d8:	e043      	b.n	8009162 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	ee07 3a90 	vmov	s15, r3
 80090e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80090e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ec:	4b47      	ldr	r3, [pc, #284]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009100:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009214 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009118:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800911c:	e021      	b.n	8009162 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	ee07 3a90 	vmov	s15, r3
 8009124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009128:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800921c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800912c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009130:	4b36      	ldr	r3, [pc, #216]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009140:	ed97 6a03 	vldr	s12, [r7, #12]
 8009144:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009214 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009160:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009162:	4b2a      	ldr	r3, [pc, #168]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	0a5b      	lsrs	r3, r3, #9
 8009168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800917c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009188:	ee17 2a90 	vmov	r2, s15
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009190:	4b1e      	ldr	r3, [pc, #120]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	0c1b      	lsrs	r3, r3, #16
 8009196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b6:	ee17 2a90 	vmov	r2, s15
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	0e1b      	lsrs	r3, r3, #24
 80091c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e4:	ee17 2a90 	vmov	r2, s15
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80091ec:	e008      	b.n	8009200 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	609a      	str	r2, [r3, #8]
}
 8009200:	bf00      	nop
 8009202:	3724      	adds	r7, #36	; 0x24
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	58024400 	.word	0x58024400
 8009210:	03d09000 	.word	0x03d09000
 8009214:	46000000 	.word	0x46000000
 8009218:	4c742400 	.word	0x4c742400
 800921c:	4a742400 	.word	0x4a742400
 8009220:	4b742400 	.word	0x4b742400

08009224 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009224:	b480      	push	{r7}
 8009226:	b089      	sub	sp, #36	; 0x24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800922c:	4b9d      	ldr	r3, [pc, #628]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009236:	4b9b      	ldr	r3, [pc, #620]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	0d1b      	lsrs	r3, r3, #20
 800923c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009240:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009242:	4b98      	ldr	r3, [pc, #608]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800924e:	4b95      	ldr	r3, [pc, #596]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009252:	08db      	lsrs	r3, r3, #3
 8009254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009266:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 810a 	beq.w	8009486 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d05a      	beq.n	800932e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009278:	2b01      	cmp	r3, #1
 800927a:	d302      	bcc.n	8009282 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800927c:	2b02      	cmp	r3, #2
 800927e:	d078      	beq.n	8009372 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009280:	e099      	b.n	80093b6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009282:	4b88      	ldr	r3, [pc, #544]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d02d      	beq.n	80092ea <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800928e:	4b85      	ldr	r3, [pc, #532]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	08db      	lsrs	r3, r3, #3
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	4a83      	ldr	r2, [pc, #524]	; (80094a8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b8:	4b7a      	ldr	r3, [pc, #488]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80092d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092e8:	e087      	b.n	80093fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80092f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fc:	4b69      	ldr	r3, [pc, #420]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009310:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009328:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800932c:	e065      	b.n	80093fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	ee07 3a90 	vmov	s15, r3
 8009334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009338:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800933c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009340:	4b58      	ldr	r3, [pc, #352]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009350:	ed97 6a03 	vldr	s12, [r7, #12]
 8009354:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009370:	e043      	b.n	80093fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009384:	4b47      	ldr	r3, [pc, #284]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009394:	ed97 6a03 	vldr	s12, [r7, #12]
 8009398:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800939c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093b4:	e021      	b.n	80093fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80093c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c8:	4b36      	ldr	r3, [pc, #216]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80093e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093f8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80093fa:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	0a5b      	lsrs	r3, r3, #9
 8009400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009414:	edd7 6a07 	vldr	s13, [r7, #28]
 8009418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009420:	ee17 2a90 	vmov	r2, s15
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009428:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800942a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942c:	0c1b      	lsrs	r3, r3, #16
 800942e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800943e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009442:	edd7 6a07 	vldr	s13, [r7, #28]
 8009446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800944e:	ee17 2a90 	vmov	r2, s15
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009456:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	0e1b      	lsrs	r3, r3, #24
 800945c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009460:	ee07 3a90 	vmov	s15, r3
 8009464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009470:	edd7 6a07 	vldr	s13, [r7, #28]
 8009474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947c:	ee17 2a90 	vmov	r2, s15
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009484:	e008      	b.n	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	609a      	str	r2, [r3, #8]
}
 8009498:	bf00      	nop
 800949a:	3724      	adds	r7, #36	; 0x24
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	58024400 	.word	0x58024400
 80094a8:	03d09000 	.word	0x03d09000
 80094ac:	46000000 	.word	0x46000000
 80094b0:	4c742400 	.word	0x4c742400
 80094b4:	4a742400 	.word	0x4a742400
 80094b8:	4b742400 	.word	0x4b742400

080094bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80094bc:	b480      	push	{r7}
 80094be:	b089      	sub	sp, #36	; 0x24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c4:	4b9d      	ldr	r3, [pc, #628]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80094ce:	4b9b      	ldr	r3, [pc, #620]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d2:	091b      	lsrs	r3, r3, #4
 80094d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80094da:	4b98      	ldr	r3, [pc, #608]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80094e4:	4b95      	ldr	r3, [pc, #596]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	08db      	lsrs	r3, r3, #3
 80094ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	fb02 f303 	mul.w	r3, r2, r3
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 810a 	beq.w	800971c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d05a      	beq.n	80095c4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800950e:	2b01      	cmp	r3, #1
 8009510:	d302      	bcc.n	8009518 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009512:	2b02      	cmp	r3, #2
 8009514:	d078      	beq.n	8009608 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009516:	e099      	b.n	800964c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009518:	4b88      	ldr	r3, [pc, #544]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02d      	beq.n	8009580 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009524:	4b85      	ldr	r3, [pc, #532]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	08db      	lsrs	r3, r3, #3
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	4a84      	ldr	r2, [pc, #528]	; (8009740 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009530:	fa22 f303 	lsr.w	r3, r2, r3
 8009534:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b7b      	ldr	r3, [pc, #492]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009562:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009744 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800957e:	e087      	b.n	8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009748 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800958e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009592:	4b6a      	ldr	r3, [pc, #424]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009744 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80095aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095c2:	e065      	b.n	8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800974c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80095d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d6:	4b59      	ldr	r3, [pc, #356]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009744 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80095ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009606:	e043      	b.n	8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009750 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b48      	ldr	r3, [pc, #288]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a03 	vldr	s12, [r7, #12]
 800962e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009744 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800964a:	e021      	b.n	8009690 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800974c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b37      	ldr	r3, [pc, #220]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009672:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009744 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800968e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009690:	4b2a      	ldr	r3, [pc, #168]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	0a5b      	lsrs	r3, r3, #9
 8009696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b6:	ee17 2a90 	vmov	r2, s15
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80096be:	4b1f      	ldr	r3, [pc, #124]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	0c1b      	lsrs	r3, r3, #16
 80096c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096e4:	ee17 2a90 	vmov	r2, s15
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80096ec:	4b13      	ldr	r3, [pc, #76]	; (800973c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	0e1b      	lsrs	r3, r3, #24
 80096f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009706:	edd7 6a07 	vldr	s13, [r7, #28]
 800970a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800970e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009712:	ee17 2a90 	vmov	r2, s15
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800971a:	e008      	b.n	800972e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	609a      	str	r2, [r3, #8]
}
 800972e:	bf00      	nop
 8009730:	3724      	adds	r7, #36	; 0x24
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	58024400 	.word	0x58024400
 8009740:	03d09000 	.word	0x03d09000
 8009744:	46000000 	.word	0x46000000
 8009748:	4c742400 	.word	0x4c742400
 800974c:	4a742400 	.word	0x4a742400
 8009750:	4b742400 	.word	0x4b742400

08009754 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009762:	4b53      	ldr	r3, [pc, #332]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b03      	cmp	r3, #3
 800976c:	d101      	bne.n	8009772 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e099      	b.n	80098a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009772:	4b4f      	ldr	r3, [pc, #316]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a4e      	ldr	r2, [pc, #312]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009778:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800977c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800977e:	f7f8 faff 	bl	8001d80 <HAL_GetTick>
 8009782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009784:	e008      	b.n	8009798 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009786:	f7f8 fafb 	bl	8001d80 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e086      	b.n	80098a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009798:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f0      	bne.n	8009786 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097a4:	4b42      	ldr	r3, [pc, #264]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	031b      	lsls	r3, r3, #12
 80097b2:	493f      	ldr	r1, [pc, #252]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	628b      	str	r3, [r1, #40]	; 0x28
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	3b01      	subs	r3, #1
 80097be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	025b      	lsls	r3, r3, #9
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	041b      	lsls	r3, r3, #16
 80097d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	061b      	lsls	r3, r3, #24
 80097e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097e8:	4931      	ldr	r1, [pc, #196]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097ee:	4b30      	ldr	r3, [pc, #192]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	492d      	ldr	r1, [pc, #180]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009800:	4b2b      	ldr	r3, [pc, #172]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	f023 0220 	bic.w	r2, r3, #32
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	4928      	ldr	r1, [pc, #160]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800980e:	4313      	orrs	r3, r2
 8009810:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009812:	4b27      	ldr	r3, [pc, #156]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009818:	f023 0310 	bic.w	r3, r3, #16
 800981c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800981e:	4b24      	ldr	r3, [pc, #144]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009822:	4b24      	ldr	r3, [pc, #144]	; (80098b4 <RCCEx_PLL2_Config+0x160>)
 8009824:	4013      	ands	r3, r2
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	69d2      	ldr	r2, [r2, #28]
 800982a:	00d2      	lsls	r2, r2, #3
 800982c:	4920      	ldr	r1, [pc, #128]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800982e:	4313      	orrs	r3, r2
 8009830:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009832:	4b1f      	ldr	r3, [pc, #124]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	4a1e      	ldr	r2, [pc, #120]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009838:	f043 0310 	orr.w	r3, r3, #16
 800983c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009844:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800984a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800984e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009850:	e00f      	b.n	8009872 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d106      	bne.n	8009866 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009858:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800985e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009864:	e005      	b.n	8009872 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009866:	4b12      	ldr	r3, [pc, #72]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800986c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009870:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009872:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 8009878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800987c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800987e:	f7f8 fa7f 	bl	8001d80 <HAL_GetTick>
 8009882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009884:	e008      	b.n	8009898 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009886:	f7f8 fa7b 	bl	8001d80 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b02      	cmp	r3, #2
 8009892:	d901      	bls.n	8009898 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <RCCEx_PLL2_Config+0x15c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0f0      	beq.n	8009886 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	58024400 	.word	0x58024400
 80098b4:	ffff0007 	.word	0xffff0007

080098b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098c6:	4b53      	ldr	r3, [pc, #332]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d101      	bne.n	80098d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e099      	b.n	8009a0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098d6:	4b4f      	ldr	r3, [pc, #316]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a4e      	ldr	r2, [pc, #312]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80098dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098e2:	f7f8 fa4d 	bl	8001d80 <HAL_GetTick>
 80098e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098e8:	e008      	b.n	80098fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80098ea:	f7f8 fa49 	bl	8001d80 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e086      	b.n	8009a0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098fc:	4b45      	ldr	r3, [pc, #276]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f0      	bne.n	80098ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009908:	4b42      	ldr	r3, [pc, #264]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	493f      	ldr	r1, [pc, #252]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009918:	4313      	orrs	r3, r2
 800991a:	628b      	str	r3, [r1, #40]	; 0x28
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	3b01      	subs	r3, #1
 8009922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	3b01      	subs	r3, #1
 800992c:	025b      	lsls	r3, r3, #9
 800992e:	b29b      	uxth	r3, r3
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	3b01      	subs	r3, #1
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	3b01      	subs	r3, #1
 8009946:	061b      	lsls	r3, r3, #24
 8009948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800994c:	4931      	ldr	r1, [pc, #196]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 800994e:	4313      	orrs	r3, r2
 8009950:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009952:	4b30      	ldr	r3, [pc, #192]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	492d      	ldr	r1, [pc, #180]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009960:	4313      	orrs	r3, r2
 8009962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009964:	4b2b      	ldr	r3, [pc, #172]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	4928      	ldr	r1, [pc, #160]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009972:	4313      	orrs	r3, r2
 8009974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009976:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	4a26      	ldr	r2, [pc, #152]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 800997c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009982:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <RCCEx_PLL3_Config+0x160>)
 8009988:	4013      	ands	r3, r2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	69d2      	ldr	r2, [r2, #28]
 800998e:	00d2      	lsls	r2, r2, #3
 8009990:	4920      	ldr	r1, [pc, #128]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009992:	4313      	orrs	r3, r2
 8009994:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009996:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	4a1e      	ldr	r2, [pc, #120]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 800999c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	4a19      	ldr	r2, [pc, #100]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099b4:	e00f      	b.n	80099d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d106      	bne.n	80099ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099bc:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4a14      	ldr	r2, [pc, #80]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099c8:	e005      	b.n	80099d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ce:	4a11      	ldr	r2, [pc, #68]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a0e      	ldr	r2, [pc, #56]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099e2:	f7f8 f9cd 	bl	8001d80 <HAL_GetTick>
 80099e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099e8:	e008      	b.n	80099fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099ea:	f7f8 f9c9 	bl	8001d80 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d901      	bls.n	80099fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e006      	b.n	8009a0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <RCCEx_PLL3_Config+0x15c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0f0      	beq.n	80099ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	58024400 	.word	0x58024400
 8009a18:	ffff0007 	.word	0xffff0007

08009a1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e075      	b.n	8009b1a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7f7 fbf3 	bl	800122c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2203      	movs	r2, #3
 8009a4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f868 	bl	8009b24 <HAL_SD_InitCard>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e05d      	b.n	8009b1a <HAL_SD_Init+0xfe>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009a5e:	f107 0308 	add.w	r3, r7, #8
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fd9f 	bl	800a5a8 <HAL_SD_GetCardStatus>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e052      	b.n	8009b1a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009a74:	7e3b      	ldrb	r3, [r7, #24]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009a7a:	7e7b      	ldrb	r3, [r7, #25]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d10a      	bne.n	8009a9e <HAL_SD_Init+0x82>
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d102      	bne.n	8009a94 <HAL_SD_Init+0x78>
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8009a9c:	e00b      	b.n	8009ab6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d104      	bne.n	8009ab0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aac:	659a      	str	r2, [r3, #88]	; 0x58
 8009aae:	e002      	b.n	8009ab6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fe55 	bl	800a76c <HAL_SD_ConfigWideBusOperation>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e026      	b.n	8009b1a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009acc:	f7f8 f958 	bl	8001d80 <HAL_GetTick>
 8009ad0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009ad2:	e011      	b.n	8009af8 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009ad4:	f7f8 f954 	bl	8001d80 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d109      	bne.n	8009af8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State= HAL_SD_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e010      	b.n	8009b1a <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fee1 	bl	800a8c0 <HAL_SD_GetCardState>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d1e7      	bne.n	8009ad4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b08d      	sub	sp, #52	; 0x34
 8009b28:	af02      	add	r7, sp, #8
 8009b2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009b3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009b40:	f7fe ff96 	bl	8008a70 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b44:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	4a3a      	ldr	r2, [pc, #232]	; (8009c34 <HAL_SD_InitCard+0x110>)
 8009b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b50:	091b      	lsrs	r3, r3, #4
 8009b52:	61fb      	str	r3, [r7, #28]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681c      	ldr	r4, [r3, #0]
 8009b58:	466a      	mov	r2, sp
 8009b5a:	f107 0318 	add.w	r3, r7, #24
 8009b5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b62:	e882 0003 	stmia.w	r2, {r0, r1}
 8009b66:	f107 030c 	add.w	r3, r7, #12
 8009b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f003 fb95 	bl	800d29c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f003 fbd8 	bl	800d32c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d008      	beq.n	8009ba0 <HAL_SD_InitCard+0x7c>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009b8e:	4a2a      	ldr	r2, [pc, #168]	; (8009c38 <HAL_SD_InitCard+0x114>)
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b96:	3301      	adds	r3, #1
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f8 f8fd 	bl	8001d98 <HAL_Delay>
 8009b9e:	e002      	b.n	8009ba6 <HAL_SD_InitCard+0x82>
  }
  else
  {
    HAL_Delay(2U);
 8009ba0:	2002      	movs	r0, #2
 8009ba2:	f7f8 f8f9 	bl	8001d98 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 ff68 	bl	800aa7c <SD_PowerON>
 8009bac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <HAL_SD_InitCard+0xa8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e02e      	b.n	8009c2a <HAL_SD_InitCard+0x106>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fe97 	bl	800a900 <SD_InitCard>
 8009bd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <HAL_SD_InitCard+0xce>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e01b      	b.n	8009c2a <HAL_SD_InitCard+0x106>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f003 fc2c 	bl	800d458 <SDMMC_CmdBlockLength>
 8009c00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00f      	beq.n	8009c28 <HAL_SD_InitCard+0x104>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a0b      	ldr	r2, [pc, #44]	; (8009c3c <HAL_SD_InitCard+0x118>)
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <HAL_SD_InitCard+0x106>
  }

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	372c      	adds	r7, #44	; 0x2c
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd90      	pop	{r4, r7, pc}
 8009c32:	bf00      	nop
 8009c34:	014f8b59 	.word	0x014f8b59
 8009c38:	00012110 	.word	0x00012110
 8009c3c:	1fe00fff 	.word	0x1fe00fff

08009c40 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08c      	sub	sp, #48	; 0x30
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d107      	bne.n	8009c68 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e08d      	b.n	8009d84 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	f040 8086 	bne.w	8009d82 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	635a      	str	r2, [r3, #52]	; 0x34

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d907      	bls.n	8009c9a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e074      	b.n	8009d84 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	025a      	lsls	r2, r3, #9
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d002      	beq.n	8009cc6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	025b      	lsls	r3, r3, #9
 8009cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	025b      	lsls	r3, r3, #9
 8009cd0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009cd2:	2390      	movs	r3, #144	; 0x90
 8009cd4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f107 0210 	add.w	r2, r7, #16
 8009cea:	4611      	mov	r1, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f003 fb87 	bl	800d400 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d00:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d90a      	bls.n	8009d2e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2282      	movs	r2, #130	; 0x82
 8009d1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d24:	4618      	mov	r0, r3
 8009d26:	f003 fbdd 	bl	800d4e4 <SDMMC_CmdReadMultiBlock>
 8009d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009d2c:	e009      	b.n	8009d42 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2281      	movs	r2, #129	; 0x81
 8009d32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f003 fbaf 	bl	800d49e <SDMMC_CmdReadSingleBlock>
 8009d40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d012      	beq.n	8009d6e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a0f      	ldr	r2, [pc, #60]	; (8009d8c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	431a      	orrs	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e00a      	b.n	8009d84 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009d7c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e000      	b.n	8009d84 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009d82:	2302      	movs	r3, #2
  }
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3730      	adds	r7, #48	; 0x30
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	1fe00fff 	.word	0x1fe00fff

08009d90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08c      	sub	sp, #48	; 0x30
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d107      	bne.n	8009db8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e08d      	b.n	8009ed4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	f040 8086 	bne.w	8009ed2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	635a      	str	r2, [r3, #52]	; 0x34

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	441a      	add	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d907      	bls.n	8009dea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e074      	b.n	8009ed4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2203      	movs	r2, #3
 8009dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2200      	movs	r2, #0
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	025a      	lsls	r2, r3, #9
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	621a      	str	r2, [r3, #32]

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d002      	beq.n	8009e16 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	025b      	lsls	r3, r3, #9
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e16:	f04f 33ff 	mov.w	r3, #4294967295
 8009e1a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	025b      	lsls	r3, r3, #9
 8009e20:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009e22:	2390      	movs	r3, #144	; 0x90
 8009e24:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009e26:	2300      	movs	r3, #0
 8009e28:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f107 0210 	add.w	r2, r7, #16
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f003 fadf 	bl	800d400 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68da      	ldr	r2, [r3, #12]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e50:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d90a      	bls.n	8009e7e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	22a0      	movs	r2, #160	; 0xa0
 8009e6c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e74:	4618      	mov	r0, r3
 8009e76:	f003 fb7b 	bl	800d570 <SDMMC_CmdWriteMultiBlock>
 8009e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009e7c:	e009      	b.n	8009e92 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2290      	movs	r2, #144	; 0x90
 8009e82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f003 fb4d 	bl	800d52a <SDMMC_CmdWriteSingleBlock>
 8009e90:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d012      	beq.n	8009ebe <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e00a      	b.n	8009ed4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009ed2:	2302      	movs	r3, #2
  }
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3730      	adds	r7, #48	; 0x30
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	1fe00fff 	.word	0x1fe00fff

08009ee0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <HAL_SD_IRQHandler+0x2e>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f003 0308 	and.w	r3, r3, #8
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d003      	beq.n	8009f0e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f001 f8a0 	bl	800b04c <SD_Read_IT>
 8009f0c:	e19a      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80ac 	beq.w	800a076 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4b9d      	ldr	r3, [pc, #628]	; (800a1a8 <HAL_SD_IRQHandler+0x2c8>)
 8009f34:	400b      	ands	r3, r1
 8009f36:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009f46:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f56:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f003 0308 	and.w	r3, r3, #8
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d038      	beq.n	8009fd4 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <HAL_SD_IRQHandler+0x96>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d011      	beq.n	8009f9a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f003 fb1c 	bl	800d5b8 <SDMMC_CmdStopTransfer>
 8009f80:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d008      	beq.n	8009f9a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f959 	bl	800a24c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a83      	ldr	r2, [pc, #524]	; (800a1ac <HAL_SD_IRQHandler+0x2cc>)
 8009fa0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	62da      	str	r2, [r3, #44]	; 0x2c
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d104      	bne.n	8009fc4 <HAL_SD_IRQHandler+0xe4>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f003 ffcf 	bl	800df68 <HAL_SD_RxCpltCallback>
 8009fca:	e13b      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f003 ffc1 	bl	800df54 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009fd2:	e137      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8132 	beq.w	800a244 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2200      	movs	r2, #0
 8009fee:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <HAL_SD_IRQHandler+0x12c>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f003 0320 	and.w	r3, r3, #32
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d011      	beq.n	800a030 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4618      	mov	r0, r3
 800a012:	f003 fad1 	bl	800d5b8 <SDMMC_CmdStopTransfer>
 800a016:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d008      	beq.n	800a030 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f90e 	bl	800a24c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	62da      	str	r2, [r3, #44]	; 0x2c
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f003 0310 	and.w	r3, r3, #16
 800a044:	2b00      	cmp	r3, #0
 800a046:	d104      	bne.n	800a052 <HAL_SD_IRQHandler+0x172>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f003 ff7e 	bl	800df54 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d105      	bne.n	800a06e <HAL_SD_IRQHandler+0x18e>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 80eb 	beq.w	800a244 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f003 ff7a 	bl	800df68 <HAL_SD_RxCpltCallback>
}
 800a074:	e0e6      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d008      	beq.n	800a096 <HAL_SD_IRQHandler+0x1b6>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 f822 	bl	800b0d8 <SD_Write_IT>
 800a094:	e0d6      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 80a2 	beq.w	800a1ea <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b8:	f043 0202 	orr.w	r2, r3, #2
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d2:	f043 0208 	orr.w	r2, r3, #8
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e0:	f003 0320 	and.w	r3, r3, #32
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d005      	beq.n	800a0f4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	f043 0220 	orr.w	r2, r3, #32
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	635a      	str	r2, [r3, #52]	; 0x34
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fa:	f003 0310 	and.w	r3, r3, #16
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a106:	f043 0210 	orr.w	r2, r3, #16
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a26      	ldr	r2, [pc, #152]	; (800a1ac <HAL_SD_IRQHandler+0x2cc>)
 800a114:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a124:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a134:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a144:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a154:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f003 fa2c 	bl	800d5b8 <SDMMC_CmdStopTransfer>
 800a160:	4602      	mov	r2, r0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a166:	431a      	orrs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a17a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a184:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00f      	beq.n	800a1b0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f854 	bl	800a24c <HAL_SD_ErrorCallback>
}
 800a1a4:	e04e      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
 800a1a6:	bf00      	nop
 800a1a8:	ffff3ec5 	.word	0xffff3ec5
 800a1ac:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d044      	beq.n	800a244 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d040      	beq.n	800a244 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a1d0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f832 	bl	800a24c <HAL_SD_ErrorCallback>
}
 800a1e8:	e02c      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d025      	beq.n	800a244 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a200:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10c      	bne.n	800a22a <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 ffc4 	bl	800b1a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a220:	e010      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 ffac 	bl	800b180 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a228:	e00c      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 ffad 	bl	800b194 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a23a:	e003      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 ff95 	bl	800b16c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a242:	e7ff      	b.n	800a244 <HAL_SD_IRQHandler+0x364>
 800a244:	bf00      	nop
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a26e:	0f9b      	lsrs	r3, r3, #30
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a27a:	0e9b      	lsrs	r3, r3, #26
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	b2da      	uxtb	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a28c:	0e1b      	lsrs	r3, r3, #24
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	b2da      	uxtb	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2aa:	0a1b      	lsrs	r3, r3, #8
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c0:	0d1b      	lsrs	r3, r3, #20
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 030f 	and.w	r3, r3, #15
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2de:	0bdb      	lsrs	r3, r3, #15
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2f0:	0b9b      	lsrs	r3, r3, #14
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a302:	0b5b      	lsrs	r3, r3, #13
 800a304:	b2db      	uxtb	r3, r3
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a314:	0b1b      	lsrs	r3, r3, #12
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2200      	movs	r2, #0
 800a326:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d163      	bne.n	800a3f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a334:	009a      	lsls	r2, r3, #2
 800a336:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a33a:	4013      	ands	r3, r2
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a340:	0f92      	lsrs	r2, r2, #30
 800a342:	431a      	orrs	r2, r3
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a34c:	0edb      	lsrs	r3, r3, #27
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	b2da      	uxtb	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a35e:	0e1b      	lsrs	r3, r3, #24
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	b2da      	uxtb	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a370:	0d5b      	lsrs	r3, r3, #21
 800a372:	b2db      	uxtb	r3, r3
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a382:	0c9b      	lsrs	r3, r3, #18
 800a384:	b2db      	uxtb	r3, r3
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a394:	0bdb      	lsrs	r3, r3, #15
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	7e1b      	ldrb	r3, [r3, #24]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0307 	and.w	r3, r3, #7
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3c2:	fb02 f203 	mul.w	r2, r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	7a1b      	ldrb	r3, [r3, #8]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	f003 030f 	and.w	r3, r3, #15
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	409a      	lsls	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a3e4:	0a52      	lsrs	r2, r2, #9
 800a3e6:	fb02 f203 	mul.w	r2, r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3f4:	655a      	str	r2, [r3, #84]	; 0x54
 800a3f6:	e031      	b.n	800a45c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d11d      	bne.n	800a43c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a404:	041b      	lsls	r3, r3, #16
 800a406:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a40e:	0c1b      	lsrs	r3, r3, #16
 800a410:	431a      	orrs	r2, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	3301      	adds	r3, #1
 800a41c:	029a      	lsls	r2, r3, #10
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a430:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
 800a43a:	e00f      	b.n	800a45c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a58      	ldr	r2, [pc, #352]	; (800a5a4 <HAL_SD_GetCardCSD+0x344>)
 800a442:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a448:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e09d      	b.n	800a598 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a460:	0b9b      	lsrs	r3, r3, #14
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a472:	09db      	lsrs	r3, r3, #7
 800a474:	b2db      	uxtb	r3, r3
 800a476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a484:	b2db      	uxtb	r3, r3
 800a486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a494:	0fdb      	lsrs	r3, r3, #31
 800a496:	b2da      	uxtb	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4a0:	0f5b      	lsrs	r3, r3, #29
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4b2:	0e9b      	lsrs	r3, r3, #26
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4c4:	0d9b      	lsrs	r3, r3, #22
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4d6:	0d5b      	lsrs	r3, r3, #21
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4f2:	0c1b      	lsrs	r3, r3, #16
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a506:	0bdb      	lsrs	r3, r3, #15
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a51a:	0b9b      	lsrs	r3, r3, #14
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a52e:	0b5b      	lsrs	r3, r3, #13
 800a530:	b2db      	uxtb	r3, r3
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a542:	0b1b      	lsrs	r3, r3, #12
 800a544:	b2db      	uxtb	r3, r3
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a556:	0a9b      	lsrs	r3, r3, #10
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a56a:	0a1b      	lsrs	r3, r3, #8
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	b2da      	uxtb	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a57e:	085b      	lsrs	r3, r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a586:	b2da      	uxtb	r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	1fe00fff 	.word	0x1fe00fff

0800a5a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b094      	sub	sp, #80	; 0x50
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a5b8:	f107 0308 	add.w	r3, r7, #8
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fae6 	bl	800ab90 <SD_SendSDStatus>
 800a5c4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d011      	beq.n	800a5f0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a4f      	ldr	r2, [pc, #316]	; (800a710 <HAL_SD_GetCardStatus+0x168>)
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a5ee:	e070      	b.n	800a6d2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	099b      	lsrs	r3, r3, #6
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	095b      	lsrs	r3, r3, #5
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	0a1b      	lsrs	r3, r3, #8
 800a614:	b29b      	uxth	r3, r3
 800a616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	0e1b      	lsrs	r3, r3, #24
 800a620:	b29b      	uxth	r3, r3
 800a622:	4313      	orrs	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	061a      	lsls	r2, r3, #24
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	021b      	lsls	r3, r3, #8
 800a632:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a636:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	0a1b      	lsrs	r3, r3, #8
 800a63c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a640:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	0e1b      	lsrs	r3, r3, #24
 800a646:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	0a1b      	lsrs	r3, r3, #8
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	0d1b      	lsrs	r3, r3, #20
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	b29b      	uxth	r3, r3
 800a674:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a678:	b29a      	uxth	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	b29b      	uxth	r3, r3
 800a682:	4313      	orrs	r3, r2
 800a684:	b29a      	uxth	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	0a9b      	lsrs	r3, r3, #10
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a694:	b2da      	uxtb	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	0a1b      	lsrs	r3, r3, #8
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	091b      	lsrs	r3, r3, #4
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 030f 	and.w	r3, r3, #15
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	0e1b      	lsrs	r3, r3, #24
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f002 febc 	bl	800d458 <SDMMC_CmdBlockLength>
 800a6e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00d      	beq.n	800a704 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a08      	ldr	r2, [pc, #32]	; (800a710 <HAL_SD_GetCardStatus+0x168>)
 800a6ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6f4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a704:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3750      	adds	r7, #80	; 0x50
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	1fe00fff 	.word	0x1fe00fff

0800a714 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a76c:	b590      	push	{r4, r7, lr}
 800a76e:	b08d      	sub	sp, #52	; 0x34
 800a770:	af02      	add	r7, sp, #8
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2203      	movs	r2, #3
 800a780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d02e      	beq.n	800a7ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a792:	d106      	bne.n	800a7a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	635a      	str	r2, [r3, #52]	; 0x34
 800a7a0:	e029      	b.n	800a7f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7a8:	d10a      	bne.n	800a7c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fae8 	bl	800ad80 <SD_WideBus_Enable>
 800a7b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	635a      	str	r2, [r3, #52]	; 0x34
 800a7be:	e01a      	b.n	800a7f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fb25 	bl	800ae16 <SD_WideBus_Disable>
 800a7cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	635a      	str	r2, [r3, #52]	; 0x34
 800a7da:	e00c      	b.n	800a7f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	635a      	str	r2, [r3, #52]	; 0x34
 800a7e8:	e005      	b.n	800a7f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d007      	beq.n	800a80e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a2e      	ldr	r2, [pc, #184]	; (800a8bc <HAL_SD_ConfigWideBusOperation+0x150>)
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a80c:	e034      	b.n	800a878 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d903      	bls.n	800a834 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	61fb      	str	r3, [r7, #28]
 800a832:	e012      	b.n	800a85a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a83c:	d103      	bne.n	800a846 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	61fb      	str	r3, [r7, #28]
 800a844:	e009      	b.n	800a85a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a84a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84e:	d102      	bne.n	800a856 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a850:	2302      	movs	r3, #2
 800a852:	61fb      	str	r3, [r7, #28]
 800a854:	e001      	b.n	800a85a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a856:	2304      	movs	r3, #4
 800a858:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681c      	ldr	r4, [r3, #0]
 800a85e:	466a      	mov	r2, sp
 800a860:	f107 0318 	add.w	r3, r7, #24
 800a864:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a868:	e882 0003 	stmia.w	r2, {r0, r1}
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a872:	4620      	mov	r0, r4
 800a874:	f002 fd12 	bl	800d29c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a880:	4618      	mov	r0, r3
 800a882:	f002 fde9 	bl	800d458 <SDMMC_CmdBlockLength>
 800a886:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00c      	beq.n	800a8a8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <HAL_SD_ConfigWideBusOperation+0x150>)
 800a894:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	372c      	adds	r7, #44	; 0x2c
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd90      	pop	{r4, r7, pc}
 800a8bc:	1fe00fff 	.word	0x1fe00fff

0800a8c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8cc:	f107 030c 	add.w	r3, r7, #12
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa2c 	bl	800ad30 <SD_SendStatus>
 800a8d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	0a5b      	lsrs	r3, r3, #9
 800a8f0:	f003 030f 	and.w	r3, r3, #15
 800a8f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a8f6:	693b      	ldr	r3, [r7, #16]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a900:	b590      	push	{r4, r7, lr}
 800a902:	b091      	sub	sp, #68	; 0x44
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a908:	2301      	movs	r3, #1
 800a90a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f002 fd1c 	bl	800d34e <SDMMC_GetPowerState>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a91c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a920:	e0a8      	b.n	800aa74 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	2b03      	cmp	r3, #3
 800a928:	d02e      	beq.n	800a988 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f002 ff68 	bl	800d804 <SDMMC_CmdSendCID>
 800a934:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <SD_InitCard+0x40>
    {
      return errorstate;
 800a93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93e:	e099      	b.n	800aa74 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f002 fd47 	bl	800d3da <SDMMC_GetResponse>
 800a94c:	4602      	mov	r2, r0
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2104      	movs	r1, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f002 fd3e 	bl	800d3da <SDMMC_GetResponse>
 800a95e:	4602      	mov	r2, r0
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2108      	movs	r1, #8
 800a96a:	4618      	mov	r0, r3
 800a96c:	f002 fd35 	bl	800d3da <SDMMC_GetResponse>
 800a970:	4602      	mov	r2, r0
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	210c      	movs	r1, #12
 800a97c:	4618      	mov	r0, r3
 800a97e:	f002 fd2c 	bl	800d3da <SDMMC_GetResponse>
 800a982:	4602      	mov	r2, r0
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d00d      	beq.n	800a9ac <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f107 020e 	add.w	r2, r7, #14
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f002 ff71 	bl	800d882 <SDMMC_CmdSetRelAdd>
 800a9a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <SD_InitCard+0xac>
    {
      return errorstate;
 800a9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9aa:	e063      	b.n	800aa74 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d036      	beq.n	800aa22 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a9b4:	89fb      	ldrh	r3, [r7, #14]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c4:	041b      	lsls	r3, r3, #16
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f002 ff3a 	bl	800d842 <SDMMC_CmdSendCSD>
 800a9ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <SD_InitCard+0xda>
    {
      return errorstate;
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d8:	e04c      	b.n	800aa74 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f002 fcfa 	bl	800d3da <SDMMC_GetResponse>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f002 fcf1 	bl	800d3da <SDMMC_GetResponse>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2108      	movs	r1, #8
 800aa04:	4618      	mov	r0, r3
 800aa06:	f002 fce8 	bl	800d3da <SDMMC_GetResponse>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	210c      	movs	r1, #12
 800aa16:	4618      	mov	r0, r3
 800aa18:	f002 fcdf 	bl	800d3da <SDMMC_GetResponse>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2104      	movs	r1, #4
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f002 fcd6 	bl	800d3da <SDMMC_GetResponse>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	0d1a      	lsrs	r2, r3, #20
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa36:	f107 0310 	add.w	r3, r7, #16
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fc0f 	bl	800a260 <HAL_SD_GetCardCSD>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aa4c:	e012      	b.n	800aa74 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6819      	ldr	r1, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa56:	041b      	lsls	r3, r3, #16
 800aa58:	f04f 0400 	mov.w	r4, #0
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4623      	mov	r3, r4
 800aa60:	4608      	mov	r0, r1
 800aa62:	f002 fde5 	bl	800d630 <SDMMC_CmdSelDesel>
 800aa66:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <SD_InitCard+0x172>
  {
    return errorstate;
 800aa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa70:	e000      	b.n	800aa74 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3744      	adds	r7, #68	; 0x44
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd90      	pop	{r4, r7, pc}

0800aa7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f002 fdef 	bl	800d678 <SDMMC_CmdGoIdleState>
 800aa9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	e06e      	b.n	800ab84 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f002 fe02 	bl	800d6b4 <SDMMC_CmdOperCond>
 800aab0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00d      	beq.n	800aad4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f002 fdd8 	bl	800d678 <SDMMC_CmdGoIdleState>
 800aac8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d004      	beq.n	800aada <SD_PowerON+0x5e>
    {
      return errorstate;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	e057      	b.n	800ab84 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d137      	bne.n	800ab52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2100      	movs	r1, #0
 800aae8:	4618      	mov	r0, r3
 800aaea:	f002 fe03 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800aaee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d02d      	beq.n	800ab52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aafa:	e043      	b.n	800ab84 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2100      	movs	r1, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f002 fdf6 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800ab08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <SD_PowerON+0x98>
    {
      return errorstate;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	e037      	b.n	800ab84 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	491c      	ldr	r1, [pc, #112]	; (800ab8c <SD_PowerON+0x110>)
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f002 fe0d 	bl	800d73a <SDMMC_CmdAppOperCommand>
 800ab20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ab2c:	e02a      	b.n	800ab84 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f002 fc50 	bl	800d3da <SDMMC_GetResponse>
 800ab3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	0fdb      	lsrs	r3, r3, #31
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d101      	bne.n	800ab48 <SD_PowerON+0xcc>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <SD_PowerON+0xce>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	613b      	str	r3, [r7, #16]

    count++;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d802      	bhi.n	800ab62 <SD_PowerON+0xe6>
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0cc      	beq.n	800aafc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d902      	bls.n	800ab72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ab6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab70:	e008      	b.n	800ab84 <SD_PowerON+0x108>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	c1100000 	.word	0xc1100000

0800ab90 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08c      	sub	sp, #48	; 0x30
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab9a:	f7f7 f8f1 	bl	8001d80 <HAL_GetTick>
 800ab9e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f002 fc15 	bl	800d3da <SDMMC_GetResponse>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abba:	d102      	bne.n	800abc2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800abbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abc0:	e0b0      	b.n	800ad24 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2140      	movs	r1, #64	; 0x40
 800abc8:	4618      	mov	r0, r3
 800abca:	f002 fc45 	bl	800d458 <SDMMC_CmdBlockLength>
 800abce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	e0a0      	b.n	800ad24 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abea:	041b      	lsls	r3, r3, #16
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f002 fd80 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800abf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	e08d      	b.n	800ad24 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ac0e:	2340      	movs	r3, #64	; 0x40
 800ac10:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ac12:	2360      	movs	r3, #96	; 0x60
 800ac14:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ac16:	2302      	movs	r3, #2
 800ac18:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f107 0208 	add.w	r2, r7, #8
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f002 fbe7 	bl	800d400 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 fe68 	bl	800d90c <SDMMC_CmdStatusRegister>
 800ac3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d02b      	beq.n	800ac9c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	e069      	b.n	800ad24 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d013      	beq.n	800ac86 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ac5e:	2300      	movs	r3, #0
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac62:	e00d      	b.n	800ac80 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f002 fb41 	bl	800d2f0 <SDMMC_ReadFIFO>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	601a      	str	r2, [r3, #0]
        pData++;
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	3304      	adds	r3, #4
 800ac78:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	2b07      	cmp	r3, #7
 800ac84:	d9ee      	bls.n	800ac64 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac86:	f7f7 f87b 	bl	8001d80 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d102      	bne.n	800ac9c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac9a:	e043      	b.n	800ad24 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0d2      	beq.n	800ac50 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb0:	f003 0308 	and.w	r3, r3, #8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800acb8:	2308      	movs	r3, #8
 800acba:	e033      	b.n	800ad24 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800acca:	2302      	movs	r3, #2
 800accc:	e02a      	b.n	800ad24 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd4:	f003 0320 	and.w	r3, r3, #32
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d017      	beq.n	800ad0c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800acdc:	2320      	movs	r3, #32
 800acde:	e021      	b.n	800ad24 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 fb03 	bl	800d2f0 <SDMMC_ReadFIFO>
 800acea:	4602      	mov	r2, r0
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	601a      	str	r2, [r3, #0]
    pData++;
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	3304      	adds	r3, #4
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800acf6:	f7f7 f843 	bl	8001d80 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d102      	bne.n	800ad0c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ad06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad0a:	e00b      	b.n	800ad24 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e2      	bne.n	800ace0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a03      	ldr	r2, [pc, #12]	; (800ad2c <SD_SendSDStatus+0x19c>)
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3730      	adds	r7, #48	; 0x30
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	18000f3a 	.word	0x18000f3a

0800ad30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d102      	bne.n	800ad46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ad40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad44:	e018      	b.n	800ad78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4e:	041b      	lsls	r3, r3, #16
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f002 fdb7 	bl	800d8c6 <SDMMC_CmdSendStatus>
 800ad58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e009      	b.n	800ad78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f002 fb35 	bl	800d3da <SDMMC_GetResponse>
 800ad70:	4602      	mov	r2, r0
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f002 fb1f 	bl	800d3da <SDMMC_GetResponse>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ada2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ada6:	d102      	bne.n	800adae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ada8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adac:	e02f      	b.n	800ae0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800adae:	f107 030c 	add.w	r3, r7, #12
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f879 	bl	800aeac <SD_FindSCR>
 800adba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	e023      	b.n	800ae0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d01c      	beq.n	800ae0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add8:	041b      	lsls	r3, r3, #16
 800adda:	4619      	mov	r1, r3
 800addc:	4610      	mov	r0, r2
 800adde:	f002 fc89 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800ade2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	e00f      	b.n	800ae0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2102      	movs	r1, #2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f002 fcc0 	bl	800d77a <SDMMC_CmdBusWidth>
 800adfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	e003      	b.n	800ae0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae06:	2300      	movs	r3, #0
 800ae08:	e001      	b.n	800ae0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	2300      	movs	r3, #0
 800ae24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f002 fad4 	bl	800d3da <SDMMC_GetResponse>
 800ae32:	4603      	mov	r3, r0
 800ae34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae3c:	d102      	bne.n	800ae44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae42:	e02f      	b.n	800aea4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae44:	f107 030c 	add.w	r3, r7, #12
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f82e 	bl	800aeac <SD_FindSCR>
 800ae50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	e023      	b.n	800aea4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d01c      	beq.n	800aea0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae6e:	041b      	lsls	r3, r3, #16
 800ae70:	4619      	mov	r1, r3
 800ae72:	4610      	mov	r0, r2
 800ae74:	f002 fc3e 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800ae78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d001      	beq.n	800ae84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	e00f      	b.n	800aea4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 fc75 	bl	800d77a <SDMMC_CmdBusWidth>
 800ae90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	e003      	b.n	800aea4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e001      	b.n	800aea4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aea0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08e      	sub	sp, #56	; 0x38
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aeb6:	f7f6 ff63 	bl	8001d80 <HAL_GetTick>
 800aeba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800aec0:	2300      	movs	r3, #0
 800aec2:	60bb      	str	r3, [r7, #8]
 800aec4:	2300      	movs	r3, #0
 800aec6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2108      	movs	r1, #8
 800aed2:	4618      	mov	r0, r3
 800aed4:	f002 fac0 	bl	800d458 <SDMMC_CmdBlockLength>
 800aed8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	e0ad      	b.n	800b040 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeec:	041b      	lsls	r3, r3, #16
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f002 fbff 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800aef6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <SD_FindSCR+0x56>
  {
    return errorstate;
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	e09e      	b.n	800b040 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af02:	f04f 33ff 	mov.w	r3, #4294967295
 800af06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800af08:	2308      	movs	r3, #8
 800af0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800af0c:	2330      	movs	r3, #48	; 0x30
 800af0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af10:	2302      	movs	r3, #2
 800af12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af14:	2300      	movs	r3, #0
 800af16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800af18:	2301      	movs	r3, #1
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f107 0210 	add.w	r2, r7, #16
 800af24:	4611      	mov	r1, r2
 800af26:	4618      	mov	r0, r3
 800af28:	f002 fa6a 	bl	800d400 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f002 fc45 	bl	800d7c0 <SDMMC_CmdSendSCR>
 800af36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d027      	beq.n	800af8e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	e07e      	b.n	800b040 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d113      	bne.n	800af78 <SD_FindSCR+0xcc>
 800af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af52:	2b00      	cmp	r3, #0
 800af54:	d110      	bne.n	800af78 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f002 f9c8 	bl	800d2f0 <SDMMC_ReadFIFO>
 800af60:	4603      	mov	r3, r0
 800af62:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f002 f9c1 	bl	800d2f0 <SDMMC_ReadFIFO>
 800af6e:	4603      	mov	r3, r0
 800af70:	60fb      	str	r3, [r7, #12]
      index++;
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af74:	3301      	adds	r3, #1
 800af76:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af78:	f7f6 ff02 	bl	8001d80 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d102      	bne.n	800af8e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af8c:	e058      	b.n	800b040 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af94:	f240 532a 	movw	r3, #1322	; 0x52a
 800af98:	4013      	ands	r3, r2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0d1      	beq.n	800af42 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa4:	f003 0308 	and.w	r3, r3, #8
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2208      	movs	r2, #8
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800afb4:	2308      	movs	r3, #8
 800afb6:	e043      	b.n	800b040 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2202      	movs	r2, #2
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800afce:	2302      	movs	r3, #2
 800afd0:	e036      	b.n	800b040 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd8:	f003 0320 	and.w	r3, r3, #32
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2220      	movs	r2, #32
 800afe6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800afe8:	2320      	movs	r3, #32
 800afea:	e029      	b.n	800b040 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a15      	ldr	r2, [pc, #84]	; (800b048 <SD_FindSCR+0x19c>)
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	061a      	lsls	r2, r3, #24
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	021b      	lsls	r3, r3, #8
 800affc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b000:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	0a1b      	lsrs	r3, r3, #8
 800b006:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b00a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	0e1b      	lsrs	r3, r3, #24
 800b010:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	601a      	str	r2, [r3, #0]
    scr++;
 800b016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b018:	3304      	adds	r3, #4
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	061a      	lsls	r2, r3, #24
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	021b      	lsls	r3, r3, #8
 800b024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b028:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	0a1b      	lsrs	r3, r3, #8
 800b02e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b032:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	0e1b      	lsrs	r3, r3, #24
 800b038:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3738      	adds	r7, #56	; 0x38
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	18000f3a 	.word	0x18000f3a

0800b04c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	2b1f      	cmp	r3, #31
 800b060:	d936      	bls.n	800b0d0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e027      	b.n	800b0b8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f002 f93f 	bl	800d2f0 <SDMMC_ReadFIFO>
 800b072:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	b2da      	uxtb	r2, r3
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	3301      	adds	r3, #1
 800b080:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	0a1b      	lsrs	r3, r3, #8
 800b086:	b2da      	uxtb	r2, r3
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	3301      	adds	r3, #1
 800b090:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	0c1b      	lsrs	r3, r3, #16
 800b096:	b2da      	uxtb	r2, r3
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	0e1b      	lsrs	r3, r3, #24
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	d9d4      	bls.n	800b068 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c8:	f1a3 0220 	sub.w	r2, r3, #32
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b0d0:	bf00      	nop
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	2b1f      	cmp	r3, #31
 800b0ec:	d93a      	bls.n	800b164 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	e02b      	b.n	800b14c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	021a      	lsls	r2, r3, #8
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	3301      	adds	r3, #1
 800b110:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	041a      	lsls	r2, r3, #16
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	3301      	adds	r3, #1
 800b122:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	061a      	lsls	r2, r3, #24
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	3301      	adds	r3, #1
 800b134:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f107 020c 	add.w	r2, r7, #12
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f002 f8e2 	bl	800d30a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	3301      	adds	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2b07      	cmp	r3, #7
 800b150:	d9d0      	bls.n	800b0f4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a1b      	ldr	r3, [r3, #32]
 800b15c:	f1a3 0220 	sub.w	r2, r3, #32
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	621a      	str	r2, [r3, #32]
  }
}
 800b164:	bf00      	nop
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e049      	b.n	800b262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7f6 fac8 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	f000 fab2 	bl	800b764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d001      	beq.n	800b284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e019      	b.n	800b2b8 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	689a      	ldr	r2, [r3, #8]
 800b292:	4b0c      	ldr	r3, [pc, #48]	; (800b2c4 <HAL_TIM_Base_Start+0x58>)
 800b294:	4013      	ands	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b06      	cmp	r3, #6
 800b29c:	d00b      	beq.n	800b2b6 <HAL_TIM_Base_Start+0x4a>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a4:	d007      	beq.n	800b2b6 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	00010007 	.word	0x00010007

0800b2c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d001      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e021      	b.n	800b324 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0201 	orr.w	r2, r2, #1
 800b2f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	4b0c      	ldr	r3, [pc, #48]	; (800b330 <HAL_TIM_Base_Start_IT+0x68>)
 800b300:	4013      	ands	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b06      	cmp	r3, #6
 800b308:	d00b      	beq.n	800b322 <HAL_TIM_Base_Start_IT+0x5a>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b310:	d007      	beq.n	800b322 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f042 0201 	orr.w	r2, r2, #1
 800b320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	00010007 	.word	0x00010007

0800b334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	f003 0302 	and.w	r3, r3, #2
 800b346:	2b02      	cmp	r3, #2
 800b348:	d122      	bne.n	800b390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b02      	cmp	r3, #2
 800b356:	d11b      	bne.n	800b390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f06f 0202 	mvn.w	r2, #2
 800b360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f9d6 	bl	800b728 <HAL_TIM_IC_CaptureCallback>
 800b37c:	e005      	b.n	800b38a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9c8 	bl	800b714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f9d9 	bl	800b73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	d122      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d11b      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f06f 0204 	mvn.w	r2, #4
 800b3b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f9ac 	bl	800b728 <HAL_TIM_IC_CaptureCallback>
 800b3d0:	e005      	b.n	800b3de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f99e 	bl	800b714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f9af 	bl	800b73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	f003 0308 	and.w	r3, r3, #8
 800b3ee:	2b08      	cmp	r3, #8
 800b3f0:	d122      	bne.n	800b438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f003 0308 	and.w	r3, r3, #8
 800b3fc:	2b08      	cmp	r3, #8
 800b3fe:	d11b      	bne.n	800b438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f06f 0208 	mvn.w	r2, #8
 800b408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2204      	movs	r2, #4
 800b40e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	f003 0303 	and.w	r3, r3, #3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f982 	bl	800b728 <HAL_TIM_IC_CaptureCallback>
 800b424:	e005      	b.n	800b432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f974 	bl	800b714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f985 	bl	800b73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	f003 0310 	and.w	r3, r3, #16
 800b442:	2b10      	cmp	r3, #16
 800b444:	d122      	bne.n	800b48c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	f003 0310 	and.w	r3, r3, #16
 800b450:	2b10      	cmp	r3, #16
 800b452:	d11b      	bne.n	800b48c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f06f 0210 	mvn.w	r2, #16
 800b45c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2208      	movs	r2, #8
 800b462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f958 	bl	800b728 <HAL_TIM_IC_CaptureCallback>
 800b478:	e005      	b.n	800b486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f94a 	bl	800b714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f95b 	bl	800b73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	2b01      	cmp	r3, #1
 800b498:	d10e      	bne.n	800b4b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d107      	bne.n	800b4b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f06f 0201 	mvn.w	r2, #1
 800b4b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7f5 fe80 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c2:	2b80      	cmp	r3, #128	; 0x80
 800b4c4:	d10e      	bne.n	800b4e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4d0:	2b80      	cmp	r3, #128	; 0x80
 800b4d2:	d107      	bne.n	800b4e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fb0a 	bl	800baf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f2:	d10e      	bne.n	800b512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	2b80      	cmp	r3, #128	; 0x80
 800b500:	d107      	bne.n	800b512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fafd 	bl	800bb0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51c:	2b40      	cmp	r3, #64	; 0x40
 800b51e:	d10e      	bne.n	800b53e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d107      	bne.n	800b53e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f909 	bl	800b750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	f003 0320 	and.w	r3, r3, #32
 800b548:	2b20      	cmp	r3, #32
 800b54a:	d10e      	bne.n	800b56a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f003 0320 	and.w	r3, r3, #32
 800b556:	2b20      	cmp	r3, #32
 800b558:	d107      	bne.n	800b56a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f06f 0220 	mvn.w	r2, #32
 800b562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fabd 	bl	800bae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b56a:	bf00      	nop
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
	...

0800b574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_TIM_ConfigClockSource+0x18>
 800b588:	2302      	movs	r3, #2
 800b58a:	e0b7      	b.n	800b6fc <HAL_TIM_ConfigClockSource+0x188>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4b57      	ldr	r3, [pc, #348]	; (800b704 <HAL_TIM_ConfigClockSource+0x190>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b70      	cmp	r3, #112	; 0x70
 800b5c2:	d02e      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0xae>
 800b5c4:	2b70      	cmp	r3, #112	; 0x70
 800b5c6:	d812      	bhi.n	800b5ee <HAL_TIM_ConfigClockSource+0x7a>
 800b5c8:	2b30      	cmp	r3, #48	; 0x30
 800b5ca:	f000 8084 	beq.w	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b5ce:	2b30      	cmp	r3, #48	; 0x30
 800b5d0:	d806      	bhi.n	800b5e0 <HAL_TIM_ConfigClockSource+0x6c>
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d07f      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b5d6:	2b20      	cmp	r3, #32
 800b5d8:	d07d      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d07b      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b5de:	e084      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b5e0:	2b50      	cmp	r3, #80	; 0x50
 800b5e2:	d048      	beq.n	800b676 <HAL_TIM_ConfigClockSource+0x102>
 800b5e4:	2b60      	cmp	r3, #96	; 0x60
 800b5e6:	d056      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x122>
 800b5e8:	2b40      	cmp	r3, #64	; 0x40
 800b5ea:	d064      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800b5ec:	e07d      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b5ee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5f2:	d070      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b5f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b5f8:	d809      	bhi.n	800b60e <HAL_TIM_ConfigClockSource+0x9a>
 800b5fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5fe:	d027      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0xdc>
 800b600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b604:	d067      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b60a:	d06d      	beq.n	800b6e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b60c:	e06d      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800b60e:	4a3e      	ldr	r2, [pc, #248]	; (800b708 <HAL_TIM_ConfigClockSource+0x194>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d060      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b614:	4a3d      	ldr	r2, [pc, #244]	; (800b70c <HAL_TIM_ConfigClockSource+0x198>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d05d      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
 800b61a:	4a3d      	ldr	r2, [pc, #244]	; (800b710 <HAL_TIM_ConfigClockSource+0x19c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d05a      	beq.n	800b6d6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800b620:	e063      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	6899      	ldr	r1, [r3, #8]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f000 f9af 	bl	800b994 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	609a      	str	r2, [r3, #8]
      break;
 800b64e:	e04c      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	6899      	ldr	r1, [r3, #8]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f000 f998 	bl	800b994 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b672:	609a      	str	r2, [r3, #8]
      break;
 800b674:	e039      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	6859      	ldr	r1, [r3, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	461a      	mov	r2, r3
 800b684:	f000 f908 	bl	800b898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2150      	movs	r1, #80	; 0x50
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f962 	bl	800b958 <TIM_ITRx_SetConfig>
      break;
 800b694:	e029      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	6859      	ldr	r1, [r3, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f000 f927 	bl	800b8f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2160      	movs	r1, #96	; 0x60
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 f952 	bl	800b958 <TIM_ITRx_SetConfig>
      break;
 800b6b4:	e019      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	6859      	ldr	r1, [r3, #4]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f000 f8e8 	bl	800b898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2140      	movs	r1, #64	; 0x40
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 f942 	bl	800b958 <TIM_ITRx_SetConfig>
      break;
 800b6d4:	e009      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f000 f939 	bl	800b958 <TIM_ITRx_SetConfig>
      break;
 800b6e6:	e000      	b.n	800b6ea <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b6e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	ffceff88 	.word	0xffceff88
 800b708:	00100030 	.word	0x00100030
 800b70c:	00100040 	.word	0x00100040
 800b710:	00100020 	.word	0x00100020

0800b714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a40      	ldr	r2, [pc, #256]	; (800b878 <TIM_Base_SetConfig+0x114>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d013      	beq.n	800b7a4 <TIM_Base_SetConfig+0x40>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b782:	d00f      	beq.n	800b7a4 <TIM_Base_SetConfig+0x40>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a3d      	ldr	r2, [pc, #244]	; (800b87c <TIM_Base_SetConfig+0x118>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d00b      	beq.n	800b7a4 <TIM_Base_SetConfig+0x40>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a3c      	ldr	r2, [pc, #240]	; (800b880 <TIM_Base_SetConfig+0x11c>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d007      	beq.n	800b7a4 <TIM_Base_SetConfig+0x40>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a3b      	ldr	r2, [pc, #236]	; (800b884 <TIM_Base_SetConfig+0x120>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d003      	beq.n	800b7a4 <TIM_Base_SetConfig+0x40>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a3a      	ldr	r2, [pc, #232]	; (800b888 <TIM_Base_SetConfig+0x124>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d108      	bne.n	800b7b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a2f      	ldr	r2, [pc, #188]	; (800b878 <TIM_Base_SetConfig+0x114>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d01f      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c4:	d01b      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a2c      	ldr	r2, [pc, #176]	; (800b87c <TIM_Base_SetConfig+0x118>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d017      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a2b      	ldr	r2, [pc, #172]	; (800b880 <TIM_Base_SetConfig+0x11c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d013      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a2a      	ldr	r2, [pc, #168]	; (800b884 <TIM_Base_SetConfig+0x120>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d00f      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a29      	ldr	r2, [pc, #164]	; (800b888 <TIM_Base_SetConfig+0x124>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00b      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a28      	ldr	r2, [pc, #160]	; (800b88c <TIM_Base_SetConfig+0x128>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d007      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a27      	ldr	r2, [pc, #156]	; (800b890 <TIM_Base_SetConfig+0x12c>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d003      	beq.n	800b7fe <TIM_Base_SetConfig+0x9a>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a26      	ldr	r2, [pc, #152]	; (800b894 <TIM_Base_SetConfig+0x130>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d108      	bne.n	800b810 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	689a      	ldr	r2, [r3, #8]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a10      	ldr	r2, [pc, #64]	; (800b878 <TIM_Base_SetConfig+0x114>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d00f      	beq.n	800b85c <TIM_Base_SetConfig+0xf8>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a12      	ldr	r2, [pc, #72]	; (800b888 <TIM_Base_SetConfig+0x124>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d00b      	beq.n	800b85c <TIM_Base_SetConfig+0xf8>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a11      	ldr	r2, [pc, #68]	; (800b88c <TIM_Base_SetConfig+0x128>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d007      	beq.n	800b85c <TIM_Base_SetConfig+0xf8>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a10      	ldr	r2, [pc, #64]	; (800b890 <TIM_Base_SetConfig+0x12c>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d003      	beq.n	800b85c <TIM_Base_SetConfig+0xf8>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a0f      	ldr	r2, [pc, #60]	; (800b894 <TIM_Base_SetConfig+0x130>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d103      	bne.n	800b864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	691a      	ldr	r2, [r3, #16]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	615a      	str	r2, [r3, #20]
}
 800b86a:	bf00      	nop
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	40010000 	.word	0x40010000
 800b87c:	40000400 	.word	0x40000400
 800b880:	40000800 	.word	0x40000800
 800b884:	40000c00 	.word	0x40000c00
 800b888:	40010400 	.word	0x40010400
 800b88c:	40014000 	.word	0x40014000
 800b890:	40014400 	.word	0x40014400
 800b894:	40014800 	.word	0x40014800

0800b898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	f023 0201 	bic.w	r2, r3, #1
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	011b      	lsls	r3, r3, #4
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f023 030a 	bic.w	r3, r3, #10
 800b8d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	621a      	str	r2, [r3, #32]
}
 800b8ea:	bf00      	nop
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b087      	sub	sp, #28
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	f023 0210 	bic.w	r2, r3, #16
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a1b      	ldr	r3, [r3, #32]
 800b918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	031b      	lsls	r3, r3, #12
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	4313      	orrs	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	621a      	str	r2, [r3, #32]
}
 800b94a:	bf00      	nop
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <TIM_ITRx_SetConfig+0x38>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4313      	orrs	r3, r2
 800b976:	f043 0307 	orr.w	r3, r3, #7
 800b97a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	609a      	str	r2, [r3, #8]
}
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	ffcfff8f 	.word	0xffcfff8f

0800b994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	021a      	lsls	r2, r3, #8
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	431a      	orrs	r2, r3
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	609a      	str	r2, [r3, #8]
}
 800b9c8:	bf00      	nop
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d101      	bne.n	800b9ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	e068      	b.n	800babe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a2e      	ldr	r2, [pc, #184]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d004      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a2d      	ldr	r2, [pc, #180]	; (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d108      	bne.n	800ba32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1e      	ldr	r2, [pc, #120]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d01d      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba5e:	d018      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1b      	ldr	r2, [pc, #108]	; (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d013      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a1a      	ldr	r2, [pc, #104]	; (800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d00e      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a18      	ldr	r2, [pc, #96]	; (800badc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d009      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a13      	ldr	r2, [pc, #76]	; (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d004      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a14      	ldr	r2, [pc, #80]	; (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d10c      	bne.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	40010000 	.word	0x40010000
 800bad0:	40010400 	.word	0x40010400
 800bad4:	40000400 	.word	0x40000400
 800bad8:	40000800 	.word	0x40000800
 800badc:	40000c00 	.word	0x40000c00
 800bae0:	40001800 	.word	0x40001800

0800bae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e042      	b.n	800bbb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7f5 fe8b 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2224      	movs	r2, #36	; 0x24
 800bb4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f022 0201 	bic.w	r2, r2, #1
 800bb60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa52 	bl	800c00c <UART_SetConfig>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d101      	bne.n	800bb72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e022      	b.n	800bbb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fff6 	bl	800cb6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	689a      	ldr	r2, [r3, #8]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f042 0201 	orr.w	r2, r2, #1
 800bbae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 f87d 	bl	800ccb0 <UART_CheckIdleState>
 800bbb6:	4603      	mov	r3, r0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d170      	bne.n	800bcba <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <HAL_UART_Receive_DMA+0x24>
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e069      	b.n	800bcbc <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_UART_Receive_DMA+0x36>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e062      	b.n	800bcbc <HAL_UART_Receive_DMA+0xfc>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2222      	movs	r2, #34	; 0x22
 800bc18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d02c      	beq.n	800bc7e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc28:	4a26      	ldr	r2, [pc, #152]	; (800bcc4 <HAL_UART_Receive_DMA+0x104>)
 800bc2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc30:	4a25      	ldr	r2, [pc, #148]	; (800bcc8 <HAL_UART_Receive_DMA+0x108>)
 800bc32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc38:	4a24      	ldr	r2, [pc, #144]	; (800bccc <HAL_UART_Receive_DMA+0x10c>)
 800bc3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc40:	2200      	movs	r2, #0
 800bc42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3324      	adds	r3, #36	; 0x24
 800bc4e:	4619      	mov	r1, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc54:	461a      	mov	r2, r3
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	f7f8 fb64 	bl	8004324 <HAL_DMA_Start_IT>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00d      	beq.n	800bc7e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2210      	movs	r2, #16
 800bc66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2220      	movs	r2, #32
 800bc76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e01e      	b.n	800bcbc <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc94:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f042 0201 	orr.w	r2, r2, #1
 800bca4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcb4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e000      	b.n	800bcbc <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800bcba:	2302      	movs	r3, #2
  }
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	0800cec5 	.word	0x0800cec5
 800bcc8:	0800cf2b 	.word	0x0800cf2b
 800bccc:	0800cf47 	.word	0x0800cf47

0800bcd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bcf0:	69fa      	ldr	r2, [r7, #28]
 800bcf2:	f640 030f 	movw	r3, #2063	; 0x80f
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d118      	bne.n	800bd32 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d013      	beq.n	800bd32 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	f003 0320 	and.w	r3, r3, #32
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d104      	bne.n	800bd1e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d009      	beq.n	800bd32 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 8145 	beq.w	800bfb2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	4798      	blx	r3
      }
      return;
 800bd30:	e13f      	b.n	800bfb2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 80e8 	beq.w	800bf0a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	4ba1      	ldr	r3, [pc, #644]	; (800bfc4 <HAL_UART_IRQHandler+0x2f4>)
 800bd3e:	4013      	ands	r3, r2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d105      	bne.n	800bd50 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	4ba0      	ldr	r3, [pc, #640]	; (800bfc8 <HAL_UART_IRQHandler+0x2f8>)
 800bd48:	4013      	ands	r3, r2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 80dd 	beq.w	800bf0a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d010      	beq.n	800bd7c <HAL_UART_IRQHandler+0xac>
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00b      	beq.n	800bd7c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd72:	f043 0201 	orr.w	r2, r3, #1
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d010      	beq.n	800bda8 <HAL_UART_IRQHandler+0xd8>
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00b      	beq.n	800bda8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2202      	movs	r2, #2
 800bd96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9e:	f043 0204 	orr.w	r2, r3, #4
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f003 0304 	and.w	r3, r3, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d010      	beq.n	800bdd4 <HAL_UART_IRQHandler+0x104>
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdca:	f043 0202 	orr.w	r2, r3, #2
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	f003 0308 	and.w	r3, r3, #8
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d015      	beq.n	800be0a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d104      	bne.n	800bdf2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	4b76      	ldr	r3, [pc, #472]	; (800bfc4 <HAL_UART_IRQHandler+0x2f4>)
 800bdec:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2208      	movs	r2, #8
 800bdf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be00:	f043 0208 	orr.w	r2, r3, #8
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be10:	2b00      	cmp	r3, #0
 800be12:	d011      	beq.n	800be38 <HAL_UART_IRQHandler+0x168>
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00c      	beq.n	800be38 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be2e:	f043 0220 	orr.w	r2, r3, #32
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 80b9 	beq.w	800bfb6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	f003 0320 	and.w	r3, r3, #32
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d011      	beq.n	800be72 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	f003 0320 	and.w	r3, r3, #32
 800be54:	2b00      	cmp	r3, #0
 800be56:	d104      	bne.n	800be62 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d007      	beq.n	800be72 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be78:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be84:	2b40      	cmp	r3, #64	; 0x40
 800be86:	d004      	beq.n	800be92 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d031      	beq.n	800bef6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fff2 	bl	800ce7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea2:	2b40      	cmp	r3, #64	; 0x40
 800bea4:	d123      	bne.n	800beee <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beb4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d013      	beq.n	800bee6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bec2:	4a42      	ldr	r2, [pc, #264]	; (800bfcc <HAL_UART_IRQHandler+0x2fc>)
 800bec4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beca:	4618      	mov	r0, r3
 800becc:	f7f8 ffb2 	bl	8004e34 <HAL_DMA_Abort_IT>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d017      	beq.n	800bf06 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee4:	e00f      	b.n	800bf06 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f886 	bl	800bff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beec:	e00b      	b.n	800bf06 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f882 	bl	800bff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef4:	e007      	b.n	800bf06 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f87e 	bl	800bff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800bf04:	e057      	b.n	800bfb6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf06:	bf00      	nop
    return;
 800bf08:	e055      	b.n	800bfb6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00d      	beq.n	800bf30 <HAL_UART_IRQHandler+0x260>
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d008      	beq.n	800bf30 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bf26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f001 f87c 	bl	800d026 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf2e:	e045      	b.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d012      	beq.n	800bf60 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d008      	beq.n	800bf60 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d031      	beq.n	800bfba <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	4798      	blx	r3
    }
    return;
 800bf5e:	e02c      	b.n	800bfba <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d008      	beq.n	800bf7c <HAL_UART_IRQHandler+0x2ac>
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 f83c 	bl	800cff2 <UART_EndTransmit_IT>
    return;
 800bf7a:	e01f      	b.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d008      	beq.n	800bf98 <HAL_UART_IRQHandler+0x2c8>
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 f85c 	bl	800d04e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf96:	e011      	b.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00c      	beq.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	da09      	bge.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 f846 	bl	800d03a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfae:	bf00      	nop
 800bfb0:	e004      	b.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
      return;
 800bfb2:	bf00      	nop
 800bfb4:	e002      	b.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
    return;
 800bfb6:	bf00      	nop
 800bfb8:	e000      	b.n	800bfbc <HAL_UART_IRQHandler+0x2ec>
    return;
 800bfba:	bf00      	nop
  }
}
 800bfbc:	3720      	adds	r7, #32
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	10000001 	.word	0x10000001
 800bfc8:	04000120 	.word	0x04000120
 800bfcc:	0800cfc7 	.word	0x0800cfc7

0800bfd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c00c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c010:	b08e      	sub	sp, #56	; 0x38
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	431a      	orrs	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	431a      	orrs	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	69db      	ldr	r3, [r3, #28]
 800c030:	4313      	orrs	r3, r2
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c03a:	4313      	orrs	r3, r2
 800c03c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	4bc1      	ldr	r3, [pc, #772]	; (800c34c <UART_SetConfig+0x340>)
 800c046:	4013      	ands	r3, r2
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	6812      	ldr	r2, [r2, #0]
 800c04c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c04e:	430b      	orrs	r3, r1
 800c050:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	430a      	orrs	r2, r1
 800c066:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4ab7      	ldr	r2, [pc, #732]	; (800c350 <UART_SetConfig+0x344>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d004      	beq.n	800c082 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c07e:	4313      	orrs	r3, r2
 800c080:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	4bb2      	ldr	r3, [pc, #712]	; (800c354 <UART_SetConfig+0x348>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	6812      	ldr	r2, [r2, #0]
 800c090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c092:	430b      	orrs	r3, r1
 800c094:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	f023 010f 	bic.w	r1, r3, #15
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4aa9      	ldr	r2, [pc, #676]	; (800c358 <UART_SetConfig+0x34c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d177      	bne.n	800c1a6 <UART_SetConfig+0x19a>
 800c0b6:	4ba9      	ldr	r3, [pc, #676]	; (800c35c <UART_SetConfig+0x350>)
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0be:	2b28      	cmp	r3, #40	; 0x28
 800c0c0:	d86c      	bhi.n	800c19c <UART_SetConfig+0x190>
 800c0c2:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <UART_SetConfig+0xbc>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c16d 	.word	0x0800c16d
 800c0cc:	0800c19d 	.word	0x0800c19d
 800c0d0:	0800c19d 	.word	0x0800c19d
 800c0d4:	0800c19d 	.word	0x0800c19d
 800c0d8:	0800c19d 	.word	0x0800c19d
 800c0dc:	0800c19d 	.word	0x0800c19d
 800c0e0:	0800c19d 	.word	0x0800c19d
 800c0e4:	0800c19d 	.word	0x0800c19d
 800c0e8:	0800c175 	.word	0x0800c175
 800c0ec:	0800c19d 	.word	0x0800c19d
 800c0f0:	0800c19d 	.word	0x0800c19d
 800c0f4:	0800c19d 	.word	0x0800c19d
 800c0f8:	0800c19d 	.word	0x0800c19d
 800c0fc:	0800c19d 	.word	0x0800c19d
 800c100:	0800c19d 	.word	0x0800c19d
 800c104:	0800c19d 	.word	0x0800c19d
 800c108:	0800c17d 	.word	0x0800c17d
 800c10c:	0800c19d 	.word	0x0800c19d
 800c110:	0800c19d 	.word	0x0800c19d
 800c114:	0800c19d 	.word	0x0800c19d
 800c118:	0800c19d 	.word	0x0800c19d
 800c11c:	0800c19d 	.word	0x0800c19d
 800c120:	0800c19d 	.word	0x0800c19d
 800c124:	0800c19d 	.word	0x0800c19d
 800c128:	0800c185 	.word	0x0800c185
 800c12c:	0800c19d 	.word	0x0800c19d
 800c130:	0800c19d 	.word	0x0800c19d
 800c134:	0800c19d 	.word	0x0800c19d
 800c138:	0800c19d 	.word	0x0800c19d
 800c13c:	0800c19d 	.word	0x0800c19d
 800c140:	0800c19d 	.word	0x0800c19d
 800c144:	0800c19d 	.word	0x0800c19d
 800c148:	0800c18d 	.word	0x0800c18d
 800c14c:	0800c19d 	.word	0x0800c19d
 800c150:	0800c19d 	.word	0x0800c19d
 800c154:	0800c19d 	.word	0x0800c19d
 800c158:	0800c19d 	.word	0x0800c19d
 800c15c:	0800c19d 	.word	0x0800c19d
 800c160:	0800c19d 	.word	0x0800c19d
 800c164:	0800c19d 	.word	0x0800c19d
 800c168:	0800c195 	.word	0x0800c195
 800c16c:	2301      	movs	r3, #1
 800c16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c172:	e233      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c174:	2304      	movs	r3, #4
 800c176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17a:	e22f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c17c:	2308      	movs	r3, #8
 800c17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c182:	e22b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c184:	2310      	movs	r3, #16
 800c186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18a:	e227      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c18c:	2320      	movs	r3, #32
 800c18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c192:	e223      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c194:	2340      	movs	r3, #64	; 0x40
 800c196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19a:	e21f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c19c:	2380      	movs	r3, #128	; 0x80
 800c19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1a2:	bf00      	nop
 800c1a4:	e21a      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a6d      	ldr	r2, [pc, #436]	; (800c360 <UART_SetConfig+0x354>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d132      	bne.n	800c216 <UART_SetConfig+0x20a>
 800c1b0:	4b6a      	ldr	r3, [pc, #424]	; (800c35c <UART_SetConfig+0x350>)
 800c1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b4:	f003 0307 	and.w	r3, r3, #7
 800c1b8:	2b05      	cmp	r3, #5
 800c1ba:	d827      	bhi.n	800c20c <UART_SetConfig+0x200>
 800c1bc:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <UART_SetConfig+0x1b8>)
 800c1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c2:	bf00      	nop
 800c1c4:	0800c1dd 	.word	0x0800c1dd
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1ed 	.word	0x0800c1ed
 800c1d0:	0800c1f5 	.word	0x0800c1f5
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c205 	.word	0x0800c205
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1e2:	e1fb      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c1e4:	2304      	movs	r3, #4
 800c1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ea:	e1f7      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c1ec:	2308      	movs	r3, #8
 800c1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f2:	e1f3      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c1f4:	2310      	movs	r3, #16
 800c1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fa:	e1ef      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c1fc:	2320      	movs	r3, #32
 800c1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c202:	e1eb      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c204:	2340      	movs	r3, #64	; 0x40
 800c206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c20a:	e1e7      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c20c:	2380      	movs	r3, #128	; 0x80
 800c20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c212:	bf00      	nop
 800c214:	e1e2      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a52      	ldr	r2, [pc, #328]	; (800c364 <UART_SetConfig+0x358>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d132      	bne.n	800c286 <UART_SetConfig+0x27a>
 800c220:	4b4e      	ldr	r3, [pc, #312]	; (800c35c <UART_SetConfig+0x350>)
 800c222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c224:	f003 0307 	and.w	r3, r3, #7
 800c228:	2b05      	cmp	r3, #5
 800c22a:	d827      	bhi.n	800c27c <UART_SetConfig+0x270>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <UART_SetConfig+0x228>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c24d 	.word	0x0800c24d
 800c238:	0800c255 	.word	0x0800c255
 800c23c:	0800c25d 	.word	0x0800c25d
 800c240:	0800c265 	.word	0x0800c265
 800c244:	0800c26d 	.word	0x0800c26d
 800c248:	0800c275 	.word	0x0800c275
 800c24c:	2300      	movs	r3, #0
 800c24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c252:	e1c3      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c254:	2304      	movs	r3, #4
 800c256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c25a:	e1bf      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c25c:	2308      	movs	r3, #8
 800c25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c262:	e1bb      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c264:	2310      	movs	r3, #16
 800c266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c26a:	e1b7      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c26c:	2320      	movs	r3, #32
 800c26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c272:	e1b3      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c274:	2340      	movs	r3, #64	; 0x40
 800c276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c27a:	e1af      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c27c:	2380      	movs	r3, #128	; 0x80
 800c27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c282:	bf00      	nop
 800c284:	e1aa      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a37      	ldr	r2, [pc, #220]	; (800c368 <UART_SetConfig+0x35c>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d132      	bne.n	800c2f6 <UART_SetConfig+0x2ea>
 800c290:	4b32      	ldr	r3, [pc, #200]	; (800c35c <UART_SetConfig+0x350>)
 800c292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c294:	f003 0307 	and.w	r3, r3, #7
 800c298:	2b05      	cmp	r3, #5
 800c29a:	d827      	bhi.n	800c2ec <UART_SetConfig+0x2e0>
 800c29c:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <UART_SetConfig+0x298>)
 800c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a2:	bf00      	nop
 800c2a4:	0800c2bd 	.word	0x0800c2bd
 800c2a8:	0800c2c5 	.word	0x0800c2c5
 800c2ac:	0800c2cd 	.word	0x0800c2cd
 800c2b0:	0800c2d5 	.word	0x0800c2d5
 800c2b4:	0800c2dd 	.word	0x0800c2dd
 800c2b8:	0800c2e5 	.word	0x0800c2e5
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c2:	e18b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ca:	e187      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2cc:	2308      	movs	r3, #8
 800c2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d2:	e183      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2da:	e17f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e2:	e17b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2e4:	2340      	movs	r3, #64	; 0x40
 800c2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ea:	e177      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2ec:	2380      	movs	r3, #128	; 0x80
 800c2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2f2:	bf00      	nop
 800c2f4:	e172      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a1c      	ldr	r2, [pc, #112]	; (800c36c <UART_SetConfig+0x360>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d144      	bne.n	800c38a <UART_SetConfig+0x37e>
 800c300:	4b16      	ldr	r3, [pc, #88]	; (800c35c <UART_SetConfig+0x350>)
 800c302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	2b05      	cmp	r3, #5
 800c30a:	d839      	bhi.n	800c380 <UART_SetConfig+0x374>
 800c30c:	a201      	add	r2, pc, #4	; (adr r2, 800c314 <UART_SetConfig+0x308>)
 800c30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c312:	bf00      	nop
 800c314:	0800c32d 	.word	0x0800c32d
 800c318:	0800c335 	.word	0x0800c335
 800c31c:	0800c33d 	.word	0x0800c33d
 800c320:	0800c345 	.word	0x0800c345
 800c324:	0800c371 	.word	0x0800c371
 800c328:	0800c379 	.word	0x0800c379
 800c32c:	2300      	movs	r3, #0
 800c32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c332:	e153      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c334:	2304      	movs	r3, #4
 800c336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33a:	e14f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c33c:	2308      	movs	r3, #8
 800c33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c342:	e14b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c344:	2310      	movs	r3, #16
 800c346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c34a:	e147      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c34c:	cfff69f3 	.word	0xcfff69f3
 800c350:	58000c00 	.word	0x58000c00
 800c354:	11fff4ff 	.word	0x11fff4ff
 800c358:	40011000 	.word	0x40011000
 800c35c:	58024400 	.word	0x58024400
 800c360:	40004400 	.word	0x40004400
 800c364:	40004800 	.word	0x40004800
 800c368:	40004c00 	.word	0x40004c00
 800c36c:	40005000 	.word	0x40005000
 800c370:	2320      	movs	r3, #32
 800c372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c376:	e131      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c378:	2340      	movs	r3, #64	; 0x40
 800c37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c37e:	e12d      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c380:	2380      	movs	r3, #128	; 0x80
 800c382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c386:	bf00      	nop
 800c388:	e128      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4ab6      	ldr	r2, [pc, #728]	; (800c668 <UART_SetConfig+0x65c>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d178      	bne.n	800c486 <UART_SetConfig+0x47a>
 800c394:	4bb5      	ldr	r3, [pc, #724]	; (800c66c <UART_SetConfig+0x660>)
 800c396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c39c:	2b28      	cmp	r3, #40	; 0x28
 800c39e:	d86d      	bhi.n	800c47c <UART_SetConfig+0x470>
 800c3a0:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <UART_SetConfig+0x39c>)
 800c3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a6:	bf00      	nop
 800c3a8:	0800c44d 	.word	0x0800c44d
 800c3ac:	0800c47d 	.word	0x0800c47d
 800c3b0:	0800c47d 	.word	0x0800c47d
 800c3b4:	0800c47d 	.word	0x0800c47d
 800c3b8:	0800c47d 	.word	0x0800c47d
 800c3bc:	0800c47d 	.word	0x0800c47d
 800c3c0:	0800c47d 	.word	0x0800c47d
 800c3c4:	0800c47d 	.word	0x0800c47d
 800c3c8:	0800c455 	.word	0x0800c455
 800c3cc:	0800c47d 	.word	0x0800c47d
 800c3d0:	0800c47d 	.word	0x0800c47d
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c47d 	.word	0x0800c47d
 800c3dc:	0800c47d 	.word	0x0800c47d
 800c3e0:	0800c47d 	.word	0x0800c47d
 800c3e4:	0800c47d 	.word	0x0800c47d
 800c3e8:	0800c45d 	.word	0x0800c45d
 800c3ec:	0800c47d 	.word	0x0800c47d
 800c3f0:	0800c47d 	.word	0x0800c47d
 800c3f4:	0800c47d 	.word	0x0800c47d
 800c3f8:	0800c47d 	.word	0x0800c47d
 800c3fc:	0800c47d 	.word	0x0800c47d
 800c400:	0800c47d 	.word	0x0800c47d
 800c404:	0800c47d 	.word	0x0800c47d
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c47d 	.word	0x0800c47d
 800c410:	0800c47d 	.word	0x0800c47d
 800c414:	0800c47d 	.word	0x0800c47d
 800c418:	0800c47d 	.word	0x0800c47d
 800c41c:	0800c47d 	.word	0x0800c47d
 800c420:	0800c47d 	.word	0x0800c47d
 800c424:	0800c47d 	.word	0x0800c47d
 800c428:	0800c46d 	.word	0x0800c46d
 800c42c:	0800c47d 	.word	0x0800c47d
 800c430:	0800c47d 	.word	0x0800c47d
 800c434:	0800c47d 	.word	0x0800c47d
 800c438:	0800c47d 	.word	0x0800c47d
 800c43c:	0800c47d 	.word	0x0800c47d
 800c440:	0800c47d 	.word	0x0800c47d
 800c444:	0800c47d 	.word	0x0800c47d
 800c448:	0800c475 	.word	0x0800c475
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e0c3      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e0bf      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e0bb      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e0b7      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c46c:	2320      	movs	r3, #32
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	e0b3      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c474:	2340      	movs	r3, #64	; 0x40
 800c476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47a:	e0af      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c47c:	2380      	movs	r3, #128	; 0x80
 800c47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c482:	bf00      	nop
 800c484:	e0aa      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a79      	ldr	r2, [pc, #484]	; (800c670 <UART_SetConfig+0x664>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d132      	bne.n	800c4f6 <UART_SetConfig+0x4ea>
 800c490:	4b76      	ldr	r3, [pc, #472]	; (800c66c <UART_SetConfig+0x660>)
 800c492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c494:	f003 0307 	and.w	r3, r3, #7
 800c498:	2b05      	cmp	r3, #5
 800c49a:	d827      	bhi.n	800c4ec <UART_SetConfig+0x4e0>
 800c49c:	a201      	add	r2, pc, #4	; (adr r2, 800c4a4 <UART_SetConfig+0x498>)
 800c49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a2:	bf00      	nop
 800c4a4:	0800c4bd 	.word	0x0800c4bd
 800c4a8:	0800c4c5 	.word	0x0800c4c5
 800c4ac:	0800c4cd 	.word	0x0800c4cd
 800c4b0:	0800c4d5 	.word	0x0800c4d5
 800c4b4:	0800c4dd 	.word	0x0800c4dd
 800c4b8:	0800c4e5 	.word	0x0800c4e5
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c2:	e08b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4c4:	2304      	movs	r3, #4
 800c4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ca:	e087      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4cc:	2308      	movs	r3, #8
 800c4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d2:	e083      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4da:	e07f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4dc:	2320      	movs	r3, #32
 800c4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e2:	e07b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4e4:	2340      	movs	r3, #64	; 0x40
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ea:	e077      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4ec:	2380      	movs	r3, #128	; 0x80
 800c4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4f2:	bf00      	nop
 800c4f4:	e072      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a5e      	ldr	r2, [pc, #376]	; (800c674 <UART_SetConfig+0x668>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d132      	bne.n	800c566 <UART_SetConfig+0x55a>
 800c500:	4b5a      	ldr	r3, [pc, #360]	; (800c66c <UART_SetConfig+0x660>)
 800c502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c504:	f003 0307 	and.w	r3, r3, #7
 800c508:	2b05      	cmp	r3, #5
 800c50a:	d827      	bhi.n	800c55c <UART_SetConfig+0x550>
 800c50c:	a201      	add	r2, pc, #4	; (adr r2, 800c514 <UART_SetConfig+0x508>)
 800c50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c512:	bf00      	nop
 800c514:	0800c52d 	.word	0x0800c52d
 800c518:	0800c535 	.word	0x0800c535
 800c51c:	0800c53d 	.word	0x0800c53d
 800c520:	0800c545 	.word	0x0800c545
 800c524:	0800c54d 	.word	0x0800c54d
 800c528:	0800c555 	.word	0x0800c555
 800c52c:	2300      	movs	r3, #0
 800c52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c532:	e053      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c534:	2304      	movs	r3, #4
 800c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53a:	e04f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c53c:	2308      	movs	r3, #8
 800c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c542:	e04b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c544:	2310      	movs	r3, #16
 800c546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c54a:	e047      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c54c:	2320      	movs	r3, #32
 800c54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c552:	e043      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c554:	2340      	movs	r3, #64	; 0x40
 800c556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c55a:	e03f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c55c:	2380      	movs	r3, #128	; 0x80
 800c55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c562:	bf00      	nop
 800c564:	e03a      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a43      	ldr	r2, [pc, #268]	; (800c678 <UART_SetConfig+0x66c>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d132      	bne.n	800c5d6 <UART_SetConfig+0x5ca>
 800c570:	4b3e      	ldr	r3, [pc, #248]	; (800c66c <UART_SetConfig+0x660>)
 800c572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c574:	f003 0307 	and.w	r3, r3, #7
 800c578:	2b05      	cmp	r3, #5
 800c57a:	d827      	bhi.n	800c5cc <UART_SetConfig+0x5c0>
 800c57c:	a201      	add	r2, pc, #4	; (adr r2, 800c584 <UART_SetConfig+0x578>)
 800c57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c582:	bf00      	nop
 800c584:	0800c59d 	.word	0x0800c59d
 800c588:	0800c5a5 	.word	0x0800c5a5
 800c58c:	0800c5ad 	.word	0x0800c5ad
 800c590:	0800c5b5 	.word	0x0800c5b5
 800c594:	0800c5bd 	.word	0x0800c5bd
 800c598:	0800c5c5 	.word	0x0800c5c5
 800c59c:	2302      	movs	r3, #2
 800c59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a2:	e01b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5a4:	2304      	movs	r3, #4
 800c5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5aa:	e017      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5ac:	2308      	movs	r3, #8
 800c5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5b2:	e013      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ba:	e00f      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5bc:	2320      	movs	r3, #32
 800c5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5c2:	e00b      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5c4:	2340      	movs	r3, #64	; 0x40
 800c5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ca:	e007      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5cc:	2380      	movs	r3, #128	; 0x80
 800c5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d2:	bf00      	nop
 800c5d4:	e002      	b.n	800c5dc <UART_SetConfig+0x5d0>
 800c5d6:	2380      	movs	r3, #128	; 0x80
 800c5d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a25      	ldr	r2, [pc, #148]	; (800c678 <UART_SetConfig+0x66c>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	f040 80b8 	bne.w	800c758 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d019      	beq.n	800c624 <UART_SetConfig+0x618>
 800c5f0:	2b08      	cmp	r3, #8
 800c5f2:	dc04      	bgt.n	800c5fe <UART_SetConfig+0x5f2>
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d009      	beq.n	800c60c <UART_SetConfig+0x600>
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d00b      	beq.n	800c614 <UART_SetConfig+0x608>
 800c5fc:	e042      	b.n	800c684 <UART_SetConfig+0x678>
 800c5fe:	2b20      	cmp	r3, #32
 800c600:	d02b      	beq.n	800c65a <UART_SetConfig+0x64e>
 800c602:	2b40      	cmp	r3, #64	; 0x40
 800c604:	d02c      	beq.n	800c660 <UART_SetConfig+0x654>
 800c606:	2b10      	cmp	r3, #16
 800c608:	d014      	beq.n	800c634 <UART_SetConfig+0x628>
 800c60a:	e03b      	b.n	800c684 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c60c:	f7fc fca8 	bl	8008f60 <HAL_RCCEx_GetD3PCLK1Freq>
 800c610:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c612:	e03d      	b.n	800c690 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c614:	f107 0314 	add.w	r3, r7, #20
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fc fcb7 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c622:	e035      	b.n	800c690 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c624:	f107 0308 	add.w	r3, r7, #8
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fc fdfb 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c632:	e02d      	b.n	800c690 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c634:	4b0d      	ldr	r3, [pc, #52]	; (800c66c <UART_SetConfig+0x660>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 0320 	and.w	r3, r3, #32
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d009      	beq.n	800c654 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c640:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <UART_SetConfig+0x660>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	08db      	lsrs	r3, r3, #3
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	4a0c      	ldr	r2, [pc, #48]	; (800c67c <UART_SetConfig+0x670>)
 800c64c:	fa22 f303 	lsr.w	r3, r2, r3
 800c650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c652:	e01d      	b.n	800c690 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <UART_SetConfig+0x670>)
 800c656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c658:	e01a      	b.n	800c690 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c65a:	4b09      	ldr	r3, [pc, #36]	; (800c680 <UART_SetConfig+0x674>)
 800c65c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c65e:	e017      	b.n	800c690 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c666:	e013      	b.n	800c690 <UART_SetConfig+0x684>
 800c668:	40011400 	.word	0x40011400
 800c66c:	58024400 	.word	0x58024400
 800c670:	40007800 	.word	0x40007800
 800c674:	40007c00 	.word	0x40007c00
 800c678:	58000c00 	.word	0x58000c00
 800c67c:	03d09000 	.word	0x03d09000
 800c680:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c68e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 824d 	beq.w	800cb32 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69c:	4aad      	ldr	r2, [pc, #692]	; (800c954 <UART_SetConfig+0x948>)
 800c69e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6aa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	6a3a      	ldr	r2, [r7, #32]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d305      	bcc.n	800c6c8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6c2:	6a3a      	ldr	r2, [r7, #32]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d903      	bls.n	800c6d0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c6ce:	e230      	b.n	800cb32 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f04f 0100 	mov.w	r1, #0
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6dc:	4a9d      	ldr	r2, [pc, #628]	; (800c954 <UART_SetConfig+0x948>)
 800c6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	f04f 0400 	mov.w	r4, #0
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	4623      	mov	r3, r4
 800c6ec:	f7f3 fe48 	bl	8000380 <__aeabi_uldivmod>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	f04f 0300 	mov.w	r3, #0
 800c6fc:	f04f 0400 	mov.w	r4, #0
 800c700:	0214      	lsls	r4, r2, #8
 800c702:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c706:	020b      	lsls	r3, r1, #8
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	6852      	ldr	r2, [r2, #4]
 800c70c:	0852      	lsrs	r2, r2, #1
 800c70e:	4611      	mov	r1, r2
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	eb13 0b01 	adds.w	fp, r3, r1
 800c718:	eb44 0c02 	adc.w	ip, r4, r2
 800c71c:	4658      	mov	r0, fp
 800c71e:	4661      	mov	r1, ip
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	f04f 0400 	mov.w	r4, #0
 800c728:	461a      	mov	r2, r3
 800c72a:	4623      	mov	r3, r4
 800c72c:	f7f3 fe28 	bl	8000380 <__aeabi_uldivmod>
 800c730:	4603      	mov	r3, r0
 800c732:	460c      	mov	r4, r1
 800c734:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c73c:	d308      	bcc.n	800c750 <UART_SetConfig+0x744>
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c744:	d204      	bcs.n	800c750 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	e1f0      	b.n	800cb32 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c756:	e1ec      	b.n	800cb32 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	69db      	ldr	r3, [r3, #28]
 800c75c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c760:	f040 8100 	bne.w	800c964 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c768:	2b40      	cmp	r3, #64	; 0x40
 800c76a:	f200 80b7 	bhi.w	800c8dc <UART_SetConfig+0x8d0>
 800c76e:	a201      	add	r2, pc, #4	; (adr r2, 800c774 <UART_SetConfig+0x768>)
 800c770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c774:	0800c879 	.word	0x0800c879
 800c778:	0800c881 	.word	0x0800c881
 800c77c:	0800c8dd 	.word	0x0800c8dd
 800c780:	0800c8dd 	.word	0x0800c8dd
 800c784:	0800c889 	.word	0x0800c889
 800c788:	0800c8dd 	.word	0x0800c8dd
 800c78c:	0800c8dd 	.word	0x0800c8dd
 800c790:	0800c8dd 	.word	0x0800c8dd
 800c794:	0800c899 	.word	0x0800c899
 800c798:	0800c8dd 	.word	0x0800c8dd
 800c79c:	0800c8dd 	.word	0x0800c8dd
 800c7a0:	0800c8dd 	.word	0x0800c8dd
 800c7a4:	0800c8dd 	.word	0x0800c8dd
 800c7a8:	0800c8dd 	.word	0x0800c8dd
 800c7ac:	0800c8dd 	.word	0x0800c8dd
 800c7b0:	0800c8dd 	.word	0x0800c8dd
 800c7b4:	0800c8a9 	.word	0x0800c8a9
 800c7b8:	0800c8dd 	.word	0x0800c8dd
 800c7bc:	0800c8dd 	.word	0x0800c8dd
 800c7c0:	0800c8dd 	.word	0x0800c8dd
 800c7c4:	0800c8dd 	.word	0x0800c8dd
 800c7c8:	0800c8dd 	.word	0x0800c8dd
 800c7cc:	0800c8dd 	.word	0x0800c8dd
 800c7d0:	0800c8dd 	.word	0x0800c8dd
 800c7d4:	0800c8dd 	.word	0x0800c8dd
 800c7d8:	0800c8dd 	.word	0x0800c8dd
 800c7dc:	0800c8dd 	.word	0x0800c8dd
 800c7e0:	0800c8dd 	.word	0x0800c8dd
 800c7e4:	0800c8dd 	.word	0x0800c8dd
 800c7e8:	0800c8dd 	.word	0x0800c8dd
 800c7ec:	0800c8dd 	.word	0x0800c8dd
 800c7f0:	0800c8dd 	.word	0x0800c8dd
 800c7f4:	0800c8cf 	.word	0x0800c8cf
 800c7f8:	0800c8dd 	.word	0x0800c8dd
 800c7fc:	0800c8dd 	.word	0x0800c8dd
 800c800:	0800c8dd 	.word	0x0800c8dd
 800c804:	0800c8dd 	.word	0x0800c8dd
 800c808:	0800c8dd 	.word	0x0800c8dd
 800c80c:	0800c8dd 	.word	0x0800c8dd
 800c810:	0800c8dd 	.word	0x0800c8dd
 800c814:	0800c8dd 	.word	0x0800c8dd
 800c818:	0800c8dd 	.word	0x0800c8dd
 800c81c:	0800c8dd 	.word	0x0800c8dd
 800c820:	0800c8dd 	.word	0x0800c8dd
 800c824:	0800c8dd 	.word	0x0800c8dd
 800c828:	0800c8dd 	.word	0x0800c8dd
 800c82c:	0800c8dd 	.word	0x0800c8dd
 800c830:	0800c8dd 	.word	0x0800c8dd
 800c834:	0800c8dd 	.word	0x0800c8dd
 800c838:	0800c8dd 	.word	0x0800c8dd
 800c83c:	0800c8dd 	.word	0x0800c8dd
 800c840:	0800c8dd 	.word	0x0800c8dd
 800c844:	0800c8dd 	.word	0x0800c8dd
 800c848:	0800c8dd 	.word	0x0800c8dd
 800c84c:	0800c8dd 	.word	0x0800c8dd
 800c850:	0800c8dd 	.word	0x0800c8dd
 800c854:	0800c8dd 	.word	0x0800c8dd
 800c858:	0800c8dd 	.word	0x0800c8dd
 800c85c:	0800c8dd 	.word	0x0800c8dd
 800c860:	0800c8dd 	.word	0x0800c8dd
 800c864:	0800c8dd 	.word	0x0800c8dd
 800c868:	0800c8dd 	.word	0x0800c8dd
 800c86c:	0800c8dd 	.word	0x0800c8dd
 800c870:	0800c8dd 	.word	0x0800c8dd
 800c874:	0800c8d5 	.word	0x0800c8d5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c878:	f7fb f99e 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 800c87c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c87e:	e033      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c880:	f7fb f9b0 	bl	8007be4 <HAL_RCC_GetPCLK2Freq>
 800c884:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c886:	e02f      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c888:	f107 0314 	add.w	r3, r7, #20
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fc fb7d 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c896:	e027      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fc fcc1 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8a6:	e01f      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8a8:	4b2b      	ldr	r3, [pc, #172]	; (800c958 <UART_SetConfig+0x94c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d009      	beq.n	800c8c8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8b4:	4b28      	ldr	r3, [pc, #160]	; (800c958 <UART_SetConfig+0x94c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	08db      	lsrs	r3, r3, #3
 800c8ba:	f003 0303 	and.w	r3, r3, #3
 800c8be:	4a27      	ldr	r2, [pc, #156]	; (800c95c <UART_SetConfig+0x950>)
 800c8c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8c6:	e00f      	b.n	800c8e8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800c8c8:	4b24      	ldr	r3, [pc, #144]	; (800c95c <UART_SetConfig+0x950>)
 800c8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8cc:	e00c      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8ce:	4b24      	ldr	r3, [pc, #144]	; (800c960 <UART_SetConfig+0x954>)
 800c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8d2:	e009      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8da:	e005      	b.n	800c8e8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c8e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 8121 	beq.w	800cb32 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	4a17      	ldr	r2, [pc, #92]	; (800c954 <UART_SetConfig+0x948>)
 800c8f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800c902:	005a      	lsls	r2, r3, #1
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	085b      	lsrs	r3, r3, #1
 800c90a:	441a      	add	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	fbb2 f3f3 	udiv	r3, r2, r3
 800c914:	b29b      	uxth	r3, r3
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	2b0f      	cmp	r3, #15
 800c91c:	d916      	bls.n	800c94c <UART_SetConfig+0x940>
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c924:	d212      	bcs.n	800c94c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	b29b      	uxth	r3, r3
 800c92a:	f023 030f 	bic.w	r3, r3, #15
 800c92e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	085b      	lsrs	r3, r3, #1
 800c934:	b29b      	uxth	r3, r3
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c93e:	4313      	orrs	r3, r2
 800c940:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c948:	60da      	str	r2, [r3, #12]
 800c94a:	e0f2      	b.n	800cb32 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c952:	e0ee      	b.n	800cb32 <UART_SetConfig+0xb26>
 800c954:	0801514c 	.word	0x0801514c
 800c958:	58024400 	.word	0x58024400
 800c95c:	03d09000 	.word	0x03d09000
 800c960:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800c964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c968:	2b40      	cmp	r3, #64	; 0x40
 800c96a:	f200 80b7 	bhi.w	800cadc <UART_SetConfig+0xad0>
 800c96e:	a201      	add	r2, pc, #4	; (adr r2, 800c974 <UART_SetConfig+0x968>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800ca79 	.word	0x0800ca79
 800c978:	0800ca81 	.word	0x0800ca81
 800c97c:	0800cadd 	.word	0x0800cadd
 800c980:	0800cadd 	.word	0x0800cadd
 800c984:	0800ca89 	.word	0x0800ca89
 800c988:	0800cadd 	.word	0x0800cadd
 800c98c:	0800cadd 	.word	0x0800cadd
 800c990:	0800cadd 	.word	0x0800cadd
 800c994:	0800ca99 	.word	0x0800ca99
 800c998:	0800cadd 	.word	0x0800cadd
 800c99c:	0800cadd 	.word	0x0800cadd
 800c9a0:	0800cadd 	.word	0x0800cadd
 800c9a4:	0800cadd 	.word	0x0800cadd
 800c9a8:	0800cadd 	.word	0x0800cadd
 800c9ac:	0800cadd 	.word	0x0800cadd
 800c9b0:	0800cadd 	.word	0x0800cadd
 800c9b4:	0800caa9 	.word	0x0800caa9
 800c9b8:	0800cadd 	.word	0x0800cadd
 800c9bc:	0800cadd 	.word	0x0800cadd
 800c9c0:	0800cadd 	.word	0x0800cadd
 800c9c4:	0800cadd 	.word	0x0800cadd
 800c9c8:	0800cadd 	.word	0x0800cadd
 800c9cc:	0800cadd 	.word	0x0800cadd
 800c9d0:	0800cadd 	.word	0x0800cadd
 800c9d4:	0800cadd 	.word	0x0800cadd
 800c9d8:	0800cadd 	.word	0x0800cadd
 800c9dc:	0800cadd 	.word	0x0800cadd
 800c9e0:	0800cadd 	.word	0x0800cadd
 800c9e4:	0800cadd 	.word	0x0800cadd
 800c9e8:	0800cadd 	.word	0x0800cadd
 800c9ec:	0800cadd 	.word	0x0800cadd
 800c9f0:	0800cadd 	.word	0x0800cadd
 800c9f4:	0800cacf 	.word	0x0800cacf
 800c9f8:	0800cadd 	.word	0x0800cadd
 800c9fc:	0800cadd 	.word	0x0800cadd
 800ca00:	0800cadd 	.word	0x0800cadd
 800ca04:	0800cadd 	.word	0x0800cadd
 800ca08:	0800cadd 	.word	0x0800cadd
 800ca0c:	0800cadd 	.word	0x0800cadd
 800ca10:	0800cadd 	.word	0x0800cadd
 800ca14:	0800cadd 	.word	0x0800cadd
 800ca18:	0800cadd 	.word	0x0800cadd
 800ca1c:	0800cadd 	.word	0x0800cadd
 800ca20:	0800cadd 	.word	0x0800cadd
 800ca24:	0800cadd 	.word	0x0800cadd
 800ca28:	0800cadd 	.word	0x0800cadd
 800ca2c:	0800cadd 	.word	0x0800cadd
 800ca30:	0800cadd 	.word	0x0800cadd
 800ca34:	0800cadd 	.word	0x0800cadd
 800ca38:	0800cadd 	.word	0x0800cadd
 800ca3c:	0800cadd 	.word	0x0800cadd
 800ca40:	0800cadd 	.word	0x0800cadd
 800ca44:	0800cadd 	.word	0x0800cadd
 800ca48:	0800cadd 	.word	0x0800cadd
 800ca4c:	0800cadd 	.word	0x0800cadd
 800ca50:	0800cadd 	.word	0x0800cadd
 800ca54:	0800cadd 	.word	0x0800cadd
 800ca58:	0800cadd 	.word	0x0800cadd
 800ca5c:	0800cadd 	.word	0x0800cadd
 800ca60:	0800cadd 	.word	0x0800cadd
 800ca64:	0800cadd 	.word	0x0800cadd
 800ca68:	0800cadd 	.word	0x0800cadd
 800ca6c:	0800cadd 	.word	0x0800cadd
 800ca70:	0800cadd 	.word	0x0800cadd
 800ca74:	0800cad5 	.word	0x0800cad5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca78:	f7fb f89e 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 800ca7c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca7e:	e033      	b.n	800cae8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca80:	f7fb f8b0 	bl	8007be4 <HAL_RCC_GetPCLK2Freq>
 800ca84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca86:	e02f      	b.n	800cae8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca88:	f107 0314 	add.w	r3, r7, #20
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fc fa7d 	bl	8008f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca96:	e027      	b.n	800cae8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fc fbc1 	bl	8009224 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caa6:	e01f      	b.n	800cae8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800caa8:	4b2c      	ldr	r3, [pc, #176]	; (800cb5c <UART_SetConfig+0xb50>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0320 	and.w	r3, r3, #32
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d009      	beq.n	800cac8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cab4:	4b29      	ldr	r3, [pc, #164]	; (800cb5c <UART_SetConfig+0xb50>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	08db      	lsrs	r3, r3, #3
 800caba:	f003 0303 	and.w	r3, r3, #3
 800cabe:	4a28      	ldr	r2, [pc, #160]	; (800cb60 <UART_SetConfig+0xb54>)
 800cac0:	fa22 f303 	lsr.w	r3, r2, r3
 800cac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cac6:	e00f      	b.n	800cae8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800cac8:	4b25      	ldr	r3, [pc, #148]	; (800cb60 <UART_SetConfig+0xb54>)
 800caca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cacc:	e00c      	b.n	800cae8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cace:	4b25      	ldr	r3, [pc, #148]	; (800cb64 <UART_SetConfig+0xb58>)
 800cad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cad2:	e009      	b.n	800cae8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cada:	e005      	b.n	800cae8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800cadc:	2300      	movs	r3, #0
 800cade:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cae6:	bf00      	nop
    }

    if (pclk != 0U)
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	2b00      	cmp	r3, #0
 800caec:	d021      	beq.n	800cb32 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf2:	4a1d      	ldr	r2, [pc, #116]	; (800cb68 <UART_SetConfig+0xb5c>)
 800caf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caf8:	461a      	mov	r2, r3
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	085b      	lsrs	r3, r3, #1
 800cb06:	441a      	add	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb16:	2b0f      	cmp	r3, #15
 800cb18:	d908      	bls.n	800cb2c <UART_SetConfig+0xb20>
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb20:	d204      	bcs.n	800cb2c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb28:	60da      	str	r2, [r3, #12]
 800cb2a:	e002      	b.n	800cb32 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800cb4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3738      	adds	r7, #56	; 0x38
 800cb56:	46bd      	mov	sp, r7
 800cb58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cb5c:	58024400 	.word	0x58024400
 800cb60:	03d09000 	.word	0x03d09000
 800cb64:	003d0900 	.word	0x003d0900
 800cb68:	0801514c 	.word	0x0801514c

0800cb6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00a      	beq.n	800cb96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9a:	f003 0302 	and.w	r3, r3, #2
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00a      	beq.n	800cbb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbc:	f003 0304 	and.w	r3, r3, #4
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00a      	beq.n	800cbda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbde:	f003 0308 	and.w	r3, r3, #8
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00a      	beq.n	800cbfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc00:	f003 0310 	and.w	r3, r3, #16
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00a      	beq.n	800cc1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	430a      	orrs	r2, r1
 800cc1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc22:	f003 0320 	and.w	r3, r3, #32
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01a      	beq.n	800cc82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	430a      	orrs	r2, r1
 800cc60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc6a:	d10a      	bne.n	800cc82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00a      	beq.n	800cca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	430a      	orrs	r2, r1
 800cca2:	605a      	str	r2, [r3, #4]
  }
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af02      	add	r7, sp, #8
 800ccb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ccc0:	f7f5 f85e 	bl	8001d80 <HAL_GetTick>
 800ccc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f003 0308 	and.w	r3, r3, #8
 800ccd0:	2b08      	cmp	r3, #8
 800ccd2:	d10e      	bne.n	800ccf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f82c 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e022      	b.n	800cd38 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0304 	and.w	r3, r3, #4
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d10e      	bne.n	800cd1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f816 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	e00c      	b.n	800cd38 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2220      	movs	r2, #32
 800cd22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2220      	movs	r2, #32
 800cd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd50:	e062      	b.n	800ce18 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd58:	d05e      	beq.n	800ce18 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd5a:	f7f5 f811 	bl	8001d80 <HAL_GetTick>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d302      	bcc.n	800cd70 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d11d      	bne.n	800cdac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd7e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	689a      	ldr	r2, [r3, #8]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f022 0201 	bic.w	r2, r2, #1
 800cd8e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2220      	movs	r2, #32
 800cd94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2220      	movs	r2, #32
 800cd9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e045      	b.n	800ce38 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d02e      	beq.n	800ce18 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdc8:	d126      	bne.n	800ce18 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdd2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cde2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	689a      	ldr	r2, [r3, #8]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f022 0201 	bic.w	r2, r2, #1
 800cdf2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2220      	movs	r2, #32
 800cdf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2220      	movs	r2, #32
 800ce08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	e00f      	b.n	800ce38 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	69da      	ldr	r2, [r3, #28]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	4013      	ands	r3, r2
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	bf0c      	ite	eq
 800ce28:	2301      	moveq	r3, #1
 800ce2a:	2300      	movne	r3, #0
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	79fb      	ldrb	r3, [r7, #7]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d08d      	beq.n	800cd52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ce56:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	689a      	ldr	r2, [r3, #8]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ce66:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2220      	movs	r2, #32
 800ce6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6899      	ldr	r1, [r3, #8]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	4b08      	ldr	r3, [pc, #32]	; (800cec0 <UART_EndRxTransfer+0x44>)
 800cea0:	400b      	ands	r3, r1
 800cea2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2220      	movs	r2, #32
 800cea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ceb2:	bf00      	nop
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	effffffe 	.word	0xeffffffe

0800cec4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	69db      	ldr	r3, [r3, #28]
 800ced6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceda:	d01f      	beq.n	800cf1c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cef2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689a      	ldr	r2, [r3, #8]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0201 	bic.w	r2, r2, #1
 800cf02:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	689a      	ldr	r2, [r3, #8]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf12:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2220      	movs	r2, #32
 800cf18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7f3 fecf 	bl	8000cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf22:	bf00      	nop
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff f853 	bl	800bfe4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf3e:	bf00      	nop
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b086      	sub	sp, #24
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf52:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf6e:	2b80      	cmp	r3, #128	; 0x80
 800cf70:	d109      	bne.n	800cf86 <UART_DMAError+0x40>
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	2b21      	cmp	r3, #33	; 0x21
 800cf76:	d106      	bne.n	800cf86 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cf80:	6978      	ldr	r0, [r7, #20]
 800cf82:	f7ff ff5d 	bl	800ce40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf90:	2b40      	cmp	r3, #64	; 0x40
 800cf92:	d109      	bne.n	800cfa8 <UART_DMAError+0x62>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b22      	cmp	r3, #34	; 0x22
 800cf98:	d106      	bne.n	800cfa8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cfa2:	6978      	ldr	r0, [r7, #20]
 800cfa4:	f7ff ff6a 	bl	800ce7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfae:	f043 0210 	orr.w	r2, r3, #16
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfb8:	6978      	ldr	r0, [r7, #20]
 800cfba:	f7ff f81d 	bl	800bff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfbe:	bf00      	nop
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f7ff f807 	bl	800bff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d008:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2220      	movs	r2, #32
 800d00e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7fe ffd9 	bl	800bfd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d01e:	bf00      	nop
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d062:	b480      	push	{r7}
 800d064:	b085      	sub	sp, #20
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d070:	2b01      	cmp	r3, #1
 800d072:	d101      	bne.n	800d078 <HAL_UARTEx_DisableFifoMode+0x16>
 800d074:	2302      	movs	r3, #2
 800d076:	e027      	b.n	800d0c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2224      	movs	r2, #36	; 0x24
 800d084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f022 0201 	bic.w	r2, r2, #1
 800d09e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2220      	movs	r2, #32
 800d0ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d101      	bne.n	800d0ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	e02d      	b.n	800d148 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2224      	movs	r2, #36	; 0x24
 800d0f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0201 	bic.w	r2, r2, #1
 800d112:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	430a      	orrs	r2, r1
 800d126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f84f 	bl	800d1cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2220      	movs	r2, #32
 800d13a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d160:	2b01      	cmp	r3, #1
 800d162:	d101      	bne.n	800d168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d164:	2302      	movs	r3, #2
 800d166:	e02d      	b.n	800d1c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2224      	movs	r2, #36	; 0x24
 800d174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f022 0201 	bic.w	r2, r2, #1
 800d18e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	430a      	orrs	r2, r1
 800d1a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f811 	bl	800d1cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2220      	movs	r2, #32
 800d1b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b089      	sub	sp, #36	; 0x24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d1d4:	4a2f      	ldr	r2, [pc, #188]	; (800d294 <UARTEx_SetNbDataToProcess+0xc8>)
 800d1d6:	f107 0314 	add.w	r3, r7, #20
 800d1da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d1e2:	4a2d      	ldr	r2, [pc, #180]	; (800d298 <UARTEx_SetNbDataToProcess+0xcc>)
 800d1e4:	f107 030c 	add.w	r3, r7, #12
 800d1e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d108      	bne.n	800d20a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d208:	e03d      	b.n	800d286 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d20a:	2310      	movs	r3, #16
 800d20c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d20e:	2310      	movs	r3, #16
 800d210:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	0e5b      	lsrs	r3, r3, #25
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	f003 0307 	and.w	r3, r3, #7
 800d220:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	0f5b      	lsrs	r3, r3, #29
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 0307 	and.w	r3, r3, #7
 800d230:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d232:	7fbb      	ldrb	r3, [r7, #30]
 800d234:	7f3a      	ldrb	r2, [r7, #28]
 800d236:	f107 0120 	add.w	r1, r7, #32
 800d23a:	440a      	add	r2, r1
 800d23c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d240:	fb02 f303 	mul.w	r3, r2, r3
 800d244:	7f3a      	ldrb	r2, [r7, #28]
 800d246:	f107 0120 	add.w	r1, r7, #32
 800d24a:	440a      	add	r2, r1
 800d24c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d250:	fb93 f3f2 	sdiv	r3, r3, r2
 800d254:	b29a      	uxth	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d25c:	7ffb      	ldrb	r3, [r7, #31]
 800d25e:	7f7a      	ldrb	r2, [r7, #29]
 800d260:	f107 0120 	add.w	r1, r7, #32
 800d264:	440a      	add	r2, r1
 800d266:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d26a:	fb02 f303 	mul.w	r3, r2, r3
 800d26e:	7f7a      	ldrb	r2, [r7, #29]
 800d270:	f107 0120 	add.w	r1, r7, #32
 800d274:	440a      	add	r2, r1
 800d276:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d27a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d286:	bf00      	nop
 800d288:	3724      	adds	r7, #36	; 0x24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	080150c8 	.word	0x080150c8
 800d298:	080150d0 	.word	0x080150d0

0800d29c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d29c:	b084      	sub	sp, #16
 800d29e:	b480      	push	{r7}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	f107 001c 	add.w	r0, r7, #28
 800d2aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d2b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d2b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d2ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d2be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d2c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	4b07      	ldr	r3, [pc, #28]	; (800d2ec <SDMMC_Init+0x50>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	431a      	orrs	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3714      	adds	r7, #20
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	b004      	add	sp, #16
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	ffc02c00 	.word	0xffc02c00

0800d2f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	370c      	adds	r7, #12
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b083      	sub	sp, #12
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f043 0203 	orr.w	r2, r3, #3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	370c      	adds	r7, #12
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr

0800d34e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d34e:	b480      	push	{r7}
 800d350:	b083      	sub	sp, #12
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f003 0303 	and.w	r3, r3, #3
}
 800d35e:	4618      	mov	r0, r3
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
	...

0800d36c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d38a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d390:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d396:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	4b06      	ldr	r3, [pc, #24]	; (800d3bc <SDMMC_SendCommand+0x50>)
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	431a      	orrs	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	fffee0c0 	.word	0xfffee0c0

0800d3c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	b2db      	uxtb	r3, r3
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b085      	sub	sp, #20
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	3314      	adds	r3, #20
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3714      	adds	r7, #20
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d426:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d42c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d432:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	431a      	orrs	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d44a:	2300      	movs	r3, #0

}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3714      	adds	r7, #20
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d466:	2310      	movs	r3, #16
 800d468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d46a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d46e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d470:	2300      	movs	r3, #0
 800d472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff ff73 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d486:	f241 3288 	movw	r2, #5000	; 0x1388
 800d48a:	2110      	movs	r1, #16
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fa8d 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d494:	69fb      	ldr	r3, [r7, #28]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3720      	adds	r7, #32
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b088      	sub	sp, #32
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4ac:	2311      	movs	r3, #17
 800d4ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff ff50 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d4cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d0:	2111      	movs	r1, #17
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 fa6a 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d4d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4da:	69fb      	ldr	r3, [r7, #28]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3720      	adds	r7, #32
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b088      	sub	sp, #32
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d4f2:	2312      	movs	r3, #18
 800d4f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d504:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d506:	f107 0308 	add.w	r3, r7, #8
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff ff2d 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d512:	f241 3288 	movw	r2, #5000	; 0x1388
 800d516:	2112      	movs	r1, #18
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 fa47 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d51e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d520:	69fb      	ldr	r3, [r7, #28]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3720      	adds	r7, #32
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b088      	sub	sp, #32
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d538:	2318      	movs	r3, #24
 800d53a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d53c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d542:	2300      	movs	r3, #0
 800d544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d54a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d54c:	f107 0308 	add.w	r3, r7, #8
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff ff0a 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d558:	f241 3288 	movw	r2, #5000	; 0x1388
 800d55c:	2118      	movs	r1, #24
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fa24 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d566:	69fb      	ldr	r3, [r7, #28]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3720      	adds	r7, #32
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d57e:	2319      	movs	r3, #25
 800d580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d582:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d588:	2300      	movs	r3, #0
 800d58a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d58c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d592:	f107 0308 	add.w	r3, r7, #8
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff fee7 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d59e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5a2:	2119      	movs	r1, #25
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fa01 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d5aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ac:	69fb      	ldr	r3, [r7, #28]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3720      	adds	r7, #32
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
	...

0800d5b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d5c4:	230c      	movs	r3, #12
 800d5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5d6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f0:	f107 0308 	add.w	r3, r7, #8
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff feb8 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d5fc:	4a0b      	ldr	r2, [pc, #44]	; (800d62c <SDMMC_CmdStopTransfer+0x74>)
 800d5fe:	210c      	movs	r1, #12
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f9d3 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d606:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d61a:	d101      	bne.n	800d620 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d61c:	2300      	movs	r3, #0
 800d61e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d620:	69fb      	ldr	r3, [r7, #28]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3720      	adds	r7, #32
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	05f5e100 	.word	0x05f5e100

0800d630 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08a      	sub	sp, #40	; 0x28
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d640:	2307      	movs	r3, #7
 800d642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d644:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d648:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d64a:	2300      	movs	r3, #0
 800d64c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d64e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d652:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d654:	f107 0310 	add.w	r3, r7, #16
 800d658:	4619      	mov	r1, r3
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f7ff fe86 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d660:	f241 3288 	movw	r2, #5000	; 0x1388
 800d664:	2107      	movs	r1, #7
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f000 f9a0 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d66c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d670:	4618      	mov	r0, r3
 800d672:	3728      	adds	r7, #40	; 0x28
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d680:	2300      	movs	r3, #0
 800d682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d688:	2300      	movs	r3, #0
 800d68a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d68c:	2300      	movs	r3, #0
 800d68e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d696:	f107 0308 	add.w	r3, r7, #8
 800d69a:	4619      	mov	r1, r3
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff fe65 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f954 	bl	800d950 <SDMMC_GetCmdError>
 800d6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6bc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d6c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6c2:	2308      	movs	r3, #8
 800d6c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6d6:	f107 0308 	add.w	r3, r7, #8
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7ff fe45 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fb56 	bl	800dd94 <SDMMC_GetCmdResp7>
 800d6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ea:	69fb      	ldr	r3, [r7, #28]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3720      	adds	r7, #32
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d702:	2337      	movs	r3, #55	; 0x37
 800d704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d70c:	2300      	movs	r3, #0
 800d70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d716:	f107 0308 	add.w	r3, r7, #8
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fe25 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d722:	f241 3288 	movw	r2, #5000	; 0x1388
 800d726:	2137      	movs	r1, #55	; 0x37
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f93f 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d730:	69fb      	ldr	r3, [r7, #28]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3720      	adds	r7, #32
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b088      	sub	sp, #32
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d748:	2329      	movs	r3, #41	; 0x29
 800d74a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d74c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d752:	2300      	movs	r3, #0
 800d754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d75a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d75c:	f107 0308 	add.w	r3, r7, #8
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff fe02 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fa5b 	bl	800dc24 <SDMMC_GetCmdResp3>
 800d76e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d770:	69fb      	ldr	r3, [r7, #28]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3720      	adds	r7, #32
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b088      	sub	sp, #32
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d788:	2306      	movs	r3, #6
 800d78a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d792:	2300      	movs	r3, #0
 800d794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d79a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d79c:	f107 0308 	add.w	r3, r7, #8
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff fde2 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7ac:	2106      	movs	r1, #6
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f8fc 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d7b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3720      	adds	r7, #32
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d7cc:	2333      	movs	r3, #51	; 0x33
 800d7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7e0:	f107 0308 	add.w	r3, r7, #8
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff fdc0 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7f0:	2133      	movs	r1, #51	; 0x33
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f8da 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7fa:	69fb      	ldr	r3, [r7, #28]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3720      	adds	r7, #32
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d810:	2302      	movs	r3, #2
 800d812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d814:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d81a:	2300      	movs	r3, #0
 800d81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d81e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d824:	f107 0308 	add.w	r3, r7, #8
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff fd9e 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f9ad 	bl	800db90 <SDMMC_GetCmdResp2>
 800d836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d838:	69fb      	ldr	r3, [r7, #28]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3720      	adds	r7, #32
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b088      	sub	sp, #32
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d850:	2309      	movs	r3, #9
 800d852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d854:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d85e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d862:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d864:	f107 0308 	add.w	r3, r7, #8
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fd7e 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 f98d 	bl	800db90 <SDMMC_GetCmdResp2>
 800d876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d878:	69fb      	ldr	r3, [r7, #28]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b088      	sub	sp, #32
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d890:	2303      	movs	r3, #3
 800d892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d894:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d89a:	2300      	movs	r3, #0
 800d89c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d89e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8a4:	f107 0308 	add.w	r3, r7, #8
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f7ff fd5e 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8b0:	683a      	ldr	r2, [r7, #0]
 800d8b2:	2103      	movs	r1, #3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f9f5 	bl	800dca4 <SDMMC_GetCmdResp6>
 800d8ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8bc:	69fb      	ldr	r3, [r7, #28]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3720      	adds	r7, #32
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b088      	sub	sp, #32
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d8d4:	230d      	movs	r3, #13
 800d8d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8e8:	f107 0308 	add.w	r3, r7, #8
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fd3c 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f8:	210d      	movs	r1, #13
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f856 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d902:	69fb      	ldr	r3, [r7, #28]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3720      	adds	r7, #32
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b088      	sub	sp, #32
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d914:	2300      	movs	r3, #0
 800d916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d918:	230d      	movs	r3, #13
 800d91a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d91c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d922:	2300      	movs	r3, #0
 800d924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d92a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d92c:	f107 0308 	add.w	r3, r7, #8
 800d930:	4619      	mov	r1, r3
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7ff fd1a 	bl	800d36c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d938:	f241 3288 	movw	r2, #5000	; 0x1388
 800d93c:	210d      	movs	r1, #13
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f834 	bl	800d9ac <SDMMC_GetCmdResp1>
 800d944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d946:	69fb      	ldr	r3, [r7, #28]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3720      	adds	r7, #32
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d958:	4b11      	ldr	r3, [pc, #68]	; (800d9a0 <SDMMC_GetCmdError+0x50>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a11      	ldr	r2, [pc, #68]	; (800d9a4 <SDMMC_GetCmdError+0x54>)
 800d95e:	fba2 2303 	umull	r2, r3, r2, r3
 800d962:	0a5b      	lsrs	r3, r3, #9
 800d964:	f241 3288 	movw	r2, #5000	; 0x1388
 800d968:	fb02 f303 	mul.w	r3, r2, r3
 800d96c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	1e5a      	subs	r2, r3, #1
 800d972:	60fa      	str	r2, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d97c:	e009      	b.n	800d992 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0f1      	beq.n	800d96e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a06      	ldr	r2, [pc, #24]	; (800d9a8 <SDMMC_GetCmdError+0x58>)
 800d98e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	24000000 	.word	0x24000000
 800d9a4:	10624dd3 	.word	0x10624dd3
 800d9a8:	002000c5 	.word	0x002000c5

0800d9ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b088      	sub	sp, #32
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	607a      	str	r2, [r7, #4]
 800d9b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9ba:	4b70      	ldr	r3, [pc, #448]	; (800db7c <SDMMC_GetCmdResp1+0x1d0>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a70      	ldr	r2, [pc, #448]	; (800db80 <SDMMC_GetCmdResp1+0x1d4>)
 800d9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c4:	0a5a      	lsrs	r2, r3, #9
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	fb02 f303 	mul.w	r3, r2, r3
 800d9cc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	1e5a      	subs	r2, r3, #1
 800d9d2:	61fa      	str	r2, [r7, #28]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d102      	bne.n	800d9de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9dc:	e0c9      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	4b67      	ldr	r3, [pc, #412]	; (800db84 <SDMMC_GetCmdResp1+0x1d8>)
 800d9e8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0ef      	beq.n	800d9ce <SDMMC_GetCmdResp1+0x22>
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1ea      	bne.n	800d9ce <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fc:	f003 0304 	and.w	r3, r3, #4
 800da00:	2b00      	cmp	r3, #0
 800da02:	d004      	beq.n	800da0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2204      	movs	r2, #4
 800da08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da0a:	2304      	movs	r3, #4
 800da0c:	e0b1      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d004      	beq.n	800da24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2201      	movs	r2, #1
 800da1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da20:	2301      	movs	r3, #1
 800da22:	e0a6      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	4a58      	ldr	r2, [pc, #352]	; (800db88 <SDMMC_GetCmdResp1+0x1dc>)
 800da28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f7ff fcc8 	bl	800d3c0 <SDMMC_GetCommandResponse>
 800da30:	4603      	mov	r3, r0
 800da32:	461a      	mov	r2, r3
 800da34:	7afb      	ldrb	r3, [r7, #11]
 800da36:	4293      	cmp	r3, r2
 800da38:	d001      	beq.n	800da3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e099      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800da3e:	2100      	movs	r1, #0
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff fcca 	bl	800d3da <SDMMC_GetResponse>
 800da46:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	4b50      	ldr	r3, [pc, #320]	; (800db8c <SDMMC_GetCmdResp1+0x1e0>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d101      	bne.n	800da56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800da52:	2300      	movs	r3, #0
 800da54:	e08d      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	da02      	bge.n	800da62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da60:	e087      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d001      	beq.n	800da70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da6c:	2340      	movs	r3, #64	; 0x40
 800da6e:	e080      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da7a:	2380      	movs	r3, #128	; 0x80
 800da7c:	e079      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da84:	2b00      	cmp	r3, #0
 800da86:	d002      	beq.n	800da8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da8c:	e071      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da9c:	e069      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800daa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daac:	e061      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dabc:	e059      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dacc:	e051      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dadc:	e049      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800daec:	e041      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d002      	beq.n	800dafe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800daf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dafc:	e039      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800db08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db0c:	e031      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800db18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800db1c:	e029      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db24:	2b00      	cmp	r3, #0
 800db26:	d002      	beq.n	800db2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800db2c:	e021      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800db38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800db3c:	e019      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800db4c:	e011      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800db58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db5c:	e009      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f003 0308 	and.w	r3, r3, #8
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800db6c:	e001      	b.n	800db72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db72:	4618      	mov	r0, r3
 800db74:	3720      	adds	r7, #32
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	24000000 	.word	0x24000000
 800db80:	10624dd3 	.word	0x10624dd3
 800db84:	00200045 	.word	0x00200045
 800db88:	002000c5 	.word	0x002000c5
 800db8c:	fdffe008 	.word	0xfdffe008

0800db90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db98:	4b1f      	ldr	r3, [pc, #124]	; (800dc18 <SDMMC_GetCmdResp2+0x88>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a1f      	ldr	r2, [pc, #124]	; (800dc1c <SDMMC_GetCmdResp2+0x8c>)
 800db9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dba2:	0a5b      	lsrs	r3, r3, #9
 800dba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba8:	fb02 f303 	mul.w	r3, r2, r3
 800dbac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	1e5a      	subs	r2, r3, #1
 800dbb2:	60fa      	str	r2, [r7, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d102      	bne.n	800dbbe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbbc:	e026      	b.n	800dc0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d0ef      	beq.n	800dbae <SDMMC_GetCmdResp2+0x1e>
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1ea      	bne.n	800dbae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbdc:	f003 0304 	and.w	r3, r3, #4
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2204      	movs	r2, #4
 800dbe8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbea:	2304      	movs	r3, #4
 800dbec:	e00e      	b.n	800dc0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d004      	beq.n	800dc04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e003      	b.n	800dc0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a06      	ldr	r2, [pc, #24]	; (800dc20 <SDMMC_GetCmdResp2+0x90>)
 800dc08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3714      	adds	r7, #20
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr
 800dc18:	24000000 	.word	0x24000000
 800dc1c:	10624dd3 	.word	0x10624dd3
 800dc20:	002000c5 	.word	0x002000c5

0800dc24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc2c:	4b1a      	ldr	r3, [pc, #104]	; (800dc98 <SDMMC_GetCmdResp3+0x74>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a1a      	ldr	r2, [pc, #104]	; (800dc9c <SDMMC_GetCmdResp3+0x78>)
 800dc32:	fba2 2303 	umull	r2, r3, r2, r3
 800dc36:	0a5b      	lsrs	r3, r3, #9
 800dc38:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc3c:	fb02 f303 	mul.w	r3, r2, r3
 800dc40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1e5a      	subs	r2, r3, #1
 800dc46:	60fa      	str	r2, [r7, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc50:	e01b      	b.n	800dc8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0ef      	beq.n	800dc42 <SDMMC_GetCmdResp3+0x1e>
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1ea      	bne.n	800dc42 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d004      	beq.n	800dc82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2204      	movs	r2, #4
 800dc7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc7e:	2304      	movs	r3, #4
 800dc80:	e003      	b.n	800dc8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a06      	ldr	r2, [pc, #24]	; (800dca0 <SDMMC_GetCmdResp3+0x7c>)
 800dc86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3714      	adds	r7, #20
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	24000000 	.word	0x24000000
 800dc9c:	10624dd3 	.word	0x10624dd3
 800dca0:	002000c5 	.word	0x002000c5

0800dca4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b088      	sub	sp, #32
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	460b      	mov	r3, r1
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcb2:	4b35      	ldr	r3, [pc, #212]	; (800dd88 <SDMMC_GetCmdResp6+0xe4>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a35      	ldr	r2, [pc, #212]	; (800dd8c <SDMMC_GetCmdResp6+0xe8>)
 800dcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800dcbc:	0a5b      	lsrs	r3, r3, #9
 800dcbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcc2:	fb02 f303 	mul.w	r3, r2, r3
 800dcc6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	1e5a      	subs	r2, r3, #1
 800dccc:	61fa      	str	r2, [r7, #28]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d102      	bne.n	800dcd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcd6:	e052      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcdc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d0ef      	beq.n	800dcc8 <SDMMC_GetCmdResp6+0x24>
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1ea      	bne.n	800dcc8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf6:	f003 0304 	and.w	r3, r3, #4
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d004      	beq.n	800dd08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2204      	movs	r2, #4
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd04:	2304      	movs	r3, #4
 800dd06:	e03a      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d004      	beq.n	800dd1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2201      	movs	r2, #1
 800dd18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e02f      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff fb4e 	bl	800d3c0 <SDMMC_GetCommandResponse>
 800dd24:	4603      	mov	r3, r0
 800dd26:	461a      	mov	r2, r3
 800dd28:	7afb      	ldrb	r3, [r7, #11]
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d001      	beq.n	800dd32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e025      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	4a16      	ldr	r2, [pc, #88]	; (800dd90 <SDMMC_GetCmdResp6+0xec>)
 800dd36:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dd38:	2100      	movs	r1, #0
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f7ff fb4d 	bl	800d3da <SDMMC_GetResponse>
 800dd40:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	0c1b      	lsrs	r3, r3, #16
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dd56:	2300      	movs	r3, #0
 800dd58:	e011      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd68:	e009      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd78:	e001      	b.n	800dd7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3720      	adds	r7, #32
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	24000000 	.word	0x24000000
 800dd8c:	10624dd3 	.word	0x10624dd3
 800dd90:	002000c5 	.word	0x002000c5

0800dd94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd9c:	4b22      	ldr	r3, [pc, #136]	; (800de28 <SDMMC_GetCmdResp7+0x94>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a22      	ldr	r2, [pc, #136]	; (800de2c <SDMMC_GetCmdResp7+0x98>)
 800dda2:	fba2 2303 	umull	r2, r3, r2, r3
 800dda6:	0a5b      	lsrs	r3, r3, #9
 800dda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddac:	fb02 f303 	mul.w	r3, r2, r3
 800ddb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	1e5a      	subs	r2, r3, #1
 800ddb6:	60fa      	str	r2, [r7, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddc0:	e02c      	b.n	800de1c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d0ef      	beq.n	800ddb2 <SDMMC_GetCmdResp7+0x1e>
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1ea      	bne.n	800ddb2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2204      	movs	r2, #4
 800ddec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddee:	2304      	movs	r3, #4
 800ddf0:	e014      	b.n	800de1c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf6:	f003 0301 	and.w	r3, r3, #1
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d004      	beq.n	800de08 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2201      	movs	r2, #1
 800de02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de04:	2301      	movs	r3, #1
 800de06:	e009      	b.n	800de1c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2240      	movs	r2, #64	; 0x40
 800de18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800de1a:	2300      	movs	r3, #0

}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3714      	adds	r7, #20
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	24000000 	.word	0x24000000
 800de2c:	10624dd3 	.word	0x10624dd3

0800de30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800de34:	4904      	ldr	r1, [pc, #16]	; (800de48 <MX_FATFS_Init+0x18>)
 800de36:	4805      	ldr	r0, [pc, #20]	; (800de4c <MX_FATFS_Init+0x1c>)
 800de38:	f002 fff4 	bl	8010e24 <FATFS_LinkDriver>
 800de3c:	4603      	mov	r3, r0
 800de3e:	461a      	mov	r2, r3
 800de40:	4b03      	ldr	r3, [pc, #12]	; (800de50 <MX_FATFS_Init+0x20>)
 800de42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de44:	bf00      	nop
 800de46:	bd80      	pop	{r7, pc}
 800de48:	2406ef34 	.word	0x2406ef34
 800de4c:	08015164 	.word	0x08015164
 800de50:	2406ef30 	.word	0x2406ef30

0800de54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de54:	b480      	push	{r7}
 800de56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de6e:	f000 f885 	bl	800df7c <BSP_SD_IsDetected>
 800de72:	4603      	mov	r3, r0
 800de74:	2b01      	cmp	r3, #1
 800de76:	d001      	beq.n	800de7c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800de78:	2302      	movs	r3, #2
 800de7a:	e012      	b.n	800dea2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800de7c:	480b      	ldr	r0, [pc, #44]	; (800deac <BSP_SD_Init+0x48>)
 800de7e:	f7fb fdcd 	bl	8009a1c <HAL_SD_Init>
 800de82:	4603      	mov	r3, r0
 800de84:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800de86:	79fb      	ldrb	r3, [r7, #7]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d109      	bne.n	800dea0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800de8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800de90:	4806      	ldr	r0, [pc, #24]	; (800deac <BSP_SD_Init+0x48>)
 800de92:	f7fc fc6b 	bl	800a76c <HAL_SD_ConfigWideBusOperation>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dea0:	79fb      	ldrb	r3, [r7, #7]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	2406ec9c 	.word	0x2406ec9c

0800deb0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800debc:	2300      	movs	r3, #0
 800debe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	68f9      	ldr	r1, [r7, #12]
 800dec6:	4806      	ldr	r0, [pc, #24]	; (800dee0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dec8:	f7fb feba 	bl	8009c40 <HAL_SD_ReadBlocks_DMA>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	2406ec9c 	.word	0x2406ec9c

0800dee4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	68f9      	ldr	r1, [r7, #12]
 800defa:	4806      	ldr	r0, [pc, #24]	; (800df14 <BSP_SD_WriteBlocks_DMA+0x30>)
 800defc:	f7fb ff48 	bl	8009d90 <HAL_SD_WriteBlocks_DMA>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	2406ec9c 	.word	0x2406ec9c

0800df18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800df1c:	4805      	ldr	r0, [pc, #20]	; (800df34 <BSP_SD_GetCardState+0x1c>)
 800df1e:	f7fc fccf 	bl	800a8c0 <HAL_SD_GetCardState>
 800df22:	4603      	mov	r3, r0
 800df24:	2b04      	cmp	r3, #4
 800df26:	bf14      	ite	ne
 800df28:	2301      	movne	r3, #1
 800df2a:	2300      	moveq	r3, #0
 800df2c:	b2db      	uxtb	r3, r3
}
 800df2e:	4618      	mov	r0, r3
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	2406ec9c 	.word	0x2406ec9c

0800df38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	4803      	ldr	r0, [pc, #12]	; (800df50 <BSP_SD_GetCardInfo+0x18>)
 800df44:	f7fc fbe6 	bl	800a714 <HAL_SD_GetCardInfo>
}
 800df48:	bf00      	nop
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	2406ec9c 	.word	0x2406ec9c

0800df54 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800df5c:	f000 f9a0 	bl	800e2a0 <BSP_SD_WriteCpltCallback>
}
 800df60:	bf00      	nop
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800df70:	f000 f9a4 	bl	800e2bc <BSP_SD_ReadCpltCallback>
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800df82:	2301      	movs	r3, #1
 800df84:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800df86:	79fb      	ldrb	r3, [r7, #7]
 800df88:	b2db      	uxtb	r3, r3
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b084      	sub	sp, #16
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800df9e:	f002 ffd9 	bl	8010f54 <osKernelSysTick>
 800dfa2:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800dfa4:	e006      	b.n	800dfb4 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfa6:	f7ff ffb7 	bl	800df18 <BSP_SD_GetCardState>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	e009      	b.n	800dfc8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800dfb4:	f002 ffce 	bl	8010f54 <osKernelSysTick>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d8f0      	bhi.n	800dfa6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dfc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dfda:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <SD_CheckStatus+0x38>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfe0:	f7ff ff9a 	bl	800df18 <BSP_SD_GetCardState>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d107      	bne.n	800dffa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dfea:	4b07      	ldr	r3, [pc, #28]	; (800e008 <SD_CheckStatus+0x38>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	f023 0301 	bic.w	r3, r3, #1
 800dff4:	b2da      	uxtb	r2, r3
 800dff6:	4b04      	ldr	r3, [pc, #16]	; (800e008 <SD_CheckStatus+0x38>)
 800dff8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dffa:	4b03      	ldr	r3, [pc, #12]	; (800e008 <SD_CheckStatus+0x38>)
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	b2db      	uxtb	r3, r3
}
 800e000:	4618      	mov	r0, r3
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	2400000d 	.word	0x2400000d

0800e00c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e00c:	b590      	push	{r4, r7, lr}
 800e00e:	b087      	sub	sp, #28
 800e010:	af00      	add	r7, sp, #0
 800e012:	4603      	mov	r3, r0
 800e014:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e016:	4b20      	ldr	r3, [pc, #128]	; (800e098 <SD_initialize+0x8c>)
 800e018:	2201      	movs	r2, #1
 800e01a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e01c:	f002 ff8e 	bl	8010f3c <osKernelRunning>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d030      	beq.n	800e088 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e026:	f7ff ff1d 	bl	800de64 <BSP_SD_Init>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d107      	bne.n	800e040 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff ffcc 	bl	800dfd0 <SD_CheckStatus>
 800e038:	4603      	mov	r3, r0
 800e03a:	461a      	mov	r2, r3
 800e03c:	4b16      	ldr	r3, [pc, #88]	; (800e098 <SD_initialize+0x8c>)
 800e03e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e040:	4b15      	ldr	r3, [pc, #84]	; (800e098 <SD_initialize+0x8c>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b01      	cmp	r3, #1
 800e048:	d01e      	beq.n	800e088 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800e04a:	4b14      	ldr	r3, [pc, #80]	; (800e09c <SD_initialize+0x90>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10e      	bne.n	800e070 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e052:	4b13      	ldr	r3, [pc, #76]	; (800e0a0 <SD_initialize+0x94>)
 800e054:	f107 0408 	add.w	r4, r7, #8
 800e058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e05a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e05e:	f107 0308 	add.w	r3, r7, #8
 800e062:	2100      	movs	r1, #0
 800e064:	4618      	mov	r0, r3
 800e066:	f003 fa28 	bl	80114ba <osMessageCreate>
 800e06a:	4602      	mov	r2, r0
 800e06c:	4b0b      	ldr	r3, [pc, #44]	; (800e09c <SD_initialize+0x90>)
 800e06e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <SD_initialize+0x90>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d107      	bne.n	800e088 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800e078:	4b07      	ldr	r3, [pc, #28]	; (800e098 <SD_initialize+0x8c>)
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	f043 0301 	orr.w	r3, r3, #1
 800e082:	b2da      	uxtb	r2, r3
 800e084:	4b04      	ldr	r3, [pc, #16]	; (800e098 <SD_initialize+0x8c>)
 800e086:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e088:	4b03      	ldr	r3, [pc, #12]	; (800e098 <SD_initialize+0x8c>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b2db      	uxtb	r3, r3
}
 800e08e:	4618      	mov	r0, r3
 800e090:	371c      	adds	r7, #28
 800e092:	46bd      	mov	sp, r7
 800e094:	bd90      	pop	{r4, r7, pc}
 800e096:	bf00      	nop
 800e098:	2400000d 	.word	0x2400000d
 800e09c:	24014900 	.word	0x24014900
 800e0a0:	080150d8 	.word	0x080150d8

0800e0a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff ff8d 	bl	800dfd0 <SD_CheckStatus>
 800e0b6:	4603      	mov	r3, r0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b08a      	sub	sp, #40	; 0x28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60b9      	str	r1, [r7, #8]
 800e0c8:	607a      	str	r2, [r7, #4]
 800e0ca:	603b      	str	r3, [r7, #0]
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e0d6:	f247 5030 	movw	r0, #30000	; 0x7530
 800e0da:	f7ff ff5c 	bl	800df96 <SD_CheckStatusWithTimeout>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	da02      	bge.n	800e0ea <SD_read+0x2a>
  {
    return res;
 800e0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0e8:	e032      	b.n	800e150 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	6879      	ldr	r1, [r7, #4]
 800e0ee:	68b8      	ldr	r0, [r7, #8]
 800e0f0:	f7ff fede 	bl	800deb0 <BSP_SD_ReadBlocks_DMA>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e0fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d124      	bne.n	800e14c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e102:	4b15      	ldr	r3, [pc, #84]	; (800e158 <SD_read+0x98>)
 800e104:	6819      	ldr	r1, [r3, #0]
 800e106:	f107 0314 	add.w	r3, r7, #20
 800e10a:	f247 5230 	movw	r2, #30000	; 0x7530
 800e10e:	4618      	mov	r0, r3
 800e110:	f003 fa3c 	bl	801158c <osMessageGet>

    if (event.status == osEventMessage)
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	2b10      	cmp	r3, #16
 800e118:	d118      	bne.n	800e14c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d115      	bne.n	800e14c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e120:	f002 ff18 	bl	8010f54 <osKernelSysTick>
 800e124:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e126:	e008      	b.n	800e13a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e128:	f7ff fef6 	bl	800df18 <BSP_SD_GetCardState>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d103      	bne.n	800e13a <SD_read+0x7a>
              {
                res = RES_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e138:	e008      	b.n	800e14c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e13a:	f002 ff0b 	bl	8010f54 <osKernelSysTick>
 800e13e:	4602      	mov	r2, r0
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	f247 522f 	movw	r2, #29999	; 0x752f
 800e148:	4293      	cmp	r3, r2
 800e14a:	d9ed      	bls.n	800e128 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e150:	4618      	mov	r0, r3
 800e152:	3728      	adds	r7, #40	; 0x28
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	24014900 	.word	0x24014900

0800e15c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b08a      	sub	sp, #40	; 0x28
 800e160:	af00      	add	r7, sp, #0
 800e162:	60b9      	str	r1, [r7, #8]
 800e164:	607a      	str	r2, [r7, #4]
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	4603      	mov	r3, r0
 800e16a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e172:	f247 5030 	movw	r0, #30000	; 0x7530
 800e176:	f7ff ff0e 	bl	800df96 <SD_CheckStatusWithTimeout>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	da02      	bge.n	800e186 <SD_write+0x2a>
  {
    return res;
 800e180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e184:	e02e      	b.n	800e1e4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	6879      	ldr	r1, [r7, #4]
 800e18a:	68b8      	ldr	r0, [r7, #8]
 800e18c:	f7ff feaa 	bl	800dee4 <BSP_SD_WriteBlocks_DMA>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d124      	bne.n	800e1e0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e196:	4b15      	ldr	r3, [pc, #84]	; (800e1ec <SD_write+0x90>)
 800e198:	6819      	ldr	r1, [r3, #0]
 800e19a:	f107 0314 	add.w	r3, r7, #20
 800e19e:	f247 5230 	movw	r2, #30000	; 0x7530
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f003 f9f2 	bl	801158c <osMessageGet>

    if (event.status == osEventMessage)
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b10      	cmp	r3, #16
 800e1ac:	d118      	bne.n	800e1e0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	2b02      	cmp	r3, #2
 800e1b2:	d115      	bne.n	800e1e0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e1b4:	f002 fece 	bl	8010f54 <osKernelSysTick>
 800e1b8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e1ba:	e008      	b.n	800e1ce <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e1bc:	f7ff feac 	bl	800df18 <BSP_SD_GetCardState>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d103      	bne.n	800e1ce <SD_write+0x72>
          {
            res = RES_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e1cc:	e008      	b.n	800e1e0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e1ce:	f002 fec1 	bl	8010f54 <osKernelSysTick>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d9ed      	bls.n	800e1bc <SD_write+0x60>
    }

  }
#endif

  return res;
 800e1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3728      	adds	r7, #40	; 0x28
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	24014900 	.word	0x24014900

0800e1f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b08c      	sub	sp, #48	; 0x30
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	603a      	str	r2, [r7, #0]
 800e1fa:	71fb      	strb	r3, [r7, #7]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e206:	4b25      	ldr	r3, [pc, #148]	; (800e29c <SD_ioctl+0xac>)
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	d001      	beq.n	800e218 <SD_ioctl+0x28>
 800e214:	2303      	movs	r3, #3
 800e216:	e03c      	b.n	800e292 <SD_ioctl+0xa2>

  switch (cmd)
 800e218:	79bb      	ldrb	r3, [r7, #6]
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d834      	bhi.n	800e288 <SD_ioctl+0x98>
 800e21e:	a201      	add	r2, pc, #4	; (adr r2, 800e224 <SD_ioctl+0x34>)
 800e220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e224:	0800e235 	.word	0x0800e235
 800e228:	0800e23d 	.word	0x0800e23d
 800e22c:	0800e255 	.word	0x0800e255
 800e230:	0800e26f 	.word	0x0800e26f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e23a:	e028      	b.n	800e28e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e23c:	f107 0308 	add.w	r3, r7, #8
 800e240:	4618      	mov	r0, r3
 800e242:	f7ff fe79 	bl	800df38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e246:	6a3a      	ldr	r2, [r7, #32]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e252:	e01c      	b.n	800e28e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e254:	f107 0308 	add.w	r3, r7, #8
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff fe6d 	bl	800df38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e260:	b29a      	uxth	r2, r3
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e26c:	e00f      	b.n	800e28e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e26e:	f107 0308 	add.w	r3, r7, #8
 800e272:	4618      	mov	r0, r3
 800e274:	f7ff fe60 	bl	800df38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	0a5a      	lsrs	r2, r3, #9
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e286:	e002      	b.n	800e28e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e288:	2304      	movs	r3, #4
 800e28a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e28e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e292:	4618      	mov	r0, r3
 800e294:	3730      	adds	r7, #48	; 0x30
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	2400000d 	.word	0x2400000d

0800e2a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e2a4:	4b04      	ldr	r3, [pc, #16]	; (800e2b8 <BSP_SD_WriteCpltCallback+0x18>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2102      	movs	r1, #2
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f003 f92d 	bl	801150c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e2b2:	bf00      	nop
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	24014900 	.word	0x24014900

0800e2bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e2c0:	4b04      	ldr	r3, [pc, #16]	; (800e2d4 <BSP_SD_ReadCpltCallback+0x18>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f003 f91f 	bl	801150c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e2ce:	bf00      	nop
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	24014900 	.word	0x24014900

0800e2d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e2e2:	79fb      	ldrb	r3, [r7, #7]
 800e2e4:	4a08      	ldr	r2, [pc, #32]	; (800e308 <disk_status+0x30>)
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	79fa      	ldrb	r2, [r7, #7]
 800e2f0:	4905      	ldr	r1, [pc, #20]	; (800e308 <disk_status+0x30>)
 800e2f2:	440a      	add	r2, r1
 800e2f4:	7a12      	ldrb	r2, [r2, #8]
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	4798      	blx	r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	2401492c 	.word	0x2401492c

0800e30c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	4a0d      	ldr	r2, [pc, #52]	; (800e354 <disk_initialize+0x48>)
 800e31e:	5cd3      	ldrb	r3, [r2, r3]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d111      	bne.n	800e348 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e324:	79fb      	ldrb	r3, [r7, #7]
 800e326:	4a0b      	ldr	r2, [pc, #44]	; (800e354 <disk_initialize+0x48>)
 800e328:	2101      	movs	r1, #1
 800e32a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	4a09      	ldr	r2, [pc, #36]	; (800e354 <disk_initialize+0x48>)
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	79fa      	ldrb	r2, [r7, #7]
 800e33a:	4906      	ldr	r1, [pc, #24]	; (800e354 <disk_initialize+0x48>)
 800e33c:	440a      	add	r2, r1
 800e33e:	7a12      	ldrb	r2, [r2, #8]
 800e340:	4610      	mov	r0, r2
 800e342:	4798      	blx	r3
 800e344:	4603      	mov	r3, r0
 800e346:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e348:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	2401492c 	.word	0x2401492c

0800e358 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e358:	b590      	push	{r4, r7, lr}
 800e35a:	b087      	sub	sp, #28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	607a      	str	r2, [r7, #4]
 800e362:	603b      	str	r3, [r7, #0]
 800e364:	4603      	mov	r3, r0
 800e366:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	4a0a      	ldr	r2, [pc, #40]	; (800e394 <disk_read+0x3c>)
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	689c      	ldr	r4, [r3, #8]
 800e374:	7bfb      	ldrb	r3, [r7, #15]
 800e376:	4a07      	ldr	r2, [pc, #28]	; (800e394 <disk_read+0x3c>)
 800e378:	4413      	add	r3, r2
 800e37a:	7a18      	ldrb	r0, [r3, #8]
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	47a0      	blx	r4
 800e384:	4603      	mov	r3, r0
 800e386:	75fb      	strb	r3, [r7, #23]
  return res;
 800e388:	7dfb      	ldrb	r3, [r7, #23]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	371c      	adds	r7, #28
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd90      	pop	{r4, r7, pc}
 800e392:	bf00      	nop
 800e394:	2401492c 	.word	0x2401492c

0800e398 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	607a      	str	r2, [r7, #4]
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e3a8:	7bfb      	ldrb	r3, [r7, #15]
 800e3aa:	4a0a      	ldr	r2, [pc, #40]	; (800e3d4 <disk_write+0x3c>)
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	68dc      	ldr	r4, [r3, #12]
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
 800e3b6:	4a07      	ldr	r2, [pc, #28]	; (800e3d4 <disk_write+0x3c>)
 800e3b8:	4413      	add	r3, r2
 800e3ba:	7a18      	ldrb	r0, [r3, #8]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	47a0      	blx	r4
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	371c      	adds	r7, #28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd90      	pop	{r4, r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	2401492c 	.word	0x2401492c

0800e3d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	4603      	mov	r3, r0
 800e3e0:	603a      	str	r2, [r7, #0]
 800e3e2:	71fb      	strb	r3, [r7, #7]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e3e8:	79fb      	ldrb	r3, [r7, #7]
 800e3ea:	4a09      	ldr	r2, [pc, #36]	; (800e410 <disk_ioctl+0x38>)
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	79fa      	ldrb	r2, [r7, #7]
 800e3f6:	4906      	ldr	r1, [pc, #24]	; (800e410 <disk_ioctl+0x38>)
 800e3f8:	440a      	add	r2, r1
 800e3fa:	7a10      	ldrb	r0, [r2, #8]
 800e3fc:	79b9      	ldrb	r1, [r7, #6]
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	4798      	blx	r3
 800e402:	4603      	mov	r3, r0
 800e404:	73fb      	strb	r3, [r7, #15]
  return res;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	2401492c 	.word	0x2401492c

0800e414 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3301      	adds	r3, #1
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e424:	89fb      	ldrh	r3, [r7, #14]
 800e426:	021b      	lsls	r3, r3, #8
 800e428:	b21a      	sxth	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	b21b      	sxth	r3, r3
 800e430:	4313      	orrs	r3, r2
 800e432:	b21b      	sxth	r3, r3
 800e434:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e436:	89fb      	ldrh	r3, [r7, #14]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3303      	adds	r3, #3
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	021b      	lsls	r3, r3, #8
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	3202      	adds	r2, #2
 800e45c:	7812      	ldrb	r2, [r2, #0]
 800e45e:	4313      	orrs	r3, r2
 800e460:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	021b      	lsls	r3, r3, #8
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	3201      	adds	r2, #1
 800e46a:	7812      	ldrb	r2, [r2, #0]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	021b      	lsls	r3, r3, #8
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	7812      	ldrb	r2, [r2, #0]
 800e478:	4313      	orrs	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]
	return rv;
 800e47c:	68fb      	ldr	r3, [r7, #12]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	460b      	mov	r3, r1
 800e494:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	607a      	str	r2, [r7, #4]
 800e49c:	887a      	ldrh	r2, [r7, #2]
 800e49e:	b2d2      	uxtb	r2, r2
 800e4a0:	701a      	strb	r2, [r3, #0]
 800e4a2:	887b      	ldrh	r3, [r7, #2]
 800e4a4:	0a1b      	lsrs	r3, r3, #8
 800e4a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	607a      	str	r2, [r7, #4]
 800e4ae:	887a      	ldrh	r2, [r7, #2]
 800e4b0:	b2d2      	uxtb	r2, r2
 800e4b2:	701a      	strb	r2, [r3, #0]
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	1c5a      	adds	r2, r3, #1
 800e4ce:	607a      	str	r2, [r7, #4]
 800e4d0:	683a      	ldr	r2, [r7, #0]
 800e4d2:	b2d2      	uxtb	r2, r2
 800e4d4:	701a      	strb	r2, [r3, #0]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	0a1b      	lsrs	r3, r3, #8
 800e4da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	607a      	str	r2, [r7, #4]
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	b2d2      	uxtb	r2, r2
 800e4e6:	701a      	strb	r2, [r3, #0]
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	0a1b      	lsrs	r3, r3, #8
 800e4ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	b2d2      	uxtb	r2, r2
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	0a1b      	lsrs	r3, r3, #8
 800e4fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	607a      	str	r2, [r7, #4]
 800e506:	683a      	ldr	r2, [r7, #0]
 800e508:	b2d2      	uxtb	r2, r2
 800e50a:	701a      	strb	r2, [r3, #0]
}
 800e50c:	bf00      	nop
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e518:	b480      	push	{r7}
 800e51a:	b087      	sub	sp, #28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00d      	beq.n	800e54e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e532:	693a      	ldr	r2, [r7, #16]
 800e534:	1c53      	adds	r3, r2, #1
 800e536:	613b      	str	r3, [r7, #16]
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	1c59      	adds	r1, r3, #1
 800e53c:	6179      	str	r1, [r7, #20]
 800e53e:	7812      	ldrb	r2, [r2, #0]
 800e540:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3b01      	subs	r3, #1
 800e546:	607b      	str	r3, [r7, #4]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1f1      	bne.n	800e532 <mem_cpy+0x1a>
	}
}
 800e54e:	bf00      	nop
 800e550:	371c      	adds	r7, #28
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e55a:	b480      	push	{r7}
 800e55c:	b087      	sub	sp, #28
 800e55e:	af00      	add	r7, sp, #0
 800e560:	60f8      	str	r0, [r7, #12]
 800e562:	60b9      	str	r1, [r7, #8]
 800e564:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	617a      	str	r2, [r7, #20]
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	b2d2      	uxtb	r2, r2
 800e574:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3b01      	subs	r3, #1
 800e57a:	607b      	str	r3, [r7, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1f3      	bne.n	800e56a <mem_set+0x10>
}
 800e582:	bf00      	nop
 800e584:	371c      	adds	r7, #28
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e58e:	b480      	push	{r7}
 800e590:	b089      	sub	sp, #36	; 0x24
 800e592:	af00      	add	r7, sp, #0
 800e594:	60f8      	str	r0, [r7, #12]
 800e596:	60b9      	str	r1, [r7, #8]
 800e598:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	61fb      	str	r3, [r7, #28]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	1c5a      	adds	r2, r3, #1
 800e5aa:	61fa      	str	r2, [r7, #28]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	1c5a      	adds	r2, r3, #1
 800e5b4:	61ba      	str	r2, [r7, #24]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	1acb      	subs	r3, r1, r3
 800e5ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	607b      	str	r3, [r7, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <mem_cmp+0x40>
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d0eb      	beq.n	800e5a6 <mem_cmp+0x18>

	return r;
 800e5ce:	697b      	ldr	r3, [r7, #20]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3724      	adds	r7, #36	; 0x24
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e5e6:	e002      	b.n	800e5ee <chk_chr+0x12>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	607b      	str	r3, [r7, #4]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d005      	beq.n	800e602 <chk_chr+0x26>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d1f2      	bne.n	800e5e8 <chk_chr+0xc>
	return *str;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	781b      	ldrb	r3, [r3, #0]
}
 800e606:	4618      	mov	r0, r3
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b082      	sub	sp, #8
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d009      	beq.n	800e634 <lock_fs+0x22>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	4618      	mov	r0, r3
 800e626:	f002 fc38 	bl	8010e9a <ff_req_grant>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <lock_fs+0x22>
 800e630:	2301      	movs	r3, #1
 800e632:	e000      	b.n	800e636 <lock_fs+0x24>
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	460b      	mov	r3, r1
 800e648:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00d      	beq.n	800e66c <unlock_fs+0x2e>
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	2b0c      	cmp	r3, #12
 800e654:	d00a      	beq.n	800e66c <unlock_fs+0x2e>
 800e656:	78fb      	ldrb	r3, [r7, #3]
 800e658:	2b0b      	cmp	r3, #11
 800e65a:	d007      	beq.n	800e66c <unlock_fs+0x2e>
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	2b0f      	cmp	r3, #15
 800e660:	d004      	beq.n	800e66c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	4618      	mov	r0, r3
 800e668:	f002 fc2c 	bl	8010ec4 <ff_rel_grant>
	}
}
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e67e:	2300      	movs	r3, #0
 800e680:	60bb      	str	r3, [r7, #8]
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	e029      	b.n	800e6dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e688:	4a27      	ldr	r2, [pc, #156]	; (800e728 <chk_lock+0xb4>)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	4413      	add	r3, r2
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d01d      	beq.n	800e6d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e696:	4a24      	ldr	r2, [pc, #144]	; (800e728 <chk_lock+0xb4>)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	011b      	lsls	r3, r3, #4
 800e69c:	4413      	add	r3, r2
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d116      	bne.n	800e6d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e6a8:	4a1f      	ldr	r2, [pc, #124]	; (800e728 <chk_lock+0xb4>)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	011b      	lsls	r3, r3, #4
 800e6ae:	4413      	add	r3, r2
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d10c      	bne.n	800e6d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6bc:	4a1a      	ldr	r2, [pc, #104]	; (800e728 <chk_lock+0xb4>)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	011b      	lsls	r3, r3, #4
 800e6c2:	4413      	add	r3, r2
 800e6c4:	3308      	adds	r3, #8
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d102      	bne.n	800e6d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6d0:	e007      	b.n	800e6e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d9d2      	bls.n	800e688 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d109      	bne.n	800e6fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d102      	bne.n	800e6f4 <chk_lock+0x80>
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d101      	bne.n	800e6f8 <chk_lock+0x84>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	e010      	b.n	800e71a <chk_lock+0xa6>
 800e6f8:	2312      	movs	r3, #18
 800e6fa:	e00e      	b.n	800e71a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d108      	bne.n	800e714 <chk_lock+0xa0>
 800e702:	4a09      	ldr	r2, [pc, #36]	; (800e728 <chk_lock+0xb4>)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	011b      	lsls	r3, r3, #4
 800e708:	4413      	add	r3, r2
 800e70a:	330c      	adds	r3, #12
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e712:	d101      	bne.n	800e718 <chk_lock+0xa4>
 800e714:	2310      	movs	r3, #16
 800e716:	e000      	b.n	800e71a <chk_lock+0xa6>
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	2401490c 	.word	0x2401490c

0800e72c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e732:	2300      	movs	r3, #0
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	e002      	b.n	800e73e <enq_lock+0x12>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3301      	adds	r3, #1
 800e73c:	607b      	str	r3, [r7, #4]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b01      	cmp	r3, #1
 800e742:	d806      	bhi.n	800e752 <enq_lock+0x26>
 800e744:	4a09      	ldr	r2, [pc, #36]	; (800e76c <enq_lock+0x40>)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	011b      	lsls	r3, r3, #4
 800e74a:	4413      	add	r3, r2
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1f2      	bne.n	800e738 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b02      	cmp	r3, #2
 800e756:	bf14      	ite	ne
 800e758:	2301      	movne	r3, #1
 800e75a:	2300      	moveq	r3, #0
 800e75c:	b2db      	uxtb	r3, r3
}
 800e75e:	4618      	mov	r0, r3
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	2401490c 	.word	0x2401490c

0800e770 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e77a:	2300      	movs	r3, #0
 800e77c:	60fb      	str	r3, [r7, #12]
 800e77e:	e01f      	b.n	800e7c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e780:	4a41      	ldr	r2, [pc, #260]	; (800e888 <inc_lock+0x118>)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	011b      	lsls	r3, r3, #4
 800e786:	4413      	add	r3, r2
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d113      	bne.n	800e7ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e792:	4a3d      	ldr	r2, [pc, #244]	; (800e888 <inc_lock+0x118>)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	011b      	lsls	r3, r3, #4
 800e798:	4413      	add	r3, r2
 800e79a:	3304      	adds	r3, #4
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d109      	bne.n	800e7ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e7a6:	4a38      	ldr	r2, [pc, #224]	; (800e888 <inc_lock+0x118>)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	011b      	lsls	r3, r3, #4
 800e7ac:	4413      	add	r3, r2
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d006      	beq.n	800e7c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d9dc      	bls.n	800e780 <inc_lock+0x10>
 800e7c6:	e000      	b.n	800e7ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e7c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	d132      	bne.n	800e836 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	e002      	b.n	800e7dc <inc_lock+0x6c>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d806      	bhi.n	800e7f0 <inc_lock+0x80>
 800e7e2:	4a29      	ldr	r2, [pc, #164]	; (800e888 <inc_lock+0x118>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	4413      	add	r3, r2
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1f2      	bne.n	800e7d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d101      	bne.n	800e7fa <inc_lock+0x8a>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e040      	b.n	800e87c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	4922      	ldr	r1, [pc, #136]	; (800e888 <inc_lock+0x118>)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	011b      	lsls	r3, r3, #4
 800e804:	440b      	add	r3, r1
 800e806:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	689a      	ldr	r2, [r3, #8]
 800e80c:	491e      	ldr	r1, [pc, #120]	; (800e888 <inc_lock+0x118>)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	011b      	lsls	r3, r3, #4
 800e812:	440b      	add	r3, r1
 800e814:	3304      	adds	r3, #4
 800e816:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	695a      	ldr	r2, [r3, #20]
 800e81c:	491a      	ldr	r1, [pc, #104]	; (800e888 <inc_lock+0x118>)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	011b      	lsls	r3, r3, #4
 800e822:	440b      	add	r3, r1
 800e824:	3308      	adds	r3, #8
 800e826:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e828:	4a17      	ldr	r2, [pc, #92]	; (800e888 <inc_lock+0x118>)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	011b      	lsls	r3, r3, #4
 800e82e:	4413      	add	r3, r2
 800e830:	330c      	adds	r3, #12
 800e832:	2200      	movs	r2, #0
 800e834:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d009      	beq.n	800e850 <inc_lock+0xe0>
 800e83c:	4a12      	ldr	r2, [pc, #72]	; (800e888 <inc_lock+0x118>)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	011b      	lsls	r3, r3, #4
 800e842:	4413      	add	r3, r2
 800e844:	330c      	adds	r3, #12
 800e846:	881b      	ldrh	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <inc_lock+0xe0>
 800e84c:	2300      	movs	r3, #0
 800e84e:	e015      	b.n	800e87c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d108      	bne.n	800e868 <inc_lock+0xf8>
 800e856:	4a0c      	ldr	r2, [pc, #48]	; (800e888 <inc_lock+0x118>)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	011b      	lsls	r3, r3, #4
 800e85c:	4413      	add	r3, r2
 800e85e:	330c      	adds	r3, #12
 800e860:	881b      	ldrh	r3, [r3, #0]
 800e862:	3301      	adds	r3, #1
 800e864:	b29a      	uxth	r2, r3
 800e866:	e001      	b.n	800e86c <inc_lock+0xfc>
 800e868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e86c:	4906      	ldr	r1, [pc, #24]	; (800e888 <inc_lock+0x118>)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	011b      	lsls	r3, r3, #4
 800e872:	440b      	add	r3, r1
 800e874:	330c      	adds	r3, #12
 800e876:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	3301      	adds	r3, #1
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	2401490c 	.word	0x2401490c

0800e88c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3b01      	subs	r3, #1
 800e898:	607b      	str	r3, [r7, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d825      	bhi.n	800e8ec <dec_lock+0x60>
		n = Files[i].ctr;
 800e8a0:	4a17      	ldr	r2, [pc, #92]	; (800e900 <dec_lock+0x74>)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	011b      	lsls	r3, r3, #4
 800e8a6:	4413      	add	r3, r2
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	881b      	ldrh	r3, [r3, #0]
 800e8ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e8ae:	89fb      	ldrh	r3, [r7, #14]
 800e8b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8b4:	d101      	bne.n	800e8ba <dec_lock+0x2e>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e8ba:	89fb      	ldrh	r3, [r7, #14]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <dec_lock+0x3a>
 800e8c0:	89fb      	ldrh	r3, [r7, #14]
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e8c6:	4a0e      	ldr	r2, [pc, #56]	; (800e900 <dec_lock+0x74>)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	011b      	lsls	r3, r3, #4
 800e8cc:	4413      	add	r3, r2
 800e8ce:	330c      	adds	r3, #12
 800e8d0:	89fa      	ldrh	r2, [r7, #14]
 800e8d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e8d4:	89fb      	ldrh	r3, [r7, #14]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d105      	bne.n	800e8e6 <dec_lock+0x5a>
 800e8da:	4a09      	ldr	r2, [pc, #36]	; (800e900 <dec_lock+0x74>)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	011b      	lsls	r3, r3, #4
 800e8e0:	4413      	add	r3, r2
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	737b      	strb	r3, [r7, #13]
 800e8ea:	e001      	b.n	800e8f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e8f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	2401490c 	.word	0x2401490c

0800e904 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e90c:	2300      	movs	r3, #0
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e010      	b.n	800e934 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e912:	4a0d      	ldr	r2, [pc, #52]	; (800e948 <clear_lock+0x44>)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	011b      	lsls	r3, r3, #4
 800e918:	4413      	add	r3, r2
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d105      	bne.n	800e92e <clear_lock+0x2a>
 800e922:	4a09      	ldr	r2, [pc, #36]	; (800e948 <clear_lock+0x44>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	4413      	add	r3, r2
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	3301      	adds	r3, #1
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d9eb      	bls.n	800e912 <clear_lock+0xe>
	}
}
 800e93a:	bf00      	nop
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	2401490c 	.word	0x2401490c

0800e94c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	78db      	ldrb	r3, [r3, #3]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d034      	beq.n	800e9ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e964:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	7858      	ldrb	r0, [r3, #1]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e970:	2301      	movs	r3, #1
 800e972:	697a      	ldr	r2, [r7, #20]
 800e974:	f7ff fd10 	bl	800e398 <disk_write>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e97e:	2301      	movs	r3, #1
 800e980:	73fb      	strb	r3, [r7, #15]
 800e982:	e022      	b.n	800e9ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	1ad2      	subs	r2, r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	429a      	cmp	r2, r3
 800e998:	d217      	bcs.n	800e9ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	789b      	ldrb	r3, [r3, #2]
 800e99e:	613b      	str	r3, [r7, #16]
 800e9a0:	e010      	b.n	800e9c4 <sync_window+0x78>
					wsect += fs->fsize;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	7858      	ldrb	r0, [r3, #1]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	697a      	ldr	r2, [r7, #20]
 800e9ba:	f7ff fced 	bl	800e398 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	613b      	str	r3, [r7, #16]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d8eb      	bhi.n	800e9a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d01b      	beq.n	800ea24 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f7ff ffad 	bl	800e94c <sync_window>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d113      	bne.n	800ea24 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	7858      	ldrb	r0, [r3, #1]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea06:	2301      	movs	r3, #1
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	f7ff fca5 	bl	800e358 <disk_read>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d004      	beq.n	800ea1e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea14:	f04f 33ff 	mov.w	r3, #4294967295
 800ea18:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	683a      	ldr	r2, [r7, #0]
 800ea22:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
	...

0800ea30 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7ff ff87 	bl	800e94c <sync_window>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d159      	bne.n	800eafc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2b03      	cmp	r3, #3
 800ea4e:	d149      	bne.n	800eae4 <sync_fs+0xb4>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	791b      	ldrb	r3, [r3, #4]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d145      	bne.n	800eae4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	899b      	ldrh	r3, [r3, #12]
 800ea62:	461a      	mov	r2, r3
 800ea64:	2100      	movs	r1, #0
 800ea66:	f7ff fd78 	bl	800e55a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	3338      	adds	r3, #56	; 0x38
 800ea6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea72:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff fd07 	bl	800e48a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	3338      	adds	r3, #56	; 0x38
 800ea80:	4921      	ldr	r1, [pc, #132]	; (800eb08 <sync_fs+0xd8>)
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff fd1c 	bl	800e4c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3338      	adds	r3, #56	; 0x38
 800ea8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ea90:	491e      	ldr	r1, [pc, #120]	; (800eb0c <sync_fs+0xdc>)
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7ff fd14 	bl	800e4c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3338      	adds	r3, #56	; 0x38
 800ea9c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	f7ff fd0a 	bl	800e4c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3338      	adds	r3, #56	; 0x38
 800eab0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	695b      	ldr	r3, [r3, #20]
 800eab8:	4619      	mov	r1, r3
 800eaba:	4610      	mov	r0, r2
 800eabc:	f7ff fd00 	bl	800e4c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	7858      	ldrb	r0, [r3, #1]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ead8:	2301      	movs	r3, #1
 800eada:	f7ff fc5d 	bl	800e398 <disk_write>
			fs->fsi_flag = 0;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	785b      	ldrb	r3, [r3, #1]
 800eae8:	2200      	movs	r2, #0
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff fc73 	bl	800e3d8 <disk_ioctl>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <sync_fs+0xcc>
 800eaf8:	2301      	movs	r3, #1
 800eafa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	41615252 	.word	0x41615252
 800eb0c:	61417272 	.word	0x61417272

0800eb10 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	3b02      	subs	r3, #2
 800eb1e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	69db      	ldr	r3, [r3, #28]
 800eb24:	3b02      	subs	r3, #2
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d301      	bcc.n	800eb30 <clust2sect+0x20>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	e008      	b.n	800eb42 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	895b      	ldrh	r3, [r3, #10]
 800eb34:	461a      	mov	r2, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	fb03 f202 	mul.w	r2, r3, r2
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb40:	4413      	add	r3, r2
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	370c      	adds	r7, #12
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b086      	sub	sp, #24
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d904      	bls.n	800eb6e <get_fat+0x20>
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	683a      	ldr	r2, [r7, #0]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d302      	bcc.n	800eb74 <get_fat+0x26>
		val = 1;	/* Internal error */
 800eb6e:	2301      	movs	r3, #1
 800eb70:	617b      	str	r3, [r7, #20]
 800eb72:	e0b7      	b.n	800ece4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb74:	f04f 33ff 	mov.w	r3, #4294967295
 800eb78:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	2b02      	cmp	r3, #2
 800eb80:	d05a      	beq.n	800ec38 <get_fat+0xea>
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d07d      	beq.n	800ec82 <get_fat+0x134>
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	f040 80a2 	bne.w	800ecd0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	085b      	lsrs	r3, r3, #1
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	4413      	add	r3, r2
 800eb98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	899b      	ldrh	r3, [r3, #12]
 800eba2:	4619      	mov	r1, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebaa:	4413      	add	r3, r2
 800ebac:	4619      	mov	r1, r3
 800ebae:	6938      	ldr	r0, [r7, #16]
 800ebb0:	f7ff ff10 	bl	800e9d4 <move_window>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f040 808d 	bne.w	800ecd6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	60fa      	str	r2, [r7, #12]
 800ebc2:	693a      	ldr	r2, [r7, #16]
 800ebc4:	8992      	ldrh	r2, [r2, #12]
 800ebc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebca:	fb02 f201 	mul.w	r2, r2, r1
 800ebce:	1a9b      	subs	r3, r3, r2
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ebd8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	899b      	ldrh	r3, [r3, #12]
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebea:	4413      	add	r3, r2
 800ebec:	4619      	mov	r1, r3
 800ebee:	6938      	ldr	r0, [r7, #16]
 800ebf0:	f7ff fef0 	bl	800e9d4 <move_window>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d16f      	bne.n	800ecda <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	899b      	ldrh	r3, [r3, #12]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec06:	fb02 f201 	mul.w	r2, r2, r1
 800ec0a:	1a9b      	subs	r3, r3, r2
 800ec0c:	693a      	ldr	r2, [r7, #16]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec14:	021b      	lsls	r3, r3, #8
 800ec16:	461a      	mov	r2, r3
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	f003 0301 	and.w	r3, r3, #1
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d002      	beq.n	800ec2e <get_fat+0xe0>
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	091b      	lsrs	r3, r3, #4
 800ec2c:	e002      	b.n	800ec34 <get_fat+0xe6>
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec34:	617b      	str	r3, [r7, #20]
			break;
 800ec36:	e055      	b.n	800ece4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	899b      	ldrh	r3, [r3, #12]
 800ec40:	085b      	lsrs	r3, r3, #1
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4619      	mov	r1, r3
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec4c:	4413      	add	r3, r2
 800ec4e:	4619      	mov	r1, r3
 800ec50:	6938      	ldr	r0, [r7, #16]
 800ec52:	f7ff febf 	bl	800e9d4 <move_window>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d140      	bne.n	800ecde <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	005b      	lsls	r3, r3, #1
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	8992      	ldrh	r2, [r2, #12]
 800ec6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec6e:	fb02 f200 	mul.w	r2, r2, r0
 800ec72:	1a9b      	subs	r3, r3, r2
 800ec74:	440b      	add	r3, r1
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff fbcc 	bl	800e414 <ld_word>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	617b      	str	r3, [r7, #20]
			break;
 800ec80:	e030      	b.n	800ece4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	899b      	ldrh	r3, [r3, #12]
 800ec8a:	089b      	lsrs	r3, r3, #2
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	4619      	mov	r1, r3
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec96:	4413      	add	r3, r2
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6938      	ldr	r0, [r7, #16]
 800ec9c:	f7ff fe9a 	bl	800e9d4 <move_window>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d11d      	bne.n	800ece2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	8992      	ldrh	r2, [r2, #12]
 800ecb4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecb8:	fb02 f200 	mul.w	r2, r2, r0
 800ecbc:	1a9b      	subs	r3, r3, r2
 800ecbe:	440b      	add	r3, r1
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7ff fbbf 	bl	800e444 <ld_dword>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eccc:	617b      	str	r3, [r7, #20]
			break;
 800ecce:	e009      	b.n	800ece4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	617b      	str	r3, [r7, #20]
 800ecd4:	e006      	b.n	800ece4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecd6:	bf00      	nop
 800ecd8:	e004      	b.n	800ece4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecda:	bf00      	nop
 800ecdc:	e002      	b.n	800ece4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecde:	bf00      	nop
 800ece0:	e000      	b.n	800ece4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ece2:	bf00      	nop
		}
	}

	return val;
 800ece4:	697b      	ldr	r3, [r7, #20]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3718      	adds	r7, #24
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ecee:	b590      	push	{r4, r7, lr}
 800ecf0:	b089      	sub	sp, #36	; 0x24
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	60f8      	str	r0, [r7, #12]
 800ecf6:	60b9      	str	r1, [r7, #8]
 800ecf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ecfa:	2302      	movs	r3, #2
 800ecfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	f240 8106 	bls.w	800ef12 <put_fat+0x224>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	69db      	ldr	r3, [r3, #28]
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	f080 8100 	bcs.w	800ef12 <put_fat+0x224>
		switch (fs->fs_type) {
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	f000 8088 	beq.w	800ee2c <put_fat+0x13e>
 800ed1c:	2b03      	cmp	r3, #3
 800ed1e:	f000 80b0 	beq.w	800ee82 <put_fat+0x194>
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	f040 80f5 	bne.w	800ef12 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	61bb      	str	r3, [r7, #24]
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	085b      	lsrs	r3, r3, #1
 800ed30:	69ba      	ldr	r2, [r7, #24]
 800ed32:	4413      	add	r3, r2
 800ed34:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	899b      	ldrh	r3, [r3, #12]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed46:	4413      	add	r3, r2
 800ed48:	4619      	mov	r1, r3
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7ff fe42 	bl	800e9d4 <move_window>
 800ed50:	4603      	mov	r3, r0
 800ed52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed54:	7ffb      	ldrb	r3, [r7, #31]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f040 80d4 	bne.w	800ef04 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	61ba      	str	r2, [r7, #24]
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	8992      	ldrh	r2, [r2, #12]
 800ed6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed70:	fb02 f200 	mul.w	r2, r2, r0
 800ed74:	1a9b      	subs	r3, r3, r2
 800ed76:	440b      	add	r3, r1
 800ed78:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	f003 0301 	and.w	r3, r3, #1
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00d      	beq.n	800eda0 <put_fat+0xb2>
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	b25b      	sxtb	r3, r3
 800ed8a:	f003 030f 	and.w	r3, r3, #15
 800ed8e:	b25a      	sxtb	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	011b      	lsls	r3, r3, #4
 800ed96:	b25b      	sxtb	r3, r3
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	b25b      	sxtb	r3, r3
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	e001      	b.n	800eda4 <put_fat+0xb6>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2201      	movs	r2, #1
 800edac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	899b      	ldrh	r3, [r3, #12]
 800edb6:	4619      	mov	r1, r3
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	fbb3 f3f1 	udiv	r3, r3, r1
 800edbe:	4413      	add	r3, r2
 800edc0:	4619      	mov	r1, r3
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff fe06 	bl	800e9d4 <move_window>
 800edc8:	4603      	mov	r3, r0
 800edca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edcc:	7ffb      	ldrb	r3, [r7, #31]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f040 809a 	bne.w	800ef08 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	899b      	ldrh	r3, [r3, #12]
 800edde:	461a      	mov	r2, r3
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ede6:	fb02 f200 	mul.w	r2, r2, r0
 800edea:	1a9b      	subs	r3, r3, r2
 800edec:	440b      	add	r3, r1
 800edee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d003      	beq.n	800ee02 <put_fat+0x114>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	091b      	lsrs	r3, r3, #4
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	e00e      	b.n	800ee20 <put_fat+0x132>
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	b25b      	sxtb	r3, r3
 800ee08:	f023 030f 	bic.w	r3, r3, #15
 800ee0c:	b25a      	sxtb	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	0a1b      	lsrs	r3, r3, #8
 800ee12:	b25b      	sxtb	r3, r3
 800ee14:	f003 030f 	and.w	r3, r3, #15
 800ee18:	b25b      	sxtb	r3, r3
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	b25b      	sxtb	r3, r3
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	697a      	ldr	r2, [r7, #20]
 800ee22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2201      	movs	r2, #1
 800ee28:	70da      	strb	r2, [r3, #3]
			break;
 800ee2a:	e072      	b.n	800ef12 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	899b      	ldrh	r3, [r3, #12]
 800ee34:	085b      	lsrs	r3, r3, #1
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	4619      	mov	r1, r3
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee40:	4413      	add	r3, r2
 800ee42:	4619      	mov	r1, r3
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f7ff fdc5 	bl	800e9d4 <move_window>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee4e:	7ffb      	ldrb	r3, [r7, #31]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d15b      	bne.n	800ef0c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	8992      	ldrh	r2, [r2, #12]
 800ee62:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee66:	fb02 f200 	mul.w	r2, r2, r0
 800ee6a:	1a9b      	subs	r3, r3, r2
 800ee6c:	440b      	add	r3, r1
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	b292      	uxth	r2, r2
 800ee72:	4611      	mov	r1, r2
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff fb08 	bl	800e48a <st_word>
			fs->wflag = 1;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	70da      	strb	r2, [r3, #3]
			break;
 800ee80:	e047      	b.n	800ef12 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	899b      	ldrh	r3, [r3, #12]
 800ee8a:	089b      	lsrs	r3, r3, #2
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	4619      	mov	r1, r3
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee96:	4413      	add	r3, r2
 800ee98:	4619      	mov	r1, r3
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f7ff fd9a 	bl	800e9d4 <move_window>
 800eea0:	4603      	mov	r3, r0
 800eea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eea4:	7ffb      	ldrb	r3, [r7, #31]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d132      	bne.n	800ef10 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	68fa      	ldr	r2, [r7, #12]
 800eebc:	8992      	ldrh	r2, [r2, #12]
 800eebe:	fbb3 f0f2 	udiv	r0, r3, r2
 800eec2:	fb02 f200 	mul.w	r2, r2, r0
 800eec6:	1a9b      	subs	r3, r3, r2
 800eec8:	440b      	add	r3, r1
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7ff faba 	bl	800e444 <ld_dword>
 800eed0:	4603      	mov	r3, r0
 800eed2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eed6:	4323      	orrs	r3, r4
 800eed8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	8992      	ldrh	r2, [r2, #12]
 800eee8:	fbb3 f0f2 	udiv	r0, r3, r2
 800eeec:	fb02 f200 	mul.w	r2, r2, r0
 800eef0:	1a9b      	subs	r3, r3, r2
 800eef2:	440b      	add	r3, r1
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff fae2 	bl	800e4c0 <st_dword>
			fs->wflag = 1;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2201      	movs	r2, #1
 800ef00:	70da      	strb	r2, [r3, #3]
			break;
 800ef02:	e006      	b.n	800ef12 <put_fat+0x224>
			if (res != FR_OK) break;
 800ef04:	bf00      	nop
 800ef06:	e004      	b.n	800ef12 <put_fat+0x224>
			if (res != FR_OK) break;
 800ef08:	bf00      	nop
 800ef0a:	e002      	b.n	800ef12 <put_fat+0x224>
			if (res != FR_OK) break;
 800ef0c:	bf00      	nop
 800ef0e:	e000      	b.n	800ef12 <put_fat+0x224>
			if (res != FR_OK) break;
 800ef10:	bf00      	nop
		}
	}
	return res;
 800ef12:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3724      	adds	r7, #36	; 0x24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd90      	pop	{r4, r7, pc}

0800ef1c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d904      	bls.n	800ef42 <remove_chain+0x26>
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	69db      	ldr	r3, [r3, #28]
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d301      	bcc.n	800ef46 <remove_chain+0x2a>
 800ef42:	2302      	movs	r3, #2
 800ef44:	e04b      	b.n	800efde <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00c      	beq.n	800ef66 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ef4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef50:	6879      	ldr	r1, [r7, #4]
 800ef52:	69b8      	ldr	r0, [r7, #24]
 800ef54:	f7ff fecb 	bl	800ecee <put_fat>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ef5c:	7ffb      	ldrb	r3, [r7, #31]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d001      	beq.n	800ef66 <remove_chain+0x4a>
 800ef62:	7ffb      	ldrb	r3, [r7, #31]
 800ef64:	e03b      	b.n	800efde <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef66:	68b9      	ldr	r1, [r7, #8]
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f7ff fdf0 	bl	800eb4e <get_fat>
 800ef6e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d031      	beq.n	800efda <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d101      	bne.n	800ef80 <remove_chain+0x64>
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	e02e      	b.n	800efde <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef86:	d101      	bne.n	800ef8c <remove_chain+0x70>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e028      	b.n	800efde <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	68b9      	ldr	r1, [r7, #8]
 800ef90:	69b8      	ldr	r0, [r7, #24]
 800ef92:	f7ff feac 	bl	800ecee <put_fat>
 800ef96:	4603      	mov	r3, r0
 800ef98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ef9a:	7ffb      	ldrb	r3, [r7, #31]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <remove_chain+0x88>
 800efa0:	7ffb      	ldrb	r3, [r7, #31]
 800efa2:	e01c      	b.n	800efde <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	699a      	ldr	r2, [r3, #24]
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	69db      	ldr	r3, [r3, #28]
 800efac:	3b02      	subs	r3, #2
 800efae:	429a      	cmp	r2, r3
 800efb0:	d20b      	bcs.n	800efca <remove_chain+0xae>
			fs->free_clst++;
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	791b      	ldrb	r3, [r3, #4]
 800efc0:	f043 0301 	orr.w	r3, r3, #1
 800efc4:	b2da      	uxtb	r2, r3
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	69db      	ldr	r3, [r3, #28]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d3c6      	bcc.n	800ef66 <remove_chain+0x4a>
 800efd8:	e000      	b.n	800efdc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800efda:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3720      	adds	r7, #32
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b088      	sub	sp, #32
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10d      	bne.n	800f018 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	695b      	ldr	r3, [r3, #20]
 800f000:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d004      	beq.n	800f012 <create_chain+0x2c>
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	69ba      	ldr	r2, [r7, #24]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d31b      	bcc.n	800f04a <create_chain+0x64>
 800f012:	2301      	movs	r3, #1
 800f014:	61bb      	str	r3, [r7, #24]
 800f016:	e018      	b.n	800f04a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f018:	6839      	ldr	r1, [r7, #0]
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7ff fd97 	bl	800eb4e <get_fat>
 800f020:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b01      	cmp	r3, #1
 800f026:	d801      	bhi.n	800f02c <create_chain+0x46>
 800f028:	2301      	movs	r3, #1
 800f02a:	e070      	b.n	800f10e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f032:	d101      	bne.n	800f038 <create_chain+0x52>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	e06a      	b.n	800f10e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d201      	bcs.n	800f046 <create_chain+0x60>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	e063      	b.n	800f10e <create_chain+0x128>
		scl = clst;
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	3301      	adds	r3, #1
 800f052:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	69db      	ldr	r3, [r3, #28]
 800f058:	69fa      	ldr	r2, [r7, #28]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d307      	bcc.n	800f06e <create_chain+0x88>
				ncl = 2;
 800f05e:	2302      	movs	r3, #2
 800f060:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f062:	69fa      	ldr	r2, [r7, #28]
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	429a      	cmp	r2, r3
 800f068:	d901      	bls.n	800f06e <create_chain+0x88>
 800f06a:	2300      	movs	r3, #0
 800f06c:	e04f      	b.n	800f10e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f06e:	69f9      	ldr	r1, [r7, #28]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff fd6c 	bl	800eb4e <get_fat>
 800f076:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00e      	beq.n	800f09c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d003      	beq.n	800f08c <create_chain+0xa6>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08a:	d101      	bne.n	800f090 <create_chain+0xaa>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	e03e      	b.n	800f10e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f090:	69fa      	ldr	r2, [r7, #28]
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	429a      	cmp	r2, r3
 800f096:	d1da      	bne.n	800f04e <create_chain+0x68>
 800f098:	2300      	movs	r3, #0
 800f09a:	e038      	b.n	800f10e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f09c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f09e:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a2:	69f9      	ldr	r1, [r7, #28]
 800f0a4:	6938      	ldr	r0, [r7, #16]
 800f0a6:	f7ff fe22 	bl	800ecee <put_fat>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d109      	bne.n	800f0c8 <create_chain+0xe2>
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d006      	beq.n	800f0c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f0ba:	69fa      	ldr	r2, [r7, #28]
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	6938      	ldr	r0, [r7, #16]
 800f0c0:	f7ff fe15 	bl	800ecee <put_fat>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d116      	bne.n	800f0fc <create_chain+0x116>
		fs->last_clst = ncl;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	69fa      	ldr	r2, [r7, #28]
 800f0d2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	699a      	ldr	r2, [r3, #24]
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	69db      	ldr	r3, [r3, #28]
 800f0dc:	3b02      	subs	r3, #2
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d804      	bhi.n	800f0ec <create_chain+0x106>
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	699b      	ldr	r3, [r3, #24]
 800f0e6:	1e5a      	subs	r2, r3, #1
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	791b      	ldrb	r3, [r3, #4]
 800f0f0:	f043 0301 	orr.w	r3, r3, #1
 800f0f4:	b2da      	uxtb	r2, r3
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	711a      	strb	r2, [r3, #4]
 800f0fa:	e007      	b.n	800f10c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f0fc:	7dfb      	ldrb	r3, [r7, #23]
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d102      	bne.n	800f108 <create_chain+0x122>
 800f102:	f04f 33ff 	mov.w	r3, #4294967295
 800f106:	e000      	b.n	800f10a <create_chain+0x124>
 800f108:	2301      	movs	r3, #1
 800f10a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f10c:	69fb      	ldr	r3, [r7, #28]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3720      	adds	r7, #32
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f116:	b480      	push	{r7}
 800f118:	b087      	sub	sp, #28
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
 800f11e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f12a:	3304      	adds	r3, #4
 800f12c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	899b      	ldrh	r3, [r3, #12]
 800f132:	461a      	mov	r2, r3
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	fbb3 f3f2 	udiv	r3, r3, r2
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	8952      	ldrh	r2, [r2, #10]
 800f13e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f142:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	1d1a      	adds	r2, r3, #4
 800f148:	613a      	str	r2, [r7, #16]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <clmt_clust+0x42>
 800f154:	2300      	movs	r3, #0
 800f156:	e010      	b.n	800f17a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d307      	bcc.n	800f170 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f160:	697a      	ldr	r2, [r7, #20]
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	617b      	str	r3, [r7, #20]
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	3304      	adds	r3, #4
 800f16c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f16e:	e7e9      	b.n	800f144 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f170:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	4413      	add	r3, r2
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	371c      	adds	r7, #28
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b086      	sub	sp, #24
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f19c:	d204      	bcs.n	800f1a8 <dir_sdi+0x22>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	f003 031f 	and.w	r3, r3, #31
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d001      	beq.n	800f1ac <dir_sdi+0x26>
		return FR_INT_ERR;
 800f1a8:	2302      	movs	r3, #2
 800f1aa:	e071      	b.n	800f290 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d106      	bne.n	800f1cc <dir_sdi+0x46>
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d902      	bls.n	800f1cc <dir_sdi+0x46>
		clst = fs->dirbase;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10c      	bne.n	800f1ec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	095b      	lsrs	r3, r3, #5
 800f1d6:	693a      	ldr	r2, [r7, #16]
 800f1d8:	8912      	ldrh	r2, [r2, #8]
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d301      	bcc.n	800f1e2 <dir_sdi+0x5c>
 800f1de:	2302      	movs	r3, #2
 800f1e0:	e056      	b.n	800f290 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	61da      	str	r2, [r3, #28]
 800f1ea:	e02d      	b.n	800f248 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	895b      	ldrh	r3, [r3, #10]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	899b      	ldrh	r3, [r3, #12]
 800f1f6:	fb03 f302 	mul.w	r3, r3, r2
 800f1fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1fc:	e019      	b.n	800f232 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6979      	ldr	r1, [r7, #20]
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fca3 	bl	800eb4e <get_fat>
 800f208:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f210:	d101      	bne.n	800f216 <dir_sdi+0x90>
 800f212:	2301      	movs	r3, #1
 800f214:	e03c      	b.n	800f290 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d904      	bls.n	800f226 <dir_sdi+0xa0>
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	69db      	ldr	r3, [r3, #28]
 800f220:	697a      	ldr	r2, [r7, #20]
 800f222:	429a      	cmp	r2, r3
 800f224:	d301      	bcc.n	800f22a <dir_sdi+0xa4>
 800f226:	2302      	movs	r3, #2
 800f228:	e032      	b.n	800f290 <dir_sdi+0x10a>
			ofs -= csz;
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	429a      	cmp	r2, r3
 800f238:	d2e1      	bcs.n	800f1fe <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f23a:	6979      	ldr	r1, [r7, #20]
 800f23c:	6938      	ldr	r0, [r7, #16]
 800f23e:	f7ff fc67 	bl	800eb10 <clust2sect>
 800f242:	4602      	mov	r2, r0
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d101      	bne.n	800f25a <dir_sdi+0xd4>
 800f256:	2302      	movs	r3, #2
 800f258:	e01a      	b.n	800f290 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	69da      	ldr	r2, [r3, #28]
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	899b      	ldrh	r3, [r3, #12]
 800f262:	4619      	mov	r1, r3
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	fbb3 f3f1 	udiv	r3, r3, r1
 800f26a:	441a      	add	r2, r3
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	899b      	ldrh	r3, [r3, #12]
 800f27a:	461a      	mov	r2, r3
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f282:	fb02 f200 	mul.w	r2, r2, r0
 800f286:	1a9b      	subs	r3, r3, r2
 800f288:	18ca      	adds	r2, r1, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	695b      	ldr	r3, [r3, #20]
 800f2ac:	3320      	adds	r3, #32
 800f2ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	69db      	ldr	r3, [r3, #28]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <dir_next+0x28>
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2be:	d301      	bcc.n	800f2c4 <dir_next+0x2c>
 800f2c0:	2304      	movs	r3, #4
 800f2c2:	e0bb      	b.n	800f43c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	899b      	ldrh	r3, [r3, #12]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2d0:	fb02 f201 	mul.w	r2, r2, r1
 800f2d4:	1a9b      	subs	r3, r3, r2
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f040 809d 	bne.w	800f416 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	69db      	ldr	r3, [r3, #28]
 800f2e0:	1c5a      	adds	r2, r3, #1
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	699b      	ldr	r3, [r3, #24]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10b      	bne.n	800f306 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	095b      	lsrs	r3, r3, #5
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	8912      	ldrh	r2, [r2, #8]
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	f0c0 808d 	bcc.w	800f416 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	61da      	str	r2, [r3, #28]
 800f302:	2304      	movs	r3, #4
 800f304:	e09a      	b.n	800f43c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	899b      	ldrh	r3, [r3, #12]
 800f30a:	461a      	mov	r2, r3
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	8952      	ldrh	r2, [r2, #10]
 800f316:	3a01      	subs	r2, #1
 800f318:	4013      	ands	r3, r2
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d17b      	bne.n	800f416 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	699b      	ldr	r3, [r3, #24]
 800f324:	4619      	mov	r1, r3
 800f326:	4610      	mov	r0, r2
 800f328:	f7ff fc11 	bl	800eb4e <get_fat>
 800f32c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d801      	bhi.n	800f338 <dir_next+0xa0>
 800f334:	2302      	movs	r3, #2
 800f336:	e081      	b.n	800f43c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f33e:	d101      	bne.n	800f344 <dir_next+0xac>
 800f340:	2301      	movs	r3, #1
 800f342:	e07b      	b.n	800f43c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	69db      	ldr	r3, [r3, #28]
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d359      	bcc.n	800f402 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d104      	bne.n	800f35e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	61da      	str	r2, [r3, #28]
 800f35a:	2304      	movs	r3, #4
 800f35c:	e06e      	b.n	800f43c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	4619      	mov	r1, r3
 800f366:	4610      	mov	r0, r2
 800f368:	f7ff fe3d 	bl	800efe6 <create_chain>
 800f36c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d101      	bne.n	800f378 <dir_next+0xe0>
 800f374:	2307      	movs	r3, #7
 800f376:	e061      	b.n	800f43c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d101      	bne.n	800f382 <dir_next+0xea>
 800f37e:	2302      	movs	r3, #2
 800f380:	e05c      	b.n	800f43c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f388:	d101      	bne.n	800f38e <dir_next+0xf6>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e056      	b.n	800f43c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff fadc 	bl	800e94c <sync_window>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <dir_next+0x106>
 800f39a:	2301      	movs	r3, #1
 800f39c:	e04e      	b.n	800f43c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	899b      	ldrh	r3, [r3, #12]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	f7ff f8d5 	bl	800e55a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	613b      	str	r3, [r7, #16]
 800f3b4:	6979      	ldr	r1, [r7, #20]
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f7ff fbaa 	bl	800eb10 <clust2sect>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	635a      	str	r2, [r3, #52]	; 0x34
 800f3c2:	e012      	b.n	800f3ea <dir_next+0x152>
						fs->wflag = 1;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff fabe 	bl	800e94c <sync_window>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d001      	beq.n	800f3da <dir_next+0x142>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e030      	b.n	800f43c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	613b      	str	r3, [r7, #16]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3e4:	1c5a      	adds	r2, r3, #1
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	635a      	str	r2, [r3, #52]	; 0x34
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	895b      	ldrh	r3, [r3, #10]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d3e6      	bcc.n	800f3c4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	1ad2      	subs	r2, r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	697a      	ldr	r2, [r7, #20]
 800f406:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f408:	6979      	ldr	r1, [r7, #20]
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f7ff fb80 	bl	800eb10 <clust2sect>
 800f410:	4602      	mov	r2, r0
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	899b      	ldrh	r3, [r3, #12]
 800f426:	461a      	mov	r2, r3
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f42e:	fb02 f200 	mul.w	r2, r2, r0
 800f432:	1a9b      	subs	r3, r3, r2
 800f434:	18ca      	adds	r2, r1, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b086      	sub	sp, #24
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f454:	2100      	movs	r1, #0
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff fe95 	bl	800f186 <dir_sdi>
 800f45c:	4603      	mov	r3, r0
 800f45e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f460:	7dfb      	ldrb	r3, [r7, #23]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d12b      	bne.n	800f4be <dir_alloc+0x7a>
		n = 0;
 800f466:	2300      	movs	r3, #0
 800f468:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	69db      	ldr	r3, [r3, #28]
 800f46e:	4619      	mov	r1, r3
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f7ff faaf 	bl	800e9d4 <move_window>
 800f476:	4603      	mov	r3, r0
 800f478:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d11d      	bne.n	800f4bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6a1b      	ldr	r3, [r3, #32]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	2be5      	cmp	r3, #229	; 0xe5
 800f488:	d004      	beq.n	800f494 <dir_alloc+0x50>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6a1b      	ldr	r3, [r3, #32]
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d107      	bne.n	800f4a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	3301      	adds	r3, #1
 800f498:	613b      	str	r3, [r7, #16]
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d102      	bne.n	800f4a8 <dir_alloc+0x64>
 800f4a2:	e00c      	b.n	800f4be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f4a8:	2101      	movs	r1, #1
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7ff fef4 	bl	800f298 <dir_next>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f4b4:	7dfb      	ldrb	r3, [r7, #23]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d0d7      	beq.n	800f46a <dir_alloc+0x26>
 800f4ba:	e000      	b.n	800f4be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f4bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f4be:	7dfb      	ldrb	r3, [r7, #23]
 800f4c0:	2b04      	cmp	r3, #4
 800f4c2:	d101      	bne.n	800f4c8 <dir_alloc+0x84>
 800f4c4:	2307      	movs	r3, #7
 800f4c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800f4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	331a      	adds	r3, #26
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe ff97 	bl	800e414 <ld_word>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b03      	cmp	r3, #3
 800f4f0:	d109      	bne.n	800f506 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	3314      	adds	r3, #20
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe ff8c 	bl	800e414 <ld_word>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	041b      	lsls	r3, r3, #16
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	4313      	orrs	r3, r2
 800f504:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f506:	68fb      	ldr	r3, [r7, #12]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	331a      	adds	r3, #26
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	b292      	uxth	r2, r2
 800f524:	4611      	mov	r1, r2
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe ffaf 	bl	800e48a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b03      	cmp	r3, #3
 800f532:	d109      	bne.n	800f548 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f103 0214 	add.w	r2, r3, #20
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	0c1b      	lsrs	r3, r3, #16
 800f53e:	b29b      	uxth	r3, r3
 800f540:	4619      	mov	r1, r3
 800f542:	4610      	mov	r0, r2
 800f544:	f7fe ffa1 	bl	800e48a <st_word>
	}
}
 800f548:	bf00      	nop
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f55e:	2100      	movs	r1, #0
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7ff fe10 	bl	800f186 <dir_sdi>
 800f566:	4603      	mov	r3, r0
 800f568:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f56a:	7dfb      	ldrb	r3, [r7, #23]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d001      	beq.n	800f574 <dir_find+0x24>
 800f570:	7dfb      	ldrb	r3, [r7, #23]
 800f572:	e03e      	b.n	800f5f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	69db      	ldr	r3, [r3, #28]
 800f578:	4619      	mov	r1, r3
 800f57a:	6938      	ldr	r0, [r7, #16]
 800f57c:	f7ff fa2a 	bl	800e9d4 <move_window>
 800f580:	4603      	mov	r3, r0
 800f582:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d12f      	bne.n	800f5ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f592:	7bfb      	ldrb	r3, [r7, #15]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d102      	bne.n	800f59e <dir_find+0x4e>
 800f598:	2304      	movs	r3, #4
 800f59a:	75fb      	strb	r3, [r7, #23]
 800f59c:	e028      	b.n	800f5f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a1b      	ldr	r3, [r3, #32]
 800f5a2:	330b      	adds	r3, #11
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6a1b      	ldr	r3, [r3, #32]
 800f5b4:	330b      	adds	r3, #11
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f003 0308 	and.w	r3, r3, #8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10a      	bne.n	800f5d6 <dir_find+0x86>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a18      	ldr	r0, [r3, #32]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3324      	adds	r3, #36	; 0x24
 800f5c8:	220b      	movs	r2, #11
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	f7fe ffdf 	bl	800e58e <mem_cmp>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00b      	beq.n	800f5ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff fe5d 	bl	800f298 <dir_next>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f5e2:	7dfb      	ldrb	r3, [r7, #23]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d0c5      	beq.n	800f574 <dir_find+0x24>
 800f5e8:	e002      	b.n	800f5f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f5ea:	bf00      	nop
 800f5ec:	e000      	b.n	800f5f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5ee:	bf00      	nop

	return res;
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b084      	sub	sp, #16
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f608:	2101      	movs	r1, #1
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7ff ff1a 	bl	800f444 <dir_alloc>
 800f610:	4603      	mov	r3, r0
 800f612:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f614:	7bfb      	ldrb	r3, [r7, #15]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d11c      	bne.n	800f654 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	69db      	ldr	r3, [r3, #28]
 800f61e:	4619      	mov	r1, r3
 800f620:	68b8      	ldr	r0, [r7, #8]
 800f622:	f7ff f9d7 	bl	800e9d4 <move_window>
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d111      	bne.n	800f654 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6a1b      	ldr	r3, [r3, #32]
 800f634:	2220      	movs	r2, #32
 800f636:	2100      	movs	r1, #0
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fe ff8e 	bl	800e55a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a18      	ldr	r0, [r3, #32]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	3324      	adds	r3, #36	; 0x24
 800f646:	220b      	movs	r2, #11
 800f648:	4619      	mov	r1, r3
 800f64a:	f7fe ff65 	bl	800e518 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	2201      	movs	r2, #1
 800f652:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f654:	7bfb      	ldrb	r3, [r7, #15]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
	...

0800f660 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	60fb      	str	r3, [r7, #12]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3324      	adds	r3, #36	; 0x24
 800f674:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f676:	220b      	movs	r2, #11
 800f678:	2120      	movs	r1, #32
 800f67a:	68b8      	ldr	r0, [r7, #8]
 800f67c:	f7fe ff6d 	bl	800e55a <mem_set>
	si = i = 0; ni = 8;
 800f680:	2300      	movs	r3, #0
 800f682:	613b      	str	r3, [r7, #16]
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	617b      	str	r3, [r7, #20]
 800f688:	2308      	movs	r3, #8
 800f68a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	617a      	str	r2, [r7, #20]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	4413      	add	r3, r2
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f69a:	7ffb      	ldrb	r3, [r7, #31]
 800f69c:	2b20      	cmp	r3, #32
 800f69e:	d94e      	bls.n	800f73e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f6a0:	7ffb      	ldrb	r3, [r7, #31]
 800f6a2:	2b2f      	cmp	r3, #47	; 0x2f
 800f6a4:	d006      	beq.n	800f6b4 <create_name+0x54>
 800f6a6:	7ffb      	ldrb	r3, [r7, #31]
 800f6a8:	2b5c      	cmp	r3, #92	; 0x5c
 800f6aa:	d110      	bne.n	800f6ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f6ac:	e002      	b.n	800f6b4 <create_name+0x54>
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	617b      	str	r3, [r7, #20]
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2b2f      	cmp	r3, #47	; 0x2f
 800f6be:	d0f6      	beq.n	800f6ae <create_name+0x4e>
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b5c      	cmp	r3, #92	; 0x5c
 800f6ca:	d0f0      	beq.n	800f6ae <create_name+0x4e>
			break;
 800f6cc:	e038      	b.n	800f740 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f6ce:	7ffb      	ldrb	r3, [r7, #31]
 800f6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f6d2:	d003      	beq.n	800f6dc <create_name+0x7c>
 800f6d4:	693a      	ldr	r2, [r7, #16]
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d30c      	bcc.n	800f6f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b0b      	cmp	r3, #11
 800f6e0:	d002      	beq.n	800f6e8 <create_name+0x88>
 800f6e2:	7ffb      	ldrb	r3, [r7, #31]
 800f6e4:	2b2e      	cmp	r3, #46	; 0x2e
 800f6e6:	d001      	beq.n	800f6ec <create_name+0x8c>
 800f6e8:	2306      	movs	r3, #6
 800f6ea:	e044      	b.n	800f776 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f6ec:	2308      	movs	r3, #8
 800f6ee:	613b      	str	r3, [r7, #16]
 800f6f0:	230b      	movs	r3, #11
 800f6f2:	61bb      	str	r3, [r7, #24]
			continue;
 800f6f4:	e022      	b.n	800f73c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f6f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	da04      	bge.n	800f708 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f6fe:	7ffb      	ldrb	r3, [r7, #31]
 800f700:	3b80      	subs	r3, #128	; 0x80
 800f702:	4a1f      	ldr	r2, [pc, #124]	; (800f780 <create_name+0x120>)
 800f704:	5cd3      	ldrb	r3, [r2, r3]
 800f706:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f708:	7ffb      	ldrb	r3, [r7, #31]
 800f70a:	4619      	mov	r1, r3
 800f70c:	481d      	ldr	r0, [pc, #116]	; (800f784 <create_name+0x124>)
 800f70e:	f7fe ff65 	bl	800e5dc <chk_chr>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d001      	beq.n	800f71c <create_name+0xbc>
 800f718:	2306      	movs	r3, #6
 800f71a:	e02c      	b.n	800f776 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f71c:	7ffb      	ldrb	r3, [r7, #31]
 800f71e:	2b60      	cmp	r3, #96	; 0x60
 800f720:	d905      	bls.n	800f72e <create_name+0xce>
 800f722:	7ffb      	ldrb	r3, [r7, #31]
 800f724:	2b7a      	cmp	r3, #122	; 0x7a
 800f726:	d802      	bhi.n	800f72e <create_name+0xce>
 800f728:	7ffb      	ldrb	r3, [r7, #31]
 800f72a:	3b20      	subs	r3, #32
 800f72c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	1c5a      	adds	r2, r3, #1
 800f732:	613a      	str	r2, [r7, #16]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	4413      	add	r3, r2
 800f738:	7ffa      	ldrb	r2, [r7, #31]
 800f73a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f73c:	e7a6      	b.n	800f68c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f73e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f740:	68fa      	ldr	r2, [r7, #12]
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	441a      	add	r2, r3
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <create_name+0xf4>
 800f750:	2306      	movs	r3, #6
 800f752:	e010      	b.n	800f776 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2be5      	cmp	r3, #229	; 0xe5
 800f75a:	d102      	bne.n	800f762 <create_name+0x102>
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	2205      	movs	r2, #5
 800f760:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f762:	7ffb      	ldrb	r3, [r7, #31]
 800f764:	2b20      	cmp	r3, #32
 800f766:	d801      	bhi.n	800f76c <create_name+0x10c>
 800f768:	2204      	movs	r2, #4
 800f76a:	e000      	b.n	800f76e <create_name+0x10e>
 800f76c:	2200      	movs	r2, #0
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	330b      	adds	r3, #11
 800f772:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f774:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f776:	4618      	mov	r0, r3
 800f778:	3720      	adds	r7, #32
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	08015178 	.word	0x08015178
 800f784:	080150e8 	.word	0x080150e8

0800f788 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f79c:	e002      	b.n	800f7a4 <follow_path+0x1c>
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b2f      	cmp	r3, #47	; 0x2f
 800f7aa:	d0f8      	beq.n	800f79e <follow_path+0x16>
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f7b2:	d0f4      	beq.n	800f79e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	2b1f      	cmp	r3, #31
 800f7c0:	d80a      	bhi.n	800f7d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2280      	movs	r2, #128	; 0x80
 800f7c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f7ff fcda 	bl	800f186 <dir_sdi>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	75fb      	strb	r3, [r7, #23]
 800f7d6:	e048      	b.n	800f86a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f7d8:	463b      	mov	r3, r7
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f7ff ff3f 	bl	800f660 <create_name>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d139      	bne.n	800f860 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff feaf 	bl	800f550 <dir_find>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f7fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f7fe:	7dfb      	ldrb	r3, [r7, #23]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00a      	beq.n	800f81a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f804:	7dfb      	ldrb	r3, [r7, #23]
 800f806:	2b04      	cmp	r3, #4
 800f808:	d12c      	bne.n	800f864 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f80a:	7afb      	ldrb	r3, [r7, #11]
 800f80c:	f003 0304 	and.w	r3, r3, #4
 800f810:	2b00      	cmp	r3, #0
 800f812:	d127      	bne.n	800f864 <follow_path+0xdc>
 800f814:	2305      	movs	r3, #5
 800f816:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f818:	e024      	b.n	800f864 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f81a:	7afb      	ldrb	r3, [r7, #11]
 800f81c:	f003 0304 	and.w	r3, r3, #4
 800f820:	2b00      	cmp	r3, #0
 800f822:	d121      	bne.n	800f868 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	799b      	ldrb	r3, [r3, #6]
 800f828:	f003 0310 	and.w	r3, r3, #16
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d102      	bne.n	800f836 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f830:	2305      	movs	r3, #5
 800f832:	75fb      	strb	r3, [r7, #23]
 800f834:	e019      	b.n	800f86a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	8992      	ldrh	r2, [r2, #12]
 800f844:	fbb3 f0f2 	udiv	r0, r3, r2
 800f848:	fb02 f200 	mul.w	r2, r2, r0
 800f84c:	1a9b      	subs	r3, r3, r2
 800f84e:	440b      	add	r3, r1
 800f850:	4619      	mov	r1, r3
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7ff fe3d 	bl	800f4d2 <ld_clust>
 800f858:	4602      	mov	r2, r0
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f85e:	e7bb      	b.n	800f7d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800f860:	bf00      	nop
 800f862:	e002      	b.n	800f86a <follow_path+0xe2>
				break;
 800f864:	bf00      	nop
 800f866:	e000      	b.n	800f86a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f868:	bf00      	nop
			}
		}
	}

	return res;
 800f86a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3718      	adds	r7, #24
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f874:	b480      	push	{r7}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f87c:	f04f 33ff 	mov.w	r3, #4294967295
 800f880:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d031      	beq.n	800f8ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	617b      	str	r3, [r7, #20]
 800f890:	e002      	b.n	800f898 <get_ldnumber+0x24>
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	3301      	adds	r3, #1
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	2b20      	cmp	r3, #32
 800f89e:	d903      	bls.n	800f8a8 <get_ldnumber+0x34>
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	2b3a      	cmp	r3, #58	; 0x3a
 800f8a6:	d1f4      	bne.n	800f892 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b3a      	cmp	r3, #58	; 0x3a
 800f8ae:	d11c      	bne.n	800f8ea <get_ldnumber+0x76>
			tp = *path;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	60fa      	str	r2, [r7, #12]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	3b30      	subs	r3, #48	; 0x30
 800f8c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b09      	cmp	r3, #9
 800f8c6:	d80e      	bhi.n	800f8e6 <get_ldnumber+0x72>
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d10a      	bne.n	800f8e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d107      	bne.n	800f8e6 <get_ldnumber+0x72>
					vol = (int)i;
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	e002      	b.n	800f8f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f8ee:	693b      	ldr	r3, [r7, #16]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	371c      	adds	r7, #28
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	70da      	strb	r2, [r3, #3]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f04f 32ff 	mov.w	r2, #4294967295
 800f912:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f7ff f85c 	bl	800e9d4 <move_window>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <check_fs+0x2a>
 800f922:	2304      	movs	r3, #4
 800f924:	e038      	b.n	800f998 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	3338      	adds	r3, #56	; 0x38
 800f92a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fe fd70 	bl	800e414 <ld_word>
 800f934:	4603      	mov	r3, r0
 800f936:	461a      	mov	r2, r3
 800f938:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d001      	beq.n	800f944 <check_fs+0x48>
 800f940:	2303      	movs	r3, #3
 800f942:	e029      	b.n	800f998 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f94a:	2be9      	cmp	r3, #233	; 0xe9
 800f94c:	d009      	beq.n	800f962 <check_fs+0x66>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f954:	2beb      	cmp	r3, #235	; 0xeb
 800f956:	d11e      	bne.n	800f996 <check_fs+0x9a>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f95e:	2b90      	cmp	r3, #144	; 0x90
 800f960:	d119      	bne.n	800f996 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	3338      	adds	r3, #56	; 0x38
 800f966:	3336      	adds	r3, #54	; 0x36
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fe fd6b 	bl	800e444 <ld_dword>
 800f96e:	4603      	mov	r3, r0
 800f970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f974:	4a0a      	ldr	r2, [pc, #40]	; (800f9a0 <check_fs+0xa4>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d101      	bne.n	800f97e <check_fs+0x82>
 800f97a:	2300      	movs	r3, #0
 800f97c:	e00c      	b.n	800f998 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	3338      	adds	r3, #56	; 0x38
 800f982:	3352      	adds	r3, #82	; 0x52
 800f984:	4618      	mov	r0, r3
 800f986:	f7fe fd5d 	bl	800e444 <ld_dword>
 800f98a:	4602      	mov	r2, r0
 800f98c:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <check_fs+0xa8>)
 800f98e:	429a      	cmp	r2, r3
 800f990:	d101      	bne.n	800f996 <check_fs+0x9a>
 800f992:	2300      	movs	r3, #0
 800f994:	e000      	b.n	800f998 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f996:	2302      	movs	r3, #2
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	00544146 	.word	0x00544146
 800f9a4:	33544146 	.word	0x33544146

0800f9a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b096      	sub	sp, #88	; 0x58
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7ff ff59 	bl	800f874 <get_ldnumber>
 800f9c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	da01      	bge.n	800f9ce <find_volume+0x26>
 800f9ca:	230b      	movs	r3, #11
 800f9cc:	e26c      	b.n	800fea8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f9ce:	4aa4      	ldr	r2, [pc, #656]	; (800fc60 <find_volume+0x2b8>)
 800f9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d101      	bne.n	800f9e2 <find_volume+0x3a>
 800f9de:	230c      	movs	r3, #12
 800f9e0:	e262      	b.n	800fea8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800f9e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9e4:	f7fe fe15 	bl	800e612 <lock_fs>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <find_volume+0x4a>
 800f9ee:	230f      	movs	r3, #15
 800f9f0:	e25a      	b.n	800fea8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f9f8:	79fb      	ldrb	r3, [r7, #7]
 800f9fa:	f023 0301 	bic.w	r3, r3, #1
 800f9fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01a      	beq.n	800fa3e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0a:	785b      	ldrb	r3, [r3, #1]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fe fc63 	bl	800e2d8 <disk_status>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fa18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa1c:	f003 0301 	and.w	r3, r3, #1
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10c      	bne.n	800fa3e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fa24:	79fb      	ldrb	r3, [r7, #7]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d007      	beq.n	800fa3a <find_volume+0x92>
 800fa2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa2e:	f003 0304 	and.w	r3, r3, #4
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800fa36:	230a      	movs	r3, #10
 800fa38:	e236      	b.n	800fea8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	e234      	b.n	800fea8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	2200      	movs	r2, #0
 800fa42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fa44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa46:	b2da      	uxtb	r2, r3
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	785b      	ldrb	r3, [r3, #1]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fe fc5b 	bl	800e30c <disk_initialize>
 800fa56:	4603      	mov	r3, r0
 800fa58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fa5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa60:	f003 0301 	and.w	r3, r3, #1
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fa68:	2303      	movs	r3, #3
 800fa6a:	e21d      	b.n	800fea8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fa6c:	79fb      	ldrb	r3, [r7, #7]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d007      	beq.n	800fa82 <find_volume+0xda>
 800fa72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa76:	f003 0304 	and.w	r3, r3, #4
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800fa7e:	230a      	movs	r3, #10
 800fa80:	e212      	b.n	800fea8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	7858      	ldrb	r0, [r3, #1]
 800fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa88:	330c      	adds	r3, #12
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	2102      	movs	r1, #2
 800fa8e:	f7fe fca3 	bl	800e3d8 <disk_ioctl>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d001      	beq.n	800fa9c <find_volume+0xf4>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e205      	b.n	800fea8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9e:	899b      	ldrh	r3, [r3, #12]
 800faa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800faa4:	d80d      	bhi.n	800fac2 <find_volume+0x11a>
 800faa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa8:	899b      	ldrh	r3, [r3, #12]
 800faaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faae:	d308      	bcc.n	800fac2 <find_volume+0x11a>
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	899b      	ldrh	r3, [r3, #12]
 800fab4:	461a      	mov	r2, r3
 800fab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab8:	899b      	ldrh	r3, [r3, #12]
 800faba:	3b01      	subs	r3, #1
 800fabc:	4013      	ands	r3, r2
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <find_volume+0x11e>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e1f0      	b.n	800fea8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800faca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800facc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800face:	f7ff ff15 	bl	800f8fc <check_fs>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d14b      	bne.n	800fb78 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fae0:	2300      	movs	r3, #0
 800fae2:	643b      	str	r3, [r7, #64]	; 0x40
 800fae4:	e01f      	b.n	800fb26 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800faec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faee:	011b      	lsls	r3, r3, #4
 800faf0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800faf4:	4413      	add	r3, r2
 800faf6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800faf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafa:	3304      	adds	r3, #4
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d006      	beq.n	800fb10 <find_volume+0x168>
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	3308      	adds	r3, #8
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fe fc9c 	bl	800e444 <ld_dword>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	e000      	b.n	800fb12 <find_volume+0x16a>
 800fb10:	2200      	movs	r2, #0
 800fb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fb1a:	440b      	add	r3, r1
 800fb1c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb22:	3301      	adds	r3, #1
 800fb24:	643b      	str	r3, [r7, #64]	; 0x40
 800fb26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	d9dc      	bls.n	800fae6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fb30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d002      	beq.n	800fb3c <find_volume+0x194>
 800fb36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fb44:	4413      	add	r3, r2
 800fb46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fb4a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fb4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d005      	beq.n	800fb5e <find_volume+0x1b6>
 800fb52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb56:	f7ff fed1 	bl	800f8fc <check_fs>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	e000      	b.n	800fb60 <find_volume+0x1b8>
 800fb5e:	2303      	movs	r3, #3
 800fb60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fb64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d905      	bls.n	800fb78 <find_volume+0x1d0>
 800fb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb6e:	3301      	adds	r3, #1
 800fb70:	643b      	str	r3, [r7, #64]	; 0x40
 800fb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb74:	2b03      	cmp	r3, #3
 800fb76:	d9e1      	bls.n	800fb3c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fb78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb7c:	2b04      	cmp	r3, #4
 800fb7e:	d101      	bne.n	800fb84 <find_volume+0x1dc>
 800fb80:	2301      	movs	r3, #1
 800fb82:	e191      	b.n	800fea8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fb84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d901      	bls.n	800fb90 <find_volume+0x1e8>
 800fb8c:	230d      	movs	r3, #13
 800fb8e:	e18b      	b.n	800fea8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb92:	3338      	adds	r3, #56	; 0x38
 800fb94:	330b      	adds	r3, #11
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fc3c 	bl	800e414 <ld_word>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	461a      	mov	r2, r3
 800fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba2:	899b      	ldrh	r3, [r3, #12]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d001      	beq.n	800fbac <find_volume+0x204>
 800fba8:	230d      	movs	r3, #13
 800fbaa:	e17d      	b.n	800fea8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	3338      	adds	r3, #56	; 0x38
 800fbb0:	3316      	adds	r3, #22
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fc2e 	bl	800e414 <ld_word>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d106      	bne.n	800fbd0 <find_volume+0x228>
 800fbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc4:	3338      	adds	r3, #56	; 0x38
 800fbc6:	3324      	adds	r3, #36	; 0x24
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7fe fc3b 	bl	800e444 <ld_dword>
 800fbce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbd4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe2:	789b      	ldrb	r3, [r3, #2]
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d005      	beq.n	800fbf4 <find_volume+0x24c>
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbea:	789b      	ldrb	r3, [r3, #2]
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	d001      	beq.n	800fbf4 <find_volume+0x24c>
 800fbf0:	230d      	movs	r3, #13
 800fbf2:	e159      	b.n	800fea8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf6:	789b      	ldrb	r3, [r3, #2]
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbfc:	fb02 f303 	mul.w	r3, r2, r3
 800fc00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc10:	895b      	ldrh	r3, [r3, #10]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d008      	beq.n	800fc28 <find_volume+0x280>
 800fc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc18:	895b      	ldrh	r3, [r3, #10]
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1e:	895b      	ldrh	r3, [r3, #10]
 800fc20:	3b01      	subs	r3, #1
 800fc22:	4013      	ands	r3, r2
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d001      	beq.n	800fc2c <find_volume+0x284>
 800fc28:	230d      	movs	r3, #13
 800fc2a:	e13d      	b.n	800fea8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2e:	3338      	adds	r3, #56	; 0x38
 800fc30:	3311      	adds	r3, #17
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe fbee 	bl	800e414 <ld_word>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc42:	891b      	ldrh	r3, [r3, #8]
 800fc44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc46:	8992      	ldrh	r2, [r2, #12]
 800fc48:	0952      	lsrs	r2, r2, #5
 800fc4a:	b292      	uxth	r2, r2
 800fc4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc50:	fb02 f201 	mul.w	r2, r2, r1
 800fc54:	1a9b      	subs	r3, r3, r2
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d003      	beq.n	800fc64 <find_volume+0x2bc>
 800fc5c:	230d      	movs	r3, #13
 800fc5e:	e123      	b.n	800fea8 <find_volume+0x500>
 800fc60:	24014904 	.word	0x24014904

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	3338      	adds	r3, #56	; 0x38
 800fc68:	3313      	adds	r3, #19
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe fbd2 	bl	800e414 <ld_word>
 800fc70:	4603      	mov	r3, r0
 800fc72:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fc74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d106      	bne.n	800fc88 <find_volume+0x2e0>
 800fc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7c:	3338      	adds	r3, #56	; 0x38
 800fc7e:	3320      	adds	r3, #32
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fe fbdf 	bl	800e444 <ld_dword>
 800fc86:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	3338      	adds	r3, #56	; 0x38
 800fc8c:	330e      	adds	r3, #14
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fbc0 	bl	800e414 <ld_word>
 800fc94:	4603      	mov	r3, r0
 800fc96:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fc98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d101      	bne.n	800fca2 <find_volume+0x2fa>
 800fc9e:	230d      	movs	r3, #13
 800fca0:	e102      	b.n	800fea8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fca2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca6:	4413      	add	r3, r2
 800fca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcaa:	8911      	ldrh	r1, [r2, #8]
 800fcac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcae:	8992      	ldrh	r2, [r2, #12]
 800fcb0:	0952      	lsrs	r2, r2, #5
 800fcb2:	b292      	uxth	r2, r2
 800fcb4:	fbb1 f2f2 	udiv	r2, r1, r2
 800fcb8:	b292      	uxth	r2, r2
 800fcba:	4413      	add	r3, r2
 800fcbc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fcbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d201      	bcs.n	800fcca <find_volume+0x322>
 800fcc6:	230d      	movs	r3, #13
 800fcc8:	e0ee      	b.n	800fea8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fcca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcd2:	8952      	ldrh	r2, [r2, #10]
 800fcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d101      	bne.n	800fce4 <find_volume+0x33c>
 800fce0:	230d      	movs	r3, #13
 800fce2:	e0e1      	b.n	800fea8 <find_volume+0x500>
		fmt = FS_FAT32;
 800fce4:	2303      	movs	r3, #3
 800fce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d802      	bhi.n	800fcfa <find_volume+0x352>
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d802      	bhi.n	800fd0a <find_volume+0x362>
 800fd04:	2301      	movs	r3, #1
 800fd06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0c:	1c9a      	adds	r2, r3, #2
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd16:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fd18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd1c:	441a      	add	r2, r3
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd20:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fd22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd26:	441a      	add	r2, r3
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fd2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd30:	2b03      	cmp	r3, #3
 800fd32:	d11e      	bne.n	800fd72 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd36:	3338      	adds	r3, #56	; 0x38
 800fd38:	332a      	adds	r3, #42	; 0x2a
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fb6a 	bl	800e414 <ld_word>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <find_volume+0x3a2>
 800fd46:	230d      	movs	r3, #13
 800fd48:	e0ae      	b.n	800fea8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	891b      	ldrh	r3, [r3, #8]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <find_volume+0x3ae>
 800fd52:	230d      	movs	r3, #13
 800fd54:	e0a8      	b.n	800fea8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	3338      	adds	r3, #56	; 0x38
 800fd5a:	332c      	adds	r3, #44	; 0x2c
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fe fb71 	bl	800e444 <ld_dword>
 800fd62:	4602      	mov	r2, r0
 800fd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd66:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	69db      	ldr	r3, [r3, #28]
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	647b      	str	r3, [r7, #68]	; 0x44
 800fd70:	e01f      	b.n	800fdb2 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	891b      	ldrh	r3, [r3, #8]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <find_volume+0x3d6>
 800fd7a:	230d      	movs	r3, #13
 800fd7c:	e094      	b.n	800fea8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd84:	441a      	add	r2, r3
 800fd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd88:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fd8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d103      	bne.n	800fd9a <find_volume+0x3f2>
 800fd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd94:	69db      	ldr	r3, [r3, #28]
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	e00a      	b.n	800fdb0 <find_volume+0x408>
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	69da      	ldr	r2, [r3, #28]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	005b      	lsls	r3, r3, #1
 800fda2:	4413      	add	r3, r2
 800fda4:	085a      	lsrs	r2, r3, #1
 800fda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda8:	69db      	ldr	r3, [r3, #28]
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fdb0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb4:	6a1a      	ldr	r2, [r3, #32]
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fdc4:	8989      	ldrh	r1, [r1, #12]
 800fdc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d201      	bcs.n	800fdd2 <find_volume+0x42a>
 800fdce:	230d      	movs	r3, #13
 800fdd0:	e06a      	b.n	800fea8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	619a      	str	r2, [r3, #24]
 800fdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fddc:	699a      	ldr	r2, [r3, #24]
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde4:	2280      	movs	r2, #128	; 0x80
 800fde6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fde8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	d149      	bne.n	800fe84 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	3338      	adds	r3, #56	; 0x38
 800fdf4:	3330      	adds	r3, #48	; 0x30
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fe fb0c 	bl	800e414 <ld_word>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d140      	bne.n	800fe84 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fe02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe04:	3301      	adds	r3, #1
 800fe06:	4619      	mov	r1, r3
 800fe08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe0a:	f7fe fde3 	bl	800e9d4 <move_window>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d137      	bne.n	800fe84 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	2200      	movs	r2, #0
 800fe18:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fe1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1c:	3338      	adds	r3, #56	; 0x38
 800fe1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fe faf6 	bl	800e414 <ld_word>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d127      	bne.n	800fe84 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fe34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe36:	3338      	adds	r3, #56	; 0x38
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7fe fb03 	bl	800e444 <ld_dword>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	4b1b      	ldr	r3, [pc, #108]	; (800feb0 <find_volume+0x508>)
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d11e      	bne.n	800fe84 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fe46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe48:	3338      	adds	r3, #56	; 0x38
 800fe4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fe faf8 	bl	800e444 <ld_dword>
 800fe54:	4602      	mov	r2, r0
 800fe56:	4b17      	ldr	r3, [pc, #92]	; (800feb4 <find_volume+0x50c>)
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d113      	bne.n	800fe84 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	3338      	adds	r3, #56	; 0x38
 800fe60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fe faed 	bl	800e444 <ld_dword>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	3338      	adds	r3, #56	; 0x38
 800fe74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fe fae3 	bl	800e444 <ld_dword>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fe84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe86:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fe8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fe8c:	4b0a      	ldr	r3, [pc, #40]	; (800feb8 <find_volume+0x510>)
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	3301      	adds	r3, #1
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	4b08      	ldr	r3, [pc, #32]	; (800feb8 <find_volume+0x510>)
 800fe96:	801a      	strh	r2, [r3, #0]
 800fe98:	4b07      	ldr	r3, [pc, #28]	; (800feb8 <find_volume+0x510>)
 800fe9a:	881a      	ldrh	r2, [r3, #0]
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fea2:	f7fe fd2f 	bl	800e904 <clear_lock>
#endif
	return FR_OK;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3758      	adds	r7, #88	; 0x58
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	41615252 	.word	0x41615252
 800feb4:	61417272 	.word	0x61417272
 800feb8:	24014908 	.word	0x24014908

0800febc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fec6:	2309      	movs	r3, #9
 800fec8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d02e      	beq.n	800ff2e <validate+0x72>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d02a      	beq.n	800ff2e <validate+0x72>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d025      	beq.n	800ff2e <validate+0x72>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	889a      	ldrh	r2, [r3, #4]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	88db      	ldrh	r3, [r3, #6]
 800feec:	429a      	cmp	r2, r3
 800feee:	d11e      	bne.n	800ff2e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe fb8c 	bl	800e612 <lock_fs>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d014      	beq.n	800ff2a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	785b      	ldrb	r3, [r3, #1]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fe f9e6 	bl	800e2d8 <disk_status>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <validate+0x60>
				res = FR_OK;
 800ff16:	2300      	movs	r3, #0
 800ff18:	73fb      	strb	r3, [r7, #15]
 800ff1a:	e008      	b.n	800ff2e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2100      	movs	r1, #0
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fe fb8b 	bl	800e63e <unlock_fs>
 800ff28:	e001      	b.n	800ff2e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ff2a:	230f      	movs	r3, #15
 800ff2c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <validate+0x7e>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	e000      	b.n	800ff3c <validate+0x80>
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	6013      	str	r3, [r2, #0]
	return res;
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b088      	sub	sp, #32
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	4613      	mov	r3, r2
 800ff58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ff5e:	f107 0310 	add.w	r3, r7, #16
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7ff fc86 	bl	800f874 <get_ldnumber>
 800ff68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	da01      	bge.n	800ff74 <f_mount+0x28>
 800ff70:	230b      	movs	r3, #11
 800ff72:	e048      	b.n	8010006 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ff74:	4a26      	ldr	r2, [pc, #152]	; (8010010 <f_mount+0xc4>)
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00f      	beq.n	800ffa4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ff84:	69b8      	ldr	r0, [r7, #24]
 800ff86:	f7fe fcbd 	bl	800e904 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	691b      	ldr	r3, [r3, #16]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 ff77 	bl	8010e82 <ff_del_syncobj>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d101      	bne.n	800ff9e <f_mount+0x52>
 800ff9a:	2302      	movs	r3, #2
 800ff9c:	e033      	b.n	8010006 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00f      	beq.n	800ffca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2200      	movs	r2, #0
 800ffae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	b2da      	uxtb	r2, r3
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	3310      	adds	r3, #16
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4610      	mov	r0, r2
 800ffbc:	f000 ff41 	bl	8010e42 <ff_cre_syncobj>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <f_mount+0x7e>
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	e01d      	b.n	8010006 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	4910      	ldr	r1, [pc, #64]	; (8010010 <f_mount+0xc4>)
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d002      	beq.n	800ffe0 <f_mount+0x94>
 800ffda:	79fb      	ldrb	r3, [r7, #7]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d001      	beq.n	800ffe4 <f_mount+0x98>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	e010      	b.n	8010006 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ffe4:	f107 010c 	add.w	r1, r7, #12
 800ffe8:	f107 0308 	add.w	r3, r7, #8
 800ffec:	2200      	movs	r2, #0
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff fcda 	bl	800f9a8 <find_volume>
 800fff4:	4603      	mov	r3, r0
 800fff6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	7dfa      	ldrb	r2, [r7, #23]
 800fffc:	4611      	mov	r1, r2
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe fb1d 	bl	800e63e <unlock_fs>
 8010004:	7dfb      	ldrb	r3, [r7, #23]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3720      	adds	r7, #32
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	24014904 	.word	0x24014904

08010014 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b098      	sub	sp, #96	; 0x60
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	4613      	mov	r3, r2
 8010020:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <f_open+0x18>
 8010028:	2309      	movs	r3, #9
 801002a:	e1c2      	b.n	80103b2 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801002c:	79fb      	ldrb	r3, [r7, #7]
 801002e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010032:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010034:	79fa      	ldrb	r2, [r7, #7]
 8010036:	f107 0110 	add.w	r1, r7, #16
 801003a:	f107 0308 	add.w	r3, r7, #8
 801003e:	4618      	mov	r0, r3
 8010040:	f7ff fcb2 	bl	800f9a8 <find_volume>
 8010044:	4603      	mov	r3, r0
 8010046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801004a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801004e:	2b00      	cmp	r3, #0
 8010050:	f040 819f 	bne.w	8010392 <f_open+0x37e>
		dj.obj.fs = fs;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010058:	68ba      	ldr	r2, [r7, #8]
 801005a:	f107 0314 	add.w	r3, r7, #20
 801005e:	4611      	mov	r1, r2
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fb91 	bl	800f788 <follow_path>
 8010066:	4603      	mov	r3, r0
 8010068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801006c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010070:	2b00      	cmp	r3, #0
 8010072:	d11a      	bne.n	80100aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010074:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010078:	b25b      	sxtb	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	da03      	bge.n	8010086 <f_open+0x72>
				res = FR_INVALID_NAME;
 801007e:	2306      	movs	r3, #6
 8010080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010084:	e011      	b.n	80100aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010086:	79fb      	ldrb	r3, [r7, #7]
 8010088:	f023 0301 	bic.w	r3, r3, #1
 801008c:	2b00      	cmp	r3, #0
 801008e:	bf14      	ite	ne
 8010090:	2301      	movne	r3, #1
 8010092:	2300      	moveq	r3, #0
 8010094:	b2db      	uxtb	r3, r3
 8010096:	461a      	mov	r2, r3
 8010098:	f107 0314 	add.w	r3, r7, #20
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe fae8 	bl	800e674 <chk_lock>
 80100a4:	4603      	mov	r3, r0
 80100a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	f003 031c 	and.w	r3, r3, #28
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d07f      	beq.n	80101b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80100b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d017      	beq.n	80100ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80100bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100c0:	2b04      	cmp	r3, #4
 80100c2:	d10e      	bne.n	80100e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80100c4:	f7fe fb32 	bl	800e72c <enq_lock>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d006      	beq.n	80100dc <f_open+0xc8>
 80100ce:	f107 0314 	add.w	r3, r7, #20
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fa91 	bl	800f5fa <dir_register>
 80100d8:	4603      	mov	r3, r0
 80100da:	e000      	b.n	80100de <f_open+0xca>
 80100dc:	2312      	movs	r3, #18
 80100de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80100e2:	79fb      	ldrb	r3, [r7, #7]
 80100e4:	f043 0308 	orr.w	r3, r3, #8
 80100e8:	71fb      	strb	r3, [r7, #7]
 80100ea:	e010      	b.n	801010e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80100ec:	7ebb      	ldrb	r3, [r7, #26]
 80100ee:	f003 0311 	and.w	r3, r3, #17
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d003      	beq.n	80100fe <f_open+0xea>
					res = FR_DENIED;
 80100f6:	2307      	movs	r3, #7
 80100f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80100fc:	e007      	b.n	801010e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	f003 0304 	and.w	r3, r3, #4
 8010104:	2b00      	cmp	r3, #0
 8010106:	d002      	beq.n	801010e <f_open+0xfa>
 8010108:	2308      	movs	r3, #8
 801010a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801010e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010112:	2b00      	cmp	r3, #0
 8010114:	d168      	bne.n	80101e8 <f_open+0x1d4>
 8010116:	79fb      	ldrb	r3, [r7, #7]
 8010118:	f003 0308 	and.w	r3, r3, #8
 801011c:	2b00      	cmp	r3, #0
 801011e:	d063      	beq.n	80101e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010120:	f7fd fe98 	bl	800de54 <get_fattime>
 8010124:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010128:	330e      	adds	r3, #14
 801012a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801012c:	4618      	mov	r0, r3
 801012e:	f7fe f9c7 	bl	800e4c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	3316      	adds	r3, #22
 8010136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe f9c1 	bl	800e4c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801013e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010140:	330b      	adds	r3, #11
 8010142:	2220      	movs	r2, #32
 8010144:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801014a:	4611      	mov	r1, r2
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff f9c0 	bl	800f4d2 <ld_clust>
 8010152:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010158:	2200      	movs	r2, #0
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff f9d8 	bl	800f510 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010162:	331c      	adds	r3, #28
 8010164:	2100      	movs	r1, #0
 8010166:	4618      	mov	r0, r3
 8010168:	f7fe f9aa 	bl	800e4c0 <st_dword>
					fs->wflag = 1;
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	2201      	movs	r2, #1
 8010170:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010174:	2b00      	cmp	r3, #0
 8010176:	d037      	beq.n	80101e8 <f_open+0x1d4>
						dw = fs->winsect;
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801017c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801017e:	f107 0314 	add.w	r3, r7, #20
 8010182:	2200      	movs	r2, #0
 8010184:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010186:	4618      	mov	r0, r3
 8010188:	f7fe fec8 	bl	800ef1c <remove_chain>
 801018c:	4603      	mov	r3, r0
 801018e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010196:	2b00      	cmp	r3, #0
 8010198:	d126      	bne.n	80101e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe fc18 	bl	800e9d4 <move_window>
 80101a4:	4603      	mov	r3, r0
 80101a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101ae:	3a01      	subs	r2, #1
 80101b0:	615a      	str	r2, [r3, #20]
 80101b2:	e019      	b.n	80101e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80101b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d115      	bne.n	80101e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80101bc:	7ebb      	ldrb	r3, [r7, #26]
 80101be:	f003 0310 	and.w	r3, r3, #16
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d003      	beq.n	80101ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80101c6:	2304      	movs	r3, #4
 80101c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80101cc:	e00c      	b.n	80101e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80101ce:	79fb      	ldrb	r3, [r7, #7]
 80101d0:	f003 0302 	and.w	r3, r3, #2
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d007      	beq.n	80101e8 <f_open+0x1d4>
 80101d8:	7ebb      	ldrb	r3, [r7, #26]
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d002      	beq.n	80101e8 <f_open+0x1d4>
						res = FR_DENIED;
 80101e2:	2307      	movs	r3, #7
 80101e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80101e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d128      	bne.n	8010242 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	f003 0308 	and.w	r3, r3, #8
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80101fa:	79fb      	ldrb	r3, [r7, #7]
 80101fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010200:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801020a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010210:	79fb      	ldrb	r3, [r7, #7]
 8010212:	f023 0301 	bic.w	r3, r3, #1
 8010216:	2b00      	cmp	r3, #0
 8010218:	bf14      	ite	ne
 801021a:	2301      	movne	r3, #1
 801021c:	2300      	moveq	r3, #0
 801021e:	b2db      	uxtb	r3, r3
 8010220:	461a      	mov	r2, r3
 8010222:	f107 0314 	add.w	r3, r7, #20
 8010226:	4611      	mov	r1, r2
 8010228:	4618      	mov	r0, r3
 801022a:	f7fe faa1 	bl	800e770 <inc_lock>
 801022e:	4602      	mov	r2, r0
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <f_open+0x22e>
 801023c:	2302      	movs	r3, #2
 801023e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010246:	2b00      	cmp	r3, #0
 8010248:	f040 80a3 	bne.w	8010392 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010250:	4611      	mov	r1, r2
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff f93d 	bl	800f4d2 <ld_clust>
 8010258:	4602      	mov	r2, r0
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010260:	331c      	adds	r3, #28
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe f8ee 	bl	800e444 <ld_dword>
 8010268:	4602      	mov	r2, r0
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2200      	movs	r2, #0
 8010272:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010274:	693a      	ldr	r2, [r7, #16]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	88da      	ldrh	r2, [r3, #6]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	79fa      	ldrb	r2, [r7, #7]
 8010286:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2200      	movs	r2, #0
 801028c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2200      	movs	r2, #0
 8010292:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	3330      	adds	r3, #48	; 0x30
 801029e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102a2:	2100      	movs	r1, #0
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fe f958 	bl	800e55a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80102aa:	79fb      	ldrb	r3, [r7, #7]
 80102ac:	f003 0320 	and.w	r3, r3, #32
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d06e      	beq.n	8010392 <f_open+0x37e>
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d06a      	beq.n	8010392 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	68da      	ldr	r2, [r3, #12]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	895b      	ldrh	r3, [r3, #10]
 80102c8:	461a      	mov	r2, r3
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	899b      	ldrh	r3, [r3, #12]
 80102ce:	fb03 f302 	mul.w	r3, r3, r2
 80102d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	657b      	str	r3, [r7, #84]	; 0x54
 80102e0:	e016      	b.n	8010310 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fc31 	bl	800eb4e <get_fat>
 80102ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80102ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d802      	bhi.n	80102fa <f_open+0x2e6>
 80102f4:	2302      	movs	r3, #2
 80102f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80102fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010300:	d102      	bne.n	8010308 <f_open+0x2f4>
 8010302:	2301      	movs	r3, #1
 8010304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801030a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	657b      	str	r3, [r7, #84]	; 0x54
 8010310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010314:	2b00      	cmp	r3, #0
 8010316:	d103      	bne.n	8010320 <f_open+0x30c>
 8010318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801031a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801031c:	429a      	cmp	r2, r3
 801031e:	d8e0      	bhi.n	80102e2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010324:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801032a:	2b00      	cmp	r3, #0
 801032c:	d131      	bne.n	8010392 <f_open+0x37e>
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	899b      	ldrh	r3, [r3, #12]
 8010332:	461a      	mov	r2, r3
 8010334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010336:	fbb3 f1f2 	udiv	r1, r3, r2
 801033a:	fb02 f201 	mul.w	r2, r2, r1
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	2b00      	cmp	r3, #0
 8010342:	d026      	beq.n	8010392 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010348:	4618      	mov	r0, r3
 801034a:	f7fe fbe1 	bl	800eb10 <clust2sect>
 801034e:	6478      	str	r0, [r7, #68]	; 0x44
 8010350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010352:	2b00      	cmp	r3, #0
 8010354:	d103      	bne.n	801035e <f_open+0x34a>
						res = FR_INT_ERR;
 8010356:	2302      	movs	r3, #2
 8010358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801035c:	e019      	b.n	8010392 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	899b      	ldrh	r3, [r3, #12]
 8010362:	461a      	mov	r2, r3
 8010364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010366:	fbb3 f2f2 	udiv	r2, r3, r2
 801036a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801036c:	441a      	add	r2, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	7858      	ldrb	r0, [r3, #1]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6a1a      	ldr	r2, [r3, #32]
 8010380:	2301      	movs	r3, #1
 8010382:	f7fd ffe9 	bl	800e358 <disk_read>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d002      	beq.n	8010392 <f_open+0x37e>
 801038c:	2301      	movs	r3, #1
 801038e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <f_open+0x38c>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2200      	movs	r2, #0
 801039e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80103a6:	4611      	mov	r1, r2
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe f948 	bl	800e63e <unlock_fs>
 80103ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3760      	adds	r7, #96	; 0x60
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b08c      	sub	sp, #48	; 0x30
 80103be:	af00      	add	r7, sp, #0
 80103c0:	60f8      	str	r0, [r7, #12]
 80103c2:	60b9      	str	r1, [r7, #8]
 80103c4:	607a      	str	r2, [r7, #4]
 80103c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	2200      	movs	r2, #0
 80103d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f107 0210 	add.w	r2, r7, #16
 80103d8:	4611      	mov	r1, r2
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff fd6e 	bl	800febc <validate>
 80103e0:	4603      	mov	r3, r0
 80103e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80103e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d107      	bne.n	80103fe <f_write+0x44>
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	7d5b      	ldrb	r3, [r3, #21]
 80103f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80103f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d009      	beq.n	8010412 <f_write+0x58>
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010404:	4611      	mov	r1, r2
 8010406:	4618      	mov	r0, r3
 8010408:	f7fe f919 	bl	800e63e <unlock_fs>
 801040c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010410:	e192      	b.n	8010738 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	7d1b      	ldrb	r3, [r3, #20]
 8010416:	f003 0302 	and.w	r3, r3, #2
 801041a:	2b00      	cmp	r3, #0
 801041c:	d106      	bne.n	801042c <f_write+0x72>
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	2107      	movs	r1, #7
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe f90b 	bl	800e63e <unlock_fs>
 8010428:	2307      	movs	r3, #7
 801042a:	e185      	b.n	8010738 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	699a      	ldr	r2, [r3, #24]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	441a      	add	r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	429a      	cmp	r2, r3
 801043a:	f080 816a 	bcs.w	8010712 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	699b      	ldr	r3, [r3, #24]
 8010442:	43db      	mvns	r3, r3
 8010444:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010446:	e164      	b.n	8010712 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	699b      	ldr	r3, [r3, #24]
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	8992      	ldrh	r2, [r2, #12]
 8010450:	fbb3 f1f2 	udiv	r1, r3, r2
 8010454:	fb02 f201 	mul.w	r2, r2, r1
 8010458:	1a9b      	subs	r3, r3, r2
 801045a:	2b00      	cmp	r3, #0
 801045c:	f040 810f 	bne.w	801067e <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	693a      	ldr	r2, [r7, #16]
 8010466:	8992      	ldrh	r2, [r2, #12]
 8010468:	fbb3 f3f2 	udiv	r3, r3, r2
 801046c:	693a      	ldr	r2, [r7, #16]
 801046e:	8952      	ldrh	r2, [r2, #10]
 8010470:	3a01      	subs	r2, #1
 8010472:	4013      	ands	r3, r2
 8010474:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d14d      	bne.n	8010518 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	699b      	ldr	r3, [r3, #24]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10c      	bne.n	801049e <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	2b00      	cmp	r3, #0
 801048e:	d11a      	bne.n	80104c6 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2100      	movs	r1, #0
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fda6 	bl	800efe6 <create_chain>
 801049a:	62b8      	str	r0, [r7, #40]	; 0x28
 801049c:	e013      	b.n	80104c6 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d007      	beq.n	80104b6 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	4619      	mov	r1, r3
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7fe fe32 	bl	800f116 <clmt_clust>
 80104b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80104b4:	e007      	b.n	80104c6 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	69db      	ldr	r3, [r3, #28]
 80104bc:	4619      	mov	r1, r3
 80104be:	4610      	mov	r0, r2
 80104c0:	f7fe fd91 	bl	800efe6 <create_chain>
 80104c4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80104c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f000 8127 	beq.w	801071c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d109      	bne.n	80104e8 <f_write+0x12e>
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2202      	movs	r2, #2
 80104d8:	755a      	strb	r2, [r3, #21]
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	2102      	movs	r1, #2
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fe f8ad 	bl	800e63e <unlock_fs>
 80104e4:	2302      	movs	r3, #2
 80104e6:	e127      	b.n	8010738 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ee:	d109      	bne.n	8010504 <f_write+0x14a>
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2201      	movs	r2, #1
 80104f4:	755a      	strb	r2, [r3, #21]
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	2101      	movs	r1, #1
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fe f89f 	bl	800e63e <unlock_fs>
 8010500:	2301      	movs	r3, #1
 8010502:	e119      	b.n	8010738 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010508:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	689b      	ldr	r3, [r3, #8]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d102      	bne.n	8010518 <f_write+0x15e>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010516:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	7d1b      	ldrb	r3, [r3, #20]
 801051c:	b25b      	sxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	da1d      	bge.n	801055e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	7858      	ldrb	r0, [r3, #1]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6a1a      	ldr	r2, [r3, #32]
 8010530:	2301      	movs	r3, #1
 8010532:	f7fd ff31 	bl	800e398 <disk_write>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d009      	beq.n	8010550 <f_write+0x196>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2201      	movs	r2, #1
 8010540:	755a      	strb	r2, [r3, #21]
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	2101      	movs	r1, #1
 8010546:	4618      	mov	r0, r3
 8010548:	f7fe f879 	bl	800e63e <unlock_fs>
 801054c:	2301      	movs	r3, #1
 801054e:	e0f3      	b.n	8010738 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	7d1b      	ldrb	r3, [r3, #20]
 8010554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010558:	b2da      	uxtb	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801055e:	693a      	ldr	r2, [r7, #16]
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	69db      	ldr	r3, [r3, #28]
 8010564:	4619      	mov	r1, r3
 8010566:	4610      	mov	r0, r2
 8010568:	f7fe fad2 	bl	800eb10 <clust2sect>
 801056c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d109      	bne.n	8010588 <f_write+0x1ce>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2202      	movs	r2, #2
 8010578:	755a      	strb	r2, [r3, #21]
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	2102      	movs	r1, #2
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe f85d 	bl	800e63e <unlock_fs>
 8010584:	2302      	movs	r3, #2
 8010586:	e0d7      	b.n	8010738 <f_write+0x37e>
			sect += csect;
 8010588:	697a      	ldr	r2, [r7, #20]
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	4413      	add	r3, r2
 801058e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	899b      	ldrh	r3, [r3, #12]
 8010594:	461a      	mov	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	fbb3 f3f2 	udiv	r3, r3, r2
 801059c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d048      	beq.n	8010636 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105a4:	69ba      	ldr	r2, [r7, #24]
 80105a6:	6a3b      	ldr	r3, [r7, #32]
 80105a8:	4413      	add	r3, r2
 80105aa:	693a      	ldr	r2, [r7, #16]
 80105ac:	8952      	ldrh	r2, [r2, #10]
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d905      	bls.n	80105be <f_write+0x204>
					cc = fs->csize - csect;
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	895b      	ldrh	r3, [r3, #10]
 80105b6:	461a      	mov	r2, r3
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	7858      	ldrb	r0, [r3, #1]
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	69f9      	ldr	r1, [r7, #28]
 80105c8:	f7fd fee6 	bl	800e398 <disk_write>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d009      	beq.n	80105e6 <f_write+0x22c>
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2201      	movs	r2, #1
 80105d6:	755a      	strb	r2, [r3, #21]
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	2101      	movs	r1, #1
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe f82e 	bl	800e63e <unlock_fs>
 80105e2:	2301      	movs	r3, #1
 80105e4:	e0a8      	b.n	8010738 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6a1a      	ldr	r2, [r3, #32]
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	1ad3      	subs	r3, r2, r3
 80105ee:	6a3a      	ldr	r2, [r7, #32]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d918      	bls.n	8010626 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6a1a      	ldr	r2, [r3, #32]
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	693a      	ldr	r2, [r7, #16]
 8010604:	8992      	ldrh	r2, [r2, #12]
 8010606:	fb02 f303 	mul.w	r3, r2, r3
 801060a:	69fa      	ldr	r2, [r7, #28]
 801060c:	18d1      	adds	r1, r2, r3
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	461a      	mov	r2, r3
 8010614:	f7fd ff80 	bl	800e518 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	7d1b      	ldrb	r3, [r3, #20]
 801061c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010620:	b2da      	uxtb	r2, r3
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	899b      	ldrh	r3, [r3, #12]
 801062a:	461a      	mov	r2, r3
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	fb02 f303 	mul.w	r3, r2, r3
 8010632:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010634:	e050      	b.n	80106d8 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6a1b      	ldr	r3, [r3, #32]
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	429a      	cmp	r2, r3
 801063e:	d01b      	beq.n	8010678 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	699a      	ldr	r2, [r3, #24]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010648:	429a      	cmp	r2, r3
 801064a:	d215      	bcs.n	8010678 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	7858      	ldrb	r0, [r3, #1]
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010656:	2301      	movs	r3, #1
 8010658:	697a      	ldr	r2, [r7, #20]
 801065a:	f7fd fe7d 	bl	800e358 <disk_read>
 801065e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010660:	2b00      	cmp	r3, #0
 8010662:	d009      	beq.n	8010678 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2201      	movs	r2, #1
 8010668:	755a      	strb	r2, [r3, #21]
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	2101      	movs	r1, #1
 801066e:	4618      	mov	r0, r3
 8010670:	f7fd ffe5 	bl	800e63e <unlock_fs>
 8010674:	2301      	movs	r3, #1
 8010676:	e05f      	b.n	8010738 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	899b      	ldrh	r3, [r3, #12]
 8010682:	4618      	mov	r0, r3
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	699b      	ldr	r3, [r3, #24]
 8010688:	693a      	ldr	r2, [r7, #16]
 801068a:	8992      	ldrh	r2, [r2, #12]
 801068c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010690:	fb02 f201 	mul.w	r2, r2, r1
 8010694:	1a9b      	subs	r3, r3, r2
 8010696:	1ac3      	subs	r3, r0, r3
 8010698:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801069a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d901      	bls.n	80106a6 <f_write+0x2ec>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	699b      	ldr	r3, [r3, #24]
 80106b0:	693a      	ldr	r2, [r7, #16]
 80106b2:	8992      	ldrh	r2, [r2, #12]
 80106b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80106b8:	fb02 f200 	mul.w	r2, r2, r0
 80106bc:	1a9b      	subs	r3, r3, r2
 80106be:	440b      	add	r3, r1
 80106c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106c2:	69f9      	ldr	r1, [r7, #28]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fd ff27 	bl	800e518 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	7d1b      	ldrb	r3, [r3, #20]
 80106ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80106d8:	69fa      	ldr	r2, [r7, #28]
 80106da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106dc:	4413      	add	r3, r2
 80106de:	61fb      	str	r3, [r7, #28]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	699a      	ldr	r2, [r3, #24]
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	441a      	add	r2, r3
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	619a      	str	r2, [r3, #24]
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	68da      	ldr	r2, [r3, #12]
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	699b      	ldr	r3, [r3, #24]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	bf38      	it	cc
 80106f8:	461a      	movcc	r2, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	60da      	str	r2, [r3, #12]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010704:	441a      	add	r2, r3
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	601a      	str	r2, [r3, #0]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	f47f ae97 	bne.w	8010448 <f_write+0x8e>
 801071a:	e000      	b.n	801071e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801071c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	7d1b      	ldrb	r3, [r3, #20]
 8010722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010726:	b2da      	uxtb	r2, r3
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	2100      	movs	r1, #0
 8010730:	4618      	mov	r0, r3
 8010732:	f7fd ff84 	bl	800e63e <unlock_fs>
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	3730      	adds	r7, #48	; 0x30
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f107 0208 	add.w	r2, r7, #8
 801074e:	4611      	mov	r1, r2
 8010750:	4618      	mov	r0, r3
 8010752:	f7ff fbb3 	bl	800febc <validate>
 8010756:	4603      	mov	r3, r0
 8010758:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801075a:	7dfb      	ldrb	r3, [r7, #23]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d16d      	bne.n	801083c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	7d1b      	ldrb	r3, [r3, #20]
 8010764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010768:	2b00      	cmp	r3, #0
 801076a:	d067      	beq.n	801083c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7d1b      	ldrb	r3, [r3, #20]
 8010770:	b25b      	sxtb	r3, r3
 8010772:	2b00      	cmp	r3, #0
 8010774:	da1a      	bge.n	80107ac <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	7858      	ldrb	r0, [r3, #1]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6a1a      	ldr	r2, [r3, #32]
 8010784:	2301      	movs	r3, #1
 8010786:	f7fd fe07 	bl	800e398 <disk_write>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d006      	beq.n	801079e <f_sync+0x5e>
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2101      	movs	r1, #1
 8010794:	4618      	mov	r0, r3
 8010796:	f7fd ff52 	bl	800e63e <unlock_fs>
 801079a:	2301      	movs	r3, #1
 801079c:	e055      	b.n	801084a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7d1b      	ldrb	r3, [r3, #20]
 80107a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107a6:	b2da      	uxtb	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107ac:	f7fd fb52 	bl	800de54 <get_fattime>
 80107b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b8:	4619      	mov	r1, r3
 80107ba:	4610      	mov	r0, r2
 80107bc:	f7fe f90a 	bl	800e9d4 <move_window>
 80107c0:	4603      	mov	r3, r0
 80107c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107c4:	7dfb      	ldrb	r3, [r7, #23]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d138      	bne.n	801083c <f_sync+0xfc>
					dir = fp->dir_ptr;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	330b      	adds	r3, #11
 80107d4:	781a      	ldrb	r2, [r3, #0]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	330b      	adds	r3, #11
 80107da:	f042 0220 	orr.w	r2, r2, #32
 80107de:	b2d2      	uxtb	r2, r2
 80107e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6818      	ldr	r0, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	689b      	ldr	r3, [r3, #8]
 80107ea:	461a      	mov	r2, r3
 80107ec:	68f9      	ldr	r1, [r7, #12]
 80107ee:	f7fe fe8f 	bl	800f510 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f103 021c 	add.w	r2, r3, #28
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	4619      	mov	r1, r3
 80107fe:	4610      	mov	r0, r2
 8010800:	f7fd fe5e 	bl	800e4c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	3316      	adds	r3, #22
 8010808:	6939      	ldr	r1, [r7, #16]
 801080a:	4618      	mov	r0, r3
 801080c:	f7fd fe58 	bl	800e4c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	3312      	adds	r3, #18
 8010814:	2100      	movs	r1, #0
 8010816:	4618      	mov	r0, r3
 8010818:	f7fd fe37 	bl	800e48a <st_word>
					fs->wflag = 1;
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2201      	movs	r2, #1
 8010820:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	4618      	mov	r0, r3
 8010826:	f7fe f903 	bl	800ea30 <sync_fs>
 801082a:	4603      	mov	r3, r0
 801082c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	7d1b      	ldrb	r3, [r3, #20]
 8010832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010836:	b2da      	uxtb	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	7dfa      	ldrb	r2, [r7, #23]
 8010840:	4611      	mov	r1, r2
 8010842:	4618      	mov	r0, r3
 8010844:	f7fd fefb 	bl	800e63e <unlock_fs>
 8010848:	7dfb      	ldrb	r3, [r7, #23]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3718      	adds	r7, #24
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}

08010852 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010852:	b580      	push	{r7, lr}
 8010854:	b084      	sub	sp, #16
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff ff70 	bl	8010740 <f_sync>
 8010860:	4603      	mov	r3, r0
 8010862:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010864:	7bfb      	ldrb	r3, [r7, #15]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d11d      	bne.n	80108a6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f107 0208 	add.w	r2, r7, #8
 8010870:	4611      	mov	r1, r2
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff fb22 	bl	800febc <validate>
 8010878:	4603      	mov	r3, r0
 801087a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801087c:	7bfb      	ldrb	r3, [r7, #15]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d111      	bne.n	80108a6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	691b      	ldr	r3, [r3, #16]
 8010886:	4618      	mov	r0, r3
 8010888:	f7fe f800 	bl	800e88c <dec_lock>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	2100      	movs	r1, #0
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fd fecc 	bl	800e63e <unlock_fs>
#endif
		}
	}
	return res;
 80108a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b090      	sub	sp, #64	; 0x40
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f107 0208 	add.w	r2, r7, #8
 80108c0:	4611      	mov	r1, r2
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff fafa 	bl	800febc <validate>
 80108c8:	4603      	mov	r3, r0
 80108ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80108ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d103      	bne.n	80108de <f_lseek+0x2e>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	7d5b      	ldrb	r3, [r3, #21]
 80108da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80108de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d009      	beq.n	80108fa <f_lseek+0x4a>
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80108ec:	4611      	mov	r1, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fd fea5 	bl	800e63e <unlock_fs>
 80108f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108f8:	e244      	b.n	8010d84 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 80f2 	beq.w	8010ae8 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801090a:	d164      	bne.n	80109d6 <f_lseek+0x126>
			tbl = fp->cltbl;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010910:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	1d1a      	adds	r2, r3, #4
 8010916:	627a      	str	r2, [r7, #36]	; 0x24
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	617b      	str	r3, [r7, #20]
 801091c:	2302      	movs	r3, #2
 801091e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010928:	2b00      	cmp	r3, #0
 801092a:	d044      	beq.n	80109b6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092e:	613b      	str	r3, [r7, #16]
 8010930:	2300      	movs	r3, #0
 8010932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010936:	3302      	adds	r3, #2
 8010938:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093c:	60fb      	str	r3, [r7, #12]
 801093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010940:	3301      	adds	r3, #1
 8010942:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe f900 	bl	800eb4e <get_fat>
 801094e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010952:	2b01      	cmp	r3, #1
 8010954:	d809      	bhi.n	801096a <f_lseek+0xba>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2202      	movs	r2, #2
 801095a:	755a      	strb	r2, [r3, #21]
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	2102      	movs	r1, #2
 8010960:	4618      	mov	r0, r3
 8010962:	f7fd fe6c 	bl	800e63e <unlock_fs>
 8010966:	2302      	movs	r3, #2
 8010968:	e20c      	b.n	8010d84 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010970:	d109      	bne.n	8010986 <f_lseek+0xd6>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2201      	movs	r2, #1
 8010976:	755a      	strb	r2, [r3, #21]
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2101      	movs	r1, #1
 801097c:	4618      	mov	r0, r3
 801097e:	f7fd fe5e 	bl	800e63e <unlock_fs>
 8010982:	2301      	movs	r3, #1
 8010984:	e1fe      	b.n	8010d84 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	3301      	adds	r3, #1
 801098a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801098c:	429a      	cmp	r2, r3
 801098e:	d0d4      	beq.n	801093a <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	429a      	cmp	r2, r3
 8010996:	d809      	bhi.n	80109ac <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	1d1a      	adds	r2, r3, #4
 801099c:	627a      	str	r2, [r7, #36]	; 0x24
 801099e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109a0:	601a      	str	r2, [r3, #0]
 80109a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a4:	1d1a      	adds	r2, r3, #4
 80109a6:	627a      	str	r2, [r7, #36]	; 0x24
 80109a8:	693a      	ldr	r2, [r7, #16]
 80109aa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	69db      	ldr	r3, [r3, #28]
 80109b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d3ba      	bcc.n	801092c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109bc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80109be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d803      	bhi.n	80109ce <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80109c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c8:	2200      	movs	r2, #0
 80109ca:	601a      	str	r2, [r3, #0]
 80109cc:	e1d1      	b.n	8010d72 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80109ce:	2311      	movs	r3, #17
 80109d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80109d4:	e1cd      	b.n	8010d72 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	683a      	ldr	r2, [r7, #0]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d902      	bls.n	80109e6 <f_lseek+0x136>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f000 81bf 	beq.w	8010d72 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	4619      	mov	r1, r3
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f7fe fb8b 	bl	800f116 <clmt_clust>
 8010a00:	4602      	mov	r2, r0
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	69db      	ldr	r3, [r3, #28]
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	4610      	mov	r0, r2
 8010a10:	f7fe f87e 	bl	800eb10 <clust2sect>
 8010a14:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d109      	bne.n	8010a30 <f_lseek+0x180>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2202      	movs	r2, #2
 8010a20:	755a      	strb	r2, [r3, #21]
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	2102      	movs	r1, #2
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fd fe09 	bl	800e63e <unlock_fs>
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	e1a9      	b.n	8010d84 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	3b01      	subs	r3, #1
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	8992      	ldrh	r2, [r2, #12]
 8010a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	8952      	ldrh	r2, [r2, #10]
 8010a40:	3a01      	subs	r2, #1
 8010a42:	4013      	ands	r3, r2
 8010a44:	69ba      	ldr	r2, [r7, #24]
 8010a46:	4413      	add	r3, r2
 8010a48:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	699b      	ldr	r3, [r3, #24]
 8010a4e:	68ba      	ldr	r2, [r7, #8]
 8010a50:	8992      	ldrh	r2, [r2, #12]
 8010a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a56:	fb02 f201 	mul.w	r2, r2, r1
 8010a5a:	1a9b      	subs	r3, r3, r2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8188 	beq.w	8010d72 <f_lseek+0x4c2>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a1b      	ldr	r3, [r3, #32]
 8010a66:	69ba      	ldr	r2, [r7, #24]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	f000 8182 	beq.w	8010d72 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	7d1b      	ldrb	r3, [r3, #20]
 8010a72:	b25b      	sxtb	r3, r3
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	da1d      	bge.n	8010ab4 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	7858      	ldrb	r0, [r3, #1]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a1a      	ldr	r2, [r3, #32]
 8010a86:	2301      	movs	r3, #1
 8010a88:	f7fd fc86 	bl	800e398 <disk_write>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d009      	beq.n	8010aa6 <f_lseek+0x1f6>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2201      	movs	r2, #1
 8010a96:	755a      	strb	r2, [r3, #21]
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	2101      	movs	r1, #1
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fd fdce 	bl	800e63e <unlock_fs>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e16e      	b.n	8010d84 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	7d1b      	ldrb	r3, [r3, #20]
 8010aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	7858      	ldrb	r0, [r3, #1]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010abe:	2301      	movs	r3, #1
 8010ac0:	69ba      	ldr	r2, [r7, #24]
 8010ac2:	f7fd fc49 	bl	800e358 <disk_read>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d009      	beq.n	8010ae0 <f_lseek+0x230>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	755a      	strb	r2, [r3, #21]
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	2101      	movs	r1, #1
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fd fdb1 	bl	800e63e <unlock_fs>
 8010adc:	2301      	movs	r3, #1
 8010ade:	e151      	b.n	8010d84 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	69ba      	ldr	r2, [r7, #24]
 8010ae4:	621a      	str	r2, [r3, #32]
 8010ae6:	e144      	b.n	8010d72 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	683a      	ldr	r2, [r7, #0]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d908      	bls.n	8010b04 <f_lseek+0x254>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	7d1b      	ldrb	r3, [r3, #20]
 8010af6:	f003 0302 	and.w	r3, r3, #2
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	699b      	ldr	r3, [r3, #24]
 8010b08:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b12:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 80ce 	beq.w	8010cb8 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	895b      	ldrh	r3, [r3, #10]
 8010b20:	461a      	mov	r2, r3
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	899b      	ldrh	r3, [r3, #12]
 8010b26:	fb03 f302 	mul.w	r3, r3, r2
 8010b2a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010b2c:	6a3b      	ldr	r3, [r7, #32]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d01b      	beq.n	8010b6a <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	1e5a      	subs	r2, r3, #1
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8010b3c:	6a3b      	ldr	r3, [r7, #32]
 8010b3e:	1e59      	subs	r1, r3, #1
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d30f      	bcc.n	8010b6a <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010b4a:	6a3b      	ldr	r3, [r7, #32]
 8010b4c:	1e5a      	subs	r2, r3, #1
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	425b      	negs	r3, r3
 8010b52:	401a      	ands	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	699b      	ldr	r3, [r3, #24]
 8010b5c:	683a      	ldr	r2, [r7, #0]
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	69db      	ldr	r3, [r3, #28]
 8010b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b68:	e02c      	b.n	8010bc4 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	689b      	ldr	r3, [r3, #8]
 8010b6e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d123      	bne.n	8010bbe <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2100      	movs	r1, #0
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fa33 	bl	800efe6 <create_chain>
 8010b80:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d109      	bne.n	8010b9c <f_lseek+0x2ec>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2202      	movs	r2, #2
 8010b8c:	755a      	strb	r2, [r3, #21]
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2102      	movs	r1, #2
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fd fd53 	bl	800e63e <unlock_fs>
 8010b98:	2302      	movs	r3, #2
 8010b9a:	e0f3      	b.n	8010d84 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba2:	d109      	bne.n	8010bb8 <f_lseek+0x308>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	755a      	strb	r2, [r3, #21]
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	2101      	movs	r1, #1
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fd fd45 	bl	800e63e <unlock_fs>
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e0e5      	b.n	8010d84 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bbc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bc2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d076      	beq.n	8010cb8 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8010bca:	e044      	b.n	8010c56 <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8010bcc:	683a      	ldr	r2, [r7, #0]
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	603b      	str	r3, [r7, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	699a      	ldr	r2, [r3, #24]
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	441a      	add	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	7d1b      	ldrb	r3, [r3, #20]
 8010be4:	f003 0302 	and.w	r3, r3, #2
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00b      	beq.n	8010c04 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fe f9f8 	bl	800efe6 <create_chain>
 8010bf6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d108      	bne.n	8010c10 <f_lseek+0x360>
							ofs = 0; break;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	603b      	str	r3, [r7, #0]
 8010c02:	e02c      	b.n	8010c5e <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fd ffa0 	bl	800eb4e <get_fat>
 8010c0e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c16:	d109      	bne.n	8010c2c <f_lseek+0x37c>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	755a      	strb	r2, [r3, #21]
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2101      	movs	r1, #1
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fd fd0b 	bl	800e63e <unlock_fs>
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e0ab      	b.n	8010d84 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d904      	bls.n	8010c3c <f_lseek+0x38c>
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	69db      	ldr	r3, [r3, #28]
 8010c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d309      	bcc.n	8010c50 <f_lseek+0x3a0>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	755a      	strb	r2, [r3, #21]
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2102      	movs	r1, #2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fd fcf9 	bl	800e63e <unlock_fs>
 8010c4c:	2302      	movs	r3, #2
 8010c4e:	e099      	b.n	8010d84 <f_lseek+0x4d4>
					fp->clust = clst;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c54:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010c56:	683a      	ldr	r2, [r7, #0]
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d8b6      	bhi.n	8010bcc <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	699a      	ldr	r2, [r3, #24]
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	441a      	add	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	899b      	ldrh	r3, [r3, #12]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c76:	fb02 f201 	mul.w	r2, r2, r1
 8010c7a:	1a9b      	subs	r3, r3, r2
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d01b      	beq.n	8010cb8 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fd ff43 	bl	800eb10 <clust2sect>
 8010c8a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d109      	bne.n	8010ca6 <f_lseek+0x3f6>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2202      	movs	r2, #2
 8010c96:	755a      	strb	r2, [r3, #21]
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	2102      	movs	r1, #2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fd fcce 	bl	800e63e <unlock_fs>
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	e06e      	b.n	8010d84 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	899b      	ldrh	r3, [r3, #12]
 8010caa:	461a      	mov	r2, r3
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cb4:	4413      	add	r3, r2
 8010cb6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	699a      	ldr	r2, [r3, #24]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d90a      	bls.n	8010cda <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	699a      	ldr	r2, [r3, #24]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	7d1b      	ldrb	r3, [r3, #20]
 8010cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cd4:	b2da      	uxtb	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	699b      	ldr	r3, [r3, #24]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	8992      	ldrh	r2, [r2, #12]
 8010ce2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ce6:	fb02 f201 	mul.w	r2, r2, r1
 8010cea:	1a9b      	subs	r3, r3, r2
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d040      	beq.n	8010d72 <f_lseek+0x4c2>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6a1b      	ldr	r3, [r3, #32]
 8010cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d03b      	beq.n	8010d72 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	7d1b      	ldrb	r3, [r3, #20]
 8010cfe:	b25b      	sxtb	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	da1d      	bge.n	8010d40 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	7858      	ldrb	r0, [r3, #1]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6a1a      	ldr	r2, [r3, #32]
 8010d12:	2301      	movs	r3, #1
 8010d14:	f7fd fb40 	bl	800e398 <disk_write>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d009      	beq.n	8010d32 <f_lseek+0x482>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2201      	movs	r2, #1
 8010d22:	755a      	strb	r2, [r3, #21]
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	2101      	movs	r1, #1
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fd fc88 	bl	800e63e <unlock_fs>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e028      	b.n	8010d84 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	7d1b      	ldrb	r3, [r3, #20]
 8010d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	7858      	ldrb	r0, [r3, #1]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d4e:	f7fd fb03 	bl	800e358 <disk_read>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d009      	beq.n	8010d6c <f_lseek+0x4bc>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	755a      	strb	r2, [r3, #21]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2101      	movs	r1, #1
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fd fc6b 	bl	800e63e <unlock_fs>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e00b      	b.n	8010d84 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d70:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010d78:	4611      	mov	r1, r2
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fd fc5f 	bl	800e63e <unlock_fs>
 8010d80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3740      	adds	r7, #64	; 0x40
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b087      	sub	sp, #28
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	4613      	mov	r3, r2
 8010d98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010da2:	4b1f      	ldr	r3, [pc, #124]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010da4:	7a5b      	ldrb	r3, [r3, #9]
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d131      	bne.n	8010e10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010dac:	4b1c      	ldr	r3, [pc, #112]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010dae:	7a5b      	ldrb	r3, [r3, #9]
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	461a      	mov	r2, r3
 8010db4:	4b1a      	ldr	r3, [pc, #104]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010db6:	2100      	movs	r1, #0
 8010db8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010dba:	4b19      	ldr	r3, [pc, #100]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010dbc:	7a5b      	ldrb	r3, [r3, #9]
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	4a17      	ldr	r2, [pc, #92]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	4413      	add	r3, r2
 8010dc6:	68fa      	ldr	r2, [r7, #12]
 8010dc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010dca:	4b15      	ldr	r3, [pc, #84]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010dcc:	7a5b      	ldrb	r3, [r3, #9]
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	4b13      	ldr	r3, [pc, #76]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010dd4:	4413      	add	r3, r2
 8010dd6:	79fa      	ldrb	r2, [r7, #7]
 8010dd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010dda:	4b11      	ldr	r3, [pc, #68]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010ddc:	7a5b      	ldrb	r3, [r3, #9]
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	1c5a      	adds	r2, r3, #1
 8010de2:	b2d1      	uxtb	r1, r2
 8010de4:	4a0e      	ldr	r2, [pc, #56]	; (8010e20 <FATFS_LinkDriverEx+0x94>)
 8010de6:	7251      	strb	r1, [r2, #9]
 8010de8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010dea:	7dbb      	ldrb	r3, [r7, #22]
 8010dec:	3330      	adds	r3, #48	; 0x30
 8010dee:	b2da      	uxtb	r2, r3
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	3301      	adds	r3, #1
 8010df8:	223a      	movs	r2, #58	; 0x3a
 8010dfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	3302      	adds	r3, #2
 8010e00:	222f      	movs	r2, #47	; 0x2f
 8010e02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	3303      	adds	r3, #3
 8010e08:	2200      	movs	r2, #0
 8010e0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	371c      	adds	r7, #28
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	2401492c 	.word	0x2401492c

08010e24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010e2e:	2200      	movs	r2, #0
 8010e30:	6839      	ldr	r1, [r7, #0]
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff ffaa 	bl	8010d8c <FATFS_LinkDriverEx>
 8010e38:	4603      	mov	r3, r0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b086      	sub	sp, #24
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	4603      	mov	r3, r0
 8010e4a:	6039      	str	r1, [r7, #0]
 8010e4c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8010e4e:	2300      	movs	r3, #0
 8010e50:	60fb      	str	r3, [r7, #12]
 8010e52:	2300      	movs	r3, #0
 8010e54:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010e56:	f107 030c 	add.w	r3, r7, #12
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f000 f961 	bl	8011124 <osSemaphoreCreate>
 8010e62:	4602      	mov	r2, r0
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bf14      	ite	ne
 8010e70:	2301      	movne	r3, #1
 8010e72:	2300      	moveq	r3, #0
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	617b      	str	r3, [r7, #20]

    return ret;
 8010e78:	697b      	ldr	r3, [r7, #20]
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3718      	adds	r7, #24
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010e82:	b580      	push	{r7, lr}
 8010e84:	b082      	sub	sp, #8
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fa02 	bl	8011294 <osSemaphoreDelete>
#endif
    return 1;
 8010e90:	2301      	movs	r3, #1
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3708      	adds	r7, #8
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b084      	sub	sp, #16
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010ea6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f000 f96e 	bl	801118c <osSemaphoreWait>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d101      	bne.n	8010eba <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010eba:	68fb      	ldr	r3, [r7, #12]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 f9ab 	bl	8011228 <osSemaphoreRelease>
#endif
}
 8010ed2:	bf00      	nop
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010eda:	b480      	push	{r7}
 8010edc:	b085      	sub	sp, #20
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010eec:	2b84      	cmp	r3, #132	; 0x84
 8010eee:	d005      	beq.n	8010efc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010ef0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	3303      	adds	r3, #3
 8010efa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010efc:	68fb      	ldr	r3, [r7, #12]
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3714      	adds	r7, #20
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010f0a:	b480      	push	{r7}
 8010f0c:	b083      	sub	sp, #12
 8010f0e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f10:	f3ef 8305 	mrs	r3, IPSR
 8010f14:	607b      	str	r3, [r7, #4]
  return(result);
 8010f16:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	bf14      	ite	ne
 8010f1c:	2301      	movne	r3, #1
 8010f1e:	2300      	moveq	r3, #0
 8010f20:	b2db      	uxtb	r3, r3
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010f32:	f001 fffd 	bl	8012f30 <vTaskStartScheduler>
  
  return osOK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010f40:	f002 fc0c 	bl	801375c <xTaskGetSchedulerState>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d101      	bne.n	8010f4e <osKernelRunning+0x12>
    return 0;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	e000      	b.n	8010f50 <osKernelRunning+0x14>
  else
    return 1;
 8010f4e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010f58:	f7ff ffd7 	bl	8010f0a <inHandlerMode>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d003      	beq.n	8010f6a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010f62:	f002 f8fd 	bl	8013160 <xTaskGetTickCountFromISR>
 8010f66:	4603      	mov	r3, r0
 8010f68:	e002      	b.n	8010f70 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010f6a:	f002 f8e9 	bl	8013140 <xTaskGetTickCount>
 8010f6e:	4603      	mov	r3, r0
  }
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f76:	b089      	sub	sp, #36	; 0x24
 8010f78:	af04      	add	r7, sp, #16
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d020      	beq.n	8010fc8 <osThreadCreate+0x54>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	699b      	ldr	r3, [r3, #24]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d01c      	beq.n	8010fc8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	685c      	ldr	r4, [r3, #4]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681d      	ldr	r5, [r3, #0]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	691e      	ldr	r6, [r3, #16]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7ff ff9a 	bl	8010eda <makeFreeRtosPriority>
 8010fa6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	695b      	ldr	r3, [r3, #20]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010fb0:	9202      	str	r2, [sp, #8]
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	9100      	str	r1, [sp, #0]
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	4632      	mov	r2, r6
 8010fba:	4629      	mov	r1, r5
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f001 fc99 	bl	80128f4 <xTaskCreateStatic>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	60fb      	str	r3, [r7, #12]
 8010fc6:	e01c      	b.n	8011002 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685c      	ldr	r4, [r3, #4]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010fd4:	b29e      	uxth	r6, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff ff7c 	bl	8010eda <makeFreeRtosPriority>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	f107 030c 	add.w	r3, r7, #12
 8010fe8:	9301      	str	r3, [sp, #4]
 8010fea:	9200      	str	r2, [sp, #0]
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	4632      	mov	r2, r6
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f001 fcd8 	bl	80129a8 <xTaskCreate>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d001      	beq.n	8011002 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010ffe:	2300      	movs	r3, #0
 8011000:	e000      	b.n	8011004 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011002:	68fb      	ldr	r3, [r7, #12]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801100c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af02      	add	r7, sp, #8
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011016:	2300      	movs	r3, #0
 8011018:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801101e:	f7ff ff74 	bl	8010f0a <inHandlerMode>
 8011022:	4603      	mov	r3, r0
 8011024:	2b00      	cmp	r3, #0
 8011026:	d01c      	beq.n	8011062 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011028:	6839      	ldr	r1, [r7, #0]
 801102a:	f107 0208 	add.w	r2, r7, #8
 801102e:	f107 030c 	add.w	r3, r7, #12
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	4613      	mov	r3, r2
 8011036:	2201      	movs	r2, #1
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f002 fe69 	bl	8013d10 <xTaskGenericNotifyFromISR>
 801103e:	4603      	mov	r3, r0
 8011040:	2b01      	cmp	r3, #1
 8011042:	d002      	beq.n	801104a <osSignalSet+0x3e>
      return 0x80000000;
 8011044:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011048:	e019      	b.n	801107e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d015      	beq.n	801107c <osSignalSet+0x70>
 8011050:	4b0d      	ldr	r3, [pc, #52]	; (8011088 <osSignalSet+0x7c>)
 8011052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	f3bf 8f6f 	isb	sy
 8011060:	e00c      	b.n	801107c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	f107 0308 	add.w	r3, r7, #8
 8011068:	2201      	movs	r2, #1
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f002 fd9e 	bl	8013bac <xTaskGenericNotify>
 8011070:	4603      	mov	r3, r0
 8011072:	2b01      	cmp	r3, #1
 8011074:	d002      	beq.n	801107c <osSignalSet+0x70>
    return 0x80000000;
 8011076:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801107a:	e000      	b.n	801107e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 801107c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801107e:	4618      	mov	r0, r3
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	e000ed04 	.word	0xe000ed04

0801108c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 801108c:	b590      	push	{r4, r7, lr}
 801108e:	b089      	sub	sp, #36	; 0x24
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011098:	2300      	movs	r3, #0
 801109a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 801109c:	2300      	movs	r3, #0
 801109e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a6:	d103      	bne.n	80110b0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80110a8:	f04f 33ff 	mov.w	r3, #4294967295
 80110ac:	61fb      	str	r3, [r7, #28]
 80110ae:	e009      	b.n	80110c4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d006      	beq.n	80110c4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80110ba:	69fb      	ldr	r3, [r7, #28]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d101      	bne.n	80110c4 <osSignalWait+0x38>
      ticks = 1;
 80110c0:	2301      	movs	r3, #1
 80110c2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80110c4:	f7ff ff21 	bl	8010f0a <inHandlerMode>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d002      	beq.n	80110d4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80110ce:	2382      	movs	r3, #130	; 0x82
 80110d0:	613b      	str	r3, [r7, #16]
 80110d2:	e01b      	b.n	801110c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80110d4:	68b9      	ldr	r1, [r7, #8]
 80110d6:	f107 0310 	add.w	r3, r7, #16
 80110da:	1d1a      	adds	r2, r3, #4
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	2000      	movs	r0, #0
 80110e0:	f002 fd0a 	bl	8013af8 <xTaskNotifyWait>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d008      	beq.n	80110fc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d102      	bne.n	80110f6 <osSignalWait+0x6a>
 80110f0:	2300      	movs	r3, #0
 80110f2:	613b      	str	r3, [r7, #16]
 80110f4:	e00a      	b.n	801110c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80110f6:	2340      	movs	r3, #64	; 0x40
 80110f8:	613b      	str	r3, [r7, #16]
 80110fa:	e007      	b.n	801110c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	da02      	bge.n	8011108 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011102:	2386      	movs	r3, #134	; 0x86
 8011104:	613b      	str	r3, [r7, #16]
 8011106:	e001      	b.n	801110c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011108:	2308      	movs	r3, #8
 801110a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	461c      	mov	r4, r3
 8011110:	f107 0310 	add.w	r3, r7, #16
 8011114:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	3724      	adds	r7, #36	; 0x24
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}

08011124 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011124:	b580      	push	{r7, lr}
 8011126:	b086      	sub	sp, #24
 8011128:	af02      	add	r7, sp, #8
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d010      	beq.n	8011158 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	2b01      	cmp	r3, #1
 801113a:	d10b      	bne.n	8011154 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	2303      	movs	r3, #3
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	4613      	mov	r3, r2
 8011146:	2200      	movs	r2, #0
 8011148:	2100      	movs	r1, #0
 801114a:	2001      	movs	r0, #1
 801114c:	f000 fd12 	bl	8011b74 <xQueueGenericCreateStatic>
 8011150:	4603      	mov	r3, r0
 8011152:	e016      	b.n	8011182 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011154:	2300      	movs	r3, #0
 8011156:	e014      	b.n	8011182 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d110      	bne.n	8011180 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 801115e:	2203      	movs	r2, #3
 8011160:	2100      	movs	r1, #0
 8011162:	2001      	movs	r0, #1
 8011164:	f000 fd79 	bl	8011c5a <xQueueGenericCreate>
 8011168:	60f8      	str	r0, [r7, #12]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <osSemaphoreCreate+0x58>
 8011170:	2300      	movs	r3, #0
 8011172:	2200      	movs	r2, #0
 8011174:	2100      	movs	r1, #0
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f000 fdce 	bl	8011d18 <xQueueGenericSend>
      return sema;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	e000      	b.n	8011182 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011180:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
	...

0801118c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011196:	2300      	movs	r3, #0
 8011198:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d101      	bne.n	80111a4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80111a0:	2380      	movs	r3, #128	; 0x80
 80111a2:	e03a      	b.n	801121a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80111a4:	2300      	movs	r3, #0
 80111a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ae:	d103      	bne.n	80111b8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80111b0:	f04f 33ff 	mov.w	r3, #4294967295
 80111b4:	60fb      	str	r3, [r7, #12]
 80111b6:	e009      	b.n	80111cc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d006      	beq.n	80111cc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d101      	bne.n	80111cc <osSemaphoreWait+0x40>
      ticks = 1;
 80111c8:	2301      	movs	r3, #1
 80111ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80111cc:	f7ff fe9d 	bl	8010f0a <inHandlerMode>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d017      	beq.n	8011206 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80111d6:	f107 0308 	add.w	r3, r7, #8
 80111da:	461a      	mov	r2, r3
 80111dc:	2100      	movs	r1, #0
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f001 f996 	bl	8012510 <xQueueReceiveFromISR>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d001      	beq.n	80111ee <osSemaphoreWait+0x62>
      return osErrorOS;
 80111ea:	23ff      	movs	r3, #255	; 0xff
 80111ec:	e015      	b.n	801121a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d011      	beq.n	8011218 <osSemaphoreWait+0x8c>
 80111f4:	4b0b      	ldr	r3, [pc, #44]	; (8011224 <osSemaphoreWait+0x98>)
 80111f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111fa:	601a      	str	r2, [r3, #0]
 80111fc:	f3bf 8f4f 	dsb	sy
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	e008      	b.n	8011218 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011206:	68f9      	ldr	r1, [r7, #12]
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f001 f879 	bl	8012300 <xQueueSemaphoreTake>
 801120e:	4603      	mov	r3, r0
 8011210:	2b01      	cmp	r3, #1
 8011212:	d001      	beq.n	8011218 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011214:	23ff      	movs	r3, #255	; 0xff
 8011216:	e000      	b.n	801121a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	e000ed04 	.word	0xe000ed04

08011228 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011230:	2300      	movs	r3, #0
 8011232:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011234:	2300      	movs	r3, #0
 8011236:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011238:	f7ff fe67 	bl	8010f0a <inHandlerMode>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d016      	beq.n	8011270 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011242:	f107 0308 	add.w	r3, r7, #8
 8011246:	4619      	mov	r1, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fef3 	bl	8012034 <xQueueGiveFromISR>
 801124e:	4603      	mov	r3, r0
 8011250:	2b01      	cmp	r3, #1
 8011252:	d001      	beq.n	8011258 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011254:	23ff      	movs	r3, #255	; 0xff
 8011256:	e017      	b.n	8011288 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d013      	beq.n	8011286 <osSemaphoreRelease+0x5e>
 801125e:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <osSemaphoreRelease+0x68>)
 8011260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011264:	601a      	str	r2, [r3, #0]
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	f3bf 8f6f 	isb	sy
 801126e:	e00a      	b.n	8011286 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011270:	2300      	movs	r3, #0
 8011272:	2200      	movs	r2, #0
 8011274:	2100      	movs	r1, #0
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 fd4e 	bl	8011d18 <xQueueGenericSend>
 801127c:	4603      	mov	r3, r0
 801127e:	2b01      	cmp	r3, #1
 8011280:	d001      	beq.n	8011286 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011282:	23ff      	movs	r3, #255	; 0xff
 8011284:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011286:	68fb      	ldr	r3, [r7, #12]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	e000ed04 	.word	0xe000ed04

08011294 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801129c:	f7ff fe35 	bl	8010f0a <inHandlerMode>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80112a6:	2382      	movs	r3, #130	; 0x82
 80112a8:	e003      	b.n	80112b2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f001 f9ad 	bl	801260a <vQueueDelete>

  return osOK; 
 80112b0:	2300      	movs	r3, #0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b086      	sub	sp, #24
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	3303      	adds	r3, #3
 80112c8:	f023 0303 	bic.w	r3, r3, #3
 80112cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80112ce:	2014      	movs	r0, #20
 80112d0:	f003 f89e 	bl	8014410 <pvPortMalloc>
 80112d4:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d046      	beq.n	801136a <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681a      	ldr	r2, [r3, #0]
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2200      	movs	r2, #0
 80112ee:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4618      	mov	r0, r3
 80112f6:	f003 f88b 	bl	8014410 <pvPortMalloc>
 80112fa:	4602      	mov	r2, r0
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d02b      	beq.n	8011360 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	fb02 f303 	mul.w	r3, r2, r3
 8011312:	4618      	mov	r0, r3
 8011314:	f003 f87c 	bl	8014410 <pvPortMalloc>
 8011318:	4602      	mov	r2, r0
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d011      	beq.n	801134a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011326:	2300      	movs	r3, #0
 8011328:	613b      	str	r3, [r7, #16]
 801132a:	e008      	b.n	801133e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	685a      	ldr	r2, [r3, #4]
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	4413      	add	r3, r2
 8011334:	2200      	movs	r2, #0
 8011336:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	3301      	adds	r3, #1
 801133c:	613b      	str	r3, [r7, #16]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	693a      	ldr	r2, [r7, #16]
 8011344:	429a      	cmp	r2, r3
 8011346:	d3f1      	bcc.n	801132c <osPoolCreate+0x72>
 8011348:	e00f      	b.n	801136a <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	f003 f920 	bl	8014594 <vPortFree>
        vPortFree(thePool);
 8011354:	6978      	ldr	r0, [r7, #20]
 8011356:	f003 f91d 	bl	8014594 <vPortFree>
        thePool = NULL;
 801135a:	2300      	movs	r3, #0
 801135c:	617b      	str	r3, [r7, #20]
 801135e:	e004      	b.n	801136a <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011360:	6978      	ldr	r0, [r7, #20]
 8011362:	f003 f917 	bl	8014594 <vPortFree>
      thePool = NULL;
 8011366:	2300      	movs	r3, #0
 8011368:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 801136a:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801136c:	4618      	mov	r0, r3
 801136e:	3718      	adds	r7, #24
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b08a      	sub	sp, #40	; 0x28
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801137c:	2300      	movs	r3, #0
 801137e:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011380:	2300      	movs	r3, #0
 8011382:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011384:	f7ff fdc1 	bl	8010f0a <inHandlerMode>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00e      	beq.n	80113ac <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801138e:	f3ef 8211 	mrs	r2, BASEPRI
 8011392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011396:	f383 8811 	msr	BASEPRI, r3
 801139a:	f3bf 8f6f 	isb	sy
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	617a      	str	r2, [r7, #20]
 80113a4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80113a6:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80113a8:	627b      	str	r3, [r7, #36]	; 0x24
 80113aa:	e001      	b.n	80113b0 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80113ac:	f002 ff16 	bl	80141dc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80113b0:	2300      	movs	r3, #0
 80113b2:	61fb      	str	r3, [r7, #28]
 80113b4:	e029      	b.n	801140a <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	691a      	ldr	r2, [r3, #16]
 80113ba:	69fb      	ldr	r3, [r7, #28]
 80113bc:	4413      	add	r3, r2
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	6892      	ldr	r2, [r2, #8]
 80113c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80113c6:	fb02 f201 	mul.w	r2, r2, r1
 80113ca:	1a9b      	subs	r3, r3, r2
 80113cc:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685a      	ldr	r2, [r3, #4]
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	4413      	add	r3, r2
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d113      	bne.n	8011404 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	4413      	add	r3, r2
 80113e4:	2201      	movs	r2, #1
 80113e6:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4619      	mov	r1, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	69ba      	ldr	r2, [r7, #24]
 80113f4:	fb02 f303 	mul.w	r3, r2, r3
 80113f8:	440b      	add	r3, r1
 80113fa:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	611a      	str	r2, [r3, #16]
      break;
 8011402:	e007      	b.n	8011414 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	3301      	adds	r3, #1
 8011408:	61fb      	str	r3, [r7, #28]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	689b      	ldr	r3, [r3, #8]
 801140e:	69fa      	ldr	r2, [r7, #28]
 8011410:	429a      	cmp	r2, r3
 8011412:	d3d0      	bcc.n	80113b6 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8011414:	f7ff fd79 	bl	8010f0a <inHandlerMode>
 8011418:	4603      	mov	r3, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d005      	beq.n	801142a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	e001      	b.n	801142e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 801142a:	f002 ff05 	bl	8014238 <vPortExitCritical>
  }
  
  return p;
 801142e:	6a3b      	ldr	r3, [r7, #32]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3728      	adds	r7, #40	; 0x28
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d101      	bne.n	801144c <osPoolFree+0x14>
    return osErrorParameter;
 8011448:	2380      	movs	r3, #128	; 0x80
 801144a:	e030      	b.n	80114ae <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <osPoolFree+0x1e>
    return osErrorParameter;
 8011452:	2380      	movs	r3, #128	; 0x80
 8011454:	e02b      	b.n	80114ae <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	683a      	ldr	r2, [r7, #0]
 801145c:	429a      	cmp	r2, r3
 801145e:	d201      	bcs.n	8011464 <osPoolFree+0x2c>
    return osErrorParameter;
 8011460:	2380      	movs	r3, #128	; 0x80
 8011462:	e024      	b.n	80114ae <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	6812      	ldr	r2, [r2, #0]
 801146a:	1a9b      	subs	r3, r3, r2
 801146c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	68da      	ldr	r2, [r3, #12]
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	fbb3 f1f2 	udiv	r1, r3, r2
 8011478:	fb02 f201 	mul.w	r2, r2, r1
 801147c:	1a9b      	subs	r3, r3, r2
 801147e:	2b00      	cmp	r3, #0
 8011480:	d001      	beq.n	8011486 <osPoolFree+0x4e>
    return osErrorParameter;
 8011482:	2380      	movs	r3, #128	; 0x80
 8011484:	e013      	b.n	80114ae <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011490:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	429a      	cmp	r2, r3
 801149a:	d301      	bcc.n	80114a0 <osPoolFree+0x68>
    return osErrorParameter;
 801149c:	2380      	movs	r3, #128	; 0x80
 801149e:	e006      	b.n	80114ae <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	685a      	ldr	r2, [r3, #4]
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	4413      	add	r3, r2
 80114a8:	2200      	movs	r2, #0
 80114aa:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3714      	adds	r7, #20
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80114ba:	b590      	push	{r4, r7, lr}
 80114bc:	b085      	sub	sp, #20
 80114be:	af02      	add	r7, sp, #8
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d012      	beq.n	80114f2 <osMessageCreate+0x38>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00e      	beq.n	80114f2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6818      	ldr	r0, [r3, #0]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6859      	ldr	r1, [r3, #4]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	689a      	ldr	r2, [r3, #8]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68dc      	ldr	r4, [r3, #12]
 80114e4:	2300      	movs	r3, #0
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	4623      	mov	r3, r4
 80114ea:	f000 fb43 	bl	8011b74 <xQueueGenericCreateStatic>
 80114ee:	4603      	mov	r3, r0
 80114f0:	e008      	b.n	8011504 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6818      	ldr	r0, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	2200      	movs	r2, #0
 80114fc:	4619      	mov	r1, r3
 80114fe:	f000 fbac 	bl	8011c5a <xQueueGenericCreate>
 8011502:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011504:	4618      	mov	r0, r3
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	bd90      	pop	{r4, r7, pc}

0801150c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b086      	sub	sp, #24
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011518:	2300      	movs	r3, #0
 801151a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d101      	bne.n	801152a <osMessagePut+0x1e>
    ticks = 1;
 8011526:	2301      	movs	r3, #1
 8011528:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801152a:	f7ff fcee 	bl	8010f0a <inHandlerMode>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d018      	beq.n	8011566 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011534:	f107 0210 	add.w	r2, r7, #16
 8011538:	f107 0108 	add.w	r1, r7, #8
 801153c:	2300      	movs	r3, #0
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f000 fce4 	bl	8011f0c <xQueueGenericSendFromISR>
 8011544:	4603      	mov	r3, r0
 8011546:	2b01      	cmp	r3, #1
 8011548:	d001      	beq.n	801154e <osMessagePut+0x42>
      return osErrorOS;
 801154a:	23ff      	movs	r3, #255	; 0xff
 801154c:	e018      	b.n	8011580 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d014      	beq.n	801157e <osMessagePut+0x72>
 8011554:	4b0c      	ldr	r3, [pc, #48]	; (8011588 <osMessagePut+0x7c>)
 8011556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801155a:	601a      	str	r2, [r3, #0]
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	f3bf 8f6f 	isb	sy
 8011564:	e00b      	b.n	801157e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011566:	f107 0108 	add.w	r1, r7, #8
 801156a:	2300      	movs	r3, #0
 801156c:	697a      	ldr	r2, [r7, #20]
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f000 fbd2 	bl	8011d18 <xQueueGenericSend>
 8011574:	4603      	mov	r3, r0
 8011576:	2b01      	cmp	r3, #1
 8011578:	d001      	beq.n	801157e <osMessagePut+0x72>
      return osErrorOS;
 801157a:	23ff      	movs	r3, #255	; 0xff
 801157c:	e000      	b.n	8011580 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801157e:	2300      	movs	r3, #0
}
 8011580:	4618      	mov	r0, r3
 8011582:	3718      	adds	r7, #24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	e000ed04 	.word	0xe000ed04

0801158c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801158c:	b590      	push	{r4, r7, lr}
 801158e:	b08b      	sub	sp, #44	; 0x2c
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10a      	bne.n	80115bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80115a6:	2380      	movs	r3, #128	; 0x80
 80115a8:	617b      	str	r3, [r7, #20]
    return event;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	461c      	mov	r4, r3
 80115ae:	f107 0314 	add.w	r3, r7, #20
 80115b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80115b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80115ba:	e054      	b.n	8011666 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80115bc:	2300      	movs	r3, #0
 80115be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ca:	d103      	bne.n	80115d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80115cc:	f04f 33ff 	mov.w	r3, #4294967295
 80115d0:	627b      	str	r3, [r7, #36]	; 0x24
 80115d2:	e009      	b.n	80115e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d006      	beq.n	80115e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d101      	bne.n	80115e8 <osMessageGet+0x5c>
      ticks = 1;
 80115e4:	2301      	movs	r3, #1
 80115e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80115e8:	f7ff fc8f 	bl	8010f0a <inHandlerMode>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d01c      	beq.n	801162c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80115f2:	f107 0220 	add.w	r2, r7, #32
 80115f6:	f107 0314 	add.w	r3, r7, #20
 80115fa:	3304      	adds	r3, #4
 80115fc:	4619      	mov	r1, r3
 80115fe:	68b8      	ldr	r0, [r7, #8]
 8011600:	f000 ff86 	bl	8012510 <xQueueReceiveFromISR>
 8011604:	4603      	mov	r3, r0
 8011606:	2b01      	cmp	r3, #1
 8011608:	d102      	bne.n	8011610 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801160a:	2310      	movs	r3, #16
 801160c:	617b      	str	r3, [r7, #20]
 801160e:	e001      	b.n	8011614 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011610:	2300      	movs	r3, #0
 8011612:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d01d      	beq.n	8011656 <osMessageGet+0xca>
 801161a:	4b15      	ldr	r3, [pc, #84]	; (8011670 <osMessageGet+0xe4>)
 801161c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	e014      	b.n	8011656 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801162c:	f107 0314 	add.w	r3, r7, #20
 8011630:	3304      	adds	r3, #4
 8011632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011634:	4619      	mov	r1, r3
 8011636:	68b8      	ldr	r0, [r7, #8]
 8011638:	f000 fd86 	bl	8012148 <xQueueReceive>
 801163c:	4603      	mov	r3, r0
 801163e:	2b01      	cmp	r3, #1
 8011640:	d102      	bne.n	8011648 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011642:	2310      	movs	r3, #16
 8011644:	617b      	str	r3, [r7, #20]
 8011646:	e006      	b.n	8011656 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164a:	2b00      	cmp	r3, #0
 801164c:	d101      	bne.n	8011652 <osMessageGet+0xc6>
 801164e:	2300      	movs	r3, #0
 8011650:	e000      	b.n	8011654 <osMessageGet+0xc8>
 8011652:	2340      	movs	r3, #64	; 0x40
 8011654:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	461c      	mov	r4, r3
 801165a:	f107 0314 	add.w	r3, r7, #20
 801165e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	372c      	adds	r7, #44	; 0x2c
 801166a:	46bd      	mov	sp, r7
 801166c:	bd90      	pop	{r4, r7, pc}
 801166e:	bf00      	nop
 8011670:	e000ed04 	.word	0xe000ed04

08011674 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8011674:	b590      	push	{r4, r7, lr}
 8011676:	b087      	sub	sp, #28
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	60fb      	str	r3, [r7, #12]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	613b      	str	r3, [r7, #16]
 801168a:	2300      	movs	r3, #0
 801168c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	689c      	ldr	r4, [r3, #8]
 8011692:	200c      	movs	r0, #12
 8011694:	f002 febc 	bl	8014410 <pvPortMalloc>
 8011698:	4603      	mov	r3, r0
 801169a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d101      	bne.n	80116aa <osMailCreate+0x36>
    return NULL;
 80116a6:	2300      	movs	r3, #0
 80116a8:	e038      	b.n	801171c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6818      	ldr	r0, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	681c      	ldr	r4, [r3, #0]
 80116be:	2200      	movs	r2, #0
 80116c0:	2104      	movs	r1, #4
 80116c2:	f000 faca 	bl	8011c5a <xQueueGenericCreate>
 80116c6:	4603      	mov	r3, r0
 80116c8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d107      	bne.n	80116e6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	689b      	ldr	r3, [r3, #8]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4618      	mov	r0, r3
 80116de:	f002 ff59 	bl	8014594 <vPortFree>
    return NULL;
 80116e2:	2300      	movs	r3, #0
 80116e4:	e01a      	b.n	801171c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	681c      	ldr	r4, [r3, #0]
 80116ec:	f107 030c 	add.w	r3, r7, #12
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7ff fde2 	bl	80112ba <osPoolCreate>
 80116f6:	4603      	mov	r3, r0
 80116f8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	689b      	ldr	r3, [r3, #8]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d107      	bne.n	8011716 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	4618      	mov	r0, r3
 801170e:	f002 ff41 	bl	8014594 <vPortFree>
    return NULL;
 8011712:	2300      	movs	r3, #0
 8011714:	e002      	b.n	801171c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 801171c:	4618      	mov	r0, r3
 801171e:	371c      	adds	r7, #28
 8011720:	46bd      	mov	sp, r7
 8011722:	bd90      	pop	{r4, r7, pc}

08011724 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d101      	bne.n	8011738 <osMailAlloc+0x14>
    return NULL;
 8011734:	2300      	movs	r3, #0
 8011736:	e006      	b.n	8011746 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff fe19 	bl	8011374 <osPoolAlloc>
 8011742:	60f8      	str	r0, [r7, #12]
  
  return p;
 8011744:	68fb      	ldr	r3, [r7, #12]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3710      	adds	r7, #16
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
	...

08011750 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <osMailPut+0x14>
    return osErrorParameter;
 8011760:	2380      	movs	r3, #128	; 0x80
 8011762:	e02c      	b.n	80117be <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8011764:	2300      	movs	r3, #0
 8011766:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011768:	f7ff fbcf 	bl	8010f0a <inHandlerMode>
 801176c:	4603      	mov	r3, r0
 801176e:	2b00      	cmp	r3, #0
 8011770:	d018      	beq.n	80117a4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6858      	ldr	r0, [r3, #4]
 8011776:	f107 020c 	add.w	r2, r7, #12
 801177a:	4639      	mov	r1, r7
 801177c:	2300      	movs	r3, #0
 801177e:	f000 fbc5 	bl	8011f0c <xQueueGenericSendFromISR>
 8011782:	4603      	mov	r3, r0
 8011784:	2b01      	cmp	r3, #1
 8011786:	d001      	beq.n	801178c <osMailPut+0x3c>
      return osErrorOS;
 8011788:	23ff      	movs	r3, #255	; 0xff
 801178a:	e018      	b.n	80117be <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d014      	beq.n	80117bc <osMailPut+0x6c>
 8011792:	4b0d      	ldr	r3, [pc, #52]	; (80117c8 <osMailPut+0x78>)
 8011794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	f3bf 8f4f 	dsb	sy
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	e00b      	b.n	80117bc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6858      	ldr	r0, [r3, #4]
 80117a8:	4639      	mov	r1, r7
 80117aa:	2300      	movs	r3, #0
 80117ac:	2200      	movs	r2, #0
 80117ae:	f000 fab3 	bl	8011d18 <xQueueGenericSend>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d001      	beq.n	80117bc <osMailPut+0x6c>
      return osErrorOS;
 80117b8:	23ff      	movs	r3, #255	; 0xff
 80117ba:	e000      	b.n	80117be <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	e000ed04 	.word	0xe000ed04

080117cc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80117cc:	b590      	push	{r4, r7, lr}
 80117ce:	b08b      	sub	sp, #44	; 0x2c
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10a      	bne.n	80117f8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80117e2:	2380      	movs	r3, #128	; 0x80
 80117e4:	617b      	str	r3, [r7, #20]
    return event;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	461c      	mov	r4, r3
 80117ea:	f107 0314 	add.w	r3, r7, #20
 80117ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80117f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80117f6:	e056      	b.n	80118a6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80117f8:	2300      	movs	r3, #0
 80117fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011806:	d103      	bne.n	8011810 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8011808:	f04f 33ff 	mov.w	r3, #4294967295
 801180c:	627b      	str	r3, [r7, #36]	; 0x24
 801180e:	e009      	b.n	8011824 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d006      	beq.n	8011824 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <osMailGet+0x58>
      ticks = 1;
 8011820:	2301      	movs	r3, #1
 8011822:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011824:	f7ff fb71 	bl	8010f0a <inHandlerMode>
 8011828:	4603      	mov	r3, r0
 801182a:	2b00      	cmp	r3, #0
 801182c:	d01d      	beq.n	801186a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	6858      	ldr	r0, [r3, #4]
 8011832:	f107 0220 	add.w	r2, r7, #32
 8011836:	f107 0314 	add.w	r3, r7, #20
 801183a:	3304      	adds	r3, #4
 801183c:	4619      	mov	r1, r3
 801183e:	f000 fe67 	bl	8012510 <xQueueReceiveFromISR>
 8011842:	4603      	mov	r3, r0
 8011844:	2b01      	cmp	r3, #1
 8011846:	d102      	bne.n	801184e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8011848:	2320      	movs	r3, #32
 801184a:	617b      	str	r3, [r7, #20]
 801184c:	e001      	b.n	8011852 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 801184e:	2300      	movs	r3, #0
 8011850:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011852:	6a3b      	ldr	r3, [r7, #32]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d01e      	beq.n	8011896 <osMailGet+0xca>
 8011858:	4b15      	ldr	r3, [pc, #84]	; (80118b0 <osMailGet+0xe4>)
 801185a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801185e:	601a      	str	r2, [r3, #0]
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	f3bf 8f6f 	isb	sy
 8011868:	e015      	b.n	8011896 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	6858      	ldr	r0, [r3, #4]
 801186e:	f107 0314 	add.w	r3, r7, #20
 8011872:	3304      	adds	r3, #4
 8011874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011876:	4619      	mov	r1, r3
 8011878:	f000 fc66 	bl	8012148 <xQueueReceive>
 801187c:	4603      	mov	r3, r0
 801187e:	2b01      	cmp	r3, #1
 8011880:	d102      	bne.n	8011888 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8011882:	2320      	movs	r3, #32
 8011884:	617b      	str	r3, [r7, #20]
 8011886:	e006      	b.n	8011896 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	2b00      	cmp	r3, #0
 801188c:	d101      	bne.n	8011892 <osMailGet+0xc6>
 801188e:	2300      	movs	r3, #0
 8011890:	e000      	b.n	8011894 <osMailGet+0xc8>
 8011892:	2340      	movs	r3, #64	; 0x40
 8011894:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	461c      	mov	r4, r3
 801189a:	f107 0314 	add.w	r3, r7, #20
 801189e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80118a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	372c      	adds	r7, #44	; 0x2c
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd90      	pop	{r4, r7, pc}
 80118ae:	bf00      	nop
 80118b0:	e000ed04 	.word	0xe000ed04

080118b4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d101      	bne.n	80118c8 <osMailFree+0x14>
    return osErrorParameter;
 80118c4:	2380      	movs	r3, #128	; 0x80
 80118c6:	e006      	b.n	80118d6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	6839      	ldr	r1, [r7, #0]
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7ff fdb2 	bl	8011438 <osPoolFree>
 80118d4:	4603      	mov	r3, r0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b082      	sub	sp, #8
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f001 f994 	bl	8012c14 <vTaskSuspend>
  
  return osOK;
 80118ec:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3708      	adds	r7, #8
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
	...

080118f8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8011900:	f7ff fb03 	bl	8010f0a <inHandlerMode>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d00e      	beq.n	8011928 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f001 faa0 	bl	8012e50 <xTaskResumeFromISR>
 8011910:	4603      	mov	r3, r0
 8011912:	2b01      	cmp	r3, #1
 8011914:	d10b      	bne.n	801192e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8011916:	4b08      	ldr	r3, [pc, #32]	; (8011938 <osThreadResume+0x40>)
 8011918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	f3bf 8f4f 	dsb	sy
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	e002      	b.n	801192e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f001 fa35 	bl	8012d98 <vTaskResume>
  }
  return osOK;
 801192e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8011930:	4618      	mov	r0, r3
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	e000ed04 	.word	0xe000ed04

0801193c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f103 0208 	add.w	r2, r3, #8
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f04f 32ff 	mov.w	r2, #4294967295
 8011954:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f103 0208 	add.w	r2, r3, #8
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f103 0208 	add.w	r2, r3, #8
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011970:	bf00      	nop
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801198a:	bf00      	nop
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011996:	b480      	push	{r7}
 8011998:	b085      	sub	sp, #20
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
 801199e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	68fa      	ldr	r2, [r7, #12]
 80119aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	689a      	ldr	r2, [r3, #8]
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	683a      	ldr	r2, [r7, #0]
 80119ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	683a      	ldr	r2, [r7, #0]
 80119c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	601a      	str	r2, [r3, #0]
}
 80119d2:	bf00      	nop
 80119d4:	3714      	adds	r7, #20
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119de:	b480      	push	{r7}
 80119e0:	b085      	sub	sp, #20
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f4:	d103      	bne.n	80119fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	691b      	ldr	r3, [r3, #16]
 80119fa:	60fb      	str	r3, [r7, #12]
 80119fc:	e00c      	b.n	8011a18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3308      	adds	r3, #8
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e002      	b.n	8011a0c <vListInsert+0x2e>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	60fb      	str	r3, [r7, #12]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d2f6      	bcs.n	8011a06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	685a      	ldr	r2, [r3, #4]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	683a      	ldr	r2, [r7, #0]
 8011a26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	683a      	ldr	r2, [r7, #0]
 8011a32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	601a      	str	r2, [r3, #0]
}
 8011a44:	bf00      	nop
 8011a46:	3714      	adds	r7, #20
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a50:	b480      	push	{r7}
 8011a52:	b085      	sub	sp, #20
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	691b      	ldr	r3, [r3, #16]
 8011a5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	6892      	ldr	r2, [r2, #8]
 8011a66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	6852      	ldr	r2, [r2, #4]
 8011a70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d103      	bne.n	8011a84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	689a      	ldr	r2, [r3, #8]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	1e5a      	subs	r2, r3, #1
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3714      	adds	r7, #20
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr

08011aa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d109      	bne.n	8011acc <xQueueGenericReset+0x28>
	__asm volatile
 8011ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011abc:	f383 8811 	msr	BASEPRI, r3
 8011ac0:	f3bf 8f6f 	isb	sy
 8011ac4:	f3bf 8f4f 	dsb	sy
 8011ac8:	60bb      	str	r3, [r7, #8]
 8011aca:	e7fe      	b.n	8011aca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011acc:	f002 fb86 	bl	80141dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ad8:	68f9      	ldr	r1, [r7, #12]
 8011ada:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011adc:	fb01 f303 	mul.w	r3, r1, r3
 8011ae0:	441a      	add	r2, r3
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011afc:	3b01      	subs	r3, #1
 8011afe:	68f9      	ldr	r1, [r7, #12]
 8011b00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b02:	fb01 f303 	mul.w	r3, r1, r3
 8011b06:	441a      	add	r2, r3
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	22ff      	movs	r2, #255	; 0xff
 8011b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	22ff      	movs	r2, #255	; 0xff
 8011b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d114      	bne.n	8011b4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	691b      	ldr	r3, [r3, #16]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d01a      	beq.n	8011b60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	3310      	adds	r3, #16
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f001 fc5e 	bl	80133f0 <xTaskRemoveFromEventList>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d012      	beq.n	8011b60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011b3a:	4b0d      	ldr	r3, [pc, #52]	; (8011b70 <xQueueGenericReset+0xcc>)
 8011b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	f3bf 8f4f 	dsb	sy
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	e009      	b.n	8011b60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	3310      	adds	r3, #16
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7ff fef3 	bl	801193c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	3324      	adds	r3, #36	; 0x24
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7ff feee 	bl	801193c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b60:	f002 fb6a 	bl	8014238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b64:	2301      	movs	r3, #1
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	e000ed04 	.word	0xe000ed04

08011b74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b08e      	sub	sp, #56	; 0x38
 8011b78:	af02      	add	r7, sp, #8
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
 8011b80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d109      	bne.n	8011b9c <xQueueGenericCreateStatic+0x28>
 8011b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8c:	f383 8811 	msr	BASEPRI, r3
 8011b90:	f3bf 8f6f 	isb	sy
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b9a:	e7fe      	b.n	8011b9a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d109      	bne.n	8011bb6 <xQueueGenericCreateStatic+0x42>
 8011ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba6:	f383 8811 	msr	BASEPRI, r3
 8011baa:	f3bf 8f6f 	isb	sy
 8011bae:	f3bf 8f4f 	dsb	sy
 8011bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8011bb4:	e7fe      	b.n	8011bb4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d002      	beq.n	8011bc2 <xQueueGenericCreateStatic+0x4e>
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <xQueueGenericCreateStatic+0x52>
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e000      	b.n	8011bc8 <xQueueGenericCreateStatic+0x54>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d109      	bne.n	8011be0 <xQueueGenericCreateStatic+0x6c>
 8011bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd0:	f383 8811 	msr	BASEPRI, r3
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	623b      	str	r3, [r7, #32]
 8011bde:	e7fe      	b.n	8011bde <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d102      	bne.n	8011bec <xQueueGenericCreateStatic+0x78>
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <xQueueGenericCreateStatic+0x7c>
 8011bec:	2301      	movs	r3, #1
 8011bee:	e000      	b.n	8011bf2 <xQueueGenericCreateStatic+0x7e>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d109      	bne.n	8011c0a <xQueueGenericCreateStatic+0x96>
 8011bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfa:	f383 8811 	msr	BASEPRI, r3
 8011bfe:	f3bf 8f6f 	isb	sy
 8011c02:	f3bf 8f4f 	dsb	sy
 8011c06:	61fb      	str	r3, [r7, #28]
 8011c08:	e7fe      	b.n	8011c08 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011c0a:	2348      	movs	r3, #72	; 0x48
 8011c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	2b48      	cmp	r3, #72	; 0x48
 8011c12:	d009      	beq.n	8011c28 <xQueueGenericCreateStatic+0xb4>
 8011c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c18:	f383 8811 	msr	BASEPRI, r3
 8011c1c:	f3bf 8f6f 	isb	sy
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	61bb      	str	r3, [r7, #24]
 8011c26:	e7fe      	b.n	8011c26 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011c28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d00d      	beq.n	8011c50 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c36:	2201      	movs	r2, #1
 8011c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	4613      	mov	r3, r2
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	68b9      	ldr	r1, [r7, #8]
 8011c4a:	68f8      	ldr	r0, [r7, #12]
 8011c4c:	f000 f844 	bl	8011cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3730      	adds	r7, #48	; 0x30
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b08a      	sub	sp, #40	; 0x28
 8011c5e:	af02      	add	r7, sp, #8
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	4613      	mov	r3, r2
 8011c66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d109      	bne.n	8011c82 <xQueueGenericCreate+0x28>
 8011c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	613b      	str	r3, [r7, #16]
 8011c80:	e7fe      	b.n	8011c80 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d102      	bne.n	8011c8e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	61fb      	str	r3, [r7, #28]
 8011c8c:	e004      	b.n	8011c98 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	fb02 f303 	mul.w	r3, r2, r3
 8011c96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	3348      	adds	r3, #72	; 0x48
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f002 fbb7 	bl	8014410 <pvPortMalloc>
 8011ca2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d011      	beq.n	8011cce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011caa:	69bb      	ldr	r3, [r7, #24]
 8011cac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	3348      	adds	r3, #72	; 0x48
 8011cb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011cbc:	79fa      	ldrb	r2, [r7, #7]
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	697a      	ldr	r2, [r7, #20]
 8011cc6:	68b9      	ldr	r1, [r7, #8]
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f000 f805 	bl	8011cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011cce:	69bb      	ldr	r3, [r7, #24]
	}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3720      	adds	r7, #32
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	607a      	str	r2, [r7, #4]
 8011ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d103      	bne.n	8011cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	69ba      	ldr	r2, [r7, #24]
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	e002      	b.n	8011cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011cf4:	69bb      	ldr	r3, [r7, #24]
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	68fa      	ldr	r2, [r7, #12]
 8011cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d06:	2101      	movs	r1, #1
 8011d08:	69b8      	ldr	r0, [r7, #24]
 8011d0a:	f7ff fecb 	bl	8011aa4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d0e:	bf00      	nop
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
	...

08011d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b08e      	sub	sp, #56	; 0x38
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
 8011d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d26:	2300      	movs	r3, #0
 8011d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d109      	bne.n	8011d48 <xQueueGenericSend+0x30>
 8011d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d46:	e7fe      	b.n	8011d46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d103      	bne.n	8011d56 <xQueueGenericSend+0x3e>
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d101      	bne.n	8011d5a <xQueueGenericSend+0x42>
 8011d56:	2301      	movs	r3, #1
 8011d58:	e000      	b.n	8011d5c <xQueueGenericSend+0x44>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d109      	bne.n	8011d74 <xQueueGenericSend+0x5c>
 8011d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	627b      	str	r3, [r7, #36]	; 0x24
 8011d72:	e7fe      	b.n	8011d72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	2b02      	cmp	r3, #2
 8011d78:	d103      	bne.n	8011d82 <xQueueGenericSend+0x6a>
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d101      	bne.n	8011d86 <xQueueGenericSend+0x6e>
 8011d82:	2301      	movs	r3, #1
 8011d84:	e000      	b.n	8011d88 <xQueueGenericSend+0x70>
 8011d86:	2300      	movs	r3, #0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d109      	bne.n	8011da0 <xQueueGenericSend+0x88>
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	f383 8811 	msr	BASEPRI, r3
 8011d94:	f3bf 8f6f 	isb	sy
 8011d98:	f3bf 8f4f 	dsb	sy
 8011d9c:	623b      	str	r3, [r7, #32]
 8011d9e:	e7fe      	b.n	8011d9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011da0:	f001 fcdc 	bl	801375c <xTaskGetSchedulerState>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d102      	bne.n	8011db0 <xQueueGenericSend+0x98>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d101      	bne.n	8011db4 <xQueueGenericSend+0x9c>
 8011db0:	2301      	movs	r3, #1
 8011db2:	e000      	b.n	8011db6 <xQueueGenericSend+0x9e>
 8011db4:	2300      	movs	r3, #0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d109      	bne.n	8011dce <xQueueGenericSend+0xb6>
 8011dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dbe:	f383 8811 	msr	BASEPRI, r3
 8011dc2:	f3bf 8f6f 	isb	sy
 8011dc6:	f3bf 8f4f 	dsb	sy
 8011dca:	61fb      	str	r3, [r7, #28]
 8011dcc:	e7fe      	b.n	8011dcc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011dce:	f002 fa05 	bl	80141dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d302      	bcc.n	8011de4 <xQueueGenericSend+0xcc>
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	d129      	bne.n	8011e38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	68b9      	ldr	r1, [r7, #8]
 8011de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dea:	f000 fc48 	bl	801267e <prvCopyDataToQueue>
 8011dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d010      	beq.n	8011e1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dfa:	3324      	adds	r3, #36	; 0x24
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f001 faf7 	bl	80133f0 <xTaskRemoveFromEventList>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d013      	beq.n	8011e30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e08:	4b3f      	ldr	r3, [pc, #252]	; (8011f08 <xQueueGenericSend+0x1f0>)
 8011e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	e00a      	b.n	8011e30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d007      	beq.n	8011e30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e20:	4b39      	ldr	r3, [pc, #228]	; (8011f08 <xQueueGenericSend+0x1f0>)
 8011e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e26:	601a      	str	r2, [r3, #0]
 8011e28:	f3bf 8f4f 	dsb	sy
 8011e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e30:	f002 fa02 	bl	8014238 <vPortExitCritical>
				return pdPASS;
 8011e34:	2301      	movs	r3, #1
 8011e36:	e063      	b.n	8011f00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d103      	bne.n	8011e46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e3e:	f002 f9fb 	bl	8014238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e42:	2300      	movs	r3, #0
 8011e44:	e05c      	b.n	8011f00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d106      	bne.n	8011e5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e4c:	f107 0314 	add.w	r3, r7, #20
 8011e50:	4618      	mov	r0, r3
 8011e52:	f001 fb2f 	bl	80134b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e56:	2301      	movs	r3, #1
 8011e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e5a:	f002 f9ed 	bl	8014238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e5e:	f001 f8c5 	bl	8012fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e62:	f002 f9bb 	bl	80141dc <vPortEnterCritical>
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e6c:	b25b      	sxtb	r3, r3
 8011e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e72:	d103      	bne.n	8011e7c <xQueueGenericSend+0x164>
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e82:	b25b      	sxtb	r3, r3
 8011e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e88:	d103      	bne.n	8011e92 <xQueueGenericSend+0x17a>
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e92:	f002 f9d1 	bl	8014238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e96:	1d3a      	adds	r2, r7, #4
 8011e98:	f107 0314 	add.w	r3, r7, #20
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f001 fb1e 	bl	80134e0 <xTaskCheckForTimeOut>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d124      	bne.n	8011ef4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eac:	f000 fcdf 	bl	801286e <prvIsQueueFull>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d018      	beq.n	8011ee8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb8:	3310      	adds	r3, #16
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f001 fa72 	bl	80133a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec6:	f000 fc6a 	bl	801279e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011eca:	f001 f89d 	bl	8013008 <xTaskResumeAll>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f47f af7c 	bne.w	8011dce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011ed6:	4b0c      	ldr	r3, [pc, #48]	; (8011f08 <xQueueGenericSend+0x1f0>)
 8011ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	f3bf 8f4f 	dsb	sy
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	e772      	b.n	8011dce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eea:	f000 fc58 	bl	801279e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011eee:	f001 f88b 	bl	8013008 <xTaskResumeAll>
 8011ef2:	e76c      	b.n	8011dce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ef6:	f000 fc52 	bl	801279e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011efa:	f001 f885 	bl	8013008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3738      	adds	r7, #56	; 0x38
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	e000ed04 	.word	0xe000ed04

08011f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08e      	sub	sp, #56	; 0x38
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
 8011f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d109      	bne.n	8011f38 <xQueueGenericSendFromISR+0x2c>
 8011f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f28:	f383 8811 	msr	BASEPRI, r3
 8011f2c:	f3bf 8f6f 	isb	sy
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	627b      	str	r3, [r7, #36]	; 0x24
 8011f36:	e7fe      	b.n	8011f36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d103      	bne.n	8011f46 <xQueueGenericSendFromISR+0x3a>
 8011f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d101      	bne.n	8011f4a <xQueueGenericSendFromISR+0x3e>
 8011f46:	2301      	movs	r3, #1
 8011f48:	e000      	b.n	8011f4c <xQueueGenericSendFromISR+0x40>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d109      	bne.n	8011f64 <xQueueGenericSendFromISR+0x58>
 8011f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f54:	f383 8811 	msr	BASEPRI, r3
 8011f58:	f3bf 8f6f 	isb	sy
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	623b      	str	r3, [r7, #32]
 8011f62:	e7fe      	b.n	8011f62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d103      	bne.n	8011f72 <xQueueGenericSendFromISR+0x66>
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d101      	bne.n	8011f76 <xQueueGenericSendFromISR+0x6a>
 8011f72:	2301      	movs	r3, #1
 8011f74:	e000      	b.n	8011f78 <xQueueGenericSendFromISR+0x6c>
 8011f76:	2300      	movs	r3, #0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d109      	bne.n	8011f90 <xQueueGenericSendFromISR+0x84>
 8011f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f80:	f383 8811 	msr	BASEPRI, r3
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	f3bf 8f4f 	dsb	sy
 8011f8c:	61fb      	str	r3, [r7, #28]
 8011f8e:	e7fe      	b.n	8011f8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f90:	f002 fa00 	bl	8014394 <vPortValidateInterruptPriority>
	__asm volatile
 8011f94:	f3ef 8211 	mrs	r2, BASEPRI
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	61ba      	str	r2, [r7, #24]
 8011faa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011fac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d302      	bcc.n	8011fc2 <xQueueGenericSendFromISR+0xb6>
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d12c      	bne.n	801201c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fcc:	683a      	ldr	r2, [r7, #0]
 8011fce:	68b9      	ldr	r1, [r7, #8]
 8011fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fd2:	f000 fb54 	bl	801267e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011fd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fde:	d112      	bne.n	8012006 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d016      	beq.n	8012016 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fea:	3324      	adds	r3, #36	; 0x24
 8011fec:	4618      	mov	r0, r3
 8011fee:	f001 f9ff 	bl	80133f0 <xTaskRemoveFromEventList>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d00e      	beq.n	8012016 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d00b      	beq.n	8012016 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2201      	movs	r2, #1
 8012002:	601a      	str	r2, [r3, #0]
 8012004:	e007      	b.n	8012016 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801200a:	3301      	adds	r3, #1
 801200c:	b2db      	uxtb	r3, r3
 801200e:	b25a      	sxtb	r2, r3
 8012010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012016:	2301      	movs	r3, #1
 8012018:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801201a:	e001      	b.n	8012020 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801201c:	2300      	movs	r3, #0
 801201e:	637b      	str	r3, [r7, #52]	; 0x34
 8012020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012022:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801202c:	4618      	mov	r0, r3
 801202e:	3738      	adds	r7, #56	; 0x38
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b08e      	sub	sp, #56	; 0x38
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012044:	2b00      	cmp	r3, #0
 8012046:	d109      	bne.n	801205c <xQueueGiveFromISR+0x28>
	__asm volatile
 8012048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204c:	f383 8811 	msr	BASEPRI, r3
 8012050:	f3bf 8f6f 	isb	sy
 8012054:	f3bf 8f4f 	dsb	sy
 8012058:	623b      	str	r3, [r7, #32]
 801205a:	e7fe      	b.n	801205a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012060:	2b00      	cmp	r3, #0
 8012062:	d009      	beq.n	8012078 <xQueueGiveFromISR+0x44>
 8012064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	61fb      	str	r3, [r7, #28]
 8012076:	e7fe      	b.n	8012076 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d103      	bne.n	8012088 <xQueueGiveFromISR+0x54>
 8012080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <xQueueGiveFromISR+0x58>
 8012088:	2301      	movs	r3, #1
 801208a:	e000      	b.n	801208e <xQueueGiveFromISR+0x5a>
 801208c:	2300      	movs	r3, #0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d109      	bne.n	80120a6 <xQueueGiveFromISR+0x72>
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	f383 8811 	msr	BASEPRI, r3
 801209a:	f3bf 8f6f 	isb	sy
 801209e:	f3bf 8f4f 	dsb	sy
 80120a2:	61bb      	str	r3, [r7, #24]
 80120a4:	e7fe      	b.n	80120a4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120a6:	f002 f975 	bl	8014394 <vPortValidateInterruptPriority>
	__asm volatile
 80120aa:	f3ef 8211 	mrs	r2, BASEPRI
 80120ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b2:	f383 8811 	msr	BASEPRI, r3
 80120b6:	f3bf 8f6f 	isb	sy
 80120ba:	f3bf 8f4f 	dsb	sy
 80120be:	617a      	str	r2, [r7, #20]
 80120c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80120c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80120c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80120cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d22b      	bcs.n	801212e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f0:	d112      	bne.n	8012118 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d016      	beq.n	8012128 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fc:	3324      	adds	r3, #36	; 0x24
 80120fe:	4618      	mov	r0, r3
 8012100:	f001 f976 	bl	80133f0 <xTaskRemoveFromEventList>
 8012104:	4603      	mov	r3, r0
 8012106:	2b00      	cmp	r3, #0
 8012108:	d00e      	beq.n	8012128 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00b      	beq.n	8012128 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	2201      	movs	r2, #1
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	e007      	b.n	8012128 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801211c:	3301      	adds	r3, #1
 801211e:	b2db      	uxtb	r3, r3
 8012120:	b25a      	sxtb	r2, r3
 8012122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012128:	2301      	movs	r3, #1
 801212a:	637b      	str	r3, [r7, #52]	; 0x34
 801212c:	e001      	b.n	8012132 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801212e:	2300      	movs	r3, #0
 8012130:	637b      	str	r3, [r7, #52]	; 0x34
 8012132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012134:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801213e:	4618      	mov	r0, r3
 8012140:	3738      	adds	r7, #56	; 0x38
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
	...

08012148 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b08c      	sub	sp, #48	; 0x30
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012154:	2300      	movs	r3, #0
 8012156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215e:	2b00      	cmp	r3, #0
 8012160:	d109      	bne.n	8012176 <xQueueReceive+0x2e>
	__asm volatile
 8012162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012166:	f383 8811 	msr	BASEPRI, r3
 801216a:	f3bf 8f6f 	isb	sy
 801216e:	f3bf 8f4f 	dsb	sy
 8012172:	623b      	str	r3, [r7, #32]
 8012174:	e7fe      	b.n	8012174 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d103      	bne.n	8012184 <xQueueReceive+0x3c>
 801217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012180:	2b00      	cmp	r3, #0
 8012182:	d101      	bne.n	8012188 <xQueueReceive+0x40>
 8012184:	2301      	movs	r3, #1
 8012186:	e000      	b.n	801218a <xQueueReceive+0x42>
 8012188:	2300      	movs	r3, #0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d109      	bne.n	80121a2 <xQueueReceive+0x5a>
 801218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012192:	f383 8811 	msr	BASEPRI, r3
 8012196:	f3bf 8f6f 	isb	sy
 801219a:	f3bf 8f4f 	dsb	sy
 801219e:	61fb      	str	r3, [r7, #28]
 80121a0:	e7fe      	b.n	80121a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121a2:	f001 fadb 	bl	801375c <xTaskGetSchedulerState>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d102      	bne.n	80121b2 <xQueueReceive+0x6a>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d101      	bne.n	80121b6 <xQueueReceive+0x6e>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <xQueueReceive+0x70>
 80121b6:	2300      	movs	r3, #0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d109      	bne.n	80121d0 <xQueueReceive+0x88>
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	f383 8811 	msr	BASEPRI, r3
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	61bb      	str	r3, [r7, #24]
 80121ce:	e7fe      	b.n	80121ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121d0:	f002 f804 	bl	80141dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d01f      	beq.n	8012220 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121e0:	68b9      	ldr	r1, [r7, #8]
 80121e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121e4:	f000 fab5 	bl	8012752 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ea:	1e5a      	subs	r2, r3, #1
 80121ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f2:	691b      	ldr	r3, [r3, #16]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00f      	beq.n	8012218 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121fa:	3310      	adds	r3, #16
 80121fc:	4618      	mov	r0, r3
 80121fe:	f001 f8f7 	bl	80133f0 <xTaskRemoveFromEventList>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d007      	beq.n	8012218 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012208:	4b3c      	ldr	r3, [pc, #240]	; (80122fc <xQueueReceive+0x1b4>)
 801220a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801220e:	601a      	str	r2, [r3, #0]
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012218:	f002 f80e 	bl	8014238 <vPortExitCritical>
				return pdPASS;
 801221c:	2301      	movs	r3, #1
 801221e:	e069      	b.n	80122f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d103      	bne.n	801222e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012226:	f002 f807 	bl	8014238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801222a:	2300      	movs	r3, #0
 801222c:	e062      	b.n	80122f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012230:	2b00      	cmp	r3, #0
 8012232:	d106      	bne.n	8012242 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012234:	f107 0310 	add.w	r3, r7, #16
 8012238:	4618      	mov	r0, r3
 801223a:	f001 f93b 	bl	80134b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801223e:	2301      	movs	r3, #1
 8012240:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012242:	f001 fff9 	bl	8014238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012246:	f000 fed1 	bl	8012fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801224a:	f001 ffc7 	bl	80141dc <vPortEnterCritical>
 801224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012254:	b25b      	sxtb	r3, r3
 8012256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225a:	d103      	bne.n	8012264 <xQueueReceive+0x11c>
 801225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225e:	2200      	movs	r2, #0
 8012260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801226a:	b25b      	sxtb	r3, r3
 801226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012270:	d103      	bne.n	801227a <xQueueReceive+0x132>
 8012272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012274:	2200      	movs	r2, #0
 8012276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801227a:	f001 ffdd 	bl	8014238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801227e:	1d3a      	adds	r2, r7, #4
 8012280:	f107 0310 	add.w	r3, r7, #16
 8012284:	4611      	mov	r1, r2
 8012286:	4618      	mov	r0, r3
 8012288:	f001 f92a 	bl	80134e0 <xTaskCheckForTimeOut>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d123      	bne.n	80122da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012294:	f000 fad5 	bl	8012842 <prvIsQueueEmpty>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d017      	beq.n	80122ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a0:	3324      	adds	r3, #36	; 0x24
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	4611      	mov	r1, r2
 80122a6:	4618      	mov	r0, r3
 80122a8:	f001 f87e 	bl	80133a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80122ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ae:	f000 fa76 	bl	801279e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80122b2:	f000 fea9 	bl	8013008 <xTaskResumeAll>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d189      	bne.n	80121d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <xQueueReceive+0x1b4>)
 80122be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122c2:	601a      	str	r2, [r3, #0]
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	e780      	b.n	80121d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80122ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122d0:	f000 fa65 	bl	801279e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122d4:	f000 fe98 	bl	8013008 <xTaskResumeAll>
 80122d8:	e77a      	b.n	80121d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80122da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122dc:	f000 fa5f 	bl	801279e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122e0:	f000 fe92 	bl	8013008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122e6:	f000 faac 	bl	8012842 <prvIsQueueEmpty>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f43f af6f 	beq.w	80121d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3730      	adds	r7, #48	; 0x30
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	e000ed04 	.word	0xe000ed04

08012300 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b08e      	sub	sp, #56	; 0x38
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801230a:	2300      	movs	r3, #0
 801230c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012312:	2300      	movs	r3, #0
 8012314:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012318:	2b00      	cmp	r3, #0
 801231a:	d109      	bne.n	8012330 <xQueueSemaphoreTake+0x30>
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	623b      	str	r3, [r7, #32]
 801232e:	e7fe      	b.n	801232e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012334:	2b00      	cmp	r3, #0
 8012336:	d009      	beq.n	801234c <xQueueSemaphoreTake+0x4c>
 8012338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233c:	f383 8811 	msr	BASEPRI, r3
 8012340:	f3bf 8f6f 	isb	sy
 8012344:	f3bf 8f4f 	dsb	sy
 8012348:	61fb      	str	r3, [r7, #28]
 801234a:	e7fe      	b.n	801234a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801234c:	f001 fa06 	bl	801375c <xTaskGetSchedulerState>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d102      	bne.n	801235c <xQueueSemaphoreTake+0x5c>
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d101      	bne.n	8012360 <xQueueSemaphoreTake+0x60>
 801235c:	2301      	movs	r3, #1
 801235e:	e000      	b.n	8012362 <xQueueSemaphoreTake+0x62>
 8012360:	2300      	movs	r3, #0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d109      	bne.n	801237a <xQueueSemaphoreTake+0x7a>
 8012366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	61bb      	str	r3, [r7, #24]
 8012378:	e7fe      	b.n	8012378 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801237a:	f001 ff2f 	bl	80141dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012382:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012386:	2b00      	cmp	r3, #0
 8012388:	d024      	beq.n	80123d4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238c:	1e5a      	subs	r2, r3, #1
 801238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012390:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d104      	bne.n	80123a4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801239a:	f001 fb99 	bl	8013ad0 <pvTaskIncrementMutexHeldCount>
 801239e:	4602      	mov	r2, r0
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a6:	691b      	ldr	r3, [r3, #16]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d00f      	beq.n	80123cc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ae:	3310      	adds	r3, #16
 80123b0:	4618      	mov	r0, r3
 80123b2:	f001 f81d 	bl	80133f0 <xTaskRemoveFromEventList>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d007      	beq.n	80123cc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80123bc:	4b53      	ldr	r3, [pc, #332]	; (801250c <xQueueSemaphoreTake+0x20c>)
 80123be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123c2:	601a      	str	r2, [r3, #0]
 80123c4:	f3bf 8f4f 	dsb	sy
 80123c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80123cc:	f001 ff34 	bl	8014238 <vPortExitCritical>
				return pdPASS;
 80123d0:	2301      	movs	r3, #1
 80123d2:	e096      	b.n	8012502 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d110      	bne.n	80123fc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d009      	beq.n	80123f4 <xQueueSemaphoreTake+0xf4>
 80123e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e4:	f383 8811 	msr	BASEPRI, r3
 80123e8:	f3bf 8f6f 	isb	sy
 80123ec:	f3bf 8f4f 	dsb	sy
 80123f0:	617b      	str	r3, [r7, #20]
 80123f2:	e7fe      	b.n	80123f2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80123f4:	f001 ff20 	bl	8014238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123f8:	2300      	movs	r3, #0
 80123fa:	e082      	b.n	8012502 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d106      	bne.n	8012410 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012402:	f107 030c 	add.w	r3, r7, #12
 8012406:	4618      	mov	r0, r3
 8012408:	f001 f854 	bl	80134b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801240c:	2301      	movs	r3, #1
 801240e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012410:	f001 ff12 	bl	8014238 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012414:	f000 fdea 	bl	8012fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012418:	f001 fee0 	bl	80141dc <vPortEnterCritical>
 801241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012422:	b25b      	sxtb	r3, r3
 8012424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012428:	d103      	bne.n	8012432 <xQueueSemaphoreTake+0x132>
 801242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242c:	2200      	movs	r2, #0
 801242e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012438:	b25b      	sxtb	r3, r3
 801243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801243e:	d103      	bne.n	8012448 <xQueueSemaphoreTake+0x148>
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	2200      	movs	r2, #0
 8012444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012448:	f001 fef6 	bl	8014238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801244c:	463a      	mov	r2, r7
 801244e:	f107 030c 	add.w	r3, r7, #12
 8012452:	4611      	mov	r1, r2
 8012454:	4618      	mov	r0, r3
 8012456:	f001 f843 	bl	80134e0 <xTaskCheckForTimeOut>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d132      	bne.n	80124c6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012462:	f000 f9ee 	bl	8012842 <prvIsQueueEmpty>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d026      	beq.n	80124ba <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d109      	bne.n	8012488 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012474:	f001 feb2 	bl	80141dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	4618      	mov	r0, r3
 801247e:	f001 f98b 	bl	8013798 <xTaskPriorityInherit>
 8012482:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012484:	f001 fed8 	bl	8014238 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248a:	3324      	adds	r3, #36	; 0x24
 801248c:	683a      	ldr	r2, [r7, #0]
 801248e:	4611      	mov	r1, r2
 8012490:	4618      	mov	r0, r3
 8012492:	f000 ff89 	bl	80133a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012498:	f000 f981 	bl	801279e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801249c:	f000 fdb4 	bl	8013008 <xTaskResumeAll>
 80124a0:	4603      	mov	r3, r0
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f47f af69 	bne.w	801237a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80124a8:	4b18      	ldr	r3, [pc, #96]	; (801250c <xQueueSemaphoreTake+0x20c>)
 80124aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124ae:	601a      	str	r2, [r3, #0]
 80124b0:	f3bf 8f4f 	dsb	sy
 80124b4:	f3bf 8f6f 	isb	sy
 80124b8:	e75f      	b.n	801237a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80124ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124bc:	f000 f96f 	bl	801279e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80124c0:	f000 fda2 	bl	8013008 <xTaskResumeAll>
 80124c4:	e759      	b.n	801237a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80124c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124c8:	f000 f969 	bl	801279e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80124cc:	f000 fd9c 	bl	8013008 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80124d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124d2:	f000 f9b6 	bl	8012842 <prvIsQueueEmpty>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	f43f af4e 	beq.w	801237a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80124de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d00d      	beq.n	8012500 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80124e4:	f001 fe7a 	bl	80141dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124ea:	f000 f8b0 	bl	801264e <prvGetDisinheritPriorityAfterTimeout>
 80124ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80124f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f2:	689b      	ldr	r3, [r3, #8]
 80124f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124f6:	4618      	mov	r0, r3
 80124f8:	f001 fa52 	bl	80139a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80124fc:	f001 fe9c 	bl	8014238 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012502:	4618      	mov	r0, r3
 8012504:	3738      	adds	r7, #56	; 0x38
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	e000ed04 	.word	0xe000ed04

08012510 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b08e      	sub	sp, #56	; 0x38
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012522:	2b00      	cmp	r3, #0
 8012524:	d109      	bne.n	801253a <xQueueReceiveFromISR+0x2a>
 8012526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252a:	f383 8811 	msr	BASEPRI, r3
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f3bf 8f4f 	dsb	sy
 8012536:	623b      	str	r3, [r7, #32]
 8012538:	e7fe      	b.n	8012538 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d103      	bne.n	8012548 <xQueueReceiveFromISR+0x38>
 8012540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012544:	2b00      	cmp	r3, #0
 8012546:	d101      	bne.n	801254c <xQueueReceiveFromISR+0x3c>
 8012548:	2301      	movs	r3, #1
 801254a:	e000      	b.n	801254e <xQueueReceiveFromISR+0x3e>
 801254c:	2300      	movs	r3, #0
 801254e:	2b00      	cmp	r3, #0
 8012550:	d109      	bne.n	8012566 <xQueueReceiveFromISR+0x56>
 8012552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012556:	f383 8811 	msr	BASEPRI, r3
 801255a:	f3bf 8f6f 	isb	sy
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	61fb      	str	r3, [r7, #28]
 8012564:	e7fe      	b.n	8012564 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012566:	f001 ff15 	bl	8014394 <vPortValidateInterruptPriority>
	__asm volatile
 801256a:	f3ef 8211 	mrs	r2, BASEPRI
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	61ba      	str	r2, [r7, #24]
 8012580:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012582:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012584:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801258a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801258e:	2b00      	cmp	r3, #0
 8012590:	d02f      	beq.n	80125f2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801259c:	68b9      	ldr	r1, [r7, #8]
 801259e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125a0:	f000 f8d7 	bl	8012752 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80125a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a6:	1e5a      	subs	r2, r3, #1
 80125a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80125ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b4:	d112      	bne.n	80125dc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b8:	691b      	ldr	r3, [r3, #16]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d016      	beq.n	80125ec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c0:	3310      	adds	r3, #16
 80125c2:	4618      	mov	r0, r3
 80125c4:	f000 ff14 	bl	80133f0 <xTaskRemoveFromEventList>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d00e      	beq.n	80125ec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d00b      	beq.n	80125ec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2201      	movs	r2, #1
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	e007      	b.n	80125ec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80125dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125e0:	3301      	adds	r3, #1
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	b25a      	sxtb	r2, r3
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80125ec:	2301      	movs	r3, #1
 80125ee:	637b      	str	r3, [r7, #52]	; 0x34
 80125f0:	e001      	b.n	80125f6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80125f2:	2300      	movs	r3, #0
 80125f4:	637b      	str	r3, [r7, #52]	; 0x34
 80125f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012602:	4618      	mov	r0, r3
 8012604:	3738      	adds	r7, #56	; 0x38
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801260a:	b580      	push	{r7, lr}
 801260c:	b084      	sub	sp, #16
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d109      	bne.n	8012630 <vQueueDelete+0x26>
	__asm volatile
 801261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012620:	f383 8811 	msr	BASEPRI, r3
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	60bb      	str	r3, [r7, #8]
 801262e:	e7fe      	b.n	801262e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f000 f935 	bl	80128a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801263c:	2b00      	cmp	r3, #0
 801263e:	d102      	bne.n	8012646 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f001 ffa7 	bl	8014594 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012646:	bf00      	nop
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801264e:	b480      	push	{r7}
 8012650:	b085      	sub	sp, #20
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265a:	2b00      	cmp	r3, #0
 801265c:	d006      	beq.n	801266c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f1c3 0307 	rsb	r3, r3, #7
 8012668:	60fb      	str	r3, [r7, #12]
 801266a:	e001      	b.n	8012670 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801266c:	2300      	movs	r3, #0
 801266e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012670:	68fb      	ldr	r3, [r7, #12]
	}
 8012672:	4618      	mov	r0, r3
 8012674:	3714      	adds	r7, #20
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr

0801267e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801267e:	b580      	push	{r7, lr}
 8012680:	b086      	sub	sp, #24
 8012682:	af00      	add	r7, sp, #0
 8012684:	60f8      	str	r0, [r7, #12]
 8012686:	60b9      	str	r1, [r7, #8]
 8012688:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801268a:	2300      	movs	r3, #0
 801268c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012692:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012698:	2b00      	cmp	r3, #0
 801269a:	d10d      	bne.n	80126b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d14d      	bne.n	8012740 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f001 f8f5 	bl	8013898 <xTaskPriorityDisinherit>
 80126ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2200      	movs	r2, #0
 80126b4:	609a      	str	r2, [r3, #8]
 80126b6:	e043      	b.n	8012740 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d119      	bne.n	80126f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	6858      	ldr	r0, [r3, #4]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126c6:	461a      	mov	r2, r3
 80126c8:	68b9      	ldr	r1, [r7, #8]
 80126ca:	f002 f8a1 	bl	8014810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	685a      	ldr	r2, [r3, #4]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d6:	441a      	add	r2, r3
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	685a      	ldr	r2, [r3, #4]
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	689b      	ldr	r3, [r3, #8]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d32b      	bcc.n	8012740 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	605a      	str	r2, [r3, #4]
 80126f0:	e026      	b.n	8012740 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	68d8      	ldr	r0, [r3, #12]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126fa:	461a      	mov	r2, r3
 80126fc:	68b9      	ldr	r1, [r7, #8]
 80126fe:	f002 f887 	bl	8014810 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	68da      	ldr	r2, [r3, #12]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270a:	425b      	negs	r3, r3
 801270c:	441a      	add	r2, r3
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	68da      	ldr	r2, [r3, #12]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	429a      	cmp	r2, r3
 801271c:	d207      	bcs.n	801272e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	689a      	ldr	r2, [r3, #8]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012726:	425b      	negs	r3, r3
 8012728:	441a      	add	r2, r3
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2b02      	cmp	r3, #2
 8012732:	d105      	bne.n	8012740 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d002      	beq.n	8012740 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	3b01      	subs	r3, #1
 801273e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012748:	697b      	ldr	r3, [r7, #20]
}
 801274a:	4618      	mov	r0, r3
 801274c:	3718      	adds	r7, #24
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}

08012752 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012752:	b580      	push	{r7, lr}
 8012754:	b082      	sub	sp, #8
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
 801275a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012760:	2b00      	cmp	r3, #0
 8012762:	d018      	beq.n	8012796 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	68da      	ldr	r2, [r3, #12]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801276c:	441a      	add	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	68da      	ldr	r2, [r3, #12]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	429a      	cmp	r2, r3
 801277c:	d303      	bcc.n	8012786 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	68d9      	ldr	r1, [r3, #12]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801278e:	461a      	mov	r2, r3
 8012790:	6838      	ldr	r0, [r7, #0]
 8012792:	f002 f83d 	bl	8014810 <memcpy>
	}
}
 8012796:	bf00      	nop
 8012798:	3708      	adds	r7, #8
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}

0801279e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801279e:	b580      	push	{r7, lr}
 80127a0:	b084      	sub	sp, #16
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80127a6:	f001 fd19 	bl	80141dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127b2:	e011      	b.n	80127d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d012      	beq.n	80127e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	3324      	adds	r3, #36	; 0x24
 80127c0:	4618      	mov	r0, r3
 80127c2:	f000 fe15 	bl	80133f0 <xTaskRemoveFromEventList>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d001      	beq.n	80127d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80127cc:	f000 fee8 	bl	80135a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80127d0:	7bfb      	ldrb	r3, [r7, #15]
 80127d2:	3b01      	subs	r3, #1
 80127d4:	b2db      	uxtb	r3, r3
 80127d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	dce9      	bgt.n	80127b4 <prvUnlockQueue+0x16>
 80127e0:	e000      	b.n	80127e4 <prvUnlockQueue+0x46>
					break;
 80127e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	22ff      	movs	r2, #255	; 0xff
 80127e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80127ec:	f001 fd24 	bl	8014238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80127f0:	f001 fcf4 	bl	80141dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80127fc:	e011      	b.n	8012822 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	691b      	ldr	r3, [r3, #16]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d012      	beq.n	801282c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	3310      	adds	r3, #16
 801280a:	4618      	mov	r0, r3
 801280c:	f000 fdf0 	bl	80133f0 <xTaskRemoveFromEventList>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012816:	f000 fec3 	bl	80135a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801281a:	7bbb      	ldrb	r3, [r7, #14]
 801281c:	3b01      	subs	r3, #1
 801281e:	b2db      	uxtb	r3, r3
 8012820:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012826:	2b00      	cmp	r3, #0
 8012828:	dce9      	bgt.n	80127fe <prvUnlockQueue+0x60>
 801282a:	e000      	b.n	801282e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801282c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	22ff      	movs	r2, #255	; 0xff
 8012832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012836:	f001 fcff 	bl	8014238 <vPortExitCritical>
}
 801283a:	bf00      	nop
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}

08012842 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b084      	sub	sp, #16
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801284a:	f001 fcc7 	bl	80141dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012852:	2b00      	cmp	r3, #0
 8012854:	d102      	bne.n	801285c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012856:	2301      	movs	r3, #1
 8012858:	60fb      	str	r3, [r7, #12]
 801285a:	e001      	b.n	8012860 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801285c:	2300      	movs	r3, #0
 801285e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012860:	f001 fcea 	bl	8014238 <vPortExitCritical>

	return xReturn;
 8012864:	68fb      	ldr	r3, [r7, #12]
}
 8012866:	4618      	mov	r0, r3
 8012868:	3710      	adds	r7, #16
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801286e:	b580      	push	{r7, lr}
 8012870:	b084      	sub	sp, #16
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012876:	f001 fcb1 	bl	80141dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012882:	429a      	cmp	r2, r3
 8012884:	d102      	bne.n	801288c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012886:	2301      	movs	r3, #1
 8012888:	60fb      	str	r3, [r7, #12]
 801288a:	e001      	b.n	8012890 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801288c:	2300      	movs	r3, #0
 801288e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012890:	f001 fcd2 	bl	8014238 <vPortExitCritical>

	return xReturn;
 8012894:	68fb      	ldr	r3, [r7, #12]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
	...

080128a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128a8:	2300      	movs	r3, #0
 80128aa:	60fb      	str	r3, [r7, #12]
 80128ac:	e016      	b.n	80128dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80128ae:	4a10      	ldr	r2, [pc, #64]	; (80128f0 <vQueueUnregisterQueue+0x50>)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	00db      	lsls	r3, r3, #3
 80128b4:	4413      	add	r3, r2
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d10b      	bne.n	80128d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80128be:	4a0c      	ldr	r2, [pc, #48]	; (80128f0 <vQueueUnregisterQueue+0x50>)
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2100      	movs	r1, #0
 80128c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80128c8:	4a09      	ldr	r2, [pc, #36]	; (80128f0 <vQueueUnregisterQueue+0x50>)
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	00db      	lsls	r3, r3, #3
 80128ce:	4413      	add	r3, r2
 80128d0:	2200      	movs	r2, #0
 80128d2:	605a      	str	r2, [r3, #4]
				break;
 80128d4:	e005      	b.n	80128e2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	3301      	adds	r3, #1
 80128da:	60fb      	str	r3, [r7, #12]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2b07      	cmp	r3, #7
 80128e0:	d9e5      	bls.n	80128ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80128e2:	bf00      	nop
 80128e4:	3714      	adds	r7, #20
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	24070fa0 	.word	0x24070fa0

080128f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b08e      	sub	sp, #56	; 0x38
 80128f8:	af04      	add	r7, sp, #16
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
 8012900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <xTaskCreateStatic+0x28>
 8012908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801290c:	f383 8811 	msr	BASEPRI, r3
 8012910:	f3bf 8f6f 	isb	sy
 8012914:	f3bf 8f4f 	dsb	sy
 8012918:	623b      	str	r3, [r7, #32]
 801291a:	e7fe      	b.n	801291a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	2b00      	cmp	r3, #0
 8012920:	d109      	bne.n	8012936 <xTaskCreateStatic+0x42>
 8012922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012926:	f383 8811 	msr	BASEPRI, r3
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	f3bf 8f4f 	dsb	sy
 8012932:	61fb      	str	r3, [r7, #28]
 8012934:	e7fe      	b.n	8012934 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012936:	2354      	movs	r3, #84	; 0x54
 8012938:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	2b54      	cmp	r3, #84	; 0x54
 801293e:	d009      	beq.n	8012954 <xTaskCreateStatic+0x60>
 8012940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012944:	f383 8811 	msr	BASEPRI, r3
 8012948:	f3bf 8f6f 	isb	sy
 801294c:	f3bf 8f4f 	dsb	sy
 8012950:	61bb      	str	r3, [r7, #24]
 8012952:	e7fe      	b.n	8012952 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012954:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012958:	2b00      	cmp	r3, #0
 801295a:	d01e      	beq.n	801299a <xTaskCreateStatic+0xa6>
 801295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801295e:	2b00      	cmp	r3, #0
 8012960:	d01b      	beq.n	801299a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012964:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801296a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296e:	2202      	movs	r2, #2
 8012970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012974:	2300      	movs	r3, #0
 8012976:	9303      	str	r3, [sp, #12]
 8012978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297a:	9302      	str	r3, [sp, #8]
 801297c:	f107 0314 	add.w	r3, r7, #20
 8012980:	9301      	str	r3, [sp, #4]
 8012982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	68b9      	ldr	r1, [r7, #8]
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f000 f850 	bl	8012a32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012994:	f000 f8d4 	bl	8012b40 <prvAddNewTaskToReadyList>
 8012998:	e001      	b.n	801299e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801299a:	2300      	movs	r3, #0
 801299c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801299e:	697b      	ldr	r3, [r7, #20]
	}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3728      	adds	r7, #40	; 0x28
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b08c      	sub	sp, #48	; 0x30
 80129ac:	af04      	add	r7, sp, #16
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	603b      	str	r3, [r7, #0]
 80129b4:	4613      	mov	r3, r2
 80129b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80129b8:	88fb      	ldrh	r3, [r7, #6]
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	4618      	mov	r0, r3
 80129be:	f001 fd27 	bl	8014410 <pvPortMalloc>
 80129c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00e      	beq.n	80129e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80129ca:	2054      	movs	r0, #84	; 0x54
 80129cc:	f001 fd20 	bl	8014410 <pvPortMalloc>
 80129d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d003      	beq.n	80129e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	697a      	ldr	r2, [r7, #20]
 80129dc:	631a      	str	r2, [r3, #48]	; 0x30
 80129de:	e005      	b.n	80129ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80129e0:	6978      	ldr	r0, [r7, #20]
 80129e2:	f001 fdd7 	bl	8014594 <vPortFree>
 80129e6:	e001      	b.n	80129ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80129e8:	2300      	movs	r3, #0
 80129ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d017      	beq.n	8012a22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	2200      	movs	r2, #0
 80129f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80129fa:	88fa      	ldrh	r2, [r7, #6]
 80129fc:	2300      	movs	r3, #0
 80129fe:	9303      	str	r3, [sp, #12]
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	9302      	str	r3, [sp, #8]
 8012a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	68b9      	ldr	r1, [r7, #8]
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f000 f80e 	bl	8012a32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a16:	69f8      	ldr	r0, [r7, #28]
 8012a18:	f000 f892 	bl	8012b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	61bb      	str	r3, [r7, #24]
 8012a20:	e002      	b.n	8012a28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012a22:	f04f 33ff 	mov.w	r3, #4294967295
 8012a26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012a28:	69bb      	ldr	r3, [r7, #24]
	}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3720      	adds	r7, #32
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012a32:	b580      	push	{r7, lr}
 8012a34:	b088      	sub	sp, #32
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	60f8      	str	r0, [r7, #12]
 8012a3a:	60b9      	str	r1, [r7, #8]
 8012a3c:	607a      	str	r2, [r7, #4]
 8012a3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a44:	6879      	ldr	r1, [r7, #4]
 8012a46:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012a4a:	440b      	add	r3, r1
 8012a4c:	009b      	lsls	r3, r3, #2
 8012a4e:	4413      	add	r3, r2
 8012a50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	f023 0307 	bic.w	r3, r3, #7
 8012a58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	f003 0307 	and.w	r3, r3, #7
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d009      	beq.n	8012a78 <prvInitialiseNewTask+0x46>
 8012a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a68:	f383 8811 	msr	BASEPRI, r3
 8012a6c:	f3bf 8f6f 	isb	sy
 8012a70:	f3bf 8f4f 	dsb	sy
 8012a74:	617b      	str	r3, [r7, #20]
 8012a76:	e7fe      	b.n	8012a76 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d01f      	beq.n	8012abe <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012a7e:	2300      	movs	r3, #0
 8012a80:	61fb      	str	r3, [r7, #28]
 8012a82:	e012      	b.n	8012aaa <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012a84:	68ba      	ldr	r2, [r7, #8]
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	4413      	add	r3, r2
 8012a8a:	7819      	ldrb	r1, [r3, #0]
 8012a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	4413      	add	r3, r2
 8012a92:	3334      	adds	r3, #52	; 0x34
 8012a94:	460a      	mov	r2, r1
 8012a96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d006      	beq.n	8012ab2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	61fb      	str	r3, [r7, #28]
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	2b0f      	cmp	r3, #15
 8012aae:	d9e9      	bls.n	8012a84 <prvInitialiseNewTask+0x52>
 8012ab0:	e000      	b.n	8012ab4 <prvInitialiseNewTask+0x82>
			{
				break;
 8012ab2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012abc:	e003      	b.n	8012ac6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac8:	2b06      	cmp	r3, #6
 8012aca:	d901      	bls.n	8012ad0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012acc:	2306      	movs	r3, #6
 8012ace:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ada:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ade:	2200      	movs	r2, #0
 8012ae0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	3304      	adds	r3, #4
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fe ff48 	bl	801197c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aee:	3318      	adds	r3, #24
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fe ff43 	bl	801197c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012afa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012afe:	f1c3 0207 	rsb	r2, r3, #7
 8012b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b0e:	2200      	movs	r2, #0
 8012b10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	2200      	movs	r2, #0
 8012b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	68f9      	ldr	r1, [r7, #12]
 8012b1e:	69b8      	ldr	r0, [r7, #24]
 8012b20:	f001 fa34 	bl	8013f8c <pxPortInitialiseStack>
 8012b24:	4602      	mov	r2, r0
 8012b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d002      	beq.n	8012b36 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b36:	bf00      	nop
 8012b38:	3720      	adds	r7, #32
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
	...

08012b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012b48:	f001 fb48 	bl	80141dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012b4c:	4b2a      	ldr	r3, [pc, #168]	; (8012bf8 <prvAddNewTaskToReadyList+0xb8>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	3301      	adds	r3, #1
 8012b52:	4a29      	ldr	r2, [pc, #164]	; (8012bf8 <prvAddNewTaskToReadyList+0xb8>)
 8012b54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012b56:	4b29      	ldr	r3, [pc, #164]	; (8012bfc <prvAddNewTaskToReadyList+0xbc>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d109      	bne.n	8012b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012b5e:	4a27      	ldr	r2, [pc, #156]	; (8012bfc <prvAddNewTaskToReadyList+0xbc>)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012b64:	4b24      	ldr	r3, [pc, #144]	; (8012bf8 <prvAddNewTaskToReadyList+0xb8>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d110      	bne.n	8012b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012b6c:	f000 fd3c 	bl	80135e8 <prvInitialiseTaskLists>
 8012b70:	e00d      	b.n	8012b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012b72:	4b23      	ldr	r3, [pc, #140]	; (8012c00 <prvAddNewTaskToReadyList+0xc0>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d109      	bne.n	8012b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012b7a:	4b20      	ldr	r3, [pc, #128]	; (8012bfc <prvAddNewTaskToReadyList+0xbc>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d802      	bhi.n	8012b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012b88:	4a1c      	ldr	r2, [pc, #112]	; (8012bfc <prvAddNewTaskToReadyList+0xbc>)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012b8e:	4b1d      	ldr	r3, [pc, #116]	; (8012c04 <prvAddNewTaskToReadyList+0xc4>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	3301      	adds	r3, #1
 8012b94:	4a1b      	ldr	r2, [pc, #108]	; (8012c04 <prvAddNewTaskToReadyList+0xc4>)
 8012b96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	409a      	lsls	r2, r3
 8012ba0:	4b19      	ldr	r3, [pc, #100]	; (8012c08 <prvAddNewTaskToReadyList+0xc8>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	4a18      	ldr	r2, [pc, #96]	; (8012c08 <prvAddNewTaskToReadyList+0xc8>)
 8012ba8:	6013      	str	r3, [r2, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bae:	4613      	mov	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	4413      	add	r3, r2
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	4a15      	ldr	r2, [pc, #84]	; (8012c0c <prvAddNewTaskToReadyList+0xcc>)
 8012bb8:	441a      	add	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	3304      	adds	r3, #4
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	f7fe fee8 	bl	8011996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012bc6:	f001 fb37 	bl	8014238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012bca:	4b0d      	ldr	r3, [pc, #52]	; (8012c00 <prvAddNewTaskToReadyList+0xc0>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00e      	beq.n	8012bf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012bd2:	4b0a      	ldr	r3, [pc, #40]	; (8012bfc <prvAddNewTaskToReadyList+0xbc>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d207      	bcs.n	8012bf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012be0:	4b0b      	ldr	r3, [pc, #44]	; (8012c10 <prvAddNewTaskToReadyList+0xd0>)
 8012be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012be6:	601a      	str	r2, [r3, #0]
 8012be8:	f3bf 8f4f 	dsb	sy
 8012bec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bf0:	bf00      	nop
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	24014a38 	.word	0x24014a38
 8012bfc:	24014938 	.word	0x24014938
 8012c00:	24014a44 	.word	0x24014a44
 8012c04:	24014a54 	.word	0x24014a54
 8012c08:	24014a40 	.word	0x24014a40
 8012c0c:	2401493c 	.word	0x2401493c
 8012c10:	e000ed04 	.word	0xe000ed04

08012c14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012c1c:	f001 fade 	bl	80141dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d102      	bne.n	8012c2c <vTaskSuspend+0x18>
 8012c26:	4b3c      	ldr	r3, [pc, #240]	; (8012d18 <vTaskSuspend+0x104>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	e000      	b.n	8012c2e <vTaskSuspend+0x1a>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	3304      	adds	r3, #4
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7fe ff0b 	bl	8011a50 <uxListRemove>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d115      	bne.n	8012c6c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c44:	4935      	ldr	r1, [pc, #212]	; (8012d1c <vTaskSuspend+0x108>)
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	440b      	add	r3, r1
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10a      	bne.n	8012c6c <vTaskSuspend+0x58>
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8012c60:	43da      	mvns	r2, r3
 8012c62:	4b2f      	ldr	r3, [pc, #188]	; (8012d20 <vTaskSuspend+0x10c>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4013      	ands	r3, r2
 8012c68:	4a2d      	ldr	r2, [pc, #180]	; (8012d20 <vTaskSuspend+0x10c>)
 8012c6a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d004      	beq.n	8012c7e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	3318      	adds	r3, #24
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fe fee9 	bl	8011a50 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	3304      	adds	r3, #4
 8012c82:	4619      	mov	r1, r3
 8012c84:	4827      	ldr	r0, [pc, #156]	; (8012d24 <vTaskSuspend+0x110>)
 8012c86:	f7fe fe86 	bl	8011996 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d103      	bne.n	8012c9e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012c9e:	f001 facb 	bl	8014238 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012ca2:	4b21      	ldr	r3, [pc, #132]	; (8012d28 <vTaskSuspend+0x114>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d005      	beq.n	8012cb6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012caa:	f001 fa97 	bl	80141dc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012cae:	f000 fd35 	bl	801371c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012cb2:	f001 fac1 	bl	8014238 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012cb6:	4b18      	ldr	r3, [pc, #96]	; (8012d18 <vTaskSuspend+0x104>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d126      	bne.n	8012d0e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8012cc0:	4b19      	ldr	r3, [pc, #100]	; (8012d28 <vTaskSuspend+0x114>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d016      	beq.n	8012cf6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012cc8:	4b18      	ldr	r3, [pc, #96]	; (8012d2c <vTaskSuspend+0x118>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d009      	beq.n	8012ce4 <vTaskSuspend+0xd0>
 8012cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd4:	f383 8811 	msr	BASEPRI, r3
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	f3bf 8f4f 	dsb	sy
 8012ce0:	60bb      	str	r3, [r7, #8]
 8012ce2:	e7fe      	b.n	8012ce2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8012ce4:	4b12      	ldr	r3, [pc, #72]	; (8012d30 <vTaskSuspend+0x11c>)
 8012ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cea:	601a      	str	r2, [r3, #0]
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012cf4:	e00b      	b.n	8012d0e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8012cf6:	4b0b      	ldr	r3, [pc, #44]	; (8012d24 <vTaskSuspend+0x110>)
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	4b0e      	ldr	r3, [pc, #56]	; (8012d34 <vTaskSuspend+0x120>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d103      	bne.n	8012d0a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8012d02:	4b05      	ldr	r3, [pc, #20]	; (8012d18 <vTaskSuspend+0x104>)
 8012d04:	2200      	movs	r2, #0
 8012d06:	601a      	str	r2, [r3, #0]
	}
 8012d08:	e001      	b.n	8012d0e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8012d0a:	f000 faf3 	bl	80132f4 <vTaskSwitchContext>
	}
 8012d0e:	bf00      	nop
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	24014938 	.word	0x24014938
 8012d1c:	2401493c 	.word	0x2401493c
 8012d20:	24014a40 	.word	0x24014a40
 8012d24:	24014a24 	.word	0x24014a24
 8012d28:	24014a44 	.word	0x24014a44
 8012d2c:	24014a60 	.word	0x24014a60
 8012d30:	e000ed04 	.word	0xe000ed04
 8012d34:	24014a38 	.word	0x24014a38

08012d38 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012d38:	b480      	push	{r7}
 8012d3a:	b087      	sub	sp, #28
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012d40:	2300      	movs	r3, #0
 8012d42:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d109      	bne.n	8012d62 <prvTaskIsTaskSuspended+0x2a>
 8012d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d52:	f383 8811 	msr	BASEPRI, r3
 8012d56:	f3bf 8f6f 	isb	sy
 8012d5a:	f3bf 8f4f 	dsb	sy
 8012d5e:	60fb      	str	r3, [r7, #12]
 8012d60:	e7fe      	b.n	8012d60 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	695b      	ldr	r3, [r3, #20]
 8012d66:	4a0a      	ldr	r2, [pc, #40]	; (8012d90 <prvTaskIsTaskSuspended+0x58>)
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d10a      	bne.n	8012d82 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d70:	4a08      	ldr	r2, [pc, #32]	; (8012d94 <prvTaskIsTaskSuspended+0x5c>)
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d005      	beq.n	8012d82 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d82:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012d84:	4618      	mov	r0, r3
 8012d86:	371c      	adds	r7, #28
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr
 8012d90:	24014a24 	.word	0x24014a24
 8012d94:	240149f8 	.word	0x240149f8

08012d98 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d109      	bne.n	8012dbe <vTaskResume+0x26>
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	60bb      	str	r3, [r7, #8]
 8012dbc:	e7fe      	b.n	8012dbc <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8012dbe:	4b20      	ldr	r3, [pc, #128]	; (8012e40 <vTaskResume+0xa8>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	68fa      	ldr	r2, [r7, #12]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d037      	beq.n	8012e38 <vTaskResume+0xa0>
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d034      	beq.n	8012e38 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8012dce:	f001 fa05 	bl	80141dc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012dd2:	68f8      	ldr	r0, [r7, #12]
 8012dd4:	f7ff ffb0 	bl	8012d38 <prvTaskIsTaskSuspended>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d02a      	beq.n	8012e34 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	3304      	adds	r3, #4
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fe fe34 	bl	8011a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dec:	2201      	movs	r2, #1
 8012dee:	409a      	lsls	r2, r3
 8012df0:	4b14      	ldr	r3, [pc, #80]	; (8012e44 <vTaskResume+0xac>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4313      	orrs	r3, r2
 8012df6:	4a13      	ldr	r2, [pc, #76]	; (8012e44 <vTaskResume+0xac>)
 8012df8:	6013      	str	r3, [r2, #0]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dfe:	4613      	mov	r3, r2
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	4413      	add	r3, r2
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4a10      	ldr	r2, [pc, #64]	; (8012e48 <vTaskResume+0xb0>)
 8012e08:	441a      	add	r2, r3
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	3304      	adds	r3, #4
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4610      	mov	r0, r2
 8012e12:	f7fe fdc0 	bl	8011996 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e1a:	4b09      	ldr	r3, [pc, #36]	; (8012e40 <vTaskResume+0xa8>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d307      	bcc.n	8012e34 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012e24:	4b09      	ldr	r3, [pc, #36]	; (8012e4c <vTaskResume+0xb4>)
 8012e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e2a:	601a      	str	r2, [r3, #0]
 8012e2c:	f3bf 8f4f 	dsb	sy
 8012e30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012e34:	f001 fa00 	bl	8014238 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e38:	bf00      	nop
 8012e3a:	3710      	adds	r7, #16
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	24014938 	.word	0x24014938
 8012e44:	24014a40 	.word	0x24014a40
 8012e48:	2401493c 	.word	0x2401493c
 8012e4c:	e000ed04 	.word	0xe000ed04

08012e50 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b08a      	sub	sp, #40	; 0x28
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d109      	bne.n	8012e7a <xTaskResumeFromISR+0x2a>
 8012e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e6a:	f383 8811 	msr	BASEPRI, r3
 8012e6e:	f3bf 8f6f 	isb	sy
 8012e72:	f3bf 8f4f 	dsb	sy
 8012e76:	61bb      	str	r3, [r7, #24]
 8012e78:	e7fe      	b.n	8012e78 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e7a:	f001 fa8b 	bl	8014394 <vPortValidateInterruptPriority>
	__asm volatile
 8012e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8012e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e86:	f383 8811 	msr	BASEPRI, r3
 8012e8a:	f3bf 8f6f 	isb	sy
 8012e8e:	f3bf 8f4f 	dsb	sy
 8012e92:	617a      	str	r2, [r7, #20]
 8012e94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012e96:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e98:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012e9a:	6a38      	ldr	r0, [r7, #32]
 8012e9c:	f7ff ff4c 	bl	8012d38 <prvTaskIsTaskSuspended>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d02f      	beq.n	8012f06 <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ea6:	4b1d      	ldr	r3, [pc, #116]	; (8012f1c <xTaskResumeFromISR+0xcc>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d125      	bne.n	8012efa <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb2:	4b1b      	ldr	r3, [pc, #108]	; (8012f20 <xTaskResumeFromISR+0xd0>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d301      	bcc.n	8012ec0 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ec0:	6a3b      	ldr	r3, [r7, #32]
 8012ec2:	3304      	adds	r3, #4
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fe fdc3 	bl	8011a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012eca:	6a3b      	ldr	r3, [r7, #32]
 8012ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ece:	2201      	movs	r2, #1
 8012ed0:	409a      	lsls	r2, r3
 8012ed2:	4b14      	ldr	r3, [pc, #80]	; (8012f24 <xTaskResumeFromISR+0xd4>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	4a12      	ldr	r2, [pc, #72]	; (8012f24 <xTaskResumeFromISR+0xd4>)
 8012eda:	6013      	str	r3, [r2, #0]
 8012edc:	6a3b      	ldr	r3, [r7, #32]
 8012ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee0:	4613      	mov	r3, r2
 8012ee2:	009b      	lsls	r3, r3, #2
 8012ee4:	4413      	add	r3, r2
 8012ee6:	009b      	lsls	r3, r3, #2
 8012ee8:	4a0f      	ldr	r2, [pc, #60]	; (8012f28 <xTaskResumeFromISR+0xd8>)
 8012eea:	441a      	add	r2, r3
 8012eec:	6a3b      	ldr	r3, [r7, #32]
 8012eee:	3304      	adds	r3, #4
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	4610      	mov	r0, r2
 8012ef4:	f7fe fd4f 	bl	8011996 <vListInsertEnd>
 8012ef8:	e005      	b.n	8012f06 <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012efa:	6a3b      	ldr	r3, [r7, #32]
 8012efc:	3318      	adds	r3, #24
 8012efe:	4619      	mov	r1, r3
 8012f00:	480a      	ldr	r0, [pc, #40]	; (8012f2c <xTaskResumeFromISR+0xdc>)
 8012f02:	f7fe fd48 	bl	8011996 <vListInsertEnd>
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8012f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3728      	adds	r7, #40	; 0x28
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	24014a60 	.word	0x24014a60
 8012f20:	24014938 	.word	0x24014938
 8012f24:	24014a40 	.word	0x24014a40
 8012f28:	2401493c 	.word	0x2401493c
 8012f2c:	240149f8 	.word	0x240149f8

08012f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b08a      	sub	sp, #40	; 0x28
 8012f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f36:	2300      	movs	r3, #0
 8012f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f3e:	463a      	mov	r2, r7
 8012f40:	1d39      	adds	r1, r7, #4
 8012f42:	f107 0308 	add.w	r3, r7, #8
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7ed fcce 	bl	80008e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f4c:	6839      	ldr	r1, [r7, #0]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	68ba      	ldr	r2, [r7, #8]
 8012f52:	9202      	str	r2, [sp, #8]
 8012f54:	9301      	str	r3, [sp, #4]
 8012f56:	2300      	movs	r3, #0
 8012f58:	9300      	str	r3, [sp, #0]
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	460a      	mov	r2, r1
 8012f5e:	491d      	ldr	r1, [pc, #116]	; (8012fd4 <vTaskStartScheduler+0xa4>)
 8012f60:	481d      	ldr	r0, [pc, #116]	; (8012fd8 <vTaskStartScheduler+0xa8>)
 8012f62:	f7ff fcc7 	bl	80128f4 <xTaskCreateStatic>
 8012f66:	4602      	mov	r2, r0
 8012f68:	4b1c      	ldr	r3, [pc, #112]	; (8012fdc <vTaskStartScheduler+0xac>)
 8012f6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f6c:	4b1b      	ldr	r3, [pc, #108]	; (8012fdc <vTaskStartScheduler+0xac>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d002      	beq.n	8012f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f74:	2301      	movs	r3, #1
 8012f76:	617b      	str	r3, [r7, #20]
 8012f78:	e001      	b.n	8012f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d115      	bne.n	8012fb0 <vTaskStartScheduler+0x80>
	__asm volatile
 8012f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f88:	f383 8811 	msr	BASEPRI, r3
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f3bf 8f4f 	dsb	sy
 8012f94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f96:	4b12      	ldr	r3, [pc, #72]	; (8012fe0 <vTaskStartScheduler+0xb0>)
 8012f98:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012f9e:	4b11      	ldr	r3, [pc, #68]	; (8012fe4 <vTaskStartScheduler+0xb4>)
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fa4:	4b10      	ldr	r3, [pc, #64]	; (8012fe8 <vTaskStartScheduler+0xb8>)
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012faa:	f001 f879 	bl	80140a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012fae:	e00d      	b.n	8012fcc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb6:	d109      	bne.n	8012fcc <vTaskStartScheduler+0x9c>
 8012fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbc:	f383 8811 	msr	BASEPRI, r3
 8012fc0:	f3bf 8f6f 	isb	sy
 8012fc4:	f3bf 8f4f 	dsb	sy
 8012fc8:	60fb      	str	r3, [r7, #12]
 8012fca:	e7fe      	b.n	8012fca <vTaskStartScheduler+0x9a>
}
 8012fcc:	bf00      	nop
 8012fce:	3718      	adds	r7, #24
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}
 8012fd4:	0801512c 	.word	0x0801512c
 8012fd8:	080135b9 	.word	0x080135b9
 8012fdc:	24014a5c 	.word	0x24014a5c
 8012fe0:	24014a58 	.word	0x24014a58
 8012fe4:	24014a44 	.word	0x24014a44
 8012fe8:	24014a3c 	.word	0x24014a3c

08012fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012fec:	b480      	push	{r7}
 8012fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012ff0:	4b04      	ldr	r3, [pc, #16]	; (8013004 <vTaskSuspendAll+0x18>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	4a03      	ldr	r2, [pc, #12]	; (8013004 <vTaskSuspendAll+0x18>)
 8012ff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012ffa:	bf00      	nop
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013002:	4770      	bx	lr
 8013004:	24014a60 	.word	0x24014a60

08013008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801300e:	2300      	movs	r3, #0
 8013010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013012:	2300      	movs	r3, #0
 8013014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013016:	4b41      	ldr	r3, [pc, #260]	; (801311c <xTaskResumeAll+0x114>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d109      	bne.n	8013032 <xTaskResumeAll+0x2a>
 801301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013022:	f383 8811 	msr	BASEPRI, r3
 8013026:	f3bf 8f6f 	isb	sy
 801302a:	f3bf 8f4f 	dsb	sy
 801302e:	603b      	str	r3, [r7, #0]
 8013030:	e7fe      	b.n	8013030 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013032:	f001 f8d3 	bl	80141dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013036:	4b39      	ldr	r3, [pc, #228]	; (801311c <xTaskResumeAll+0x114>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	3b01      	subs	r3, #1
 801303c:	4a37      	ldr	r2, [pc, #220]	; (801311c <xTaskResumeAll+0x114>)
 801303e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013040:	4b36      	ldr	r3, [pc, #216]	; (801311c <xTaskResumeAll+0x114>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d161      	bne.n	801310c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013048:	4b35      	ldr	r3, [pc, #212]	; (8013120 <xTaskResumeAll+0x118>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d05d      	beq.n	801310c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013050:	e02e      	b.n	80130b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013052:	4b34      	ldr	r3, [pc, #208]	; (8013124 <xTaskResumeAll+0x11c>)
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	3318      	adds	r3, #24
 801305e:	4618      	mov	r0, r3
 8013060:	f7fe fcf6 	bl	8011a50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	3304      	adds	r3, #4
 8013068:	4618      	mov	r0, r3
 801306a:	f7fe fcf1 	bl	8011a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013072:	2201      	movs	r2, #1
 8013074:	409a      	lsls	r2, r3
 8013076:	4b2c      	ldr	r3, [pc, #176]	; (8013128 <xTaskResumeAll+0x120>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	4313      	orrs	r3, r2
 801307c:	4a2a      	ldr	r2, [pc, #168]	; (8013128 <xTaskResumeAll+0x120>)
 801307e:	6013      	str	r3, [r2, #0]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013084:	4613      	mov	r3, r2
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	4413      	add	r3, r2
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	4a27      	ldr	r2, [pc, #156]	; (801312c <xTaskResumeAll+0x124>)
 801308e:	441a      	add	r2, r3
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	3304      	adds	r3, #4
 8013094:	4619      	mov	r1, r3
 8013096:	4610      	mov	r0, r2
 8013098:	f7fe fc7d 	bl	8011996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a0:	4b23      	ldr	r3, [pc, #140]	; (8013130 <xTaskResumeAll+0x128>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d302      	bcc.n	80130b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80130aa:	4b22      	ldr	r3, [pc, #136]	; (8013134 <xTaskResumeAll+0x12c>)
 80130ac:	2201      	movs	r2, #1
 80130ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130b0:	4b1c      	ldr	r3, [pc, #112]	; (8013124 <xTaskResumeAll+0x11c>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d1cc      	bne.n	8013052 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d001      	beq.n	80130c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130be:	f000 fb2d 	bl	801371c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80130c2:	4b1d      	ldr	r3, [pc, #116]	; (8013138 <xTaskResumeAll+0x130>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d010      	beq.n	80130f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130ce:	f000 f859 	bl	8013184 <xTaskIncrementTick>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d002      	beq.n	80130de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80130d8:	4b16      	ldr	r3, [pc, #88]	; (8013134 <xTaskResumeAll+0x12c>)
 80130da:	2201      	movs	r2, #1
 80130dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	3b01      	subs	r3, #1
 80130e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1f1      	bne.n	80130ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80130ea:	4b13      	ldr	r3, [pc, #76]	; (8013138 <xTaskResumeAll+0x130>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130f0:	4b10      	ldr	r3, [pc, #64]	; (8013134 <xTaskResumeAll+0x12c>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d009      	beq.n	801310c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80130f8:	2301      	movs	r3, #1
 80130fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80130fc:	4b0f      	ldr	r3, [pc, #60]	; (801313c <xTaskResumeAll+0x134>)
 80130fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013102:	601a      	str	r2, [r3, #0]
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801310c:	f001 f894 	bl	8014238 <vPortExitCritical>

	return xAlreadyYielded;
 8013110:	68bb      	ldr	r3, [r7, #8]
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	24014a60 	.word	0x24014a60
 8013120:	24014a38 	.word	0x24014a38
 8013124:	240149f8 	.word	0x240149f8
 8013128:	24014a40 	.word	0x24014a40
 801312c:	2401493c 	.word	0x2401493c
 8013130:	24014938 	.word	0x24014938
 8013134:	24014a4c 	.word	0x24014a4c
 8013138:	24014a48 	.word	0x24014a48
 801313c:	e000ed04 	.word	0xe000ed04

08013140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013140:	b480      	push	{r7}
 8013142:	b083      	sub	sp, #12
 8013144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013146:	4b05      	ldr	r3, [pc, #20]	; (801315c <xTaskGetTickCount+0x1c>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801314c:	687b      	ldr	r3, [r7, #4]
}
 801314e:	4618      	mov	r0, r3
 8013150:	370c      	adds	r7, #12
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	24014a3c 	.word	0x24014a3c

08013160 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013166:	f001 f915 	bl	8014394 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801316a:	2300      	movs	r3, #0
 801316c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801316e:	4b04      	ldr	r3, [pc, #16]	; (8013180 <xTaskGetTickCountFromISR+0x20>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013174:	683b      	ldr	r3, [r7, #0]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	24014a3c 	.word	0x24014a3c

08013184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b086      	sub	sp, #24
 8013188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801318a:	2300      	movs	r3, #0
 801318c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801318e:	4b4e      	ldr	r3, [pc, #312]	; (80132c8 <xTaskIncrementTick+0x144>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	f040 8087 	bne.w	80132a6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013198:	4b4c      	ldr	r3, [pc, #304]	; (80132cc <xTaskIncrementTick+0x148>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	3301      	adds	r3, #1
 801319e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80131a0:	4a4a      	ldr	r2, [pc, #296]	; (80132cc <xTaskIncrementTick+0x148>)
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d11f      	bne.n	80131ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80131ac:	4b48      	ldr	r3, [pc, #288]	; (80132d0 <xTaskIncrementTick+0x14c>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d009      	beq.n	80131ca <xTaskIncrementTick+0x46>
 80131b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	603b      	str	r3, [r7, #0]
 80131c8:	e7fe      	b.n	80131c8 <xTaskIncrementTick+0x44>
 80131ca:	4b41      	ldr	r3, [pc, #260]	; (80132d0 <xTaskIncrementTick+0x14c>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	60fb      	str	r3, [r7, #12]
 80131d0:	4b40      	ldr	r3, [pc, #256]	; (80132d4 <xTaskIncrementTick+0x150>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4a3e      	ldr	r2, [pc, #248]	; (80132d0 <xTaskIncrementTick+0x14c>)
 80131d6:	6013      	str	r3, [r2, #0]
 80131d8:	4a3e      	ldr	r2, [pc, #248]	; (80132d4 <xTaskIncrementTick+0x150>)
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	6013      	str	r3, [r2, #0]
 80131de:	4b3e      	ldr	r3, [pc, #248]	; (80132d8 <xTaskIncrementTick+0x154>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	3301      	adds	r3, #1
 80131e4:	4a3c      	ldr	r2, [pc, #240]	; (80132d8 <xTaskIncrementTick+0x154>)
 80131e6:	6013      	str	r3, [r2, #0]
 80131e8:	f000 fa98 	bl	801371c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131ec:	4b3b      	ldr	r3, [pc, #236]	; (80132dc <xTaskIncrementTick+0x158>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	693a      	ldr	r2, [r7, #16]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d348      	bcc.n	8013288 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131f6:	4b36      	ldr	r3, [pc, #216]	; (80132d0 <xTaskIncrementTick+0x14c>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d104      	bne.n	801320a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013200:	4b36      	ldr	r3, [pc, #216]	; (80132dc <xTaskIncrementTick+0x158>)
 8013202:	f04f 32ff 	mov.w	r2, #4294967295
 8013206:	601a      	str	r2, [r3, #0]
					break;
 8013208:	e03e      	b.n	8013288 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801320a:	4b31      	ldr	r3, [pc, #196]	; (80132d0 <xTaskIncrementTick+0x14c>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801321a:	693a      	ldr	r2, [r7, #16]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	429a      	cmp	r2, r3
 8013220:	d203      	bcs.n	801322a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013222:	4a2e      	ldr	r2, [pc, #184]	; (80132dc <xTaskIncrementTick+0x158>)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013228:	e02e      	b.n	8013288 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	3304      	adds	r3, #4
 801322e:	4618      	mov	r0, r3
 8013230:	f7fe fc0e 	bl	8011a50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013238:	2b00      	cmp	r3, #0
 801323a:	d004      	beq.n	8013246 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	3318      	adds	r3, #24
 8013240:	4618      	mov	r0, r3
 8013242:	f7fe fc05 	bl	8011a50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801324a:	2201      	movs	r2, #1
 801324c:	409a      	lsls	r2, r3
 801324e:	4b24      	ldr	r3, [pc, #144]	; (80132e0 <xTaskIncrementTick+0x15c>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	4313      	orrs	r3, r2
 8013254:	4a22      	ldr	r2, [pc, #136]	; (80132e0 <xTaskIncrementTick+0x15c>)
 8013256:	6013      	str	r3, [r2, #0]
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325c:	4613      	mov	r3, r2
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	4413      	add	r3, r2
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	4a1f      	ldr	r2, [pc, #124]	; (80132e4 <xTaskIncrementTick+0x160>)
 8013266:	441a      	add	r2, r3
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	3304      	adds	r3, #4
 801326c:	4619      	mov	r1, r3
 801326e:	4610      	mov	r0, r2
 8013270:	f7fe fb91 	bl	8011996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013278:	4b1b      	ldr	r3, [pc, #108]	; (80132e8 <xTaskIncrementTick+0x164>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327e:	429a      	cmp	r2, r3
 8013280:	d3b9      	bcc.n	80131f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013282:	2301      	movs	r3, #1
 8013284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013286:	e7b6      	b.n	80131f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013288:	4b17      	ldr	r3, [pc, #92]	; (80132e8 <xTaskIncrementTick+0x164>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328e:	4915      	ldr	r1, [pc, #84]	; (80132e4 <xTaskIncrementTick+0x160>)
 8013290:	4613      	mov	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	4413      	add	r3, r2
 8013296:	009b      	lsls	r3, r3, #2
 8013298:	440b      	add	r3, r1
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b01      	cmp	r3, #1
 801329e:	d907      	bls.n	80132b0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80132a0:	2301      	movs	r3, #1
 80132a2:	617b      	str	r3, [r7, #20]
 80132a4:	e004      	b.n	80132b0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80132a6:	4b11      	ldr	r3, [pc, #68]	; (80132ec <xTaskIncrementTick+0x168>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	3301      	adds	r3, #1
 80132ac:	4a0f      	ldr	r2, [pc, #60]	; (80132ec <xTaskIncrementTick+0x168>)
 80132ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80132b0:	4b0f      	ldr	r3, [pc, #60]	; (80132f0 <xTaskIncrementTick+0x16c>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80132b8:	2301      	movs	r3, #1
 80132ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80132bc:	697b      	ldr	r3, [r7, #20]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3718      	adds	r7, #24
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	24014a60 	.word	0x24014a60
 80132cc:	24014a3c 	.word	0x24014a3c
 80132d0:	240149f0 	.word	0x240149f0
 80132d4:	240149f4 	.word	0x240149f4
 80132d8:	24014a50 	.word	0x24014a50
 80132dc:	24014a58 	.word	0x24014a58
 80132e0:	24014a40 	.word	0x24014a40
 80132e4:	2401493c 	.word	0x2401493c
 80132e8:	24014938 	.word	0x24014938
 80132ec:	24014a48 	.word	0x24014a48
 80132f0:	24014a4c 	.word	0x24014a4c

080132f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b087      	sub	sp, #28
 80132f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132fa:	4b26      	ldr	r3, [pc, #152]	; (8013394 <vTaskSwitchContext+0xa0>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d003      	beq.n	801330a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013302:	4b25      	ldr	r3, [pc, #148]	; (8013398 <vTaskSwitchContext+0xa4>)
 8013304:	2201      	movs	r2, #1
 8013306:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013308:	e03e      	b.n	8013388 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 801330a:	4b23      	ldr	r3, [pc, #140]	; (8013398 <vTaskSwitchContext+0xa4>)
 801330c:	2200      	movs	r2, #0
 801330e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013310:	4b22      	ldr	r3, [pc, #136]	; (801339c <vTaskSwitchContext+0xa8>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	fab3 f383 	clz	r3, r3
 801331c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801331e:	7afb      	ldrb	r3, [r7, #11]
 8013320:	f1c3 031f 	rsb	r3, r3, #31
 8013324:	617b      	str	r3, [r7, #20]
 8013326:	491e      	ldr	r1, [pc, #120]	; (80133a0 <vTaskSwitchContext+0xac>)
 8013328:	697a      	ldr	r2, [r7, #20]
 801332a:	4613      	mov	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	4413      	add	r3, r2
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	440b      	add	r3, r1
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d109      	bne.n	801334e <vTaskSwitchContext+0x5a>
	__asm volatile
 801333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333e:	f383 8811 	msr	BASEPRI, r3
 8013342:	f3bf 8f6f 	isb	sy
 8013346:	f3bf 8f4f 	dsb	sy
 801334a:	607b      	str	r3, [r7, #4]
 801334c:	e7fe      	b.n	801334c <vTaskSwitchContext+0x58>
 801334e:	697a      	ldr	r2, [r7, #20]
 8013350:	4613      	mov	r3, r2
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	4413      	add	r3, r2
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	4a11      	ldr	r2, [pc, #68]	; (80133a0 <vTaskSwitchContext+0xac>)
 801335a:	4413      	add	r3, r2
 801335c:	613b      	str	r3, [r7, #16]
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	685a      	ldr	r2, [r3, #4]
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	605a      	str	r2, [r3, #4]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	685a      	ldr	r2, [r3, #4]
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	3308      	adds	r3, #8
 8013370:	429a      	cmp	r2, r3
 8013372:	d104      	bne.n	801337e <vTaskSwitchContext+0x8a>
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	685a      	ldr	r2, [r3, #4]
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	605a      	str	r2, [r3, #4]
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	4a07      	ldr	r2, [pc, #28]	; (80133a4 <vTaskSwitchContext+0xb0>)
 8013386:	6013      	str	r3, [r2, #0]
}
 8013388:	bf00      	nop
 801338a:	371c      	adds	r7, #28
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr
 8013394:	24014a60 	.word	0x24014a60
 8013398:	24014a4c 	.word	0x24014a4c
 801339c:	24014a40 	.word	0x24014a40
 80133a0:	2401493c 	.word	0x2401493c
 80133a4:	24014938 	.word	0x24014938

080133a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d109      	bne.n	80133cc <vTaskPlaceOnEventList+0x24>
 80133b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133bc:	f383 8811 	msr	BASEPRI, r3
 80133c0:	f3bf 8f6f 	isb	sy
 80133c4:	f3bf 8f4f 	dsb	sy
 80133c8:	60fb      	str	r3, [r7, #12]
 80133ca:	e7fe      	b.n	80133ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133cc:	4b07      	ldr	r3, [pc, #28]	; (80133ec <vTaskPlaceOnEventList+0x44>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	3318      	adds	r3, #24
 80133d2:	4619      	mov	r1, r3
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7fe fb02 	bl	80119de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133da:	2101      	movs	r1, #1
 80133dc:	6838      	ldr	r0, [r7, #0]
 80133de:	f000 fd6f 	bl	8013ec0 <prvAddCurrentTaskToDelayedList>
}
 80133e2:	bf00      	nop
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}
 80133ea:	bf00      	nop
 80133ec:	24014938 	.word	0x24014938

080133f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b086      	sub	sp, #24
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	68db      	ldr	r3, [r3, #12]
 80133fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d109      	bne.n	801341a <xTaskRemoveFromEventList+0x2a>
 8013406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340a:	f383 8811 	msr	BASEPRI, r3
 801340e:	f3bf 8f6f 	isb	sy
 8013412:	f3bf 8f4f 	dsb	sy
 8013416:	60fb      	str	r3, [r7, #12]
 8013418:	e7fe      	b.n	8013418 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	3318      	adds	r3, #24
 801341e:	4618      	mov	r0, r3
 8013420:	f7fe fb16 	bl	8011a50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013424:	4b1d      	ldr	r3, [pc, #116]	; (801349c <xTaskRemoveFromEventList+0xac>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d11c      	bne.n	8013466 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	3304      	adds	r3, #4
 8013430:	4618      	mov	r0, r3
 8013432:	f7fe fb0d 	bl	8011a50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343a:	2201      	movs	r2, #1
 801343c:	409a      	lsls	r2, r3
 801343e:	4b18      	ldr	r3, [pc, #96]	; (80134a0 <xTaskRemoveFromEventList+0xb0>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	4313      	orrs	r3, r2
 8013444:	4a16      	ldr	r2, [pc, #88]	; (80134a0 <xTaskRemoveFromEventList+0xb0>)
 8013446:	6013      	str	r3, [r2, #0]
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801344c:	4613      	mov	r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	4413      	add	r3, r2
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	4a13      	ldr	r2, [pc, #76]	; (80134a4 <xTaskRemoveFromEventList+0xb4>)
 8013456:	441a      	add	r2, r3
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	3304      	adds	r3, #4
 801345c:	4619      	mov	r1, r3
 801345e:	4610      	mov	r0, r2
 8013460:	f7fe fa99 	bl	8011996 <vListInsertEnd>
 8013464:	e005      	b.n	8013472 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	3318      	adds	r3, #24
 801346a:	4619      	mov	r1, r3
 801346c:	480e      	ldr	r0, [pc, #56]	; (80134a8 <xTaskRemoveFromEventList+0xb8>)
 801346e:	f7fe fa92 	bl	8011996 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013476:	4b0d      	ldr	r3, [pc, #52]	; (80134ac <xTaskRemoveFromEventList+0xbc>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347c:	429a      	cmp	r2, r3
 801347e:	d905      	bls.n	801348c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013480:	2301      	movs	r3, #1
 8013482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013484:	4b0a      	ldr	r3, [pc, #40]	; (80134b0 <xTaskRemoveFromEventList+0xc0>)
 8013486:	2201      	movs	r2, #1
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	e001      	b.n	8013490 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801348c:	2300      	movs	r3, #0
 801348e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013490:	697b      	ldr	r3, [r7, #20]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3718      	adds	r7, #24
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	24014a60 	.word	0x24014a60
 80134a0:	24014a40 	.word	0x24014a40
 80134a4:	2401493c 	.word	0x2401493c
 80134a8:	240149f8 	.word	0x240149f8
 80134ac:	24014938 	.word	0x24014938
 80134b0:	24014a4c 	.word	0x24014a4c

080134b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134bc:	4b06      	ldr	r3, [pc, #24]	; (80134d8 <vTaskInternalSetTimeOutState+0x24>)
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134c4:	4b05      	ldr	r3, [pc, #20]	; (80134dc <vTaskInternalSetTimeOutState+0x28>)
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	605a      	str	r2, [r3, #4]
}
 80134cc:	bf00      	nop
 80134ce:	370c      	adds	r7, #12
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr
 80134d8:	24014a50 	.word	0x24014a50
 80134dc:	24014a3c 	.word	0x24014a3c

080134e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b088      	sub	sp, #32
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d109      	bne.n	8013504 <xTaskCheckForTimeOut+0x24>
 80134f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f4:	f383 8811 	msr	BASEPRI, r3
 80134f8:	f3bf 8f6f 	isb	sy
 80134fc:	f3bf 8f4f 	dsb	sy
 8013500:	613b      	str	r3, [r7, #16]
 8013502:	e7fe      	b.n	8013502 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d109      	bne.n	801351e <xTaskCheckForTimeOut+0x3e>
 801350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	60fb      	str	r3, [r7, #12]
 801351c:	e7fe      	b.n	801351c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801351e:	f000 fe5d 	bl	80141dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013522:	4b1d      	ldr	r3, [pc, #116]	; (8013598 <xTaskCheckForTimeOut+0xb8>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	69ba      	ldr	r2, [r7, #24]
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801353a:	d102      	bne.n	8013542 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801353c:	2300      	movs	r3, #0
 801353e:	61fb      	str	r3, [r7, #28]
 8013540:	e023      	b.n	801358a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	4b15      	ldr	r3, [pc, #84]	; (801359c <xTaskCheckForTimeOut+0xbc>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	429a      	cmp	r2, r3
 801354c:	d007      	beq.n	801355e <xTaskCheckForTimeOut+0x7e>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	69ba      	ldr	r2, [r7, #24]
 8013554:	429a      	cmp	r2, r3
 8013556:	d302      	bcc.n	801355e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013558:	2301      	movs	r3, #1
 801355a:	61fb      	str	r3, [r7, #28]
 801355c:	e015      	b.n	801358a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	697a      	ldr	r2, [r7, #20]
 8013564:	429a      	cmp	r2, r3
 8013566:	d20b      	bcs.n	8013580 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	1ad2      	subs	r2, r2, r3
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7ff ff9d 	bl	80134b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801357a:	2300      	movs	r3, #0
 801357c:	61fb      	str	r3, [r7, #28]
 801357e:	e004      	b.n	801358a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	2200      	movs	r2, #0
 8013584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013586:	2301      	movs	r3, #1
 8013588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801358a:	f000 fe55 	bl	8014238 <vPortExitCritical>

	return xReturn;
 801358e:	69fb      	ldr	r3, [r7, #28]
}
 8013590:	4618      	mov	r0, r3
 8013592:	3720      	adds	r7, #32
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	24014a3c 	.word	0x24014a3c
 801359c:	24014a50 	.word	0x24014a50

080135a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80135a0:	b480      	push	{r7}
 80135a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80135a4:	4b03      	ldr	r3, [pc, #12]	; (80135b4 <vTaskMissedYield+0x14>)
 80135a6:	2201      	movs	r2, #1
 80135a8:	601a      	str	r2, [r3, #0]
}
 80135aa:	bf00      	nop
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr
 80135b4:	24014a4c 	.word	0x24014a4c

080135b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80135c0:	f000 f852 	bl	8013668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80135c4:	4b06      	ldr	r3, [pc, #24]	; (80135e0 <prvIdleTask+0x28>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d9f9      	bls.n	80135c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80135cc:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <prvIdleTask+0x2c>)
 80135ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80135dc:	e7f0      	b.n	80135c0 <prvIdleTask+0x8>
 80135de:	bf00      	nop
 80135e0:	2401493c 	.word	0x2401493c
 80135e4:	e000ed04 	.word	0xe000ed04

080135e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135ee:	2300      	movs	r3, #0
 80135f0:	607b      	str	r3, [r7, #4]
 80135f2:	e00c      	b.n	801360e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	4613      	mov	r3, r2
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4413      	add	r3, r2
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	4a12      	ldr	r2, [pc, #72]	; (8013648 <prvInitialiseTaskLists+0x60>)
 8013600:	4413      	add	r3, r2
 8013602:	4618      	mov	r0, r3
 8013604:	f7fe f99a 	bl	801193c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	3301      	adds	r3, #1
 801360c:	607b      	str	r3, [r7, #4]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2b06      	cmp	r3, #6
 8013612:	d9ef      	bls.n	80135f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013614:	480d      	ldr	r0, [pc, #52]	; (801364c <prvInitialiseTaskLists+0x64>)
 8013616:	f7fe f991 	bl	801193c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801361a:	480d      	ldr	r0, [pc, #52]	; (8013650 <prvInitialiseTaskLists+0x68>)
 801361c:	f7fe f98e 	bl	801193c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013620:	480c      	ldr	r0, [pc, #48]	; (8013654 <prvInitialiseTaskLists+0x6c>)
 8013622:	f7fe f98b 	bl	801193c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013626:	480c      	ldr	r0, [pc, #48]	; (8013658 <prvInitialiseTaskLists+0x70>)
 8013628:	f7fe f988 	bl	801193c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801362c:	480b      	ldr	r0, [pc, #44]	; (801365c <prvInitialiseTaskLists+0x74>)
 801362e:	f7fe f985 	bl	801193c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013632:	4b0b      	ldr	r3, [pc, #44]	; (8013660 <prvInitialiseTaskLists+0x78>)
 8013634:	4a05      	ldr	r2, [pc, #20]	; (801364c <prvInitialiseTaskLists+0x64>)
 8013636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013638:	4b0a      	ldr	r3, [pc, #40]	; (8013664 <prvInitialiseTaskLists+0x7c>)
 801363a:	4a05      	ldr	r2, [pc, #20]	; (8013650 <prvInitialiseTaskLists+0x68>)
 801363c:	601a      	str	r2, [r3, #0]
}
 801363e:	bf00      	nop
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	2401493c 	.word	0x2401493c
 801364c:	240149c8 	.word	0x240149c8
 8013650:	240149dc 	.word	0x240149dc
 8013654:	240149f8 	.word	0x240149f8
 8013658:	24014a0c 	.word	0x24014a0c
 801365c:	24014a24 	.word	0x24014a24
 8013660:	240149f0 	.word	0x240149f0
 8013664:	240149f4 	.word	0x240149f4

08013668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801366e:	e019      	b.n	80136a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013670:	f000 fdb4 	bl	80141dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013674:	4b0f      	ldr	r3, [pc, #60]	; (80136b4 <prvCheckTasksWaitingTermination+0x4c>)
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	68db      	ldr	r3, [r3, #12]
 801367a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3304      	adds	r3, #4
 8013680:	4618      	mov	r0, r3
 8013682:	f7fe f9e5 	bl	8011a50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013686:	4b0c      	ldr	r3, [pc, #48]	; (80136b8 <prvCheckTasksWaitingTermination+0x50>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	3b01      	subs	r3, #1
 801368c:	4a0a      	ldr	r2, [pc, #40]	; (80136b8 <prvCheckTasksWaitingTermination+0x50>)
 801368e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013690:	4b0a      	ldr	r3, [pc, #40]	; (80136bc <prvCheckTasksWaitingTermination+0x54>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	3b01      	subs	r3, #1
 8013696:	4a09      	ldr	r2, [pc, #36]	; (80136bc <prvCheckTasksWaitingTermination+0x54>)
 8013698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801369a:	f000 fdcd 	bl	8014238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f000 f80e 	bl	80136c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136a4:	4b05      	ldr	r3, [pc, #20]	; (80136bc <prvCheckTasksWaitingTermination+0x54>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1e1      	bne.n	8013670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	24014a0c 	.word	0x24014a0c
 80136b8:	24014a38 	.word	0x24014a38
 80136bc:	24014a20 	.word	0x24014a20

080136c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b084      	sub	sp, #16
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d108      	bne.n	80136e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d6:	4618      	mov	r0, r3
 80136d8:	f000 ff5c 	bl	8014594 <vPortFree>
				vPortFree( pxTCB );
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 ff59 	bl	8014594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80136e2:	e017      	b.n	8013714 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d103      	bne.n	80136f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f000 ff50 	bl	8014594 <vPortFree>
	}
 80136f4:	e00e      	b.n	8013714 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136fc:	2b02      	cmp	r3, #2
 80136fe:	d009      	beq.n	8013714 <prvDeleteTCB+0x54>
 8013700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013704:	f383 8811 	msr	BASEPRI, r3
 8013708:	f3bf 8f6f 	isb	sy
 801370c:	f3bf 8f4f 	dsb	sy
 8013710:	60fb      	str	r3, [r7, #12]
 8013712:	e7fe      	b.n	8013712 <prvDeleteTCB+0x52>
	}
 8013714:	bf00      	nop
 8013716:	3710      	adds	r7, #16
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801371c:	b480      	push	{r7}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013722:	4b0c      	ldr	r3, [pc, #48]	; (8013754 <prvResetNextTaskUnblockTime+0x38>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d104      	bne.n	8013736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801372c:	4b0a      	ldr	r3, [pc, #40]	; (8013758 <prvResetNextTaskUnblockTime+0x3c>)
 801372e:	f04f 32ff 	mov.w	r2, #4294967295
 8013732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013734:	e008      	b.n	8013748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013736:	4b07      	ldr	r3, [pc, #28]	; (8013754 <prvResetNextTaskUnblockTime+0x38>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	68db      	ldr	r3, [r3, #12]
 801373e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	4a04      	ldr	r2, [pc, #16]	; (8013758 <prvResetNextTaskUnblockTime+0x3c>)
 8013746:	6013      	str	r3, [r2, #0]
}
 8013748:	bf00      	nop
 801374a:	370c      	adds	r7, #12
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr
 8013754:	240149f0 	.word	0x240149f0
 8013758:	24014a58 	.word	0x24014a58

0801375c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013762:	4b0b      	ldr	r3, [pc, #44]	; (8013790 <xTaskGetSchedulerState+0x34>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d102      	bne.n	8013770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801376a:	2301      	movs	r3, #1
 801376c:	607b      	str	r3, [r7, #4]
 801376e:	e008      	b.n	8013782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013770:	4b08      	ldr	r3, [pc, #32]	; (8013794 <xTaskGetSchedulerState+0x38>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d102      	bne.n	801377e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013778:	2302      	movs	r3, #2
 801377a:	607b      	str	r3, [r7, #4]
 801377c:	e001      	b.n	8013782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801377e:	2300      	movs	r3, #0
 8013780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013782:	687b      	ldr	r3, [r7, #4]
	}
 8013784:	4618      	mov	r0, r3
 8013786:	370c      	adds	r7, #12
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr
 8013790:	24014a44 	.word	0x24014a44
 8013794:	24014a60 	.word	0x24014a60

08013798 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80137a4:	2300      	movs	r3, #0
 80137a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d069      	beq.n	8013882 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b2:	4b36      	ldr	r3, [pc, #216]	; (801388c <xTaskPriorityInherit+0xf4>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d259      	bcs.n	8013870 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	699b      	ldr	r3, [r3, #24]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	db06      	blt.n	80137d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137c4:	4b31      	ldr	r3, [pc, #196]	; (801388c <xTaskPriorityInherit+0xf4>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ca:	f1c3 0207 	rsb	r2, r3, #7
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	6959      	ldr	r1, [r3, #20]
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137da:	4613      	mov	r3, r2
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	4413      	add	r3, r2
 80137e0:	009b      	lsls	r3, r3, #2
 80137e2:	4a2b      	ldr	r2, [pc, #172]	; (8013890 <xTaskPriorityInherit+0xf8>)
 80137e4:	4413      	add	r3, r2
 80137e6:	4299      	cmp	r1, r3
 80137e8:	d13a      	bne.n	8013860 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	3304      	adds	r3, #4
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fe f92e 	bl	8011a50 <uxListRemove>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d115      	bne.n	8013826 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fe:	4924      	ldr	r1, [pc, #144]	; (8013890 <xTaskPriorityInherit+0xf8>)
 8013800:	4613      	mov	r3, r2
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	4413      	add	r3, r2
 8013806:	009b      	lsls	r3, r3, #2
 8013808:	440b      	add	r3, r1
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d10a      	bne.n	8013826 <xTaskPriorityInherit+0x8e>
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013814:	2201      	movs	r2, #1
 8013816:	fa02 f303 	lsl.w	r3, r2, r3
 801381a:	43da      	mvns	r2, r3
 801381c:	4b1d      	ldr	r3, [pc, #116]	; (8013894 <xTaskPriorityInherit+0xfc>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4013      	ands	r3, r2
 8013822:	4a1c      	ldr	r2, [pc, #112]	; (8013894 <xTaskPriorityInherit+0xfc>)
 8013824:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013826:	4b19      	ldr	r3, [pc, #100]	; (801388c <xTaskPriorityInherit+0xf4>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013834:	2201      	movs	r2, #1
 8013836:	409a      	lsls	r2, r3
 8013838:	4b16      	ldr	r3, [pc, #88]	; (8013894 <xTaskPriorityInherit+0xfc>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4313      	orrs	r3, r2
 801383e:	4a15      	ldr	r2, [pc, #84]	; (8013894 <xTaskPriorityInherit+0xfc>)
 8013840:	6013      	str	r3, [r2, #0]
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013846:	4613      	mov	r3, r2
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	4413      	add	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4a10      	ldr	r2, [pc, #64]	; (8013890 <xTaskPriorityInherit+0xf8>)
 8013850:	441a      	add	r2, r3
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	3304      	adds	r3, #4
 8013856:	4619      	mov	r1, r3
 8013858:	4610      	mov	r0, r2
 801385a:	f7fe f89c 	bl	8011996 <vListInsertEnd>
 801385e:	e004      	b.n	801386a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013860:	4b0a      	ldr	r3, [pc, #40]	; (801388c <xTaskPriorityInherit+0xf4>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801386a:	2301      	movs	r3, #1
 801386c:	60fb      	str	r3, [r7, #12]
 801386e:	e008      	b.n	8013882 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013874:	4b05      	ldr	r3, [pc, #20]	; (801388c <xTaskPriorityInherit+0xf4>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801387a:	429a      	cmp	r2, r3
 801387c:	d201      	bcs.n	8013882 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801387e:	2301      	movs	r3, #1
 8013880:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013882:	68fb      	ldr	r3, [r7, #12]
	}
 8013884:	4618      	mov	r0, r3
 8013886:	3710      	adds	r7, #16
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	24014938 	.word	0x24014938
 8013890:	2401493c 	.word	0x2401493c
 8013894:	24014a40 	.word	0x24014a40

08013898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80138a4:	2300      	movs	r3, #0
 80138a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d06c      	beq.n	8013988 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80138ae:	4b39      	ldr	r3, [pc, #228]	; (8013994 <xTaskPriorityDisinherit+0xfc>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	693a      	ldr	r2, [r7, #16]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d009      	beq.n	80138cc <xTaskPriorityDisinherit+0x34>
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	e7fe      	b.n	80138ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d109      	bne.n	80138e8 <xTaskPriorityDisinherit+0x50>
 80138d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d8:	f383 8811 	msr	BASEPRI, r3
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	60bb      	str	r3, [r7, #8]
 80138e6:	e7fe      	b.n	80138e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138ec:	1e5a      	subs	r2, r3, #1
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d044      	beq.n	8013988 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013902:	2b00      	cmp	r3, #0
 8013904:	d140      	bne.n	8013988 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	3304      	adds	r3, #4
 801390a:	4618      	mov	r0, r3
 801390c:	f7fe f8a0 	bl	8011a50 <uxListRemove>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d115      	bne.n	8013942 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801391a:	491f      	ldr	r1, [pc, #124]	; (8013998 <xTaskPriorityDisinherit+0x100>)
 801391c:	4613      	mov	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4413      	add	r3, r2
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	440b      	add	r3, r1
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10a      	bne.n	8013942 <xTaskPriorityDisinherit+0xaa>
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013930:	2201      	movs	r2, #1
 8013932:	fa02 f303 	lsl.w	r3, r2, r3
 8013936:	43da      	mvns	r2, r3
 8013938:	4b18      	ldr	r3, [pc, #96]	; (801399c <xTaskPriorityDisinherit+0x104>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4013      	ands	r3, r2
 801393e:	4a17      	ldr	r2, [pc, #92]	; (801399c <xTaskPriorityDisinherit+0x104>)
 8013940:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394e:	f1c3 0207 	rsb	r2, r3, #7
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801395a:	2201      	movs	r2, #1
 801395c:	409a      	lsls	r2, r3
 801395e:	4b0f      	ldr	r3, [pc, #60]	; (801399c <xTaskPriorityDisinherit+0x104>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	4313      	orrs	r3, r2
 8013964:	4a0d      	ldr	r2, [pc, #52]	; (801399c <xTaskPriorityDisinherit+0x104>)
 8013966:	6013      	str	r3, [r2, #0]
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801396c:	4613      	mov	r3, r2
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	009b      	lsls	r3, r3, #2
 8013974:	4a08      	ldr	r2, [pc, #32]	; (8013998 <xTaskPriorityDisinherit+0x100>)
 8013976:	441a      	add	r2, r3
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	3304      	adds	r3, #4
 801397c:	4619      	mov	r1, r3
 801397e:	4610      	mov	r0, r2
 8013980:	f7fe f809 	bl	8011996 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013984:	2301      	movs	r3, #1
 8013986:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013988:	697b      	ldr	r3, [r7, #20]
	}
 801398a:	4618      	mov	r0, r3
 801398c:	3718      	adds	r7, #24
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	24014938 	.word	0x24014938
 8013998:	2401493c 	.word	0x2401493c
 801399c:	24014a40 	.word	0x24014a40

080139a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b088      	sub	sp, #32
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80139ae:	2301      	movs	r3, #1
 80139b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f000 8081 	beq.w	8013abc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80139ba:	69bb      	ldr	r3, [r7, #24]
 80139bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d109      	bne.n	80139d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80139c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c6:	f383 8811 	msr	BASEPRI, r3
 80139ca:	f3bf 8f6f 	isb	sy
 80139ce:	f3bf 8f4f 	dsb	sy
 80139d2:	60fb      	str	r3, [r7, #12]
 80139d4:	e7fe      	b.n	80139d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	429a      	cmp	r2, r3
 80139de:	d902      	bls.n	80139e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	61fb      	str	r3, [r7, #28]
 80139e4:	e002      	b.n	80139ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80139e6:	69bb      	ldr	r3, [r7, #24]
 80139e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f0:	69fa      	ldr	r2, [r7, #28]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d062      	beq.n	8013abc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80139fa:	697a      	ldr	r2, [r7, #20]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d15d      	bne.n	8013abc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013a00:	4b30      	ldr	r3, [pc, #192]	; (8013ac4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	69ba      	ldr	r2, [r7, #24]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d109      	bne.n	8013a1e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8013a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0e:	f383 8811 	msr	BASEPRI, r3
 8013a12:	f3bf 8f6f 	isb	sy
 8013a16:	f3bf 8f4f 	dsb	sy
 8013a1a:	60bb      	str	r3, [r7, #8]
 8013a1c:	e7fe      	b.n	8013a1c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a22:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013a24:	69bb      	ldr	r3, [r7, #24]
 8013a26:	69fa      	ldr	r2, [r7, #28]
 8013a28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	699b      	ldr	r3, [r3, #24]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	db04      	blt.n	8013a3c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	f1c3 0207 	rsb	r2, r3, #7
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	6959      	ldr	r1, [r3, #20]
 8013a40:	693a      	ldr	r2, [r7, #16]
 8013a42:	4613      	mov	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	4413      	add	r3, r2
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	4a1f      	ldr	r2, [pc, #124]	; (8013ac8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013a4c:	4413      	add	r3, r2
 8013a4e:	4299      	cmp	r1, r3
 8013a50:	d134      	bne.n	8013abc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	3304      	adds	r3, #4
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7fd fffa 	bl	8011a50 <uxListRemove>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d115      	bne.n	8013a8e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a66:	4918      	ldr	r1, [pc, #96]	; (8013ac8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013a68:	4613      	mov	r3, r2
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	4413      	add	r3, r2
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	440b      	add	r3, r1
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10a      	bne.n	8013a8e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8013a82:	43da      	mvns	r2, r3
 8013a84:	4b11      	ldr	r3, [pc, #68]	; (8013acc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	4013      	ands	r3, r2
 8013a8a:	4a10      	ldr	r2, [pc, #64]	; (8013acc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a92:	2201      	movs	r2, #1
 8013a94:	409a      	lsls	r2, r3
 8013a96:	4b0d      	ldr	r3, [pc, #52]	; (8013acc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	4a0b      	ldr	r2, [pc, #44]	; (8013acc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013a9e:	6013      	str	r3, [r2, #0]
 8013aa0:	69bb      	ldr	r3, [r7, #24]
 8013aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa4:	4613      	mov	r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	4413      	add	r3, r2
 8013aaa:	009b      	lsls	r3, r3, #2
 8013aac:	4a06      	ldr	r2, [pc, #24]	; (8013ac8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013aae:	441a      	add	r2, r3
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	3304      	adds	r3, #4
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	4610      	mov	r0, r2
 8013ab8:	f7fd ff6d 	bl	8011996 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013abc:	bf00      	nop
 8013abe:	3720      	adds	r7, #32
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	24014938 	.word	0x24014938
 8013ac8:	2401493c 	.word	0x2401493c
 8013acc:	24014a40 	.word	0x24014a40

08013ad0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013ad0:	b480      	push	{r7}
 8013ad2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013ad4:	4b07      	ldr	r3, [pc, #28]	; (8013af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d004      	beq.n	8013ae6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013adc:	4b05      	ldr	r3, [pc, #20]	; (8013af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013ae2:	3201      	adds	r2, #1
 8013ae4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013ae6:	4b03      	ldr	r3, [pc, #12]	; (8013af4 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
	}
 8013aea:	4618      	mov	r0, r3
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr
 8013af4:	24014938 	.word	0x24014938

08013af8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b086      	sub	sp, #24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]
 8013b04:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013b06:	f000 fb69 	bl	80141dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013b0a:	4b26      	ldr	r3, [pc, #152]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	d01a      	beq.n	8013b4e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013b18:	4b22      	ldr	r3, [pc, #136]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013b1e:	68fa      	ldr	r2, [r7, #12]
 8013b20:	43d2      	mvns	r2, r2
 8013b22:	400a      	ands	r2, r1
 8013b24:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013b26:	4b1f      	ldr	r3, [pc, #124]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d00b      	beq.n	8013b4e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013b36:	2101      	movs	r1, #1
 8013b38:	6838      	ldr	r0, [r7, #0]
 8013b3a:	f000 f9c1 	bl	8013ec0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013b3e:	4b1a      	ldr	r3, [pc, #104]	; (8013ba8 <xTaskNotifyWait+0xb0>)
 8013b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013b4e:	f000 fb73 	bl	8014238 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013b52:	f000 fb43 	bl	80141dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d004      	beq.n	8013b66 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8013b5c:	4b11      	ldr	r3, [pc, #68]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013b66:	4b0f      	ldr	r3, [pc, #60]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013b6e:	b2db      	uxtb	r3, r3
 8013b70:	2b02      	cmp	r3, #2
 8013b72:	d002      	beq.n	8013b7a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013b74:	2300      	movs	r3, #0
 8013b76:	617b      	str	r3, [r7, #20]
 8013b78:	e008      	b.n	8013b8c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8013b7a:	4b0a      	ldr	r3, [pc, #40]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013b80:	68ba      	ldr	r2, [r7, #8]
 8013b82:	43d2      	mvns	r2, r2
 8013b84:	400a      	ands	r2, r1
 8013b86:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b8c:	4b05      	ldr	r3, [pc, #20]	; (8013ba4 <xTaskNotifyWait+0xac>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2200      	movs	r2, #0
 8013b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013b96:	f000 fb4f 	bl	8014238 <vPortExitCritical>

		return xReturn;
 8013b9a:	697b      	ldr	r3, [r7, #20]
	}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3718      	adds	r7, #24
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	24014938 	.word	0x24014938
 8013ba8:	e000ed04 	.word	0xe000ed04

08013bac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b08a      	sub	sp, #40	; 0x28
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	603b      	str	r3, [r7, #0]
 8013bb8:	4613      	mov	r3, r2
 8013bba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d109      	bne.n	8013bda <xTaskGenericNotify+0x2e>
 8013bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bca:	f383 8811 	msr	BASEPRI, r3
 8013bce:	f3bf 8f6f 	isb	sy
 8013bd2:	f3bf 8f4f 	dsb	sy
 8013bd6:	61bb      	str	r3, [r7, #24]
 8013bd8:	e7fe      	b.n	8013bd8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013bde:	f000 fafd 	bl	80141dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d003      	beq.n	8013bf0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013be8:	6a3b      	ldr	r3, [r7, #32]
 8013bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013bf0:	6a3b      	ldr	r3, [r7, #32]
 8013bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013bf6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013bf8:	6a3b      	ldr	r3, [r7, #32]
 8013bfa:	2202      	movs	r2, #2
 8013bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013c00:	79fb      	ldrb	r3, [r7, #7]
 8013c02:	2b04      	cmp	r3, #4
 8013c04:	d827      	bhi.n	8013c56 <xTaskGenericNotify+0xaa>
 8013c06:	a201      	add	r2, pc, #4	; (adr r2, 8013c0c <xTaskGenericNotify+0x60>)
 8013c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c0c:	08013c75 	.word	0x08013c75
 8013c10:	08013c21 	.word	0x08013c21
 8013c14:	08013c2f 	.word	0x08013c2f
 8013c18:	08013c3b 	.word	0x08013c3b
 8013c1c:	08013c43 	.word	0x08013c43
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013c20:	6a3b      	ldr	r3, [r7, #32]
 8013c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	431a      	orrs	r2, r3
 8013c28:	6a3b      	ldr	r3, [r7, #32]
 8013c2a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013c2c:	e025      	b.n	8013c7a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013c2e:	6a3b      	ldr	r3, [r7, #32]
 8013c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c32:	1c5a      	adds	r2, r3, #1
 8013c34:	6a3b      	ldr	r3, [r7, #32]
 8013c36:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013c38:	e01f      	b.n	8013c7a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013c3a:	6a3b      	ldr	r3, [r7, #32]
 8013c3c:	68ba      	ldr	r2, [r7, #8]
 8013c3e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013c40:	e01b      	b.n	8013c7a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013c42:	7ffb      	ldrb	r3, [r7, #31]
 8013c44:	2b02      	cmp	r3, #2
 8013c46:	d003      	beq.n	8013c50 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013c48:	6a3b      	ldr	r3, [r7, #32]
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013c4e:	e014      	b.n	8013c7a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8013c50:	2300      	movs	r3, #0
 8013c52:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013c54:	e011      	b.n	8013c7a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c5e:	d00b      	beq.n	8013c78 <xTaskGenericNotify+0xcc>
 8013c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c64:	f383 8811 	msr	BASEPRI, r3
 8013c68:	f3bf 8f6f 	isb	sy
 8013c6c:	f3bf 8f4f 	dsb	sy
 8013c70:	617b      	str	r3, [r7, #20]
 8013c72:	e7fe      	b.n	8013c72 <xTaskGenericNotify+0xc6>
					break;
 8013c74:	bf00      	nop
 8013c76:	e000      	b.n	8013c7a <xTaskGenericNotify+0xce>

					break;
 8013c78:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013c7a:	7ffb      	ldrb	r3, [r7, #31]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d138      	bne.n	8013cf2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c80:	6a3b      	ldr	r3, [r7, #32]
 8013c82:	3304      	adds	r3, #4
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fd fee3 	bl	8011a50 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8013c8a:	6a3b      	ldr	r3, [r7, #32]
 8013c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c8e:	2201      	movs	r2, #1
 8013c90:	409a      	lsls	r2, r3
 8013c92:	4b1b      	ldr	r3, [pc, #108]	; (8013d00 <xTaskGenericNotify+0x154>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4313      	orrs	r3, r2
 8013c98:	4a19      	ldr	r2, [pc, #100]	; (8013d00 <xTaskGenericNotify+0x154>)
 8013c9a:	6013      	str	r3, [r2, #0]
 8013c9c:	6a3b      	ldr	r3, [r7, #32]
 8013c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	009b      	lsls	r3, r3, #2
 8013ca4:	4413      	add	r3, r2
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4a16      	ldr	r2, [pc, #88]	; (8013d04 <xTaskGenericNotify+0x158>)
 8013caa:	441a      	add	r2, r3
 8013cac:	6a3b      	ldr	r3, [r7, #32]
 8013cae:	3304      	adds	r3, #4
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	4610      	mov	r0, r2
 8013cb4:	f7fd fe6f 	bl	8011996 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013cb8:	6a3b      	ldr	r3, [r7, #32]
 8013cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d009      	beq.n	8013cd4 <xTaskGenericNotify+0x128>
 8013cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc4:	f383 8811 	msr	BASEPRI, r3
 8013cc8:	f3bf 8f6f 	isb	sy
 8013ccc:	f3bf 8f4f 	dsb	sy
 8013cd0:	613b      	str	r3, [r7, #16]
 8013cd2:	e7fe      	b.n	8013cd2 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013cd4:	6a3b      	ldr	r3, [r7, #32]
 8013cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cd8:	4b0b      	ldr	r3, [pc, #44]	; (8013d08 <xTaskGenericNotify+0x15c>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d907      	bls.n	8013cf2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013ce2:	4b0a      	ldr	r3, [pc, #40]	; (8013d0c <xTaskGenericNotify+0x160>)
 8013ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ce8:	601a      	str	r2, [r3, #0]
 8013cea:	f3bf 8f4f 	dsb	sy
 8013cee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013cf2:	f000 faa1 	bl	8014238 <vPortExitCritical>

		return xReturn;
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3728      	adds	r7, #40	; 0x28
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	24014a40 	.word	0x24014a40
 8013d04:	2401493c 	.word	0x2401493c
 8013d08:	24014938 	.word	0x24014938
 8013d0c:	e000ed04 	.word	0xe000ed04

08013d10 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b08e      	sub	sp, #56	; 0x38
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	603b      	str	r3, [r7, #0]
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013d20:	2301      	movs	r3, #1
 8013d22:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d109      	bne.n	8013d3e <xTaskGenericNotifyFromISR+0x2e>
 8013d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2e:	f383 8811 	msr	BASEPRI, r3
 8013d32:	f3bf 8f6f 	isb	sy
 8013d36:	f3bf 8f4f 	dsb	sy
 8013d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8013d3c:	e7fe      	b.n	8013d3c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d3e:	f000 fb29 	bl	8014394 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013d46:	f3ef 8211 	mrs	r2, BASEPRI
 8013d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4e:	f383 8811 	msr	BASEPRI, r3
 8013d52:	f3bf 8f6f 	isb	sy
 8013d56:	f3bf 8f4f 	dsb	sy
 8013d5a:	623a      	str	r2, [r7, #32]
 8013d5c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013d5e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d60:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d003      	beq.n	8013d70 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7c:	2202      	movs	r2, #2
 8013d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013d82:	79fb      	ldrb	r3, [r7, #7]
 8013d84:	2b04      	cmp	r3, #4
 8013d86:	d829      	bhi.n	8013ddc <xTaskGenericNotifyFromISR+0xcc>
 8013d88:	a201      	add	r2, pc, #4	; (adr r2, 8013d90 <xTaskGenericNotifyFromISR+0x80>)
 8013d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d8e:	bf00      	nop
 8013d90:	08013dfb 	.word	0x08013dfb
 8013d94:	08013da5 	.word	0x08013da5
 8013d98:	08013db3 	.word	0x08013db3
 8013d9c:	08013dbf 	.word	0x08013dbf
 8013da0:	08013dc7 	.word	0x08013dc7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	431a      	orrs	r2, r3
 8013dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013db0:	e026      	b.n	8013e00 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013db6:	1c5a      	adds	r2, r3, #1
 8013db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013dbc:	e020      	b.n	8013e00 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013dc4:	e01c      	b.n	8013e00 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d003      	beq.n	8013dd6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd0:	68ba      	ldr	r2, [r7, #8]
 8013dd2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013dd4:	e014      	b.n	8013e00 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013dda:	e011      	b.n	8013e00 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013de4:	d00b      	beq.n	8013dfe <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8013de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dea:	f383 8811 	msr	BASEPRI, r3
 8013dee:	f3bf 8f6f 	isb	sy
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	61bb      	str	r3, [r7, #24]
 8013df8:	e7fe      	b.n	8013df8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8013dfa:	bf00      	nop
 8013dfc:	e000      	b.n	8013e00 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8013dfe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d144      	bne.n	8013e92 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d009      	beq.n	8013e24 <xTaskGenericNotifyFromISR+0x114>
 8013e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e14:	f383 8811 	msr	BASEPRI, r3
 8013e18:	f3bf 8f6f 	isb	sy
 8013e1c:	f3bf 8f4f 	dsb	sy
 8013e20:	617b      	str	r3, [r7, #20]
 8013e22:	e7fe      	b.n	8013e22 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e24:	4b20      	ldr	r3, [pc, #128]	; (8013ea8 <xTaskGenericNotifyFromISR+0x198>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d11c      	bne.n	8013e66 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2e:	3304      	adds	r3, #4
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fd fe0d 	bl	8011a50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	409a      	lsls	r2, r3
 8013e3e:	4b1b      	ldr	r3, [pc, #108]	; (8013eac <xTaskGenericNotifyFromISR+0x19c>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4313      	orrs	r3, r2
 8013e44:	4a19      	ldr	r2, [pc, #100]	; (8013eac <xTaskGenericNotifyFromISR+0x19c>)
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4413      	add	r3, r2
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	4a16      	ldr	r2, [pc, #88]	; (8013eb0 <xTaskGenericNotifyFromISR+0x1a0>)
 8013e56:	441a      	add	r2, r3
 8013e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5a:	3304      	adds	r3, #4
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	4610      	mov	r0, r2
 8013e60:	f7fd fd99 	bl	8011996 <vListInsertEnd>
 8013e64:	e005      	b.n	8013e72 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	3318      	adds	r3, #24
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	4811      	ldr	r0, [pc, #68]	; (8013eb4 <xTaskGenericNotifyFromISR+0x1a4>)
 8013e6e:	f7fd fd92 	bl	8011996 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e76:	4b10      	ldr	r3, [pc, #64]	; (8013eb8 <xTaskGenericNotifyFromISR+0x1a8>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d908      	bls.n	8013e92 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d002      	beq.n	8013e8c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e88:	2201      	movs	r2, #1
 8013e8a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8013e8c:	4b0b      	ldr	r3, [pc, #44]	; (8013ebc <xTaskGenericNotifyFromISR+0x1ac>)
 8013e8e:	2201      	movs	r2, #1
 8013e90:	601a      	str	r2, [r3, #0]
 8013e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3738      	adds	r7, #56	; 0x38
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	24014a60 	.word	0x24014a60
 8013eac:	24014a40 	.word	0x24014a40
 8013eb0:	2401493c 	.word	0x2401493c
 8013eb4:	240149f8 	.word	0x240149f8
 8013eb8:	24014938 	.word	0x24014938
 8013ebc:	24014a4c 	.word	0x24014a4c

08013ec0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013eca:	4b29      	ldr	r3, [pc, #164]	; (8013f70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ed0:	4b28      	ldr	r3, [pc, #160]	; (8013f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	3304      	adds	r3, #4
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fd fdba 	bl	8011a50 <uxListRemove>
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d10b      	bne.n	8013efa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013ee2:	4b24      	ldr	r3, [pc, #144]	; (8013f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee8:	2201      	movs	r2, #1
 8013eea:	fa02 f303 	lsl.w	r3, r2, r3
 8013eee:	43da      	mvns	r2, r3
 8013ef0:	4b21      	ldr	r3, [pc, #132]	; (8013f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4013      	ands	r3, r2
 8013ef6:	4a20      	ldr	r2, [pc, #128]	; (8013f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013ef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f00:	d10a      	bne.n	8013f18 <prvAddCurrentTaskToDelayedList+0x58>
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d007      	beq.n	8013f18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013f08:	4b1a      	ldr	r3, [pc, #104]	; (8013f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	3304      	adds	r3, #4
 8013f0e:	4619      	mov	r1, r3
 8013f10:	481a      	ldr	r0, [pc, #104]	; (8013f7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8013f12:	f7fd fd40 	bl	8011996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013f16:	e026      	b.n	8013f66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	4413      	add	r3, r2
 8013f1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013f20:	4b14      	ldr	r3, [pc, #80]	; (8013f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	68ba      	ldr	r2, [r7, #8]
 8013f26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013f28:	68ba      	ldr	r2, [r7, #8]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d209      	bcs.n	8013f44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013f30:	4b13      	ldr	r3, [pc, #76]	; (8013f80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	4b0f      	ldr	r3, [pc, #60]	; (8013f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	3304      	adds	r3, #4
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f7fd fd4e 	bl	80119de <vListInsert>
}
 8013f42:	e010      	b.n	8013f66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013f44:	4b0f      	ldr	r3, [pc, #60]	; (8013f84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013f46:	681a      	ldr	r2, [r3, #0]
 8013f48:	4b0a      	ldr	r3, [pc, #40]	; (8013f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3304      	adds	r3, #4
 8013f4e:	4619      	mov	r1, r3
 8013f50:	4610      	mov	r0, r2
 8013f52:	f7fd fd44 	bl	80119de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013f56:	4b0c      	ldr	r3, [pc, #48]	; (8013f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	68ba      	ldr	r2, [r7, #8]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d202      	bcs.n	8013f66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013f60:	4a09      	ldr	r2, [pc, #36]	; (8013f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	6013      	str	r3, [r2, #0]
}
 8013f66:	bf00      	nop
 8013f68:	3710      	adds	r7, #16
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	24014a3c 	.word	0x24014a3c
 8013f74:	24014938 	.word	0x24014938
 8013f78:	24014a40 	.word	0x24014a40
 8013f7c:	24014a24 	.word	0x24014a24
 8013f80:	240149f4 	.word	0x240149f4
 8013f84:	240149f0 	.word	0x240149f0
 8013f88:	24014a58 	.word	0x24014a58

08013f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b085      	sub	sp, #20
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	3b04      	subs	r3, #4
 8013f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	3b04      	subs	r3, #4
 8013faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	f023 0201 	bic.w	r2, r3, #1
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	3b04      	subs	r3, #4
 8013fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013fbc:	4a0c      	ldr	r2, [pc, #48]	; (8013ff0 <pxPortInitialiseStack+0x64>)
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	3b14      	subs	r3, #20
 8013fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	3b04      	subs	r3, #4
 8013fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	f06f 0202 	mvn.w	r2, #2
 8013fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	3b20      	subs	r3, #32
 8013fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3714      	adds	r7, #20
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fee:	4770      	bx	lr
 8013ff0:	08013ff5 	.word	0x08013ff5

08013ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013ffe:	4b11      	ldr	r3, [pc, #68]	; (8014044 <prvTaskExitError+0x50>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014006:	d009      	beq.n	801401c <prvTaskExitError+0x28>
	__asm volatile
 8014008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801400c:	f383 8811 	msr	BASEPRI, r3
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	60fb      	str	r3, [r7, #12]
 801401a:	e7fe      	b.n	801401a <prvTaskExitError+0x26>
 801401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014020:	f383 8811 	msr	BASEPRI, r3
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	f3bf 8f4f 	dsb	sy
 801402c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801402e:	bf00      	nop
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d0fc      	beq.n	8014030 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014036:	bf00      	nop
 8014038:	3714      	adds	r7, #20
 801403a:	46bd      	mov	sp, r7
 801403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014040:	4770      	bx	lr
 8014042:	bf00      	nop
 8014044:	24000010 	.word	0x24000010
	...

08014050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014050:	4b07      	ldr	r3, [pc, #28]	; (8014070 <pxCurrentTCBConst2>)
 8014052:	6819      	ldr	r1, [r3, #0]
 8014054:	6808      	ldr	r0, [r1, #0]
 8014056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405a:	f380 8809 	msr	PSP, r0
 801405e:	f3bf 8f6f 	isb	sy
 8014062:	f04f 0000 	mov.w	r0, #0
 8014066:	f380 8811 	msr	BASEPRI, r0
 801406a:	4770      	bx	lr
 801406c:	f3af 8000 	nop.w

08014070 <pxCurrentTCBConst2>:
 8014070:	24014938 	.word	0x24014938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014074:	bf00      	nop
 8014076:	bf00      	nop

08014078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014078:	4808      	ldr	r0, [pc, #32]	; (801409c <prvPortStartFirstTask+0x24>)
 801407a:	6800      	ldr	r0, [r0, #0]
 801407c:	6800      	ldr	r0, [r0, #0]
 801407e:	f380 8808 	msr	MSP, r0
 8014082:	f04f 0000 	mov.w	r0, #0
 8014086:	f380 8814 	msr	CONTROL, r0
 801408a:	b662      	cpsie	i
 801408c:	b661      	cpsie	f
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	df00      	svc	0
 8014098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801409a:	bf00      	nop
 801409c:	e000ed08 	.word	0xe000ed08

080140a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b086      	sub	sp, #24
 80140a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80140a6:	4b44      	ldr	r3, [pc, #272]	; (80141b8 <xPortStartScheduler+0x118>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	4a44      	ldr	r2, [pc, #272]	; (80141bc <xPortStartScheduler+0x11c>)
 80140ac:	4293      	cmp	r3, r2
 80140ae:	d109      	bne.n	80140c4 <xPortStartScheduler+0x24>
 80140b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b4:	f383 8811 	msr	BASEPRI, r3
 80140b8:	f3bf 8f6f 	isb	sy
 80140bc:	f3bf 8f4f 	dsb	sy
 80140c0:	613b      	str	r3, [r7, #16]
 80140c2:	e7fe      	b.n	80140c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80140c4:	4b3c      	ldr	r3, [pc, #240]	; (80141b8 <xPortStartScheduler+0x118>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	4a3d      	ldr	r2, [pc, #244]	; (80141c0 <xPortStartScheduler+0x120>)
 80140ca:	4293      	cmp	r3, r2
 80140cc:	d109      	bne.n	80140e2 <xPortStartScheduler+0x42>
 80140ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d2:	f383 8811 	msr	BASEPRI, r3
 80140d6:	f3bf 8f6f 	isb	sy
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	60fb      	str	r3, [r7, #12]
 80140e0:	e7fe      	b.n	80140e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80140e2:	4b38      	ldr	r3, [pc, #224]	; (80141c4 <xPortStartScheduler+0x124>)
 80140e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	22ff      	movs	r2, #255	; 0xff
 80140f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	b2db      	uxtb	r3, r3
 80140fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80140fc:	78fb      	ldrb	r3, [r7, #3]
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014104:	b2da      	uxtb	r2, r3
 8014106:	4b30      	ldr	r3, [pc, #192]	; (80141c8 <xPortStartScheduler+0x128>)
 8014108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801410a:	4b30      	ldr	r3, [pc, #192]	; (80141cc <xPortStartScheduler+0x12c>)
 801410c:	2207      	movs	r2, #7
 801410e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014110:	e009      	b.n	8014126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014112:	4b2e      	ldr	r3, [pc, #184]	; (80141cc <xPortStartScheduler+0x12c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	3b01      	subs	r3, #1
 8014118:	4a2c      	ldr	r2, [pc, #176]	; (80141cc <xPortStartScheduler+0x12c>)
 801411a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801411c:	78fb      	ldrb	r3, [r7, #3]
 801411e:	b2db      	uxtb	r3, r3
 8014120:	005b      	lsls	r3, r3, #1
 8014122:	b2db      	uxtb	r3, r3
 8014124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014126:	78fb      	ldrb	r3, [r7, #3]
 8014128:	b2db      	uxtb	r3, r3
 801412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801412e:	2b80      	cmp	r3, #128	; 0x80
 8014130:	d0ef      	beq.n	8014112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014132:	4b26      	ldr	r3, [pc, #152]	; (80141cc <xPortStartScheduler+0x12c>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f1c3 0307 	rsb	r3, r3, #7
 801413a:	2b04      	cmp	r3, #4
 801413c:	d009      	beq.n	8014152 <xPortStartScheduler+0xb2>
 801413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014142:	f383 8811 	msr	BASEPRI, r3
 8014146:	f3bf 8f6f 	isb	sy
 801414a:	f3bf 8f4f 	dsb	sy
 801414e:	60bb      	str	r3, [r7, #8]
 8014150:	e7fe      	b.n	8014150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014152:	4b1e      	ldr	r3, [pc, #120]	; (80141cc <xPortStartScheduler+0x12c>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	021b      	lsls	r3, r3, #8
 8014158:	4a1c      	ldr	r2, [pc, #112]	; (80141cc <xPortStartScheduler+0x12c>)
 801415a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801415c:	4b1b      	ldr	r3, [pc, #108]	; (80141cc <xPortStartScheduler+0x12c>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014164:	4a19      	ldr	r2, [pc, #100]	; (80141cc <xPortStartScheduler+0x12c>)
 8014166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	b2da      	uxtb	r2, r3
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014170:	4b17      	ldr	r3, [pc, #92]	; (80141d0 <xPortStartScheduler+0x130>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	4a16      	ldr	r2, [pc, #88]	; (80141d0 <xPortStartScheduler+0x130>)
 8014176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801417a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801417c:	4b14      	ldr	r3, [pc, #80]	; (80141d0 <xPortStartScheduler+0x130>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	4a13      	ldr	r2, [pc, #76]	; (80141d0 <xPortStartScheduler+0x130>)
 8014182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014188:	f000 f8d6 	bl	8014338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801418c:	4b11      	ldr	r3, [pc, #68]	; (80141d4 <xPortStartScheduler+0x134>)
 801418e:	2200      	movs	r2, #0
 8014190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014192:	f000 f8f5 	bl	8014380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014196:	4b10      	ldr	r3, [pc, #64]	; (80141d8 <xPortStartScheduler+0x138>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4a0f      	ldr	r2, [pc, #60]	; (80141d8 <xPortStartScheduler+0x138>)
 801419c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80141a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80141a2:	f7ff ff69 	bl	8014078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80141a6:	f7ff f8a5 	bl	80132f4 <vTaskSwitchContext>
	prvTaskExitError();
 80141aa:	f7ff ff23 	bl	8013ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80141ae:	2300      	movs	r3, #0
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3718      	adds	r7, #24
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	e000ed00 	.word	0xe000ed00
 80141bc:	410fc271 	.word	0x410fc271
 80141c0:	410fc270 	.word	0x410fc270
 80141c4:	e000e400 	.word	0xe000e400
 80141c8:	24014a64 	.word	0x24014a64
 80141cc:	24014a68 	.word	0x24014a68
 80141d0:	e000ed20 	.word	0xe000ed20
 80141d4:	24000010 	.word	0x24000010
 80141d8:	e000ef34 	.word	0xe000ef34

080141dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80141dc:	b480      	push	{r7}
 80141de:	b083      	sub	sp, #12
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	f383 8811 	msr	BASEPRI, r3
 80141ea:	f3bf 8f6f 	isb	sy
 80141ee:	f3bf 8f4f 	dsb	sy
 80141f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80141f4:	4b0e      	ldr	r3, [pc, #56]	; (8014230 <vPortEnterCritical+0x54>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	3301      	adds	r3, #1
 80141fa:	4a0d      	ldr	r2, [pc, #52]	; (8014230 <vPortEnterCritical+0x54>)
 80141fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80141fe:	4b0c      	ldr	r3, [pc, #48]	; (8014230 <vPortEnterCritical+0x54>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d10e      	bne.n	8014224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014206:	4b0b      	ldr	r3, [pc, #44]	; (8014234 <vPortEnterCritical+0x58>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	b2db      	uxtb	r3, r3
 801420c:	2b00      	cmp	r3, #0
 801420e:	d009      	beq.n	8014224 <vPortEnterCritical+0x48>
 8014210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014214:	f383 8811 	msr	BASEPRI, r3
 8014218:	f3bf 8f6f 	isb	sy
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	603b      	str	r3, [r7, #0]
 8014222:	e7fe      	b.n	8014222 <vPortEnterCritical+0x46>
	}
}
 8014224:	bf00      	nop
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr
 8014230:	24000010 	.word	0x24000010
 8014234:	e000ed04 	.word	0xe000ed04

08014238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801423e:	4b11      	ldr	r3, [pc, #68]	; (8014284 <vPortExitCritical+0x4c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d109      	bne.n	801425a <vPortExitCritical+0x22>
 8014246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424a:	f383 8811 	msr	BASEPRI, r3
 801424e:	f3bf 8f6f 	isb	sy
 8014252:	f3bf 8f4f 	dsb	sy
 8014256:	607b      	str	r3, [r7, #4]
 8014258:	e7fe      	b.n	8014258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801425a:	4b0a      	ldr	r3, [pc, #40]	; (8014284 <vPortExitCritical+0x4c>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	3b01      	subs	r3, #1
 8014260:	4a08      	ldr	r2, [pc, #32]	; (8014284 <vPortExitCritical+0x4c>)
 8014262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014264:	4b07      	ldr	r3, [pc, #28]	; (8014284 <vPortExitCritical+0x4c>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d104      	bne.n	8014276 <vPortExitCritical+0x3e>
 801426c:	2300      	movs	r3, #0
 801426e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014276:	bf00      	nop
 8014278:	370c      	adds	r7, #12
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop
 8014284:	24000010 	.word	0x24000010
	...

08014290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014290:	f3ef 8009 	mrs	r0, PSP
 8014294:	f3bf 8f6f 	isb	sy
 8014298:	4b15      	ldr	r3, [pc, #84]	; (80142f0 <pxCurrentTCBConst>)
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	f01e 0f10 	tst.w	lr, #16
 80142a0:	bf08      	it	eq
 80142a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80142a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142aa:	6010      	str	r0, [r2, #0]
 80142ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80142b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80142b4:	f380 8811 	msr	BASEPRI, r0
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	f3bf 8f6f 	isb	sy
 80142c0:	f7ff f818 	bl	80132f4 <vTaskSwitchContext>
 80142c4:	f04f 0000 	mov.w	r0, #0
 80142c8:	f380 8811 	msr	BASEPRI, r0
 80142cc:	bc09      	pop	{r0, r3}
 80142ce:	6819      	ldr	r1, [r3, #0]
 80142d0:	6808      	ldr	r0, [r1, #0]
 80142d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d6:	f01e 0f10 	tst.w	lr, #16
 80142da:	bf08      	it	eq
 80142dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80142e0:	f380 8809 	msr	PSP, r0
 80142e4:	f3bf 8f6f 	isb	sy
 80142e8:	4770      	bx	lr
 80142ea:	bf00      	nop
 80142ec:	f3af 8000 	nop.w

080142f0 <pxCurrentTCBConst>:
 80142f0:	24014938 	.word	0x24014938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80142f4:	bf00      	nop
 80142f6:	bf00      	nop

080142f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
	__asm volatile
 80142fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014302:	f383 8811 	msr	BASEPRI, r3
 8014306:	f3bf 8f6f 	isb	sy
 801430a:	f3bf 8f4f 	dsb	sy
 801430e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014310:	f7fe ff38 	bl	8013184 <xTaskIncrementTick>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d003      	beq.n	8014322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801431a:	4b06      	ldr	r3, [pc, #24]	; (8014334 <SysTick_Handler+0x3c>)
 801431c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014320:	601a      	str	r2, [r3, #0]
 8014322:	2300      	movs	r3, #0
 8014324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801432c:	bf00      	nop
 801432e:	3708      	adds	r7, #8
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	e000ed04 	.word	0xe000ed04

08014338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014338:	b480      	push	{r7}
 801433a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801433c:	4b0b      	ldr	r3, [pc, #44]	; (801436c <vPortSetupTimerInterrupt+0x34>)
 801433e:	2200      	movs	r2, #0
 8014340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014342:	4b0b      	ldr	r3, [pc, #44]	; (8014370 <vPortSetupTimerInterrupt+0x38>)
 8014344:	2200      	movs	r2, #0
 8014346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014348:	4b0a      	ldr	r3, [pc, #40]	; (8014374 <vPortSetupTimerInterrupt+0x3c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	4a0a      	ldr	r2, [pc, #40]	; (8014378 <vPortSetupTimerInterrupt+0x40>)
 801434e:	fba2 2303 	umull	r2, r3, r2, r3
 8014352:	099b      	lsrs	r3, r3, #6
 8014354:	4a09      	ldr	r2, [pc, #36]	; (801437c <vPortSetupTimerInterrupt+0x44>)
 8014356:	3b01      	subs	r3, #1
 8014358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801435a:	4b04      	ldr	r3, [pc, #16]	; (801436c <vPortSetupTimerInterrupt+0x34>)
 801435c:	2207      	movs	r2, #7
 801435e:	601a      	str	r2, [r3, #0]
}
 8014360:	bf00      	nop
 8014362:	46bd      	mov	sp, r7
 8014364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014368:	4770      	bx	lr
 801436a:	bf00      	nop
 801436c:	e000e010 	.word	0xe000e010
 8014370:	e000e018 	.word	0xe000e018
 8014374:	24000000 	.word	0x24000000
 8014378:	10624dd3 	.word	0x10624dd3
 801437c:	e000e014 	.word	0xe000e014

08014380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014390 <vPortEnableVFP+0x10>
 8014384:	6801      	ldr	r1, [r0, #0]
 8014386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801438a:	6001      	str	r1, [r0, #0]
 801438c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801438e:	bf00      	nop
 8014390:	e000ed88 	.word	0xe000ed88

08014394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801439a:	f3ef 8305 	mrs	r3, IPSR
 801439e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	2b0f      	cmp	r3, #15
 80143a4:	d913      	bls.n	80143ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80143a6:	4a16      	ldr	r2, [pc, #88]	; (8014400 <vPortValidateInterruptPriority+0x6c>)
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	4413      	add	r3, r2
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80143b0:	4b14      	ldr	r3, [pc, #80]	; (8014404 <vPortValidateInterruptPriority+0x70>)
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	7afa      	ldrb	r2, [r7, #11]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d209      	bcs.n	80143ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80143ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143be:	f383 8811 	msr	BASEPRI, r3
 80143c2:	f3bf 8f6f 	isb	sy
 80143c6:	f3bf 8f4f 	dsb	sy
 80143ca:	607b      	str	r3, [r7, #4]
 80143cc:	e7fe      	b.n	80143cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80143ce:	4b0e      	ldr	r3, [pc, #56]	; (8014408 <vPortValidateInterruptPriority+0x74>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80143d6:	4b0d      	ldr	r3, [pc, #52]	; (801440c <vPortValidateInterruptPriority+0x78>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d909      	bls.n	80143f2 <vPortValidateInterruptPriority+0x5e>
 80143de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e2:	f383 8811 	msr	BASEPRI, r3
 80143e6:	f3bf 8f6f 	isb	sy
 80143ea:	f3bf 8f4f 	dsb	sy
 80143ee:	603b      	str	r3, [r7, #0]
 80143f0:	e7fe      	b.n	80143f0 <vPortValidateInterruptPriority+0x5c>
	}
 80143f2:	bf00      	nop
 80143f4:	3714      	adds	r7, #20
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	e000e3f0 	.word	0xe000e3f0
 8014404:	24014a64 	.word	0x24014a64
 8014408:	e000ed0c 	.word	0xe000ed0c
 801440c:	24014a68 	.word	0x24014a68

08014410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b08a      	sub	sp, #40	; 0x28
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014418:	2300      	movs	r3, #0
 801441a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801441c:	f7fe fde6 	bl	8012fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014420:	4b57      	ldr	r3, [pc, #348]	; (8014580 <pvPortMalloc+0x170>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d101      	bne.n	801442c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014428:	f000 f90c 	bl	8014644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801442c:	4b55      	ldr	r3, [pc, #340]	; (8014584 <pvPortMalloc+0x174>)
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	4013      	ands	r3, r2
 8014434:	2b00      	cmp	r3, #0
 8014436:	f040 808c 	bne.w	8014552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d01c      	beq.n	801447a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014440:	2208      	movs	r2, #8
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4413      	add	r3, r2
 8014446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f003 0307 	and.w	r3, r3, #7
 801444e:	2b00      	cmp	r3, #0
 8014450:	d013      	beq.n	801447a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f023 0307 	bic.w	r3, r3, #7
 8014458:	3308      	adds	r3, #8
 801445a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f003 0307 	and.w	r3, r3, #7
 8014462:	2b00      	cmp	r3, #0
 8014464:	d009      	beq.n	801447a <pvPortMalloc+0x6a>
 8014466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801446a:	f383 8811 	msr	BASEPRI, r3
 801446e:	f3bf 8f6f 	isb	sy
 8014472:	f3bf 8f4f 	dsb	sy
 8014476:	617b      	str	r3, [r7, #20]
 8014478:	e7fe      	b.n	8014478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d068      	beq.n	8014552 <pvPortMalloc+0x142>
 8014480:	4b41      	ldr	r3, [pc, #260]	; (8014588 <pvPortMalloc+0x178>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	687a      	ldr	r2, [r7, #4]
 8014486:	429a      	cmp	r2, r3
 8014488:	d863      	bhi.n	8014552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801448a:	4b40      	ldr	r3, [pc, #256]	; (801458c <pvPortMalloc+0x17c>)
 801448c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801448e:	4b3f      	ldr	r3, [pc, #252]	; (801458c <pvPortMalloc+0x17c>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014494:	e004      	b.n	80144a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80144a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d903      	bls.n	80144b2 <pvPortMalloc+0xa2>
 80144aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d1f1      	bne.n	8014496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80144b2:	4b33      	ldr	r3, [pc, #204]	; (8014580 <pvPortMalloc+0x170>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d04a      	beq.n	8014552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2208      	movs	r2, #8
 80144c2:	4413      	add	r3, r2
 80144c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80144c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	6a3b      	ldr	r3, [r7, #32]
 80144cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80144ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d0:	685a      	ldr	r2, [r3, #4]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	1ad2      	subs	r2, r2, r3
 80144d6:	2308      	movs	r3, #8
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	429a      	cmp	r2, r3
 80144dc:	d91e      	bls.n	801451c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80144de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	4413      	add	r3, r2
 80144e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	f003 0307 	and.w	r3, r3, #7
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d009      	beq.n	8014504 <pvPortMalloc+0xf4>
 80144f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f4:	f383 8811 	msr	BASEPRI, r3
 80144f8:	f3bf 8f6f 	isb	sy
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	613b      	str	r3, [r7, #16]
 8014502:	e7fe      	b.n	8014502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014506:	685a      	ldr	r2, [r3, #4]
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	1ad2      	subs	r2, r2, r3
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014516:	69b8      	ldr	r0, [r7, #24]
 8014518:	f000 f8f6 	bl	8014708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801451c:	4b1a      	ldr	r3, [pc, #104]	; (8014588 <pvPortMalloc+0x178>)
 801451e:	681a      	ldr	r2, [r3, #0]
 8014520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	1ad3      	subs	r3, r2, r3
 8014526:	4a18      	ldr	r2, [pc, #96]	; (8014588 <pvPortMalloc+0x178>)
 8014528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801452a:	4b17      	ldr	r3, [pc, #92]	; (8014588 <pvPortMalloc+0x178>)
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	4b18      	ldr	r3, [pc, #96]	; (8014590 <pvPortMalloc+0x180>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	429a      	cmp	r2, r3
 8014534:	d203      	bcs.n	801453e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014536:	4b14      	ldr	r3, [pc, #80]	; (8014588 <pvPortMalloc+0x178>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4a15      	ldr	r2, [pc, #84]	; (8014590 <pvPortMalloc+0x180>)
 801453c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014540:	685a      	ldr	r2, [r3, #4]
 8014542:	4b10      	ldr	r3, [pc, #64]	; (8014584 <pvPortMalloc+0x174>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	431a      	orrs	r2, r3
 8014548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454e:	2200      	movs	r2, #0
 8014550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014552:	f7fe fd59 	bl	8013008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	f003 0307 	and.w	r3, r3, #7
 801455c:	2b00      	cmp	r3, #0
 801455e:	d009      	beq.n	8014574 <pvPortMalloc+0x164>
 8014560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014564:	f383 8811 	msr	BASEPRI, r3
 8014568:	f3bf 8f6f 	isb	sy
 801456c:	f3bf 8f4f 	dsb	sy
 8014570:	60fb      	str	r3, [r7, #12]
 8014572:	e7fe      	b.n	8014572 <pvPortMalloc+0x162>
	return pvReturn;
 8014574:	69fb      	ldr	r3, [r7, #28]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3728      	adds	r7, #40	; 0x28
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	24064a74 	.word	0x24064a74
 8014584:	24064a80 	.word	0x24064a80
 8014588:	24064a78 	.word	0x24064a78
 801458c:	24064a6c 	.word	0x24064a6c
 8014590:	24064a7c 	.word	0x24064a7c

08014594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b086      	sub	sp, #24
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d046      	beq.n	8014634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80145a6:	2308      	movs	r3, #8
 80145a8:	425b      	negs	r3, r3
 80145aa:	697a      	ldr	r2, [r7, #20]
 80145ac:	4413      	add	r3, r2
 80145ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	685a      	ldr	r2, [r3, #4]
 80145b8:	4b20      	ldr	r3, [pc, #128]	; (801463c <vPortFree+0xa8>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	4013      	ands	r3, r2
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d109      	bne.n	80145d6 <vPortFree+0x42>
 80145c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	60fb      	str	r3, [r7, #12]
 80145d4:	e7fe      	b.n	80145d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d009      	beq.n	80145f2 <vPortFree+0x5e>
 80145de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e2:	f383 8811 	msr	BASEPRI, r3
 80145e6:	f3bf 8f6f 	isb	sy
 80145ea:	f3bf 8f4f 	dsb	sy
 80145ee:	60bb      	str	r3, [r7, #8]
 80145f0:	e7fe      	b.n	80145f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	685a      	ldr	r2, [r3, #4]
 80145f6:	4b11      	ldr	r3, [pc, #68]	; (801463c <vPortFree+0xa8>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	4013      	ands	r3, r2
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d019      	beq.n	8014634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d115      	bne.n	8014634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	685a      	ldr	r2, [r3, #4]
 801460c:	4b0b      	ldr	r3, [pc, #44]	; (801463c <vPortFree+0xa8>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	43db      	mvns	r3, r3
 8014612:	401a      	ands	r2, r3
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014618:	f7fe fce8 	bl	8012fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	685a      	ldr	r2, [r3, #4]
 8014620:	4b07      	ldr	r3, [pc, #28]	; (8014640 <vPortFree+0xac>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4413      	add	r3, r2
 8014626:	4a06      	ldr	r2, [pc, #24]	; (8014640 <vPortFree+0xac>)
 8014628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801462a:	6938      	ldr	r0, [r7, #16]
 801462c:	f000 f86c 	bl	8014708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014630:	f7fe fcea 	bl	8013008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014634:	bf00      	nop
 8014636:	3718      	adds	r7, #24
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	24064a80 	.word	0x24064a80
 8014640:	24064a78 	.word	0x24064a78

08014644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014644:	b480      	push	{r7}
 8014646:	b085      	sub	sp, #20
 8014648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801464a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801464e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014650:	4b27      	ldr	r3, [pc, #156]	; (80146f0 <prvHeapInit+0xac>)
 8014652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f003 0307 	and.w	r3, r3, #7
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00c      	beq.n	8014678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	3307      	adds	r3, #7
 8014662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	f023 0307 	bic.w	r3, r3, #7
 801466a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801466c:	68ba      	ldr	r2, [r7, #8]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	4a1f      	ldr	r2, [pc, #124]	; (80146f0 <prvHeapInit+0xac>)
 8014674:	4413      	add	r3, r2
 8014676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801467c:	4a1d      	ldr	r2, [pc, #116]	; (80146f4 <prvHeapInit+0xb0>)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014682:	4b1c      	ldr	r3, [pc, #112]	; (80146f4 <prvHeapInit+0xb0>)
 8014684:	2200      	movs	r2, #0
 8014686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	68ba      	ldr	r2, [r7, #8]
 801468c:	4413      	add	r3, r2
 801468e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014690:	2208      	movs	r2, #8
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	1a9b      	subs	r3, r3, r2
 8014696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	f023 0307 	bic.w	r3, r3, #7
 801469e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	4a15      	ldr	r2, [pc, #84]	; (80146f8 <prvHeapInit+0xb4>)
 80146a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80146a6:	4b14      	ldr	r3, [pc, #80]	; (80146f8 <prvHeapInit+0xb4>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2200      	movs	r2, #0
 80146ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80146ae:	4b12      	ldr	r3, [pc, #72]	; (80146f8 <prvHeapInit+0xb4>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2200      	movs	r2, #0
 80146b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	68fa      	ldr	r2, [r7, #12]
 80146be:	1ad2      	subs	r2, r2, r3
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80146c4:	4b0c      	ldr	r3, [pc, #48]	; (80146f8 <prvHeapInit+0xb4>)
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	4a0a      	ldr	r2, [pc, #40]	; (80146fc <prvHeapInit+0xb8>)
 80146d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	4a09      	ldr	r2, [pc, #36]	; (8014700 <prvHeapInit+0xbc>)
 80146da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80146dc:	4b09      	ldr	r3, [pc, #36]	; (8014704 <prvHeapInit+0xc0>)
 80146de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80146e2:	601a      	str	r2, [r3, #0]
}
 80146e4:	bf00      	nop
 80146e6:	3714      	adds	r7, #20
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr
 80146f0:	24014a6c 	.word	0x24014a6c
 80146f4:	24064a6c 	.word	0x24064a6c
 80146f8:	24064a74 	.word	0x24064a74
 80146fc:	24064a7c 	.word	0x24064a7c
 8014700:	24064a78 	.word	0x24064a78
 8014704:	24064a80 	.word	0x24064a80

08014708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014708:	b480      	push	{r7}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014710:	4b28      	ldr	r3, [pc, #160]	; (80147b4 <prvInsertBlockIntoFreeList+0xac>)
 8014712:	60fb      	str	r3, [r7, #12]
 8014714:	e002      	b.n	801471c <prvInsertBlockIntoFreeList+0x14>
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	60fb      	str	r3, [r7, #12]
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	429a      	cmp	r2, r3
 8014724:	d8f7      	bhi.n	8014716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	68ba      	ldr	r2, [r7, #8]
 8014730:	4413      	add	r3, r2
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	429a      	cmp	r2, r3
 8014736:	d108      	bne.n	801474a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	685a      	ldr	r2, [r3, #4]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	441a      	add	r2, r3
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	685b      	ldr	r3, [r3, #4]
 8014752:	68ba      	ldr	r2, [r7, #8]
 8014754:	441a      	add	r2, r3
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	429a      	cmp	r2, r3
 801475c:	d118      	bne.n	8014790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	4b15      	ldr	r3, [pc, #84]	; (80147b8 <prvInsertBlockIntoFreeList+0xb0>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	429a      	cmp	r2, r3
 8014768:	d00d      	beq.n	8014786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	685a      	ldr	r2, [r3, #4]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	441a      	add	r2, r3
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	681a      	ldr	r2, [r3, #0]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	601a      	str	r2, [r3, #0]
 8014784:	e008      	b.n	8014798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014786:	4b0c      	ldr	r3, [pc, #48]	; (80147b8 <prvInsertBlockIntoFreeList+0xb0>)
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	601a      	str	r2, [r3, #0]
 801478e:	e003      	b.n	8014798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	429a      	cmp	r2, r3
 801479e:	d002      	beq.n	80147a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	687a      	ldr	r2, [r7, #4]
 80147a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80147a6:	bf00      	nop
 80147a8:	3714      	adds	r7, #20
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
 80147b2:	bf00      	nop
 80147b4:	24064a6c 	.word	0x24064a6c
 80147b8:	24064a74 	.word	0x24064a74

080147bc <__errno>:
 80147bc:	4b01      	ldr	r3, [pc, #4]	; (80147c4 <__errno+0x8>)
 80147be:	6818      	ldr	r0, [r3, #0]
 80147c0:	4770      	bx	lr
 80147c2:	bf00      	nop
 80147c4:	24000014 	.word	0x24000014

080147c8 <__libc_init_array>:
 80147c8:	b570      	push	{r4, r5, r6, lr}
 80147ca:	4e0d      	ldr	r6, [pc, #52]	; (8014800 <__libc_init_array+0x38>)
 80147cc:	4c0d      	ldr	r4, [pc, #52]	; (8014804 <__libc_init_array+0x3c>)
 80147ce:	1ba4      	subs	r4, r4, r6
 80147d0:	10a4      	asrs	r4, r4, #2
 80147d2:	2500      	movs	r5, #0
 80147d4:	42a5      	cmp	r5, r4
 80147d6:	d109      	bne.n	80147ec <__libc_init_array+0x24>
 80147d8:	4e0b      	ldr	r6, [pc, #44]	; (8014808 <__libc_init_array+0x40>)
 80147da:	4c0c      	ldr	r4, [pc, #48]	; (801480c <__libc_init_array+0x44>)
 80147dc:	f000 fc3c 	bl	8015058 <_init>
 80147e0:	1ba4      	subs	r4, r4, r6
 80147e2:	10a4      	asrs	r4, r4, #2
 80147e4:	2500      	movs	r5, #0
 80147e6:	42a5      	cmp	r5, r4
 80147e8:	d105      	bne.n	80147f6 <__libc_init_array+0x2e>
 80147ea:	bd70      	pop	{r4, r5, r6, pc}
 80147ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80147f0:	4798      	blx	r3
 80147f2:	3501      	adds	r5, #1
 80147f4:	e7ee      	b.n	80147d4 <__libc_init_array+0xc>
 80147f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80147fa:	4798      	blx	r3
 80147fc:	3501      	adds	r5, #1
 80147fe:	e7f2      	b.n	80147e6 <__libc_init_array+0x1e>
 8014800:	08015234 	.word	0x08015234
 8014804:	08015234 	.word	0x08015234
 8014808:	08015234 	.word	0x08015234
 801480c:	08015238 	.word	0x08015238

08014810 <memcpy>:
 8014810:	b510      	push	{r4, lr}
 8014812:	1e43      	subs	r3, r0, #1
 8014814:	440a      	add	r2, r1
 8014816:	4291      	cmp	r1, r2
 8014818:	d100      	bne.n	801481c <memcpy+0xc>
 801481a:	bd10      	pop	{r4, pc}
 801481c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014824:	e7f7      	b.n	8014816 <memcpy+0x6>

08014826 <memset>:
 8014826:	4402      	add	r2, r0
 8014828:	4603      	mov	r3, r0
 801482a:	4293      	cmp	r3, r2
 801482c:	d100      	bne.n	8014830 <memset+0xa>
 801482e:	4770      	bx	lr
 8014830:	f803 1b01 	strb.w	r1, [r3], #1
 8014834:	e7f9      	b.n	801482a <memset+0x4>
	...

08014838 <sniprintf>:
 8014838:	b40c      	push	{r2, r3}
 801483a:	b530      	push	{r4, r5, lr}
 801483c:	4b17      	ldr	r3, [pc, #92]	; (801489c <sniprintf+0x64>)
 801483e:	1e0c      	subs	r4, r1, #0
 8014840:	b09d      	sub	sp, #116	; 0x74
 8014842:	681d      	ldr	r5, [r3, #0]
 8014844:	da08      	bge.n	8014858 <sniprintf+0x20>
 8014846:	238b      	movs	r3, #139	; 0x8b
 8014848:	602b      	str	r3, [r5, #0]
 801484a:	f04f 30ff 	mov.w	r0, #4294967295
 801484e:	b01d      	add	sp, #116	; 0x74
 8014850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014854:	b002      	add	sp, #8
 8014856:	4770      	bx	lr
 8014858:	f44f 7302 	mov.w	r3, #520	; 0x208
 801485c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014860:	bf14      	ite	ne
 8014862:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014866:	4623      	moveq	r3, r4
 8014868:	9304      	str	r3, [sp, #16]
 801486a:	9307      	str	r3, [sp, #28]
 801486c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014870:	9002      	str	r0, [sp, #8]
 8014872:	9006      	str	r0, [sp, #24]
 8014874:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801487a:	ab21      	add	r3, sp, #132	; 0x84
 801487c:	a902      	add	r1, sp, #8
 801487e:	4628      	mov	r0, r5
 8014880:	9301      	str	r3, [sp, #4]
 8014882:	f000 f867 	bl	8014954 <_svfiprintf_r>
 8014886:	1c43      	adds	r3, r0, #1
 8014888:	bfbc      	itt	lt
 801488a:	238b      	movlt	r3, #139	; 0x8b
 801488c:	602b      	strlt	r3, [r5, #0]
 801488e:	2c00      	cmp	r4, #0
 8014890:	d0dd      	beq.n	801484e <sniprintf+0x16>
 8014892:	9b02      	ldr	r3, [sp, #8]
 8014894:	2200      	movs	r2, #0
 8014896:	701a      	strb	r2, [r3, #0]
 8014898:	e7d9      	b.n	801484e <sniprintf+0x16>
 801489a:	bf00      	nop
 801489c:	24000014 	.word	0x24000014

080148a0 <__ssputs_r>:
 80148a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148a4:	688e      	ldr	r6, [r1, #8]
 80148a6:	429e      	cmp	r6, r3
 80148a8:	4682      	mov	sl, r0
 80148aa:	460c      	mov	r4, r1
 80148ac:	4690      	mov	r8, r2
 80148ae:	4699      	mov	r9, r3
 80148b0:	d837      	bhi.n	8014922 <__ssputs_r+0x82>
 80148b2:	898a      	ldrh	r2, [r1, #12]
 80148b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148b8:	d031      	beq.n	801491e <__ssputs_r+0x7e>
 80148ba:	6825      	ldr	r5, [r4, #0]
 80148bc:	6909      	ldr	r1, [r1, #16]
 80148be:	1a6f      	subs	r7, r5, r1
 80148c0:	6965      	ldr	r5, [r4, #20]
 80148c2:	2302      	movs	r3, #2
 80148c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80148cc:	f109 0301 	add.w	r3, r9, #1
 80148d0:	443b      	add	r3, r7
 80148d2:	429d      	cmp	r5, r3
 80148d4:	bf38      	it	cc
 80148d6:	461d      	movcc	r5, r3
 80148d8:	0553      	lsls	r3, r2, #21
 80148da:	d530      	bpl.n	801493e <__ssputs_r+0x9e>
 80148dc:	4629      	mov	r1, r5
 80148de:	f000 fb21 	bl	8014f24 <_malloc_r>
 80148e2:	4606      	mov	r6, r0
 80148e4:	b950      	cbnz	r0, 80148fc <__ssputs_r+0x5c>
 80148e6:	230c      	movs	r3, #12
 80148e8:	f8ca 3000 	str.w	r3, [sl]
 80148ec:	89a3      	ldrh	r3, [r4, #12]
 80148ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148f2:	81a3      	strh	r3, [r4, #12]
 80148f4:	f04f 30ff 	mov.w	r0, #4294967295
 80148f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148fc:	463a      	mov	r2, r7
 80148fe:	6921      	ldr	r1, [r4, #16]
 8014900:	f7ff ff86 	bl	8014810 <memcpy>
 8014904:	89a3      	ldrh	r3, [r4, #12]
 8014906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801490e:	81a3      	strh	r3, [r4, #12]
 8014910:	6126      	str	r6, [r4, #16]
 8014912:	6165      	str	r5, [r4, #20]
 8014914:	443e      	add	r6, r7
 8014916:	1bed      	subs	r5, r5, r7
 8014918:	6026      	str	r6, [r4, #0]
 801491a:	60a5      	str	r5, [r4, #8]
 801491c:	464e      	mov	r6, r9
 801491e:	454e      	cmp	r6, r9
 8014920:	d900      	bls.n	8014924 <__ssputs_r+0x84>
 8014922:	464e      	mov	r6, r9
 8014924:	4632      	mov	r2, r6
 8014926:	4641      	mov	r1, r8
 8014928:	6820      	ldr	r0, [r4, #0]
 801492a:	f000 fa93 	bl	8014e54 <memmove>
 801492e:	68a3      	ldr	r3, [r4, #8]
 8014930:	1b9b      	subs	r3, r3, r6
 8014932:	60a3      	str	r3, [r4, #8]
 8014934:	6823      	ldr	r3, [r4, #0]
 8014936:	441e      	add	r6, r3
 8014938:	6026      	str	r6, [r4, #0]
 801493a:	2000      	movs	r0, #0
 801493c:	e7dc      	b.n	80148f8 <__ssputs_r+0x58>
 801493e:	462a      	mov	r2, r5
 8014940:	f000 fb4a 	bl	8014fd8 <_realloc_r>
 8014944:	4606      	mov	r6, r0
 8014946:	2800      	cmp	r0, #0
 8014948:	d1e2      	bne.n	8014910 <__ssputs_r+0x70>
 801494a:	6921      	ldr	r1, [r4, #16]
 801494c:	4650      	mov	r0, sl
 801494e:	f000 fa9b 	bl	8014e88 <_free_r>
 8014952:	e7c8      	b.n	80148e6 <__ssputs_r+0x46>

08014954 <_svfiprintf_r>:
 8014954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014958:	461d      	mov	r5, r3
 801495a:	898b      	ldrh	r3, [r1, #12]
 801495c:	061f      	lsls	r7, r3, #24
 801495e:	b09d      	sub	sp, #116	; 0x74
 8014960:	4680      	mov	r8, r0
 8014962:	460c      	mov	r4, r1
 8014964:	4616      	mov	r6, r2
 8014966:	d50f      	bpl.n	8014988 <_svfiprintf_r+0x34>
 8014968:	690b      	ldr	r3, [r1, #16]
 801496a:	b96b      	cbnz	r3, 8014988 <_svfiprintf_r+0x34>
 801496c:	2140      	movs	r1, #64	; 0x40
 801496e:	f000 fad9 	bl	8014f24 <_malloc_r>
 8014972:	6020      	str	r0, [r4, #0]
 8014974:	6120      	str	r0, [r4, #16]
 8014976:	b928      	cbnz	r0, 8014984 <_svfiprintf_r+0x30>
 8014978:	230c      	movs	r3, #12
 801497a:	f8c8 3000 	str.w	r3, [r8]
 801497e:	f04f 30ff 	mov.w	r0, #4294967295
 8014982:	e0c8      	b.n	8014b16 <_svfiprintf_r+0x1c2>
 8014984:	2340      	movs	r3, #64	; 0x40
 8014986:	6163      	str	r3, [r4, #20]
 8014988:	2300      	movs	r3, #0
 801498a:	9309      	str	r3, [sp, #36]	; 0x24
 801498c:	2320      	movs	r3, #32
 801498e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014992:	2330      	movs	r3, #48	; 0x30
 8014994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014998:	9503      	str	r5, [sp, #12]
 801499a:	f04f 0b01 	mov.w	fp, #1
 801499e:	4637      	mov	r7, r6
 80149a0:	463d      	mov	r5, r7
 80149a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80149a6:	b10b      	cbz	r3, 80149ac <_svfiprintf_r+0x58>
 80149a8:	2b25      	cmp	r3, #37	; 0x25
 80149aa:	d13e      	bne.n	8014a2a <_svfiprintf_r+0xd6>
 80149ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80149b0:	d00b      	beq.n	80149ca <_svfiprintf_r+0x76>
 80149b2:	4653      	mov	r3, sl
 80149b4:	4632      	mov	r2, r6
 80149b6:	4621      	mov	r1, r4
 80149b8:	4640      	mov	r0, r8
 80149ba:	f7ff ff71 	bl	80148a0 <__ssputs_r>
 80149be:	3001      	adds	r0, #1
 80149c0:	f000 80a4 	beq.w	8014b0c <_svfiprintf_r+0x1b8>
 80149c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149c6:	4453      	add	r3, sl
 80149c8:	9309      	str	r3, [sp, #36]	; 0x24
 80149ca:	783b      	ldrb	r3, [r7, #0]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	f000 809d 	beq.w	8014b0c <_svfiprintf_r+0x1b8>
 80149d2:	2300      	movs	r3, #0
 80149d4:	f04f 32ff 	mov.w	r2, #4294967295
 80149d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149dc:	9304      	str	r3, [sp, #16]
 80149de:	9307      	str	r3, [sp, #28]
 80149e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149e4:	931a      	str	r3, [sp, #104]	; 0x68
 80149e6:	462f      	mov	r7, r5
 80149e8:	2205      	movs	r2, #5
 80149ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80149ee:	4850      	ldr	r0, [pc, #320]	; (8014b30 <_svfiprintf_r+0x1dc>)
 80149f0:	f7eb fc76 	bl	80002e0 <memchr>
 80149f4:	9b04      	ldr	r3, [sp, #16]
 80149f6:	b9d0      	cbnz	r0, 8014a2e <_svfiprintf_r+0xda>
 80149f8:	06d9      	lsls	r1, r3, #27
 80149fa:	bf44      	itt	mi
 80149fc:	2220      	movmi	r2, #32
 80149fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a02:	071a      	lsls	r2, r3, #28
 8014a04:	bf44      	itt	mi
 8014a06:	222b      	movmi	r2, #43	; 0x2b
 8014a08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a0c:	782a      	ldrb	r2, [r5, #0]
 8014a0e:	2a2a      	cmp	r2, #42	; 0x2a
 8014a10:	d015      	beq.n	8014a3e <_svfiprintf_r+0xea>
 8014a12:	9a07      	ldr	r2, [sp, #28]
 8014a14:	462f      	mov	r7, r5
 8014a16:	2000      	movs	r0, #0
 8014a18:	250a      	movs	r5, #10
 8014a1a:	4639      	mov	r1, r7
 8014a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a20:	3b30      	subs	r3, #48	; 0x30
 8014a22:	2b09      	cmp	r3, #9
 8014a24:	d94d      	bls.n	8014ac2 <_svfiprintf_r+0x16e>
 8014a26:	b1b8      	cbz	r0, 8014a58 <_svfiprintf_r+0x104>
 8014a28:	e00f      	b.n	8014a4a <_svfiprintf_r+0xf6>
 8014a2a:	462f      	mov	r7, r5
 8014a2c:	e7b8      	b.n	80149a0 <_svfiprintf_r+0x4c>
 8014a2e:	4a40      	ldr	r2, [pc, #256]	; (8014b30 <_svfiprintf_r+0x1dc>)
 8014a30:	1a80      	subs	r0, r0, r2
 8014a32:	fa0b f000 	lsl.w	r0, fp, r0
 8014a36:	4318      	orrs	r0, r3
 8014a38:	9004      	str	r0, [sp, #16]
 8014a3a:	463d      	mov	r5, r7
 8014a3c:	e7d3      	b.n	80149e6 <_svfiprintf_r+0x92>
 8014a3e:	9a03      	ldr	r2, [sp, #12]
 8014a40:	1d11      	adds	r1, r2, #4
 8014a42:	6812      	ldr	r2, [r2, #0]
 8014a44:	9103      	str	r1, [sp, #12]
 8014a46:	2a00      	cmp	r2, #0
 8014a48:	db01      	blt.n	8014a4e <_svfiprintf_r+0xfa>
 8014a4a:	9207      	str	r2, [sp, #28]
 8014a4c:	e004      	b.n	8014a58 <_svfiprintf_r+0x104>
 8014a4e:	4252      	negs	r2, r2
 8014a50:	f043 0302 	orr.w	r3, r3, #2
 8014a54:	9207      	str	r2, [sp, #28]
 8014a56:	9304      	str	r3, [sp, #16]
 8014a58:	783b      	ldrb	r3, [r7, #0]
 8014a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8014a5c:	d10c      	bne.n	8014a78 <_svfiprintf_r+0x124>
 8014a5e:	787b      	ldrb	r3, [r7, #1]
 8014a60:	2b2a      	cmp	r3, #42	; 0x2a
 8014a62:	d133      	bne.n	8014acc <_svfiprintf_r+0x178>
 8014a64:	9b03      	ldr	r3, [sp, #12]
 8014a66:	1d1a      	adds	r2, r3, #4
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	9203      	str	r2, [sp, #12]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	bfb8      	it	lt
 8014a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a74:	3702      	adds	r7, #2
 8014a76:	9305      	str	r3, [sp, #20]
 8014a78:	4d2e      	ldr	r5, [pc, #184]	; (8014b34 <_svfiprintf_r+0x1e0>)
 8014a7a:	7839      	ldrb	r1, [r7, #0]
 8014a7c:	2203      	movs	r2, #3
 8014a7e:	4628      	mov	r0, r5
 8014a80:	f7eb fc2e 	bl	80002e0 <memchr>
 8014a84:	b138      	cbz	r0, 8014a96 <_svfiprintf_r+0x142>
 8014a86:	2340      	movs	r3, #64	; 0x40
 8014a88:	1b40      	subs	r0, r0, r5
 8014a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8014a8e:	9b04      	ldr	r3, [sp, #16]
 8014a90:	4303      	orrs	r3, r0
 8014a92:	3701      	adds	r7, #1
 8014a94:	9304      	str	r3, [sp, #16]
 8014a96:	7839      	ldrb	r1, [r7, #0]
 8014a98:	4827      	ldr	r0, [pc, #156]	; (8014b38 <_svfiprintf_r+0x1e4>)
 8014a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a9e:	2206      	movs	r2, #6
 8014aa0:	1c7e      	adds	r6, r7, #1
 8014aa2:	f7eb fc1d 	bl	80002e0 <memchr>
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	d038      	beq.n	8014b1c <_svfiprintf_r+0x1c8>
 8014aaa:	4b24      	ldr	r3, [pc, #144]	; (8014b3c <_svfiprintf_r+0x1e8>)
 8014aac:	bb13      	cbnz	r3, 8014af4 <_svfiprintf_r+0x1a0>
 8014aae:	9b03      	ldr	r3, [sp, #12]
 8014ab0:	3307      	adds	r3, #7
 8014ab2:	f023 0307 	bic.w	r3, r3, #7
 8014ab6:	3308      	adds	r3, #8
 8014ab8:	9303      	str	r3, [sp, #12]
 8014aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014abc:	444b      	add	r3, r9
 8014abe:	9309      	str	r3, [sp, #36]	; 0x24
 8014ac0:	e76d      	b.n	801499e <_svfiprintf_r+0x4a>
 8014ac2:	fb05 3202 	mla	r2, r5, r2, r3
 8014ac6:	2001      	movs	r0, #1
 8014ac8:	460f      	mov	r7, r1
 8014aca:	e7a6      	b.n	8014a1a <_svfiprintf_r+0xc6>
 8014acc:	2300      	movs	r3, #0
 8014ace:	3701      	adds	r7, #1
 8014ad0:	9305      	str	r3, [sp, #20]
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	250a      	movs	r5, #10
 8014ad6:	4638      	mov	r0, r7
 8014ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014adc:	3a30      	subs	r2, #48	; 0x30
 8014ade:	2a09      	cmp	r2, #9
 8014ae0:	d903      	bls.n	8014aea <_svfiprintf_r+0x196>
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d0c8      	beq.n	8014a78 <_svfiprintf_r+0x124>
 8014ae6:	9105      	str	r1, [sp, #20]
 8014ae8:	e7c6      	b.n	8014a78 <_svfiprintf_r+0x124>
 8014aea:	fb05 2101 	mla	r1, r5, r1, r2
 8014aee:	2301      	movs	r3, #1
 8014af0:	4607      	mov	r7, r0
 8014af2:	e7f0      	b.n	8014ad6 <_svfiprintf_r+0x182>
 8014af4:	ab03      	add	r3, sp, #12
 8014af6:	9300      	str	r3, [sp, #0]
 8014af8:	4622      	mov	r2, r4
 8014afa:	4b11      	ldr	r3, [pc, #68]	; (8014b40 <_svfiprintf_r+0x1ec>)
 8014afc:	a904      	add	r1, sp, #16
 8014afe:	4640      	mov	r0, r8
 8014b00:	f3af 8000 	nop.w
 8014b04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014b08:	4681      	mov	r9, r0
 8014b0a:	d1d6      	bne.n	8014aba <_svfiprintf_r+0x166>
 8014b0c:	89a3      	ldrh	r3, [r4, #12]
 8014b0e:	065b      	lsls	r3, r3, #25
 8014b10:	f53f af35 	bmi.w	801497e <_svfiprintf_r+0x2a>
 8014b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b16:	b01d      	add	sp, #116	; 0x74
 8014b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1c:	ab03      	add	r3, sp, #12
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	4622      	mov	r2, r4
 8014b22:	4b07      	ldr	r3, [pc, #28]	; (8014b40 <_svfiprintf_r+0x1ec>)
 8014b24:	a904      	add	r1, sp, #16
 8014b26:	4640      	mov	r0, r8
 8014b28:	f000 f882 	bl	8014c30 <_printf_i>
 8014b2c:	e7ea      	b.n	8014b04 <_svfiprintf_r+0x1b0>
 8014b2e:	bf00      	nop
 8014b30:	080151f8 	.word	0x080151f8
 8014b34:	080151fe 	.word	0x080151fe
 8014b38:	08015202 	.word	0x08015202
 8014b3c:	00000000 	.word	0x00000000
 8014b40:	080148a1 	.word	0x080148a1

08014b44 <_printf_common>:
 8014b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b48:	4691      	mov	r9, r2
 8014b4a:	461f      	mov	r7, r3
 8014b4c:	688a      	ldr	r2, [r1, #8]
 8014b4e:	690b      	ldr	r3, [r1, #16]
 8014b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b54:	4293      	cmp	r3, r2
 8014b56:	bfb8      	it	lt
 8014b58:	4613      	movlt	r3, r2
 8014b5a:	f8c9 3000 	str.w	r3, [r9]
 8014b5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b62:	4606      	mov	r6, r0
 8014b64:	460c      	mov	r4, r1
 8014b66:	b112      	cbz	r2, 8014b6e <_printf_common+0x2a>
 8014b68:	3301      	adds	r3, #1
 8014b6a:	f8c9 3000 	str.w	r3, [r9]
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	0699      	lsls	r1, r3, #26
 8014b72:	bf42      	ittt	mi
 8014b74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014b78:	3302      	addmi	r3, #2
 8014b7a:	f8c9 3000 	strmi.w	r3, [r9]
 8014b7e:	6825      	ldr	r5, [r4, #0]
 8014b80:	f015 0506 	ands.w	r5, r5, #6
 8014b84:	d107      	bne.n	8014b96 <_printf_common+0x52>
 8014b86:	f104 0a19 	add.w	sl, r4, #25
 8014b8a:	68e3      	ldr	r3, [r4, #12]
 8014b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8014b90:	1a9b      	subs	r3, r3, r2
 8014b92:	42ab      	cmp	r3, r5
 8014b94:	dc28      	bgt.n	8014be8 <_printf_common+0xa4>
 8014b96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014b9a:	6822      	ldr	r2, [r4, #0]
 8014b9c:	3300      	adds	r3, #0
 8014b9e:	bf18      	it	ne
 8014ba0:	2301      	movne	r3, #1
 8014ba2:	0692      	lsls	r2, r2, #26
 8014ba4:	d42d      	bmi.n	8014c02 <_printf_common+0xbe>
 8014ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014baa:	4639      	mov	r1, r7
 8014bac:	4630      	mov	r0, r6
 8014bae:	47c0      	blx	r8
 8014bb0:	3001      	adds	r0, #1
 8014bb2:	d020      	beq.n	8014bf6 <_printf_common+0xb2>
 8014bb4:	6823      	ldr	r3, [r4, #0]
 8014bb6:	68e5      	ldr	r5, [r4, #12]
 8014bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8014bbc:	f003 0306 	and.w	r3, r3, #6
 8014bc0:	2b04      	cmp	r3, #4
 8014bc2:	bf08      	it	eq
 8014bc4:	1aad      	subeq	r5, r5, r2
 8014bc6:	68a3      	ldr	r3, [r4, #8]
 8014bc8:	6922      	ldr	r2, [r4, #16]
 8014bca:	bf0c      	ite	eq
 8014bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bd0:	2500      	movne	r5, #0
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	bfc4      	itt	gt
 8014bd6:	1a9b      	subgt	r3, r3, r2
 8014bd8:	18ed      	addgt	r5, r5, r3
 8014bda:	f04f 0900 	mov.w	r9, #0
 8014bde:	341a      	adds	r4, #26
 8014be0:	454d      	cmp	r5, r9
 8014be2:	d11a      	bne.n	8014c1a <_printf_common+0xd6>
 8014be4:	2000      	movs	r0, #0
 8014be6:	e008      	b.n	8014bfa <_printf_common+0xb6>
 8014be8:	2301      	movs	r3, #1
 8014bea:	4652      	mov	r2, sl
 8014bec:	4639      	mov	r1, r7
 8014bee:	4630      	mov	r0, r6
 8014bf0:	47c0      	blx	r8
 8014bf2:	3001      	adds	r0, #1
 8014bf4:	d103      	bne.n	8014bfe <_printf_common+0xba>
 8014bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bfe:	3501      	adds	r5, #1
 8014c00:	e7c3      	b.n	8014b8a <_printf_common+0x46>
 8014c02:	18e1      	adds	r1, r4, r3
 8014c04:	1c5a      	adds	r2, r3, #1
 8014c06:	2030      	movs	r0, #48	; 0x30
 8014c08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c0c:	4422      	add	r2, r4
 8014c0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c16:	3302      	adds	r3, #2
 8014c18:	e7c5      	b.n	8014ba6 <_printf_common+0x62>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	4622      	mov	r2, r4
 8014c1e:	4639      	mov	r1, r7
 8014c20:	4630      	mov	r0, r6
 8014c22:	47c0      	blx	r8
 8014c24:	3001      	adds	r0, #1
 8014c26:	d0e6      	beq.n	8014bf6 <_printf_common+0xb2>
 8014c28:	f109 0901 	add.w	r9, r9, #1
 8014c2c:	e7d8      	b.n	8014be0 <_printf_common+0x9c>
	...

08014c30 <_printf_i>:
 8014c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014c38:	460c      	mov	r4, r1
 8014c3a:	7e09      	ldrb	r1, [r1, #24]
 8014c3c:	b085      	sub	sp, #20
 8014c3e:	296e      	cmp	r1, #110	; 0x6e
 8014c40:	4617      	mov	r7, r2
 8014c42:	4606      	mov	r6, r0
 8014c44:	4698      	mov	r8, r3
 8014c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c48:	f000 80b3 	beq.w	8014db2 <_printf_i+0x182>
 8014c4c:	d822      	bhi.n	8014c94 <_printf_i+0x64>
 8014c4e:	2963      	cmp	r1, #99	; 0x63
 8014c50:	d036      	beq.n	8014cc0 <_printf_i+0x90>
 8014c52:	d80a      	bhi.n	8014c6a <_printf_i+0x3a>
 8014c54:	2900      	cmp	r1, #0
 8014c56:	f000 80b9 	beq.w	8014dcc <_printf_i+0x19c>
 8014c5a:	2958      	cmp	r1, #88	; 0x58
 8014c5c:	f000 8083 	beq.w	8014d66 <_printf_i+0x136>
 8014c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014c68:	e032      	b.n	8014cd0 <_printf_i+0xa0>
 8014c6a:	2964      	cmp	r1, #100	; 0x64
 8014c6c:	d001      	beq.n	8014c72 <_printf_i+0x42>
 8014c6e:	2969      	cmp	r1, #105	; 0x69
 8014c70:	d1f6      	bne.n	8014c60 <_printf_i+0x30>
 8014c72:	6820      	ldr	r0, [r4, #0]
 8014c74:	6813      	ldr	r3, [r2, #0]
 8014c76:	0605      	lsls	r5, r0, #24
 8014c78:	f103 0104 	add.w	r1, r3, #4
 8014c7c:	d52a      	bpl.n	8014cd4 <_printf_i+0xa4>
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	6011      	str	r1, [r2, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	da03      	bge.n	8014c8e <_printf_i+0x5e>
 8014c86:	222d      	movs	r2, #45	; 0x2d
 8014c88:	425b      	negs	r3, r3
 8014c8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014c8e:	486f      	ldr	r0, [pc, #444]	; (8014e4c <_printf_i+0x21c>)
 8014c90:	220a      	movs	r2, #10
 8014c92:	e039      	b.n	8014d08 <_printf_i+0xd8>
 8014c94:	2973      	cmp	r1, #115	; 0x73
 8014c96:	f000 809d 	beq.w	8014dd4 <_printf_i+0x1a4>
 8014c9a:	d808      	bhi.n	8014cae <_printf_i+0x7e>
 8014c9c:	296f      	cmp	r1, #111	; 0x6f
 8014c9e:	d020      	beq.n	8014ce2 <_printf_i+0xb2>
 8014ca0:	2970      	cmp	r1, #112	; 0x70
 8014ca2:	d1dd      	bne.n	8014c60 <_printf_i+0x30>
 8014ca4:	6823      	ldr	r3, [r4, #0]
 8014ca6:	f043 0320 	orr.w	r3, r3, #32
 8014caa:	6023      	str	r3, [r4, #0]
 8014cac:	e003      	b.n	8014cb6 <_printf_i+0x86>
 8014cae:	2975      	cmp	r1, #117	; 0x75
 8014cb0:	d017      	beq.n	8014ce2 <_printf_i+0xb2>
 8014cb2:	2978      	cmp	r1, #120	; 0x78
 8014cb4:	d1d4      	bne.n	8014c60 <_printf_i+0x30>
 8014cb6:	2378      	movs	r3, #120	; 0x78
 8014cb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014cbc:	4864      	ldr	r0, [pc, #400]	; (8014e50 <_printf_i+0x220>)
 8014cbe:	e055      	b.n	8014d6c <_printf_i+0x13c>
 8014cc0:	6813      	ldr	r3, [r2, #0]
 8014cc2:	1d19      	adds	r1, r3, #4
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	6011      	str	r1, [r2, #0]
 8014cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e08c      	b.n	8014dee <_printf_i+0x1be>
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	6011      	str	r1, [r2, #0]
 8014cd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014cdc:	bf18      	it	ne
 8014cde:	b21b      	sxthne	r3, r3
 8014ce0:	e7cf      	b.n	8014c82 <_printf_i+0x52>
 8014ce2:	6813      	ldr	r3, [r2, #0]
 8014ce4:	6825      	ldr	r5, [r4, #0]
 8014ce6:	1d18      	adds	r0, r3, #4
 8014ce8:	6010      	str	r0, [r2, #0]
 8014cea:	0628      	lsls	r0, r5, #24
 8014cec:	d501      	bpl.n	8014cf2 <_printf_i+0xc2>
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	e002      	b.n	8014cf8 <_printf_i+0xc8>
 8014cf2:	0668      	lsls	r0, r5, #25
 8014cf4:	d5fb      	bpl.n	8014cee <_printf_i+0xbe>
 8014cf6:	881b      	ldrh	r3, [r3, #0]
 8014cf8:	4854      	ldr	r0, [pc, #336]	; (8014e4c <_printf_i+0x21c>)
 8014cfa:	296f      	cmp	r1, #111	; 0x6f
 8014cfc:	bf14      	ite	ne
 8014cfe:	220a      	movne	r2, #10
 8014d00:	2208      	moveq	r2, #8
 8014d02:	2100      	movs	r1, #0
 8014d04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d08:	6865      	ldr	r5, [r4, #4]
 8014d0a:	60a5      	str	r5, [r4, #8]
 8014d0c:	2d00      	cmp	r5, #0
 8014d0e:	f2c0 8095 	blt.w	8014e3c <_printf_i+0x20c>
 8014d12:	6821      	ldr	r1, [r4, #0]
 8014d14:	f021 0104 	bic.w	r1, r1, #4
 8014d18:	6021      	str	r1, [r4, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d13d      	bne.n	8014d9a <_printf_i+0x16a>
 8014d1e:	2d00      	cmp	r5, #0
 8014d20:	f040 808e 	bne.w	8014e40 <_printf_i+0x210>
 8014d24:	4665      	mov	r5, ip
 8014d26:	2a08      	cmp	r2, #8
 8014d28:	d10b      	bne.n	8014d42 <_printf_i+0x112>
 8014d2a:	6823      	ldr	r3, [r4, #0]
 8014d2c:	07db      	lsls	r3, r3, #31
 8014d2e:	d508      	bpl.n	8014d42 <_printf_i+0x112>
 8014d30:	6923      	ldr	r3, [r4, #16]
 8014d32:	6862      	ldr	r2, [r4, #4]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	bfde      	ittt	le
 8014d38:	2330      	movle	r3, #48	; 0x30
 8014d3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d42:	ebac 0305 	sub.w	r3, ip, r5
 8014d46:	6123      	str	r3, [r4, #16]
 8014d48:	f8cd 8000 	str.w	r8, [sp]
 8014d4c:	463b      	mov	r3, r7
 8014d4e:	aa03      	add	r2, sp, #12
 8014d50:	4621      	mov	r1, r4
 8014d52:	4630      	mov	r0, r6
 8014d54:	f7ff fef6 	bl	8014b44 <_printf_common>
 8014d58:	3001      	adds	r0, #1
 8014d5a:	d14d      	bne.n	8014df8 <_printf_i+0x1c8>
 8014d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d60:	b005      	add	sp, #20
 8014d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d66:	4839      	ldr	r0, [pc, #228]	; (8014e4c <_printf_i+0x21c>)
 8014d68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014d6c:	6813      	ldr	r3, [r2, #0]
 8014d6e:	6821      	ldr	r1, [r4, #0]
 8014d70:	1d1d      	adds	r5, r3, #4
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	6015      	str	r5, [r2, #0]
 8014d76:	060a      	lsls	r2, r1, #24
 8014d78:	d50b      	bpl.n	8014d92 <_printf_i+0x162>
 8014d7a:	07ca      	lsls	r2, r1, #31
 8014d7c:	bf44      	itt	mi
 8014d7e:	f041 0120 	orrmi.w	r1, r1, #32
 8014d82:	6021      	strmi	r1, [r4, #0]
 8014d84:	b91b      	cbnz	r3, 8014d8e <_printf_i+0x15e>
 8014d86:	6822      	ldr	r2, [r4, #0]
 8014d88:	f022 0220 	bic.w	r2, r2, #32
 8014d8c:	6022      	str	r2, [r4, #0]
 8014d8e:	2210      	movs	r2, #16
 8014d90:	e7b7      	b.n	8014d02 <_printf_i+0xd2>
 8014d92:	064d      	lsls	r5, r1, #25
 8014d94:	bf48      	it	mi
 8014d96:	b29b      	uxthmi	r3, r3
 8014d98:	e7ef      	b.n	8014d7a <_printf_i+0x14a>
 8014d9a:	4665      	mov	r5, ip
 8014d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014da0:	fb02 3311 	mls	r3, r2, r1, r3
 8014da4:	5cc3      	ldrb	r3, [r0, r3]
 8014da6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014daa:	460b      	mov	r3, r1
 8014dac:	2900      	cmp	r1, #0
 8014dae:	d1f5      	bne.n	8014d9c <_printf_i+0x16c>
 8014db0:	e7b9      	b.n	8014d26 <_printf_i+0xf6>
 8014db2:	6813      	ldr	r3, [r2, #0]
 8014db4:	6825      	ldr	r5, [r4, #0]
 8014db6:	6961      	ldr	r1, [r4, #20]
 8014db8:	1d18      	adds	r0, r3, #4
 8014dba:	6010      	str	r0, [r2, #0]
 8014dbc:	0628      	lsls	r0, r5, #24
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	d501      	bpl.n	8014dc6 <_printf_i+0x196>
 8014dc2:	6019      	str	r1, [r3, #0]
 8014dc4:	e002      	b.n	8014dcc <_printf_i+0x19c>
 8014dc6:	066a      	lsls	r2, r5, #25
 8014dc8:	d5fb      	bpl.n	8014dc2 <_printf_i+0x192>
 8014dca:	8019      	strh	r1, [r3, #0]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	6123      	str	r3, [r4, #16]
 8014dd0:	4665      	mov	r5, ip
 8014dd2:	e7b9      	b.n	8014d48 <_printf_i+0x118>
 8014dd4:	6813      	ldr	r3, [r2, #0]
 8014dd6:	1d19      	adds	r1, r3, #4
 8014dd8:	6011      	str	r1, [r2, #0]
 8014dda:	681d      	ldr	r5, [r3, #0]
 8014ddc:	6862      	ldr	r2, [r4, #4]
 8014dde:	2100      	movs	r1, #0
 8014de0:	4628      	mov	r0, r5
 8014de2:	f7eb fa7d 	bl	80002e0 <memchr>
 8014de6:	b108      	cbz	r0, 8014dec <_printf_i+0x1bc>
 8014de8:	1b40      	subs	r0, r0, r5
 8014dea:	6060      	str	r0, [r4, #4]
 8014dec:	6863      	ldr	r3, [r4, #4]
 8014dee:	6123      	str	r3, [r4, #16]
 8014df0:	2300      	movs	r3, #0
 8014df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014df6:	e7a7      	b.n	8014d48 <_printf_i+0x118>
 8014df8:	6923      	ldr	r3, [r4, #16]
 8014dfa:	462a      	mov	r2, r5
 8014dfc:	4639      	mov	r1, r7
 8014dfe:	4630      	mov	r0, r6
 8014e00:	47c0      	blx	r8
 8014e02:	3001      	adds	r0, #1
 8014e04:	d0aa      	beq.n	8014d5c <_printf_i+0x12c>
 8014e06:	6823      	ldr	r3, [r4, #0]
 8014e08:	079b      	lsls	r3, r3, #30
 8014e0a:	d413      	bmi.n	8014e34 <_printf_i+0x204>
 8014e0c:	68e0      	ldr	r0, [r4, #12]
 8014e0e:	9b03      	ldr	r3, [sp, #12]
 8014e10:	4298      	cmp	r0, r3
 8014e12:	bfb8      	it	lt
 8014e14:	4618      	movlt	r0, r3
 8014e16:	e7a3      	b.n	8014d60 <_printf_i+0x130>
 8014e18:	2301      	movs	r3, #1
 8014e1a:	464a      	mov	r2, r9
 8014e1c:	4639      	mov	r1, r7
 8014e1e:	4630      	mov	r0, r6
 8014e20:	47c0      	blx	r8
 8014e22:	3001      	adds	r0, #1
 8014e24:	d09a      	beq.n	8014d5c <_printf_i+0x12c>
 8014e26:	3501      	adds	r5, #1
 8014e28:	68e3      	ldr	r3, [r4, #12]
 8014e2a:	9a03      	ldr	r2, [sp, #12]
 8014e2c:	1a9b      	subs	r3, r3, r2
 8014e2e:	42ab      	cmp	r3, r5
 8014e30:	dcf2      	bgt.n	8014e18 <_printf_i+0x1e8>
 8014e32:	e7eb      	b.n	8014e0c <_printf_i+0x1dc>
 8014e34:	2500      	movs	r5, #0
 8014e36:	f104 0919 	add.w	r9, r4, #25
 8014e3a:	e7f5      	b.n	8014e28 <_printf_i+0x1f8>
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d1ac      	bne.n	8014d9a <_printf_i+0x16a>
 8014e40:	7803      	ldrb	r3, [r0, #0]
 8014e42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e4a:	e76c      	b.n	8014d26 <_printf_i+0xf6>
 8014e4c:	08015209 	.word	0x08015209
 8014e50:	0801521a 	.word	0x0801521a

08014e54 <memmove>:
 8014e54:	4288      	cmp	r0, r1
 8014e56:	b510      	push	{r4, lr}
 8014e58:	eb01 0302 	add.w	r3, r1, r2
 8014e5c:	d807      	bhi.n	8014e6e <memmove+0x1a>
 8014e5e:	1e42      	subs	r2, r0, #1
 8014e60:	4299      	cmp	r1, r3
 8014e62:	d00a      	beq.n	8014e7a <memmove+0x26>
 8014e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014e6c:	e7f8      	b.n	8014e60 <memmove+0xc>
 8014e6e:	4283      	cmp	r3, r0
 8014e70:	d9f5      	bls.n	8014e5e <memmove+0xa>
 8014e72:	1881      	adds	r1, r0, r2
 8014e74:	1ad2      	subs	r2, r2, r3
 8014e76:	42d3      	cmn	r3, r2
 8014e78:	d100      	bne.n	8014e7c <memmove+0x28>
 8014e7a:	bd10      	pop	{r4, pc}
 8014e7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014e84:	e7f7      	b.n	8014e76 <memmove+0x22>
	...

08014e88 <_free_r>:
 8014e88:	b538      	push	{r3, r4, r5, lr}
 8014e8a:	4605      	mov	r5, r0
 8014e8c:	2900      	cmp	r1, #0
 8014e8e:	d045      	beq.n	8014f1c <_free_r+0x94>
 8014e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e94:	1f0c      	subs	r4, r1, #4
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	bfb8      	it	lt
 8014e9a:	18e4      	addlt	r4, r4, r3
 8014e9c:	f000 f8d2 	bl	8015044 <__malloc_lock>
 8014ea0:	4a1f      	ldr	r2, [pc, #124]	; (8014f20 <_free_r+0x98>)
 8014ea2:	6813      	ldr	r3, [r2, #0]
 8014ea4:	4610      	mov	r0, r2
 8014ea6:	b933      	cbnz	r3, 8014eb6 <_free_r+0x2e>
 8014ea8:	6063      	str	r3, [r4, #4]
 8014eaa:	6014      	str	r4, [r2, #0]
 8014eac:	4628      	mov	r0, r5
 8014eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014eb2:	f000 b8c8 	b.w	8015046 <__malloc_unlock>
 8014eb6:	42a3      	cmp	r3, r4
 8014eb8:	d90c      	bls.n	8014ed4 <_free_r+0x4c>
 8014eba:	6821      	ldr	r1, [r4, #0]
 8014ebc:	1862      	adds	r2, r4, r1
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	bf04      	itt	eq
 8014ec2:	681a      	ldreq	r2, [r3, #0]
 8014ec4:	685b      	ldreq	r3, [r3, #4]
 8014ec6:	6063      	str	r3, [r4, #4]
 8014ec8:	bf04      	itt	eq
 8014eca:	1852      	addeq	r2, r2, r1
 8014ecc:	6022      	streq	r2, [r4, #0]
 8014ece:	6004      	str	r4, [r0, #0]
 8014ed0:	e7ec      	b.n	8014eac <_free_r+0x24>
 8014ed2:	4613      	mov	r3, r2
 8014ed4:	685a      	ldr	r2, [r3, #4]
 8014ed6:	b10a      	cbz	r2, 8014edc <_free_r+0x54>
 8014ed8:	42a2      	cmp	r2, r4
 8014eda:	d9fa      	bls.n	8014ed2 <_free_r+0x4a>
 8014edc:	6819      	ldr	r1, [r3, #0]
 8014ede:	1858      	adds	r0, r3, r1
 8014ee0:	42a0      	cmp	r0, r4
 8014ee2:	d10b      	bne.n	8014efc <_free_r+0x74>
 8014ee4:	6820      	ldr	r0, [r4, #0]
 8014ee6:	4401      	add	r1, r0
 8014ee8:	1858      	adds	r0, r3, r1
 8014eea:	4282      	cmp	r2, r0
 8014eec:	6019      	str	r1, [r3, #0]
 8014eee:	d1dd      	bne.n	8014eac <_free_r+0x24>
 8014ef0:	6810      	ldr	r0, [r2, #0]
 8014ef2:	6852      	ldr	r2, [r2, #4]
 8014ef4:	605a      	str	r2, [r3, #4]
 8014ef6:	4401      	add	r1, r0
 8014ef8:	6019      	str	r1, [r3, #0]
 8014efa:	e7d7      	b.n	8014eac <_free_r+0x24>
 8014efc:	d902      	bls.n	8014f04 <_free_r+0x7c>
 8014efe:	230c      	movs	r3, #12
 8014f00:	602b      	str	r3, [r5, #0]
 8014f02:	e7d3      	b.n	8014eac <_free_r+0x24>
 8014f04:	6820      	ldr	r0, [r4, #0]
 8014f06:	1821      	adds	r1, r4, r0
 8014f08:	428a      	cmp	r2, r1
 8014f0a:	bf04      	itt	eq
 8014f0c:	6811      	ldreq	r1, [r2, #0]
 8014f0e:	6852      	ldreq	r2, [r2, #4]
 8014f10:	6062      	str	r2, [r4, #4]
 8014f12:	bf04      	itt	eq
 8014f14:	1809      	addeq	r1, r1, r0
 8014f16:	6021      	streq	r1, [r4, #0]
 8014f18:	605c      	str	r4, [r3, #4]
 8014f1a:	e7c7      	b.n	8014eac <_free_r+0x24>
 8014f1c:	bd38      	pop	{r3, r4, r5, pc}
 8014f1e:	bf00      	nop
 8014f20:	24064a84 	.word	0x24064a84

08014f24 <_malloc_r>:
 8014f24:	b570      	push	{r4, r5, r6, lr}
 8014f26:	1ccd      	adds	r5, r1, #3
 8014f28:	f025 0503 	bic.w	r5, r5, #3
 8014f2c:	3508      	adds	r5, #8
 8014f2e:	2d0c      	cmp	r5, #12
 8014f30:	bf38      	it	cc
 8014f32:	250c      	movcc	r5, #12
 8014f34:	2d00      	cmp	r5, #0
 8014f36:	4606      	mov	r6, r0
 8014f38:	db01      	blt.n	8014f3e <_malloc_r+0x1a>
 8014f3a:	42a9      	cmp	r1, r5
 8014f3c:	d903      	bls.n	8014f46 <_malloc_r+0x22>
 8014f3e:	230c      	movs	r3, #12
 8014f40:	6033      	str	r3, [r6, #0]
 8014f42:	2000      	movs	r0, #0
 8014f44:	bd70      	pop	{r4, r5, r6, pc}
 8014f46:	f000 f87d 	bl	8015044 <__malloc_lock>
 8014f4a:	4a21      	ldr	r2, [pc, #132]	; (8014fd0 <_malloc_r+0xac>)
 8014f4c:	6814      	ldr	r4, [r2, #0]
 8014f4e:	4621      	mov	r1, r4
 8014f50:	b991      	cbnz	r1, 8014f78 <_malloc_r+0x54>
 8014f52:	4c20      	ldr	r4, [pc, #128]	; (8014fd4 <_malloc_r+0xb0>)
 8014f54:	6823      	ldr	r3, [r4, #0]
 8014f56:	b91b      	cbnz	r3, 8014f60 <_malloc_r+0x3c>
 8014f58:	4630      	mov	r0, r6
 8014f5a:	f000 f863 	bl	8015024 <_sbrk_r>
 8014f5e:	6020      	str	r0, [r4, #0]
 8014f60:	4629      	mov	r1, r5
 8014f62:	4630      	mov	r0, r6
 8014f64:	f000 f85e 	bl	8015024 <_sbrk_r>
 8014f68:	1c43      	adds	r3, r0, #1
 8014f6a:	d124      	bne.n	8014fb6 <_malloc_r+0x92>
 8014f6c:	230c      	movs	r3, #12
 8014f6e:	6033      	str	r3, [r6, #0]
 8014f70:	4630      	mov	r0, r6
 8014f72:	f000 f868 	bl	8015046 <__malloc_unlock>
 8014f76:	e7e4      	b.n	8014f42 <_malloc_r+0x1e>
 8014f78:	680b      	ldr	r3, [r1, #0]
 8014f7a:	1b5b      	subs	r3, r3, r5
 8014f7c:	d418      	bmi.n	8014fb0 <_malloc_r+0x8c>
 8014f7e:	2b0b      	cmp	r3, #11
 8014f80:	d90f      	bls.n	8014fa2 <_malloc_r+0x7e>
 8014f82:	600b      	str	r3, [r1, #0]
 8014f84:	50cd      	str	r5, [r1, r3]
 8014f86:	18cc      	adds	r4, r1, r3
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f000 f85c 	bl	8015046 <__malloc_unlock>
 8014f8e:	f104 000b 	add.w	r0, r4, #11
 8014f92:	1d23      	adds	r3, r4, #4
 8014f94:	f020 0007 	bic.w	r0, r0, #7
 8014f98:	1ac3      	subs	r3, r0, r3
 8014f9a:	d0d3      	beq.n	8014f44 <_malloc_r+0x20>
 8014f9c:	425a      	negs	r2, r3
 8014f9e:	50e2      	str	r2, [r4, r3]
 8014fa0:	e7d0      	b.n	8014f44 <_malloc_r+0x20>
 8014fa2:	428c      	cmp	r4, r1
 8014fa4:	684b      	ldr	r3, [r1, #4]
 8014fa6:	bf16      	itet	ne
 8014fa8:	6063      	strne	r3, [r4, #4]
 8014faa:	6013      	streq	r3, [r2, #0]
 8014fac:	460c      	movne	r4, r1
 8014fae:	e7eb      	b.n	8014f88 <_malloc_r+0x64>
 8014fb0:	460c      	mov	r4, r1
 8014fb2:	6849      	ldr	r1, [r1, #4]
 8014fb4:	e7cc      	b.n	8014f50 <_malloc_r+0x2c>
 8014fb6:	1cc4      	adds	r4, r0, #3
 8014fb8:	f024 0403 	bic.w	r4, r4, #3
 8014fbc:	42a0      	cmp	r0, r4
 8014fbe:	d005      	beq.n	8014fcc <_malloc_r+0xa8>
 8014fc0:	1a21      	subs	r1, r4, r0
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f000 f82e 	bl	8015024 <_sbrk_r>
 8014fc8:	3001      	adds	r0, #1
 8014fca:	d0cf      	beq.n	8014f6c <_malloc_r+0x48>
 8014fcc:	6025      	str	r5, [r4, #0]
 8014fce:	e7db      	b.n	8014f88 <_malloc_r+0x64>
 8014fd0:	24064a84 	.word	0x24064a84
 8014fd4:	24064a88 	.word	0x24064a88

08014fd8 <_realloc_r>:
 8014fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fda:	4607      	mov	r7, r0
 8014fdc:	4614      	mov	r4, r2
 8014fde:	460e      	mov	r6, r1
 8014fe0:	b921      	cbnz	r1, 8014fec <_realloc_r+0x14>
 8014fe2:	4611      	mov	r1, r2
 8014fe4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014fe8:	f7ff bf9c 	b.w	8014f24 <_malloc_r>
 8014fec:	b922      	cbnz	r2, 8014ff8 <_realloc_r+0x20>
 8014fee:	f7ff ff4b 	bl	8014e88 <_free_r>
 8014ff2:	4625      	mov	r5, r4
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ff8:	f000 f826 	bl	8015048 <_malloc_usable_size_r>
 8014ffc:	42a0      	cmp	r0, r4
 8014ffe:	d20f      	bcs.n	8015020 <_realloc_r+0x48>
 8015000:	4621      	mov	r1, r4
 8015002:	4638      	mov	r0, r7
 8015004:	f7ff ff8e 	bl	8014f24 <_malloc_r>
 8015008:	4605      	mov	r5, r0
 801500a:	2800      	cmp	r0, #0
 801500c:	d0f2      	beq.n	8014ff4 <_realloc_r+0x1c>
 801500e:	4631      	mov	r1, r6
 8015010:	4622      	mov	r2, r4
 8015012:	f7ff fbfd 	bl	8014810 <memcpy>
 8015016:	4631      	mov	r1, r6
 8015018:	4638      	mov	r0, r7
 801501a:	f7ff ff35 	bl	8014e88 <_free_r>
 801501e:	e7e9      	b.n	8014ff4 <_realloc_r+0x1c>
 8015020:	4635      	mov	r5, r6
 8015022:	e7e7      	b.n	8014ff4 <_realloc_r+0x1c>

08015024 <_sbrk_r>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	4c06      	ldr	r4, [pc, #24]	; (8015040 <_sbrk_r+0x1c>)
 8015028:	2300      	movs	r3, #0
 801502a:	4605      	mov	r5, r0
 801502c:	4608      	mov	r0, r1
 801502e:	6023      	str	r3, [r4, #0]
 8015030:	f7ec fa60 	bl	80014f4 <_sbrk>
 8015034:	1c43      	adds	r3, r0, #1
 8015036:	d102      	bne.n	801503e <_sbrk_r+0x1a>
 8015038:	6823      	ldr	r3, [r4, #0]
 801503a:	b103      	cbz	r3, 801503e <_sbrk_r+0x1a>
 801503c:	602b      	str	r3, [r5, #0]
 801503e:	bd38      	pop	{r3, r4, r5, pc}
 8015040:	24070fe0 	.word	0x24070fe0

08015044 <__malloc_lock>:
 8015044:	4770      	bx	lr

08015046 <__malloc_unlock>:
 8015046:	4770      	bx	lr

08015048 <_malloc_usable_size_r>:
 8015048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801504c:	1f18      	subs	r0, r3, #4
 801504e:	2b00      	cmp	r3, #0
 8015050:	bfbc      	itt	lt
 8015052:	580b      	ldrlt	r3, [r1, r0]
 8015054:	18c0      	addlt	r0, r0, r3
 8015056:	4770      	bx	lr

08015058 <_init>:
 8015058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505a:	bf00      	nop
 801505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801505e:	bc08      	pop	{r3}
 8015060:	469e      	mov	lr, r3
 8015062:	4770      	bx	lr

08015064 <_fini>:
 8015064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015066:	bf00      	nop
 8015068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801506a:	bc08      	pop	{r3}
 801506c:	469e      	mov	lr, r3
 801506e:	4770      	bx	lr
