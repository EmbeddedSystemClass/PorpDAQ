
PorpDAQV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001598c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08015c2c  08015c2c  00025c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015de8  08015de8  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08015de8  08015de8  00025de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015df0  08015df0  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015df0  08015df0  00025df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015df4  08015df4  00025df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08015df8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00070f7c  24000080  08015e70  00030080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24070ffc  08015e70  00030ffc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000472dc  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074e8  00000000  00000000  00077382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c8  00000000  00000000  0007e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002050  00000000  00000000  00080b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040038  00000000  00000000  00082b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fd0c  00000000  00000000  000c2bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001881a9  00000000  00000000  000f28cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0027aa75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009520  00000000  00000000  0027aac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015c14 	.word	0x08015c14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08015c14 	.word	0x08015c14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MX_ADC3_Init>:
 * @brief ADC3 Initialisation function
 * LQFP100 Package has a max frequency of 19MHz.
 *
 */
void MX_ADC3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]
 800068e:	619a      	str	r2, [r3, #24]

  /** Common config
   */
  hadc3.Instance = ADC3;
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_ADC3_Init+0xc8>)
 8000692:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <MX_ADC3_Init+0xcc>)
 8000694:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_ADC3_Init+0xc8>)
 8000698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800069c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006ca:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006da:	2203      	movs	r2, #3
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_ADC3_Init+0xc8>)
 80006f6:	f001 fde7 	bl	80022c8 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 fd64 	bl	80011cc <Error_Handler>
   */
  // BGA Package can sample for at least 16.5 cycles to
  // still be within the limit for 500Khz. This chip apparently
  // won't sample correctly at anything less than 2.5 cycles
  // Sampling time
  sConfig.Channel = ADC_CHANNEL_0;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000708:	2306      	movs	r3, #6
 800070a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070c:	2301      	movs	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000710:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000714:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_ADC3_Init+0xc8>)
 8000728:	f002 fae2 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 8000732:	f000 fd4b 	bl	80011cc <Error_Handler>
  }

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	24064b0c 	.word	0x24064b0c
 8000744:	58026000 	.word	0x58026000

08000748 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a31      	ldr	r2, [pc, #196]	; (800081c <HAL_ADC_MspInit+0xd4>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d15c      	bne.n	8000814 <HAL_ADC_MspInit+0xcc>
  {
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_ADC_MspInit+0xd8>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <HAL_ADC_MspInit+0xd8>)
 8000762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HAL_ADC_MspInit+0xd8>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ADC_MspInit+0xd8>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_ADC_MspInit+0xd8>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <HAL_ADC_MspInit+0xd8>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    Use a direct channel for fastest ADC channel
     */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000796:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800079a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800079e:	f001 fb25 	bl	8001dec <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007a4:	4a20      	ldr	r2, [pc, #128]	; (8000828 <HAL_ADC_MspInit+0xe0>)
 80007a6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007aa:	2273      	movs	r2, #115	; 0x73
 80007ac:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80007e8:	480e      	ldr	r0, [pc, #56]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007ea:	f003 faa3 	bl	8003d34 <HAL_DMA_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80007f4:	f000 fcea 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 80007fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80007fe:	4a09      	ldr	r2, [pc, #36]	; (8000824 <HAL_ADC_MspInit+0xdc>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2105      	movs	r1, #5
 8000808:	207f      	movs	r0, #127	; 0x7f
 800080a:	f003 f9ef 	bl	8003bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800080e:	207f      	movs	r0, #127	; 0x7f
 8000810:	f003 fa06 	bl	8003c20 <HAL_NVIC_EnableIRQ>
  }
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58026000 	.word	0x58026000
 8000820:	58024400 	.word	0x58024400
 8000824:	24064a94 	.word	0x24064a94
 8000828:	40020010 	.word	0x40020010

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_DMA_Init+0x5c>)
 8000834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_DMA_Init+0x5c>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_DMA_Init+0x5c>)
 8000844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2105      	movs	r1, #5
 8000854:	200b      	movs	r0, #11
 8000856:	f003 f9c9 	bl	8003bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800085a:	200b      	movs	r0, #11
 800085c:	f003 f9e0 	bl	8003c20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	200c      	movs	r0, #12
 8000866:	f003 f9c1 	bl	8003bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800086a:	200c      	movs	r0, #12
 800086c:	f003 f9d8 	bl	8003c20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2105      	movs	r1, #5
 8000874:	200d      	movs	r0, #13
 8000876:	f003 f9b9 	bl	8003bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800087a:	200d      	movs	r0, #13
 800087c:	f003 f9d0 	bl	8003c20 <HAL_NVIC_EnableIRQ>

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024400 	.word	0x58024400

0800088c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800089c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4a06      	ldr	r2, [pc, #24]	; (80008bc <vApplicationGetIdleTaskMemory+0x30>)
 80008a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	240080a8 	.word	0x240080a8
 80008bc:	240080fc 	.word	0x240080fc

080008c0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b092      	sub	sp, #72	; 0x48
 80008c4:	af00      	add	r7, sp, #0
  osThreadDef(prod_task, vProducer, osPriorityHigh, 0, 9216 );
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_FREERTOS_Init+0x7c>)
 80008c8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80008cc:	461d      	mov	r5, r3
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  prodTaskHandle = osThreadCreate(osThread(prod_task), NULL);
 80008da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f011 f8c1 	bl	8011a68 <osThreadCreate>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_FREERTOS_Init+0x80>)
 80008ea:	6013      	str	r3, [r2, #0]

  osThreadDef(con_task, vConsumer, osPriorityHigh, 0, 10752 );
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_FREERTOS_Init+0x84>)
 80008ee:	f107 0410 	add.w	r4, r7, #16
 80008f2:	461d      	mov	r5, r3
 80008f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  conTaskHandle = osThreadCreate(osThread(con_task), NULL);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f011 f8ae 	bl	8011a68 <osThreadCreate>
 800090c:	4603      	mov	r3, r0
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <MX_FREERTOS_Init+0x88>)
 8000910:	6013      	str	r3, [r2, #0]

  osMailQDef(mail, MAIL_SIZE, ADC_DATA);
 8000912:	2306      	movs	r3, #6
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	60bb      	str	r3, [r7, #8]
  adcDataMailId = osMailCreate(osMailQ(mail), NULL);
 8000922:	463b      	mov	r3, r7
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f011 fc1c 	bl	8012164 <osMailCreate>
 800092c:	4603      	mov	r3, r0
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <MX_FREERTOS_Init+0x8c>)
 8000930:	6013      	str	r3, [r2, #0]
}
 8000932:	bf00      	nop
 8000934:	3748      	adds	r7, #72	; 0x48
 8000936:	46bd      	mov	sp, r7
 8000938:	bdb0      	pop	{r4, r5, r7, pc}
 800093a:	bf00      	nop
 800093c:	08015c44 	.word	0x08015c44
 8000940:	24064b74 	.word	0x24064b74
 8000944:	08015c60 	.word	0x08015c60
 8000948:	24064b70 	.word	0x24064b70
 800094c:	2406dc34 	.word	0x2406dc34

08000950 <mountSDCard>:
/**
 * @brief Mounts SD Card
 * @retval Nothing
 */
void mountSDCard(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  if(f_mount(&FatFSInstance, SDPath, 1)==FR_OK)
 8000954:	2201      	movs	r2, #1
 8000956:	4915      	ldr	r1, [pc, #84]	; (80009ac <mountSDCard+0x5c>)
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <mountSDCard+0x60>)
 800095a:	f010 f871 	bl	8010a40 <f_mount>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d120      	bne.n	80009a6 <mountSDCard+0x56>
  {
    // Turn on LED if mount was successful
    LED_ON();
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <mountSDCard+0x64>)
 800096c:	f006 f9cc 	bl	8006d08 <HAL_GPIO_WritePin>
    if(f_open(&wavFile, WAV_FILE, FA_WRITE|FA_CREATE_ALWAYS) == FR_OK)
 8000970:	220a      	movs	r2, #10
 8000972:	4911      	ldr	r1, [pc, #68]	; (80009b8 <mountSDCard+0x68>)
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <mountSDCard+0x6c>)
 8000976:	f010 f8c7 	bl	8010b08 <f_open>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d112      	bne.n	80009a6 <mountSDCard+0x56>
    {
      // Initialise the WAV Header
      InitialiseWavEncoder(AUDIO_FREQ, wavHeaderBuff, &WaveFormat);
 8000980:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <mountSDCard+0x70>)
 8000982:	4910      	ldr	r1, [pc, #64]	; (80009c4 <mountSDCard+0x74>)
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <mountSDCard+0x78>)
 8000986:	f001 f85d 	bl	8001a44 <InitialiseWavEncoder>
      // Write header file
      wav_write_result = f_write(&wavFile, wavHeaderBuff, 44,(void*)&bytes_written);
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <mountSDCard+0x7c>)
 800098c:	222c      	movs	r2, #44	; 0x2c
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <mountSDCard+0x74>)
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <mountSDCard+0x6c>)
 8000992:	f010 fa8c 	bl	8010eae <f_write>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <mountSDCard+0x80>)
 800099c:	701a      	strb	r2, [r3, #0]
      // return size of file
      file_size = bytes_written;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <mountSDCard+0x7c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <mountSDCard+0x84>)
 80009a4:	6013      	str	r3, [r2, #0]
    }
  }
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2406ef40 	.word	0x2406ef40
 80009b0:	24068bb4 	.word	0x24068bb4
 80009b4:	58020400 	.word	0x58020400
 80009b8:	2406ec7c 	.word	0x2406ec7c
 80009bc:	2406dc4c 	.word	0x2406dc4c
 80009c0:	24066384 	.word	0x24066384
 80009c4:	24069bec 	.word	0x24069bec
 80009c8:	0007a120 	.word	0x0007a120
 80009cc:	240080a4 	.word	0x240080a4
 80009d0:	2406dc3c 	.word	0x2406dc3c
 80009d4:	2406ec90 	.word	0x2406ec90

080009d8 <setFileName>:
 * @brief sets filename for each
 * WAV file on each UART RX callback
 * @retval nothing
 */
void setFileName(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  // use waypoint index to write file name here
  waypoint_index++;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <setFileName+0x20>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <setFileName+0x20>)
 80009e4:	6013      	str	r3, [r2, #0]
  snprintf(WAV_FILE, sizeof(WAV_FILE), "%d.wav", waypoint_index);
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <setFileName+0x20>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <setFileName+0x24>)
 80009ec:	2108      	movs	r1, #8
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <setFileName+0x28>)
 80009f0:	f014 fcdc 	bl	80153ac <sniprintf>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	240080a0 	.word	0x240080a0
 80009fc:	08015c7c 	.word	0x08015c7c
 8000a00:	2406ec7c 	.word	0x2406ec7c

08000a04 <startADC>:
/**
 * Starts the ADC
 * @retval nothing
 */
void startADC(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc_values, ADC_BUFFER_LENGTH) != HAL_OK)
 8000a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0c:	4902      	ldr	r1, [pc, #8]	; (8000a18 <startADC+0x14>)
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <startADC+0x18>)
 8000a10:	f001 fdfa 	bl	8002608 <HAL_ADC_Start_DMA>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	240000a0 	.word	0x240000a0
 8000a1c:	24064b0c 	.word	0x24064b0c

08000a20 <stopADC>:

/**
 * @brief Stops the ADC
 */
void stopADC(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  if(HAL_ADC_Stop_DMA(&hadc3) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <stopADC+0x18>)
 8000a26:	f001 feb3 	bl	8002790 <HAL_ADC_Stop_DMA>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <stopADC+0x14>
  {
    Error_Handler();
 8000a30:	f000 fbcc 	bl	80011cc <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	24064b0c 	.word	0x24064b0c

08000a3c <vProducer>:
 * @brief Producer Thread
 * Starts the ADC and mounts
 * the SDCard
 */
void vProducer(void const * argument)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6178      	str	r0, [r7, #20]
  for(;;)
  {
    prodEvent = osSignalWait(0x01, osWaitForever);
 8000a44:	4c0c      	ldr	r4, [pc, #48]	; (8000a78 <vProducer+0x3c>)
 8000a46:	463b      	mov	r3, r7
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f011 f896 	bl	8011b80 <osSignalWait>
 8000a54:	463b      	mov	r3, r7
 8000a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(prodEvent.status == osEventSignal)
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <vProducer+0x3c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b08      	cmp	r3, #8
 8000a64:	d1ee      	bne.n	8000a44 <vProducer+0x8>
    {
      startADC();
 8000a66:	f7ff ffcd 	bl	8000a04 <startADC>
      mountSDCard();
 8000a6a:	f7ff ff71 	bl	8000950 <mountSDCard>
      osThreadSuspend(NULL);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f011 fcad 	bl	80123ce <osThreadSuspend>
    prodEvent = osSignalWait(0x01, osWaitForever);
 8000a74:	e7e6      	b.n	8000a44 <vProducer+0x8>
 8000a76:	bf00      	nop
 8000a78:	2406dc40 	.word	0x2406dc40

08000a7c <vConsumer>:
 * runs the FFT compute
 * function
 * @retval None
 */
void vConsumer(void const * argument)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6178      	str	r0, [r7, #20]
  ADC_DATA *rx_data;
  for(;;)
  {
    // Wait for signal to start writing data
    writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <vConsumer+0xe8>)
 8000a86:	6819      	ldr	r1, [r3, #0]
 8000a88:	4c37      	ldr	r4, [pc, #220]	; (8000b68 <vConsumer+0xec>)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	4618      	mov	r0, r3
 8000a92:	f011 fc13 	bl	80122bc <osMailGet>
 8000a96:	463b      	mov	r3, r7
 8000a98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(writeEvent.status == osEventMail)
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <vConsumer+0xec>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b20      	cmp	r3, #32
 8000aa6:	d124      	bne.n	8000af2 <vConsumer+0x76>
    {
      // write Data to SD card
      rx_data =  writeEvent.value.p;
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <vConsumer+0xec>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	61fb      	str	r3, [r7, #28]
      memcpy(sd_buff, rx_data->data, sizeof(sd_buff));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	482d      	ldr	r0, [pc, #180]	; (8000b6c <vConsumer+0xf0>)
 8000ab8:	f014 fc62 	bl	8015380 <memcpy>
      if(wav_write_result == FR_OK)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <vConsumer+0xf4>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d110      	bne.n	8000ae6 <vConsumer+0x6a>
      {
        if( f_write(&wavFile, (uint8_t*)sd_buff, sizeof(sd_buff), (void*)&bytes_written) == FR_OK)
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <vConsumer+0xf8>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aca:	4928      	ldr	r1, [pc, #160]	; (8000b6c <vConsumer+0xf0>)
 8000acc:	482a      	ldr	r0, [pc, #168]	; (8000b78 <vConsumer+0xfc>)
 8000ace:	f010 f9ee 	bl	8010eae <f_write>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d106      	bne.n	8000ae6 <vConsumer+0x6a>
        {
          file_size+=bytes_written;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <vConsumer+0x100>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <vConsumer+0xf8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <vConsumer+0x100>)
 8000ae4:	6013      	str	r3, [r2, #0]
        }
      }
      //  computeFFT();
      // Release datra from queue after writing
      osMailFree(adcDataMailId, rx_data);
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <vConsumer+0xe8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69f9      	ldr	r1, [r7, #28]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f011 fc59 	bl	80123a4 <osMailFree>
    }

    // Wait for signal to stop recording dara
    consEvent = osSignalWait(0x02, 0);
 8000af2:	4c23      	ldr	r4, [pc, #140]	; (8000b80 <vConsumer+0x104>)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f011 f840 	bl	8011b80 <osSignalWait>
 8000b00:	463b      	mov	r3, r7
 8000b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if(consEvent.status == osEventSignal)
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <vConsumer+0x104>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d1b8      	bne.n	8000a84 <vConsumer+0x8>
    {
      stopADC();
 8000b12:	f7ff ff85 	bl	8000a20 <stopADC>
      if(f_lseek(&wavFile, 0) == FR_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <vConsumer+0xfc>)
 8000b1a:	f010 fc43 	bl	80113a4 <f_lseek>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1af      	bne.n	8000a84 <vConsumer+0x8>
      {
        WavHeaderUpdate(wavHeaderBuff, &WaveFormat, file_size);
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <vConsumer+0x100>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4916      	ldr	r1, [pc, #88]	; (8000b84 <vConsumer+0x108>)
 8000b2c:	4816      	ldr	r0, [pc, #88]	; (8000b88 <vConsumer+0x10c>)
 8000b2e:	f000 ff47 	bl	80019c0 <WavHeaderUpdate>
        // Update wav File
        if(f_write(&wavFile, wavHeaderBuff, sizeof(WaveFormat), (void*)&bytes_written)==FR_OK)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <vConsumer+0xf8>)
 8000b34:	222c      	movs	r2, #44	; 0x2c
 8000b36:	4914      	ldr	r1, [pc, #80]	; (8000b88 <vConsumer+0x10c>)
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <vConsumer+0xfc>)
 8000b3a:	f010 f9b8 	bl	8010eae <f_write>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d19f      	bne.n	8000a84 <vConsumer+0x8>
        {
          //close file
          f_close(&wavFile);
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <vConsumer+0xfc>)
 8000b46:	f010 fbfe 	bl	8011346 <f_close>
          // Turn off the LED
          LED_OFF();
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b50:	480e      	ldr	r0, [pc, #56]	; (8000b8c <vConsumer+0x110>)
 8000b52:	f006 f8d9 	bl	8006d08 <HAL_GPIO_WritePin>
          // release to Producer thread
          osThreadResume(prodTaskHandle);
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <vConsumer+0x114>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f011 fc44 	bl	80123e8 <osThreadResume>
    writeEvent = osMailGet(adcDataMailId, osWaitForever);
 8000b60:	e790      	b.n	8000a84 <vConsumer+0x8>
 8000b62:	bf00      	nop
 8000b64:	2406dc34 	.word	0x2406dc34
 8000b68:	2406ec84 	.word	0x2406ec84
 8000b6c:	24069c30 	.word	0x24069c30
 8000b70:	2406dc3c 	.word	0x2406dc3c
 8000b74:	240080a4 	.word	0x240080a4
 8000b78:	2406dc4c 	.word	0x2406dc4c
 8000b7c:	2406ec90 	.word	0x2406ec90
 8000b80:	2406ec94 	.word	0x2406ec94
 8000b84:	24066384 	.word	0x24066384
 8000b88:	24069bec 	.word	0x24069bec
 8000b8c:	58020400 	.word	0x58020400
 8000b90:	24064b74 	.word	0x24064b74

08000b94 <HAL_ADC_ConvHalfCpltCallback>:




void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba4:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dd1d      	ble.n	8000be8 <HAL_ADC_ConvHalfCpltCallback+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f003 021f 	and.w	r2, r3, #31
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
}
 8000bc0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3320      	adds	r3, #32
 8000bce:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b20      	subs	r3, #32
 8000bd4:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	dcf2      	bgt.n	8000bc2 <HAL_ADC_ConvHalfCpltCallback+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bdc:	f3bf 8f4f 	dsb	sy
}
 8000be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000be2:	f3bf 8f6f 	isb	sy
}
 8000be6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000be8:	bf00      	nop

  // Invalidate Cache address. Just casual H7 things
  SCB_InvalidateDCache_by_Addr((uint32_t*)&adc_values[0], ADC_BUFFER_LENGTH);
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f011 fb0e 	bl	8012214 <osMailAlloc>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000bfc:	6013      	str	r3, [r2, #0]
  memcpy(prod_data->data, adc_values, sizeof(adc_values)/2);
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c06:	490a      	ldr	r1, [pc, #40]	; (8000c30 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f014 fbb9 	bl	8015380 <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f011 fb11 	bl	8012240 <osMailPut>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8000c24:	601a      	str	r2, [r3, #0]
    // Handle Error here
  }



}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	240000a0 	.word	0x240000a0
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	2406dc34 	.word	0x2406dc34
 8000c3c:	2406dc38 	.word	0x2406dc38
 8000c40:	2406dc30 	.word	0x2406dc30

08000c44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c54:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dd1d      	ble.n	8000c98 <HAL_ADC_ConvCpltCallback+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f003 021f 	and.w	r2, r3, #31
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4413      	add	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c6c:	f3bf 8f4f 	dsb	sy
}
 8000c70:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	3320      	adds	r3, #32
 8000c7e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3b20      	subs	r3, #32
 8000c84:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dcf2      	bgt.n	8000c72 <HAL_ADC_ConvCpltCallback+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8c:	f3bf 8f4f 	dsb	sy
}
 8000c90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c92:	f3bf 8f6f 	isb	sy
}
 8000c96:	bf00      	nop
}
 8000c98:	bf00      	nop


  SCB_InvalidateDCache_by_Addr((uint32_t *) &adc_values[ADC_BUFFER_LENGTH/2], ADC_BUFFER_LENGTH);
  prod_data 	=  osMailAlloc(adcDataMailId, osWaitForever);
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f011 fab6 	bl	8012214 <osMailAlloc>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_ADC_ConvCpltCallback+0xa8>)
 8000cac:	6013      	str	r3, [r2, #0]
  memcpy(prod_data->data, adc_values + ADC_BUFFER_LENGTH/2, sizeof(adc_values)/2);
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_ADC_ConvCpltCallback+0xa8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f014 fb60 	bl	8015380 <memcpy>
  mail_retval = osMailPut(adcDataMailId, prod_data);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_ADC_ConvCpltCallback+0xa8>)
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f011 fab8 	bl	8012240 <osMailPut>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_ADC_ConvCpltCallback+0xac>)
 8000cd6:	601a      	str	r2, [r3, #0]
  if( mail_retval != osOK)
  {
    // Handle Error here
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	240040a0 	.word	0x240040a0
 8000ce4:	e000ed00 	.word	0xe000ed00
 8000ce8:	2406dc34 	.word	0x2406dc34
 8000cec:	2406dc38 	.word	0x2406dc38
 8000cf0:	2406dc30 	.word	0x2406dc30

08000cf4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(huart->Instance == UART8)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_UART_RxCpltCallback+0x48>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d115      	bne.n	8000d32 <HAL_UART_RxCpltCallback+0x3e>
  {
    // Wait for data from the pi.
    if(uart_rx_buffer == 0x31)
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_UART_RxCpltCallback+0x4c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b31      	cmp	r3, #49	; 0x31
 8000d0c:	d107      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x2a>
    {
      setFileName();
 8000d0e:	f7ff fe63 	bl	80009d8 <setFileName>
      osSignalSet(prodTaskHandle, 0x01);
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_UART_RxCpltCallback+0x50>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2101      	movs	r1, #1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f010 fef1 	bl	8011b00 <osSignalSet>
    }
    if(uart_rx_buffer == 0x32)
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_UART_RxCpltCallback+0x4c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b32      	cmp	r3, #50	; 0x32
 8000d24:	d105      	bne.n	8000d32 <HAL_UART_RxCpltCallback+0x3e>
    {
      osSignalSet(conTaskHandle, 0x02);
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_UART_RxCpltCallback+0x54>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f010 fee7 	bl	8011b00 <osSignalSet>
    }
  }
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40007c00 	.word	0x40007c00
 8000d40:	2406eca0 	.word	0x2406eca0
 8000d44:	24064b74 	.word	0x24064b74
 8000d48:	24064b70 	.word	0x24064b70

08000d4c <MX_GPIO_Init>:

/**
 * @brief Initialise GPIO Pins
 */
void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	4a30      	ldr	r2, [pc, #192]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d72:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_GPIO_Init+0xe0>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STAT_GPIO_Port, LED_STAT_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0xe4>)
 8000e00:	f005 ff82 	bl	8006d08 <HAL_GPIO_WritePin>

  /*Configure GPIO LED pin*/
  GPIO_InitStruct.Pin = LED_STAT_Pin;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STAT_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_GPIO_Init+0xe4>)
 8000e1e:	f005 fdc3 	bl	80069a8 <HAL_GPIO_Init>

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58020400 	.word	0x58020400

08000e34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0


  /* MPU Configuration */
  MPU_Config();
 8000e3a:	f000 f987 	bl	800114c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <main+0x108>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d11b      	bne.n	8000e82 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e4a:	f3bf 8f4f 	dsb	sy
}
 8000e4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e50:	f3bf 8f6f 	isb	sy
}
 8000e54:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e56:	4b39      	ldr	r3, [pc, #228]	; (8000f3c <main+0x108>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5e:	f3bf 8f4f 	dsb	sy
}
 8000e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e64:	f3bf 8f6f 	isb	sy
}
 8000e68:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e6a:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <main+0x108>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a33      	ldr	r2, [pc, #204]	; (8000f3c <main+0x108>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e76:	f3bf 8f4f 	dsb	sy
}
 8000e7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7c:	f3bf 8f6f 	isb	sy
}
 8000e80:	e000      	b.n	8000e84 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e82:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <main+0x108>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d138      	bne.n	8000f02 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <main+0x108>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e98:	f3bf 8f4f 	dsb	sy
}
 8000e9c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <main+0x108>)
 8000ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ea4:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	0b5b      	lsrs	r3, r3, #13
 8000eaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000eae:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb8:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	015a      	lsls	r2, r3, #5
 8000ebe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ec2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec8:	491c      	ldr	r1, [pc, #112]	; (8000f3c <main+0x108>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1ef      	bne.n	8000eba <main+0x86>
    } while(sets-- != 0U);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e5      	bne.n	8000eb0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee4:	f3bf 8f4f 	dsb	sy
}
 8000ee8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <main+0x108>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <main+0x108>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
}
 8000efa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000efc:	f3bf 8f6f 	isb	sy
}
 8000f00:	e000      	b.n	8000f04 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f02:	bf00      	nop

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fee6 	bl	8001cd4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f81a 	bl	8000f40 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f7ff ff1e 	bl	8000d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f10:	f7ff fc8c 	bl	800082c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000f14:	f000 f960 	bl	80011d8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f18:	f00d fcfa 	bl	800e910 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000f1c:	f000 fba6 	bl	800166c <MX_TIM3_Init>
  MX_UART8_Init();
 8000f20:	f000 fc4c 	bl	80017bc <MX_UART8_Init>
  MX_ADC3_Init();
 8000f24:	f7ff fba8 	bl	8000678 <MX_ADC3_Init>
  Timer_Start();
 8000f28:	f000 f902 	bl	8001130 <Timer_Start>
  Init_UART_RX();
 8000f2c:	f000 f8ee 	bl	800110c <Init_UART_RX>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000f30:	f7ff fcc6 	bl	80008c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f34:	f010 fd75 	bl	8011a22 <osKernelStart>


  while (1)
 8000f38:	e7fe      	b.n	8000f38 <main+0x104>
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0cc      	sub	sp, #304	; 0x130
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f4a:	224c      	movs	r2, #76	; 0x4c
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f014 fa24 	bl	801539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f014 fa1d 	bl	801539c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4618      	mov	r0, r3
 8000f68:	23bc      	movs	r3, #188	; 0xbc
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f014 fa15 	bl	801539c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f005 fee2 	bl	8006d3c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <SystemClock_Config+0x1bc>)
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	4a5e      	ldr	r2, [pc, #376]	; (80010fc <SystemClock_Config+0x1bc>)
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <SystemClock_Config+0x1bc>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <SystemClock_Config+0x1c0>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a59      	ldr	r2, [pc, #356]	; (8001100 <SystemClock_Config+0x1c0>)
 8000f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b57      	ldr	r3, [pc, #348]	; (8001100 <SystemClock_Config+0x1c0>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb2:	bf00      	nop
 8000fb4:	4b52      	ldr	r3, [pc, #328]	; (8001100 <SystemClock_Config+0x1c0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc0:	d1f8      	bne.n	8000fb4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000fc2:	4b50      	ldr	r3, [pc, #320]	; (8001104 <SystemClock_Config+0x1c4>)
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <SystemClock_Config+0x1c4>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ff2:	2332      	movs	r3, #50	; 0x32
 8000ff4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ffe:	2304      	movs	r3, #4
 8001000:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800100a:	230c      	movs	r3, #12
 800100c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fec5 	bl	8006db0 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800102c:	f000 f8ce 	bl	80011cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	233f      	movs	r3, #63	; 0x3f
 8001032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001042:	2308      	movs	r3, #8
 8001044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f006 fab1 	bl	80075d0 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8001074:	f000 f8aa 	bl	80011cc <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SDMMC
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <SystemClock_Config+0x1c8>)
 800107e:	601a      	str	r2, [r3, #0]
                                             |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2201      	movs	r2, #1
 8001086:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	2209      	movs	r2, #9
 800108e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2202      	movs	r2, #2
 8001096:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	2202      	movs	r2, #2
 800109e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2202      	movs	r2, #2
 80010a6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	22c0      	movs	r2, #192	; 0xc0
 80010ae:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2220      	movs	r2, #32
 80010b6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80010c0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2200      	movs	r2, #0
 80010d0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fe43 	bl	8007d6c <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x1b0>
  {
    Error_Handler();
 80010ec:	f000 f86e 	bl	80011cc <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58000400 	.word	0x58000400
 8001100:	58024800 	.word	0x58024800
 8001104:	58024400 	.word	0x58024400
 8001108:	00090002 	.word	0x00090002

0800110c <Init_UART_RX>:
/**
 * @brief Initialises UART RX DMA Transfer
 * @retval Nothing
 */
void Init_UART_RX(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  if(HAL_UART_Receive_DMA(&huart8, &uart_rx_buffer, 1) != HAL_OK )
 8001110:	2201      	movs	r2, #1
 8001112:	4905      	ldr	r1, [pc, #20]	; (8001128 <Init_UART_RX+0x1c>)
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <Init_UART_RX+0x20>)
 8001116:	f00b f983 	bl	800c420 <HAL_UART_Receive_DMA>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <Init_UART_RX+0x18>
  {
    Error_Handler();
 8001120:	f000 f854 	bl	80011cc <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2406eca0 	.word	0x2406eca0
 800112c:	2406eea8 	.word	0x2406eea8

08001130 <Timer_Start>:
/**
 * @brief Starts ADC Timer
 * @retval None
 */
void Timer_Start(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <Timer_Start+0x18>)
 8001136:	f00a fc31 	bl	800b99c <HAL_TIM_Base_Start>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <Timer_Start+0x14>
  {
    Error_Handler();
 8001140:	f000 f844 	bl	80011cc <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2406ed6c 	.word	0x2406ed6c

0800114c <MPU_Config>:
/**
 * @brief Configures MPU for RAM D1 region
 * @retval None
 */
void MPU_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800115e:	f002 fd6d 	bl	8003c3c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected*/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001162:	2301      	movs	r3, #1
 8001164:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001166:	2300      	movs	r3, #0
 8001168:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800116a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800116e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001170:	2312      	movs	r3, #18
 8001172:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001174:	2300      	movs	r3, #0
 8001176:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001178:	2301      	movs	r3, #1
 800117a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800117c:	2303      	movs	r3, #3
 800117e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001190:	463b      	mov	r3, r7
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fd8a 	bl	8003cac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001198:	2004      	movs	r0, #4
 800119a:	f002 fd67 	bl	8003c6c <HAL_MPU_Enable>

}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ba:	f000 fdc7 	bl	8001d4c <HAL_IncTick>
  }
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40001000 	.word	0x40001000

080011cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <MX_SDMMC1_SD_Init>:
 * Uncomment the Transceiver
 * code generated by CubeMX as it wont
 *  be used
 */
void MX_SDMMC1_SD_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_SDMMC1_SD_Init+0x44>)
 80011e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 80011f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 80011fe:	2202      	movs	r2, #2
 8001200:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_SDMMC1_SD_Init+0x40>)
 8001204:	f008 ff38 	bl	800a078 <HAL_SD_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800120e:	f7ff ffdd 	bl	80011cc <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2406eca4 	.word	0x2406eca4
 800121c:	52007000 	.word	0x52007000

08001220 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <HAL_SD_MspInit+0xd8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d155      	bne.n	80012ee <HAL_SD_MspInit+0xce>
  {
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001244:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001248:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <HAL_SD_MspInit+0xdc>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001254:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_SD_MspInit+0xdc>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800129c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012a0:	617b      	str	r3, [r7, #20]
        |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80012ae:	230c      	movs	r3, #12
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4811      	ldr	r0, [pc, #68]	; (8001300 <HAL_SD_MspInit+0xe0>)
 80012ba:	f005 fb75 	bl	80069a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012be:	2304      	movs	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80012ce:	230c      	movs	r3, #12
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <HAL_SD_MspInit+0xe4>)
 80012da:	f005 fb65 	bl	80069a8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2107      	movs	r1, #7
 80012e2:	2031      	movs	r0, #49	; 0x31
 80012e4:	f002 fc82 	bl	8003bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80012e8:	2031      	movs	r0, #49	; 0x31
 80012ea:	f002 fc99 	bl	8003c20 <HAL_NVIC_EnableIRQ>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	52007000 	.word	0x52007000
 80012fc:	58024400 	.word	0x58024400
 8001300:	58020800 	.word	0x58020800
 8001304:	58020c00 	.word	0x58020c00

08001308 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_MspInit+0x38>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_MspInit+0x38>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_MspInit+0x38>)
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	210f      	movs	r1, #15
 8001330:	f06f 0001 	mvn.w	r0, #1
 8001334:	f002 fc5a 	bl	8003bec <HAL_NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58024400 	.word	0x58024400

08001344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	d827      	bhi.n	80013a2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001352:	2200      	movs	r2, #0
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	2036      	movs	r0, #54	; 0x36
 8001358:	f002 fc48 	bl	8003bec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800135c:	2036      	movs	r0, #54	; 0x36
 800135e:	f002 fc5f 	bl	8003c20 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001362:	4a29      	ldr	r2, [pc, #164]	; (8001408 <HAL_InitTick+0xc4>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_InitTick+0xc8>)
 800136a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136e:	4a27      	ldr	r2, [pc, #156]	; (800140c <HAL_InitTick+0xc8>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_InitTick+0xc8>)
 800137a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001386:	f107 0210 	add.w	r2, r7, #16
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f006 fca9 	bl	8007ce8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <HAL_InitTick+0x6a>
 80013a0:	e001      	b.n	80013a6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e02b      	b.n	80013fe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013a6:	f006 fc73 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 80013aa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013ac:	e004      	b.n	80013b8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ae:	f006 fc6f 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 80013b2:	4603      	mov	r3, r0
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <HAL_InitTick+0xcc>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9b      	lsrs	r3, r3, #18
 80013c2:	3b01      	subs	r3, #1
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_InitTick+0xd0>)
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <HAL_InitTick+0xd4>)
 80013ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_InitTick+0xd0>)
 80013ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013d4:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_InitTick+0xd0>)
 80013d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_InitTick+0xd0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_InitTick+0xd0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_InitTick+0xd0>)
 80013e8:	f00a fa80 	bl	800b8ec <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d104      	bne.n	80013fc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013f2:	4808      	ldr	r0, [pc, #32]	; (8001414 <HAL_InitTick+0xd0>)
 80013f4:	f00a fb3a 	bl	800ba6c <HAL_TIM_Base_Start_IT>
 80013f8:	4603      	mov	r3, r0
 80013fa:	e000      	b.n	80013fe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3740      	adds	r7, #64	; 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24000008 	.word	0x24000008
 800140c:	58024400 	.word	0x58024400
 8001410:	431bde83 	.word	0x431bde83
 8001414:	2406ed20 	.word	0x2406ed20
 8001418:	40001000 	.word	0x40001000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_adc3);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA1_Stream0_IRQHandler+0x10>)
 800144e:	f003 ff99 	bl	8005384 <HAL_DMA_IRQHandler>

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24064a94 	.word	0x24064a94

0800145c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA1_Stream1_IRQHandler+0x10>)
 8001462:	f003 ff8f 	bl	8005384 <HAL_DMA_IRQHandler>

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2406edb8 	.word	0x2406edb8

08001470 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Stream2_IRQHandler+0x10>)
 8001476:	f003 ff85 	bl	8005384 <HAL_DMA_IRQHandler>

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2406ee30 	.word	0x2406ee30

08001484 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM3_IRQHandler+0x10>)
 800148a:	f00a fb5f 	bl	800bb4c <HAL_TIM_IRQHandler>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2406ed6c 	.word	0x2406ed6c

08001498 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <SDMMC1_IRQHandler+0x10>)
 800149e:	f009 f853 	bl	800a548 <HAL_SD_IRQHandler>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2406eca4 	.word	0x2406eca4

080014ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM6_DAC_IRQHandler+0x10>)
 80014b2:	f00a fb4b 	bl	800bb4c <HAL_TIM_IRQHandler>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2406ed20 	.word	0x2406ed20

080014c0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart8);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <UART8_IRQHandler+0x10>)
 80014c6:	f00a fff1 	bl	800c4ac <HAL_UART_IRQHandler>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2406eea8 	.word	0x2406eea8

080014d4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc3);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <ADC3_IRQHandler+0x10>)
 80014da:	f001 f9bb 	bl	8002854 <HAL_ADC_IRQHandler>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	24064b0c 	.word	0x24064b0c

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f013 ff08 	bl	801532c <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	24080000 	.word	0x24080000
 8001548:	00000400 	.word	0x00000400
 800154c:	240148fc 	.word	0x240148fc
 8001550:	24071000 	.word	0x24071000

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <SystemInit+0xec>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a38      	ldr	r2, [pc, #224]	; (8001640 <SystemInit+0xec>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <SystemInit+0xf0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	2b06      	cmp	r3, #6
 8001572:	d807      	bhi.n	8001584 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <SystemInit+0xf0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 030f 	bic.w	r3, r3, #15
 800157c:	4a31      	ldr	r2, [pc, #196]	; (8001644 <SystemInit+0xf0>)
 800157e:	f043 0307 	orr.w	r3, r3, #7
 8001582:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <SystemInit+0xf4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <SystemInit+0xf4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <SystemInit+0xf4>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <SystemInit+0xf4>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	492b      	ldr	r1, [pc, #172]	; (8001648 <SystemInit+0xf4>)
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <SystemInit+0xf8>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <SystemInit+0xf0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <SystemInit+0xf0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 030f 	bic.w	r3, r3, #15
 80015b6:	4a23      	ldr	r2, [pc, #140]	; (8001644 <SystemInit+0xf0>)
 80015b8:	f043 0307 	orr.w	r3, r3, #7
 80015bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <SystemInit+0xf4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <SystemInit+0xf4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <SystemInit+0xf4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <SystemInit+0xf4>)
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <SystemInit+0xfc>)
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <SystemInit+0xf4>)
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <SystemInit+0x100>)
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <SystemInit+0xf4>)
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <SystemInit+0x104>)
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <SystemInit+0xf4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <SystemInit+0xf4>)
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <SystemInit+0x104>)
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <SystemInit+0xf4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <SystemInit+0xf4>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <SystemInit+0x104>)
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <SystemInit+0xf4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <SystemInit+0xf4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <SystemInit+0xf4>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <SystemInit+0xf4>)
 800160e:	2200      	movs	r2, #0
 8001610:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0x108>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <SystemInit+0x10c>)
 8001618:	4013      	ands	r3, r2
 800161a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800161e:	d202      	bcs.n	8001626 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <SystemInit+0x110>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SystemInit+0x114>)
 8001628:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800162c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SystemInit+0xec>)
 8001630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001634:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	52002000 	.word	0x52002000
 8001648:	58024400 	.word	0x58024400
 800164c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001650:	02020200 	.word	0x02020200
 8001654:	01ff0000 	.word	0x01ff0000
 8001658:	01010280 	.word	0x01010280
 800165c:	5c001000 	.word	0x5c001000
 8001660:	ffff0000 	.word	0xffff0000
 8001664:	51008108 	.word	0x51008108
 8001668:	52004000 	.word	0x52004000

0800166c <MX_TIM3_Init>:
/**
 * @brief Initialises Timer 3 to run
 * at 500Khz
 */
void MX_TIM3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b092      	sub	sp, #72	; 0x48
 8001670:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitTypeDef clk_init_struct = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2220      	movs	r2, #32
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f013 fe82 	bl	801539c <memset>

  uint32_t latency = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t timer_prescaler = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  // Get timer clock source frequency
  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 80016a4:	463a      	mov	r2, r7
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f006 fb1c 	bl	8007ce8 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <MX_TIM3_Init+0x52>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 80016b6:	f006 faeb 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 80016ba:	6478      	str	r0, [r7, #68]	; 0x44
 80016bc:	e004      	b.n	80016c8 <MX_TIM3_Init+0x5c>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80016be:	f006 fae7 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 80016c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <MX_TIM3_Init+0xf0>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0f5b      	lsrs	r3, r3, #29
 80016d2:	3301      	adds	r3, #1
 80016d4:	643b      	str	r3, [r7, #64]	; 0x40
  htim3.Instance = TIM3;
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_TIM3_Init+0xf4>)
 80016d8:	4a22      	ldr	r2, [pc, #136]	; (8001764 <MX_TIM3_Init+0xf8>)
 80016da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (timer_prescaler - 1);
 80016dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <MX_TIM3_Init+0xf4>)
 80016e2:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_TIM3_Init+0xf4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80016ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ec:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <MX_TIM3_Init+0xf4>)
 80016fc:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM3_Init+0xf4>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM3_Init+0xf4>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <MX_TIM3_Init+0xf4>)
 800170c:	f00a f8ee 	bl	800b8ec <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001716:	f7ff fd59 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001724:	4619      	mov	r1, r3
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <MX_TIM3_Init+0xf4>)
 8001728:	f00a fb30 	bl	800bd8c <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001732:	f7ff fd4b 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001736:	2320      	movs	r3, #32
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_TIM3_Init+0xf4>)
 8001746:	f00a fd75 	bl	800c234 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001750:	f7ff fd3c 	bl	80011cc <Error_Handler>
  }

}
 8001754:	bf00      	nop
 8001756:	3748      	adds	r7, #72	; 0x48
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	d1b8bacb 	.word	0xd1b8bacb
 8001760:	2406ed6c 	.word	0x2406ed6c
 8001764:	40000400 	.word	0x40000400
 8001768:	0007a120 	.word	0x0007a120

0800176c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_TIM_Base_MspInit+0x48>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d116      	bne.n	80017ac <HAL_TIM_Base_MspInit+0x40>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2105      	movs	r1, #5
 80017a0:	201d      	movs	r0, #29
 80017a2:	f002 fa23 	bl	8003bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017a6:	201d      	movs	r0, #29
 80017a8:	f002 fa3a 	bl	8003c20 <HAL_NVIC_EnableIRQ>

  }
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40000400 	.word	0x40000400
 80017b8:	58024400 	.word	0x58024400

080017bc <MX_UART8_Init>:
/**
 * @brief UART8 Init Function
 * runs at 921600 bps
 */
void MX_UART8_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <MX_UART8_Init+0x90>)
 80017c2:	4a23      	ldr	r2, [pc, #140]	; (8001850 <MX_UART8_Init+0x94>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 921600;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_UART8_Init+0x90>)
 80017c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017cc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_UART8_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_UART8_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_UART8_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_UART8_Init+0x90>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_UART8_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_UART8_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_UART8_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_UART8_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_UART8_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001804:	4811      	ldr	r0, [pc, #68]	; (800184c <MX_UART8_Init+0x90>)
 8001806:	f00a fdbb 	bl	800c380 <HAL_UART_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001810:	f7ff fcdc 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001814:	2100      	movs	r1, #0
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_UART8_Init+0x90>)
 8001818:	f00c f9e6 	bl	800dbe8 <HAL_UARTEx_SetTxFifoThreshold>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001822:	f7ff fcd3 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001826:	2100      	movs	r1, #0
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <MX_UART8_Init+0x90>)
 800182a:	f00c fa1b 	bl	800dc64 <HAL_UARTEx_SetRxFifoThreshold>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001834:	f7ff fcca 	bl	80011cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_UART8_Init+0x90>)
 800183a:	f00c f99c 	bl	800db76 <HAL_UARTEx_DisableFifoMode>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001844:	f7ff fcc2 	bl	80011cc <Error_Handler>
  }

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2406eea8 	.word	0x2406eea8
 8001850:	40007c00 	.word	0x40007c00

08001854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_UART_MspInit+0x150>)
 8001872:	4293      	cmp	r3, r2
 8001874:	f040 8092 	bne.w	800199c <HAL_UART_MspInit+0x148>
  {
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001878:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <HAL_UART_MspInit+0x154>)
 800187a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800187e:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_UART_MspInit+0x154>)
 8001880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001884:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_UART_MspInit+0x154>)
 800188a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800188e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_UART_MspInit+0x154>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189c:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_UART_MspInit+0x154>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_UART_MspInit+0x154>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018b4:	2303      	movs	r3, #3
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80018c4:	2308      	movs	r3, #8
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <HAL_UART_MspInit+0x158>)
 80018d0:	f005 f86a 	bl	80069a8 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream1;
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018d6:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <HAL_UART_MspInit+0x160>)
 80018d8:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018dc:	2251      	movs	r2, #81	; 0x51
 80018de:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f2:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 8001902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001906:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 800190a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800190e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001916:	4826      	ldr	r0, [pc, #152]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 8001918:	f002 fa0c 	bl	8003d34 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001922:	f7ff fc53 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 800192a:	67da      	str	r2, [r3, #124]	; 0x7c
 800192c:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <HAL_UART_MspInit+0x15c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_UART_MspInit+0x168>)
 8001936:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_UART_MspInit+0x164>)
 800193a:	2252      	movs	r2, #82	; 0x52
 800193c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001940:	2240      	movs	r2, #64	; 0x40
 8001942:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x164>)
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_UART_MspInit+0x164>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_UART_MspInit+0x164>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001970:	4811      	ldr	r0, [pc, #68]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001972:	f002 f9df 	bl	8003d34 <HAL_DMA_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800197c:	f7ff fc26 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001984:	679a      	str	r2, [r3, #120]	; 0x78
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_UART_MspInit+0x164>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 7, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2107      	movs	r1, #7
 8001990:	2053      	movs	r0, #83	; 0x53
 8001992:	f002 f92b 	bl	8003bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001996:	2053      	movs	r0, #83	; 0x53
 8001998:	f002 f942 	bl	8003c20 <HAL_NVIC_EnableIRQ>
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40007c00 	.word	0x40007c00
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58021000 	.word	0x58021000
 80019b0:	2406edb8 	.word	0x2406edb8
 80019b4:	40020028 	.word	0x40020028
 80019b8:	2406ee30 	.word	0x2406ee30
 80019bc:	40020040 	.word	0x40020040

080019c0 <WavHeaderUpdate>:
#include "wav.h"

 uint32_t WavHeaderUpdate(uint8_t* pHeader, WAV_Format* wavFormatStruct,  uint32_t file_size)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	// Rewrite the value of the sampling time here.
	uint32_t header_file_size = file_size - 8;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b08      	subs	r3, #8
 80019d0:	617b      	str	r3, [r7, #20]
	pHeader[4] = (uint8_t) (header_file_size);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3304      	adds	r3, #4
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
	pHeader[5] = (uint8_t) (header_file_size >> 8);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	0a1a      	lsrs	r2, r3, #8
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3305      	adds	r3, #5
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
	pHeader[6] = (uint8_t) (header_file_size >> 16);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	0c1a      	lsrs	r2, r3, #16
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3306      	adds	r3, #6
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
	pHeader[7] = (uint8_t) (header_file_size >> 24);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	0e1a      	lsrs	r2, r3, #24
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3307      	adds	r3, #7
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]

	//rewrite the Value of sample data.
	uint32_t data_file_size = file_size - 44;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b2c      	subs	r3, #44	; 0x2c
 8001a04:	613b      	str	r3, [r7, #16]
	pHeader[40] = (uint8_t) (data_file_size);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3328      	adds	r3, #40	; 0x28
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
	pHeader[41] = (uint8_t) (data_file_size >> 8);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	0a1a      	lsrs	r2, r3, #8
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3329      	adds	r3, #41	; 0x29
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
	pHeader[42] = (uint8_t) (data_file_size >> 16);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	0c1a      	lsrs	r2, r3, #16
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	332a      	adds	r3, #42	; 0x2a
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
	pHeader[43] = (uint8_t) (data_file_size >> 24);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	0e1a      	lsrs	r2, r3, #24
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	332b      	adds	r3, #43	; 0x2b
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]

	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <InitialiseWavEncoder>:
 	* @param Freq: Sampling Frequency
 	* @param pHeader: Pointer to the WAV file header to be written
 	* @retval 0 if successful, !0 otherwise
   */
 uint32_t InitialiseWavEncoder(uint32_t Freq, uint8_t *pHeader, WAV_Format* WaveFormat)
 {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]

 	WaveFormat->SampleRate = Freq; // Audio sampling frequency @ 500KHz
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	619a      	str	r2, [r3, #24]
 	//WaveFormat.SampleRate = 44100;
 	WaveFormat->NumChannels = 1; // Stereo;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	82da      	strh	r2, [r3, #22]
 	WaveFormat->BitsPerSample = 16; // Useful bits per sample;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2210      	movs	r2, #16
 8001a60:	845a      	strh	r2, [r3, #34]	; 0x22
 	WaveFormat->FileSize = 0x003D0900; // 1.92MB Filesize - 8 bytes 8 bytes (which is size of "RIFF" + size of file header)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <InitialiseWavEncoder+0x78>)
 8001a66:	605a      	str	r2, [r3, #4]
 	WaveFormat->SubChunk1Size = 16; // or should it be 16?
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	611a      	str	r2, [r3, #16]
 	WaveFormat->ByteRate =  WaveFormat->SampleRate * (WaveFormat->BitsPerSample/8) * (WaveFormat->NumChannels);  // Bytes per second which is sample rate * block aligj
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001a76:	08d2      	lsrs	r2, r2, #3
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	8ad2      	ldrh	r2, [r2, #22]
 8001a82:	fb02 f203 	mul.w	r2, r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	61da      	str	r2, [r3, #28]

 	WaveFormat->BlockAlign = WaveFormat->NumChannels * (WaveFormat->BitsPerSample/8); // number of bytes in a frame
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8ada      	ldrh	r2, [r3, #22]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	fb12 f303 	smulbb	r3, r2, r3
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	841a      	strh	r2, [r3, #32]

 	// Parse the rest of the data here.
 	// If function returns anything other than 1,
 	// break function.
 	 if(ProcessWavHeader(pHeader, WaveFormat) == 1)
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	68b8      	ldr	r0, [r7, #8]
 8001aa4:	f000 f80c 	bl	8001ac0 <ProcessWavHeader>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <InitialiseWavEncoder+0x6e>
 	 {
 		 return 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <InitialiseWavEncoder+0x70>
 	 }

 	 return 0;
 8001ab2:	2300      	movs	r3, #0
 }
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	003d0900 	.word	0x003d0900

08001ac0 <ProcessWavHeader>:
 	*	 @param pheader: Wave Header Buffer to completed
 	*  @param wavFormatStruct: Pointer to the wave struct
   *  @retval 0 if passed, !0 otherwise
 	*/
 uint32_t ProcessWavHeader(uint8_t* pHeader, WAV_Format* wavFormatStruct)
 {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
 	 /***********Header*******************/
 	 //	Chunk which is always "RIFF"
 	 pHeader[0] = 'R';
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2252      	movs	r2, #82	; 0x52
 8001ace:	701a      	strb	r2, [r3, #0]
 	 pHeader[1] = 'I';
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	2249      	movs	r2, #73	; 0x49
 8001ad6:	701a      	strb	r2, [r3, #0]
 	 pHeader[2] = 'F';
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3302      	adds	r3, #2
 8001adc:	2246      	movs	r2, #70	; 0x46
 8001ade:	701a      	strb	r2, [r3, #0]
 	 pHeader[3] = 'F';
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3303      	adds	r3, #3
 8001ae4:	2246      	movs	r2, #70	; 0x46
 8001ae6:	701a      	strb	r2, [r3, #0]

 	// File length : Total length minus 8 bytes. Can always write back after each recording session.
 	//4000000 bytes = 0x003D0900
    pHeader[4] = 0x00;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
 	 pHeader[5] = 0x00;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3305      	adds	r3, #5
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
 	 pHeader[6] = 0x00;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3306      	adds	r3, #6
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
 	 pHeader[7] = 0x00;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3307      	adds	r3, #7
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]

 	// File Format: "Always "WAVE" for WAV files
 	 pHeader[8]  = 'W';
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	2257      	movs	r2, #87	; 0x57
 8001b0e:	701a      	strb	r2, [r3, #0]
 	 pHeader[9]  = 'A';
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3309      	adds	r3, #9
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	701a      	strb	r2, [r3, #0]
 	 pHeader[10] = 'V';
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	330a      	adds	r3, #10
 8001b1c:	2256      	movs	r2, #86	; 0x56
 8001b1e:	701a      	strb	r2, [r3, #0]
 	 pHeader[11] = 'E';
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	330b      	adds	r3, #11
 8001b24:	2245      	movs	r2, #69	; 0x45
 8001b26:	701a      	strb	r2, [r3, #0]

 	/*************Format Chunk*** add single space at end too ***/
 	 pHeader[12] = 'f';
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	2266      	movs	r2, #102	; 0x66
 8001b2e:	701a      	strb	r2, [r3, #0]
 	 pHeader[13] = 'm';
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	330d      	adds	r3, #13
 8001b34:	226d      	movs	r2, #109	; 0x6d
 8001b36:	701a      	strb	r2, [r3, #0]
 	 pHeader[14] = 't';
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	330e      	adds	r3, #14
 8001b3c:	2274      	movs	r2, #116	; 0x74
 8001b3e:	701a      	strb	r2, [r3, #0]
 	 pHeader[15] = ' ';
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	330f      	adds	r3, #15
 8001b44:	2220      	movs	r2, #32
 8001b46:	701a      	strb	r2, [r3, #0]

 	 // chunk size in bytes, 0x10
 	 pHeader[16] = 0x10;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3310      	adds	r3, #16
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	701a      	strb	r2, [r3, #0]
 	 pHeader[17] = 0x00;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3311      	adds	r3, #17
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 	 pHeader[18] = 0x00;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3312      	adds	r3, #18
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 	 pHeader[19] = 0x00;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3313      	adds	r3, #19
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]

 	 // Audio Format. Always 1 for WAV files in PCM format
 	 pHeader[20] = 0x01;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
 	 pHeader[21] = 0x00;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3315      	adds	r3, #21
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]

 	 // Number of channels: Mono 0x01 or stereo 0x02. Pass Struct member through
 	 pHeader[22] = wavFormatStruct->NumChannels;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	8ada      	ldrh	r2, [r3, #22]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3316      	adds	r3, #22
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
 	 pHeader[23] = 0x00;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3317      	adds	r3, #23
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

 		// Sample Rate in Hz -- To be written in little Endian.
 		// 500000 =  0x0007A120 ==> [24] = 0x20, 27 = 0x00
 		// This masks the 32 bit integers into single bytes
 		// https://stackoverflow.com/questions/10493411/what-is-bit-masking
 	 pHeader[24] = (uint8_t) ((wavFormatStruct->SampleRate & 0xFFFF));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3318      	adds	r3, #24
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
 	 pHeader[25] = (uint8_t) ((wavFormatStruct->SampleRate >> 8 )& 0xFFFF);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	0a1a      	lsrs	r2, r3, #8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3319      	adds	r3, #25
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
 	 pHeader[26] = (uint8_t) ((wavFormatStruct->SampleRate >> 16)& 0xFFFF);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	0c1a      	lsrs	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	331a      	adds	r3, #26
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
 	 pHeader[27] = (uint8_t) ((wavFormatStruct->SampleRate >> 24 )& 0xFFFF);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	0e1a      	lsrs	r2, r3, #24
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	331b      	adds	r3, #27
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

 	 /** Byte Rate***/
 	 pHeader[28] = (uint8_t) ((wavFormatStruct->ByteRate & 0xFFFF));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	331c      	adds	r3, #28
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
 	 pHeader[29] = (uint8_t) ((wavFormatStruct->ByteRate >> 8 )& 0xFFFF);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	0a1a      	lsrs	r2, r3, #8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	331d      	adds	r3, #29
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
 	 pHeader[30] = (uint8_t) ((wavFormatStruct->ByteRate >> 16)& 0xFFFF);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	0c1a      	lsrs	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	331e      	adds	r3, #30
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]
 	 pHeader[31] = (uint8_t) ((wavFormatStruct->ByteRate >> 24 )& 0xFFFF);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	0e1a      	lsrs	r2, r3, #24
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	331f      	adds	r3, #31
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]


 	/** Block ALignment usually takes up one byte **/
 	pHeader[32] = wavFormatStruct->BlockAlign;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	8c1a      	ldrh	r2, [r3, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3320      	adds	r3, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	701a      	strb	r2, [r3, #0]
 	pHeader[33] = 0x00;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3321      	adds	r3, #33	; 0x21
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

 	pHeader[32] = 0x04;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3320      	adds	r3, #32
 8001c10:	2204      	movs	r2, #4
 8001c12:	701a      	strb	r2, [r3, #0]
 	pHeader[33] = 0x00;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3321      	adds	r3, #33	; 0x21
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]

 	/**** Bits per sample **/
 	pHeader[34]  = wavFormatStruct->BitsPerSample;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3322      	adds	r3, #34	; 0x22
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
   pHeader[35]  = 0x00;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3323      	adds	r3, #35	; 0x23
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
 	//pHeader[34]  = 0x10;
   //pHeader[35]  = 0x00;

 	/***************Data Chunk ************************/
    // Always "data"
   pHeader[36]  = 'd';
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3324      	adds	r3, #36	; 0x24
 8001c34:	2264      	movs	r2, #100	; 0x64
 8001c36:	701a      	strb	r2, [r3, #0]
   pHeader[37]  = 'a';
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3325      	adds	r3, #37	; 0x25
 8001c3c:	2261      	movs	r2, #97	; 0x61
 8001c3e:	701a      	strb	r2, [r3, #0]
   pHeader[38]  = 't';
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3326      	adds	r3, #38	; 0x26
 8001c44:	2274      	movs	r2, #116	; 0x74
 8001c46:	701a      	strb	r2, [r3, #0]
   pHeader[39]  = 'a';
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3327      	adds	r3, #39	; 0x27
 8001c4c:	2261      	movs	r2, #97	; 0x61
 8001c4e:	701a      	strb	r2, [r3, #0]

 	// Data Length or number of element in sample data
 	  /* This variable will be written back at the end of the recording operation */
   pHeader[40]  = 0x00;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3328      	adds	r3, #40	; 0x28
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
   pHeader[41]  = 0x00;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3329      	adds	r3, #41	; 0x29
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
   pHeader[42]  = 0x00;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	332a      	adds	r3, #42	; 0x2a
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
   pHeader[43]  = 0x00;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	332b      	adds	r3, #43	; 0x2b
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]

 	//upon success
 	return 0;
 8001c70:	2300      	movs	r3, #0

 }
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c84:	f7ff fc66 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	; (8001ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f013 fb43 	bl	8015338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff f8bf 	bl	8000e34 <main>
  bx  lr
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cc0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001cc4:	08015df8 	.word	0x08015df8
  ldr r2, =_sbss
 8001cc8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001ccc:	24070ffc 	.word	0x24070ffc

08001cd0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f001 ff7b 	bl	8003bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce0:	f005 fe2c 	bl	800793c <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	4913      	ldr	r1, [pc, #76]	; (8001d40 <HAL_Init+0x6c>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_Init+0x6c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_Init+0x70>)
 8001d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_Init+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff fb10 	bl	8001344 <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e002      	b.n	8001d34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2e:	f7ff faeb 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	08015ce0 	.word	0x08015ce0
 8001d44:	24000004 	.word	0x24000004
 8001d48:	24000000 	.word	0x24000000

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	2400000c 	.word	0x2400000c
 8001d70:	2406ef38 	.word	0x2406ef38

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	2406ef38 	.word	0x2406ef38

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2400000c 	.word	0x2400000c

08001dd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetREVID+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	5c001000 	.word	0x5c001000

08001dec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	58000400 	.word	0x58000400

08001e18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	609a      	str	r2, [r3, #8]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3360      	adds	r3, #96	; 0x60
 8001e92:	461a      	mov	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3360      	adds	r3, #96	; 0x60
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b087      	sub	sp, #28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3330      	adds	r3, #48	; 0x30
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	4413      	add	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	211f      	movs	r1, #31
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 011f 	and.w	r1, r3, #31
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f023 0203 	bic.w	r2, r3, #3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	60da      	str	r2, [r3, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b087      	sub	sp, #28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3314      	adds	r3, #20
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0e5b      	lsrs	r3, r3, #25
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	0d1b      	lsrs	r3, r3, #20
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2107      	movs	r1, #7
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0d1b      	lsrs	r3, r3, #20
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0318 	and.w	r3, r3, #24
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <LL_ADC_SetChannelSingleDiff+0x44>)
 800206c:	40d9      	lsrs	r1, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	400b      	ands	r3, r1
 8002072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	000fffff 	.word	0x000fffff

08002090 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 031f 	and.w	r3, r3, #31
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6093      	str	r3, [r2, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	5fffffc0 	.word	0x5fffffc0

080020ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002100:	d101      	bne.n	8002106 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <LL_ADC_EnableInternalRegulator+0x24>)
 8002122:	4013      	ands	r3, r2
 8002124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	6fffffc0 	.word	0x6fffffc0

0800213c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002150:	d101      	bne.n	8002156 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <LL_ADC_Enable+0x24>)
 8002172:	4013      	ands	r3, r2
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	7fffffc0 	.word	0x7fffffc0

0800218c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <LL_ADC_Disable+0x24>)
 800219a:	4013      	ands	r3, r2
 800219c:	f043 0202 	orr.w	r2, r3, #2
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	7fffffc0 	.word	0x7fffffc0

080021b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <LL_ADC_IsEnabled+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_IsEnabled+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_IsDisableOngoing+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_IsDisableOngoing+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <LL_ADC_REG_StartConversion+0x24>)
 800220e:	4013      	ands	r3, r2
 8002210:	f043 0204 	orr.w	r2, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	7fffffc0 	.word	0x7fffffc0

08002228 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <LL_ADC_REG_StopConversion+0x24>)
 8002236:	4013      	ands	r3, r2
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	7fffffc0 	.word	0x7fffffc0

08002250 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d101      	bne.n	8002268 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <LL_ADC_INJ_StopConversion+0x24>)
 8002286:	4013      	ands	r3, r2
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	7fffffc0 	.word	0x7fffffc0

080022a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d101      	bne.n	80022b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e18e      	b.n	8002600 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7fe fa29 	bl	8000748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff feef 	bl	80020ec <LL_ADC_IsDeepPowerDownEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fed5 	bl	80020c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff0a 	bl	800213c <LL_ADC_IsInternalRegulatorEnabled>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d114      	bne.n	8002358 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff feee 	bl	8002114 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002338:	4b9a      	ldr	r3, [pc, #616]	; (80025a4 <HAL_ADC_Init+0x2dc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	4a9a      	ldr	r2, [pc, #616]	; (80025a8 <HAL_ADC_Init+0x2e0>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	3301      	adds	r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800234a:	e002      	b.n	8002352 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3b01      	subs	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f9      	bne.n	800234c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff feed 	bl	800213c <LL_ADC_IsInternalRegulatorEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f043 0210 	orr.w	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff61 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 800238e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 8128 	bne.w	80025ee <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8124 	bne.w	80025ee <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fefa 	bl	80021b4 <LL_ADC_IsEnabled>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d136      	bne.n	8002434 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a78      	ldr	r2, [pc, #480]	; (80025ac <HAL_ADC_Init+0x2e4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d004      	beq.n	80023da <HAL_ADC_Init+0x112>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a76      	ldr	r2, [pc, #472]	; (80025b0 <HAL_ADC_Init+0x2e8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d10e      	bne.n	80023f8 <HAL_ADC_Init+0x130>
 80023da:	4874      	ldr	r0, [pc, #464]	; (80025ac <HAL_ADC_Init+0x2e4>)
 80023dc:	f7ff feea 	bl	80021b4 <LL_ADC_IsEnabled>
 80023e0:	4604      	mov	r4, r0
 80023e2:	4873      	ldr	r0, [pc, #460]	; (80025b0 <HAL_ADC_Init+0x2e8>)
 80023e4:	f7ff fee6 	bl	80021b4 <LL_ADC_IsEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4323      	orrs	r3, r4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e008      	b.n	800240a <HAL_ADC_Init+0x142>
 80023f8:	486e      	ldr	r0, [pc, #440]	; (80025b4 <HAL_ADC_Init+0x2ec>)
 80023fa:	f7ff fedb 	bl	80021b4 <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a66      	ldr	r2, [pc, #408]	; (80025ac <HAL_ADC_Init+0x2e4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x15a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a64      	ldr	r2, [pc, #400]	; (80025b0 <HAL_ADC_Init+0x2e8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_ADC_Init+0x15e>
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_ADC_Init+0x2f0>)
 8002424:	e000      	b.n	8002428 <HAL_ADC_Init+0x160>
 8002426:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_ADC_Init+0x2f4>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f7ff fcf2 	bl	8001e18 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002434:	f7ff fcce 	bl	8001dd4 <HAL_GetREVID>
 8002438:	4603      	mov	r3, r0
 800243a:	f241 0203 	movw	r2, #4099	; 0x1003
 800243e:	4293      	cmp	r3, r2
 8002440:	d914      	bls.n	800246c <HAL_ADC_Init+0x1a4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b10      	cmp	r3, #16
 8002448:	d110      	bne.n	800246c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7d5b      	ldrb	r3, [r3, #21]
 800244e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002454:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800245a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7f1b      	ldrb	r3, [r3, #28]
 8002460:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002462:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002464:	f043 030c 	orr.w	r3, r3, #12
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e00d      	b.n	8002488 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7d5b      	ldrb	r3, [r3, #21]
 8002470:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002476:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800247c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7f1b      	ldrb	r3, [r3, #28]
 8002482:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7f1b      	ldrb	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	3b01      	subs	r3, #1
 8002496:	045b      	lsls	r3, r3, #17
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_ADC_Init+0x2f8>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	69b9      	ldr	r1, [r7, #24]
 80024ca:	430b      	orrs	r3, r1
 80024cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff febc 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 80024d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fede 	bl	80022a0 <LL_ADC_INJ_IsConversionOngoing>
 80024e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d14a      	bne.n	8002582 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d147      	bne.n	8002582 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7d1b      	ldrb	r3, [r3, #20]
 80024f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_ADC_Init+0x2fc>)
 8002508:	4013      	ands	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	430b      	orrs	r3, r1
 8002512:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800251a:	2b01      	cmp	r3, #1
 800251c:	d11b      	bne.n	8002556 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_ADC_Init+0x300>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002532:	3a01      	subs	r2, #1
 8002534:	0411      	lsls	r1, r2, #16
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002546:	430a      	orrs	r2, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	e007      	b.n	8002566 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f001 f941 	bl	8003804 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d120      	bne.n	80025cc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f023 010f 	bic.w	r1, r3, #15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
 80025a2:	e01b      	b.n	80025dc <HAL_ADC_Init+0x314>
 80025a4:	24000000 	.word	0x24000000
 80025a8:	053e2d63 	.word	0x053e2d63
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022100 	.word	0x40022100
 80025b4:	58026000 	.word	0x58026000
 80025b8:	40022300 	.word	0x40022300
 80025bc:	58026300 	.word	0x58026300
 80025c0:	fff0c003 	.word	0xfff0c003
 80025c4:	ffffbffc 	.word	0xffffbffc
 80025c8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 020f 	bic.w	r2, r2, #15
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f023 0303 	bic.w	r3, r3, #3
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
 80025ec:	e007      	b.n	80025fe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3724      	adds	r7, #36	; 0x24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}

08002608 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_ADC_Start_DMA+0x168>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_ADC_Start_DMA+0x20>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a54      	ldr	r2, [pc, #336]	; (8002774 <HAL_ADC_Start_DMA+0x16c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_ADC_Start_DMA+0x24>
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_ADC_Start_DMA+0x170>)
 800262a:	e000      	b.n	800262e <HAL_ADC_Start_DMA+0x26>
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_ADC_Start_DMA+0x174>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fd2e 	bl	8002090 <LL_ADC_GetMultimode>
 8002634:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe08 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 808c 	bne.w	8002760 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Start_DMA+0x4e>
 8002652:	2302      	movs	r3, #2
 8002654:	e087      	b.n	8002766 <HAL_ADC_Start_DMA+0x15e>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d002      	beq.n	8002670 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b09      	cmp	r3, #9
 800266e:	d170      	bne.n	8002752 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 ff49 	bl	8003508 <ADC_Enable>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d163      	bne.n	8002748 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002684:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_ADC_Start_DMA+0x178>)
 8002686:	4013      	ands	r3, r2
 8002688:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a37      	ldr	r2, [pc, #220]	; (8002774 <HAL_ADC_Start_DMA+0x16c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d002      	beq.n	80026a0 <HAL_ADC_Start_DMA+0x98>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e000      	b.n	80026a2 <HAL_ADC_Start_DMA+0x9a>
 80026a0:	4b33      	ldr	r3, [pc, #204]	; (8002770 <HAL_ADC_Start_DMA+0x168>)
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d002      	beq.n	80026b0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	f023 0206 	bic.w	r2, r3, #6
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	659a      	str	r2, [r3, #88]	; 0x58
 80026d4:	e002      	b.n	80026dc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <HAL_ADC_Start_DMA+0x17c>)
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_ADC_Start_DMA+0x180>)
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <HAL_ADC_Start_DMA+0x184>)
 80026f2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	221c      	movs	r2, #28
 80026fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0210 	orr.w	r2, r2, #16
 8002712:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7ff fc41 	bl	8001fa6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3340      	adds	r3, #64	; 0x40
 800272e:	4619      	mov	r1, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f001 fe5a 	bl	80043ec <HAL_DMA_Start_IT>
 8002738:	4603      	mov	r3, r0
 800273a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fd5d 	bl	8002200 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002746:	e00d      	b.n	8002764 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002750:	e008      	b.n	8002764 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800275e:	e001      	b.n	8002764 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002764:	7dfb      	ldrb	r3, [r7, #23]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40022100 	.word	0x40022100
 8002778:	40022300 	.word	0x40022300
 800277c:	58026300 	.word	0x58026300
 8002780:	fffff0fe 	.word	0xfffff0fe
 8002784:	080036db 	.word	0x080036db
 8002788:	080037b3 	.word	0x080037b3
 800278c:	080037cf 	.word	0x080037cf

08002790 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_Stop_DMA+0x16>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e04f      	b.n	8002846 <HAL_ADC_Stop_DMA+0xb6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027ae:	2103      	movs	r1, #3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fded 	bl	8003390 <ADC_ConversionStop>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d13d      	bne.n	800283c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0203 	bic.w	r2, r2, #3
 80027ce:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d10f      	bne.n	80027fe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 f86c 	bl	80048c0 <HAL_DMA_Abort>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0210 	bic.w	r2, r2, #16
 800280c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 ff01 	bl	800361c <ADC_Disable>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e002      	b.n	8002826 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fefb 	bl	800361c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_ADC_Stop_DMA+0xc0>)
 8002832:	4013      	ands	r3, r2
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	ffffeefe 	.word	0xffffeefe

08002854 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a87      	ldr	r2, [pc, #540]	; (8002a94 <HAL_ADC_IRQHandler+0x240>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d004      	beq.n	8002884 <HAL_ADC_IRQHandler+0x30>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a86      	ldr	r2, [pc, #536]	; (8002a98 <HAL_ADC_IRQHandler+0x244>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_ADC_IRQHandler+0x34>
 8002884:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_ADC_IRQHandler+0x248>)
 8002886:	e000      	b.n	800288a <HAL_ADC_IRQHandler+0x36>
 8002888:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <HAL_ADC_IRQHandler+0x24c>)
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fc00 	bl	8002090 <LL_ADC_GetMultimode>
 8002890:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_ADC_IRQHandler+0x78>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f001 f8d2 	bl	8003a68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2202      	movs	r2, #2
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x8c>
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8083 	beq.w	80029f2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d07d      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fb08 	bl	8001f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d062      	beq.n	80029e4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_ADC_IRQHandler+0x244>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d002      	beq.n	800292e <HAL_ADC_IRQHandler+0xda>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	e000      	b.n	8002930 <HAL_ADC_IRQHandler+0xdc>
 800292e:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_ADC_IRQHandler+0x240>)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4293      	cmp	r3, r2
 8002936:	d008      	beq.n	800294a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d002      	beq.n	800294a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b09      	cmp	r3, #9
 8002948:	d104      	bne.n	8002954 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	e00c      	b.n	800296e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_ADC_IRQHandler+0x244>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d002      	beq.n	8002964 <HAL_ADC_IRQHandler+0x110>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e000      	b.n	8002966 <HAL_ADC_IRQHandler+0x112>
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_ADC_IRQHandler+0x240>)
 8002966:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d135      	bne.n	80029e4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b08      	cmp	r3, #8
 8002984:	d12e      	bne.n	80029e4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fc60 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11a      	bne.n	80029cc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 020c 	bic.w	r2, r2, #12
 80029a4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d112      	bne.n	80029e4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
 80029ca:	e00b      	b.n	80029e4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f043 0210 	orr.w	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7fe f92d 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	220c      	movs	r2, #12
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x1b2>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a0 	beq.w	8002b52 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 809a 	beq.w	8002b52 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fac6 	bl	8001fcc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a40:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fa6e 	bl	8001f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a4c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_ADC_IRQHandler+0x244>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_IRQHandler+0x20a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_IRQHandler+0x20c>
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_ADC_IRQHandler+0x240>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d008      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d002      	beq.n	8002a7a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d104      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	e014      	b.n	8002aae <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a03      	ldr	r2, [pc, #12]	; (8002a98 <HAL_ADC_IRQHandler+0x244>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x250>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e008      	b.n	8002aa6 <HAL_ADC_IRQHandler+0x252>
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40022100 	.word	0x40022100
 8002a9c:	40022300 	.word	0x40022300
 8002aa0:	58026300 	.word	0x58026300
 8002aa4:	4b84      	ldr	r3, [pc, #528]	; (8002cb8 <HAL_ADC_IRQHandler+0x464>)
 8002aa6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d142      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03f      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d13a      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d133      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d12e      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fbd8 	bl	80022a0 <LL_ADC_INJ_IsConversionOngoing>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11a      	bne.n	8002b2c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b04:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d112      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
 8002b2a:	e00b      	b.n	8002b44 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 ff67 	bl	8003a18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2260      	movs	r2, #96	; 0x60
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d011      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x32c>
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8a8 	bl	8002cc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x35c>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 ff4d 	bl	8003a40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x38c>
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00d      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 ff3f 	bl	8003a54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d043      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x41e>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03e      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002c00:	e021      	b.n	8002c46 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <HAL_ADC_IRQHandler+0x464>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_IRQHandler+0x3c8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <HAL_ADC_IRQHandler+0x468>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x3cc>
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <HAL_ADC_IRQHandler+0x46c>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_IRQHandler+0x3ce>
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_ADC_IRQHandler+0x470>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fa42 	bl	80020ac <LL_ADC_GetMultiDMATransfer>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10e      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f043 0202 	orr.w	r2, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f839 	bl	8002cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d018      	beq.n	8002cae <HAL_ADC_IRQHandler+0x45a>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d013      	beq.n	8002cae <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f043 0208 	orr.w	r2, r3, #8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 febf 	bl	8003a2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40022100 	.word	0x40022100
 8002cc0:	40022300 	.word	0x40022300
 8002cc4:	58026300 	.word	0x58026300

08002cc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b0a1      	sub	sp, #132	; 0x84
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a9d      	ldr	r2, [pc, #628]	; (8002f80 <HAL_ADC_ConfigChannel+0x290>)
 8002d0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e321      	b.n	800335e <HAL_ADC_ConfigChannel+0x66e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fa92 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 8306 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x62>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	e016      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x90>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d62:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	69d1      	ldr	r1, [r2, #28]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f7ff f8d7 	bl	8001f4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fa53 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 8002daa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fa75 	bl	80022a0 <LL_ADC_INJ_IsConversionOngoing>
 8002db6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80b3 	bne.w	8002f26 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 80af 	bne.w	8002f26 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff f90c 	bl	8001ff2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002dda:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_ADC_ConfigChannel+0x294>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de6:	d10b      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x110>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	e01d      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x14c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x136>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	e00a      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x14c>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d027      	beq.n	8002e96 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e54:	f7ff f814 	bl	8001e80 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6919      	ldr	r1, [r3, #16]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	7e5b      	ldrb	r3, [r3, #25]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x17e>
 8002e68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e6c:	e000      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x180>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	461a      	mov	r2, r3
 8002e72:	f7ff f83e 	bl	8001ef2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7e1b      	ldrb	r3, [r3, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x19c>
 8002e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e8a:	e000      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x19e>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff f816 	bl	8001ec0 <LL_ADC_SetDataRightShift>
 8002e94:	e047      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	069b      	lsls	r3, r3, #26
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d107      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	069b      	lsls	r3, r3, #26
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d107      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002edc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	069b      	lsls	r3, r3, #26
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d107      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f00:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	069b      	lsls	r3, r3, #26
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d107      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f24:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f942 	bl	80021b4 <LL_ADC_IsEnabled>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 820d 	bne.w	8003352 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f7ff f87f 	bl	8002048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <HAL_ADC_ConfigChannel+0x290>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	f040 8133 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d110      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x298>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	bf94      	ite	ls
 8002f76:	2301      	movls	r3, #1
 8002f78:	2300      	movhi	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e01e      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x2cc>
 8002f7e:	bf00      	nop
 8002f80:	47ff0000 	.word	0x47ff0000
 8002f84:	5c001000 	.word	0x5c001000
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e003      	b.n	8002fac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	bf94      	ite	ls
 8002fb6:	2301      	movls	r3, #1
 8002fb8:	2300      	movhi	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d079      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x2ec>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	069b      	lsls	r3, r3, #26
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	e015      	b.n	8003008 <HAL_ADC_ConfigChannel+0x318>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	e003      	b.n	8003000 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x338>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	3301      	adds	r3, #1
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	e017      	b.n	8003058 <HAL_ADC_ConfigChannel+0x368>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800303a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e003      	b.n	800304c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	ea42 0103 	orr.w	r1, r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_ADC_ConfigChannel+0x38e>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	3301      	adds	r3, #1
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	051b      	lsls	r3, r3, #20
 800307c:	e018      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x3c0>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e003      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b0:	430b      	orrs	r3, r1
 80030b2:	e07e      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x3e0>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	3301      	adds	r3, #1
 80030c8:	069b      	lsls	r3, r3, #26
 80030ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ce:	e015      	b.n	80030fc <HAL_ADC_ConfigChannel+0x40c>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e003      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	069b      	lsls	r3, r3, #26
 80030f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_ADC_ConfigChannel+0x42c>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	3301      	adds	r3, #1
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	e017      	b.n	800314c <HAL_ADC_ConfigChannel+0x45c>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	61bb      	str	r3, [r7, #24]
  return result;
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e003      	b.n	8003140 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10d      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x488>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0e9b      	lsrs	r3, r3, #26
 8003162:	3301      	adds	r3, #1
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	3b1e      	subs	r3, #30
 8003170:	051b      	lsls	r3, r3, #20
 8003172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003176:	e01b      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4c0>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	60fb      	str	r3, [r7, #12]
  return result;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e003      	b.n	800319c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f003 021f 	and.w	r2, r3, #31
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	3b1e      	subs	r3, #30
 80031aa:	051b      	lsls	r3, r3, #20
 80031ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b0:	430b      	orrs	r3, r1
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	6892      	ldr	r2, [r2, #8]
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fe ff1b 	bl	8001ff2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f280 80c6 	bge.w	8003352 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a67      	ldr	r2, [pc, #412]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_ADC_ConfigChannel+0x4ea>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_ADC_ConfigChannel+0x67c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4ee>
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <HAL_ADC_ConfigChannel+0x680>)
 80031dc:	e000      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x4f0>
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_ADC_ConfigChannel+0x684>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fe3f 	bl	8001e64 <LL_ADC_GetCommonPathInternalCh>
 80031e6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_ADC_ConfigChannel+0x50c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_ADC_ConfigChannel+0x67c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10e      	bne.n	800321a <HAL_ADC_ConfigChannel+0x52a>
 80031fc:	485a      	ldr	r0, [pc, #360]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 80031fe:	f7fe ffd9 	bl	80021b4 <LL_ADC_IsEnabled>
 8003202:	4604      	mov	r4, r0
 8003204:	4859      	ldr	r0, [pc, #356]	; (800336c <HAL_ADC_ConfigChannel+0x67c>)
 8003206:	f7fe ffd5 	bl	80021b4 <LL_ADC_IsEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	4323      	orrs	r3, r4
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e008      	b.n	800322c <HAL_ADC_ConfigChannel+0x53c>
 800321a:	4857      	ldr	r0, [pc, #348]	; (8003378 <HAL_ADC_ConfigChannel+0x688>)
 800321c:	f7fe ffca 	bl	80021b4 <LL_ADC_IsEnabled>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d07d      	beq.n	800332c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a51      	ldr	r2, [pc, #324]	; (800337c <HAL_ADC_ConfigChannel+0x68c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d130      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ac>
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d12b      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a4b      	ldr	r2, [pc, #300]	; (8003378 <HAL_ADC_ConfigChannel+0x688>)
 800324a:	4293      	cmp	r3, r2
 800324c:	f040 8081 	bne.w	8003352 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a44      	ldr	r2, [pc, #272]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x574>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_ADC_ConfigChannel+0x67c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x578>
 8003264:	4a42      	ldr	r2, [pc, #264]	; (8003370 <HAL_ADC_ConfigChannel+0x680>)
 8003266:	e000      	b.n	800326a <HAL_ADC_ConfigChannel+0x57a>
 8003268:	4a42      	ldr	r2, [pc, #264]	; (8003374 <HAL_ADC_ConfigChannel+0x684>)
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f7fe fde3 	bl	8001e3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003278:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_ADC_ConfigChannel+0x690>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	4a41      	ldr	r2, [pc, #260]	; (8003384 <HAL_ADC_ConfigChannel+0x694>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800328c:	e002      	b.n	8003294 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3b01      	subs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f9      	bne.n	800328e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800329a:	e05a      	b.n	8003352 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a39      	ldr	r2, [pc, #228]	; (8003388 <HAL_ADC_ConfigChannel+0x698>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d11e      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5f4>
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d119      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <HAL_ADC_ConfigChannel+0x688>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d14b      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x5de>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <HAL_ADC_ConfigChannel+0x67c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x5e2>
 80032ce:	4a28      	ldr	r2, [pc, #160]	; (8003370 <HAL_ADC_ConfigChannel+0x680>)
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x5e4>
 80032d2:	4a28      	ldr	r2, [pc, #160]	; (8003374 <HAL_ADC_ConfigChannel+0x684>)
 80032d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7fe fdae 	bl	8001e3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e2:	e036      	b.n	8003352 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_ADC_ConfigChannel+0x69c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d131      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x662>
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d12c      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_ADC_ConfigChannel+0x688>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d127      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_ADC_ConfigChannel+0x678>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_ADC_ConfigChannel+0x626>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_ADC_ConfigChannel+0x67c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_ADC_ConfigChannel+0x62a>
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <HAL_ADC_ConfigChannel+0x680>)
 8003318:	e000      	b.n	800331c <HAL_ADC_ConfigChannel+0x62c>
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_ADC_ConfigChannel+0x684>)
 800331c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fe fd8a 	bl	8001e3e <LL_ADC_SetCommonPathInternalCh>
 800332a:	e012      	b.n	8003352 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800333e:	e008      	b.n	8003352 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800335a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800335e:	4618      	mov	r0, r3
 8003360:	3784      	adds	r7, #132	; 0x84
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	40022000 	.word	0x40022000
 800336c:	40022100 	.word	0x40022100
 8003370:	40022300 	.word	0x40022300
 8003374:	58026300 	.word	0x58026300
 8003378:	58026000 	.word	0x58026000
 800337c:	cb840000 	.word	0xcb840000
 8003380:	24000000 	.word	0x24000000
 8003384:	053e2d63 	.word	0x053e2d63
 8003388:	c7520000 	.word	0xc7520000
 800338c:	cfb80000 	.word	0xcfb80000

08003390 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe ff52 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 80033ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe ff74 	bl	80022a0 <LL_ADC_INJ_IsConversionOngoing>
 80033b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8098 	beq.w	80034f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02a      	beq.n	800342c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7d5b      	ldrb	r3, [r3, #21]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d126      	bne.n	800342c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7d1b      	ldrb	r3, [r3, #20]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d122      	bne.n	800342c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033ea:	e014      	b.n	8003416 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4a45      	ldr	r2, [pc, #276]	; (8003504 <ADC_ConversionStop+0x174>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d90d      	bls.n	8003410 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e074      	b.n	80034fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d1e3      	bne.n	80033ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d014      	beq.n	800345c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe ff0a 	bl	8002250 <LL_ADC_REG_IsConversionOngoing>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fec7 	bl	80021da <LL_ADC_IsDisableOngoing>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fee6 	bl	8002228 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d014      	beq.n	800348c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe ff1a 	bl	80022a0 <LL_ADC_INJ_IsConversionOngoing>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe feaf 	bl	80021da <LL_ADC_IsDisableOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fef6 	bl	8002278 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d005      	beq.n	800349e <ADC_ConversionStop+0x10e>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d105      	bne.n	80034a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003498:	230c      	movs	r3, #12
 800349a:	617b      	str	r3, [r7, #20]
        break;
 800349c:	e005      	b.n	80034aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800349e:	2308      	movs	r3, #8
 80034a0:	617b      	str	r3, [r7, #20]
        break;
 80034a2:	e002      	b.n	80034aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80034a4:	2304      	movs	r3, #4
 80034a6:	617b      	str	r3, [r7, #20]
        break;
 80034a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80034aa:	f7fe fc63 	bl	8001d74 <HAL_GetTick>
 80034ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034b0:	e01b      	b.n	80034ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80034b2:	f7fe fc5f 	bl	8001d74 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d914      	bls.n	80034ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1dc      	bne.n	80034b2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	000cdbff 	.word	0x000cdbff

08003508 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fe4d 	bl	80021b4 <LL_ADC_IsEnabled>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d16e      	bne.n	80035fe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	4b38      	ldr	r3, [pc, #224]	; (8003608 <ADC_Enable+0x100>)
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f043 0210 	orr.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e05a      	b.n	8003600 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fe08 	bl	8002164 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003554:	f7fe fc0e 	bl	8001d74 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <ADC_Enable+0x104>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <ADC_Enable+0x66>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <ADC_Enable+0x108>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <ADC_Enable+0x6a>
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <ADC_Enable+0x10c>)
 8003570:	e000      	b.n	8003574 <ADC_Enable+0x6c>
 8003572:	4b29      	ldr	r3, [pc, #164]	; (8003618 <ADC_Enable+0x110>)
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fd8b 	bl	8002090 <LL_ADC_GetMultimode>
 800357a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <ADC_Enable+0x108>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d002      	beq.n	800358c <ADC_Enable+0x84>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e000      	b.n	800358e <ADC_Enable+0x86>
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <ADC_Enable+0x104>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d130      	bne.n	80035fe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800359c:	e028      	b.n	80035f0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fe06 	bl	80021b4 <LL_ADC_IsEnabled>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fdd6 	bl	8002164 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b8:	f7fe fbdc 	bl	8001d74 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d914      	bls.n	80035f0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d00d      	beq.n	80035f0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f043 0210 	orr.w	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d1cf      	bne.n	800359e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	8000003f 	.word	0x8000003f
 800360c:	40022000 	.word	0x40022000
 8003610:	40022100 	.word	0x40022100
 8003614:	40022300 	.word	0x40022300
 8003618:	58026300 	.word	0x58026300

0800361c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fdd6 	bl	80021da <LL_ADC_IsDisableOngoing>
 800362e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fdbd 	bl	80021b4 <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d047      	beq.n	80036d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d144      	bne.n	80036d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030d 	and.w	r3, r3, #13
 8003650:	2b01      	cmp	r3, #1
 8003652:	d10c      	bne.n	800366e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fd97 	bl	800218c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2203      	movs	r2, #3
 8003664:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003666:	f7fe fb85 	bl	8001d74 <HAL_GetTick>
 800366a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800366c:	e029      	b.n	80036c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e023      	b.n	80036d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800368a:	f7fe fb73 	bl	8001d74 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d914      	bls.n	80036c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e007      	b.n	80036d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1dc      	bne.n	800368a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d14b      	bne.n	800378c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d021      	beq.n	8003752 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fc08 	bl	8001f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d032      	beq.n	8003784 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d12b      	bne.n	8003784 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11f      	bne.n	8003784 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
 8003750:	e018      	b.n	8003784 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7fd fa5d 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800378a:	e00e      	b.n	80037aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fa9f 	bl	8002cdc <HAL_ADC_ErrorCallback>
}
 800379e:	e004      	b.n	80037aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7fd f9e7 	bl	8000b94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff fa71 	bl	8002cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <ADC_ConfigureBoostMode+0x1f4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <ADC_ConfigureBoostMode+0x1c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a78      	ldr	r2, [pc, #480]	; (80039fc <ADC_ConfigureBoostMode+0x1f8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d109      	bne.n	8003834 <ADC_ConfigureBoostMode+0x30>
 8003820:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <ADC_ConfigureBoostMode+0x1fc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e008      	b.n	8003846 <ADC_ConfigureBoostMode+0x42>
 8003834:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <ADC_ConfigureBoostMode+0x200>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01c      	beq.n	8003884 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800384a:	f004 f9f1 	bl	8007c30 <HAL_RCC_GetHCLKFreq>
 800384e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003858:	d010      	beq.n	800387c <ADC_ConfigureBoostMode+0x78>
 800385a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385e:	d871      	bhi.n	8003944 <ADC_ConfigureBoostMode+0x140>
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d002      	beq.n	800386c <ADC_ConfigureBoostMode+0x68>
 8003866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386a:	d16b      	bne.n	8003944 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	60fb      	str	r3, [r7, #12]
        break;
 800387a:	e066      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	60fb      	str	r3, [r7, #12]
        break;
 8003882:	e062      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003884:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003888:	f005 f9b0 	bl	8008bec <HAL_RCCEx_GetPeriphCLKFreq>
 800388c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003896:	d051      	beq.n	800393c <ADC_ConfigureBoostMode+0x138>
 8003898:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800389c:	d854      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 800389e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80038a2:	d047      	beq.n	8003934 <ADC_ConfigureBoostMode+0x130>
 80038a4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80038a8:	d84e      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80038ae:	d03d      	beq.n	800392c <ADC_ConfigureBoostMode+0x128>
 80038b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80038b4:	d848      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ba:	d033      	beq.n	8003924 <ADC_ConfigureBoostMode+0x120>
 80038bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c0:	d842      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038c2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80038c6:	d029      	beq.n	800391c <ADC_ConfigureBoostMode+0x118>
 80038c8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80038cc:	d83c      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80038d2:	d01a      	beq.n	800390a <ADC_ConfigureBoostMode+0x106>
 80038d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80038d8:	d836      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80038de:	d014      	beq.n	800390a <ADC_ConfigureBoostMode+0x106>
 80038e0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80038e4:	d830      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ea:	d00e      	beq.n	800390a <ADC_ConfigureBoostMode+0x106>
 80038ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f0:	d82a      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038f6:	d008      	beq.n	800390a <ADC_ConfigureBoostMode+0x106>
 80038f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038fc:	d824      	bhi.n	8003948 <ADC_ConfigureBoostMode+0x144>
 80038fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003902:	d002      	beq.n	800390a <ADC_ConfigureBoostMode+0x106>
 8003904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003908:	d11e      	bne.n	8003948 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0c9b      	lsrs	r3, r3, #18
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	60fb      	str	r3, [r7, #12]
        break;
 800391a:	e016      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
        break;
 8003922:	e012      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	60fb      	str	r3, [r7, #12]
        break;
 800392a:	e00e      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	60fb      	str	r3, [r7, #12]
        break;
 8003932:	e00a      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	09db      	lsrs	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]
        break;
 800393a:	e006      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	60fb      	str	r3, [r7, #12]
        break;
 8003942:	e002      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
        break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003948:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800394a:	f7fe fa43 	bl	8001dd4 <HAL_GetREVID>
 800394e:	4603      	mov	r3, r0
 8003950:	f241 0203 	movw	r2, #4099	; 0x1003
 8003954:	4293      	cmp	r3, r2
 8003956:	d815      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <ADC_ConfigureBoostMode+0x204>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d908      	bls.n	8003972 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003970:	e03e      	b.n	80039f0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003980:	609a      	str	r2, [r3, #8]
}
 8003982:	e035      	b.n	80039f0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <ADC_ConfigureBoostMode+0x208>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d808      	bhi.n	80039a4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039a0:	609a      	str	r2, [r3, #8]
}
 80039a2:	e025      	b.n	80039f0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <ADC_ConfigureBoostMode+0x20c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d80a      	bhi.n	80039c2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	e016      	b.n	80039f0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <ADC_ConfigureBoostMode+0x210>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d80a      	bhi.n	80039e0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	609a      	str	r2, [r3, #8]
}
 80039de:	e007      	b.n	80039f0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80039ee:	609a      	str	r2, [r3, #8]
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40022000 	.word	0x40022000
 80039fc:	40022100 	.word	0x40022100
 8003a00:	40022300 	.word	0x40022300
 8003a04:	58026300 	.word	0x58026300
 8003a08:	01312d00 	.word	0x01312d00
 8003a0c:	005f5e10 	.word	0x005f5e10
 8003a10:	00bebc20 	.word	0x00bebc20
 8003a14:	017d7840 	.word	0x017d7840

08003a18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <__NVIC_SetPriorityGrouping>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <__NVIC_SetPriorityGrouping+0x40>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <__NVIC_SetPriorityGrouping+0x40>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	60d3      	str	r3, [r2, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00
 8003ac0:	05fa0000 	.word	0x05fa0000

08003ac4 <__NVIC_GetPriorityGrouping>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__NVIC_GetPriorityGrouping+0x18>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 0307 	and.w	r3, r3, #7
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_EnableIRQ>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0b      	blt.n	8003b0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4907      	ldr	r1, [pc, #28]	; (8003b18 <__NVIC_EnableIRQ+0x38>)
 8003afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e100 	.word	0xe000e100

08003b1c <__NVIC_SetPriority>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	; (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <NVIC_EncodePriority>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1c3 0307 	rsb	r3, r3, #7
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf28      	it	cs
 8003b8e:	2304      	movcs	r3, #4
 8003b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d902      	bls.n	8003ba0 <NVIC_EncodePriority+0x30>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3b03      	subs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <NVIC_EncodePriority+0x32>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43d9      	mvns	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	4313      	orrs	r3, r2
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ff4c 	bl	8003a7c <__NVIC_SetPriorityGrouping>
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bfa:	f7ff ff63 	bl	8003ac4 <__NVIC_GetPriorityGrouping>
 8003bfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	6978      	ldr	r0, [r7, #20]
 8003c06:	f7ff ffb3 	bl	8003b70 <NVIC_EncodePriority>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff ff82 	bl	8003b1c <__NVIC_SetPriority>
}
 8003c18:	bf00      	nop
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ff56 	bl	8003ae0 <__NVIC_EnableIRQ>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003c40:	f3bf 8f5f 	dmb	sy
}
 8003c44:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <HAL_MPU_Disable+0x28>)
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <HAL_MPU_Disable+0x28>)
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_MPU_Disable+0x2c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000ed00 	.word	0xe000ed00
 8003c68:	e000ed90 	.word	0xe000ed90

08003c6c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_MPU_Enable+0x38>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_MPU_Enable+0x3c>)
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <HAL_MPU_Enable+0x3c>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c8a:	f3bf 8f4f 	dsb	sy
}
 8003c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c90:	f3bf 8f6f 	isb	sy
}
 8003c94:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	e000ed90 	.word	0xe000ed90
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	785a      	ldrb	r2, [r3, #1]
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_MPU_ConfigRegion+0x84>)
 8003cba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d029      	beq.n	8003d18 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <HAL_MPU_ConfigRegion+0x84>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7b1b      	ldrb	r3, [r3, #12]
 8003cd0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	7adb      	ldrb	r3, [r3, #11]
 8003cd6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003cd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7a9b      	ldrb	r3, [r3, #10]
 8003cde:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ce0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7b5b      	ldrb	r3, [r3, #13]
 8003ce6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ce8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7b9b      	ldrb	r3, [r3, #14]
 8003cee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003cf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7bdb      	ldrb	r3, [r3, #15]
 8003cf6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003cf8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7a5b      	ldrb	r3, [r3, #9]
 8003cfe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7a1b      	ldrb	r3, [r3, #8]
 8003d06:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d08:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d10:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d12:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d14:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003d16:	e005      	b.n	8003d24 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_MPU_ConfigRegion+0x84>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <HAL_MPU_ConfigRegion+0x84>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	611a      	str	r2, [r3, #16]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	e000ed90 	.word	0xe000ed90

08003d34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7fe f81a 	bl	8001d74 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e316      	b.n	800437a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a66      	ldr	r2, [pc, #408]	; (8003eec <HAL_DMA_Init+0x1b8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04a      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a65      	ldr	r2, [pc, #404]	; (8003ef0 <HAL_DMA_Init+0x1bc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d045      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a63      	ldr	r2, [pc, #396]	; (8003ef4 <HAL_DMA_Init+0x1c0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a62      	ldr	r2, [pc, #392]	; (8003ef8 <HAL_DMA_Init+0x1c4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d03b      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a60      	ldr	r2, [pc, #384]	; (8003efc <HAL_DMA_Init+0x1c8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a5f      	ldr	r2, [pc, #380]	; (8003f00 <HAL_DMA_Init+0x1cc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d031      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <HAL_DMA_Init+0x1d0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02c      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5c      	ldr	r2, [pc, #368]	; (8003f08 <HAL_DMA_Init+0x1d4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5a      	ldr	r2, [pc, #360]	; (8003f0c <HAL_DMA_Init+0x1d8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d022      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a59      	ldr	r2, [pc, #356]	; (8003f10 <HAL_DMA_Init+0x1dc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d01d      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a57      	ldr	r2, [pc, #348]	; (8003f14 <HAL_DMA_Init+0x1e0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d018      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a56      	ldr	r2, [pc, #344]	; (8003f18 <HAL_DMA_Init+0x1e4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a54      	ldr	r2, [pc, #336]	; (8003f1c <HAL_DMA_Init+0x1e8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a53      	ldr	r2, [pc, #332]	; (8003f20 <HAL_DMA_Init+0x1ec>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a51      	ldr	r2, [pc, #324]	; (8003f24 <HAL_DMA_Init+0x1f0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_Init+0xb8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a50      	ldr	r2, [pc, #320]	; (8003f28 <HAL_DMA_Init+0x1f4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Init+0xbc>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_DMA_Init+0xbe>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 813b 	beq.w	800406e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a37      	ldr	r2, [pc, #220]	; (8003eec <HAL_DMA_Init+0x1b8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <HAL_DMA_Init+0x1bc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	; (8003ef4 <HAL_DMA_Init+0x1c0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a33      	ldr	r2, [pc, #204]	; (8003ef8 <HAL_DMA_Init+0x1c4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	; (8003efc <HAL_DMA_Init+0x1c8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <HAL_DMA_Init+0x1cc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <HAL_DMA_Init+0x1d0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <HAL_DMA_Init+0x1d4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <HAL_DMA_Init+0x1d8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <HAL_DMA_Init+0x1dc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <HAL_DMA_Init+0x1e0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_DMA_Init+0x1e4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <HAL_DMA_Init+0x1e8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_DMA_Init+0x1ec>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_DMA_Init+0x1f0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_Init+0x174>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_Init+0x1f4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <HAL_DMA_Init+0x186>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e007      	b.n	8003eca <HAL_DMA_Init+0x196>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eca:	e02f      	b.n	8003f2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ecc:	f7fd ff52 	bl	8001d74 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d928      	bls.n	8003f2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e246      	b.n	800437a <HAL_DMA_Init+0x646>
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1c8      	bne.n	8003ecc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4b83      	ldr	r3, [pc, #524]	; (8004154 <HAL_DMA_Init+0x420>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d107      	bne.n	8003f90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f90:	4b71      	ldr	r3, [pc, #452]	; (8004158 <HAL_DMA_Init+0x424>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b71      	ldr	r3, [pc, #452]	; (800415c <HAL_DMA_Init+0x428>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9c:	d328      	bcc.n	8003ff0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b28      	cmp	r3, #40	; 0x28
 8003fa4:	d903      	bls.n	8003fae <HAL_DMA_Init+0x27a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b2e      	cmp	r3, #46	; 0x2e
 8003fac:	d917      	bls.n	8003fde <HAL_DMA_Init+0x2aa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb4:	d903      	bls.n	8003fbe <HAL_DMA_Init+0x28a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b42      	cmp	r3, #66	; 0x42
 8003fbc:	d90f      	bls.n	8003fde <HAL_DMA_Init+0x2aa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b46      	cmp	r3, #70	; 0x46
 8003fc4:	d903      	bls.n	8003fce <HAL_DMA_Init+0x29a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b48      	cmp	r3, #72	; 0x48
 8003fcc:	d907      	bls.n	8003fde <HAL_DMA_Init+0x2aa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b4e      	cmp	r3, #78	; 0x4e
 8003fd4:	d905      	bls.n	8003fe2 <HAL_DMA_Init+0x2ae>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b52      	cmp	r3, #82	; 0x52
 8003fdc:	d801      	bhi.n	8003fe2 <HAL_DMA_Init+0x2ae>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_DMA_Init+0x2b0>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b04      	cmp	r3, #4
 8004018:	d117      	bne.n	800404a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f002 fb31 	bl	8006694 <DMA_CheckFifoParam>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e197      	b.n	800437a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f002 fa6c 	bl	8006530 <DMA_CalcBaseAndBitshift>
 8004058:	4603      	mov	r3, r0
 800405a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	223f      	movs	r2, #63	; 0x3f
 8004066:	409a      	lsls	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	e0cd      	b.n	800420a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a3b      	ldr	r2, [pc, #236]	; (8004160 <HAL_DMA_Init+0x42c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d022      	beq.n	80040be <HAL_DMA_Init+0x38a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a39      	ldr	r2, [pc, #228]	; (8004164 <HAL_DMA_Init+0x430>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01d      	beq.n	80040be <HAL_DMA_Init+0x38a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a38      	ldr	r2, [pc, #224]	; (8004168 <HAL_DMA_Init+0x434>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d018      	beq.n	80040be <HAL_DMA_Init+0x38a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a36      	ldr	r2, [pc, #216]	; (800416c <HAL_DMA_Init+0x438>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_DMA_Init+0x38a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a35      	ldr	r2, [pc, #212]	; (8004170 <HAL_DMA_Init+0x43c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_DMA_Init+0x38a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a33      	ldr	r2, [pc, #204]	; (8004174 <HAL_DMA_Init+0x440>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_DMA_Init+0x38a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a32      	ldr	r2, [pc, #200]	; (8004178 <HAL_DMA_Init+0x444>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_DMA_Init+0x38a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a30      	ldr	r2, [pc, #192]	; (800417c <HAL_DMA_Init+0x448>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_DMA_Init+0x38e>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_DMA_Init+0x390>
 80040c2:	2300      	movs	r3, #0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8097 	beq.w	80041f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a24      	ldr	r2, [pc, #144]	; (8004160 <HAL_DMA_Init+0x42c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d021      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	; (8004164 <HAL_DMA_Init+0x430>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01c      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_DMA_Init+0x434>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d017      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <HAL_DMA_Init+0x438>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d012      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_DMA_Init+0x43c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00d      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_DMA_Init+0x440>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d008      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <HAL_DMA_Init+0x444>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <HAL_DMA_Init+0x3e4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_DMA_Init+0x448>)
 8004116:	4293      	cmp	r3, r2
 8004118:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_DMA_Init+0x44c>)
 8004136:	4013      	ands	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d020      	beq.n	8004184 <HAL_DMA_Init+0x450>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d102      	bne.n	8004150 <HAL_DMA_Init+0x41c>
 800414a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800414e:	e01a      	b.n	8004186 <HAL_DMA_Init+0x452>
 8004150:	2300      	movs	r3, #0
 8004152:	e018      	b.n	8004186 <HAL_DMA_Init+0x452>
 8004154:	fe10803f 	.word	0xfe10803f
 8004158:	5c001000 	.word	0x5c001000
 800415c:	ffff0000 	.word	0xffff0000
 8004160:	58025408 	.word	0x58025408
 8004164:	5802541c 	.word	0x5802541c
 8004168:	58025430 	.word	0x58025430
 800416c:	58025444 	.word	0x58025444
 8004170:	58025458 	.word	0x58025458
 8004174:	5802546c 	.word	0x5802546c
 8004178:	58025480 	.word	0x58025480
 800417c:	58025494 	.word	0x58025494
 8004180:	fffe000f 	.word	0xfffe000f
 8004184:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800418c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800419c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b6e      	ldr	r3, [pc, #440]	; (8004384 <HAL_DMA_Init+0x650>)
 80041cc:	4413      	add	r3, r2
 80041ce:	4a6e      	ldr	r2, [pc, #440]	; (8004388 <HAL_DMA_Init+0x654>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	009a      	lsls	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f002 f9a7 	bl	8006530 <DMA_CalcBaseAndBitshift>
 80041e2:	4603      	mov	r3, r0
 80041e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	e008      	b.n	800420a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2240      	movs	r2, #64	; 0x40
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2203      	movs	r2, #3
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0b7      	b.n	800437a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a5f      	ldr	r2, [pc, #380]	; (800438c <HAL_DMA_Init+0x658>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d072      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a5d      	ldr	r2, [pc, #372]	; (8004390 <HAL_DMA_Init+0x65c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d06d      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a5c      	ldr	r2, [pc, #368]	; (8004394 <HAL_DMA_Init+0x660>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d068      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5a      	ldr	r2, [pc, #360]	; (8004398 <HAL_DMA_Init+0x664>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d063      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a59      	ldr	r2, [pc, #356]	; (800439c <HAL_DMA_Init+0x668>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d05e      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a57      	ldr	r2, [pc, #348]	; (80043a0 <HAL_DMA_Init+0x66c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d059      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a56      	ldr	r2, [pc, #344]	; (80043a4 <HAL_DMA_Init+0x670>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d054      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a54      	ldr	r2, [pc, #336]	; (80043a8 <HAL_DMA_Init+0x674>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04f      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a53      	ldr	r2, [pc, #332]	; (80043ac <HAL_DMA_Init+0x678>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04a      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a51      	ldr	r2, [pc, #324]	; (80043b0 <HAL_DMA_Init+0x67c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d045      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a50      	ldr	r2, [pc, #320]	; (80043b4 <HAL_DMA_Init+0x680>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d040      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a4e      	ldr	r2, [pc, #312]	; (80043b8 <HAL_DMA_Init+0x684>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d03b      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a4d      	ldr	r2, [pc, #308]	; (80043bc <HAL_DMA_Init+0x688>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d036      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a4b      	ldr	r2, [pc, #300]	; (80043c0 <HAL_DMA_Init+0x68c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a4a      	ldr	r2, [pc, #296]	; (80043c4 <HAL_DMA_Init+0x690>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d02c      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a48      	ldr	r2, [pc, #288]	; (80043c8 <HAL_DMA_Init+0x694>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d027      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_DMA_Init+0x698>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a45      	ldr	r2, [pc, #276]	; (80043d0 <HAL_DMA_Init+0x69c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a44      	ldr	r2, [pc, #272]	; (80043d4 <HAL_DMA_Init+0x6a0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a42      	ldr	r2, [pc, #264]	; (80043d8 <HAL_DMA_Init+0x6a4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a41      	ldr	r2, [pc, #260]	; (80043dc <HAL_DMA_Init+0x6a8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3f      	ldr	r2, [pc, #252]	; (80043e0 <HAL_DMA_Init+0x6ac>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3e      	ldr	r2, [pc, #248]	; (80043e4 <HAL_DMA_Init+0x6b0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_DMA_Init+0x5c6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <HAL_DMA_Init+0x6b4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_DMA_Init+0x5ca>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <HAL_DMA_Init+0x5cc>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d032      	beq.n	800436a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f002 fa41 	bl	800678c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d102      	bne.n	8004318 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800432c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d010      	beq.n	8004358 <HAL_DMA_Init+0x624>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d80c      	bhi.n	8004358 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f002 fabe 	bl	80068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	e008      	b.n	800436a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	a7fdabf8 	.word	0xa7fdabf8
 8004388:	cccccccd 	.word	0xcccccccd
 800438c:	40020010 	.word	0x40020010
 8004390:	40020028 	.word	0x40020028
 8004394:	40020040 	.word	0x40020040
 8004398:	40020058 	.word	0x40020058
 800439c:	40020070 	.word	0x40020070
 80043a0:	40020088 	.word	0x40020088
 80043a4:	400200a0 	.word	0x400200a0
 80043a8:	400200b8 	.word	0x400200b8
 80043ac:	40020410 	.word	0x40020410
 80043b0:	40020428 	.word	0x40020428
 80043b4:	40020440 	.word	0x40020440
 80043b8:	40020458 	.word	0x40020458
 80043bc:	40020470 	.word	0x40020470
 80043c0:	40020488 	.word	0x40020488
 80043c4:	400204a0 	.word	0x400204a0
 80043c8:	400204b8 	.word	0x400204b8
 80043cc:	58025408 	.word	0x58025408
 80043d0:	5802541c 	.word	0x5802541c
 80043d4:	58025430 	.word	0x58025430
 80043d8:	58025444 	.word	0x58025444
 80043dc:	58025458 	.word	0x58025458
 80043e0:	5802546c 	.word	0x5802546c
 80043e4:	58025480 	.word	0x58025480
 80043e8:	58025494 	.word	0x58025494

080043ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e226      	b.n	8004856 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_DMA_Start_IT+0x2a>
 8004412:	2302      	movs	r3, #2
 8004414:	e21f      	b.n	8004856 <HAL_DMA_Start_IT+0x46a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	f040 820a 	bne.w	8004840 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a68      	ldr	r2, [pc, #416]	; (80045e0 <HAL_DMA_Start_IT+0x1f4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d04a      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a66      	ldr	r2, [pc, #408]	; (80045e4 <HAL_DMA_Start_IT+0x1f8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d045      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_DMA_Start_IT+0x1fc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d040      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a63      	ldr	r2, [pc, #396]	; (80045ec <HAL_DMA_Start_IT+0x200>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d03b      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a62      	ldr	r2, [pc, #392]	; (80045f0 <HAL_DMA_Start_IT+0x204>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d036      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a60      	ldr	r2, [pc, #384]	; (80045f4 <HAL_DMA_Start_IT+0x208>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d031      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5f      	ldr	r2, [pc, #380]	; (80045f8 <HAL_DMA_Start_IT+0x20c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d02c      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a5d      	ldr	r2, [pc, #372]	; (80045fc <HAL_DMA_Start_IT+0x210>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d027      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5c      	ldr	r2, [pc, #368]	; (8004600 <HAL_DMA_Start_IT+0x214>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d022      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a5a      	ldr	r2, [pc, #360]	; (8004604 <HAL_DMA_Start_IT+0x218>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01d      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a59      	ldr	r2, [pc, #356]	; (8004608 <HAL_DMA_Start_IT+0x21c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d018      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a57      	ldr	r2, [pc, #348]	; (800460c <HAL_DMA_Start_IT+0x220>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a56      	ldr	r2, [pc, #344]	; (8004610 <HAL_DMA_Start_IT+0x224>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a54      	ldr	r2, [pc, #336]	; (8004614 <HAL_DMA_Start_IT+0x228>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a53      	ldr	r2, [pc, #332]	; (8004618 <HAL_DMA_Start_IT+0x22c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_DMA_Start_IT+0xee>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a51      	ldr	r2, [pc, #324]	; (800461c <HAL_DMA_Start_IT+0x230>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <HAL_DMA_Start_IT+0x100>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e007      	b.n	80044fc <HAL_DMA_Start_IT+0x110>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f001 fe68 	bl	80061d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a34      	ldr	r2, [pc, #208]	; (80045e0 <HAL_DMA_Start_IT+0x1f4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04a      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a33      	ldr	r2, [pc, #204]	; (80045e4 <HAL_DMA_Start_IT+0x1f8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d045      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a31      	ldr	r2, [pc, #196]	; (80045e8 <HAL_DMA_Start_IT+0x1fc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d040      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a30      	ldr	r2, [pc, #192]	; (80045ec <HAL_DMA_Start_IT+0x200>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d03b      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2e      	ldr	r2, [pc, #184]	; (80045f0 <HAL_DMA_Start_IT+0x204>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d036      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <HAL_DMA_Start_IT+0x208>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d031      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <HAL_DMA_Start_IT+0x20c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02c      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <HAL_DMA_Start_IT+0x210>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d027      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a28      	ldr	r2, [pc, #160]	; (8004600 <HAL_DMA_Start_IT+0x214>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a27      	ldr	r2, [pc, #156]	; (8004604 <HAL_DMA_Start_IT+0x218>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a25      	ldr	r2, [pc, #148]	; (8004608 <HAL_DMA_Start_IT+0x21c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a24      	ldr	r2, [pc, #144]	; (800460c <HAL_DMA_Start_IT+0x220>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a22      	ldr	r2, [pc, #136]	; (8004610 <HAL_DMA_Start_IT+0x224>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a21      	ldr	r2, [pc, #132]	; (8004614 <HAL_DMA_Start_IT+0x228>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_DMA_Start_IT+0x22c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_DMA_Start_IT+0x1bc>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_DMA_Start_IT+0x230>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Start_IT+0x1c0>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <HAL_DMA_Start_IT+0x1c2>
 80045ac:	2300      	movs	r3, #0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d036      	beq.n	8004620 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 021e 	bic.w	r2, r3, #30
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0216 	orr.w	r2, r2, #22
 80045c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d03e      	beq.n	800464c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0208 	orr.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e035      	b.n	800464c <HAL_DMA_Start_IT+0x260>
 80045e0:	40020010 	.word	0x40020010
 80045e4:	40020028 	.word	0x40020028
 80045e8:	40020040 	.word	0x40020040
 80045ec:	40020058 	.word	0x40020058
 80045f0:	40020070 	.word	0x40020070
 80045f4:	40020088 	.word	0x40020088
 80045f8:	400200a0 	.word	0x400200a0
 80045fc:	400200b8 	.word	0x400200b8
 8004600:	40020410 	.word	0x40020410
 8004604:	40020428 	.word	0x40020428
 8004608:	40020440 	.word	0x40020440
 800460c:	40020458 	.word	0x40020458
 8004610:	40020470 	.word	0x40020470
 8004614:	40020488 	.word	0x40020488
 8004618:	400204a0 	.word	0x400204a0
 800461c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 020e 	bic.w	r2, r3, #14
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 020a 	orr.w	r2, r2, #10
 8004632:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0204 	orr.w	r2, r2, #4
 800464a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a83      	ldr	r2, [pc, #524]	; (8004860 <HAL_DMA_Start_IT+0x474>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d072      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a82      	ldr	r2, [pc, #520]	; (8004864 <HAL_DMA_Start_IT+0x478>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d06d      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a80      	ldr	r2, [pc, #512]	; (8004868 <HAL_DMA_Start_IT+0x47c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d068      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7f      	ldr	r2, [pc, #508]	; (800486c <HAL_DMA_Start_IT+0x480>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d063      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7d      	ldr	r2, [pc, #500]	; (8004870 <HAL_DMA_Start_IT+0x484>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d05e      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a7c      	ldr	r2, [pc, #496]	; (8004874 <HAL_DMA_Start_IT+0x488>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d059      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7a      	ldr	r2, [pc, #488]	; (8004878 <HAL_DMA_Start_IT+0x48c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d054      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a79      	ldr	r2, [pc, #484]	; (800487c <HAL_DMA_Start_IT+0x490>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d04f      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a77      	ldr	r2, [pc, #476]	; (8004880 <HAL_DMA_Start_IT+0x494>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a76      	ldr	r2, [pc, #472]	; (8004884 <HAL_DMA_Start_IT+0x498>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a74      	ldr	r2, [pc, #464]	; (8004888 <HAL_DMA_Start_IT+0x49c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a73      	ldr	r2, [pc, #460]	; (800488c <HAL_DMA_Start_IT+0x4a0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a71      	ldr	r2, [pc, #452]	; (8004890 <HAL_DMA_Start_IT+0x4a4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a70      	ldr	r2, [pc, #448]	; (8004894 <HAL_DMA_Start_IT+0x4a8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6e      	ldr	r2, [pc, #440]	; (8004898 <HAL_DMA_Start_IT+0x4ac>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6d      	ldr	r2, [pc, #436]	; (800489c <HAL_DMA_Start_IT+0x4b0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6b      	ldr	r2, [pc, #428]	; (80048a0 <HAL_DMA_Start_IT+0x4b4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6a      	ldr	r2, [pc, #424]	; (80048a4 <HAL_DMA_Start_IT+0x4b8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a68      	ldr	r2, [pc, #416]	; (80048a8 <HAL_DMA_Start_IT+0x4bc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a67      	ldr	r2, [pc, #412]	; (80048ac <HAL_DMA_Start_IT+0x4c0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a65      	ldr	r2, [pc, #404]	; (80048b0 <HAL_DMA_Start_IT+0x4c4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a64      	ldr	r2, [pc, #400]	; (80048b4 <HAL_DMA_Start_IT+0x4c8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a62      	ldr	r2, [pc, #392]	; (80048b8 <HAL_DMA_Start_IT+0x4cc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_Start_IT+0x350>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a61      	ldr	r2, [pc, #388]	; (80048bc <HAL_DMA_Start_IT+0x4d0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_DMA_Start_IT+0x354>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_DMA_Start_IT+0x356>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01a      	beq.n	800477c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004762:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800477a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a37      	ldr	r2, [pc, #220]	; (8004860 <HAL_DMA_Start_IT+0x474>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d04a      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a36      	ldr	r2, [pc, #216]	; (8004864 <HAL_DMA_Start_IT+0x478>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d045      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a34      	ldr	r2, [pc, #208]	; (8004868 <HAL_DMA_Start_IT+0x47c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d040      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a33      	ldr	r2, [pc, #204]	; (800486c <HAL_DMA_Start_IT+0x480>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d03b      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a31      	ldr	r2, [pc, #196]	; (8004870 <HAL_DMA_Start_IT+0x484>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d036      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_DMA_Start_IT+0x488>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d031      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2e      	ldr	r2, [pc, #184]	; (8004878 <HAL_DMA_Start_IT+0x48c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d02c      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2d      	ldr	r2, [pc, #180]	; (800487c <HAL_DMA_Start_IT+0x490>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d027      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	; (8004880 <HAL_DMA_Start_IT+0x494>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <HAL_DMA_Start_IT+0x498>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d01d      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a28      	ldr	r2, [pc, #160]	; (8004888 <HAL_DMA_Start_IT+0x49c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_DMA_Start_IT+0x4a0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a25      	ldr	r2, [pc, #148]	; (8004890 <HAL_DMA_Start_IT+0x4a4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a24      	ldr	r2, [pc, #144]	; (8004894 <HAL_DMA_Start_IT+0x4a8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a22      	ldr	r2, [pc, #136]	; (8004898 <HAL_DMA_Start_IT+0x4ac>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_DMA_Start_IT+0x430>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a21      	ldr	r2, [pc, #132]	; (800489c <HAL_DMA_Start_IT+0x4b0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d108      	bne.n	800482e <HAL_DMA_Start_IT+0x442>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e012      	b.n	8004854 <HAL_DMA_Start_IT+0x468>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e009      	b.n	8004854 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800484e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40020010 	.word	0x40020010
 8004864:	40020028 	.word	0x40020028
 8004868:	40020040 	.word	0x40020040
 800486c:	40020058 	.word	0x40020058
 8004870:	40020070 	.word	0x40020070
 8004874:	40020088 	.word	0x40020088
 8004878:	400200a0 	.word	0x400200a0
 800487c:	400200b8 	.word	0x400200b8
 8004880:	40020410 	.word	0x40020410
 8004884:	40020428 	.word	0x40020428
 8004888:	40020440 	.word	0x40020440
 800488c:	40020458 	.word	0x40020458
 8004890:	40020470 	.word	0x40020470
 8004894:	40020488 	.word	0x40020488
 8004898:	400204a0 	.word	0x400204a0
 800489c:	400204b8 	.word	0x400204b8
 80048a0:	58025408 	.word	0x58025408
 80048a4:	5802541c 	.word	0x5802541c
 80048a8:	58025430 	.word	0x58025430
 80048ac:	58025444 	.word	0x58025444
 80048b0:	58025458 	.word	0x58025458
 80048b4:	5802546c 	.word	0x5802546c
 80048b8:	58025480 	.word	0x58025480
 80048bc:	58025494 	.word	0x58025494

080048c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048c8:	f7fd fa54 	bl	8001d74 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e2dc      	b.n	8004e92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d008      	beq.n	80048f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e2cd      	b.n	8004e92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a76      	ldr	r2, [pc, #472]	; (8004ad4 <HAL_DMA_Abort+0x214>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04a      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a74      	ldr	r2, [pc, #464]	; (8004ad8 <HAL_DMA_Abort+0x218>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d045      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a73      	ldr	r2, [pc, #460]	; (8004adc <HAL_DMA_Abort+0x21c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d040      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a71      	ldr	r2, [pc, #452]	; (8004ae0 <HAL_DMA_Abort+0x220>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d03b      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a70      	ldr	r2, [pc, #448]	; (8004ae4 <HAL_DMA_Abort+0x224>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d036      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6e      	ldr	r2, [pc, #440]	; (8004ae8 <HAL_DMA_Abort+0x228>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6d      	ldr	r2, [pc, #436]	; (8004aec <HAL_DMA_Abort+0x22c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d02c      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6b      	ldr	r2, [pc, #428]	; (8004af0 <HAL_DMA_Abort+0x230>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d027      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6a      	ldr	r2, [pc, #424]	; (8004af4 <HAL_DMA_Abort+0x234>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a68      	ldr	r2, [pc, #416]	; (8004af8 <HAL_DMA_Abort+0x238>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a67      	ldr	r2, [pc, #412]	; (8004afc <HAL_DMA_Abort+0x23c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a65      	ldr	r2, [pc, #404]	; (8004b00 <HAL_DMA_Abort+0x240>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a64      	ldr	r2, [pc, #400]	; (8004b04 <HAL_DMA_Abort+0x244>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a62      	ldr	r2, [pc, #392]	; (8004b08 <HAL_DMA_Abort+0x248>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a61      	ldr	r2, [pc, #388]	; (8004b0c <HAL_DMA_Abort+0x24c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_Abort+0xd6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5f      	ldr	r2, [pc, #380]	; (8004b10 <HAL_DMA_Abort+0x250>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d101      	bne.n	800499a <HAL_DMA_Abort+0xda>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_DMA_Abort+0xdc>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 021e 	bic.w	r2, r2, #30
 80049ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e00a      	b.n	80049de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 020e 	bic.w	r2, r2, #14
 80049d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a3c      	ldr	r2, [pc, #240]	; (8004ad4 <HAL_DMA_Abort+0x214>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d072      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3a      	ldr	r2, [pc, #232]	; (8004ad8 <HAL_DMA_Abort+0x218>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d06d      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a39      	ldr	r2, [pc, #228]	; (8004adc <HAL_DMA_Abort+0x21c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d068      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a37      	ldr	r2, [pc, #220]	; (8004ae0 <HAL_DMA_Abort+0x220>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d063      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a36      	ldr	r2, [pc, #216]	; (8004ae4 <HAL_DMA_Abort+0x224>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d05e      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <HAL_DMA_Abort+0x228>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d059      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a33      	ldr	r2, [pc, #204]	; (8004aec <HAL_DMA_Abort+0x22c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d054      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <HAL_DMA_Abort+0x230>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d04f      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a30      	ldr	r2, [pc, #192]	; (8004af4 <HAL_DMA_Abort+0x234>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <HAL_DMA_Abort+0x238>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2d      	ldr	r2, [pc, #180]	; (8004afc <HAL_DMA_Abort+0x23c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <HAL_DMA_Abort+0x240>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <HAL_DMA_Abort+0x244>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <HAL_DMA_Abort+0x248>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <HAL_DMA_Abort+0x24c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <HAL_DMA_Abort+0x250>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <HAL_DMA_Abort+0x254>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <HAL_DMA_Abort+0x258>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <HAL_DMA_Abort+0x25c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <HAL_DMA_Abort+0x260>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <HAL_DMA_Abort+0x264>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_DMA_Abort+0x268>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_DMA_Abort+0x26c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_Abort+0x20e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <HAL_DMA_Abort+0x270>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d132      	bne.n	8004b34 <HAL_DMA_Abort+0x274>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e031      	b.n	8004b36 <HAL_DMA_Abort+0x276>
 8004ad2:	bf00      	nop
 8004ad4:	40020010 	.word	0x40020010
 8004ad8:	40020028 	.word	0x40020028
 8004adc:	40020040 	.word	0x40020040
 8004ae0:	40020058 	.word	0x40020058
 8004ae4:	40020070 	.word	0x40020070
 8004ae8:	40020088 	.word	0x40020088
 8004aec:	400200a0 	.word	0x400200a0
 8004af0:	400200b8 	.word	0x400200b8
 8004af4:	40020410 	.word	0x40020410
 8004af8:	40020428 	.word	0x40020428
 8004afc:	40020440 	.word	0x40020440
 8004b00:	40020458 	.word	0x40020458
 8004b04:	40020470 	.word	0x40020470
 8004b08:	40020488 	.word	0x40020488
 8004b0c:	400204a0 	.word	0x400204a0
 8004b10:	400204b8 	.word	0x400204b8
 8004b14:	58025408 	.word	0x58025408
 8004b18:	5802541c 	.word	0x5802541c
 8004b1c:	58025430 	.word	0x58025430
 8004b20:	58025444 	.word	0x58025444
 8004b24:	58025458 	.word	0x58025458
 8004b28:	5802546c 	.word	0x5802546c
 8004b2c:	58025480 	.word	0x58025480
 8004b30:	58025494 	.word	0x58025494
 8004b34:	2300      	movs	r3, #0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6d      	ldr	r2, [pc, #436]	; (8004d04 <HAL_DMA_Abort+0x444>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <HAL_DMA_Abort+0x448>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6a      	ldr	r2, [pc, #424]	; (8004d0c <HAL_DMA_Abort+0x44c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a68      	ldr	r2, [pc, #416]	; (8004d10 <HAL_DMA_Abort+0x450>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a67      	ldr	r2, [pc, #412]	; (8004d14 <HAL_DMA_Abort+0x454>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a65      	ldr	r2, [pc, #404]	; (8004d18 <HAL_DMA_Abort+0x458>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a64      	ldr	r2, [pc, #400]	; (8004d1c <HAL_DMA_Abort+0x45c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <HAL_DMA_Abort+0x460>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a61      	ldr	r2, [pc, #388]	; (8004d24 <HAL_DMA_Abort+0x464>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5f      	ldr	r2, [pc, #380]	; (8004d28 <HAL_DMA_Abort+0x468>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5e      	ldr	r2, [pc, #376]	; (8004d2c <HAL_DMA_Abort+0x46c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5c      	ldr	r2, [pc, #368]	; (8004d30 <HAL_DMA_Abort+0x470>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5b      	ldr	r2, [pc, #364]	; (8004d34 <HAL_DMA_Abort+0x474>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a59      	ldr	r2, [pc, #356]	; (8004d38 <HAL_DMA_Abort+0x478>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <HAL_DMA_Abort+0x47c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_Abort+0x32a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a56      	ldr	r2, [pc, #344]	; (8004d40 <HAL_DMA_Abort+0x480>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <HAL_DMA_Abort+0x33c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e007      	b.n	8004c0c <HAL_DMA_Abort+0x34c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c0c:	e013      	b.n	8004c36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c0e:	f7fd f8b1 	bl	8001d74 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d90c      	bls.n	8004c36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e12d      	b.n	8004e92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <HAL_DMA_Abort+0x444>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d04a      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_DMA_Abort+0x448>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d045      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a2c      	ldr	r2, [pc, #176]	; (8004d0c <HAL_DMA_Abort+0x44c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d040      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <HAL_DMA_Abort+0x450>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d03b      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <HAL_DMA_Abort+0x454>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d036      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <HAL_DMA_Abort+0x458>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d031      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <HAL_DMA_Abort+0x45c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d02c      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <HAL_DMA_Abort+0x460>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d027      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <HAL_DMA_Abort+0x464>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d022      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <HAL_DMA_Abort+0x468>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <HAL_DMA_Abort+0x46c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d018      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_DMA_Abort+0x470>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_DMA_Abort+0x474>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_DMA_Abort+0x478>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_DMA_Abort+0x47c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_DMA_Abort+0x422>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_DMA_Abort+0x480>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <HAL_DMA_Abort+0x426>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_DMA_Abort+0x428>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d02b      	beq.n	8004d44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	223f      	movs	r2, #63	; 0x3f
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	e02a      	b.n	8004d5a <HAL_DMA_Abort+0x49a>
 8004d04:	40020010 	.word	0x40020010
 8004d08:	40020028 	.word	0x40020028
 8004d0c:	40020040 	.word	0x40020040
 8004d10:	40020058 	.word	0x40020058
 8004d14:	40020070 	.word	0x40020070
 8004d18:	40020088 	.word	0x40020088
 8004d1c:	400200a0 	.word	0x400200a0
 8004d20:	400200b8 	.word	0x400200b8
 8004d24:	40020410 	.word	0x40020410
 8004d28:	40020428 	.word	0x40020428
 8004d2c:	40020440 	.word	0x40020440
 8004d30:	40020458 	.word	0x40020458
 8004d34:	40020470 	.word	0x40020470
 8004d38:	40020488 	.word	0x40020488
 8004d3c:	400204a0 	.word	0x400204a0
 8004d40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2201      	movs	r2, #1
 8004d54:	409a      	lsls	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4f      	ldr	r2, [pc, #316]	; (8004e9c <HAL_DMA_Abort+0x5dc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d072      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a4d      	ldr	r2, [pc, #308]	; (8004ea0 <HAL_DMA_Abort+0x5e0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d06d      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a4c      	ldr	r2, [pc, #304]	; (8004ea4 <HAL_DMA_Abort+0x5e4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d068      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a4a      	ldr	r2, [pc, #296]	; (8004ea8 <HAL_DMA_Abort+0x5e8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d063      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a49      	ldr	r2, [pc, #292]	; (8004eac <HAL_DMA_Abort+0x5ec>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d05e      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a47      	ldr	r2, [pc, #284]	; (8004eb0 <HAL_DMA_Abort+0x5f0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d059      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <HAL_DMA_Abort+0x5f4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d054      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a44      	ldr	r2, [pc, #272]	; (8004eb8 <HAL_DMA_Abort+0x5f8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d04f      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a43      	ldr	r2, [pc, #268]	; (8004ebc <HAL_DMA_Abort+0x5fc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d04a      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a41      	ldr	r2, [pc, #260]	; (8004ec0 <HAL_DMA_Abort+0x600>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d045      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <HAL_DMA_Abort+0x604>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d040      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3e      	ldr	r2, [pc, #248]	; (8004ec8 <HAL_DMA_Abort+0x608>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d03b      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <HAL_DMA_Abort+0x60c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d036      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3b      	ldr	r2, [pc, #236]	; (8004ed0 <HAL_DMA_Abort+0x610>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d031      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3a      	ldr	r2, [pc, #232]	; (8004ed4 <HAL_DMA_Abort+0x614>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d02c      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a38      	ldr	r2, [pc, #224]	; (8004ed8 <HAL_DMA_Abort+0x618>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d027      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a37      	ldr	r2, [pc, #220]	; (8004edc <HAL_DMA_Abort+0x61c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d022      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <HAL_DMA_Abort+0x620>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01d      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a34      	ldr	r2, [pc, #208]	; (8004ee4 <HAL_DMA_Abort+0x624>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d018      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_DMA_Abort+0x628>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a31      	ldr	r2, [pc, #196]	; (8004eec <HAL_DMA_Abort+0x62c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <HAL_DMA_Abort+0x630>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2e      	ldr	r2, [pc, #184]	; (8004ef4 <HAL_DMA_Abort+0x634>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_DMA_Abort+0x58a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <HAL_DMA_Abort+0x638>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_DMA_Abort+0x58e>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <HAL_DMA_Abort+0x590>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40020010 	.word	0x40020010
 8004ea0:	40020028 	.word	0x40020028
 8004ea4:	40020040 	.word	0x40020040
 8004ea8:	40020058 	.word	0x40020058
 8004eac:	40020070 	.word	0x40020070
 8004eb0:	40020088 	.word	0x40020088
 8004eb4:	400200a0 	.word	0x400200a0
 8004eb8:	400200b8 	.word	0x400200b8
 8004ebc:	40020410 	.word	0x40020410
 8004ec0:	40020428 	.word	0x40020428
 8004ec4:	40020440 	.word	0x40020440
 8004ec8:	40020458 	.word	0x40020458
 8004ecc:	40020470 	.word	0x40020470
 8004ed0:	40020488 	.word	0x40020488
 8004ed4:	400204a0 	.word	0x400204a0
 8004ed8:	400204b8 	.word	0x400204b8
 8004edc:	58025408 	.word	0x58025408
 8004ee0:	5802541c 	.word	0x5802541c
 8004ee4:	58025430 	.word	0x58025430
 8004ee8:	58025444 	.word	0x58025444
 8004eec:	58025458 	.word	0x58025458
 8004ef0:	5802546c 	.word	0x5802546c
 8004ef4:	58025480 	.word	0x58025480
 8004ef8:	58025494 	.word	0x58025494

08004efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e205      	b.n	800531a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d004      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2280      	movs	r2, #128	; 0x80
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e1fa      	b.n	800531a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a8c      	ldr	r2, [pc, #560]	; (800515c <HAL_DMA_Abort_IT+0x260>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d04a      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a8b      	ldr	r2, [pc, #556]	; (8005160 <HAL_DMA_Abort_IT+0x264>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d045      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a89      	ldr	r2, [pc, #548]	; (8005164 <HAL_DMA_Abort_IT+0x268>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d040      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a88      	ldr	r2, [pc, #544]	; (8005168 <HAL_DMA_Abort_IT+0x26c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d03b      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a86      	ldr	r2, [pc, #536]	; (800516c <HAL_DMA_Abort_IT+0x270>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d036      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a85      	ldr	r2, [pc, #532]	; (8005170 <HAL_DMA_Abort_IT+0x274>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d031      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a83      	ldr	r2, [pc, #524]	; (8005174 <HAL_DMA_Abort_IT+0x278>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02c      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a82      	ldr	r2, [pc, #520]	; (8005178 <HAL_DMA_Abort_IT+0x27c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d027      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a80      	ldr	r2, [pc, #512]	; (800517c <HAL_DMA_Abort_IT+0x280>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7f      	ldr	r2, [pc, #508]	; (8005180 <HAL_DMA_Abort_IT+0x284>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a7d      	ldr	r2, [pc, #500]	; (8005184 <HAL_DMA_Abort_IT+0x288>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a7c      	ldr	r2, [pc, #496]	; (8005188 <HAL_DMA_Abort_IT+0x28c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a7a      	ldr	r2, [pc, #488]	; (800518c <HAL_DMA_Abort_IT+0x290>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a79      	ldr	r2, [pc, #484]	; (8005190 <HAL_DMA_Abort_IT+0x294>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a77      	ldr	r2, [pc, #476]	; (8005194 <HAL_DMA_Abort_IT+0x298>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_DMA_Abort_IT+0xc8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a76      	ldr	r2, [pc, #472]	; (8005198 <HAL_DMA_Abort_IT+0x29c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_DMA_Abort_IT+0xcc>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_DMA_Abort_IT+0xce>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d065      	beq.n	800509a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a60      	ldr	r2, [pc, #384]	; (800515c <HAL_DMA_Abort_IT+0x260>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d04a      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5e      	ldr	r2, [pc, #376]	; (8005160 <HAL_DMA_Abort_IT+0x264>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d045      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a5d      	ldr	r2, [pc, #372]	; (8005164 <HAL_DMA_Abort_IT+0x268>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d040      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a5b      	ldr	r2, [pc, #364]	; (8005168 <HAL_DMA_Abort_IT+0x26c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d03b      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a5a      	ldr	r2, [pc, #360]	; (800516c <HAL_DMA_Abort_IT+0x270>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d036      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_DMA_Abort_IT+0x274>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d031      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a57      	ldr	r2, [pc, #348]	; (8005174 <HAL_DMA_Abort_IT+0x278>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d02c      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a55      	ldr	r2, [pc, #340]	; (8005178 <HAL_DMA_Abort_IT+0x27c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d027      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a54      	ldr	r2, [pc, #336]	; (800517c <HAL_DMA_Abort_IT+0x280>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d022      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a52      	ldr	r2, [pc, #328]	; (8005180 <HAL_DMA_Abort_IT+0x284>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01d      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a51      	ldr	r2, [pc, #324]	; (8005184 <HAL_DMA_Abort_IT+0x288>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a4f      	ldr	r2, [pc, #316]	; (8005188 <HAL_DMA_Abort_IT+0x28c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4e      	ldr	r2, [pc, #312]	; (800518c <HAL_DMA_Abort_IT+0x290>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a4c      	ldr	r2, [pc, #304]	; (8005190 <HAL_DMA_Abort_IT+0x294>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a4b      	ldr	r2, [pc, #300]	; (8005194 <HAL_DMA_Abort_IT+0x298>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_DMA_Abort_IT+0x17a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a49      	ldr	r2, [pc, #292]	; (8005198 <HAL_DMA_Abort_IT+0x29c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d108      	bne.n	8005088 <HAL_DMA_Abort_IT+0x18c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e147      	b.n	8005318 <HAL_DMA_Abort_IT+0x41c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e13e      	b.n	8005318 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 020e 	bic.w	r2, r2, #14
 80050a8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a2b      	ldr	r2, [pc, #172]	; (800515c <HAL_DMA_Abort_IT+0x260>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a29      	ldr	r2, [pc, #164]	; (8005160 <HAL_DMA_Abort_IT+0x264>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a28      	ldr	r2, [pc, #160]	; (8005164 <HAL_DMA_Abort_IT+0x268>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_DMA_Abort_IT+0x26c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a25      	ldr	r2, [pc, #148]	; (800516c <HAL_DMA_Abort_IT+0x270>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <HAL_DMA_Abort_IT+0x274>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a22      	ldr	r2, [pc, #136]	; (8005174 <HAL_DMA_Abort_IT+0x278>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <HAL_DMA_Abort_IT+0x27c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_DMA_Abort_IT+0x280>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_DMA_Abort_IT+0x284>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_DMA_Abort_IT+0x288>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <HAL_DMA_Abort_IT+0x28c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_DMA_Abort_IT+0x290>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_DMA_Abort_IT+0x294>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a16      	ldr	r2, [pc, #88]	; (8005194 <HAL_DMA_Abort_IT+0x298>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Abort_IT+0x24e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a14      	ldr	r2, [pc, #80]	; (8005198 <HAL_DMA_Abort_IT+0x29c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d128      	bne.n	800519c <HAL_DMA_Abort_IT+0x2a0>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e027      	b.n	80051ac <HAL_DMA_Abort_IT+0x2b0>
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a5c      	ldr	r2, [pc, #368]	; (8005324 <HAL_DMA_Abort_IT+0x428>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d072      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a5b      	ldr	r2, [pc, #364]	; (8005328 <HAL_DMA_Abort_IT+0x42c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d06d      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a59      	ldr	r2, [pc, #356]	; (800532c <HAL_DMA_Abort_IT+0x430>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d068      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a58      	ldr	r2, [pc, #352]	; (8005330 <HAL_DMA_Abort_IT+0x434>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d063      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a56      	ldr	r2, [pc, #344]	; (8005334 <HAL_DMA_Abort_IT+0x438>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d05e      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a55      	ldr	r2, [pc, #340]	; (8005338 <HAL_DMA_Abort_IT+0x43c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d059      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a53      	ldr	r2, [pc, #332]	; (800533c <HAL_DMA_Abort_IT+0x440>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d054      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_DMA_Abort_IT+0x444>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d04f      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a50      	ldr	r2, [pc, #320]	; (8005344 <HAL_DMA_Abort_IT+0x448>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d04a      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4f      	ldr	r2, [pc, #316]	; (8005348 <HAL_DMA_Abort_IT+0x44c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d045      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a4d      	ldr	r2, [pc, #308]	; (800534c <HAL_DMA_Abort_IT+0x450>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d040      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4c      	ldr	r2, [pc, #304]	; (8005350 <HAL_DMA_Abort_IT+0x454>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d03b      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a4a      	ldr	r2, [pc, #296]	; (8005354 <HAL_DMA_Abort_IT+0x458>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d036      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a49      	ldr	r2, [pc, #292]	; (8005358 <HAL_DMA_Abort_IT+0x45c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d031      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a47      	ldr	r2, [pc, #284]	; (800535c <HAL_DMA_Abort_IT+0x460>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d02c      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a46      	ldr	r2, [pc, #280]	; (8005360 <HAL_DMA_Abort_IT+0x464>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d027      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a44      	ldr	r2, [pc, #272]	; (8005364 <HAL_DMA_Abort_IT+0x468>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d022      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a43      	ldr	r2, [pc, #268]	; (8005368 <HAL_DMA_Abort_IT+0x46c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d01d      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a41      	ldr	r2, [pc, #260]	; (800536c <HAL_DMA_Abort_IT+0x470>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a40      	ldr	r2, [pc, #256]	; (8005370 <HAL_DMA_Abort_IT+0x474>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3e      	ldr	r2, [pc, #248]	; (8005374 <HAL_DMA_Abort_IT+0x478>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3d      	ldr	r2, [pc, #244]	; (8005378 <HAL_DMA_Abort_IT+0x47c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a3b      	ldr	r2, [pc, #236]	; (800537c <HAL_DMA_Abort_IT+0x480>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_DMA_Abort_IT+0x3a0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a3a      	ldr	r2, [pc, #232]	; (8005380 <HAL_DMA_Abort_IT+0x484>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <HAL_DMA_Abort_IT+0x3a4>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_DMA_Abort_IT+0x3a6>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d028      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40020010 	.word	0x40020010
 8005328:	40020028 	.word	0x40020028
 800532c:	40020040 	.word	0x40020040
 8005330:	40020058 	.word	0x40020058
 8005334:	40020070 	.word	0x40020070
 8005338:	40020088 	.word	0x40020088
 800533c:	400200a0 	.word	0x400200a0
 8005340:	400200b8 	.word	0x400200b8
 8005344:	40020410 	.word	0x40020410
 8005348:	40020428 	.word	0x40020428
 800534c:	40020440 	.word	0x40020440
 8005350:	40020458 	.word	0x40020458
 8005354:	40020470 	.word	0x40020470
 8005358:	40020488 	.word	0x40020488
 800535c:	400204a0 	.word	0x400204a0
 8005360:	400204b8 	.word	0x400204b8
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	58025430 	.word	0x58025430
 8005370:	58025444 	.word	0x58025444
 8005374:	58025458 	.word	0x58025458
 8005378:	5802546c 	.word	0x5802546c
 800537c:	58025480 	.word	0x58025480
 8005380:	58025494 	.word	0x58025494

08005384 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005390:	4b67      	ldr	r3, [pc, #412]	; (8005530 <HAL_DMA_IRQHandler+0x1ac>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a67      	ldr	r2, [pc, #412]	; (8005534 <HAL_DMA_IRQHandler+0x1b0>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5f      	ldr	r2, [pc, #380]	; (8005538 <HAL_DMA_IRQHandler+0x1b4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d04a      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a5d      	ldr	r2, [pc, #372]	; (800553c <HAL_DMA_IRQHandler+0x1b8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d045      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a5c      	ldr	r2, [pc, #368]	; (8005540 <HAL_DMA_IRQHandler+0x1bc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d040      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a5a      	ldr	r2, [pc, #360]	; (8005544 <HAL_DMA_IRQHandler+0x1c0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d03b      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a59      	ldr	r2, [pc, #356]	; (8005548 <HAL_DMA_IRQHandler+0x1c4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d036      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a57      	ldr	r2, [pc, #348]	; (800554c <HAL_DMA_IRQHandler+0x1c8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a56      	ldr	r2, [pc, #344]	; (8005550 <HAL_DMA_IRQHandler+0x1cc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d02c      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a54      	ldr	r2, [pc, #336]	; (8005554 <HAL_DMA_IRQHandler+0x1d0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d027      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a53      	ldr	r2, [pc, #332]	; (8005558 <HAL_DMA_IRQHandler+0x1d4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a51      	ldr	r2, [pc, #324]	; (800555c <HAL_DMA_IRQHandler+0x1d8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a50      	ldr	r2, [pc, #320]	; (8005560 <HAL_DMA_IRQHandler+0x1dc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a4e      	ldr	r2, [pc, #312]	; (8005564 <HAL_DMA_IRQHandler+0x1e0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a4d      	ldr	r2, [pc, #308]	; (8005568 <HAL_DMA_IRQHandler+0x1e4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a4b      	ldr	r2, [pc, #300]	; (800556c <HAL_DMA_IRQHandler+0x1e8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <HAL_DMA_IRQHandler+0x1ec>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a48      	ldr	r2, [pc, #288]	; (8005574 <HAL_DMA_IRQHandler+0x1f0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d101      	bne.n	800545a <HAL_DMA_IRQHandler+0xd6>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_DMA_IRQHandler+0xd8>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 842b 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2208      	movs	r2, #8
 800546c:	409a      	lsls	r2, r3
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a2 	beq.w	80055bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <HAL_DMA_IRQHandler+0x1b4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04a      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2d      	ldr	r2, [pc, #180]	; (800553c <HAL_DMA_IRQHandler+0x1b8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d045      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_DMA_IRQHandler+0x1bc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d040      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <HAL_DMA_IRQHandler+0x1c0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d03b      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <HAL_DMA_IRQHandler+0x1c4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d036      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_DMA_IRQHandler+0x1c8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d031      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <HAL_DMA_IRQHandler+0x1cc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d02c      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a24      	ldr	r2, [pc, #144]	; (8005554 <HAL_DMA_IRQHandler+0x1d0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_DMA_IRQHandler+0x1d4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_DMA_IRQHandler+0x1d8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_DMA_IRQHandler+0x1dc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_DMA_IRQHandler+0x1e0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_DMA_IRQHandler+0x1e4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_DMA_IRQHandler+0x1e8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_DMA_IRQHandler+0x1ec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_DMA_IRQHandler+0x1f0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d12f      	bne.n	8005578 <HAL_DMA_IRQHandler+0x1f4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf14      	ite	ne
 8005526:	2301      	movne	r3, #1
 8005528:	2300      	moveq	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e02e      	b.n	800558c <HAL_DMA_IRQHandler+0x208>
 800552e:	bf00      	nop
 8005530:	24000000 	.word	0x24000000
 8005534:	1b4e81b5 	.word	0x1b4e81b5
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2208      	movs	r2, #8
 80055aa:	409a      	lsls	r2, r3
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d06e      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_DMA_IRQHandler+0x3f8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a67      	ldr	r2, [pc, #412]	; (8005780 <HAL_DMA_IRQHandler+0x3fc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a66      	ldr	r2, [pc, #408]	; (8005784 <HAL_DMA_IRQHandler+0x400>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a64      	ldr	r2, [pc, #400]	; (8005788 <HAL_DMA_IRQHandler+0x404>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a63      	ldr	r2, [pc, #396]	; (800578c <HAL_DMA_IRQHandler+0x408>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a61      	ldr	r2, [pc, #388]	; (8005790 <HAL_DMA_IRQHandler+0x40c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a60      	ldr	r2, [pc, #384]	; (8005794 <HAL_DMA_IRQHandler+0x410>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5e      	ldr	r2, [pc, #376]	; (8005798 <HAL_DMA_IRQHandler+0x414>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5d      	ldr	r2, [pc, #372]	; (800579c <HAL_DMA_IRQHandler+0x418>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <HAL_DMA_IRQHandler+0x41c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a5a      	ldr	r2, [pc, #360]	; (80057a4 <HAL_DMA_IRQHandler+0x420>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <HAL_DMA_IRQHandler+0x424>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a57      	ldr	r2, [pc, #348]	; (80057ac <HAL_DMA_IRQHandler+0x428>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a55      	ldr	r2, [pc, #340]	; (80057b0 <HAL_DMA_IRQHandler+0x42c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_DMA_IRQHandler+0x430>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a52      	ldr	r2, [pc, #328]	; (80057b8 <HAL_DMA_IRQHandler+0x434>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10a      	bne.n	8005688 <HAL_DMA_IRQHandler+0x304>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e003      	b.n	8005690 <HAL_DMA_IRQHandler+0x30c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2201      	movs	r2, #1
 800569e:	409a      	lsls	r2, r3
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	f043 0202 	orr.w	r2, r3, #2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2204      	movs	r2, #4
 80056ba:	409a      	lsls	r2, r3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 808f 	beq.w	80057e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2c      	ldr	r2, [pc, #176]	; (800577c <HAL_DMA_IRQHandler+0x3f8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <HAL_DMA_IRQHandler+0x3fc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a29      	ldr	r2, [pc, #164]	; (8005784 <HAL_DMA_IRQHandler+0x400>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_DMA_IRQHandler+0x404>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a26      	ldr	r2, [pc, #152]	; (800578c <HAL_DMA_IRQHandler+0x408>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a24      	ldr	r2, [pc, #144]	; (8005790 <HAL_DMA_IRQHandler+0x40c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a23      	ldr	r2, [pc, #140]	; (8005794 <HAL_DMA_IRQHandler+0x410>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_DMA_IRQHandler+0x414>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a20      	ldr	r2, [pc, #128]	; (800579c <HAL_DMA_IRQHandler+0x418>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <HAL_DMA_IRQHandler+0x41c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_DMA_IRQHandler+0x420>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <HAL_DMA_IRQHandler+0x424>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_DMA_IRQHandler+0x428>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_DMA_IRQHandler+0x42c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_DMA_IRQHandler+0x430>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_DMA_IRQHandler+0x434>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d12a      	bne.n	80057bc <HAL_DMA_IRQHandler+0x438>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e023      	b.n	80057c4 <HAL_DMA_IRQHandler+0x440>
 800577c:	40020010 	.word	0x40020010
 8005780:	40020028 	.word	0x40020028
 8005784:	40020040 	.word	0x40020040
 8005788:	40020058 	.word	0x40020058
 800578c:	40020070 	.word	0x40020070
 8005790:	40020088 	.word	0x40020088
 8005794:	400200a0 	.word	0x400200a0
 8005798:	400200b8 	.word	0x400200b8
 800579c:	40020410 	.word	0x40020410
 80057a0:	40020428 	.word	0x40020428
 80057a4:	40020440 	.word	0x40020440
 80057a8:	40020458 	.word	0x40020458
 80057ac:	40020470 	.word	0x40020470
 80057b0:	40020488 	.word	0x40020488
 80057b4:	400204a0 	.word	0x400204a0
 80057b8:	400204b8 	.word	0x400204b8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00d      	beq.n	80057e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2204      	movs	r2, #4
 80057d2:	409a      	lsls	r2, r3
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2210      	movs	r2, #16
 80057ee:	409a      	lsls	r2, r3
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80a6 	beq.w	8005946 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a85      	ldr	r2, [pc, #532]	; (8005a14 <HAL_DMA_IRQHandler+0x690>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d04a      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a83      	ldr	r2, [pc, #524]	; (8005a18 <HAL_DMA_IRQHandler+0x694>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d045      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a82      	ldr	r2, [pc, #520]	; (8005a1c <HAL_DMA_IRQHandler+0x698>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d040      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_DMA_IRQHandler+0x69c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d03b      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a7f      	ldr	r2, [pc, #508]	; (8005a24 <HAL_DMA_IRQHandler+0x6a0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d036      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7d      	ldr	r2, [pc, #500]	; (8005a28 <HAL_DMA_IRQHandler+0x6a4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d031      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a7c      	ldr	r2, [pc, #496]	; (8005a2c <HAL_DMA_IRQHandler+0x6a8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d02c      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a7a      	ldr	r2, [pc, #488]	; (8005a30 <HAL_DMA_IRQHandler+0x6ac>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d027      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a79      	ldr	r2, [pc, #484]	; (8005a34 <HAL_DMA_IRQHandler+0x6b0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a77      	ldr	r2, [pc, #476]	; (8005a38 <HAL_DMA_IRQHandler+0x6b4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01d      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a76      	ldr	r2, [pc, #472]	; (8005a3c <HAL_DMA_IRQHandler+0x6b8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a74      	ldr	r2, [pc, #464]	; (8005a40 <HAL_DMA_IRQHandler+0x6bc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a73      	ldr	r2, [pc, #460]	; (8005a44 <HAL_DMA_IRQHandler+0x6c0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a71      	ldr	r2, [pc, #452]	; (8005a48 <HAL_DMA_IRQHandler+0x6c4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a70      	ldr	r2, [pc, #448]	; (8005a4c <HAL_DMA_IRQHandler+0x6c8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6e      	ldr	r2, [pc, #440]	; (8005a50 <HAL_DMA_IRQHandler+0x6cc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10a      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x52c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e009      	b.n	80058c4 <HAL_DMA_IRQHandler+0x540>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d03e      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2210      	movs	r2, #16
 80058d2:	409a      	lsls	r2, r3
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d024      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	e01f      	b.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
 8005916:	e016      	b.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0208 	bic.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2220      	movs	r2, #32
 8005950:	409a      	lsls	r2, r3
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8110 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_DMA_IRQHandler+0x690>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_DMA_IRQHandler+0x694>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d045      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <HAL_DMA_IRQHandler+0x698>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d040      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_DMA_IRQHandler+0x69c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03b      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <HAL_DMA_IRQHandler+0x6a0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d036      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <HAL_DMA_IRQHandler+0x6a4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d031      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <HAL_DMA_IRQHandler+0x6a8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_DMA_IRQHandler+0x6ac>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d027      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_DMA_IRQHandler+0x6b0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_DMA_IRQHandler+0x6b4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_DMA_IRQHandler+0x6b8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_DMA_IRQHandler+0x6bc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_DMA_IRQHandler+0x6c0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_DMA_IRQHandler+0x6c4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_DMA_IRQHandler+0x6c8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_DMA_IRQHandler+0x6cc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d12b      	bne.n	8005a54 <HAL_DMA_IRQHandler+0x6d0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e02a      	b.n	8005a68 <HAL_DMA_IRQHandler+0x6e4>
 8005a12:	bf00      	nop
 8005a14:	40020010 	.word	0x40020010
 8005a18:	40020028 	.word	0x40020028
 8005a1c:	40020040 	.word	0x40020040
 8005a20:	40020058 	.word	0x40020058
 8005a24:	40020070 	.word	0x40020070
 8005a28:	40020088 	.word	0x40020088
 8005a2c:	400200a0 	.word	0x400200a0
 8005a30:	400200b8 	.word	0x400200b8
 8005a34:	40020410 	.word	0x40020410
 8005a38:	40020428 	.word	0x40020428
 8005a3c:	40020440 	.word	0x40020440
 8005a40:	40020458 	.word	0x40020458
 8005a44:	40020470 	.word	0x40020470
 8005a48:	40020488 	.word	0x40020488
 8005a4c:	400204a0 	.word	0x400204a0
 8005a50:	400204b8 	.word	0x400204b8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8087 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2220      	movs	r2, #32
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d139      	bne.n	8005afe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0216 	bic.w	r2, r2, #22
 8005a98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_DMA_IRQHandler+0x736>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0208 	bic.w	r2, r2, #8
 8005ac8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	223f      	movs	r2, #63	; 0x3f
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 834a 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
          }
          return;
 8005afc:	e344      	b.n	8006188 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d018      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d108      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
 8005b2a:	e027      	b.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
 8005b3c:	e01e      	b.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0210 	bic.w	r2, r2, #16
 8005b5a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8306 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8088 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7a      	ldr	r2, [pc, #488]	; (8005d8c <HAL_DMA_IRQHandler+0xa08>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d04a      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a79      	ldr	r2, [pc, #484]	; (8005d90 <HAL_DMA_IRQHandler+0xa0c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d045      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a77      	ldr	r2, [pc, #476]	; (8005d94 <HAL_DMA_IRQHandler+0xa10>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d040      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a76      	ldr	r2, [pc, #472]	; (8005d98 <HAL_DMA_IRQHandler+0xa14>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d03b      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a74      	ldr	r2, [pc, #464]	; (8005d9c <HAL_DMA_IRQHandler+0xa18>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d036      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a73      	ldr	r2, [pc, #460]	; (8005da0 <HAL_DMA_IRQHandler+0xa1c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d031      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a71      	ldr	r2, [pc, #452]	; (8005da4 <HAL_DMA_IRQHandler+0xa20>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02c      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a70      	ldr	r2, [pc, #448]	; (8005da8 <HAL_DMA_IRQHandler+0xa24>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d027      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <HAL_DMA_IRQHandler+0xa28>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d022      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6d      	ldr	r2, [pc, #436]	; (8005db0 <HAL_DMA_IRQHandler+0xa2c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d01d      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6b      	ldr	r2, [pc, #428]	; (8005db4 <HAL_DMA_IRQHandler+0xa30>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d018      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a6a      	ldr	r2, [pc, #424]	; (8005db8 <HAL_DMA_IRQHandler+0xa34>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a68      	ldr	r2, [pc, #416]	; (8005dbc <HAL_DMA_IRQHandler+0xa38>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a67      	ldr	r2, [pc, #412]	; (8005dc0 <HAL_DMA_IRQHandler+0xa3c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_DMA_IRQHandler+0xa40>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a64      	ldr	r2, [pc, #400]	; (8005dc8 <HAL_DMA_IRQHandler+0xa44>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x8ca>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e007      	b.n	8005c5e <HAL_DMA_IRQHandler+0x8da>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d307      	bcc.n	8005c7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f2      	bne.n	8005c5e <HAL_DMA_IRQHandler+0x8da>
 8005c78:	e000      	b.n	8005c7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c7a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2203      	movs	r2, #3
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c9a:	e003      	b.n	8005ca4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8272 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	e26c      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a43      	ldr	r2, [pc, #268]	; (8005dcc <HAL_DMA_IRQHandler+0xa48>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d022      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_DMA_IRQHandler+0xa4c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01d      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a40      	ldr	r2, [pc, #256]	; (8005dd4 <HAL_DMA_IRQHandler+0xa50>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d018      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a3f      	ldr	r2, [pc, #252]	; (8005dd8 <HAL_DMA_IRQHandler+0xa54>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3d      	ldr	r2, [pc, #244]	; (8005ddc <HAL_DMA_IRQHandler+0xa58>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <HAL_DMA_IRQHandler+0xa5c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3a      	ldr	r2, [pc, #232]	; (8005de4 <HAL_DMA_IRQHandler+0xa60>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a39      	ldr	r2, [pc, #228]	; (8005de8 <HAL_DMA_IRQHandler+0xa64>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x988>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_DMA_IRQHandler+0x98a>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 823f 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2204      	movs	r2, #4
 8005d26:	409a      	lsls	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80cd 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xb48>
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80c7 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2204      	movs	r2, #4
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d049      	beq.n	8005dec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8210 	beq.w	800618c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d74:	e20a      	b.n	800618c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8206 	beq.w	800618c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d88:	e200      	b.n	800618c <HAL_DMA_IRQHandler+0xe08>
 8005d8a:	bf00      	nop
 8005d8c:	40020010 	.word	0x40020010
 8005d90:	40020028 	.word	0x40020028
 8005d94:	40020040 	.word	0x40020040
 8005d98:	40020058 	.word	0x40020058
 8005d9c:	40020070 	.word	0x40020070
 8005da0:	40020088 	.word	0x40020088
 8005da4:	400200a0 	.word	0x400200a0
 8005da8:	400200b8 	.word	0x400200b8
 8005dac:	40020410 	.word	0x40020410
 8005db0:	40020428 	.word	0x40020428
 8005db4:	40020440 	.word	0x40020440
 8005db8:	40020458 	.word	0x40020458
 8005dbc:	40020470 	.word	0x40020470
 8005dc0:	40020488 	.word	0x40020488
 8005dc4:	400204a0 	.word	0x400204a0
 8005dc8:	400204b8 	.word	0x400204b8
 8005dcc:	58025408 	.word	0x58025408
 8005dd0:	5802541c 	.word	0x5802541c
 8005dd4:	58025430 	.word	0x58025430
 8005dd8:	58025444 	.word	0x58025444
 8005ddc:	58025458 	.word	0x58025458
 8005de0:	5802546c 	.word	0x5802546c
 8005de4:	58025480 	.word	0x58025480
 8005de8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d160      	bne.n	8005eb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a8c      	ldr	r2, [pc, #560]	; (800602c <HAL_DMA_IRQHandler+0xca8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a8a      	ldr	r2, [pc, #552]	; (8006030 <HAL_DMA_IRQHandler+0xcac>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a89      	ldr	r2, [pc, #548]	; (8006034 <HAL_DMA_IRQHandler+0xcb0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a87      	ldr	r2, [pc, #540]	; (8006038 <HAL_DMA_IRQHandler+0xcb4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a86      	ldr	r2, [pc, #536]	; (800603c <HAL_DMA_IRQHandler+0xcb8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a84      	ldr	r2, [pc, #528]	; (8006040 <HAL_DMA_IRQHandler+0xcbc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a83      	ldr	r2, [pc, #524]	; (8006044 <HAL_DMA_IRQHandler+0xcc0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a81      	ldr	r2, [pc, #516]	; (8006048 <HAL_DMA_IRQHandler+0xcc4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_DMA_IRQHandler+0xcc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a7e      	ldr	r2, [pc, #504]	; (8006050 <HAL_DMA_IRQHandler+0xccc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a7d      	ldr	r2, [pc, #500]	; (8006054 <HAL_DMA_IRQHandler+0xcd0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a7b      	ldr	r2, [pc, #492]	; (8006058 <HAL_DMA_IRQHandler+0xcd4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7a      	ldr	r2, [pc, #488]	; (800605c <HAL_DMA_IRQHandler+0xcd8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a78      	ldr	r2, [pc, #480]	; (8006060 <HAL_DMA_IRQHandler+0xcdc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a77      	ldr	r2, [pc, #476]	; (8006064 <HAL_DMA_IRQHandler+0xce0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a75      	ldr	r2, [pc, #468]	; (8006068 <HAL_DMA_IRQHandler+0xce4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0xb24>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0208 	bic.w	r2, r2, #8
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e007      	b.n	8005eb8 <HAL_DMA_IRQHandler+0xb34>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8165 	beq.w	800618c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eca:	e15f      	b.n	800618c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80c5 	beq.w	800606c <HAL_DMA_IRQHandler+0xce8>
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80bf 	beq.w	800606c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	409a      	lsls	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d018      	beq.n	8005f3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 813a 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f24:	e134      	b.n	8006190 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8130 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f38:	e12a      	b.n	8006190 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d168      	bne.n	8006016 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a38      	ldr	r2, [pc, #224]	; (800602c <HAL_DMA_IRQHandler+0xca8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04a      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a37      	ldr	r2, [pc, #220]	; (8006030 <HAL_DMA_IRQHandler+0xcac>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d045      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a35      	ldr	r2, [pc, #212]	; (8006034 <HAL_DMA_IRQHandler+0xcb0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d040      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <HAL_DMA_IRQHandler+0xcb4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d03b      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a32      	ldr	r2, [pc, #200]	; (800603c <HAL_DMA_IRQHandler+0xcb8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d036      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a31      	ldr	r2, [pc, #196]	; (8006040 <HAL_DMA_IRQHandler+0xcbc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d031      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <HAL_DMA_IRQHandler+0xcc0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02c      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_DMA_IRQHandler+0xcc4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d027      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2c      	ldr	r2, [pc, #176]	; (800604c <HAL_DMA_IRQHandler+0xcc8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2b      	ldr	r2, [pc, #172]	; (8006050 <HAL_DMA_IRQHandler+0xccc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a29      	ldr	r2, [pc, #164]	; (8006054 <HAL_DMA_IRQHandler+0xcd0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a28      	ldr	r2, [pc, #160]	; (8006058 <HAL_DMA_IRQHandler+0xcd4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <HAL_DMA_IRQHandler+0xcd8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_DMA_IRQHandler+0xcdc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a23      	ldr	r2, [pc, #140]	; (8006064 <HAL_DMA_IRQHandler+0xce0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_DMA_IRQHandler+0xce4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <HAL_DMA_IRQHandler+0xc72>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0214 	bic.w	r2, r2, #20
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e007      	b.n	8006006 <HAL_DMA_IRQHandler+0xc82>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 020a 	bic.w	r2, r2, #10
 8006004:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80b8 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006028:	e0b2      	b.n	8006190 <HAL_DMA_IRQHandler+0xe0c>
 800602a:	bf00      	nop
 800602c:	40020010 	.word	0x40020010
 8006030:	40020028 	.word	0x40020028
 8006034:	40020040 	.word	0x40020040
 8006038:	40020058 	.word	0x40020058
 800603c:	40020070 	.word	0x40020070
 8006040:	40020088 	.word	0x40020088
 8006044:	400200a0 	.word	0x400200a0
 8006048:	400200b8 	.word	0x400200b8
 800604c:	40020410 	.word	0x40020410
 8006050:	40020428 	.word	0x40020428
 8006054:	40020440 	.word	0x40020440
 8006058:	40020458 	.word	0x40020458
 800605c:	40020470 	.word	0x40020470
 8006060:	40020488 	.word	0x40020488
 8006064:	400204a0 	.word	0x400204a0
 8006068:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2208      	movs	r2, #8
 8006076:	409a      	lsls	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8088 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8082 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a41      	ldr	r2, [pc, #260]	; (8006198 <HAL_DMA_IRQHandler+0xe14>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3f      	ldr	r2, [pc, #252]	; (800619c <HAL_DMA_IRQHandler+0xe18>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3e      	ldr	r2, [pc, #248]	; (80061a0 <HAL_DMA_IRQHandler+0xe1c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <HAL_DMA_IRQHandler+0xe20>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3b      	ldr	r2, [pc, #236]	; (80061a8 <HAL_DMA_IRQHandler+0xe24>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a39      	ldr	r2, [pc, #228]	; (80061ac <HAL_DMA_IRQHandler+0xe28>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a38      	ldr	r2, [pc, #224]	; (80061b0 <HAL_DMA_IRQHandler+0xe2c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a36      	ldr	r2, [pc, #216]	; (80061b4 <HAL_DMA_IRQHandler+0xe30>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <HAL_DMA_IRQHandler+0xe34>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a33      	ldr	r2, [pc, #204]	; (80061bc <HAL_DMA_IRQHandler+0xe38>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <HAL_DMA_IRQHandler+0xe3c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <HAL_DMA_IRQHandler+0xe40>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <HAL_DMA_IRQHandler+0xe44>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <HAL_DMA_IRQHandler+0xe48>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2c      	ldr	r2, [pc, #176]	; (80061d0 <HAL_DMA_IRQHandler+0xe4c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <HAL_DMA_IRQHandler+0xe50>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <HAL_DMA_IRQHandler+0xdbc>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 021c 	bic.w	r2, r2, #28
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e007      	b.n	8006150 <HAL_DMA_IRQHandler+0xdcc>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 020e 	bic.w	r2, r2, #14
 800614e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
 8006186:	e004      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006188:	bf00      	nop
 800618a:	e002      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	bf00      	nop
 800618e:	e000      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006190:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006192:	3728      	adds	r7, #40	; 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40020010 	.word	0x40020010
 800619c:	40020028 	.word	0x40020028
 80061a0:	40020040 	.word	0x40020040
 80061a4:	40020058 	.word	0x40020058
 80061a8:	40020070 	.word	0x40020070
 80061ac:	40020088 	.word	0x40020088
 80061b0:	400200a0 	.word	0x400200a0
 80061b4:	400200b8 	.word	0x400200b8
 80061b8:	40020410 	.word	0x40020410
 80061bc:	40020428 	.word	0x40020428
 80061c0:	40020440 	.word	0x40020440
 80061c4:	40020458 	.word	0x40020458
 80061c8:	40020470 	.word	0x40020470
 80061cc:	40020488 	.word	0x40020488
 80061d0:	400204a0 	.word	0x400204a0
 80061d4:	400204b8 	.word	0x400204b8

080061d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a84      	ldr	r2, [pc, #528]	; (8006408 <DMA_SetConfig+0x230>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d072      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a82      	ldr	r2, [pc, #520]	; (800640c <DMA_SetConfig+0x234>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d06d      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a81      	ldr	r2, [pc, #516]	; (8006410 <DMA_SetConfig+0x238>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d068      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a7f      	ldr	r2, [pc, #508]	; (8006414 <DMA_SetConfig+0x23c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d063      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7e      	ldr	r2, [pc, #504]	; (8006418 <DMA_SetConfig+0x240>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d05e      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a7c      	ldr	r2, [pc, #496]	; (800641c <DMA_SetConfig+0x244>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d059      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a7b      	ldr	r2, [pc, #492]	; (8006420 <DMA_SetConfig+0x248>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d054      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a79      	ldr	r2, [pc, #484]	; (8006424 <DMA_SetConfig+0x24c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d04f      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a78      	ldr	r2, [pc, #480]	; (8006428 <DMA_SetConfig+0x250>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a76      	ldr	r2, [pc, #472]	; (800642c <DMA_SetConfig+0x254>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	; (8006430 <DMA_SetConfig+0x258>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a73      	ldr	r2, [pc, #460]	; (8006434 <DMA_SetConfig+0x25c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a72      	ldr	r2, [pc, #456]	; (8006438 <DMA_SetConfig+0x260>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a70      	ldr	r2, [pc, #448]	; (800643c <DMA_SetConfig+0x264>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <DMA_SetConfig+0x268>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a6d      	ldr	r2, [pc, #436]	; (8006444 <DMA_SetConfig+0x26c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6c      	ldr	r2, [pc, #432]	; (8006448 <DMA_SetConfig+0x270>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6a      	ldr	r2, [pc, #424]	; (800644c <DMA_SetConfig+0x274>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a69      	ldr	r2, [pc, #420]	; (8006450 <DMA_SetConfig+0x278>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a67      	ldr	r2, [pc, #412]	; (8006454 <DMA_SetConfig+0x27c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a66      	ldr	r2, [pc, #408]	; (8006458 <DMA_SetConfig+0x280>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a64      	ldr	r2, [pc, #400]	; (800645c <DMA_SetConfig+0x284>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a63      	ldr	r2, [pc, #396]	; (8006460 <DMA_SetConfig+0x288>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a61      	ldr	r2, [pc, #388]	; (8006464 <DMA_SetConfig+0x28c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <DMA_SetConfig+0x10e>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <DMA_SetConfig+0x110>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006306:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3e      	ldr	r2, [pc, #248]	; (8006408 <DMA_SetConfig+0x230>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d04a      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3d      	ldr	r2, [pc, #244]	; (800640c <DMA_SetConfig+0x234>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d045      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3b      	ldr	r2, [pc, #236]	; (8006410 <DMA_SetConfig+0x238>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d040      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <DMA_SetConfig+0x23c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d03b      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a38      	ldr	r2, [pc, #224]	; (8006418 <DMA_SetConfig+0x240>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d036      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a37      	ldr	r2, [pc, #220]	; (800641c <DMA_SetConfig+0x244>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d031      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a35      	ldr	r2, [pc, #212]	; (8006420 <DMA_SetConfig+0x248>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d02c      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a34      	ldr	r2, [pc, #208]	; (8006424 <DMA_SetConfig+0x24c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d027      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a32      	ldr	r2, [pc, #200]	; (8006428 <DMA_SetConfig+0x250>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a31      	ldr	r2, [pc, #196]	; (800642c <DMA_SetConfig+0x254>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d01d      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2f      	ldr	r2, [pc, #188]	; (8006430 <DMA_SetConfig+0x258>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <DMA_SetConfig+0x25c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <DMA_SetConfig+0x260>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2b      	ldr	r2, [pc, #172]	; (800643c <DMA_SetConfig+0x264>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <DMA_SetConfig+0x268>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a28      	ldr	r2, [pc, #160]	; (8006444 <DMA_SetConfig+0x26c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <DMA_SetConfig+0x1d4>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <DMA_SetConfig+0x1d6>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d05a      	beq.n	8006468 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	223f      	movs	r2, #63	; 0x3f
 80063bc:	409a      	lsls	r2, r3
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d108      	bne.n	80063f4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063f2:	e087      	b.n	8006504 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]
}
 8006404:	e07e      	b.n	8006504 <DMA_SetConfig+0x32c>
 8006406:	bf00      	nop
 8006408:	40020010 	.word	0x40020010
 800640c:	40020028 	.word	0x40020028
 8006410:	40020040 	.word	0x40020040
 8006414:	40020058 	.word	0x40020058
 8006418:	40020070 	.word	0x40020070
 800641c:	40020088 	.word	0x40020088
 8006420:	400200a0 	.word	0x400200a0
 8006424:	400200b8 	.word	0x400200b8
 8006428:	40020410 	.word	0x40020410
 800642c:	40020428 	.word	0x40020428
 8006430:	40020440 	.word	0x40020440
 8006434:	40020458 	.word	0x40020458
 8006438:	40020470 	.word	0x40020470
 800643c:	40020488 	.word	0x40020488
 8006440:	400204a0 	.word	0x400204a0
 8006444:	400204b8 	.word	0x400204b8
 8006448:	58025408 	.word	0x58025408
 800644c:	5802541c 	.word	0x5802541c
 8006450:	58025430 	.word	0x58025430
 8006454:	58025444 	.word	0x58025444
 8006458:	58025458 	.word	0x58025458
 800645c:	5802546c 	.word	0x5802546c
 8006460:	58025480 	.word	0x58025480
 8006464:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a28      	ldr	r2, [pc, #160]	; (8006510 <DMA_SetConfig+0x338>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <DMA_SetConfig+0x33c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a25      	ldr	r2, [pc, #148]	; (8006518 <DMA_SetConfig+0x340>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a24      	ldr	r2, [pc, #144]	; (800651c <DMA_SetConfig+0x344>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <DMA_SetConfig+0x348>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <DMA_SetConfig+0x34c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <DMA_SetConfig+0x350>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <DMA_SetConfig+0x354>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <DMA_SetConfig+0x2e4>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <DMA_SetConfig+0x2e6>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2201      	movs	r2, #1
 80064cc:	409a      	lsls	r2, r3
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d108      	bne.n	80064f4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	60da      	str	r2, [r3, #12]
}
 80064f2:	e007      	b.n	8006504 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
}
 8006504:	bf00      	nop
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	58025408 	.word	0x58025408
 8006514:	5802541c 	.word	0x5802541c
 8006518:	58025430 	.word	0x58025430
 800651c:	58025444 	.word	0x58025444
 8006520:	58025458 	.word	0x58025458
 8006524:	5802546c 	.word	0x5802546c
 8006528:	58025480 	.word	0x58025480
 800652c:	58025494 	.word	0x58025494

08006530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a42      	ldr	r2, [pc, #264]	; (8006648 <DMA_CalcBaseAndBitshift+0x118>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d04a      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a41      	ldr	r2, [pc, #260]	; (800664c <DMA_CalcBaseAndBitshift+0x11c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d045      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a3f      	ldr	r2, [pc, #252]	; (8006650 <DMA_CalcBaseAndBitshift+0x120>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d040      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3e      	ldr	r2, [pc, #248]	; (8006654 <DMA_CalcBaseAndBitshift+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d03b      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a3c      	ldr	r2, [pc, #240]	; (8006658 <DMA_CalcBaseAndBitshift+0x128>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d036      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3b      	ldr	r2, [pc, #236]	; (800665c <DMA_CalcBaseAndBitshift+0x12c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d031      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a39      	ldr	r2, [pc, #228]	; (8006660 <DMA_CalcBaseAndBitshift+0x130>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02c      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a38      	ldr	r2, [pc, #224]	; (8006664 <DMA_CalcBaseAndBitshift+0x134>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d027      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	; (8006668 <DMA_CalcBaseAndBitshift+0x138>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a35      	ldr	r2, [pc, #212]	; (800666c <DMA_CalcBaseAndBitshift+0x13c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a33      	ldr	r2, [pc, #204]	; (8006670 <DMA_CalcBaseAndBitshift+0x140>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	; (8006674 <DMA_CalcBaseAndBitshift+0x144>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a30      	ldr	r2, [pc, #192]	; (8006678 <DMA_CalcBaseAndBitshift+0x148>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2f      	ldr	r2, [pc, #188]	; (800667c <DMA_CalcBaseAndBitshift+0x14c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2d      	ldr	r2, [pc, #180]	; (8006680 <DMA_CalcBaseAndBitshift+0x150>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a2c      	ldr	r2, [pc, #176]	; (8006684 <DMA_CalcBaseAndBitshift+0x154>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <DMA_CalcBaseAndBitshift+0xac>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <DMA_CalcBaseAndBitshift+0xae>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d024      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3b10      	subs	r3, #16
 80065ea:	4a27      	ldr	r2, [pc, #156]	; (8006688 <DMA_CalcBaseAndBitshift+0x158>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	4a24      	ldr	r2, [pc, #144]	; (800668c <DMA_CalcBaseAndBitshift+0x15c>)
 80065fc:	5cd3      	ldrb	r3, [r2, r3]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d908      	bls.n	800661c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <DMA_CalcBaseAndBitshift+0x160>)
 8006612:	4013      	ands	r3, r2
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	; 0x58
 800661a:	e00d      	b.n	8006638 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <DMA_CalcBaseAndBitshift+0x160>)
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6593      	str	r3, [r2, #88]	; 0x58
 800662a:	e005      	b.n	8006638 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
 8006688:	aaaaaaab 	.word	0xaaaaaaab
 800668c:	08015cf0 	.word	0x08015cf0
 8006690:	fffffc00 	.word	0xfffffc00

08006694 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d120      	bne.n	80066ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d858      	bhi.n	8006762 <DMA_CheckFifoParam+0xce>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <DMA_CheckFifoParam+0x24>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066db 	.word	0x080066db
 80066c0:	080066c9 	.word	0x080066c9
 80066c4:	08006763 	.word	0x08006763
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d048      	beq.n	8006766 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066d8:	e045      	b.n	8006766 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066e2:	d142      	bne.n	800676a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066e8:	e03f      	b.n	800676a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f2:	d123      	bne.n	800673c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d838      	bhi.n	800676e <DMA_CheckFifoParam+0xda>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <DMA_CheckFifoParam+0x70>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006715 	.word	0x08006715
 8006708:	0800671b 	.word	0x0800671b
 800670c:	08006715 	.word	0x08006715
 8006710:	0800672d 	.word	0x0800672d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
        break;
 8006718:	e030      	b.n	800677c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d025      	beq.n	8006772 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800672a:	e022      	b.n	8006772 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006734:	d11f      	bne.n	8006776 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800673a:	e01c      	b.n	8006776 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	2b02      	cmp	r3, #2
 8006742:	d902      	bls.n	800674a <DMA_CheckFifoParam+0xb6>
 8006744:	2b03      	cmp	r3, #3
 8006746:	d003      	beq.n	8006750 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006748:	e018      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
        break;
 800674e:	e015      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
    break;
 8006760:	e00b      	b.n	800677a <DMA_CheckFifoParam+0xe6>
        break;
 8006762:	bf00      	nop
 8006764:	e00a      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 8006766:	bf00      	nop
 8006768:	e008      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 800676a:	bf00      	nop
 800676c:	e006      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 800676e:	bf00      	nop
 8006770:	e004      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 8006772:	bf00      	nop
 8006774:	e002      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <DMA_CheckFifoParam+0xe8>
    break;
 800677a:	bf00      	nop
    }
  }

  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a38      	ldr	r2, [pc, #224]	; (8006880 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a36      	ldr	r2, [pc, #216]	; (8006884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01d      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a35      	ldr	r2, [pc, #212]	; (8006888 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d018      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a33      	ldr	r2, [pc, #204]	; (800688c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a32      	ldr	r2, [pc, #200]	; (8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a30      	ldr	r2, [pc, #192]	; (8006894 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2d      	ldr	r2, [pc, #180]	; (800689c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d101      	bne.n	80067ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01a      	beq.n	800682a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	3b08      	subs	r3, #8
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4b26      	ldr	r3, [pc, #152]	; (80068a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a24      	ldr	r2, [pc, #144]	; (80068a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006818:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2201      	movs	r2, #1
 8006822:	409a      	lsls	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006828:	e024      	b.n	8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	3b10      	subs	r3, #16
 8006832:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	091b      	lsrs	r3, r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d806      	bhi.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d902      	bls.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3308      	adds	r3, #8
 8006850:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a16      	ldr	r2, [pc, #88]	; (80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006864:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2201      	movs	r2, #1
 800686e:	409a      	lsls	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	58025408 	.word	0x58025408
 8006884:	5802541c 	.word	0x5802541c
 8006888:	58025430 	.word	0x58025430
 800688c:	58025444 	.word	0x58025444
 8006890:	58025458 	.word	0x58025458
 8006894:	5802546c 	.word	0x5802546c
 8006898:	58025480 	.word	0x58025480
 800689c:	58025494 	.word	0x58025494
 80068a0:	cccccccd 	.word	0xcccccccd
 80068a4:	16009600 	.word	0x16009600
 80068a8:	58025880 	.word	0x58025880
 80068ac:	aaaaaaab 	.word	0xaaaaaaab
 80068b0:	400204b8 	.word	0x400204b8
 80068b4:	4002040f 	.word	0x4002040f
 80068b8:	10008200 	.word	0x10008200
 80068bc:	40020880 	.word	0x40020880

080068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04a      	beq.n	800696c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d847      	bhi.n	800696c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d022      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a24      	ldr	r2, [pc, #144]	; (800697c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a21      	ldr	r2, [pc, #132]	; (8006984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1e      	ldr	r2, [pc, #120]	; (800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d101      	bne.n	8006930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4b17      	ldr	r3, [pc, #92]	; (8006998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006948:	671a      	str	r2, [r3, #112]	; 0x70
 800694a:	e009      	b.n	8006960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a11      	ldr	r2, [pc, #68]	; (80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800695e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3b01      	subs	r3, #1
 8006964:	2201      	movs	r2, #1
 8006966:	409a      	lsls	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	58025408 	.word	0x58025408
 800697c:	5802541c 	.word	0x5802541c
 8006980:	58025430 	.word	0x58025430
 8006984:	58025444 	.word	0x58025444
 8006988:	58025458 	.word	0x58025458
 800698c:	5802546c 	.word	0x5802546c
 8006990:	58025480 	.word	0x58025480
 8006994:	58025494 	.word	0x58025494
 8006998:	1600963f 	.word	0x1600963f
 800699c:	58025940 	.word	0x58025940
 80069a0:	1000823f 	.word	0x1000823f
 80069a4:	40020940 	.word	0x40020940

080069a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069b6:	4b89      	ldr	r3, [pc, #548]	; (8006bdc <HAL_GPIO_Init+0x234>)
 80069b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069ba:	e194      	b.n	8006ce6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	2101      	movs	r1, #1
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	4013      	ands	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 8186 	beq.w	8006ce0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d00b      	beq.n	80069f4 <HAL_GPIO_Init+0x4c>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d007      	beq.n	80069f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069e8:	2b11      	cmp	r3, #17
 80069ea:	d003      	beq.n	80069f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b12      	cmp	r3, #18
 80069f2:	d130      	bne.n	8006a56 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	2203      	movs	r2, #3
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	f003 0201 	and.w	r2, r3, #1
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	2203      	movs	r2, #3
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d003      	beq.n	8006a96 <HAL_GPIO_Init+0xee>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b12      	cmp	r3, #18
 8006a94:	d123      	bne.n	8006ade <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	08da      	lsrs	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3208      	adds	r2, #8
 8006a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	220f      	movs	r2, #15
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	691a      	ldr	r2, [r3, #16]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	08da      	lsrs	r2, r3, #3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3208      	adds	r2, #8
 8006ad8:	69b9      	ldr	r1, [r7, #24]
 8006ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	2203      	movs	r2, #3
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f003 0203 	and.w	r2, r3, #3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80e0 	beq.w	8006ce0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b20:	4b2f      	ldr	r3, [pc, #188]	; (8006be0 <HAL_GPIO_Init+0x238>)
 8006b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b26:	4a2e      	ldr	r2, [pc, #184]	; (8006be0 <HAL_GPIO_Init+0x238>)
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b30:	4b2b      	ldr	r3, [pc, #172]	; (8006be0 <HAL_GPIO_Init+0x238>)
 8006b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b3e:	4a29      	ldr	r2, [pc, #164]	; (8006be4 <HAL_GPIO_Init+0x23c>)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	3302      	adds	r3, #2
 8006b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	220f      	movs	r2, #15
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <HAL_GPIO_Init+0x240>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d052      	beq.n	8006c10 <HAL_GPIO_Init+0x268>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_GPIO_Init+0x244>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d031      	beq.n	8006bd6 <HAL_GPIO_Init+0x22e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_GPIO_Init+0x248>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d02b      	beq.n	8006bd2 <HAL_GPIO_Init+0x22a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <HAL_GPIO_Init+0x24c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d025      	beq.n	8006bce <HAL_GPIO_Init+0x226>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <HAL_GPIO_Init+0x250>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01f      	beq.n	8006bca <HAL_GPIO_Init+0x222>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_GPIO_Init+0x254>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d019      	beq.n	8006bc6 <HAL_GPIO_Init+0x21e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_GPIO_Init+0x258>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_GPIO_Init+0x21a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <HAL_GPIO_Init+0x25c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00d      	beq.n	8006bbe <HAL_GPIO_Init+0x216>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_GPIO_Init+0x260>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <HAL_GPIO_Init+0x212>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <HAL_GPIO_Init+0x264>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_GPIO_Init+0x20e>
 8006bb2:	2309      	movs	r3, #9
 8006bb4:	e02d      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	e02b      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	e029      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bbe:	2307      	movs	r3, #7
 8006bc0:	e027      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bc2:	2306      	movs	r3, #6
 8006bc4:	e025      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bc6:	2305      	movs	r3, #5
 8006bc8:	e023      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bca:	2304      	movs	r3, #4
 8006bcc:	e021      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e01f      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e01d      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e01b      	b.n	8006c12 <HAL_GPIO_Init+0x26a>
 8006bda:	bf00      	nop
 8006bdc:	58000080 	.word	0x58000080
 8006be0:	58024400 	.word	0x58024400
 8006be4:	58000400 	.word	0x58000400
 8006be8:	58020000 	.word	0x58020000
 8006bec:	58020400 	.word	0x58020400
 8006bf0:	58020800 	.word	0x58020800
 8006bf4:	58020c00 	.word	0x58020c00
 8006bf8:	58021000 	.word	0x58021000
 8006bfc:	58021400 	.word	0x58021400
 8006c00:	58021800 	.word	0x58021800
 8006c04:	58021c00 	.word	0x58021c00
 8006c08:	58022000 	.word	0x58022000
 8006c0c:	58022400 	.word	0x58022400
 8006c10:	2300      	movs	r3, #0
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	f002 0203 	and.w	r2, r2, #3
 8006c18:	0092      	lsls	r2, r2, #2
 8006c1a:	4093      	lsls	r3, r2
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c22:	4938      	ldr	r1, [pc, #224]	; (8006d04 <HAL_GPIO_Init+0x35c>)
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	3302      	adds	r3, #2
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4013      	ands	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f ae63 	bne.w	80069bc <HAL_GPIO_Init+0x14>
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	3724      	adds	r7, #36	; 0x24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	58000400 	.word	0x58000400

08006d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	807b      	strh	r3, [r7, #2]
 8006d14:	4613      	mov	r3, r2
 8006d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d18:	787b      	ldrb	r3, [r7, #1]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d1e:	887a      	ldrh	r2, [r7, #2]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d24:	e003      	b.n	8006d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	041a      	lsls	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	619a      	str	r2, [r3, #24]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_PWREx_ConfigSupply+0x70>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d00a      	beq.n	8006d66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d50:	4b16      	ldr	r3, [pc, #88]	; (8006dac <HAL_PWREx_ConfigSupply+0x70>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d001      	beq.n	8006d62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e01f      	b.n	8006da2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e01d      	b.n	8006da2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <HAL_PWREx_ConfigSupply+0x70>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f023 0207 	bic.w	r2, r3, #7
 8006d6e:	490f      	ldr	r1, [pc, #60]	; (8006dac <HAL_PWREx_ConfigSupply+0x70>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d76:	f7fa fffd 	bl	8001d74 <HAL_GetTick>
 8006d7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d7c:	e009      	b.n	8006d92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d7e:	f7fa fff9 	bl	8001d74 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8c:	d901      	bls.n	8006d92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e007      	b.n	8006da2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <HAL_PWREx_ConfigSupply+0x70>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9e:	d1ee      	bne.n	8006d7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	58024800 	.word	0x58024800

08006db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e3ff      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8087 	beq.w	8006ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dd0:	4b99      	ldr	r3, [pc, #612]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dda:	4b97      	ldr	r3, [pc, #604]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d007      	beq.n	8006df6 <HAL_RCC_OscConfig+0x46>
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2b18      	cmp	r3, #24
 8006dea:	d110      	bne.n	8006e0e <HAL_RCC_OscConfig+0x5e>
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d10b      	bne.n	8006e0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df6:	4b90      	ldr	r3, [pc, #576]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d06c      	beq.n	8006edc <HAL_RCC_OscConfig+0x12c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d168      	bne.n	8006edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e3d9      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e16:	d106      	bne.n	8006e26 <HAL_RCC_OscConfig+0x76>
 8006e18:	4b87      	ldr	r3, [pc, #540]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a86      	ldr	r2, [pc, #536]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e02e      	b.n	8006e84 <HAL_RCC_OscConfig+0xd4>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x98>
 8006e2e:	4b82      	ldr	r3, [pc, #520]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a81      	ldr	r2, [pc, #516]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a7e      	ldr	r2, [pc, #504]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e01d      	b.n	8006e84 <HAL_RCC_OscConfig+0xd4>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e50:	d10c      	bne.n	8006e6c <HAL_RCC_OscConfig+0xbc>
 8006e52:	4b79      	ldr	r3, [pc, #484]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a78      	ldr	r2, [pc, #480]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	4b76      	ldr	r3, [pc, #472]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a75      	ldr	r2, [pc, #468]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e00b      	b.n	8006e84 <HAL_RCC_OscConfig+0xd4>
 8006e6c:	4b72      	ldr	r3, [pc, #456]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a71      	ldr	r2, [pc, #452]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	4b6f      	ldr	r3, [pc, #444]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d013      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fa ff72 	bl	8001d74 <HAL_GetTick>
 8006e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e94:	f7fa ff6e 	bl	8001d74 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b64      	cmp	r3, #100	; 0x64
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e38d      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ea6:	4b64      	ldr	r3, [pc, #400]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0xe4>
 8006eb2:	e014      	b.n	8006ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fa ff5e 	bl	8001d74 <HAL_GetTick>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ebc:	f7fa ff5a 	bl	8001d74 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b64      	cmp	r3, #100	; 0x64
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e379      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ece:	4b5a      	ldr	r3, [pc, #360]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f0      	bne.n	8006ebc <HAL_RCC_OscConfig+0x10c>
 8006eda:	e000      	b.n	8006ede <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80ae 	beq.w	8007048 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eec:	4b52      	ldr	r3, [pc, #328]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ef4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ef6:	4b50      	ldr	r3, [pc, #320]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <HAL_RCC_OscConfig+0x162>
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	2b18      	cmp	r3, #24
 8006f06:	d13a      	bne.n	8006f7e <HAL_RCC_OscConfig+0x1ce>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d135      	bne.n	8006f7e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f12:	4b49      	ldr	r3, [pc, #292]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_RCC_OscConfig+0x17a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e34b      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2a:	f7fa ff53 	bl	8001dd4 <HAL_GetREVID>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d817      	bhi.n	8006f68 <HAL_RCC_OscConfig+0x1b8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d108      	bne.n	8006f52 <HAL_RCC_OscConfig+0x1a2>
 8006f40:	4b3d      	ldr	r3, [pc, #244]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f48:	4a3b      	ldr	r2, [pc, #236]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f50:	e07a      	b.n	8007048 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f52:	4b39      	ldr	r3, [pc, #228]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	031b      	lsls	r3, r3, #12
 8006f60:	4935      	ldr	r1, [pc, #212]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f66:	e06f      	b.n	8007048 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f68:	4b33      	ldr	r3, [pc, #204]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	061b      	lsls	r3, r3, #24
 8006f76:	4930      	ldr	r1, [pc, #192]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f7c:	e064      	b.n	8007048 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d045      	beq.n	8007012 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f86:	4b2c      	ldr	r3, [pc, #176]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 0219 	bic.w	r2, r3, #25
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	4929      	ldr	r1, [pc, #164]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f98:	f7fa feec 	bl	8001d74 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fa0:	f7fa fee8 	bl	8001d74 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e307      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0f0      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fbe:	f7fa ff09 	bl	8001dd4 <HAL_GetREVID>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d817      	bhi.n	8006ffc <HAL_RCC_OscConfig+0x24c>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d108      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x236>
 8006fd4:	4b18      	ldr	r3, [pc, #96]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006fdc:	4a16      	ldr	r2, [pc, #88]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe2:	6053      	str	r3, [r2, #4]
 8006fe4:	e030      	b.n	8007048 <HAL_RCC_OscConfig+0x298>
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	031b      	lsls	r3, r3, #12
 8006ff4:	4910      	ldr	r1, [pc, #64]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	604b      	str	r3, [r1, #4]
 8006ffa:	e025      	b.n	8007048 <HAL_RCC_OscConfig+0x298>
 8006ffc:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	061b      	lsls	r3, r3, #24
 800700a:	490b      	ldr	r1, [pc, #44]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 800700c:	4313      	orrs	r3, r2
 800700e:	604b      	str	r3, [r1, #4]
 8007010:	e01a      	b.n	8007048 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a08      	ldr	r2, [pc, #32]	; (8007038 <HAL_RCC_OscConfig+0x288>)
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701e:	f7fa fea9 	bl	8001d74 <HAL_GetTick>
 8007022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007024:	e00a      	b.n	800703c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007026:	f7fa fea5 	bl	8001d74 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d903      	bls.n	800703c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e2c4      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
 8007038:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800703c:	4ba4      	ldr	r3, [pc, #656]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1ee      	bne.n	8007026 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80a9 	beq.w	80071a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007056:	4b9e      	ldr	r3, [pc, #632]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800705e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007060:	4b9b      	ldr	r3, [pc, #620]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d007      	beq.n	800707c <HAL_RCC_OscConfig+0x2cc>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b18      	cmp	r3, #24
 8007070:	d13a      	bne.n	80070e8 <HAL_RCC_OscConfig+0x338>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	2b01      	cmp	r3, #1
 800707a:	d135      	bne.n	80070e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800707c:	4b94      	ldr	r3, [pc, #592]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <HAL_RCC_OscConfig+0x2e4>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	2b80      	cmp	r3, #128	; 0x80
 800708e:	d001      	beq.n	8007094 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e296      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007094:	f7fa fe9e 	bl	8001dd4 <HAL_GetREVID>
 8007098:	4603      	mov	r3, r0
 800709a:	f241 0203 	movw	r2, #4099	; 0x1003
 800709e:	4293      	cmp	r3, r2
 80070a0:	d817      	bhi.n	80070d2 <HAL_RCC_OscConfig+0x322>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d108      	bne.n	80070bc <HAL_RCC_OscConfig+0x30c>
 80070aa:	4b89      	ldr	r3, [pc, #548]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070b2:	4a87      	ldr	r2, [pc, #540]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070ba:	e075      	b.n	80071a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070bc:	4b84      	ldr	r3, [pc, #528]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	069b      	lsls	r3, r3, #26
 80070ca:	4981      	ldr	r1, [pc, #516]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070d0:	e06a      	b.n	80071a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070d2:	4b7f      	ldr	r3, [pc, #508]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	497b      	ldr	r1, [pc, #492]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070e6:	e05f      	b.n	80071a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d042      	beq.n	8007176 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80070f0:	4b77      	ldr	r3, [pc, #476]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a76      	ldr	r2, [pc, #472]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fa fe3a 	bl	8001d74 <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007104:	f7fa fe36 	bl	8001d74 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e255      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007116:	4b6e      	ldr	r3, [pc, #440]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007122:	f7fa fe57 	bl	8001dd4 <HAL_GetREVID>
 8007126:	4603      	mov	r3, r0
 8007128:	f241 0203 	movw	r2, #4099	; 0x1003
 800712c:	4293      	cmp	r3, r2
 800712e:	d817      	bhi.n	8007160 <HAL_RCC_OscConfig+0x3b0>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	2b20      	cmp	r3, #32
 8007136:	d108      	bne.n	800714a <HAL_RCC_OscConfig+0x39a>
 8007138:	4b65      	ldr	r3, [pc, #404]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007140:	4a63      	ldr	r2, [pc, #396]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007146:	6053      	str	r3, [r2, #4]
 8007148:	e02e      	b.n	80071a8 <HAL_RCC_OscConfig+0x3f8>
 800714a:	4b61      	ldr	r3, [pc, #388]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	069b      	lsls	r3, r3, #26
 8007158:	495d      	ldr	r1, [pc, #372]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800715a:	4313      	orrs	r3, r2
 800715c:	604b      	str	r3, [r1, #4]
 800715e:	e023      	b.n	80071a8 <HAL_RCC_OscConfig+0x3f8>
 8007160:	4b5b      	ldr	r3, [pc, #364]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	061b      	lsls	r3, r3, #24
 800716e:	4958      	ldr	r1, [pc, #352]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007170:	4313      	orrs	r3, r2
 8007172:	60cb      	str	r3, [r1, #12]
 8007174:	e018      	b.n	80071a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007176:	4b56      	ldr	r3, [pc, #344]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a55      	ldr	r2, [pc, #340]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800717c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007182:	f7fa fdf7 	bl	8001d74 <HAL_GetTick>
 8007186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800718a:	f7fa fdf3 	bl	8001d74 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e212      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800719c:	4b4c      	ldr	r3, [pc, #304]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d036      	beq.n	8007222 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d019      	beq.n	80071f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071bc:	4b44      	ldr	r3, [pc, #272]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80071be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c0:	4a43      	ldr	r2, [pc, #268]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c8:	f7fa fdd4 	bl	8001d74 <HAL_GetTick>
 80071cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071d0:	f7fa fdd0 	bl	8001d74 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e1ef      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071e2:	4b3b      	ldr	r3, [pc, #236]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80071e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0x420>
 80071ee:	e018      	b.n	8007222 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071f0:	4b37      	ldr	r3, [pc, #220]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80071f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f4:	4a36      	ldr	r2, [pc, #216]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 80071f6:	f023 0301 	bic.w	r3, r3, #1
 80071fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fc:	f7fa fdba 	bl	8001d74 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007204:	f7fa fdb6 	bl	8001d74 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e1d5      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007216:	4b2e      	ldr	r3, [pc, #184]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d036      	beq.n	800729c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d019      	beq.n	800726a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007236:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a25      	ldr	r2, [pc, #148]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800723c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007240:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007242:	f7fa fd97 	bl	8001d74 <HAL_GetTick>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800724a:	f7fa fd93 	bl	8001d74 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e1b2      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800725c:	4b1c      	ldr	r3, [pc, #112]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <HAL_RCC_OscConfig+0x49a>
 8007268:	e018      	b.n	800729c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800726a:	4b19      	ldr	r3, [pc, #100]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a18      	ldr	r2, [pc, #96]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007276:	f7fa fd7d 	bl	8001d74 <HAL_GetTick>
 800727a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800727e:	f7fa fd79 	bl	8001d74 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e198      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <HAL_RCC_OscConfig+0x520>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f0      	bne.n	800727e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8085 	beq.w	80073b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <HAL_RCC_OscConfig+0x524>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <HAL_RCC_OscConfig+0x524>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072b6:	f7fa fd5d 	bl	8001d74 <HAL_GetTick>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072bc:	e00c      	b.n	80072d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072be:	f7fa fd59 	bl	8001d74 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b64      	cmp	r3, #100	; 0x64
 80072ca:	d905      	bls.n	80072d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e178      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
 80072d0:	58024400 	.word	0x58024400
 80072d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d8:	4b96      	ldr	r3, [pc, #600]	; (8007534 <HAL_RCC_OscConfig+0x784>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0ec      	beq.n	80072be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x54a>
 80072ec:	4b92      	ldr	r3, [pc, #584]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a91      	ldr	r2, [pc, #580]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
 80072f8:	e02d      	b.n	8007356 <HAL_RCC_OscConfig+0x5a6>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x56c>
 8007302:	4b8d      	ldr	r3, [pc, #564]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	4a8c      	ldr	r2, [pc, #560]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	6713      	str	r3, [r2, #112]	; 0x70
 800730e:	4b8a      	ldr	r3, [pc, #552]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007312:	4a89      	ldr	r2, [pc, #548]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007314:	f023 0304 	bic.w	r3, r3, #4
 8007318:	6713      	str	r3, [r2, #112]	; 0x70
 800731a:	e01c      	b.n	8007356 <HAL_RCC_OscConfig+0x5a6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b05      	cmp	r3, #5
 8007322:	d10c      	bne.n	800733e <HAL_RCC_OscConfig+0x58e>
 8007324:	4b84      	ldr	r3, [pc, #528]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	4a83      	ldr	r2, [pc, #524]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800732a:	f043 0304 	orr.w	r3, r3, #4
 800732e:	6713      	str	r3, [r2, #112]	; 0x70
 8007330:	4b81      	ldr	r3, [pc, #516]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007334:	4a80      	ldr	r2, [pc, #512]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6713      	str	r3, [r2, #112]	; 0x70
 800733c:	e00b      	b.n	8007356 <HAL_RCC_OscConfig+0x5a6>
 800733e:	4b7e      	ldr	r3, [pc, #504]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	4a7d      	ldr	r2, [pc, #500]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6713      	str	r3, [r2, #112]	; 0x70
 800734a:	4b7b      	ldr	r3, [pc, #492]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	4a7a      	ldr	r2, [pc, #488]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d015      	beq.n	800738a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735e:	f7fa fd09 	bl	8001d74 <HAL_GetTick>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007364:	e00a      	b.n	800737c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007366:	f7fa fd05 	bl	8001d74 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f241 3288 	movw	r2, #5000	; 0x1388
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e122      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800737c:	4b6e      	ldr	r3, [pc, #440]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0ee      	beq.n	8007366 <HAL_RCC_OscConfig+0x5b6>
 8007388:	e014      	b.n	80073b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738a:	f7fa fcf3 	bl	8001d74 <HAL_GetTick>
 800738e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007390:	e00a      	b.n	80073a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007392:	f7fa fcef 	bl	8001d74 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e10c      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073a8:	4b63      	ldr	r3, [pc, #396]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1ee      	bne.n	8007392 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8101 	beq.w	80075c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073be:	4b5e      	ldr	r3, [pc, #376]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c6:	2b18      	cmp	r3, #24
 80073c8:	f000 80bc 	beq.w	8007544 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	f040 8095 	bne.w	8007500 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d6:	4b58      	ldr	r3, [pc, #352]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a57      	ldr	r2, [pc, #348]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80073dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fa fcc7 	bl	8001d74 <HAL_GetTick>
 80073e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073e8:	e008      	b.n	80073fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ea:	f7fa fcc3 	bl	8001d74 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0e2      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073fc:	4b4e      	ldr	r3, [pc, #312]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f0      	bne.n	80073ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007408:	4b4b      	ldr	r3, [pc, #300]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800740a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740c:	4b4b      	ldr	r3, [pc, #300]	; (800753c <HAL_RCC_OscConfig+0x78c>)
 800740e:	4013      	ands	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007418:	0112      	lsls	r2, r2, #4
 800741a:	430a      	orrs	r2, r1
 800741c:	4946      	ldr	r1, [pc, #280]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800741e:	4313      	orrs	r3, r2
 8007420:	628b      	str	r3, [r1, #40]	; 0x28
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	3b01      	subs	r3, #1
 8007428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007430:	3b01      	subs	r3, #1
 8007432:	025b      	lsls	r3, r3, #9
 8007434:	b29b      	uxth	r3, r3
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	3b01      	subs	r3, #1
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	3b01      	subs	r3, #1
 800744c:	061b      	lsls	r3, r3, #24
 800744e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007452:	4939      	ldr	r1, [pc, #228]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007454:	4313      	orrs	r3, r2
 8007456:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007458:	4b37      	ldr	r3, [pc, #220]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4a36      	ldr	r2, [pc, #216]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007464:	4b34      	ldr	r3, [pc, #208]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007468:	4b35      	ldr	r3, [pc, #212]	; (8007540 <HAL_RCC_OscConfig+0x790>)
 800746a:	4013      	ands	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007470:	00d2      	lsls	r2, r2, #3
 8007472:	4931      	ldr	r1, [pc, #196]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007474:	4313      	orrs	r3, r2
 8007476:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007478:	4b2f      	ldr	r3, [pc, #188]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	f023 020c 	bic.w	r2, r3, #12
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	492c      	ldr	r1, [pc, #176]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007486:	4313      	orrs	r3, r2
 8007488:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800748a:	4b2b      	ldr	r3, [pc, #172]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	f023 0202 	bic.w	r2, r3, #2
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	4928      	ldr	r1, [pc, #160]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007498:	4313      	orrs	r3, r2
 800749a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800749c:	4b26      	ldr	r3, [pc, #152]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4a25      	ldr	r2, [pc, #148]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a8:	4b23      	ldr	r3, [pc, #140]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	4a22      	ldr	r2, [pc, #136]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074b4:	4b20      	ldr	r3, [pc, #128]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80074c0:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4a1c      	ldr	r2, [pc, #112]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074cc:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a19      	ldr	r2, [pc, #100]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d8:	f7fa fc4c 	bl	8001d74 <HAL_GetTick>
 80074dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fa fc48 	bl	8001d74 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e067      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0x730>
 80074fe:	e05f      	b.n	80075c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007500:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a0c      	ldr	r2, [pc, #48]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800750a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fa fc32 	bl	8001d74 <HAL_GetTick>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007514:	f7fa fc2e 	bl	8001d74 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e04d      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007526:	4b04      	ldr	r3, [pc, #16]	; (8007538 <HAL_RCC_OscConfig+0x788>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0x764>
 8007532:	e045      	b.n	80075c0 <HAL_RCC_OscConfig+0x810>
 8007534:	58024800 	.word	0x58024800
 8007538:	58024400 	.word	0x58024400
 800753c:	fffffc0c 	.word	0xfffffc0c
 8007540:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007544:	4b21      	ldr	r3, [pc, #132]	; (80075cc <HAL_RCC_OscConfig+0x81c>)
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <HAL_RCC_OscConfig+0x81c>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b01      	cmp	r3, #1
 8007556:	d031      	beq.n	80075bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f003 0203 	and.w	r2, r3, #3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d12a      	bne.n	80075bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d122      	bne.n	80075bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007582:	429a      	cmp	r2, r3
 8007584:	d11a      	bne.n	80075bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	0a5b      	lsrs	r3, r3, #9
 800758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007594:	429a      	cmp	r2, r3
 8007596:	d111      	bne.n	80075bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d108      	bne.n	80075bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	0e1b      	lsrs	r3, r3, #24
 80075ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d001      	beq.n	80075c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3730      	adds	r7, #48	; 0x30
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400

080075d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e19c      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075e4:	4b8a      	ldr	r3, [pc, #552]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d910      	bls.n	8007614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f2:	4b87      	ldr	r3, [pc, #540]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f023 020f 	bic.w	r2, r3, #15
 80075fa:	4985      	ldr	r1, [pc, #532]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007602:	4b83      	ldr	r3, [pc, #524]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d001      	beq.n	8007614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e184      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d010      	beq.n	8007642 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	4b7b      	ldr	r3, [pc, #492]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800762c:	429a      	cmp	r2, r3
 800762e:	d908      	bls.n	8007642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007630:	4b78      	ldr	r3, [pc, #480]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	4975      	ldr	r1, [pc, #468]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 800763e:	4313      	orrs	r3, r2
 8007640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d010      	beq.n	8007670 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695a      	ldr	r2, [r3, #20]
 8007652:	4b70      	ldr	r3, [pc, #448]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800765a:	429a      	cmp	r2, r3
 800765c:	d908      	bls.n	8007670 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800765e:	4b6d      	ldr	r3, [pc, #436]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	496a      	ldr	r1, [pc, #424]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 800766c:	4313      	orrs	r3, r2
 800766e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	d010      	beq.n	800769e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699a      	ldr	r2, [r3, #24]
 8007680:	4b64      	ldr	r3, [pc, #400]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007688:	429a      	cmp	r2, r3
 800768a:	d908      	bls.n	800769e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800768c:	4b61      	ldr	r3, [pc, #388]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	495e      	ldr	r1, [pc, #376]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 800769a:	4313      	orrs	r3, r2
 800769c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d010      	beq.n	80076cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	4b59      	ldr	r3, [pc, #356]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d908      	bls.n	80076cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076ba:	4b56      	ldr	r3, [pc, #344]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	4953      	ldr	r1, [pc, #332]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d010      	beq.n	80076fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	4b4d      	ldr	r3, [pc, #308]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d908      	bls.n	80076fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e8:	4b4a      	ldr	r3, [pc, #296]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f023 020f 	bic.w	r2, r3, #15
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4947      	ldr	r1, [pc, #284]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d055      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007706:	4b43      	ldr	r3, [pc, #268]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	4940      	ldr	r1, [pc, #256]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007714:	4313      	orrs	r3, r2
 8007716:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d107      	bne.n	8007730 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007720:	4b3c      	ldr	r3, [pc, #240]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d121      	bne.n	8007770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e0f6      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d107      	bne.n	8007748 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007738:	4b36      	ldr	r3, [pc, #216]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d115      	bne.n	8007770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0ea      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d107      	bne.n	8007760 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007750:	4b30      	ldr	r3, [pc, #192]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0de      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007760:	4b2c      	ldr	r3, [pc, #176]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0d6      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007770:	4b28      	ldr	r3, [pc, #160]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f023 0207 	bic.w	r2, r3, #7
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	4925      	ldr	r1, [pc, #148]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 800777e:	4313      	orrs	r3, r2
 8007780:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007782:	f7fa faf7 	bl	8001d74 <HAL_GetTick>
 8007786:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800778a:	f7fa faf3 	bl	8001d74 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f241 3288 	movw	r2, #5000	; 0x1388
 8007798:	4293      	cmp	r3, r2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e0be      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a0:	4b1c      	ldr	r3, [pc, #112]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d1eb      	bne.n	800778a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	4b14      	ldr	r3, [pc, #80]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d208      	bcs.n	80077e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ce:	4b11      	ldr	r3, [pc, #68]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	f023 020f 	bic.w	r2, r3, #15
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	490e      	ldr	r1, [pc, #56]	; (8007814 <HAL_RCC_ClockConfig+0x244>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d214      	bcs.n	8007818 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ee:	4b08      	ldr	r3, [pc, #32]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 020f 	bic.w	r2, r3, #15
 80077f6:	4906      	ldr	r1, [pc, #24]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fe:	4b04      	ldr	r3, [pc, #16]	; (8007810 <HAL_RCC_ClockConfig+0x240>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d005      	beq.n	8007818 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e086      	b.n	800791e <HAL_RCC_ClockConfig+0x34e>
 8007810:	52002000 	.word	0x52002000
 8007814:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d010      	beq.n	8007846 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	4b3f      	ldr	r3, [pc, #252]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007830:	429a      	cmp	r2, r3
 8007832:	d208      	bcs.n	8007846 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007834:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	4939      	ldr	r1, [pc, #228]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007842:	4313      	orrs	r3, r2
 8007844:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d010      	beq.n	8007874 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	4b34      	ldr	r3, [pc, #208]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800785e:	429a      	cmp	r2, r3
 8007860:	d208      	bcs.n	8007874 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007862:	4b31      	ldr	r3, [pc, #196]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	492e      	ldr	r1, [pc, #184]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007870:	4313      	orrs	r3, r2
 8007872:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699a      	ldr	r2, [r3, #24]
 8007884:	4b28      	ldr	r3, [pc, #160]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800788c:	429a      	cmp	r2, r3
 800788e:	d208      	bcs.n	80078a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007890:	4b25      	ldr	r3, [pc, #148]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	4922      	ldr	r1, [pc, #136]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d010      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69da      	ldr	r2, [r3, #28]
 80078b2:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d208      	bcs.n	80078d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078be:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	4917      	ldr	r1, [pc, #92]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078d0:	f000 f834 	bl	800793c <HAL_RCC_GetSysClockFreq>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	4912      	ldr	r1, [pc, #72]	; (800792c <HAL_RCC_ClockConfig+0x35c>)
 80078e2:	5ccb      	ldrb	r3, [r1, r3]
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	fa22 f303 	lsr.w	r3, r2, r3
 80078ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078ee:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <HAL_RCC_ClockConfig+0x358>)
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	4a0d      	ldr	r2, [pc, #52]	; (800792c <HAL_RCC_ClockConfig+0x35c>)
 80078f8:	5cd3      	ldrb	r3, [r2, r3]
 80078fa:	f003 031f 	and.w	r3, r3, #31
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	4a0a      	ldr	r2, [pc, #40]	; (8007930 <HAL_RCC_ClockConfig+0x360>)
 8007906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007908:	4a0a      	ldr	r2, [pc, #40]	; (8007934 <HAL_RCC_ClockConfig+0x364>)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <HAL_RCC_ClockConfig+0x368>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f7f9 fd16 	bl	8001344 <HAL_InitTick>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	58024400 	.word	0x58024400
 800792c:	08015ce0 	.word	0x08015ce0
 8007930:	24000004 	.word	0x24000004
 8007934:	24000000 	.word	0x24000000
 8007938:	24000008 	.word	0x24000008

0800793c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800793c:	b480      	push	{r7}
 800793e:	b089      	sub	sp, #36	; 0x24
 8007940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007942:	4bb3      	ldr	r3, [pc, #716]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800794a:	2b18      	cmp	r3, #24
 800794c:	f200 8155 	bhi.w	8007bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	080079bd 	.word	0x080079bd
 800795c:	08007bfb 	.word	0x08007bfb
 8007960:	08007bfb 	.word	0x08007bfb
 8007964:	08007bfb 	.word	0x08007bfb
 8007968:	08007bfb 	.word	0x08007bfb
 800796c:	08007bfb 	.word	0x08007bfb
 8007970:	08007bfb 	.word	0x08007bfb
 8007974:	08007bfb 	.word	0x08007bfb
 8007978:	080079e3 	.word	0x080079e3
 800797c:	08007bfb 	.word	0x08007bfb
 8007980:	08007bfb 	.word	0x08007bfb
 8007984:	08007bfb 	.word	0x08007bfb
 8007988:	08007bfb 	.word	0x08007bfb
 800798c:	08007bfb 	.word	0x08007bfb
 8007990:	08007bfb 	.word	0x08007bfb
 8007994:	08007bfb 	.word	0x08007bfb
 8007998:	080079e9 	.word	0x080079e9
 800799c:	08007bfb 	.word	0x08007bfb
 80079a0:	08007bfb 	.word	0x08007bfb
 80079a4:	08007bfb 	.word	0x08007bfb
 80079a8:	08007bfb 	.word	0x08007bfb
 80079ac:	08007bfb 	.word	0x08007bfb
 80079b0:	08007bfb 	.word	0x08007bfb
 80079b4:	08007bfb 	.word	0x08007bfb
 80079b8:	080079ef 	.word	0x080079ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079bc:	4b94      	ldr	r3, [pc, #592]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d009      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079c8:	4b91      	ldr	r3, [pc, #580]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	08db      	lsrs	r3, r3, #3
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	4a90      	ldr	r2, [pc, #576]	; (8007c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
 80079d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80079da:	e111      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079dc:	4b8d      	ldr	r3, [pc, #564]	; (8007c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079de:	61bb      	str	r3, [r7, #24]
    break;
 80079e0:	e10e      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80079e2:	4b8d      	ldr	r3, [pc, #564]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079e4:	61bb      	str	r3, [r7, #24]
    break;
 80079e6:	e10b      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80079e8:	4b8c      	ldr	r3, [pc, #560]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079ea:	61bb      	str	r3, [r7, #24]
    break;
 80079ec:	e108      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079ee:	4b88      	ldr	r3, [pc, #544]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80079f8:	4b85      	ldr	r3, [pc, #532]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a04:	4b82      	ldr	r3, [pc, #520]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a0e:	4b80      	ldr	r3, [pc, #512]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a12:	08db      	lsrs	r3, r3, #3
 8007a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80e1 	beq.w	8007bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	f000 8083 	beq.w	8007b40 <HAL_RCC_GetSysClockFreq+0x204>
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	f200 80a1 	bhi.w	8007b84 <HAL_RCC_GetSysClockFreq+0x248>
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x114>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d056      	beq.n	8007afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a4e:	e099      	b.n	8007b84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a50:	4b6f      	ldr	r3, [pc, #444]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d02d      	beq.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a5c:	4b6c      	ldr	r3, [pc, #432]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	08db      	lsrs	r3, r3, #3
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	4a6b      	ldr	r2, [pc, #428]	; (8007c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	ee07 3a90 	vmov	s15, r3
 8007a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a86:	4b62      	ldr	r3, [pc, #392]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ab6:	e087      	b.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aca:	4b51      	ldr	r3, [pc, #324]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ade:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007afa:	e065      	b.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0e:	4b40      	ldr	r3, [pc, #256]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3e:	e043      	b.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b52:	4b2f      	ldr	r3, [pc, #188]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b82:	e021      	b.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007baa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007bc8:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	0a5b      	lsrs	r3, r3, #9
 8007bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bec:	ee17 3a90 	vmov	r3, s15
 8007bf0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007bf2:	e005      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]
    break;
 8007bf8:	e002      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bfc:	61bb      	str	r3, [r7, #24]
    break;
 8007bfe:	bf00      	nop
  }

  return sysclockfreq;
 8007c00:	69bb      	ldr	r3, [r7, #24]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3724      	adds	r7, #36	; 0x24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	58024400 	.word	0x58024400
 8007c14:	03d09000 	.word	0x03d09000
 8007c18:	003d0900 	.word	0x003d0900
 8007c1c:	00f42400 	.word	0x00f42400
 8007c20:	46000000 	.word	0x46000000
 8007c24:	4c742400 	.word	0x4c742400
 8007c28:	4a742400 	.word	0x4a742400
 8007c2c:	4b742400 	.word	0x4b742400

08007c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c36:	f7ff fe81 	bl	800793c <HAL_RCC_GetSysClockFreq>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	490f      	ldr	r1, [pc, #60]	; (8007c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c48:	5ccb      	ldrb	r3, [r1, r3]
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c5e:	5cd3      	ldrb	r3, [r2, r3]
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6a:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c6e:	4a07      	ldr	r2, [pc, #28]	; (8007c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c74:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c76:	681b      	ldr	r3, [r3, #0]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	58024400 	.word	0x58024400
 8007c84:	08015ce0 	.word	0x08015ce0
 8007c88:	24000004 	.word	0x24000004
 8007c8c:	24000000 	.word	0x24000000

08007c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c94:	f7ff ffcc 	bl	8007c30 <HAL_RCC_GetHCLKFreq>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	4904      	ldr	r1, [pc, #16]	; (8007cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ca6:	5ccb      	ldrb	r3, [r1, r3]
 8007ca8:	f003 031f 	and.w	r3, r3, #31
 8007cac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	08015ce0 	.word	0x08015ce0

08007cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cc0:	f7ff ffb6 	bl	8007c30 <HAL_RCC_GetHCLKFreq>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	4904      	ldr	r1, [pc, #16]	; (8007ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cd2:	5ccb      	ldrb	r3, [r1, r3]
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	08015ce0 	.word	0x08015ce0

08007ce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	223f      	movs	r2, #63	; 0x3f
 8007cf6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0207 	and.w	r2, r3, #7
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d04:	4b17      	ldr	r3, [pc, #92]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d10:	4b14      	ldr	r3, [pc, #80]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d1c:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d28:	4b0e      	ldr	r3, [pc, #56]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d34:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d40:	4b08      	ldr	r3, [pc, #32]	; (8007d64 <HAL_RCC_GetClockConfig+0x7c>)
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <HAL_RCC_GetClockConfig+0x80>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	601a      	str	r2, [r3, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	58024400 	.word	0x58024400
 8007d68:	52002000 	.word	0x52002000

08007d6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d03f      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d90:	d02a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d96:	d824      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d9c:	d018      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007da2:	d81e      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dac:	d007      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007dae:	e018      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4bab      	ldr	r3, [pc, #684]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4aaa      	ldr	r2, [pc, #680]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dbc:	e015      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	2102      	movs	r1, #2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 fff3 	bl	8009db0 <RCCEx_PLL2_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dce:	e00c      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f002 f89c 	bl	8009f14 <RCCEx_PLL3_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007de0:	e003      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	e000      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007df0:	4b9b      	ldr	r3, [pc, #620]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dfc:	4998      	ldr	r1, [pc, #608]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	650b      	str	r3, [r1, #80]	; 0x50
 8007e02:	e001      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d03d      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d826      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e39 	.word	0x08007e39
 8007e28:	08007e47 	.word	0x08007e47
 8007e2c:	08007e59 	.word	0x08007e59
 8007e30:	08007e71 	.word	0x08007e71
 8007e34:	08007e71 	.word	0x08007e71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e38:	4b89      	ldr	r3, [pc, #548]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	4a88      	ldr	r2, [pc, #544]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e44:	e015      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 ffaf 	bl	8009db0 <RCCEx_PLL2_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e56:	e00c      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 f858 	bl	8009f14 <RCCEx_PLL3_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e68:	e003      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6e:	e000      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e78:	4b79      	ldr	r3, [pc, #484]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7c:	f023 0207 	bic.w	r2, r3, #7
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e84:	4976      	ldr	r1, [pc, #472]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	650b      	str	r3, [r1, #80]	; 0x50
 8007e8a:	e001      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d042      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea4:	d02b      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eaa:	d825      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007eac:	2bc0      	cmp	r3, #192	; 0xc0
 8007eae:	d028      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8007eb2:	d821      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007eb4:	2b80      	cmp	r3, #128	; 0x80
 8007eb6:	d016      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007eb8:	2b80      	cmp	r3, #128	; 0x80
 8007eba:	d81d      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d007      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ec4:	e018      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec6:	4b66      	ldr	r3, [pc, #408]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4a65      	ldr	r2, [pc, #404]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ed2:	e017      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 ff68 	bl	8009db0 <RCCEx_PLL2_Config>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ee4:	e00e      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3324      	adds	r3, #36	; 0x24
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f002 f811 	bl	8009f14 <RCCEx_PLL3_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ef6:	e005      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
      break;
 8007efc:	e002      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f0a:	4b55      	ldr	r3, [pc, #340]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	4952      	ldr	r1, [pc, #328]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f1c:	e001      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d049      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f38:	d030      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f3e:	d82a      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f44:	d02c      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f4a:	d824      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f50:	d018      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f56:	d81e      	bhi.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f60:	d007      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f62:	e018      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f64:	4b3e      	ldr	r3, [pc, #248]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	4a3d      	ldr	r2, [pc, #244]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f70:	e017      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3304      	adds	r3, #4
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 ff19 	bl	8009db0 <RCCEx_PLL2_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f82:	e00e      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 ffc2 	bl	8009f14 <RCCEx_PLL3_Config>
 8007f90:	4603      	mov	r3, r0
 8007f92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f94:	e005      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9a:	e002      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007fa8:	4b2d      	ldr	r3, [pc, #180]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fb6:	492a      	ldr	r1, [pc, #168]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	658b      	str	r3, [r1, #88]	; 0x58
 8007fbc:	e001      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d04c      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd8:	d030      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fde:	d82a      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fe4:	d02c      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fea:	d824      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff0:	d018      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff6:	d81e      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008000:	d007      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008002:	e018      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008004:	4b16      	ldr	r3, [pc, #88]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a15      	ldr	r2, [pc, #84]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800800a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800800e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008010:	e017      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f001 fec9 	bl	8009db0 <RCCEx_PLL2_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008022:	e00e      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f001 ff72 	bl	8009f14 <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008034:	e005      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	75fb      	strb	r3, [r7, #23]
      break;
 800803a:	e002      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10d      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800804a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008056:	4902      	ldr	r1, [pc, #8]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008058:	4313      	orrs	r3, r2
 800805a:	658b      	str	r3, [r1, #88]	; 0x58
 800805c:	e004      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800805e:	bf00      	nop
 8008060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d032      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008078:	2b30      	cmp	r3, #48	; 0x30
 800807a:	d01c      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800807c:	2b30      	cmp	r3, #48	; 0x30
 800807e:	d817      	bhi.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008080:	2b20      	cmp	r3, #32
 8008082:	d00c      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008084:	2b20      	cmp	r3, #32
 8008086:	d813      	bhi.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d016      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800808c:	2b10      	cmp	r3, #16
 800808e:	d10f      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008090:	4baf      	ldr	r3, [pc, #700]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4aae      	ldr	r2, [pc, #696]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800809c:	e00e      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3304      	adds	r3, #4
 80080a2:	2102      	movs	r1, #2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fe83 	bl	8009db0 <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080ae:	e005      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	75fb      	strb	r3, [r7, #23]
      break;
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80080ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080c2:	4ba3      	ldr	r3, [pc, #652]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ce:	49a0      	ldr	r1, [pc, #640]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080d4:	e001      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d047      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ee:	d030      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80080f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f4:	d82a      	bhi.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80080f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080fa:	d02c      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80080fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008100:	d824      	bhi.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008106:	d018      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810c:	d81e      	bhi.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008116:	d007      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008118:	e018      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811a:	4b8d      	ldr	r3, [pc, #564]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	4a8c      	ldr	r2, [pc, #560]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008126:	e017      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f001 fe3e 	bl	8009db0 <RCCEx_PLL2_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008138:	e00e      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3324      	adds	r3, #36	; 0x24
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fee7 	bl	8009f14 <RCCEx_PLL3_Config>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800814a:	e005      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	75fb      	strb	r3, [r7, #23]
      break;
 8008150:	e002      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800815e:	4b7c      	ldr	r3, [pc, #496]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008162:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816a:	4979      	ldr	r1, [pc, #484]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800816c:	4313      	orrs	r3, r2
 800816e:	650b      	str	r3, [r1, #80]	; 0x50
 8008170:	e001      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d049      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008186:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800818a:	d02e      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800818c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008190:	d828      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008196:	d02a      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800819c:	d822      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800819e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a2:	d026      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80081a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a8:	d81c      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80081aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ae:	d010      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80081b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b4:	d816      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d01d      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80081ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081be:	d111      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	2101      	movs	r1, #1
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 fdf2 	bl	8009db0 <RCCEx_PLL2_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081d0:	e012      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3324      	adds	r3, #36	; 0x24
 80081d6:	2101      	movs	r1, #1
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 fe9b 	bl	8009f14 <RCCEx_PLL3_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081e2:	e009      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]
      break;
 80081e8:	e006      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081ea:	bf00      	nop
 80081ec:	e004      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081ee:	bf00      	nop
 80081f0:	e002      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081f2:	bf00      	nop
 80081f4:	e000      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081fe:	4b54      	ldr	r3, [pc, #336]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008202:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820a:	4951      	ldr	r1, [pc, #324]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800820c:	4313      	orrs	r3, r2
 800820e:	650b      	str	r3, [r1, #80]	; 0x50
 8008210:	e001      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d04b      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800822c:	d02e      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800822e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008232:	d828      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008238:	d02a      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823e:	d822      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008244:	d026      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800824a:	d81c      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800824c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008250:	d010      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008256:	d816      	bhi.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01d      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800825c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008260:	d111      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	2101      	movs	r1, #1
 8008268:	4618      	mov	r0, r3
 800826a:	f001 fda1 	bl	8009db0 <RCCEx_PLL2_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008272:	e012      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3324      	adds	r3, #36	; 0x24
 8008278:	2101      	movs	r1, #1
 800827a:	4618      	mov	r0, r3
 800827c:	f001 fe4a 	bl	8009f14 <RCCEx_PLL3_Config>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008284:	e009      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
      break;
 800828a:	e006      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082a0:	4b2b      	ldr	r3, [pc, #172]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082ae:	4928      	ldr	r1, [pc, #160]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	658b      	str	r3, [r1, #88]	; 0x58
 80082b4:	e001      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d02f      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ce:	d00e      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	d814      	bhi.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d015      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80082da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082de:	d10f      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e0:	4b1b      	ldr	r3, [pc, #108]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082ec:	e00c      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3304      	adds	r3, #4
 80082f2:	2101      	movs	r1, #1
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fd5b 	bl	8009db0 <RCCEx_PLL2_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082fe:	e003      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]
      break;
 8008304:	e000      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800830e:	4b10      	ldr	r3, [pc, #64]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800831a:	490d      	ldr	r1, [pc, #52]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800831c:	4313      	orrs	r3, r2
 800831e:	650b      	str	r3, [r1, #80]	; 0x50
 8008320:	e001      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d033      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008336:	2b03      	cmp	r3, #3
 8008338:	d81c      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	0800837b 	.word	0x0800837b
 8008344:	08008355 	.word	0x08008355
 8008348:	08008363 	.word	0x08008363
 800834c:	0800837b 	.word	0x0800837b
 8008350:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008354:	4bb8      	ldr	r3, [pc, #736]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	4ab7      	ldr	r2, [pc, #732]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800835a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008360:	e00c      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3304      	adds	r3, #4
 8008366:	2102      	movs	r1, #2
 8008368:	4618      	mov	r0, r3
 800836a:	f001 fd21 	bl	8009db0 <RCCEx_PLL2_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008372:	e003      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
      break;
 8008378:	e000      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800837a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008382:	4bad      	ldr	r3, [pc, #692]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008386:	f023 0203 	bic.w	r2, r3, #3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838e:	49aa      	ldr	r1, [pc, #680]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008390:	4313      	orrs	r3, r2
 8008392:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008394:	e001      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8086 	beq.w	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083a8:	4ba4      	ldr	r3, [pc, #656]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4aa3      	ldr	r2, [pc, #652]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80083ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083b4:	f7f9 fcde 	bl	8001d74 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083ba:	e009      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083bc:	f7f9 fcda 	bl	8001d74 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b64      	cmp	r3, #100	; 0x64
 80083c8:	d902      	bls.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	75fb      	strb	r3, [r7, #23]
        break;
 80083ce:	e005      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083d0:	4b9a      	ldr	r3, [pc, #616]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0ef      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d166      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083e2:	4b95      	ldr	r3, [pc, #596]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083ec:	4053      	eors	r3, r2
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d013      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083f6:	4b90      	ldr	r3, [pc, #576]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008400:	4b8d      	ldr	r3, [pc, #564]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008404:	4a8c      	ldr	r2, [pc, #560]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800840c:	4b8a      	ldr	r3, [pc, #552]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800840e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008410:	4a89      	ldr	r2, [pc, #548]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008416:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008418:	4a87      	ldr	r2, [pc, #540]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008428:	d115      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842a:	f7f9 fca3 	bl	8001d74 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008430:	e00b      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008432:	f7f9 fc9f 	bl	8001d74 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008440:	4293      	cmp	r3, r2
 8008442:	d902      	bls.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	75fb      	strb	r3, [r7, #23]
            break;
 8008448:	e005      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800844a:	4b7b      	ldr	r3, [pc, #492]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0ed      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d126      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800846a:	d10d      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800846c:	4b72      	ldr	r3, [pc, #456]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800847a:	0919      	lsrs	r1, r3, #4
 800847c:	4b70      	ldr	r3, [pc, #448]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800847e:	400b      	ands	r3, r1
 8008480:	496d      	ldr	r1, [pc, #436]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008482:	4313      	orrs	r3, r2
 8008484:	610b      	str	r3, [r1, #16]
 8008486:	e005      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008488:	4b6b      	ldr	r3, [pc, #428]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	4a6a      	ldr	r2, [pc, #424]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800848e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008492:	6113      	str	r3, [r2, #16]
 8008494:	4b68      	ldr	r3, [pc, #416]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800849e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084a2:	4965      	ldr	r1, [pc, #404]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	670b      	str	r3, [r1, #112]	; 0x70
 80084a8:	e004      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	75bb      	strb	r3, [r7, #22]
 80084ae:	e001      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d07e      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c4:	2b28      	cmp	r3, #40	; 0x28
 80084c6:	d867      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	0800859f 	.word	0x0800859f
 80084d4:	08008599 	.word	0x08008599
 80084d8:	08008599 	.word	0x08008599
 80084dc:	08008599 	.word	0x08008599
 80084e0:	08008599 	.word	0x08008599
 80084e4:	08008599 	.word	0x08008599
 80084e8:	08008599 	.word	0x08008599
 80084ec:	08008599 	.word	0x08008599
 80084f0:	08008575 	.word	0x08008575
 80084f4:	08008599 	.word	0x08008599
 80084f8:	08008599 	.word	0x08008599
 80084fc:	08008599 	.word	0x08008599
 8008500:	08008599 	.word	0x08008599
 8008504:	08008599 	.word	0x08008599
 8008508:	08008599 	.word	0x08008599
 800850c:	08008599 	.word	0x08008599
 8008510:	08008587 	.word	0x08008587
 8008514:	08008599 	.word	0x08008599
 8008518:	08008599 	.word	0x08008599
 800851c:	08008599 	.word	0x08008599
 8008520:	08008599 	.word	0x08008599
 8008524:	08008599 	.word	0x08008599
 8008528:	08008599 	.word	0x08008599
 800852c:	08008599 	.word	0x08008599
 8008530:	0800859f 	.word	0x0800859f
 8008534:	08008599 	.word	0x08008599
 8008538:	08008599 	.word	0x08008599
 800853c:	08008599 	.word	0x08008599
 8008540:	08008599 	.word	0x08008599
 8008544:	08008599 	.word	0x08008599
 8008548:	08008599 	.word	0x08008599
 800854c:	08008599 	.word	0x08008599
 8008550:	0800859f 	.word	0x0800859f
 8008554:	08008599 	.word	0x08008599
 8008558:	08008599 	.word	0x08008599
 800855c:	08008599 	.word	0x08008599
 8008560:	08008599 	.word	0x08008599
 8008564:	08008599 	.word	0x08008599
 8008568:	08008599 	.word	0x08008599
 800856c:	08008599 	.word	0x08008599
 8008570:	0800859f 	.word	0x0800859f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3304      	adds	r3, #4
 8008578:	2101      	movs	r1, #1
 800857a:	4618      	mov	r0, r3
 800857c:	f001 fc18 	bl	8009db0 <RCCEx_PLL2_Config>
 8008580:	4603      	mov	r3, r0
 8008582:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008584:	e00c      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3324      	adds	r3, #36	; 0x24
 800858a:	2101      	movs	r1, #1
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fcc1 	bl	8009f14 <RCCEx_PLL3_Config>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008596:	e003      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	75fb      	strb	r3, [r7, #23]
      break;
 800859c:	e000      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800859e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085b2:	4921      	ldr	r1, [pc, #132]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	654b      	str	r3, [r1, #84]	; 0x54
 80085b8:	e001      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d03e      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d820      	bhi.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	0800861b 	.word	0x0800861b
 80085dc:	080085f1 	.word	0x080085f1
 80085e0:	08008603 	.word	0x08008603
 80085e4:	0800861b 	.word	0x0800861b
 80085e8:	0800861b 	.word	0x0800861b
 80085ec:	0800861b 	.word	0x0800861b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	2101      	movs	r1, #1
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 fbda 	bl	8009db0 <RCCEx_PLL2_Config>
 80085fc:	4603      	mov	r3, r0
 80085fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008600:	e00c      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3324      	adds	r3, #36	; 0x24
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fc83 	bl	8009f14 <RCCEx_PLL3_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008612:	e003      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]
      break;
 8008618:	e000      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800861a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d110      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008622:	4b05      	ldr	r3, [pc, #20]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008626:	f023 0207 	bic.w	r2, r3, #7
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862e:	4902      	ldr	r1, [pc, #8]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008630:	4313      	orrs	r3, r2
 8008632:	654b      	str	r3, [r1, #84]	; 0x54
 8008634:	e008      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008636:	bf00      	nop
 8008638:	58024400 	.word	0x58024400
 800863c:	58024800 	.word	0x58024800
 8008640:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d039      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865a:	2b05      	cmp	r3, #5
 800865c:	d820      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	080086a7 	.word	0x080086a7
 8008668:	0800867d 	.word	0x0800867d
 800866c:	0800868f 	.word	0x0800868f
 8008670:	080086a7 	.word	0x080086a7
 8008674:	080086a7 	.word	0x080086a7
 8008678:	080086a7 	.word	0x080086a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3304      	adds	r3, #4
 8008680:	2101      	movs	r1, #1
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fb94 	bl	8009db0 <RCCEx_PLL2_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800868c:	e00c      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3324      	adds	r3, #36	; 0x24
 8008692:	2101      	movs	r1, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fc3d 	bl	8009f14 <RCCEx_PLL3_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800869e:	e003      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	75fb      	strb	r3, [r7, #23]
      break;
 80086a4:	e000      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80086a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086ae:	4bb7      	ldr	r3, [pc, #732]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b2:	f023 0207 	bic.w	r2, r3, #7
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086bc:	49b3      	ldr	r1, [pc, #716]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	658b      	str	r3, [r1, #88]	; 0x58
 80086c2:	e001      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d04b      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086de:	d02e      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80086e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086e4:	d828      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ea:	d02a      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80086ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f0:	d822      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086f6:	d026      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80086f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086fc:	d81c      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008702:	d010      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008708:	d816      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d01d      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800870e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008712:	d111      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3304      	adds	r3, #4
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fb48 	bl	8009db0 <RCCEx_PLL2_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008724:	e012      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3324      	adds	r3, #36	; 0x24
 800872a:	2102      	movs	r1, #2
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fbf1 	bl	8009f14 <RCCEx_PLL3_Config>
 8008732:	4603      	mov	r3, r0
 8008734:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008736:	e009      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
      break;
 800873c:	e006      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800873e:	bf00      	nop
 8008740:	e004      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008742:	bf00      	nop
 8008744:	e002      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008746:	bf00      	nop
 8008748:	e000      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800874a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008752:	4b8e      	ldr	r3, [pc, #568]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008760:	498a      	ldr	r1, [pc, #552]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008762:	4313      	orrs	r3, r2
 8008764:	654b      	str	r3, [r1, #84]	; 0x54
 8008766:	e001      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d04b      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800877e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008782:	d02e      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008784:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008788:	d828      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800878a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878e:	d02a      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008794:	d822      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800879a:	d026      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800879c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a0:	d81c      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80087a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a6:	d010      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80087a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ac:	d816      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01d      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80087b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b6:	d111      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 faf6 	bl	8009db0 <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087c8:	e012      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	2102      	movs	r1, #2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f001 fb9f 	bl	8009f14 <RCCEx_PLL3_Config>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087da:	e009      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
      break;
 80087e0:	e006      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80087e2:	bf00      	nop
 80087e4:	e004      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80087ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10a      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087f6:	4b65      	ldr	r3, [pc, #404]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008804:	4961      	ldr	r1, [pc, #388]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008806:	4313      	orrs	r3, r2
 8008808:	658b      	str	r3, [r1, #88]	; 0x58
 800880a:	e001      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008818:	2b00      	cmp	r3, #0
 800881a:	d04b      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008822:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008826:	d02e      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008828:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800882c:	d828      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800882e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008832:	d02a      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008838:	d822      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800883a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800883e:	d026      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008840:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008844:	d81c      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800884a:	d010      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800884c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008850:	d816      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01d      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885a:	d111      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f001 faa4 	bl	8009db0 <RCCEx_PLL2_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800886c:	e012      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3324      	adds	r3, #36	; 0x24
 8008872:	2102      	movs	r1, #2
 8008874:	4618      	mov	r0, r3
 8008876:	f001 fb4d 	bl	8009f14 <RCCEx_PLL3_Config>
 800887a:	4603      	mov	r3, r0
 800887c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800887e:	e009      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
      break;
 8008884:	e006      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008886:	bf00      	nop
 8008888:	e004      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800888a:	bf00      	nop
 800888c:	e002      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800889a:	4b3c      	ldr	r3, [pc, #240]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088a8:	4938      	ldr	r1, [pc, #224]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	658b      	str	r3, [r1, #88]	; 0x58
 80088ae:	e001      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01a      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ca:	d10a      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3324      	adds	r3, #36	; 0x24
 80088d0:	2102      	movs	r1, #2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 fb1e 	bl	8009f14 <RCCEx_PLL3_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80088e2:	4b2a      	ldr	r3, [pc, #168]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f0:	4926      	ldr	r1, [pc, #152]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890c:	d10a      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	; 0x24
 8008912:	2102      	movs	r1, #2
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fafd 	bl	8009f14 <RCCEx_PLL3_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008924:	4b19      	ldr	r3, [pc, #100]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008932:	4916      	ldr	r1, [pc, #88]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008934:	4313      	orrs	r3, r2
 8008936:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d036      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800894a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800894e:	d01f      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008954:	d817      	bhi.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800895a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800895e:	d009      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008960:	e011      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3304      	adds	r3, #4
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f001 fa21 	bl	8009db0 <RCCEx_PLL2_Config>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008972:	e00e      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3324      	adds	r3, #36	; 0x24
 8008978:	2102      	movs	r1, #2
 800897a:	4618      	mov	r0, r3
 800897c:	f001 faca 	bl	8009f14 <RCCEx_PLL3_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008984:	e005      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]
      break;
 800898a:	e002      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800898c:	58024400 	.word	0x58024400
      break;
 8008990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008998:	4b93      	ldr	r3, [pc, #588]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800899a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089a6:	4990      	ldr	r1, [pc, #576]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	658b      	str	r3, [r1, #88]	; 0x58
 80089ac:	e001      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d033      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c8:	d01c      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80089ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089ce:	d816      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80089d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d4:	d003      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80089d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089da:	d007      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80089dc:	e00f      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089de:	4b82      	ldr	r3, [pc, #520]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	4a81      	ldr	r2, [pc, #516]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80089ea:	e00c      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3324      	adds	r3, #36	; 0x24
 80089f0:	2101      	movs	r1, #1
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 fa8e 	bl	8009f14 <RCCEx_PLL3_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80089fc:	e003      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
      break;
 8008a02:	e000      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a0c:	4b76      	ldr	r3, [pc, #472]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a1a:	4973      	ldr	r1, [pc, #460]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a20:	e001      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d029      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a3e:	d007      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008a40:	e00f      	b.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a42:	4b69      	ldr	r3, [pc, #420]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	4a68      	ldr	r2, [pc, #416]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a4e:	e00b      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3304      	adds	r3, #4
 8008a54:	2102      	movs	r1, #2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 f9aa 	bl	8009db0 <RCCEx_PLL2_Config>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a60:	e002      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
      break;
 8008a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a6e:	4b5e      	ldr	r3, [pc, #376]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7a:	495b      	ldr	r1, [pc, #364]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a80:	e001      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3324      	adds	r3, #36	; 0x24
 8008a96:	2102      	movs	r1, #2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 fa3b 	bl	8009f14 <RCCEx_PLL3_Config>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d030      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008abc:	d017      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac2:	d811      	bhi.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac8:	d013      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ace:	d80b      	bhi.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d010      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad8:	d106      	bne.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ada:	4b43      	ldr	r3, [pc, #268]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	4a42      	ldr	r2, [pc, #264]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008ae6:	e007      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
      break;
 8008aec:	e004      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008aee:	bf00      	nop
 8008af0:	e002      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008af2:	bf00      	nop
 8008af4:	e000      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008afe:	4b3a      	ldr	r3, [pc, #232]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b0a:	4937      	ldr	r1, [pc, #220]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	654b      	str	r3, [r1, #84]	; 0x54
 8008b10:	e001      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b22:	4b31      	ldr	r3, [pc, #196]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2e:	492e      	ldr	r1, [pc, #184]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b40:	4b29      	ldr	r3, [pc, #164]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b4e:	4926      	ldr	r1, [pc, #152]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b60:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6c:	491e      	ldr	r1, [pc, #120]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00d      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b7e:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	4a19      	ldr	r2, [pc, #100]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b88:	6113      	str	r3, [r2, #16]
 8008b8a:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b8c:	691a      	ldr	r2, [r3, #16]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b94:	4914      	ldr	r1, [pc, #80]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da08      	bge.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ba2:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bae:	490e      	ldr	r1, [pc, #56]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bc0:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bce:	4906      	ldr	r1, [pc, #24]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008bd4:	7dbb      	ldrb	r3, [r7, #22]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e000      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400

08008bec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b090      	sub	sp, #64	; 0x40
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	f040 8095 	bne.w	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008bfe:	4bae      	ldr	r3, [pc, #696]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	633b      	str	r3, [r7, #48]	; 0x30
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	f200 8088 	bhi.w	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c55 	.word	0x08008c55
 8008c20:	08008c7d 	.word	0x08008c7d
 8008c24:	08008d19 	.word	0x08008d19
 8008c28:	08008ca5 	.word	0x08008ca5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c2c:	4ba2      	ldr	r3, [pc, #648]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c38:	d108      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 ff64 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c48:	f000 bc95 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c50:	f000 bc91 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c54:	4b98      	ldr	r3, [pc, #608]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c60:	d108      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c62:	f107 0318 	add.w	r3, r7, #24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fca8 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c70:	f000 bc81 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c78:	f000 bc7d 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c7c:	4b8e      	ldr	r3, [pc, #568]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c88:	d108      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c8a:	f107 030c 	add.w	r3, r7, #12
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fde8 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c98:	f000 bc6d 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca0:	f000 bc69 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ca4:	4b84      	ldr	r3, [pc, #528]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cae:	4b82      	ldr	r3, [pc, #520]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cc0:	4b7d      	ldr	r3, [pc, #500]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a7c      	ldr	r2, [pc, #496]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd2:	e01f      	b.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cd4:	4b78      	ldr	r3, [pc, #480]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce0:	d106      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008cea:	4b75      	ldr	r3, [pc, #468]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cee:	e011      	b.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cf0:	4b71      	ldr	r3, [pc, #452]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cfc:	d106      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d04:	d102      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d06:	4b6f      	ldr	r3, [pc, #444]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d0a:	e003      	b.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d10:	f000 bc31 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d14:	f000 bc2f 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d18:	4b6b      	ldr	r3, [pc, #428]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d1c:	f000 bc2b 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d24:	f000 bc27 	b.w	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2e:	f040 8095 	bne.w	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008d32:	4b61      	ldr	r3, [pc, #388]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d36:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008d3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d42:	d04d      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4a:	f200 8084 	bhi.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	2bc0      	cmp	r3, #192	; 0xc0
 8008d52:	d07d      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	2bc0      	cmp	r3, #192	; 0xc0
 8008d58:	d87d      	bhi.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	2b80      	cmp	r3, #128	; 0x80
 8008d5e:	d02d      	beq.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	2b80      	cmp	r3, #128	; 0x80
 8008d64:	d877      	bhi.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d012      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008d72:	e070      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d74:	4b50      	ldr	r3, [pc, #320]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d80:	d107      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fec0 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d90:	e3f1      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d96:	e3ee      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d98:	4b47      	ldr	r3, [pc, #284]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008da4:	d107      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da6:	f107 0318 	add.w	r3, r7, #24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fc06 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008db4:	e3df      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dba:	e3dc      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dbc:	4b3e      	ldr	r3, [pc, #248]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dc8:	d107      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dca:	f107 030c 	add.w	r3, r7, #12
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fd48 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dd8:	e3cd      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dde:	e3ca      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008de0:	4b35      	ldr	r3, [pc, #212]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dea:	4b33      	ldr	r3, [pc, #204]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d10c      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d109      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dfc:	4b2e      	ldr	r3, [pc, #184]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	08db      	lsrs	r3, r3, #3
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	4a2d      	ldr	r2, [pc, #180]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008e08:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e0e:	e01e      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e10:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1c:	d106      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e24:	d102      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e26:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2a:	e010      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e2c:	4b22      	ldr	r3, [pc, #136]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e38:	d106      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e40:	d102      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e42:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e46:	e002      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e4c:	e393      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e4e:	e392      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e50:	4b1d      	ldr	r3, [pc, #116]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e54:	e38f      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5a:	e38c      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e62:	f040 80a7 	bne.w	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e6e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e76:	d05f      	beq.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e7e:	f200 8096 	bhi.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e88:	f000 808e 	beq.w	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e92:	f200 808c 	bhi.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e9c:	d03a      	beq.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea4:	f200 8083 	bhi.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00e      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eb4:	d01c      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008eb6:	e07a      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	003d0900 	.word	0x003d0900
 8008ec4:	00f42400 	.word	0x00f42400
 8008ec8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ecc:	4baa      	ldr	r3, [pc, #680]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ed8:	d107      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fe14 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ee8:	e345      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eee:	e342      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef0:	4ba1      	ldr	r3, [pc, #644]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008efc:	d107      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efe:	f107 0318 	add.w	r3, r7, #24
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fb5a 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f0c:	e333      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f12:	e330      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f14:	4b98      	ldr	r3, [pc, #608]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f20:	d107      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f22:	f107 030c 	add.w	r3, r7, #12
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fc9c 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f30:	e321      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f36:	e31e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f38:	4b8f      	ldr	r3, [pc, #572]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f42:	4b8d      	ldr	r3, [pc, #564]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d10c      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f54:	4b88      	ldr	r3, [pc, #544]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	08db      	lsrs	r3, r3, #3
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	4a87      	ldr	r2, [pc, #540]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008f60:	fa22 f303 	lsr.w	r3, r2, r3
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f66:	e01e      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f68:	4b83      	ldr	r3, [pc, #524]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f74:	d106      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f7c:	d102      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f7e:	4b80      	ldr	r3, [pc, #512]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f82:	e010      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f84:	4b7c      	ldr	r3, [pc, #496]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f90:	d106      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f98:	d102      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f9a:	4b7a      	ldr	r3, [pc, #488]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9e:	e002      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fa4:	e2e7      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fa6:	e2e6      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fa8:	4b77      	ldr	r3, [pc, #476]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fac:	e2e3      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb2:	e2e0      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fba:	f040 809c 	bne.w	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008fbe:	4b6e      	ldr	r3, [pc, #440]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008fc6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fce:	d054      	beq.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fd6:	f200 808b 	bhi.w	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fe0:	f000 8083 	beq.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fea:	f200 8081 	bhi.w	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ff4:	d02f      	beq.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ffc:	d878      	bhi.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800900a:	d012      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800900c:	e070      	b.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800900e:	4b5a      	ldr	r3, [pc, #360]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800901a:	d107      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800901c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fd73 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800902a:	e2a4      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009030:	e2a1      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009032:	4b51      	ldr	r3, [pc, #324]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800903a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903e:	d107      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009040:	f107 0318 	add.w	r3, r7, #24
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fab9 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800904e:	e292      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009054:	e28f      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009056:	4b48      	ldr	r3, [pc, #288]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009062:	d107      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009064:	f107 030c 	add.w	r3, r7, #12
 8009068:	4618      	mov	r0, r3
 800906a:	f000 fbfb 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009072:	e280      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009074:	2300      	movs	r3, #0
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009078:	e27d      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800907a:	4b3f      	ldr	r3, [pc, #252]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800907c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009082:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009084:	4b3c      	ldr	r3, [pc, #240]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b04      	cmp	r3, #4
 800908e:	d10c      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	2b00      	cmp	r3, #0
 8009094:	d109      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009096:	4b38      	ldr	r3, [pc, #224]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	4a36      	ldr	r2, [pc, #216]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a8:	e01e      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090aa:	4b33      	ldr	r3, [pc, #204]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b6:	d106      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80090b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090be:	d102      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80090c0:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c4:	e010      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090c6:	4b2c      	ldr	r3, [pc, #176]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090d2:	d106      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090da:	d102      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80090dc:	4b29      	ldr	r3, [pc, #164]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e0:	e002      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80090e6:	e246      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090e8:	e245      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090ea:	4b27      	ldr	r3, [pc, #156]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ee:	e242      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e23f      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fc:	f040 80a8 	bne.w	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009100:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009108:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009110:	d060      	beq.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009118:	f200 8097 	bhi.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009122:	f000 808f 	beq.w	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800912c:	f200 808d 	bhi.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009136:	d03b      	beq.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800913e:	f200 8084 	bhi.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800914e:	d01d      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009150:	e07b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800915e:	d107      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fcd1 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800916e:	e202      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009174:	e1ff      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009176:	bf00      	nop
 8009178:	58024400 	.word	0x58024400
 800917c:	03d09000 	.word	0x03d09000
 8009180:	003d0900 	.word	0x003d0900
 8009184:	00f42400 	.word	0x00f42400
 8009188:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800918c:	4ba3      	ldr	r3, [pc, #652]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009198:	d107      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800919a:	f107 0318 	add.w	r3, r7, #24
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fa0c 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091a8:	e1e5      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ae:	e1e2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091b0:	4b9a      	ldr	r3, [pc, #616]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091bc:	d107      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 030c 	add.w	r3, r7, #12
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fb4e 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091cc:	e1d3      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d2:	e1d0      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091d4:	4b91      	ldr	r3, [pc, #580]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091de:	4b8f      	ldr	r3, [pc, #572]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d10c      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091f0:	4b8a      	ldr	r3, [pc, #552]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	4a89      	ldr	r2, [pc, #548]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009202:	e01e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009204:	4b85      	ldr	r3, [pc, #532]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009210:	d106      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800921a:	4b82      	ldr	r3, [pc, #520]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921e:	e010      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009220:	4b7e      	ldr	r3, [pc, #504]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009236:	4b7c      	ldr	r3, [pc, #496]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009240:	e199      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009242:	e198      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009244:	4b79      	ldr	r3, [pc, #484]	; (800942c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009248:	e195      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800924e:	e192      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009256:	d173      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009258:	4b70      	ldr	r3, [pc, #448]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800925a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009260:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009268:	d02f      	beq.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009270:	d863      	bhi.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	2b00      	cmp	r3, #0
 8009276:	d004      	beq.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800927e:	d012      	beq.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009280:	e05b      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009282:	4b66      	ldr	r3, [pc, #408]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800928a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800928e:	d107      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009290:	f107 0318 	add.w	r3, r7, #24
 8009294:	4618      	mov	r0, r3
 8009296:	f000 f991 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800929e:	e16a      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092a4:	e167      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092a6:	4b5d      	ldr	r3, [pc, #372]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092b2:	d107      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092b4:	f107 030c 	add.w	r3, r7, #12
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fad3 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092c2:	e158      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c8:	e155      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092ca:	4b54      	ldr	r3, [pc, #336]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092d4:	4b51      	ldr	r3, [pc, #324]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d10c      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092e6:	4b4d      	ldr	r3, [pc, #308]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	08db      	lsrs	r3, r3, #3
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	4a4b      	ldr	r2, [pc, #300]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f8:	e01e      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092fa:	4b48      	ldr	r3, [pc, #288]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009306:	d106      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800930e:	d102      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009310:	4b44      	ldr	r3, [pc, #272]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009314:	e010      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009316:	4b41      	ldr	r3, [pc, #260]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009322:	d106      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932a:	d102      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800932c:	4b3e      	ldr	r3, [pc, #248]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009330:	e002      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009336:	e11e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009338:	e11d      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800933e:	e11a      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009346:	d133      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009348:	4b34      	ldr	r3, [pc, #208]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800934a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009350:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935e:	d012      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009360:	e023      	b.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936e:	d107      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fbc9 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800937e:	e0fa      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009384:	e0f7      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009386:	4b25      	ldr	r3, [pc, #148]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009392:	d107      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009394:	f107 0318 	add.w	r3, r7, #24
 8009398:	4618      	mov	r0, r3
 800939a:	f000 f90f 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093a2:	e0e8      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a8:	e0e5      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ae:	e0e2      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093b6:	f040 808f 	bne.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80093ba:	4b18      	ldr	r3, [pc, #96]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80093c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ca:	d075      	beq.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093d2:	d87e      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093da:	d060      	beq.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e2:	d876      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ea:	d045      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093f2:	d86e      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093fa:	d02b      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009402:	d866      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009410:	d00e      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009412:	e05e      	b.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009414:	f000 f8bc 	bl	8009590 <HAL_RCCEx_GetD3PCLK1Freq>
 8009418:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800941a:	e0ac      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800941c:	58024400 	.word	0x58024400
 8009420:	03d09000 	.word	0x03d09000
 8009424:	003d0900 	.word	0x003d0900
 8009428:	00f42400 	.word	0x00f42400
 800942c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009430:	4b53      	ldr	r3, [pc, #332]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800943c:	d107      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943e:	f107 0318 	add.w	r3, r7, #24
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f8ba 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800944c:	e093      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009452:	e090      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009454:	4b4a      	ldr	r3, [pc, #296]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800945c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009460:	d107      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009462:	f107 030c 	add.w	r3, r7, #12
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f9fc 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009470:	e081      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009476:	e07e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009478:	4b41      	ldr	r3, [pc, #260]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b04      	cmp	r3, #4
 8009482:	d109      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009484:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	08db      	lsrs	r3, r3, #3
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	4a3d      	ldr	r2, [pc, #244]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009490:	fa22 f303 	lsr.w	r3, r2, r3
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009496:	e06e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800949c:	e06b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800949e:	4b38      	ldr	r3, [pc, #224]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094aa:	d102      	bne.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80094ac:	4b36      	ldr	r3, [pc, #216]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094b0:	e061      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b6:	e05e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094b8:	4b31      	ldr	r3, [pc, #196]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094c4:	d102      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80094c6:	4b31      	ldr	r3, [pc, #196]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094ca:	e054      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d0:	e051      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d6:	e04e      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094de:	d148      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80094e0:	4b27      	ldr	r3, [pc, #156]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f0:	d02a      	beq.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f8:	d838      	bhi.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009506:	d00d      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009508:	e030      	b.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800950a:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009518:	4b1c      	ldr	r3, [pc, #112]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800951c:	e02b      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009522:	e028      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009524:	4b16      	ldr	r3, [pc, #88]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009530:	d107      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fae8 	bl	8009b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009540:	e019      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009546:	e016      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009554:	d107      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009556:	f107 0318 	add.w	r3, r7, #24
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f82e 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009564:	e007      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800956a:	e004      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009570:	e001      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009578:	4618      	mov	r0, r3
 800957a:	3740      	adds	r7, #64	; 0x40
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	58024400 	.word	0x58024400
 8009584:	03d09000 	.word	0x03d09000
 8009588:	003d0900 	.word	0x003d0900
 800958c:	00f42400 	.word	0x00f42400

08009590 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009594:	f7fe fb4c 	bl	8007c30 <HAL_RCC_GetHCLKFreq>
 8009598:	4602      	mov	r2, r0
 800959a:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	091b      	lsrs	r3, r3, #4
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	4904      	ldr	r1, [pc, #16]	; (80095b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095a6:	5ccb      	ldrb	r3, [r1, r3]
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	58024400 	.word	0x58024400
 80095b8:	08015ce0 	.word	0x08015ce0

080095bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095bc:	b480      	push	{r7}
 80095be:	b089      	sub	sp, #36	; 0x24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095c4:	4ba1      	ldr	r3, [pc, #644]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095ce:	4b9f      	ldr	r3, [pc, #636]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	0b1b      	lsrs	r3, r3, #12
 80095d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095da:	4b9c      	ldr	r3, [pc, #624]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095de:	091b      	lsrs	r3, r3, #4
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095e6:	4b99      	ldr	r3, [pc, #612]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	08db      	lsrs	r3, r3, #3
 80095ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	fb02 f303 	mul.w	r3, r2, r3
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 8111 	beq.w	800982c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b02      	cmp	r3, #2
 800960e:	f000 8083 	beq.w	8009718 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b02      	cmp	r3, #2
 8009616:	f200 80a1 	bhi.w	800975c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d056      	beq.n	80096d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009626:	e099      	b.n	800975c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009628:	4b88      	ldr	r3, [pc, #544]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d02d      	beq.n	8009690 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009634:	4b85      	ldr	r3, [pc, #532]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	4a84      	ldr	r2, [pc, #528]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
 8009644:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	ee07 3a90 	vmov	s15, r3
 800964c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b7b      	ldr	r3, [pc, #492]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009672:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800968e:	e087      	b.n	80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800969e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a2:	4b6a      	ldr	r3, [pc, #424]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d2:	e065      	b.n	80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e6:	4b59      	ldr	r3, [pc, #356]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009716:	e043      	b.n	80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009722:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972a:	4b48      	ldr	r3, [pc, #288]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973a:	ed97 6a03 	vldr	s12, [r7, #12]
 800973e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800974e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800975a:	e021      	b.n	80097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009766:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800976a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800976e:	4b37      	ldr	r3, [pc, #220]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009782:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800978e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800979e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097a0:	4b2a      	ldr	r3, [pc, #168]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a4:	0a5b      	lsrs	r3, r3, #9
 80097a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80097be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c6:	ee17 2a90 	vmov	r2, s15
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097ce:	4b1f      	ldr	r3, [pc, #124]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	0c1b      	lsrs	r3, r3, #16
 80097d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f4:	ee17 2a90 	vmov	r2, s15
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80097fc:	4b13      	ldr	r3, [pc, #76]	; (800984c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	0e1b      	lsrs	r3, r3, #24
 8009802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009816:	edd7 6a07 	vldr	s13, [r7, #28]
 800981a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800981e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009822:	ee17 2a90 	vmov	r2, s15
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800982a:	e008      	b.n	800983e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	609a      	str	r2, [r3, #8]
}
 800983e:	bf00      	nop
 8009840:	3724      	adds	r7, #36	; 0x24
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	58024400 	.word	0x58024400
 8009850:	03d09000 	.word	0x03d09000
 8009854:	46000000 	.word	0x46000000
 8009858:	4c742400 	.word	0x4c742400
 800985c:	4a742400 	.word	0x4a742400
 8009860:	4b742400 	.word	0x4b742400

08009864 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009864:	b480      	push	{r7}
 8009866:	b089      	sub	sp, #36	; 0x24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800986c:	4ba1      	ldr	r3, [pc, #644]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	f003 0303 	and.w	r3, r3, #3
 8009874:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009876:	4b9f      	ldr	r3, [pc, #636]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	0d1b      	lsrs	r3, r3, #20
 800987c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009880:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009882:	4b9c      	ldr	r3, [pc, #624]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800988e:	4b99      	ldr	r3, [pc, #612]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009892:	08db      	lsrs	r3, r3, #3
 8009894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	fb02 f303 	mul.w	r3, r2, r3
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8111 	beq.w	8009ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	f000 8083 	beq.w	80099c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	f200 80a1 	bhi.w	8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d056      	beq.n	800997c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098ce:	e099      	b.n	8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d0:	4b88      	ldr	r3, [pc, #544]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d02d      	beq.n	8009938 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098dc:	4b85      	ldr	r3, [pc, #532]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	08db      	lsrs	r3, r3, #3
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	4a84      	ldr	r2, [pc, #528]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	ee07 3a90 	vmov	s15, r3
 80098f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009906:	4b7b      	ldr	r3, [pc, #492]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009916:	ed97 6a03 	vldr	s12, [r7, #12]
 800991a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800991e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009932:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009936:	e087      	b.n	8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009942:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994a:	4b6a      	ldr	r3, [pc, #424]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800994c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995a:	ed97 6a03 	vldr	s12, [r7, #12]
 800995e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997a:	e065      	b.n	8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009986:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800998a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998e:	4b59      	ldr	r3, [pc, #356]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999e:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099be:	e043      	b.n	8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d2:	4b48      	ldr	r3, [pc, #288]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a02:	e021      	b.n	8009a48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a16:	4b37      	ldr	r3, [pc, #220]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a48:	4b2a      	ldr	r3, [pc, #168]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	0a5b      	lsrs	r3, r3, #9
 8009a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a6e:	ee17 2a90 	vmov	r2, s15
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a76:	4b1f      	ldr	r3, [pc, #124]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	0c1b      	lsrs	r3, r3, #16
 8009a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9c:	ee17 2a90 	vmov	r2, s15
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009aa4:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	0e1b      	lsrs	r3, r3, #24
 8009aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aca:	ee17 2a90 	vmov	r2, s15
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	609a      	str	r2, [r3, #8]
}
 8009ae6:	bf00      	nop
 8009ae8:	3724      	adds	r7, #36	; 0x24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	58024400 	.word	0x58024400
 8009af8:	03d09000 	.word	0x03d09000
 8009afc:	46000000 	.word	0x46000000
 8009b00:	4c742400 	.word	0x4c742400
 8009b04:	4a742400 	.word	0x4a742400
 8009b08:	4b742400 	.word	0x4b742400

08009b0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b089      	sub	sp, #36	; 0x24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b14:	4ba0      	ldr	r3, [pc, #640]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	f003 0303 	and.w	r3, r3, #3
 8009b1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009b1e:	4b9e      	ldr	r3, [pc, #632]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	091b      	lsrs	r3, r3, #4
 8009b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b2a:	4b9b      	ldr	r3, [pc, #620]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b34:	4b98      	ldr	r3, [pc, #608]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b38:	08db      	lsrs	r3, r3, #3
 8009b3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	fb02 f303 	mul.w	r3, r2, r3
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 8111 	beq.w	8009d7a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	f000 8083 	beq.w	8009c66 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	f200 80a1 	bhi.w	8009caa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d056      	beq.n	8009c22 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b74:	e099      	b.n	8009caa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b76:	4b88      	ldr	r3, [pc, #544]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d02d      	beq.n	8009bde <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b82:	4b85      	ldr	r3, [pc, #532]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	08db      	lsrs	r3, r3, #3
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	4a83      	ldr	r2, [pc, #524]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b92:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	ee07 3a90 	vmov	s15, r3
 8009ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bac:	4b7a      	ldr	r3, [pc, #488]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb4:	ee07 3a90 	vmov	s15, r3
 8009bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bdc:	e087      	b.n	8009cee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	ee07 3a90 	vmov	s15, r3
 8009be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf0:	4b69      	ldr	r3, [pc, #420]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf8:	ee07 3a90 	vmov	s15, r3
 8009bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c04:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c20:	e065      	b.n	8009cee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009da8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c34:	4b58      	ldr	r3, [pc, #352]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c48:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c64:	e043      	b.n	8009cee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c70:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009dac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c78:	4b47      	ldr	r3, [pc, #284]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	ee07 3a90 	vmov	s15, r3
 8009c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c8c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ca8:	e021      	b.n	8009cee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	ee07 3a90 	vmov	s15, r3
 8009cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cbc:	4b36      	ldr	r3, [pc, #216]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc4:	ee07 3a90 	vmov	s15, r3
 8009cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cd0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009cee:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf2:	0a5b      	lsrs	r3, r3, #9
 8009cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf8:	ee07 3a90 	vmov	s15, r3
 8009cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d14:	ee17 2a90 	vmov	r2, s15
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009d1c:	4b1e      	ldr	r3, [pc, #120]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d42:	ee17 2a90 	vmov	r2, s15
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d4a:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4e:	0e1b      	lsrs	r3, r3, #24
 8009d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d70:	ee17 2a90 	vmov	r2, s15
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d78:	e008      	b.n	8009d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	609a      	str	r2, [r3, #8]
}
 8009d8c:	bf00      	nop
 8009d8e:	3724      	adds	r7, #36	; 0x24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	03d09000 	.word	0x03d09000
 8009da0:	46000000 	.word	0x46000000
 8009da4:	4c742400 	.word	0x4c742400
 8009da8:	4a742400 	.word	0x4a742400
 8009dac:	4b742400 	.word	0x4b742400

08009db0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dbe:	4b53      	ldr	r3, [pc, #332]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d101      	bne.n	8009dce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e099      	b.n	8009f02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dce:	4b4f      	ldr	r3, [pc, #316]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a4e      	ldr	r2, [pc, #312]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009dd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dda:	f7f7 ffcb 	bl	8001d74 <HAL_GetTick>
 8009dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009de0:	e008      	b.n	8009df4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009de2:	f7f7 ffc7 	bl	8001d74 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d901      	bls.n	8009df4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e086      	b.n	8009f02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009df4:	4b45      	ldr	r3, [pc, #276]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1f0      	bne.n	8009de2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e00:	4b42      	ldr	r3, [pc, #264]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	031b      	lsls	r3, r3, #12
 8009e0e:	493f      	ldr	r1, [pc, #252]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	628b      	str	r3, [r1, #40]	; 0x28
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	025b      	lsls	r3, r3, #9
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	041b      	lsls	r3, r3, #16
 8009e32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	061b      	lsls	r3, r3, #24
 8009e40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e44:	4931      	ldr	r1, [pc, #196]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e4a:	4b30      	ldr	r3, [pc, #192]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	492d      	ldr	r1, [pc, #180]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e5c:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	f023 0220 	bic.w	r2, r3, #32
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	4928      	ldr	r1, [pc, #160]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e6e:	4b27      	ldr	r3, [pc, #156]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e72:	4a26      	ldr	r2, [pc, #152]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e74:	f023 0310 	bic.w	r3, r3, #16
 8009e78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7e:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <RCCEx_PLL2_Config+0x160>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	69d2      	ldr	r2, [r2, #28]
 8009e86:	00d2      	lsls	r2, r2, #3
 8009e88:	4920      	ldr	r1, [pc, #128]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e8e:	4b1f      	ldr	r3, [pc, #124]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	4a1e      	ldr	r2, [pc, #120]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009e94:	f043 0310 	orr.w	r3, r3, #16
 8009e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d106      	bne.n	8009eae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ea0:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	4a19      	ldr	r2, [pc, #100]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eac:	e00f      	b.n	8009ece <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d106      	bne.n	8009ec2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009eb4:	4b15      	ldr	r3, [pc, #84]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	4a14      	ldr	r2, [pc, #80]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ec0:	e005      	b.n	8009ece <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	4a11      	ldr	r2, [pc, #68]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ece:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a0e      	ldr	r2, [pc, #56]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eda:	f7f7 ff4b 	bl	8001d74 <HAL_GetTick>
 8009ede:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ee0:	e008      	b.n	8009ef4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ee2:	f7f7 ff47 	bl	8001d74 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d901      	bls.n	8009ef4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e006      	b.n	8009f02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <RCCEx_PLL2_Config+0x15c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0f0      	beq.n	8009ee2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	ffff0007 	.word	0xffff0007

08009f14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f22:	4b53      	ldr	r3, [pc, #332]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d101      	bne.n	8009f32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e099      	b.n	800a066 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f32:	4b4f      	ldr	r3, [pc, #316]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a4e      	ldr	r2, [pc, #312]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f3e:	f7f7 ff19 	bl	8001d74 <HAL_GetTick>
 8009f42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f44:	e008      	b.n	8009f58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f46:	f7f7 ff15 	bl	8001d74 <HAL_GetTick>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d901      	bls.n	8009f58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e086      	b.n	800a066 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f58:	4b45      	ldr	r3, [pc, #276]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1f0      	bne.n	8009f46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f64:	4b42      	ldr	r3, [pc, #264]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	051b      	lsls	r3, r3, #20
 8009f72:	493f      	ldr	r1, [pc, #252]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	628b      	str	r3, [r1, #40]	; 0x28
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	3b01      	subs	r3, #1
 8009f88:	025b      	lsls	r3, r3, #9
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	431a      	orrs	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	041b      	lsls	r3, r3, #16
 8009f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	061b      	lsls	r3, r3, #24
 8009fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fa8:	4931      	ldr	r1, [pc, #196]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fae:	4b30      	ldr	r3, [pc, #192]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	492d      	ldr	r1, [pc, #180]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fc0:	4b2b      	ldr	r3, [pc, #172]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	4928      	ldr	r1, [pc, #160]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fd2:	4b27      	ldr	r3, [pc, #156]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	4a26      	ldr	r2, [pc, #152]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fde:	4b24      	ldr	r3, [pc, #144]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fe2:	4b24      	ldr	r3, [pc, #144]	; (800a074 <RCCEx_PLL3_Config+0x160>)
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	69d2      	ldr	r2, [r2, #28]
 8009fea:	00d2      	lsls	r2, r2, #3
 8009fec:	4920      	ldr	r1, [pc, #128]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ff2:	4b1f      	ldr	r3, [pc, #124]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	4a1e      	ldr	r2, [pc, #120]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 8009ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d106      	bne.n	800a012 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a004:	4b1a      	ldr	r3, [pc, #104]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	4a19      	ldr	r2, [pc, #100]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a00e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a010:	e00f      	b.n	800a032 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d106      	bne.n	800a026 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a018:	4b15      	ldr	r3, [pc, #84]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	4a14      	ldr	r2, [pc, #80]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a01e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a022:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a024:	e005      	b.n	800a032 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a11      	ldr	r2, [pc, #68]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a02c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a032:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a0e      	ldr	r2, [pc, #56]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a03c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a03e:	f7f7 fe99 	bl	8001d74 <HAL_GetTick>
 800a042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a044:	e008      	b.n	800a058 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a046:	f7f7 fe95 	bl	8001d74 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e006      	b.n	800a066 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <RCCEx_PLL3_Config+0x15c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0f0      	beq.n	800a046 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a064:	7bfb      	ldrb	r3, [r7, #15]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	58024400 	.word	0x58024400
 800a074:	ffff0007 	.word	0xffff0007

0800a078 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e075      	b.n	800a176 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d105      	bne.n	800a0a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7f7 f8bf 	bl	8001220 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2203      	movs	r2, #3
 800a0a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f868 	bl	800a180 <HAL_SD_InitCard>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e05d      	b.n	800a176 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a0ba:	f107 0308 	add.w	r3, r7, #8
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fda5 	bl	800ac10 <HAL_SD_GetCardStatus>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e052      	b.n	800a176 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a0d0:	7e3b      	ldrb	r3, [r7, #24]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a0d6:	7e7b      	ldrb	r3, [r7, #25]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d10a      	bne.n	800a0fa <HAL_SD_Init+0x82>
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d102      	bne.n	800a0f0 <HAL_SD_Init+0x78>
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0f6:	659a      	str	r2, [r3, #88]	; 0x58
 800a0f8:	e00b      	b.n	800a112 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d104      	bne.n	800a10c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a108:	659a      	str	r2, [r3, #88]	; 0x58
 800a10a:	e002      	b.n	800a112 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fe5b 	bl	800add4 <HAL_SD_ConfigWideBusOperation>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e026      	b.n	800a176 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a128:	f7f7 fe24 	bl	8001d74 <HAL_GetTick>
 800a12c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a12e:	e011      	b.n	800a154 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a130:	f7f7 fe20 	bl	8001d74 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d109      	bne.n	800a154 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a146:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e010      	b.n	800a176 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 ff4d 	bl	800aff4 <HAL_SD_GetCardState>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d1e7      	bne.n	800a130 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3728      	adds	r7, #40	; 0x28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a180:	b590      	push	{r4, r7, lr}
 800a182:	b08d      	sub	sp, #52	; 0x34
 800a184:	af02      	add	r7, sp, #8
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a194:	2300      	movs	r3, #0
 800a196:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a19c:	f7fe fd26 	bl	8008bec <HAL_RCCEx_GetPeriphCLKFreq>
 800a1a0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d109      	bne.n	800a1bc <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a1b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e06a      	b.n	800a292 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	4a36      	ldr	r2, [pc, #216]	; (800a29c <HAL_SD_InitCard+0x11c>)
 800a1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c6:	091b      	lsrs	r3, r3, #4
 800a1c8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681c      	ldr	r4, [r3, #0]
 800a1ce:	466a      	mov	r2, sp
 800a1d0:	f107 0318 	add.w	r3, r7, #24
 800a1d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1d8:	e882 0003 	stmia.w	r2, {r0, r1}
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f003 fdca 	bl	800dd7c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f003 fe0d 	bl	800de0c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a1fe:	4a28      	ldr	r2, [pc, #160]	; (800a2a0 <HAL_SD_InitCard+0x120>)
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	fbb2 f3f3 	udiv	r3, r2, r3
 800a206:	3301      	adds	r3, #1
 800a208:	4618      	mov	r0, r3
 800a20a:	f7f7 fdbf 	bl	8001d8c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 ffcc 	bl	800b1ac <SD_PowerON>
 800a214:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e02e      	b.n	800a292 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fefd 	bl	800b034 <SD_InitCard>
 800a23a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00b      	beq.n	800a25a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e01b      	b.n	800a292 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a262:	4618      	mov	r0, r3
 800a264:	f003 fe68 	bl	800df38 <SDMMC_CmdBlockLength>
 800a268:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00f      	beq.n	800a290 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a0b      	ldr	r2, [pc, #44]	; (800a2a4 <HAL_SD_InitCard+0x124>)
 800a276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	431a      	orrs	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	372c      	adds	r7, #44	; 0x2c
 800a296:	46bd      	mov	sp, r7
 800a298:	bd90      	pop	{r4, r7, pc}
 800a29a:	bf00      	nop
 800a29c:	014f8b59 	.word	0x014f8b59
 800a2a0:	00012110 	.word	0x00012110
 800a2a4:	1fe00fff 	.word	0x1fe00fff

0800a2a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08c      	sub	sp, #48	; 0x30
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d107      	bne.n	800a2d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e08d      	b.n	800a3ec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	f040 8086 	bne.w	800a3ea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	441a      	add	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d907      	bls.n	800a302 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e074      	b.n	800a3ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2203      	movs	r2, #3
 800a306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2200      	movs	r2, #0
 800a310:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	025a      	lsls	r2, r3, #9
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a324:	2b01      	cmp	r3, #1
 800a326:	d002      	beq.n	800a32e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	025b      	lsls	r3, r3, #9
 800a32c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a32e:	f04f 33ff 	mov.w	r3, #4294967295
 800a332:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	025b      	lsls	r3, r3, #9
 800a338:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a33a:	2390      	movs	r3, #144	; 0x90
 800a33c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a33e:	2302      	movs	r3, #2
 800a340:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a342:	2300      	movs	r3, #0
 800a344:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a346:	2300      	movs	r3, #0
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f107 0210 	add.w	r2, r7, #16
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f003 fdc3 	bl	800dee0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68da      	ldr	r2, [r3, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a368:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2201      	movs	r2, #1
 800a378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d90a      	bls.n	800a396 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2282      	movs	r2, #130	; 0x82
 800a384:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a38c:	4618      	mov	r0, r3
 800a38e:	f003 fe19 	bl	800dfc4 <SDMMC_CmdReadMultiBlock>
 800a392:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a394:	e009      	b.n	800a3aa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2281      	movs	r2, #129	; 0x81
 800a39a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f003 fdeb 	bl	800df7e <SDMMC_CmdReadSingleBlock>
 800a3a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d012      	beq.n	800a3d6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a0f      	ldr	r2, [pc, #60]	; (800a3f4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a3b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e00a      	b.n	800a3ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a3e4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e000      	b.n	800a3ec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a3ea:	2302      	movs	r3, #2
  }
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3730      	adds	r7, #48	; 0x30
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	1fe00fff 	.word	0x1fe00fff

0800a3f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08c      	sub	sp, #48	; 0x30
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d107      	bne.n	800a420 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a414:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e08d      	b.n	800a53c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b01      	cmp	r3, #1
 800a42a:	f040 8086 	bne.w	800a53a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	441a      	add	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43e:	429a      	cmp	r2, r3
 800a440:	d907      	bls.n	800a452 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a446:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e074      	b.n	800a53c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2203      	movs	r2, #3
 800a456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2200      	movs	r2, #0
 800a460:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	025a      	lsls	r2, r3, #9
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	2b01      	cmp	r3, #1
 800a476:	d002      	beq.n	800a47e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	025b      	lsls	r3, r3, #9
 800a47c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	025b      	lsls	r3, r3, #9
 800a488:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a48a:	2390      	movs	r3, #144	; 0x90
 800a48c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a48e:	2300      	movs	r3, #0
 800a490:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a492:	2300      	movs	r3, #0
 800a494:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a496:	2300      	movs	r3, #0
 800a498:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f107 0210 	add.w	r2, r7, #16
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f003 fd1b 	bl	800dee0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4b8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d90a      	bls.n	800a4e6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	22a0      	movs	r2, #160	; 0xa0
 800a4d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f003 fdb7 	bl	800e050 <SDMMC_CmdWriteMultiBlock>
 800a4e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a4e4:	e009      	b.n	800a4fa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2290      	movs	r2, #144	; 0x90
 800a4ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f003 fd89 	bl	800e00a <SDMMC_CmdWriteSingleBlock>
 800a4f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d012      	beq.n	800a526 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a0f      	ldr	r2, [pc, #60]	; (800a544 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	431a      	orrs	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e00a      	b.n	800a53c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a534:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	e000      	b.n	800a53c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a53a:	2302      	movs	r3, #2
  }
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3730      	adds	r7, #48	; 0x30
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	1fe00fff 	.word	0x1fe00fff

0800a548 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d008      	beq.n	800a576 <HAL_SD_IRQHandler+0x2e>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f003 0308 	and.w	r3, r3, #8
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 f904 	bl	800b77c <SD_Read_IT>
 800a574:	e19a      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 80ac 	beq.w	800a6de <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a58e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	4b9d      	ldr	r3, [pc, #628]	; (800a810 <HAL_SD_IRQHandler+0x2c8>)
 800a59c:	400b      	ands	r3, r1
 800a59e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5ae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f003 0308 	and.w	r3, r3, #8
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d038      	beq.n	800a63c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f003 0302 	and.w	r3, r3, #2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d104      	bne.n	800a5de <HAL_SD_IRQHandler+0x96>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 0320 	and.w	r3, r3, #32
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d011      	beq.n	800a602 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f003 fd58 	bl	800e098 <SDMMC_CmdStopTransfer>
 800a5e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d008      	beq.n	800a602 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f959 	bl	800a8b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a83      	ldr	r2, [pc, #524]	; (800a814 <HAL_SD_IRQHandler+0x2cc>)
 800a608:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d104      	bne.n	800a62c <HAL_SD_IRQHandler+0xe4>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f004 fa0b 	bl	800ea48 <HAL_SD_RxCpltCallback>
 800a632:	e13b      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f004 f9fd 	bl	800ea34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a63a:	e137      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 8132 	beq.w	800a8ac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2200      	movs	r2, #0
 800a64e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2200      	movs	r2, #0
 800a656:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2200      	movs	r2, #0
 800a65e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d104      	bne.n	800a674 <HAL_SD_IRQHandler+0x12c>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b00      	cmp	r3, #0
 800a672:	d011      	beq.n	800a698 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4618      	mov	r0, r3
 800a67a:	f003 fd0d 	bl	800e098 <SDMMC_CmdStopTransfer>
 800a67e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d008      	beq.n	800a698 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f90e 	bl	800a8b4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f003 0310 	and.w	r3, r3, #16
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d104      	bne.n	800a6ba <HAL_SD_IRQHandler+0x172>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f003 0320 	and.w	r3, r3, #32
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f004 f9ba 	bl	800ea34 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d105      	bne.n	800a6d6 <HAL_SD_IRQHandler+0x18e>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80eb 	beq.w	800a8ac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f004 f9b6 	bl	800ea48 <HAL_SD_RxCpltCallback>
}
 800a6dc:	e0e6      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d008      	beq.n	800a6fe <HAL_SD_IRQHandler+0x1b6>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f003 0308 	and.w	r3, r3, #8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 f886 	bl	800b808 <SD_Write_IT>
 800a6fc:	e0d6      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a704:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 80a2 	beq.w	800a852 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a720:	f043 0202 	orr.w	r2, r3, #2
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72e:	f003 0308 	and.w	r3, r3, #8
 800a732:	2b00      	cmp	r3, #0
 800a734:	d005      	beq.n	800a742 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	f043 0208 	orr.w	r2, r3, #8
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a748:	f003 0320 	and.w	r3, r3, #32
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a754:	f043 0220 	orr.w	r2, r3, #32
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a762:	f003 0310 	and.w	r3, r3, #16
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76e:	f043 0210 	orr.w	r2, r3, #16
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a26      	ldr	r2, [pc, #152]	; (800a814 <HAL_SD_IRQHandler+0x2cc>)
 800a77c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a78c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a79c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7bc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f003 fc68 	bl	800e098 <SDMMC_CmdStopTransfer>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7e2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00f      	beq.n	800a818 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f854 	bl	800a8b4 <HAL_SD_ErrorCallback>
}
 800a80c:	e04e      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
 800a80e:	bf00      	nop
 800a810:	ffff3ec5 	.word	0xffff3ec5
 800a814:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d044      	beq.n	800a8ac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a826:	2b00      	cmp	r3, #0
 800a828:	d040      	beq.n	800a8ac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a838:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2200      	movs	r2, #0
 800a840:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f832 	bl	800a8b4 <HAL_SD_ErrorCallback>
}
 800a850:	e02c      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d025      	beq.n	800a8ac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a868:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10c      	bne.n	800a892 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f828 	bl	800b8d8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a888:	e010      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f001 f810 	bl	800b8b0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a890:	e00c      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 f811 	bl	800b8c4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a8a2:	e003      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fff9 	bl	800b89c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a8aa:	e7ff      	b.n	800a8ac <HAL_SD_IRQHandler+0x364>
 800a8ac:	bf00      	nop
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d6:	0f9b      	lsrs	r3, r3, #30
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8e2:	0e9b      	lsrs	r3, r3, #26
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 030f 	and.w	r3, r3, #15
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8f4:	0e1b      	lsrs	r3, r3, #24
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 0303 	and.w	r3, r3, #3
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a906:	0c1b      	lsrs	r3, r3, #16
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a912:	0a1b      	lsrs	r3, r3, #8
 800a914:	b2da      	uxtb	r2, r3
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a928:	0d1b      	lsrs	r3, r3, #20
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a934:	0c1b      	lsrs	r3, r3, #16
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a946:	0bdb      	lsrs	r3, r3, #15
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a958:	0b9b      	lsrs	r3, r3, #14
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	b2da      	uxtb	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a96a:	0b5b      	lsrs	r3, r3, #13
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a97c:	0b1b      	lsrs	r3, r3, #12
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	b2da      	uxtb	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2200      	movs	r2, #0
 800a98e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a994:	2b00      	cmp	r3, #0
 800a996:	d163      	bne.n	800aa60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a99c:	009a      	lsls	r2, r3, #2
 800a99e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a9a8:	0f92      	lsrs	r2, r2, #30
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9b4:	0edb      	lsrs	r3, r3, #27
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	f003 0307 	and.w	r3, r3, #7
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c6:	0e1b      	lsrs	r3, r3, #24
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d8:	0d5b      	lsrs	r3, r3, #21
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0307 	and.w	r3, r3, #7
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ea:	0c9b      	lsrs	r3, r3, #18
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9fc:	0bdb      	lsrs	r3, r3, #15
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f003 0307 	and.w	r3, r3, #7
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	7e1b      	ldrb	r3, [r3, #24]
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	3302      	adds	r3, #2
 800aa20:	2201      	movs	r2, #1
 800aa22:	fa02 f303 	lsl.w	r3, r2, r3
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa2a:	fb02 f203 	mul.w	r2, r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	7a1b      	ldrb	r3, [r3, #8]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	f003 030f 	and.w	r3, r3, #15
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	409a      	lsls	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aa4c:	0a52      	lsrs	r2, r2, #9
 800aa4e:	fb02 f203 	mul.w	r2, r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa5c:	655a      	str	r2, [r3, #84]	; 0x54
 800aa5e:	e031      	b.n	800aac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d11d      	bne.n	800aaa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa6c:	041b      	lsls	r3, r3, #16
 800aa6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa76:	0c1b      	lsrs	r3, r3, #16
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	3301      	adds	r3, #1
 800aa84:	029a      	lsls	r2, r3, #10
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa98:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	655a      	str	r2, [r3, #84]	; 0x54
 800aaa2:	e00f      	b.n	800aac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a58      	ldr	r2, [pc, #352]	; (800ac0c <HAL_SD_GetCardCSD+0x344>)
 800aaaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e09d      	b.n	800ac00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac8:	0b9b      	lsrs	r3, r3, #14
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aada:	09db      	lsrs	r3, r3, #7
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafc:	0fdb      	lsrs	r3, r3, #31
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab08:	0f5b      	lsrs	r3, r3, #29
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab1a:	0e9b      	lsrs	r3, r3, #26
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab2c:	0d9b      	lsrs	r3, r3, #22
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab3e:	0d5b      	lsrs	r3, r3, #21
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5a:	0c1b      	lsrs	r3, r3, #16
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab6e:	0bdb      	lsrs	r3, r3, #15
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab82:	0b9b      	lsrs	r3, r3, #14
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab96:	0b5b      	lsrs	r3, r3, #13
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abaa:	0b1b      	lsrs	r3, r3, #12
 800abac:	b2db      	uxtb	r3, r3
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abbe:	0a9b      	lsrs	r3, r3, #10
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd2:	0a1b      	lsrs	r3, r3, #8
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abe6:	085b      	lsrs	r3, r3, #1
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	1fe00fff 	.word	0x1fe00fff

0800ac10 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b094      	sub	sp, #80	; 0x50
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ac20:	f107 0308 	add.w	r3, r7, #8
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fb4a 	bl	800b2c0 <SD_SendSDStatus>
 800ac2c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d011      	beq.n	800ac58 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a4f      	ldr	r2, [pc, #316]	; (800ad78 <HAL_SD_GetCardStatus+0x168>)
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac42:	431a      	orrs	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac56:	e070      	b.n	800ad3a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	099b      	lsrs	r3, r3, #6
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	f003 0303 	and.w	r3, r3, #3
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	0a1b      	lsrs	r3, r3, #8
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	0e1b      	lsrs	r3, r3, #24
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	061a      	lsls	r2, r3, #24
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	021b      	lsls	r3, r3, #8
 800ac9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac9e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	0a1b      	lsrs	r3, r3, #8
 800aca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aca8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	0e1b      	lsrs	r3, r3, #24
 800acae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	0d1b      	lsrs	r3, r3, #20
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f003 030f 	and.w	r3, r3, #15
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	b29b      	uxth	r3, r3
 800acdc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b29a      	uxth	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	0a9b      	lsrs	r3, r3, #10
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	0a1b      	lsrs	r3, r3, #8
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	091b      	lsrs	r3, r3, #4
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 030f 	and.w	r3, r3, #15
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	0e1b      	lsrs	r3, r3, #24
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad42:	4618      	mov	r0, r3
 800ad44:	f003 f8f8 	bl	800df38 <SDMMC_CmdBlockLength>
 800ad48:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00d      	beq.n	800ad6c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a08      	ldr	r2, [pc, #32]	; (800ad78 <HAL_SD_GetCardStatus+0x168>)
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad5c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ad6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3750      	adds	r7, #80	; 0x50
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	1fe00fff 	.word	0x1fe00fff

0800ad7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800add4:	b590      	push	{r4, r7, lr}
 800add6:	b08d      	sub	sp, #52	; 0x34
 800add8:	af02      	add	r7, sp, #8
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2203      	movs	r2, #3
 800ade8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d02e      	beq.n	800ae52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adfa:	d106      	bne.n	800ae0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	635a      	str	r2, [r3, #52]	; 0x34
 800ae08:	e029      	b.n	800ae5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae10:	d10a      	bne.n	800ae28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fb4c 	bl	800b4b0 <SD_WideBus_Enable>
 800ae18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	431a      	orrs	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	635a      	str	r2, [r3, #52]	; 0x34
 800ae26:	e01a      	b.n	800ae5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10a      	bne.n	800ae44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fb89 	bl	800b546 <SD_WideBus_Disable>
 800ae34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	431a      	orrs	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	635a      	str	r2, [r3, #52]	; 0x34
 800ae42:	e00c      	b.n	800ae5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	635a      	str	r2, [r3, #52]	; 0x34
 800ae50:	e005      	b.n	800ae5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d007      	beq.n	800ae76 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a5e      	ldr	r2, [pc, #376]	; (800afe4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800ae6c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae74:	e094      	b.n	800afa0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ae76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ae7a:	f7fd feb7 	bl	8008bec <HAL_RCCEx_GetPeriphCLKFreq>
 800ae7e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 8083 	beq.w	800af8e <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695a      	ldr	r2, [r3, #20]
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	4950      	ldr	r1, [pc, #320]	; (800afe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aea6:	fba1 1303 	umull	r1, r3, r1, r3
 800aeaa:	0e1b      	lsrs	r3, r3, #24
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d303      	bcc.n	800aeb8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	61bb      	str	r3, [r7, #24]
 800aeb6:	e05a      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aec0:	d103      	bne.n	800aeca <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	61bb      	str	r3, [r7, #24]
 800aec8:	e051      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed2:	d126      	bne.n	800af22 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10e      	bne.n	800aefa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	4a43      	ldr	r2, [pc, #268]	; (800afec <HAL_SD_ConfigWideBusOperation+0x218>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d906      	bls.n	800aef2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	4a40      	ldr	r2, [pc, #256]	; (800afe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aee8:	fba2 2303 	umull	r2, r3, r2, r3
 800aeec:	0e5b      	lsrs	r3, r3, #25
 800aeee:	61bb      	str	r3, [r7, #24]
 800aef0:	e03d      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	61bb      	str	r3, [r7, #24]
 800aef8:	e039      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	69fa      	ldr	r2, [r7, #28]
 800af02:	fbb2 f3f3 	udiv	r3, r2, r3
 800af06:	4a39      	ldr	r2, [pc, #228]	; (800afec <HAL_SD_ConfigWideBusOperation+0x218>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d906      	bls.n	800af1a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	4a36      	ldr	r2, [pc, #216]	; (800afe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af10:	fba2 2303 	umull	r2, r3, r2, r3
 800af14:	0e5b      	lsrs	r3, r3, #25
 800af16:	61bb      	str	r3, [r7, #24]
 800af18:	e029      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	61bb      	str	r3, [r7, #24]
 800af20:	e025      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10e      	bne.n	800af48 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4a30      	ldr	r2, [pc, #192]	; (800aff0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d906      	bls.n	800af40 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	4a2c      	ldr	r2, [pc, #176]	; (800afe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af36:	fba2 2303 	umull	r2, r3, r2, r3
 800af3a:	0e1b      	lsrs	r3, r3, #24
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	e016      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	61bb      	str	r3, [r7, #24]
 800af46:	e012      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	005b      	lsls	r3, r3, #1
 800af4e:	69fa      	ldr	r2, [r7, #28]
 800af50:	fbb2 f3f3 	udiv	r3, r2, r3
 800af54:	4a26      	ldr	r2, [pc, #152]	; (800aff0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d906      	bls.n	800af68 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	4a22      	ldr	r2, [pc, #136]	; (800afe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af5e:	fba2 2303 	umull	r2, r3, r2, r3
 800af62:	0e1b      	lsrs	r3, r3, #24
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	e002      	b.n	800af6e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681c      	ldr	r4, [r3, #0]
 800af72:	466a      	mov	r2, sp
 800af74:	f107 0314 	add.w	r3, r7, #20
 800af78:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af7c:	e882 0003 	stmia.w	r2, {r0, r1}
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af86:	4620      	mov	r0, r4
 800af88:	f002 fef8 	bl	800dd7c <SDMMC_Init>
 800af8c:	e008      	b.n	800afa0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afa8:	4618      	mov	r0, r3
 800afaa:	f002 ffc5 	bl	800df38 <SDMMC_CmdBlockLength>
 800afae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00c      	beq.n	800afd0 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a0a      	ldr	r2, [pc, #40]	; (800afe4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800afbc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800afd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afdc:	4618      	mov	r0, r3
 800afde:	372c      	adds	r7, #44	; 0x2c
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd90      	pop	{r4, r7, pc}
 800afe4:	1fe00fff 	.word	0x1fe00fff
 800afe8:	55e63b89 	.word	0x55e63b89
 800afec:	02faf080 	.word	0x02faf080
 800aff0:	017d7840 	.word	0x017d7840

0800aff4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fa2a 	bl	800b460 <SD_SendStatus>
 800b00c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d005      	beq.n	800b020 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	0a5b      	lsrs	r3, r3, #9
 800b024:	f003 030f 	and.w	r3, r3, #15
 800b028:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b02a:	693b      	ldr	r3, [r7, #16]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b090      	sub	sp, #64	; 0x40
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b03c:	2301      	movs	r3, #1
 800b03e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4618      	mov	r0, r3
 800b046:	f002 fef2 	bl	800de2e <SDMMC_GetPowerState>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d102      	bne.n	800b056 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b050:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b054:	e0a5      	b.n	800b1a2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d02e      	beq.n	800b0bc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4618      	mov	r0, r3
 800b064:	f003 f93d 	bl	800e2e2 <SDMMC_CmdSendCID>
 800b068:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <SD_InitCard+0x40>
    {
      return errorstate;
 800b070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b072:	e096      	b.n	800b1a2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f002 ff1d 	bl	800deba <SDMMC_GetResponse>
 800b080:	4602      	mov	r2, r0
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2104      	movs	r1, #4
 800b08c:	4618      	mov	r0, r3
 800b08e:	f002 ff14 	bl	800deba <SDMMC_GetResponse>
 800b092:	4602      	mov	r2, r0
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2108      	movs	r1, #8
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f002 ff0b 	bl	800deba <SDMMC_GetResponse>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	210c      	movs	r1, #12
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f002 ff02 	bl	800deba <SDMMC_GetResponse>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d00d      	beq.n	800b0e0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f107 020e 	add.w	r2, r7, #14
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f003 f946 	bl	800e360 <SDMMC_CmdSetRelAdd>
 800b0d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <SD_InitCard+0xac>
    {
      return errorstate;
 800b0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0de:	e060      	b.n	800b1a2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d036      	beq.n	800b156 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b0e8:	89fb      	ldrh	r3, [r7, #14]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f8:	041b      	lsls	r3, r3, #16
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f003 f90f 	bl	800e320 <SDMMC_CmdSendCSD>
 800b102:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <SD_InitCard+0xda>
    {
      return errorstate;
 800b10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10c:	e049      	b.n	800b1a2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2100      	movs	r1, #0
 800b114:	4618      	mov	r0, r3
 800b116:	f002 fed0 	bl	800deba <SDMMC_GetResponse>
 800b11a:	4602      	mov	r2, r0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2104      	movs	r1, #4
 800b126:	4618      	mov	r0, r3
 800b128:	f002 fec7 	bl	800deba <SDMMC_GetResponse>
 800b12c:	4602      	mov	r2, r0
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2108      	movs	r1, #8
 800b138:	4618      	mov	r0, r3
 800b13a:	f002 febe 	bl	800deba <SDMMC_GetResponse>
 800b13e:	4602      	mov	r2, r0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	210c      	movs	r1, #12
 800b14a:	4618      	mov	r0, r3
 800b14c:	f002 feb5 	bl	800deba <SDMMC_GetResponse>
 800b150:	4602      	mov	r2, r0
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2104      	movs	r1, #4
 800b15c:	4618      	mov	r0, r3
 800b15e:	f002 feac 	bl	800deba <SDMMC_GetResponse>
 800b162:	4603      	mov	r3, r0
 800b164:	0d1a      	lsrs	r2, r3, #20
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b16a:	f107 0310 	add.w	r3, r7, #16
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff fba9 	bl	800a8c8 <HAL_SD_GetCardCSD>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b17c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b180:	e00f      	b.n	800b1a2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	041b      	lsls	r3, r3, #16
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f002 ffbe 	bl	800e110 <SDMMC_CmdSelDesel>
 800b194:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19e:	e000      	b.n	800b1a2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3740      	adds	r7, #64	; 0x40
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f002 ffc6 	bl	800e156 <SDMMC_CmdGoIdleState>
 800b1ca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	e06e      	b.n	800b2b4 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f002 ffd9 	bl	800e192 <SDMMC_CmdOperCond>
 800b1e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00d      	beq.n	800b204 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f002 ffaf 	bl	800e156 <SDMMC_CmdGoIdleState>
 800b1f8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <SD_PowerON+0x5e>
    {
      return errorstate;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	e057      	b.n	800b2b4 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d137      	bne.n	800b282 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2100      	movs	r1, #0
 800b218:	4618      	mov	r0, r3
 800b21a:	f002 ffda 	bl	800e1d2 <SDMMC_CmdAppCommand>
 800b21e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d02d      	beq.n	800b282 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b22a:	e043      	b.n	800b2b4 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2100      	movs	r1, #0
 800b232:	4618      	mov	r0, r3
 800b234:	f002 ffcd 	bl	800e1d2 <SDMMC_CmdAppCommand>
 800b238:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <SD_PowerON+0x98>
    {
      return errorstate;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	e037      	b.n	800b2b4 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	491c      	ldr	r1, [pc, #112]	; (800b2bc <SD_PowerON+0x110>)
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 ffe4 	bl	800e218 <SDMMC_CmdAppOperCommand>
 800b250:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b25c:	e02a      	b.n	800b2b4 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f002 fe28 	bl	800deba <SDMMC_GetResponse>
 800b26a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	0fdb      	lsrs	r3, r3, #31
 800b270:	2b01      	cmp	r3, #1
 800b272:	d101      	bne.n	800b278 <SD_PowerON+0xcc>
 800b274:	2301      	movs	r3, #1
 800b276:	e000      	b.n	800b27a <SD_PowerON+0xce>
 800b278:	2300      	movs	r3, #0
 800b27a:	613b      	str	r3, [r7, #16]

    count++;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	3301      	adds	r3, #1
 800b280:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b288:	4293      	cmp	r3, r2
 800b28a:	d802      	bhi.n	800b292 <SD_PowerON+0xe6>
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0cc      	beq.n	800b22c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b298:	4293      	cmp	r3, r2
 800b29a:	d902      	bls.n	800b2a2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b29c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2a0:	e008      	b.n	800b2b4 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	c1100000 	.word	0xc1100000

0800b2c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08c      	sub	sp, #48	; 0x30
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2ca:	f7f6 fd53 	bl	8001d74 <HAL_GetTick>
 800b2ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f002 fded 	bl	800deba <SDMMC_GetResponse>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2ea:	d102      	bne.n	800b2f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2f0:	e0b0      	b.n	800b454 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2140      	movs	r1, #64	; 0x40
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f002 fe1d 	bl	800df38 <SDMMC_CmdBlockLength>
 800b2fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	e0a0      	b.n	800b454 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31a:	041b      	lsls	r3, r3, #16
 800b31c:	4619      	mov	r1, r3
 800b31e:	4610      	mov	r0, r2
 800b320:	f002 ff57 	bl	800e1d2 <SDMMC_CmdAppCommand>
 800b324:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	e08d      	b.n	800b454 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b33e:	2340      	movs	r3, #64	; 0x40
 800b340:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b342:	2360      	movs	r3, #96	; 0x60
 800b344:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b346:	2302      	movs	r3, #2
 800b348:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b34e:	2301      	movs	r3, #1
 800b350:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f107 0208 	add.w	r2, r7, #8
 800b35a:	4611      	mov	r1, r2
 800b35c:	4618      	mov	r0, r3
 800b35e:	f002 fdbf 	bl	800dee0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f003 f83f 	bl	800e3ea <SDMMC_CmdStatusRegister>
 800b36c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d02b      	beq.n	800b3cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	e069      	b.n	800b454 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d013      	beq.n	800b3b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b38e:	2300      	movs	r3, #0
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b392:	e00d      	b.n	800b3b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4618      	mov	r0, r3
 800b39a:	f002 fd19 	bl	800ddd0 <SDMMC_ReadFIFO>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	601a      	str	r2, [r3, #0]
        pData++;
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	2b07      	cmp	r3, #7
 800b3b4:	d9ee      	bls.n	800b394 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3b6:	f7f6 fcdd 	bl	8001d74 <HAL_GetTick>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c4:	d102      	bne.n	800b3cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3ca:	e043      	b.n	800b454 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0d2      	beq.n	800b380 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e0:	f003 0308 	and.w	r3, r3, #8
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b3e8:	2308      	movs	r3, #8
 800b3ea:	e033      	b.n	800b454 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e02a      	b.n	800b454 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d017      	beq.n	800b43c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b40c:	2320      	movs	r3, #32
 800b40e:	e021      	b.n	800b454 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4618      	mov	r0, r3
 800b416:	f002 fcdb 	bl	800ddd0 <SDMMC_ReadFIFO>
 800b41a:	4602      	mov	r2, r0
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	601a      	str	r2, [r3, #0]
    pData++;
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	3304      	adds	r3, #4
 800b424:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b426:	f7f6 fca5 	bl	8001d74 <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b434:	d102      	bne.n	800b43c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b43a:	e00b      	b.n	800b454 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e2      	bne.n	800b410 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a03      	ldr	r2, [pc, #12]	; (800b45c <SD_SendSDStatus+0x19c>)
 800b450:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3730      	adds	r7, #48	; 0x30
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	18000f3a 	.word	0x18000f3a

0800b460 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b474:	e018      	b.n	800b4a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47e:	041b      	lsls	r3, r3, #16
 800b480:	4619      	mov	r1, r3
 800b482:	4610      	mov	r0, r2
 800b484:	f002 ff8e 	bl	800e3a4 <SDMMC_CmdSendStatus>
 800b488:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	e009      	b.n	800b4a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2100      	movs	r1, #0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f002 fd0d 	bl	800deba <SDMMC_GetResponse>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f002 fcf7 	bl	800deba <SDMMC_GetResponse>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4d6:	d102      	bne.n	800b4de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4dc:	e02f      	b.n	800b53e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b4de:	f107 030c 	add.w	r3, r7, #12
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f879 	bl	800b5dc <SD_FindSCR>
 800b4ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	e023      	b.n	800b53e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01c      	beq.n	800b53a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b508:	041b      	lsls	r3, r3, #16
 800b50a:	4619      	mov	r1, r3
 800b50c:	4610      	mov	r0, r2
 800b50e:	f002 fe60 	bl	800e1d2 <SDMMC_CmdAppCommand>
 800b512:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	e00f      	b.n	800b53e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2102      	movs	r1, #2
 800b524:	4618      	mov	r0, r3
 800b526:	f002 fe97 	bl	800e258 <SDMMC_CmdBusWidth>
 800b52a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	e003      	b.n	800b53e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b536:	2300      	movs	r3, #0
 800b538:	e001      	b.n	800b53e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b53a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b086      	sub	sp, #24
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2100      	movs	r1, #0
 800b55c:	4618      	mov	r0, r3
 800b55e:	f002 fcac 	bl	800deba <SDMMC_GetResponse>
 800b562:	4603      	mov	r3, r0
 800b564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b56c:	d102      	bne.n	800b574 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b56e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b572:	e02f      	b.n	800b5d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b574:	f107 030c 	add.w	r3, r7, #12
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f82e 	bl	800b5dc <SD_FindSCR>
 800b580:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	e023      	b.n	800b5d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d01c      	beq.n	800b5d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59e:	041b      	lsls	r3, r3, #16
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f002 fe15 	bl	800e1d2 <SDMMC_CmdAppCommand>
 800b5a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	e00f      	b.n	800b5d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f002 fe4c 	bl	800e258 <SDMMC_CmdBusWidth>
 800b5c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	e003      	b.n	800b5d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e001      	b.n	800b5d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b5d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08e      	sub	sp, #56	; 0x38
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5e6:	f7f6 fbc5 	bl	8001d74 <HAL_GetTick>
 800b5ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60bb      	str	r3, [r7, #8]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2108      	movs	r1, #8
 800b602:	4618      	mov	r0, r3
 800b604:	f002 fc98 	bl	800df38 <SDMMC_CmdBlockLength>
 800b608:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	e0ad      	b.n	800b770 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61c:	041b      	lsls	r3, r3, #16
 800b61e:	4619      	mov	r1, r3
 800b620:	4610      	mov	r0, r2
 800b622:	f002 fdd6 	bl	800e1d2 <SDMMC_CmdAppCommand>
 800b626:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b630:	e09e      	b.n	800b770 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b632:	f04f 33ff 	mov.w	r3, #4294967295
 800b636:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b638:	2308      	movs	r3, #8
 800b63a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b63c:	2330      	movs	r3, #48	; 0x30
 800b63e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b640:	2302      	movs	r3, #2
 800b642:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b644:	2300      	movs	r3, #0
 800b646:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b648:	2301      	movs	r3, #1
 800b64a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f107 0210 	add.w	r2, r7, #16
 800b654:	4611      	mov	r1, r2
 800b656:	4618      	mov	r0, r3
 800b658:	f002 fc42 	bl	800dee0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f002 fe1c 	bl	800e29e <SDMMC_CmdSendSCR>
 800b666:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d027      	beq.n	800b6be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b670:	e07e      	b.n	800b770 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d113      	bne.n	800b6a8 <SD_FindSCR+0xcc>
 800b680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b682:	2b00      	cmp	r3, #0
 800b684:	d110      	bne.n	800b6a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f002 fba0 	bl	800ddd0 <SDMMC_ReadFIFO>
 800b690:	4603      	mov	r3, r0
 800b692:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f002 fb99 	bl	800ddd0 <SDMMC_ReadFIFO>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	60fb      	str	r3, [r7, #12]
      index++;
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6a8:	f7f6 fb64 	bl	8001d74 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b6:	d102      	bne.n	800b6be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6bc:	e058      	b.n	800b770 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6c4:	f240 532a 	movw	r3, #1322	; 0x52a
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0d1      	beq.n	800b672 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2208      	movs	r2, #8
 800b6e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b6e4:	2308      	movs	r3, #8
 800b6e6:	e043      	b.n	800b770 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6fe:	2302      	movs	r3, #2
 800b700:	e036      	b.n	800b770 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b708:	f003 0320 	and.w	r3, r3, #32
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2220      	movs	r2, #32
 800b716:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b718:	2320      	movs	r3, #32
 800b71a:	e029      	b.n	800b770 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a15      	ldr	r2, [pc, #84]	; (800b778 <SD_FindSCR+0x19c>)
 800b722:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	061a      	lsls	r2, r3, #24
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	021b      	lsls	r3, r3, #8
 800b72c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b730:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	0a1b      	lsrs	r3, r3, #8
 800b736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b73a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	0e1b      	lsrs	r3, r3, #24
 800b740:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	601a      	str	r2, [r3, #0]
    scr++;
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	3304      	adds	r3, #4
 800b74a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	061a      	lsls	r2, r3, #24
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b758:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b762:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	0e1b      	lsrs	r3, r3, #24
 800b768:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3738      	adds	r7, #56	; 0x38
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	18000f3a 	.word	0x18000f3a

0800b77c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	2b1f      	cmp	r3, #31
 800b790:	d936      	bls.n	800b800 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
 800b796:	e027      	b.n	800b7e8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f002 fb17 	bl	800ddd0 <SDMMC_ReadFIFO>
 800b7a2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	0a1b      	lsrs	r3, r3, #8
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	0c1b      	lsrs	r3, r3, #16
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	0e1b      	lsrs	r3, r3, #24
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2b07      	cmp	r3, #7
 800b7ec:	d9d4      	bls.n	800b798 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f8:	f1a3 0220 	sub.w	r2, r3, #32
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b800:	bf00      	nop
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	2b1f      	cmp	r3, #31
 800b81c:	d93a      	bls.n	800b894 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b81e:	2300      	movs	r3, #0
 800b820:	617b      	str	r3, [r7, #20]
 800b822:	e02b      	b.n	800b87c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	3301      	adds	r3, #1
 800b82e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	021a      	lsls	r2, r3, #8
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	3301      	adds	r3, #1
 800b840:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	041a      	lsls	r2, r3, #16
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	3301      	adds	r3, #1
 800b852:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	061a      	lsls	r2, r3, #24
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	3301      	adds	r3, #1
 800b864:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f107 020c 	add.w	r2, r7, #12
 800b86e:	4611      	mov	r1, r2
 800b870:	4618      	mov	r0, r3
 800b872:	f002 faba 	bl	800ddea <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	3301      	adds	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2b07      	cmp	r3, #7
 800b880:	d9d0      	bls.n	800b824 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	f1a3 0220 	sub.w	r2, r3, #32
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	621a      	str	r2, [r3, #32]
  }
}
 800b894:	bf00      	nop
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e049      	b.n	800b992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7f5 ff2a 	bl	800176c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3304      	adds	r3, #4
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f000 fb4a 	bl	800bfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
	...

0800b99c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d001      	beq.n	800b9b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e047      	b.n	800ba44 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a23      	ldr	r2, [pc, #140]	; (800ba50 <HAL_TIM_Base_Start+0xb4>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d01d      	beq.n	800ba02 <HAL_TIM_Base_Start+0x66>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ce:	d018      	beq.n	800ba02 <HAL_TIM_Base_Start+0x66>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a1f      	ldr	r2, [pc, #124]	; (800ba54 <HAL_TIM_Base_Start+0xb8>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d013      	beq.n	800ba02 <HAL_TIM_Base_Start+0x66>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a1e      	ldr	r2, [pc, #120]	; (800ba58 <HAL_TIM_Base_Start+0xbc>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d00e      	beq.n	800ba02 <HAL_TIM_Base_Start+0x66>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a1c      	ldr	r2, [pc, #112]	; (800ba5c <HAL_TIM_Base_Start+0xc0>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d009      	beq.n	800ba02 <HAL_TIM_Base_Start+0x66>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a1b      	ldr	r2, [pc, #108]	; (800ba60 <HAL_TIM_Base_Start+0xc4>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d004      	beq.n	800ba02 <HAL_TIM_Base_Start+0x66>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a19      	ldr	r2, [pc, #100]	; (800ba64 <HAL_TIM_Base_Start+0xc8>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d115      	bne.n	800ba2e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <HAL_TIM_Base_Start+0xcc>)
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b06      	cmp	r3, #6
 800ba12:	d015      	beq.n	800ba40 <HAL_TIM_Base_Start+0xa4>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba1a:	d011      	beq.n	800ba40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f042 0201 	orr.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2c:	e008      	b.n	800ba40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f042 0201 	orr.w	r2, r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	e000      	b.n	800ba42 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	40010000 	.word	0x40010000
 800ba54:	40000400 	.word	0x40000400
 800ba58:	40000800 	.word	0x40000800
 800ba5c:	40000c00 	.word	0x40000c00
 800ba60:	40010400 	.word	0x40010400
 800ba64:	40001800 	.word	0x40001800
 800ba68:	00010007 	.word	0x00010007

0800ba6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d001      	beq.n	800ba84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e04f      	b.n	800bb24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2202      	movs	r2, #2
 800ba88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f042 0201 	orr.w	r2, r2, #1
 800ba9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a23      	ldr	r2, [pc, #140]	; (800bb30 <HAL_TIM_Base_Start_IT+0xc4>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d01d      	beq.n	800bae2 <HAL_TIM_Base_Start_IT+0x76>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baae:	d018      	beq.n	800bae2 <HAL_TIM_Base_Start_IT+0x76>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a1f      	ldr	r2, [pc, #124]	; (800bb34 <HAL_TIM_Base_Start_IT+0xc8>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d013      	beq.n	800bae2 <HAL_TIM_Base_Start_IT+0x76>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a1e      	ldr	r2, [pc, #120]	; (800bb38 <HAL_TIM_Base_Start_IT+0xcc>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00e      	beq.n	800bae2 <HAL_TIM_Base_Start_IT+0x76>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a1c      	ldr	r2, [pc, #112]	; (800bb3c <HAL_TIM_Base_Start_IT+0xd0>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d009      	beq.n	800bae2 <HAL_TIM_Base_Start_IT+0x76>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a1b      	ldr	r2, [pc, #108]	; (800bb40 <HAL_TIM_Base_Start_IT+0xd4>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d004      	beq.n	800bae2 <HAL_TIM_Base_Start_IT+0x76>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a19      	ldr	r2, [pc, #100]	; (800bb44 <HAL_TIM_Base_Start_IT+0xd8>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d115      	bne.n	800bb0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	4b17      	ldr	r3, [pc, #92]	; (800bb48 <HAL_TIM_Base_Start_IT+0xdc>)
 800baea:	4013      	ands	r3, r2
 800baec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b06      	cmp	r3, #6
 800baf2:	d015      	beq.n	800bb20 <HAL_TIM_Base_Start_IT+0xb4>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bafa:	d011      	beq.n	800bb20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0201 	orr.w	r2, r2, #1
 800bb0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb0c:	e008      	b.n	800bb20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f042 0201 	orr.w	r2, r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	e000      	b.n	800bb22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	40010000 	.word	0x40010000
 800bb34:	40000400 	.word	0x40000400
 800bb38:	40000800 	.word	0x40000800
 800bb3c:	40000c00 	.word	0x40000c00
 800bb40:	40010400 	.word	0x40010400
 800bb44:	40001800 	.word	0x40001800
 800bb48:	00010007 	.word	0x00010007

0800bb4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	f003 0302 	and.w	r3, r3, #2
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d122      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f003 0302 	and.w	r3, r3, #2
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d11b      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f06f 0202 	mvn.w	r2, #2
 800bb78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f9fa 	bl	800bf88 <HAL_TIM_IC_CaptureCallback>
 800bb94:	e005      	b.n	800bba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f9ec 	bl	800bf74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f9fd 	bl	800bf9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d122      	bne.n	800bbfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	d11b      	bne.n	800bbfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f06f 0204 	mvn.w	r2, #4
 800bbcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f9d0 	bl	800bf88 <HAL_TIM_IC_CaptureCallback>
 800bbe8:	e005      	b.n	800bbf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f9c2 	bl	800bf74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f9d3 	bl	800bf9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f003 0308 	and.w	r3, r3, #8
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d122      	bne.n	800bc50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0308 	and.w	r3, r3, #8
 800bc14:	2b08      	cmp	r3, #8
 800bc16:	d11b      	bne.n	800bc50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f06f 0208 	mvn.w	r2, #8
 800bc20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2204      	movs	r2, #4
 800bc26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	f003 0303 	and.w	r3, r3, #3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f9a6 	bl	800bf88 <HAL_TIM_IC_CaptureCallback>
 800bc3c:	e005      	b.n	800bc4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f998 	bl	800bf74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f9a9 	bl	800bf9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	f003 0310 	and.w	r3, r3, #16
 800bc5a:	2b10      	cmp	r3, #16
 800bc5c:	d122      	bne.n	800bca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	f003 0310 	and.w	r3, r3, #16
 800bc68:	2b10      	cmp	r3, #16
 800bc6a:	d11b      	bne.n	800bca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f06f 0210 	mvn.w	r2, #16
 800bc74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2208      	movs	r2, #8
 800bc7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	69db      	ldr	r3, [r3, #28]
 800bc82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f97c 	bl	800bf88 <HAL_TIM_IC_CaptureCallback>
 800bc90:	e005      	b.n	800bc9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f96e 	bl	800bf74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 f97f 	bl	800bf9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	f003 0301 	and.w	r3, r3, #1
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d10e      	bne.n	800bcd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d107      	bne.n	800bcd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f06f 0201 	mvn.w	r2, #1
 800bcc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7f5 fa6c 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcda:	2b80      	cmp	r3, #128	; 0x80
 800bcdc:	d10e      	bne.n	800bcfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce8:	2b80      	cmp	r3, #128	; 0x80
 800bcea:	d107      	bne.n	800bcfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bcf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fb2e 	bl	800c358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0a:	d10e      	bne.n	800bd2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd16:	2b80      	cmp	r3, #128	; 0x80
 800bd18:	d107      	bne.n	800bd2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bd22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fb21 	bl	800c36c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd34:	2b40      	cmp	r3, #64	; 0x40
 800bd36:	d10e      	bne.n	800bd56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd42:	2b40      	cmp	r3, #64	; 0x40
 800bd44:	d107      	bne.n	800bd56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f92d 	bl	800bfb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f003 0320 	and.w	r3, r3, #32
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	d10e      	bne.n	800bd82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	f003 0320 	and.w	r3, r3, #32
 800bd6e:	2b20      	cmp	r3, #32
 800bd70:	d107      	bne.n	800bd82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f06f 0220 	mvn.w	r2, #32
 800bd7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fae1 	bl	800c344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_TIM_ConfigClockSource+0x18>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e0db      	b.n	800bf5c <HAL_TIM_ConfigClockSource+0x1d0>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	4b69      	ldr	r3, [pc, #420]	; (800bf64 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a63      	ldr	r2, [pc, #396]	; (800bf68 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	f000 80a9 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800bde0:	4a61      	ldr	r2, [pc, #388]	; (800bf68 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	f200 80ae 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800bde8:	4a60      	ldr	r2, [pc, #384]	; (800bf6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	f000 80a1 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800bdf0:	4a5e      	ldr	r2, [pc, #376]	; (800bf6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	f200 80a6 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800bdf8:	4a5d      	ldr	r2, [pc, #372]	; (800bf70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	f000 8099 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800be00:	4a5b      	ldr	r2, [pc, #364]	; (800bf70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800be02:	4293      	cmp	r3, r2
 800be04:	f200 809e 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be0c:	f000 8091 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800be10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be14:	f200 8096 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be1c:	f000 8089 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800be20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be24:	f200 808e 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be2c:	d03e      	beq.n	800beac <HAL_TIM_ConfigClockSource+0x120>
 800be2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be32:	f200 8087 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be3a:	f000 8085 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0x1bc>
 800be3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be42:	d87f      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be44:	2b70      	cmp	r3, #112	; 0x70
 800be46:	d01a      	beq.n	800be7e <HAL_TIM_ConfigClockSource+0xf2>
 800be48:	2b70      	cmp	r3, #112	; 0x70
 800be4a:	d87b      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be4c:	2b60      	cmp	r3, #96	; 0x60
 800be4e:	d050      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x166>
 800be50:	2b60      	cmp	r3, #96	; 0x60
 800be52:	d877      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be54:	2b50      	cmp	r3, #80	; 0x50
 800be56:	d03c      	beq.n	800bed2 <HAL_TIM_ConfigClockSource+0x146>
 800be58:	2b50      	cmp	r3, #80	; 0x50
 800be5a:	d873      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be5c:	2b40      	cmp	r3, #64	; 0x40
 800be5e:	d058      	beq.n	800bf12 <HAL_TIM_ConfigClockSource+0x186>
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d86f      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be64:	2b30      	cmp	r3, #48	; 0x30
 800be66:	d064      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800be68:	2b30      	cmp	r3, #48	; 0x30
 800be6a:	d86b      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be6c:	2b20      	cmp	r3, #32
 800be6e:	d060      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800be70:	2b20      	cmp	r3, #32
 800be72:	d867      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
 800be74:	2b00      	cmp	r3, #0
 800be76:	d05c      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
 800be78:	2b10      	cmp	r3, #16
 800be7a:	d05a      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800be7c:	e062      	b.n	800bf44 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	6899      	ldr	r1, [r3, #8]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f000 f9b1 	bl	800c1f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bea0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	609a      	str	r2, [r3, #8]
      break;
 800beaa:	e04e      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	6899      	ldr	r1, [r3, #8]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	f000 f99a 	bl	800c1f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bece:	609a      	str	r2, [r3, #8]
      break;
 800bed0:	e03b      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	6859      	ldr	r1, [r3, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	461a      	mov	r2, r3
 800bee0:	f000 f90a 	bl	800c0f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2150      	movs	r1, #80	; 0x50
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f964 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bef0:	e02b      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	6859      	ldr	r1, [r3, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	461a      	mov	r2, r3
 800bf00:	f000 f929 	bl	800c156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2160      	movs	r1, #96	; 0x60
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f954 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bf10:	e01b      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	6859      	ldr	r1, [r3, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f000 f8ea 	bl	800c0f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2140      	movs	r1, #64	; 0x40
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 f944 	bl	800c1b8 <TIM_ITRx_SetConfig>
      break;
 800bf30:	e00b      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f000 f93b 	bl	800c1b8 <TIM_ITRx_SetConfig>
        break;
 800bf42:	e002      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bf44:	bf00      	nop
 800bf46:	e000      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bf48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	ffceff88 	.word	0xffceff88
 800bf68:	00100040 	.word	0x00100040
 800bf6c:	00100030 	.word	0x00100030
 800bf70:	00100020 	.word	0x00100020

0800bf74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a40      	ldr	r2, [pc, #256]	; (800c0d8 <TIM_Base_SetConfig+0x114>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d013      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfe2:	d00f      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a3d      	ldr	r2, [pc, #244]	; (800c0dc <TIM_Base_SetConfig+0x118>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d00b      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a3c      	ldr	r2, [pc, #240]	; (800c0e0 <TIM_Base_SetConfig+0x11c>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d007      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a3b      	ldr	r2, [pc, #236]	; (800c0e4 <TIM_Base_SetConfig+0x120>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d003      	beq.n	800c004 <TIM_Base_SetConfig+0x40>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a3a      	ldr	r2, [pc, #232]	; (800c0e8 <TIM_Base_SetConfig+0x124>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d108      	bne.n	800c016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c00a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4313      	orrs	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a2f      	ldr	r2, [pc, #188]	; (800c0d8 <TIM_Base_SetConfig+0x114>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d01f      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c024:	d01b      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a2c      	ldr	r2, [pc, #176]	; (800c0dc <TIM_Base_SetConfig+0x118>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d017      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a2b      	ldr	r2, [pc, #172]	; (800c0e0 <TIM_Base_SetConfig+0x11c>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d013      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a2a      	ldr	r2, [pc, #168]	; (800c0e4 <TIM_Base_SetConfig+0x120>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d00f      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a29      	ldr	r2, [pc, #164]	; (800c0e8 <TIM_Base_SetConfig+0x124>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d00b      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a28      	ldr	r2, [pc, #160]	; (800c0ec <TIM_Base_SetConfig+0x128>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d007      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a27      	ldr	r2, [pc, #156]	; (800c0f0 <TIM_Base_SetConfig+0x12c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d003      	beq.n	800c05e <TIM_Base_SetConfig+0x9a>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a26      	ldr	r2, [pc, #152]	; (800c0f4 <TIM_Base_SetConfig+0x130>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d108      	bne.n	800c070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a10      	ldr	r2, [pc, #64]	; (800c0d8 <TIM_Base_SetConfig+0x114>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d00f      	beq.n	800c0bc <TIM_Base_SetConfig+0xf8>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4a12      	ldr	r2, [pc, #72]	; (800c0e8 <TIM_Base_SetConfig+0x124>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d00b      	beq.n	800c0bc <TIM_Base_SetConfig+0xf8>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4a11      	ldr	r2, [pc, #68]	; (800c0ec <TIM_Base_SetConfig+0x128>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d007      	beq.n	800c0bc <TIM_Base_SetConfig+0xf8>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4a10      	ldr	r2, [pc, #64]	; (800c0f0 <TIM_Base_SetConfig+0x12c>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d003      	beq.n	800c0bc <TIM_Base_SetConfig+0xf8>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a0f      	ldr	r2, [pc, #60]	; (800c0f4 <TIM_Base_SetConfig+0x130>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d103      	bne.n	800c0c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	691a      	ldr	r2, [r3, #16]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	615a      	str	r2, [r3, #20]
}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	40010000 	.word	0x40010000
 800c0dc:	40000400 	.word	0x40000400
 800c0e0:	40000800 	.word	0x40000800
 800c0e4:	40000c00 	.word	0x40000c00
 800c0e8:	40010400 	.word	0x40010400
 800c0ec:	40014000 	.word	0x40014000
 800c0f0:	40014400 	.word	0x40014400
 800c0f4:	40014800 	.word	0x40014800

0800c0f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	f023 0201 	bic.w	r2, r3, #1
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f023 030a 	bic.w	r3, r3, #10
 800c134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	621a      	str	r2, [r3, #32]
}
 800c14a:	bf00      	nop
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c156:	b480      	push	{r7}
 800c158:	b087      	sub	sp, #28
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	f023 0210 	bic.w	r2, r3, #16
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	031b      	lsls	r3, r3, #12
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4313      	orrs	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	621a      	str	r2, [r3, #32]
}
 800c1aa:	bf00      	nop
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
	...

0800c1b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <TIM_ITRx_SetConfig+0x38>)
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	f043 0307 	orr.w	r3, r3, #7
 800c1da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	609a      	str	r2, [r3, #8]
}
 800c1e2:	bf00      	nop
 800c1e4:	3714      	adds	r7, #20
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	ffcfff8f 	.word	0xffcfff8f

0800c1f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c20e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	021a      	lsls	r2, r3, #8
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	431a      	orrs	r2, r3
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	4313      	orrs	r3, r2
 800c220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	609a      	str	r2, [r3, #8]
}
 800c228:	bf00      	nop
 800c22a:	371c      	adds	r7, #28
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c244:	2b01      	cmp	r3, #1
 800c246:	d101      	bne.n	800c24c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c248:	2302      	movs	r3, #2
 800c24a:	e068      	b.n	800c31e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a2e      	ldr	r2, [pc, #184]	; (800c32c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d004      	beq.n	800c280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a2d      	ldr	r2, [pc, #180]	; (800c330 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d108      	bne.n	800c292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a1e      	ldr	r2, [pc, #120]	; (800c32c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d01d      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2be:	d018      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a1b      	ldr	r2, [pc, #108]	; (800c334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d013      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a1a      	ldr	r2, [pc, #104]	; (800c338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00e      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a18      	ldr	r2, [pc, #96]	; (800c33c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d009      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a13      	ldr	r2, [pc, #76]	; (800c330 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d004      	beq.n	800c2f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a14      	ldr	r2, [pc, #80]	; (800c340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d10c      	bne.n	800c30c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	4313      	orrs	r3, r2
 800c302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	40010000 	.word	0x40010000
 800c330:	40010400 	.word	0x40010400
 800c334:	40000400 	.word	0x40000400
 800c338:	40000800 	.word	0x40000800
 800c33c:	40000c00 	.word	0x40000c00
 800c340:	40001800 	.word	0x40001800

0800c344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d101      	bne.n	800c392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e042      	b.n	800c418 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7f5 fa55 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2224      	movs	r2, #36	; 0x24
 800c3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f022 0201 	bic.w	r2, r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fb56 	bl	800ca74 <UART_SetConfig>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d101      	bne.n	800c3d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e022      	b.n	800c418 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f001 f8aa 	bl	800d534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0201 	orr.w	r2, r2, #1
 800c40e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f001 f931 	bl	800d678 <UART_CheckIdleState>
 800c416:	4603      	mov	r3, r0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c434:	2b20      	cmp	r3, #32
 800c436:	d131      	bne.n	800c49c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <HAL_UART_Receive_DMA+0x24>
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e02a      	b.n	800c49e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d101      	bne.n	800c456 <HAL_UART_Receive_DMA+0x36>
 800c452:	2302      	movs	r3, #2
 800c454:	e023      	b.n	800c49e <HAL_UART_Receive_DMA+0x7e>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a0f      	ldr	r2, [pc, #60]	; (800c4a8 <HAL_UART_Receive_DMA+0x88>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d00e      	beq.n	800c48c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d007      	beq.n	800c48c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c48a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c48c:	88fb      	ldrh	r3, [r7, #6]
 800c48e:	461a      	mov	r2, r3
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f001 f9bc 	bl	800d810 <UART_Start_Receive_DMA>
 800c498:	4603      	mov	r3, r0
 800c49a:	e000      	b.n	800c49e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c49c:	2302      	movs	r3, #2
  }
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	58000c00 	.word	0x58000c00

0800c4ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b088      	sub	sp, #32
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	69db      	ldr	r3, [r3, #28]
 800c4ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4cc:	69fa      	ldr	r2, [r7, #28]
 800c4ce:	f640 030f 	movw	r3, #2063	; 0x80f
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d118      	bne.n	800c50e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	f003 0320 	and.w	r3, r3, #32
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d013      	beq.n	800c50e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	f003 0320 	and.w	r3, r3, #32
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d104      	bne.n	800c4fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 8282 	beq.w	800ca08 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	4798      	blx	r3
      }
      return;
 800c50c:	e27c      	b.n	800ca08 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 80ef 	beq.w	800c6f4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	4b73      	ldr	r3, [pc, #460]	; (800c6e8 <HAL_UART_IRQHandler+0x23c>)
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d105      	bne.n	800c52c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	4b72      	ldr	r3, [pc, #456]	; (800c6ec <HAL_UART_IRQHandler+0x240>)
 800c524:	4013      	ands	r3, r2
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 80e4 	beq.w	800c6f4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d010      	beq.n	800c558 <HAL_UART_IRQHandler+0xac>
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2201      	movs	r2, #1
 800c546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54e:	f043 0201 	orr.w	r2, r3, #1
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	f003 0302 	and.w	r3, r3, #2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d010      	beq.n	800c584 <HAL_UART_IRQHandler+0xd8>
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00b      	beq.n	800c584 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2202      	movs	r2, #2
 800c572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c57a:	f043 0204 	orr.w	r2, r3, #4
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	f003 0304 	and.w	r3, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d010      	beq.n	800c5b0 <HAL_UART_IRQHandler+0x104>
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00b      	beq.n	800c5b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2204      	movs	r2, #4
 800c59e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a6:	f043 0202 	orr.w	r2, r3, #2
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	f003 0308 	and.w	r3, r3, #8
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d015      	beq.n	800c5e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	f003 0320 	and.w	r3, r3, #32
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	4b48      	ldr	r3, [pc, #288]	; (800c6e8 <HAL_UART_IRQHandler+0x23c>)
 800c5c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00b      	beq.n	800c5e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2208      	movs	r2, #8
 800c5d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5dc:	f043 0208 	orr.w	r2, r3, #8
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d011      	beq.n	800c614 <HAL_UART_IRQHandler+0x168>
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00c      	beq.n	800c614 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c60a:	f043 0220 	orr.w	r2, r3, #32
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 81f6 	beq.w	800ca0c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	f003 0320 	and.w	r3, r3, #32
 800c626:	2b00      	cmp	r3, #0
 800c628:	d011      	beq.n	800c64e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	f003 0320 	and.w	r3, r3, #32
 800c630:	2b00      	cmp	r3, #0
 800c632:	d104      	bne.n	800c63e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d007      	beq.n	800c64e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c654:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d004      	beq.n	800c66e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d031      	beq.n	800c6d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f001 f95a 	bl	800d928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67e:	2b40      	cmp	r3, #64	; 0x40
 800c680:	d123      	bne.n	800c6ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c690:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c696:	2b00      	cmp	r3, #0
 800c698:	d013      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c69e:	4a14      	ldr	r2, [pc, #80]	; (800c6f0 <HAL_UART_IRQHandler+0x244>)
 800c6a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7f8 fc28 	bl	8004efc <HAL_DMA_Abort_IT>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d017      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c0:	e00f      	b.n	800c6e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f9c0 	bl	800ca48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c8:	e00b      	b.n	800c6e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f9bc 	bl	800ca48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d0:	e007      	b.n	800c6e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f9b8 	bl	800ca48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c6e0:	e194      	b.n	800ca0c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e2:	bf00      	nop
    return;
 800c6e4:	e192      	b.n	800ca0c <HAL_UART_IRQHandler+0x560>
 800c6e6:	bf00      	nop
 800c6e8:	10000001 	.word	0x10000001
 800c6ec:	04000120 	.word	0x04000120
 800c6f0:	0800dadb 	.word	0x0800dadb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	f040 810f 	bne.w	800c91c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	f003 0310 	and.w	r3, r3, #16
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 8109 	beq.w	800c91c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	f003 0310 	and.w	r3, r3, #16
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 8103 	beq.w	800c91c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2210      	movs	r2, #16
 800c71c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c728:	2b40      	cmp	r3, #64	; 0x40
 800c72a:	f040 80bb 	bne.w	800c8a4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a96      	ldr	r2, [pc, #600]	; (800c990 <HAL_UART_IRQHandler+0x4e4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d059      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a94      	ldr	r2, [pc, #592]	; (800c994 <HAL_UART_IRQHandler+0x4e8>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d053      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a92      	ldr	r2, [pc, #584]	; (800c998 <HAL_UART_IRQHandler+0x4ec>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d04d      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a90      	ldr	r2, [pc, #576]	; (800c99c <HAL_UART_IRQHandler+0x4f0>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d047      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a8e      	ldr	r2, [pc, #568]	; (800c9a0 <HAL_UART_IRQHandler+0x4f4>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d041      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a8c      	ldr	r2, [pc, #560]	; (800c9a4 <HAL_UART_IRQHandler+0x4f8>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d03b      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a8a      	ldr	r2, [pc, #552]	; (800c9a8 <HAL_UART_IRQHandler+0x4fc>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d035      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a88      	ldr	r2, [pc, #544]	; (800c9ac <HAL_UART_IRQHandler+0x500>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d02f      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a86      	ldr	r2, [pc, #536]	; (800c9b0 <HAL_UART_IRQHandler+0x504>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d029      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a84      	ldr	r2, [pc, #528]	; (800c9b4 <HAL_UART_IRQHandler+0x508>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d023      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a82      	ldr	r2, [pc, #520]	; (800c9b8 <HAL_UART_IRQHandler+0x50c>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d01d      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a80      	ldr	r2, [pc, #512]	; (800c9bc <HAL_UART_IRQHandler+0x510>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d017      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a7e      	ldr	r2, [pc, #504]	; (800c9c0 <HAL_UART_IRQHandler+0x514>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d011      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a7c      	ldr	r2, [pc, #496]	; (800c9c4 <HAL_UART_IRQHandler+0x518>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d00b      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a7a      	ldr	r2, [pc, #488]	; (800c9c8 <HAL_UART_IRQHandler+0x51c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d005      	beq.n	800c7ee <HAL_UART_IRQHandler+0x342>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a78      	ldr	r2, [pc, #480]	; (800c9cc <HAL_UART_IRQHandler+0x520>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d105      	bne.n	800c7fa <HAL_UART_IRQHandler+0x34e>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	e004      	b.n	800c804 <HAL_UART_IRQHandler+0x358>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	b29b      	uxth	r3, r3
 800c804:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c806:	893b      	ldrh	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8101 	beq.w	800ca10 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c814:	893a      	ldrh	r2, [r7, #8]
 800c816:	429a      	cmp	r2, r3
 800c818:	f080 80fa 	bcs.w	800ca10 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	893a      	ldrh	r2, [r7, #8]
 800c820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c82e:	d02b      	beq.n	800c888 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c83e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f022 0201 	bic.w	r2, r2, #1
 800c84e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c85e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f022 0210 	bic.w	r2, r2, #16
 800c87c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c882:	4618      	mov	r0, r3
 800c884:	f7f8 f81c 	bl	80048c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c894:	b29b      	uxth	r3, r3
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f8dd 	bl	800ca5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8a2:	e0b5      	b.n	800ca10 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 80a8 	beq.w	800ca14 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800c8c4:	897b      	ldrh	r3, [r7, #10]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 80a4 	beq.w	800ca14 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c8da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6899      	ldr	r1, [r3, #8]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	4b3a      	ldr	r3, [pc, #232]	; (800c9d0 <HAL_UART_IRQHandler+0x524>)
 800c8e8:	400b      	ands	r3, r1
 800c8ea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2220      	movs	r2, #32
 800c8f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 0210 	bic.w	r2, r2, #16
 800c90e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c910:	897b      	ldrh	r3, [r7, #10]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f8a1 	bl	800ca5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c91a:	e07b      	b.n	800ca14 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00d      	beq.n	800c942 <HAL_UART_IRQHandler+0x496>
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d008      	beq.n	800c942 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f001 f8fd 	bl	800db3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c940:	e06b      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d012      	beq.n	800c972 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c952:	2b00      	cmp	r3, #0
 800c954:	d104      	bne.n	800c960 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d008      	beq.n	800c972 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c964:	2b00      	cmp	r3, #0
 800c966:	d057      	beq.n	800ca18 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	4798      	blx	r3
    }
    return;
 800c970:	e052      	b.n	800ca18 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d02b      	beq.n	800c9d4 <HAL_UART_IRQHandler+0x528>
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c982:	2b00      	cmp	r3, #0
 800c984:	d026      	beq.n	800c9d4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 f8bd 	bl	800db06 <UART_EndTransmit_IT>
    return;
 800c98c:	e045      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
 800c98e:	bf00      	nop
 800c990:	40020010 	.word	0x40020010
 800c994:	40020028 	.word	0x40020028
 800c998:	40020040 	.word	0x40020040
 800c99c:	40020058 	.word	0x40020058
 800c9a0:	40020070 	.word	0x40020070
 800c9a4:	40020088 	.word	0x40020088
 800c9a8:	400200a0 	.word	0x400200a0
 800c9ac:	400200b8 	.word	0x400200b8
 800c9b0:	40020410 	.word	0x40020410
 800c9b4:	40020428 	.word	0x40020428
 800c9b8:	40020440 	.word	0x40020440
 800c9bc:	40020458 	.word	0x40020458
 800c9c0:	40020470 	.word	0x40020470
 800c9c4:	40020488 	.word	0x40020488
 800c9c8:	400204a0 	.word	0x400204a0
 800c9cc:	400204b8 	.word	0x400204b8
 800c9d0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d008      	beq.n	800c9f0 <HAL_UART_IRQHandler+0x544>
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 f8ba 	bl	800db62 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9ee:	e014      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00f      	beq.n	800ca1a <HAL_UART_IRQHandler+0x56e>
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	da0c      	bge.n	800ca1a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f001 f8a4 	bl	800db4e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca06:	e008      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
      return;
 800ca08:	bf00      	nop
 800ca0a:	e006      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
    return;
 800ca0c:	bf00      	nop
 800ca0e:	e004      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
      return;
 800ca10:	bf00      	nop
 800ca12:	e002      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
      return;
 800ca14:	bf00      	nop
 800ca16:	e000      	b.n	800ca1a <HAL_UART_IRQHandler+0x56e>
    return;
 800ca18:	bf00      	nop
  }
}
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca74:	b5b0      	push	{r4, r5, r7, lr}
 800ca76:	b08e      	sub	sp, #56	; 0x38
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	431a      	orrs	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	695b      	ldr	r3, [r3, #20]
 800ca90:	431a      	orrs	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	4bbf      	ldr	r3, [pc, #764]	; (800cda0 <UART_SetConfig+0x32c>)
 800caa2:	4013      	ands	r3, r2
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	6812      	ldr	r2, [r2, #0]
 800caa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800caaa:	430b      	orrs	r3, r1
 800caac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68da      	ldr	r2, [r3, #12]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4ab5      	ldr	r2, [pc, #724]	; (800cda4 <UART_SetConfig+0x330>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d004      	beq.n	800cade <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6a1b      	ldr	r3, [r3, #32]
 800cad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cada:	4313      	orrs	r3, r2
 800cadc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	4bb0      	ldr	r3, [pc, #704]	; (800cda8 <UART_SetConfig+0x334>)
 800cae6:	4013      	ands	r3, r2
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6812      	ldr	r2, [r2, #0]
 800caec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800caee:	430b      	orrs	r3, r1
 800caf0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	f023 010f 	bic.w	r1, r3, #15
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	430a      	orrs	r2, r1
 800cb06:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4aa7      	ldr	r2, [pc, #668]	; (800cdac <UART_SetConfig+0x338>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d176      	bne.n	800cc00 <UART_SetConfig+0x18c>
 800cb12:	4ba7      	ldr	r3, [pc, #668]	; (800cdb0 <UART_SetConfig+0x33c>)
 800cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb1a:	2b28      	cmp	r3, #40	; 0x28
 800cb1c:	d86c      	bhi.n	800cbf8 <UART_SetConfig+0x184>
 800cb1e:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <UART_SetConfig+0xb0>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cbc9 	.word	0x0800cbc9
 800cb28:	0800cbf9 	.word	0x0800cbf9
 800cb2c:	0800cbf9 	.word	0x0800cbf9
 800cb30:	0800cbf9 	.word	0x0800cbf9
 800cb34:	0800cbf9 	.word	0x0800cbf9
 800cb38:	0800cbf9 	.word	0x0800cbf9
 800cb3c:	0800cbf9 	.word	0x0800cbf9
 800cb40:	0800cbf9 	.word	0x0800cbf9
 800cb44:	0800cbd1 	.word	0x0800cbd1
 800cb48:	0800cbf9 	.word	0x0800cbf9
 800cb4c:	0800cbf9 	.word	0x0800cbf9
 800cb50:	0800cbf9 	.word	0x0800cbf9
 800cb54:	0800cbf9 	.word	0x0800cbf9
 800cb58:	0800cbf9 	.word	0x0800cbf9
 800cb5c:	0800cbf9 	.word	0x0800cbf9
 800cb60:	0800cbf9 	.word	0x0800cbf9
 800cb64:	0800cbd9 	.word	0x0800cbd9
 800cb68:	0800cbf9 	.word	0x0800cbf9
 800cb6c:	0800cbf9 	.word	0x0800cbf9
 800cb70:	0800cbf9 	.word	0x0800cbf9
 800cb74:	0800cbf9 	.word	0x0800cbf9
 800cb78:	0800cbf9 	.word	0x0800cbf9
 800cb7c:	0800cbf9 	.word	0x0800cbf9
 800cb80:	0800cbf9 	.word	0x0800cbf9
 800cb84:	0800cbe1 	.word	0x0800cbe1
 800cb88:	0800cbf9 	.word	0x0800cbf9
 800cb8c:	0800cbf9 	.word	0x0800cbf9
 800cb90:	0800cbf9 	.word	0x0800cbf9
 800cb94:	0800cbf9 	.word	0x0800cbf9
 800cb98:	0800cbf9 	.word	0x0800cbf9
 800cb9c:	0800cbf9 	.word	0x0800cbf9
 800cba0:	0800cbf9 	.word	0x0800cbf9
 800cba4:	0800cbe9 	.word	0x0800cbe9
 800cba8:	0800cbf9 	.word	0x0800cbf9
 800cbac:	0800cbf9 	.word	0x0800cbf9
 800cbb0:	0800cbf9 	.word	0x0800cbf9
 800cbb4:	0800cbf9 	.word	0x0800cbf9
 800cbb8:	0800cbf9 	.word	0x0800cbf9
 800cbbc:	0800cbf9 	.word	0x0800cbf9
 800cbc0:	0800cbf9 	.word	0x0800cbf9
 800cbc4:	0800cbf1 	.word	0x0800cbf1
 800cbc8:	2301      	movs	r3, #1
 800cbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbce:	e222      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cbd0:	2304      	movs	r3, #4
 800cbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd6:	e21e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cbd8:	2308      	movs	r3, #8
 800cbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbde:	e21a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cbe0:	2310      	movs	r3, #16
 800cbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe6:	e216      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cbe8:	2320      	movs	r3, #32
 800cbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbee:	e212      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cbf0:	2340      	movs	r3, #64	; 0x40
 800cbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf6:	e20e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cbf8:	2380      	movs	r3, #128	; 0x80
 800cbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfe:	e20a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a6b      	ldr	r2, [pc, #428]	; (800cdb4 <UART_SetConfig+0x340>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d130      	bne.n	800cc6c <UART_SetConfig+0x1f8>
 800cc0a:	4b69      	ldr	r3, [pc, #420]	; (800cdb0 <UART_SetConfig+0x33c>)
 800cc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d826      	bhi.n	800cc64 <UART_SetConfig+0x1f0>
 800cc16:	a201      	add	r2, pc, #4	; (adr r2, 800cc1c <UART_SetConfig+0x1a8>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800cc35 	.word	0x0800cc35
 800cc20:	0800cc3d 	.word	0x0800cc3d
 800cc24:	0800cc45 	.word	0x0800cc45
 800cc28:	0800cc4d 	.word	0x0800cc4d
 800cc2c:	0800cc55 	.word	0x0800cc55
 800cc30:	0800cc5d 	.word	0x0800cc5d
 800cc34:	2300      	movs	r3, #0
 800cc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3a:	e1ec      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc42:	e1e8      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc44:	2308      	movs	r3, #8
 800cc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4a:	e1e4      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc4c:	2310      	movs	r3, #16
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e1e0      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc54:	2320      	movs	r3, #32
 800cc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5a:	e1dc      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc5c:	2340      	movs	r3, #64	; 0x40
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e1d8      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc64:	2380      	movs	r3, #128	; 0x80
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e1d4      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a51      	ldr	r2, [pc, #324]	; (800cdb8 <UART_SetConfig+0x344>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d130      	bne.n	800ccd8 <UART_SetConfig+0x264>
 800cc76:	4b4e      	ldr	r3, [pc, #312]	; (800cdb0 <UART_SetConfig+0x33c>)
 800cc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7a:	f003 0307 	and.w	r3, r3, #7
 800cc7e:	2b05      	cmp	r3, #5
 800cc80:	d826      	bhi.n	800ccd0 <UART_SetConfig+0x25c>
 800cc82:	a201      	add	r2, pc, #4	; (adr r2, 800cc88 <UART_SetConfig+0x214>)
 800cc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc88:	0800cca1 	.word	0x0800cca1
 800cc8c:	0800cca9 	.word	0x0800cca9
 800cc90:	0800ccb1 	.word	0x0800ccb1
 800cc94:	0800ccb9 	.word	0x0800ccb9
 800cc98:	0800ccc1 	.word	0x0800ccc1
 800cc9c:	0800ccc9 	.word	0x0800ccc9
 800cca0:	2300      	movs	r3, #0
 800cca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca6:	e1b6      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cca8:	2304      	movs	r3, #4
 800ccaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccae:	e1b2      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb6:	e1ae      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ccb8:	2310      	movs	r3, #16
 800ccba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbe:	e1aa      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ccc0:	2320      	movs	r3, #32
 800ccc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc6:	e1a6      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ccc8:	2340      	movs	r3, #64	; 0x40
 800ccca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccce:	e1a2      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ccd0:	2380      	movs	r3, #128	; 0x80
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e19e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a37      	ldr	r2, [pc, #220]	; (800cdbc <UART_SetConfig+0x348>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d130      	bne.n	800cd44 <UART_SetConfig+0x2d0>
 800cce2:	4b33      	ldr	r3, [pc, #204]	; (800cdb0 <UART_SetConfig+0x33c>)
 800cce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce6:	f003 0307 	and.w	r3, r3, #7
 800ccea:	2b05      	cmp	r3, #5
 800ccec:	d826      	bhi.n	800cd3c <UART_SetConfig+0x2c8>
 800ccee:	a201      	add	r2, pc, #4	; (adr r2, 800ccf4 <UART_SetConfig+0x280>)
 800ccf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf4:	0800cd0d 	.word	0x0800cd0d
 800ccf8:	0800cd15 	.word	0x0800cd15
 800ccfc:	0800cd1d 	.word	0x0800cd1d
 800cd00:	0800cd25 	.word	0x0800cd25
 800cd04:	0800cd2d 	.word	0x0800cd2d
 800cd08:	0800cd35 	.word	0x0800cd35
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd12:	e180      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd14:	2304      	movs	r3, #4
 800cd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1a:	e17c      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd1c:	2308      	movs	r3, #8
 800cd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd22:	e178      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd24:	2310      	movs	r3, #16
 800cd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2a:	e174      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd2c:	2320      	movs	r3, #32
 800cd2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd32:	e170      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3a:	e16c      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd3c:	2380      	movs	r3, #128	; 0x80
 800cd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd42:	e168      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a1d      	ldr	r2, [pc, #116]	; (800cdc0 <UART_SetConfig+0x34c>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d142      	bne.n	800cdd4 <UART_SetConfig+0x360>
 800cd4e:	4b18      	ldr	r3, [pc, #96]	; (800cdb0 <UART_SetConfig+0x33c>)
 800cd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d838      	bhi.n	800cdcc <UART_SetConfig+0x358>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <UART_SetConfig+0x2ec>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd79 	.word	0x0800cd79
 800cd64:	0800cd81 	.word	0x0800cd81
 800cd68:	0800cd89 	.word	0x0800cd89
 800cd6c:	0800cd91 	.word	0x0800cd91
 800cd70:	0800cd99 	.word	0x0800cd99
 800cd74:	0800cdc5 	.word	0x0800cdc5
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7e:	e14a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd80:	2304      	movs	r3, #4
 800cd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd86:	e146      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd88:	2308      	movs	r3, #8
 800cd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8e:	e142      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd90:	2310      	movs	r3, #16
 800cd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd96:	e13e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cd98:	2320      	movs	r3, #32
 800cd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9e:	e13a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cda0:	cfff69f3 	.word	0xcfff69f3
 800cda4:	58000c00 	.word	0x58000c00
 800cda8:	11fff4ff 	.word	0x11fff4ff
 800cdac:	40011000 	.word	0x40011000
 800cdb0:	58024400 	.word	0x58024400
 800cdb4:	40004400 	.word	0x40004400
 800cdb8:	40004800 	.word	0x40004800
 800cdbc:	40004c00 	.word	0x40004c00
 800cdc0:	40005000 	.word	0x40005000
 800cdc4:	2340      	movs	r3, #64	; 0x40
 800cdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdca:	e124      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cdcc:	2380      	movs	r3, #128	; 0x80
 800cdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdd2:	e120      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4acc      	ldr	r2, [pc, #816]	; (800d10c <UART_SetConfig+0x698>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d176      	bne.n	800cecc <UART_SetConfig+0x458>
 800cdde:	4bcc      	ldr	r3, [pc, #816]	; (800d110 <UART_SetConfig+0x69c>)
 800cde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cde2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cde6:	2b28      	cmp	r3, #40	; 0x28
 800cde8:	d86c      	bhi.n	800cec4 <UART_SetConfig+0x450>
 800cdea:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <UART_SetConfig+0x37c>)
 800cdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf0:	0800ce95 	.word	0x0800ce95
 800cdf4:	0800cec5 	.word	0x0800cec5
 800cdf8:	0800cec5 	.word	0x0800cec5
 800cdfc:	0800cec5 	.word	0x0800cec5
 800ce00:	0800cec5 	.word	0x0800cec5
 800ce04:	0800cec5 	.word	0x0800cec5
 800ce08:	0800cec5 	.word	0x0800cec5
 800ce0c:	0800cec5 	.word	0x0800cec5
 800ce10:	0800ce9d 	.word	0x0800ce9d
 800ce14:	0800cec5 	.word	0x0800cec5
 800ce18:	0800cec5 	.word	0x0800cec5
 800ce1c:	0800cec5 	.word	0x0800cec5
 800ce20:	0800cec5 	.word	0x0800cec5
 800ce24:	0800cec5 	.word	0x0800cec5
 800ce28:	0800cec5 	.word	0x0800cec5
 800ce2c:	0800cec5 	.word	0x0800cec5
 800ce30:	0800cea5 	.word	0x0800cea5
 800ce34:	0800cec5 	.word	0x0800cec5
 800ce38:	0800cec5 	.word	0x0800cec5
 800ce3c:	0800cec5 	.word	0x0800cec5
 800ce40:	0800cec5 	.word	0x0800cec5
 800ce44:	0800cec5 	.word	0x0800cec5
 800ce48:	0800cec5 	.word	0x0800cec5
 800ce4c:	0800cec5 	.word	0x0800cec5
 800ce50:	0800cead 	.word	0x0800cead
 800ce54:	0800cec5 	.word	0x0800cec5
 800ce58:	0800cec5 	.word	0x0800cec5
 800ce5c:	0800cec5 	.word	0x0800cec5
 800ce60:	0800cec5 	.word	0x0800cec5
 800ce64:	0800cec5 	.word	0x0800cec5
 800ce68:	0800cec5 	.word	0x0800cec5
 800ce6c:	0800cec5 	.word	0x0800cec5
 800ce70:	0800ceb5 	.word	0x0800ceb5
 800ce74:	0800cec5 	.word	0x0800cec5
 800ce78:	0800cec5 	.word	0x0800cec5
 800ce7c:	0800cec5 	.word	0x0800cec5
 800ce80:	0800cec5 	.word	0x0800cec5
 800ce84:	0800cec5 	.word	0x0800cec5
 800ce88:	0800cec5 	.word	0x0800cec5
 800ce8c:	0800cec5 	.word	0x0800cec5
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	2301      	movs	r3, #1
 800ce96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce9a:	e0bc      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ce9c:	2304      	movs	r3, #4
 800ce9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cea2:	e0b8      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cea4:	2308      	movs	r3, #8
 800cea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceaa:	e0b4      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ceac:	2310      	movs	r3, #16
 800ceae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb2:	e0b0      	b.n	800d016 <UART_SetConfig+0x5a2>
 800ceb4:	2320      	movs	r3, #32
 800ceb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceba:	e0ac      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cebc:	2340      	movs	r3, #64	; 0x40
 800cebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec2:	e0a8      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cec4:	2380      	movs	r3, #128	; 0x80
 800cec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceca:	e0a4      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a90      	ldr	r2, [pc, #576]	; (800d114 <UART_SetConfig+0x6a0>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d130      	bne.n	800cf38 <UART_SetConfig+0x4c4>
 800ced6:	4b8e      	ldr	r3, [pc, #568]	; (800d110 <UART_SetConfig+0x69c>)
 800ced8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d826      	bhi.n	800cf30 <UART_SetConfig+0x4bc>
 800cee2:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <UART_SetConfig+0x474>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cf09 	.word	0x0800cf09
 800cef0:	0800cf11 	.word	0x0800cf11
 800cef4:	0800cf19 	.word	0x0800cf19
 800cef8:	0800cf21 	.word	0x0800cf21
 800cefc:	0800cf29 	.word	0x0800cf29
 800cf00:	2300      	movs	r3, #0
 800cf02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf06:	e086      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf0e:	e082      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf10:	2308      	movs	r3, #8
 800cf12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf16:	e07e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf18:	2310      	movs	r3, #16
 800cf1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf1e:	e07a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf20:	2320      	movs	r3, #32
 800cf22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf26:	e076      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf28:	2340      	movs	r3, #64	; 0x40
 800cf2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf2e:	e072      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf30:	2380      	movs	r3, #128	; 0x80
 800cf32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf36:	e06e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a76      	ldr	r2, [pc, #472]	; (800d118 <UART_SetConfig+0x6a4>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d130      	bne.n	800cfa4 <UART_SetConfig+0x530>
 800cf42:	4b73      	ldr	r3, [pc, #460]	; (800d110 <UART_SetConfig+0x69c>)
 800cf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf46:	f003 0307 	and.w	r3, r3, #7
 800cf4a:	2b05      	cmp	r3, #5
 800cf4c:	d826      	bhi.n	800cf9c <UART_SetConfig+0x528>
 800cf4e:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <UART_SetConfig+0x4e0>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cf6d 	.word	0x0800cf6d
 800cf58:	0800cf75 	.word	0x0800cf75
 800cf5c:	0800cf7d 	.word	0x0800cf7d
 800cf60:	0800cf85 	.word	0x0800cf85
 800cf64:	0800cf8d 	.word	0x0800cf8d
 800cf68:	0800cf95 	.word	0x0800cf95
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf72:	e050      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf74:	2304      	movs	r3, #4
 800cf76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf7a:	e04c      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf82:	e048      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf84:	2310      	movs	r3, #16
 800cf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf8a:	e044      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf8c:	2320      	movs	r3, #32
 800cf8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf92:	e040      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf94:	2340      	movs	r3, #64	; 0x40
 800cf96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf9a:	e03c      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cf9c:	2380      	movs	r3, #128	; 0x80
 800cf9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfa2:	e038      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a5c      	ldr	r2, [pc, #368]	; (800d11c <UART_SetConfig+0x6a8>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d130      	bne.n	800d010 <UART_SetConfig+0x59c>
 800cfae:	4b58      	ldr	r3, [pc, #352]	; (800d110 <UART_SetConfig+0x69c>)
 800cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	2b05      	cmp	r3, #5
 800cfb8:	d826      	bhi.n	800d008 <UART_SetConfig+0x594>
 800cfba:	a201      	add	r2, pc, #4	; (adr r2, 800cfc0 <UART_SetConfig+0x54c>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800cfd9 	.word	0x0800cfd9
 800cfc4:	0800cfe1 	.word	0x0800cfe1
 800cfc8:	0800cfe9 	.word	0x0800cfe9
 800cfcc:	0800cff1 	.word	0x0800cff1
 800cfd0:	0800cff9 	.word	0x0800cff9
 800cfd4:	0800d001 	.word	0x0800d001
 800cfd8:	2302      	movs	r3, #2
 800cfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfde:	e01a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cfe0:	2304      	movs	r3, #4
 800cfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe6:	e016      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cfe8:	2308      	movs	r3, #8
 800cfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfee:	e012      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cff0:	2310      	movs	r3, #16
 800cff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff6:	e00e      	b.n	800d016 <UART_SetConfig+0x5a2>
 800cff8:	2320      	movs	r3, #32
 800cffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cffe:	e00a      	b.n	800d016 <UART_SetConfig+0x5a2>
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d006:	e006      	b.n	800d016 <UART_SetConfig+0x5a2>
 800d008:	2380      	movs	r3, #128	; 0x80
 800d00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d00e:	e002      	b.n	800d016 <UART_SetConfig+0x5a2>
 800d010:	2380      	movs	r3, #128	; 0x80
 800d012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a40      	ldr	r2, [pc, #256]	; (800d11c <UART_SetConfig+0x6a8>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	f040 80ef 	bne.w	800d200 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d026:	2b20      	cmp	r3, #32
 800d028:	dc46      	bgt.n	800d0b8 <UART_SetConfig+0x644>
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	f2c0 8081 	blt.w	800d132 <UART_SetConfig+0x6be>
 800d030:	3b02      	subs	r3, #2
 800d032:	2b1e      	cmp	r3, #30
 800d034:	d87d      	bhi.n	800d132 <UART_SetConfig+0x6be>
 800d036:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <UART_SetConfig+0x5c8>)
 800d038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03c:	0800d0bf 	.word	0x0800d0bf
 800d040:	0800d133 	.word	0x0800d133
 800d044:	0800d0c7 	.word	0x0800d0c7
 800d048:	0800d133 	.word	0x0800d133
 800d04c:	0800d133 	.word	0x0800d133
 800d050:	0800d133 	.word	0x0800d133
 800d054:	0800d0d7 	.word	0x0800d0d7
 800d058:	0800d133 	.word	0x0800d133
 800d05c:	0800d133 	.word	0x0800d133
 800d060:	0800d133 	.word	0x0800d133
 800d064:	0800d133 	.word	0x0800d133
 800d068:	0800d133 	.word	0x0800d133
 800d06c:	0800d133 	.word	0x0800d133
 800d070:	0800d133 	.word	0x0800d133
 800d074:	0800d0e7 	.word	0x0800d0e7
 800d078:	0800d133 	.word	0x0800d133
 800d07c:	0800d133 	.word	0x0800d133
 800d080:	0800d133 	.word	0x0800d133
 800d084:	0800d133 	.word	0x0800d133
 800d088:	0800d133 	.word	0x0800d133
 800d08c:	0800d133 	.word	0x0800d133
 800d090:	0800d133 	.word	0x0800d133
 800d094:	0800d133 	.word	0x0800d133
 800d098:	0800d133 	.word	0x0800d133
 800d09c:	0800d133 	.word	0x0800d133
 800d0a0:	0800d133 	.word	0x0800d133
 800d0a4:	0800d133 	.word	0x0800d133
 800d0a8:	0800d133 	.word	0x0800d133
 800d0ac:	0800d133 	.word	0x0800d133
 800d0b0:	0800d133 	.word	0x0800d133
 800d0b4:	0800d125 	.word	0x0800d125
 800d0b8:	2b40      	cmp	r3, #64	; 0x40
 800d0ba:	d036      	beq.n	800d12a <UART_SetConfig+0x6b6>
 800d0bc:	e039      	b.n	800d132 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d0be:	f7fc fa67 	bl	8009590 <HAL_RCCEx_GetD3PCLK1Freq>
 800d0c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0c4:	e03b      	b.n	800d13e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0c6:	f107 0314 	add.w	r3, r7, #20
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fc fa76 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0d4:	e033      	b.n	800d13e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0d6:	f107 0308 	add.w	r3, r7, #8
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fc fbc2 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0e4:	e02b      	b.n	800d13e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0e6:	4b0a      	ldr	r3, [pc, #40]	; (800d110 <UART_SetConfig+0x69c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 0320 	and.w	r3, r3, #32
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <UART_SetConfig+0x69c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	08db      	lsrs	r3, r3, #3
 800d0f8:	f003 0303 	and.w	r3, r3, #3
 800d0fc:	4a08      	ldr	r2, [pc, #32]	; (800d120 <UART_SetConfig+0x6ac>)
 800d0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d104:	e01b      	b.n	800d13e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d106:	4b06      	ldr	r3, [pc, #24]	; (800d120 <UART_SetConfig+0x6ac>)
 800d108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d10a:	e018      	b.n	800d13e <UART_SetConfig+0x6ca>
 800d10c:	40011400 	.word	0x40011400
 800d110:	58024400 	.word	0x58024400
 800d114:	40007800 	.word	0x40007800
 800d118:	40007c00 	.word	0x40007c00
 800d11c:	58000c00 	.word	0x58000c00
 800d120:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d124:	4bc4      	ldr	r3, [pc, #784]	; (800d438 <UART_SetConfig+0x9c4>)
 800d126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d128:	e009      	b.n	800d13e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d12a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d12e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d130:	e005      	b.n	800d13e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d13c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 81da 	beq.w	800d4fa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	4abc      	ldr	r2, [pc, #752]	; (800d43c <UART_SetConfig+0x9c8>)
 800d14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d150:	461a      	mov	r2, r3
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	fbb3 f3f2 	udiv	r3, r3, r2
 800d158:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	4613      	mov	r3, r2
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4413      	add	r3, r2
 800d164:	6a3a      	ldr	r2, [r7, #32]
 800d166:	429a      	cmp	r2, r3
 800d168:	d305      	bcc.n	800d176 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d170:	6a3a      	ldr	r2, [r7, #32]
 800d172:	429a      	cmp	r2, r3
 800d174:	d903      	bls.n	800d17e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d17c:	e1bd      	b.n	800d4fa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	4618      	mov	r0, r3
 800d182:	f04f 0100 	mov.w	r1, #0
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18a:	4aac      	ldr	r2, [pc, #688]	; (800d43c <UART_SetConfig+0x9c8>)
 800d18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d190:	b29a      	uxth	r2, r3
 800d192:	f04f 0300 	mov.w	r3, #0
 800d196:	f7f3 f8f3 	bl	8000380 <__aeabi_uldivmod>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	4610      	mov	r0, r2
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	f04f 0200 	mov.w	r2, #0
 800d1a6:	f04f 0300 	mov.w	r3, #0
 800d1aa:	020b      	lsls	r3, r1, #8
 800d1ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1b0:	0202      	lsls	r2, r0, #8
 800d1b2:	6879      	ldr	r1, [r7, #4]
 800d1b4:	6849      	ldr	r1, [r1, #4]
 800d1b6:	0849      	lsrs	r1, r1, #1
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	f04f 0100 	mov.w	r1, #0
 800d1be:	1814      	adds	r4, r2, r0
 800d1c0:	eb43 0501 	adc.w	r5, r3, r1
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7f3 f8d5 	bl	8000380 <__aeabi_uldivmod>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4613      	mov	r3, r2
 800d1dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1e4:	d308      	bcc.n	800d1f8 <UART_SetConfig+0x784>
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1ec:	d204      	bcs.n	800d1f8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f4:	60da      	str	r2, [r3, #12]
 800d1f6:	e180      	b.n	800d4fa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d1fe:	e17c      	b.n	800d4fa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d208:	f040 80bf 	bne.w	800d38a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d20c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d210:	2b20      	cmp	r3, #32
 800d212:	dc49      	bgt.n	800d2a8 <UART_SetConfig+0x834>
 800d214:	2b00      	cmp	r3, #0
 800d216:	db7c      	blt.n	800d312 <UART_SetConfig+0x89e>
 800d218:	2b20      	cmp	r3, #32
 800d21a:	d87a      	bhi.n	800d312 <UART_SetConfig+0x89e>
 800d21c:	a201      	add	r2, pc, #4	; (adr r2, 800d224 <UART_SetConfig+0x7b0>)
 800d21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d222:	bf00      	nop
 800d224:	0800d2af 	.word	0x0800d2af
 800d228:	0800d2b7 	.word	0x0800d2b7
 800d22c:	0800d313 	.word	0x0800d313
 800d230:	0800d313 	.word	0x0800d313
 800d234:	0800d2bf 	.word	0x0800d2bf
 800d238:	0800d313 	.word	0x0800d313
 800d23c:	0800d313 	.word	0x0800d313
 800d240:	0800d313 	.word	0x0800d313
 800d244:	0800d2cf 	.word	0x0800d2cf
 800d248:	0800d313 	.word	0x0800d313
 800d24c:	0800d313 	.word	0x0800d313
 800d250:	0800d313 	.word	0x0800d313
 800d254:	0800d313 	.word	0x0800d313
 800d258:	0800d313 	.word	0x0800d313
 800d25c:	0800d313 	.word	0x0800d313
 800d260:	0800d313 	.word	0x0800d313
 800d264:	0800d2df 	.word	0x0800d2df
 800d268:	0800d313 	.word	0x0800d313
 800d26c:	0800d313 	.word	0x0800d313
 800d270:	0800d313 	.word	0x0800d313
 800d274:	0800d313 	.word	0x0800d313
 800d278:	0800d313 	.word	0x0800d313
 800d27c:	0800d313 	.word	0x0800d313
 800d280:	0800d313 	.word	0x0800d313
 800d284:	0800d313 	.word	0x0800d313
 800d288:	0800d313 	.word	0x0800d313
 800d28c:	0800d313 	.word	0x0800d313
 800d290:	0800d313 	.word	0x0800d313
 800d294:	0800d313 	.word	0x0800d313
 800d298:	0800d313 	.word	0x0800d313
 800d29c:	0800d313 	.word	0x0800d313
 800d2a0:	0800d313 	.word	0x0800d313
 800d2a4:	0800d305 	.word	0x0800d305
 800d2a8:	2b40      	cmp	r3, #64	; 0x40
 800d2aa:	d02e      	beq.n	800d30a <UART_SetConfig+0x896>
 800d2ac:	e031      	b.n	800d312 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ae:	f7fa fcef 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800d2b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2b4:	e033      	b.n	800d31e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2b6:	f7fa fd01 	bl	8007cbc <HAL_RCC_GetPCLK2Freq>
 800d2ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2bc:	e02f      	b.n	800d31e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2be:	f107 0314 	add.w	r3, r7, #20
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fc f97a 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2cc:	e027      	b.n	800d31e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2ce:	f107 0308 	add.w	r3, r7, #8
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fc fac6 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2dc:	e01f      	b.n	800d31e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2de:	4b58      	ldr	r3, [pc, #352]	; (800d440 <UART_SetConfig+0x9cc>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 0320 	and.w	r3, r3, #32
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d009      	beq.n	800d2fe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2ea:	4b55      	ldr	r3, [pc, #340]	; (800d440 <UART_SetConfig+0x9cc>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	08db      	lsrs	r3, r3, #3
 800d2f0:	f003 0303 	and.w	r3, r3, #3
 800d2f4:	4a53      	ldr	r2, [pc, #332]	; (800d444 <UART_SetConfig+0x9d0>)
 800d2f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2fc:	e00f      	b.n	800d31e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d2fe:	4b51      	ldr	r3, [pc, #324]	; (800d444 <UART_SetConfig+0x9d0>)
 800d300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d302:	e00c      	b.n	800d31e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d304:	4b4c      	ldr	r3, [pc, #304]	; (800d438 <UART_SetConfig+0x9c4>)
 800d306:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d308:	e009      	b.n	800d31e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d30a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d30e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d310:	e005      	b.n	800d31e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d312:	2300      	movs	r3, #0
 800d314:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d316:	2301      	movs	r3, #1
 800d318:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d31c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 80ea 	beq.w	800d4fa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	4a44      	ldr	r2, [pc, #272]	; (800d43c <UART_SetConfig+0x9c8>)
 800d32c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d330:	461a      	mov	r2, r3
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	fbb3 f3f2 	udiv	r3, r3, r2
 800d338:	005a      	lsls	r2, r3, #1
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	085b      	lsrs	r3, r3, #1
 800d340:	441a      	add	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	fbb2 f3f3 	udiv	r3, r2, r3
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	2b0f      	cmp	r3, #15
 800d352:	d916      	bls.n	800d382 <UART_SetConfig+0x90e>
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d35a:	d212      	bcs.n	800d382 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f023 030f 	bic.w	r3, r3, #15
 800d364:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	085b      	lsrs	r3, r3, #1
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f003 0307 	and.w	r3, r3, #7
 800d370:	b29a      	uxth	r2, r3
 800d372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d374:	4313      	orrs	r3, r2
 800d376:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d37e:	60da      	str	r2, [r3, #12]
 800d380:	e0bb      	b.n	800d4fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d388:	e0b7      	b.n	800d4fa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d38a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d38e:	2b20      	cmp	r3, #32
 800d390:	dc4a      	bgt.n	800d428 <UART_SetConfig+0x9b4>
 800d392:	2b00      	cmp	r3, #0
 800d394:	f2c0 8086 	blt.w	800d4a4 <UART_SetConfig+0xa30>
 800d398:	2b20      	cmp	r3, #32
 800d39a:	f200 8083 	bhi.w	800d4a4 <UART_SetConfig+0xa30>
 800d39e:	a201      	add	r2, pc, #4	; (adr r2, 800d3a4 <UART_SetConfig+0x930>)
 800d3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a4:	0800d42f 	.word	0x0800d42f
 800d3a8:	0800d449 	.word	0x0800d449
 800d3ac:	0800d4a5 	.word	0x0800d4a5
 800d3b0:	0800d4a5 	.word	0x0800d4a5
 800d3b4:	0800d451 	.word	0x0800d451
 800d3b8:	0800d4a5 	.word	0x0800d4a5
 800d3bc:	0800d4a5 	.word	0x0800d4a5
 800d3c0:	0800d4a5 	.word	0x0800d4a5
 800d3c4:	0800d461 	.word	0x0800d461
 800d3c8:	0800d4a5 	.word	0x0800d4a5
 800d3cc:	0800d4a5 	.word	0x0800d4a5
 800d3d0:	0800d4a5 	.word	0x0800d4a5
 800d3d4:	0800d4a5 	.word	0x0800d4a5
 800d3d8:	0800d4a5 	.word	0x0800d4a5
 800d3dc:	0800d4a5 	.word	0x0800d4a5
 800d3e0:	0800d4a5 	.word	0x0800d4a5
 800d3e4:	0800d471 	.word	0x0800d471
 800d3e8:	0800d4a5 	.word	0x0800d4a5
 800d3ec:	0800d4a5 	.word	0x0800d4a5
 800d3f0:	0800d4a5 	.word	0x0800d4a5
 800d3f4:	0800d4a5 	.word	0x0800d4a5
 800d3f8:	0800d4a5 	.word	0x0800d4a5
 800d3fc:	0800d4a5 	.word	0x0800d4a5
 800d400:	0800d4a5 	.word	0x0800d4a5
 800d404:	0800d4a5 	.word	0x0800d4a5
 800d408:	0800d4a5 	.word	0x0800d4a5
 800d40c:	0800d4a5 	.word	0x0800d4a5
 800d410:	0800d4a5 	.word	0x0800d4a5
 800d414:	0800d4a5 	.word	0x0800d4a5
 800d418:	0800d4a5 	.word	0x0800d4a5
 800d41c:	0800d4a5 	.word	0x0800d4a5
 800d420:	0800d4a5 	.word	0x0800d4a5
 800d424:	0800d497 	.word	0x0800d497
 800d428:	2b40      	cmp	r3, #64	; 0x40
 800d42a:	d037      	beq.n	800d49c <UART_SetConfig+0xa28>
 800d42c:	e03a      	b.n	800d4a4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d42e:	f7fa fc2f 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800d432:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d434:	e03c      	b.n	800d4b0 <UART_SetConfig+0xa3c>
 800d436:	bf00      	nop
 800d438:	003d0900 	.word	0x003d0900
 800d43c:	08015cf8 	.word	0x08015cf8
 800d440:	58024400 	.word	0x58024400
 800d444:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d448:	f7fa fc38 	bl	8007cbc <HAL_RCC_GetPCLK2Freq>
 800d44c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d44e:	e02f      	b.n	800d4b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d450:	f107 0314 	add.w	r3, r7, #20
 800d454:	4618      	mov	r0, r3
 800d456:	f7fc f8b1 	bl	80095bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d45e:	e027      	b.n	800d4b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	4618      	mov	r0, r3
 800d466:	f7fc f9fd 	bl	8009864 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d46e:	e01f      	b.n	800d4b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d470:	4b2c      	ldr	r3, [pc, #176]	; (800d524 <UART_SetConfig+0xab0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f003 0320 	and.w	r3, r3, #32
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d009      	beq.n	800d490 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d47c:	4b29      	ldr	r3, [pc, #164]	; (800d524 <UART_SetConfig+0xab0>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	08db      	lsrs	r3, r3, #3
 800d482:	f003 0303 	and.w	r3, r3, #3
 800d486:	4a28      	ldr	r2, [pc, #160]	; (800d528 <UART_SetConfig+0xab4>)
 800d488:	fa22 f303 	lsr.w	r3, r2, r3
 800d48c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d48e:	e00f      	b.n	800d4b0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d490:	4b25      	ldr	r3, [pc, #148]	; (800d528 <UART_SetConfig+0xab4>)
 800d492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d494:	e00c      	b.n	800d4b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d496:	4b25      	ldr	r3, [pc, #148]	; (800d52c <UART_SetConfig+0xab8>)
 800d498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d49a:	e009      	b.n	800d4b0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d49c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4a2:	e005      	b.n	800d4b0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d4ae:	bf00      	nop
    }

    if (pclk != 0U)
 800d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d021      	beq.n	800d4fa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	4a1d      	ldr	r2, [pc, #116]	; (800d530 <UART_SetConfig+0xabc>)
 800d4bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	085b      	lsrs	r3, r3, #1
 800d4ce:	441a      	add	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	2b0f      	cmp	r3, #15
 800d4e0:	d908      	bls.n	800d4f4 <UART_SetConfig+0xa80>
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4e8:	d204      	bcs.n	800d4f4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4f0:	60da      	str	r2, [r3, #12]
 800d4f2:	e002      	b.n	800d4fa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2201      	movs	r2, #1
 800d506:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d516:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3738      	adds	r7, #56	; 0x38
 800d51e:	46bd      	mov	sp, r7
 800d520:	bdb0      	pop	{r4, r5, r7, pc}
 800d522:	bf00      	nop
 800d524:	58024400 	.word	0x58024400
 800d528:	03d09000 	.word	0x03d09000
 800d52c:	003d0900 	.word	0x003d0900
 800d530:	08015cf8 	.word	0x08015cf8

0800d534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00a      	beq.n	800d55e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	f003 0302 	and.w	r3, r3, #2
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00a      	beq.n	800d580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d584:	f003 0304 	and.w	r3, r3, #4
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00a      	beq.n	800d5a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a6:	f003 0308 	and.w	r3, r3, #8
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00a      	beq.n	800d5c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c8:	f003 0310 	and.w	r3, r3, #16
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00a      	beq.n	800d5e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ea:	f003 0320 	and.w	r3, r3, #32
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00a      	beq.n	800d608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	430a      	orrs	r2, r1
 800d606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d610:	2b00      	cmp	r3, #0
 800d612:	d01a      	beq.n	800d64a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	430a      	orrs	r2, r1
 800d628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d62e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d632:	d10a      	bne.n	800d64a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	430a      	orrs	r2, r1
 800d648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00a      	beq.n	800d66c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	430a      	orrs	r2, r1
 800d66a:	605a      	str	r2, [r3, #4]
  }
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af02      	add	r7, sp, #8
 800d67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d688:	f7f4 fb74 	bl	8001d74 <HAL_GetTick>
 800d68c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f003 0308 	and.w	r3, r3, #8
 800d698:	2b08      	cmp	r3, #8
 800d69a:	d10e      	bne.n	800d6ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d69c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f82f 	bl	800d70e <UART_WaitOnFlagUntilTimeout>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	e025      	b.n	800d706 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 0304 	and.w	r3, r3, #4
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	d10e      	bne.n	800d6e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f819 	bl	800d70e <UART_WaitOnFlagUntilTimeout>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6e2:	2303      	movs	r3, #3
 800d6e4:	e00f      	b.n	800d706 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2220      	movs	r2, #32
 800d6f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	603b      	str	r3, [r7, #0]
 800d71a:	4613      	mov	r3, r2
 800d71c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d71e:	e062      	b.n	800d7e6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d726:	d05e      	beq.n	800d7e6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d728:	f7f4 fb24 	bl	8001d74 <HAL_GetTick>
 800d72c:	4602      	mov	r2, r0
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	69ba      	ldr	r2, [r7, #24]
 800d734:	429a      	cmp	r2, r3
 800d736:	d302      	bcc.n	800d73e <UART_WaitOnFlagUntilTimeout+0x30>
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d11d      	bne.n	800d77a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d74c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	689a      	ldr	r2, [r3, #8]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0201 	bic.w	r2, r2, #1
 800d75c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2220      	movs	r2, #32
 800d762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2220      	movs	r2, #32
 800d76a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d776:	2303      	movs	r3, #3
 800d778:	e045      	b.n	800d806 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f003 0304 	and.w	r3, r3, #4
 800d784:	2b00      	cmp	r3, #0
 800d786:	d02e      	beq.n	800d7e6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	69db      	ldr	r3, [r3, #28]
 800d78e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d796:	d126      	bne.n	800d7e6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d7b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	689a      	ldr	r2, [r3, #8]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f022 0201 	bic.w	r2, r2, #1
 800d7c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2220      	movs	r2, #32
 800d7ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2220      	movs	r2, #32
 800d7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e00f      	b.n	800d806 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	69da      	ldr	r2, [r3, #28]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	bf0c      	ite	eq
 800d7f6:	2301      	moveq	r3, #1
 800d7f8:	2300      	movne	r3, #0
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	429a      	cmp	r2, r3
 800d802:	d08d      	beq.n	800d720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
	...

0800d810 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	88fa      	ldrh	r2, [r7, #6]
 800d828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2222      	movs	r2, #34	; 0x22
 800d838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d840:	2b00      	cmp	r3, #0
 800d842:	d02c      	beq.n	800d89e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d848:	4a25      	ldr	r2, [pc, #148]	; (800d8e0 <UART_Start_Receive_DMA+0xd0>)
 800d84a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d850:	4a24      	ldr	r2, [pc, #144]	; (800d8e4 <UART_Start_Receive_DMA+0xd4>)
 800d852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d858:	4a23      	ldr	r2, [pc, #140]	; (800d8e8 <UART_Start_Receive_DMA+0xd8>)
 800d85a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d860:	2200      	movs	r2, #0
 800d862:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	3324      	adds	r3, #36	; 0x24
 800d86e:	4619      	mov	r1, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d874:	461a      	mov	r2, r3
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	f7f6 fdb8 	bl	80043ec <HAL_DMA_Start_IT>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00d      	beq.n	800d89e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2210      	movs	r2, #16
 800d886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2220      	movs	r2, #32
 800d896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e01c      	b.n	800d8d8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8b4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f042 0201 	orr.w	r2, r2, #1
 800d8c4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	689a      	ldr	r2, [r3, #8]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8d4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	0800d98d 	.word	0x0800d98d
 800d8e4:	0800da23 	.word	0x0800da23
 800d8e8:	0800da5b 	.word	0x0800da5b

0800d8ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d902:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689a      	ldr	r2, [r3, #8]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d912:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2220      	movs	r2, #32
 800d918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d93e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6899      	ldr	r1, [r3, #8]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	4b0f      	ldr	r3, [pc, #60]	; (800d988 <UART_EndRxTransfer+0x60>)
 800d94c:	400b      	ands	r3, r1
 800d94e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d954:	2b01      	cmp	r3, #1
 800d956:	d107      	bne.n	800d968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f022 0210 	bic.w	r2, r2, #16
 800d966:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2220      	movs	r2, #32
 800d96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	effffffe 	.word	0xeffffffe

0800d98c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d998:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	69db      	ldr	r3, [r3, #28]
 800d99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9a2:	d02b      	beq.n	800d9fc <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9ba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	689a      	ldr	r2, [r3, #8]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f022 0201 	bic.w	r2, r2, #1
 800d9ca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689a      	ldr	r2, [r3, #8]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9da:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2220      	movs	r2, #32
 800d9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d107      	bne.n	800d9fc <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f022 0210 	bic.w	r2, r2, #16
 800d9fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da00:	2b01      	cmp	r3, #1
 800da02:	d107      	bne.n	800da14 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da0a:	4619      	mov	r1, r3
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f7ff f825 	bl	800ca5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da12:	e002      	b.n	800da1a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f7f3 f96d 	bl	8000cf4 <HAL_UART_RxCpltCallback>
}
 800da1a:	bf00      	nop
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b084      	sub	sp, #16
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da34:	2b01      	cmp	r3, #1
 800da36:	d109      	bne.n	800da4c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da3e:	085b      	lsrs	r3, r3, #1
 800da40:	b29b      	uxth	r3, r3
 800da42:	4619      	mov	r1, r3
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f7ff f809 	bl	800ca5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da4a:	e002      	b.n	800da52 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7fe fff1 	bl	800ca34 <HAL_UART_RxHalfCpltCallback>
}
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b086      	sub	sp, #24
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da66:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da6e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da82:	2b80      	cmp	r3, #128	; 0x80
 800da84:	d109      	bne.n	800da9a <UART_DMAError+0x40>
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2b21      	cmp	r3, #33	; 0x21
 800da8a:	d106      	bne.n	800da9a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da94:	6978      	ldr	r0, [r7, #20]
 800da96:	f7ff ff29 	bl	800d8ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daa4:	2b40      	cmp	r3, #64	; 0x40
 800daa6:	d109      	bne.n	800dabc <UART_DMAError+0x62>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2b22      	cmp	r3, #34	; 0x22
 800daac:	d106      	bne.n	800dabc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dab6:	6978      	ldr	r0, [r7, #20]
 800dab8:	f7ff ff36 	bl	800d928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac2:	f043 0210 	orr.w	r2, r3, #16
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dacc:	6978      	ldr	r0, [r7, #20]
 800dace:	f7fe ffbb 	bl	800ca48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dad2:	bf00      	nop
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f7fe ffa5 	bl	800ca48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dafe:	bf00      	nop
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b082      	sub	sp, #8
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db1c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2220      	movs	r2, #32
 800db22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7fe ff77 	bl	800ca20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db32:	bf00      	nop
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db42:	bf00      	nop
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db4e:	b480      	push	{r7}
 800db50:	b083      	sub	sp, #12
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db56:	bf00      	nop
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db6a:	bf00      	nop
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db76:	b480      	push	{r7}
 800db78:	b085      	sub	sp, #20
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db84:	2b01      	cmp	r3, #1
 800db86:	d101      	bne.n	800db8c <HAL_UARTEx_DisableFifoMode+0x16>
 800db88:	2302      	movs	r3, #2
 800db8a:	e027      	b.n	800dbdc <HAL_UARTEx_DisableFifoMode+0x66>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2224      	movs	r2, #36	; 0x24
 800db98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f022 0201 	bic.w	r2, r2, #1
 800dbb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2220      	movs	r2, #32
 800dbce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d101      	bne.n	800dc00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	e02d      	b.n	800dc5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2224      	movs	r2, #36	; 0x24
 800dc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 0201 	bic.w	r2, r2, #1
 800dc26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	430a      	orrs	r2, r1
 800dc3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f84f 	bl	800dce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d101      	bne.n	800dc7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	e02d      	b.n	800dcd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2224      	movs	r2, #36	; 0x24
 800dc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f022 0201 	bic.w	r2, r2, #1
 800dca2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f811 	bl	800dce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d108      	bne.n	800dd02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd00:	e031      	b.n	800dd66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd02:	2310      	movs	r3, #16
 800dd04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd06:	2310      	movs	r3, #16
 800dd08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	0e5b      	lsrs	r3, r3, #25
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	f003 0307 	and.w	r3, r3, #7
 800dd18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	0f5b      	lsrs	r3, r3, #29
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	f003 0307 	and.w	r3, r3, #7
 800dd28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd2a:	7bbb      	ldrb	r3, [r7, #14]
 800dd2c:	7b3a      	ldrb	r2, [r7, #12]
 800dd2e:	4911      	ldr	r1, [pc, #68]	; (800dd74 <UARTEx_SetNbDataToProcess+0x94>)
 800dd30:	5c8a      	ldrb	r2, [r1, r2]
 800dd32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd36:	7b3a      	ldrb	r2, [r7, #12]
 800dd38:	490f      	ldr	r1, [pc, #60]	; (800dd78 <UARTEx_SetNbDataToProcess+0x98>)
 800dd3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
 800dd4a:	7b7a      	ldrb	r2, [r7, #13]
 800dd4c:	4909      	ldr	r1, [pc, #36]	; (800dd74 <UARTEx_SetNbDataToProcess+0x94>)
 800dd4e:	5c8a      	ldrb	r2, [r1, r2]
 800dd50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd54:	7b7a      	ldrb	r2, [r7, #13]
 800dd56:	4908      	ldr	r1, [pc, #32]	; (800dd78 <UARTEx_SetNbDataToProcess+0x98>)
 800dd58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	08015d10 	.word	0x08015d10
 800dd78:	08015d18 	.word	0x08015d18

0800dd7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	b480      	push	{r7}
 800dd80:	b085      	sub	sp, #20
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	f107 001c 	add.w	r0, r7, #28
 800dd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dd92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dd94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dd96:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dd9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800dd9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800dda2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	4b07      	ldr	r3, [pc, #28]	; (800ddcc <SDMMC_Init+0x50>)
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	b004      	add	sp, #16
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	ffc02c00 	.word	0xffc02c00

0800ddd0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	370c      	adds	r7, #12
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ddea:	b480      	push	{r7}
 800ddec:	b083      	sub	sp, #12
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f043 0203 	orr.w	r2, r3, #3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	370c      	adds	r7, #12
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800de2e:	b480      	push	{r7}
 800de30:	b083      	sub	sp, #12
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f003 0303 	and.w	r3, r3, #3
}
 800de3e:	4618      	mov	r0, r3
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
	...

0800de4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800de6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800de70:	431a      	orrs	r2, r3
                       Command->CPSM);
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800de76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68da      	ldr	r2, [r3, #12]
 800de82:	4b06      	ldr	r3, [pc, #24]	; (800de9c <SDMMC_SendCommand+0x50>)
 800de84:	4013      	ands	r3, r2
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	431a      	orrs	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr
 800de9c:	fffee0c0 	.word	0xfffee0c0

0800dea0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	b2db      	uxtb	r3, r3
}
 800deae:	4618      	mov	r0, r3
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800deba:	b480      	push	{r7}
 800debc:	b085      	sub	sp, #20
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3314      	adds	r3, #20
 800dec8:	461a      	mov	r2, r3
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	4413      	add	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	685a      	ldr	r2, [r3, #4]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800df06:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800df0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800df12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	431a      	orrs	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800df2a:	2300      	movs	r3, #0

}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800df46:	2310      	movs	r3, #16
 800df48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df50:	2300      	movs	r3, #0
 800df52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df5a:	f107 0308 	add.w	r3, r7, #8
 800df5e:	4619      	mov	r1, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff ff73 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800df66:	f241 3288 	movw	r2, #5000	; 0x1388
 800df6a:	2110      	movs	r1, #16
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fa5f 	bl	800e430 <SDMMC_GetCmdResp1>
 800df72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df74:	69fb      	ldr	r3, [r7, #28]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3720      	adds	r7, #32
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b088      	sub	sp, #32
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800df8c:	2311      	movs	r3, #17
 800df8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df96:	2300      	movs	r3, #0
 800df98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfa0:	f107 0308 	add.w	r3, r7, #8
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7ff ff50 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dfac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb0:	2111      	movs	r1, #17
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 fa3c 	bl	800e430 <SDMMC_GetCmdResp1>
 800dfb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfba:	69fb      	ldr	r3, [r7, #28]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3720      	adds	r7, #32
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dfd2:	2312      	movs	r3, #18
 800dfd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfe6:	f107 0308 	add.w	r3, r7, #8
 800dfea:	4619      	mov	r1, r3
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7ff ff2d 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dff6:	2112      	movs	r1, #18
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f000 fa19 	bl	800e430 <SDMMC_GetCmdResp1>
 800dffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e000:	69fb      	ldr	r3, [r7, #28]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3720      	adds	r7, #32
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b088      	sub	sp, #32
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
 800e012:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e018:	2318      	movs	r3, #24
 800e01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e022:	2300      	movs	r3, #0
 800e024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e02c:	f107 0308 	add.w	r3, r7, #8
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7ff ff0a 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e038:	f241 3288 	movw	r2, #5000	; 0x1388
 800e03c:	2118      	movs	r1, #24
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 f9f6 	bl	800e430 <SDMMC_GetCmdResp1>
 800e044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e046:	69fb      	ldr	r3, [r7, #28]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3720      	adds	r7, #32
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e05e:	2319      	movs	r3, #25
 800e060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e062:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e068:	2300      	movs	r3, #0
 800e06a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e06c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e072:	f107 0308 	add.w	r3, r7, #8
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7ff fee7 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e07e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e082:	2119      	movs	r1, #25
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f9d3 	bl	800e430 <SDMMC_GetCmdResp1>
 800e08a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e08c:	69fb      	ldr	r3, [r7, #28]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3720      	adds	r7, #32
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
	...

0800e098 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e0a4:	230c      	movs	r3, #12
 800e0a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0b6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0d0:	f107 0308 	add.w	r3, r7, #8
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff feb8 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e0dc:	4a0b      	ldr	r2, [pc, #44]	; (800e10c <SDMMC_CmdStopTransfer+0x74>)
 800e0de:	210c      	movs	r1, #12
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f9a5 	bl	800e430 <SDMMC_GetCmdResp1>
 800e0e6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0fa:	d101      	bne.n	800e100 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e100:	69fb      	ldr	r3, [r7, #28]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3720      	adds	r7, #32
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	05f5e100 	.word	0x05f5e100

0800e110 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b088      	sub	sp, #32
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e11e:	2307      	movs	r3, #7
 800e120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e128:	2300      	movs	r3, #0
 800e12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e12c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e132:	f107 0308 	add.w	r3, r7, #8
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff fe87 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e142:	2107      	movs	r1, #7
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 f973 	bl	800e430 <SDMMC_GetCmdResp1>
 800e14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e14c:	69fb      	ldr	r3, [r7, #28]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b088      	sub	sp, #32
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e166:	2300      	movs	r3, #0
 800e168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e16a:	2300      	movs	r3, #0
 800e16c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e16e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e174:	f107 0308 	add.w	r3, r7, #8
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f7ff fe66 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fb97 	bl	800e8b4 <SDMMC_GetCmdError>
 800e186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e188:	69fb      	ldr	r3, [r7, #28]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3720      	adds	r7, #32
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b088      	sub	sp, #32
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e19a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e19e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e1a0:	2308      	movs	r3, #8
 800e1a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1b4:	f107 0308 	add.w	r3, r7, #8
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fe46 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fb29 	bl	800e818 <SDMMC_GetCmdResp7>
 800e1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3720      	adds	r7, #32
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b088      	sub	sp, #32
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e1e0:	2337      	movs	r3, #55	; 0x37
 800e1e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1f4:	f107 0308 	add.w	r3, r7, #8
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff fe26 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e200:	f241 3288 	movw	r2, #5000	; 0x1388
 800e204:	2137      	movs	r1, #55	; 0x37
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f912 	bl	800e430 <SDMMC_GetCmdResp1>
 800e20c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e20e:	69fb      	ldr	r3, [r7, #28]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3720      	adds	r7, #32
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b088      	sub	sp, #32
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e226:	2329      	movs	r3, #41	; 0x29
 800e228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e22a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e22e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e230:	2300      	movs	r3, #0
 800e232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e23a:	f107 0308 	add.w	r3, r7, #8
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fe03 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fa2e 	bl	800e6a8 <SDMMC_GetCmdResp3>
 800e24c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e24e:	69fb      	ldr	r3, [r7, #28]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3720      	adds	r7, #32
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e266:	2306      	movs	r3, #6
 800e268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e26a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e26e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e270:	2300      	movs	r3, #0
 800e272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e27a:	f107 0308 	add.w	r3, r7, #8
 800e27e:	4619      	mov	r1, r3
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff fde3 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e286:	f241 3288 	movw	r2, #5000	; 0x1388
 800e28a:	2106      	movs	r1, #6
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f8cf 	bl	800e430 <SDMMC_GetCmdResp1>
 800e292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e294:	69fb      	ldr	r3, [r7, #28]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3720      	adds	r7, #32
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b088      	sub	sp, #32
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e2aa:	2333      	movs	r3, #51	; 0x33
 800e2ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2be:	f107 0308 	add.w	r3, r7, #8
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff fdc1 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e2ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2ce:	2133      	movs	r1, #51	; 0x33
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f8ad 	bl	800e430 <SDMMC_GetCmdResp1>
 800e2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2d8:	69fb      	ldr	r3, [r7, #28]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3720      	adds	r7, #32
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b088      	sub	sp, #32
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e2f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e2f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e302:	f107 0308 	add.w	r3, r7, #8
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff fd9f 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 f980 	bl	800e614 <SDMMC_GetCmdResp2>
 800e314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e316:	69fb      	ldr	r3, [r7, #28]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3720      	adds	r7, #32
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b088      	sub	sp, #32
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e32e:	2309      	movs	r3, #9
 800e330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e332:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e338:	2300      	movs	r3, #0
 800e33a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e33c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e340:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e342:	f107 0308 	add.w	r3, r7, #8
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff fd7f 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f960 	bl	800e614 <SDMMC_GetCmdResp2>
 800e354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e356:	69fb      	ldr	r3, [r7, #28]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3720      	adds	r7, #32
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e36a:	2300      	movs	r3, #0
 800e36c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e36e:	2303      	movs	r3, #3
 800e370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e372:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e378:	2300      	movs	r3, #0
 800e37a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e37c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e382:	f107 0308 	add.w	r3, r7, #8
 800e386:	4619      	mov	r1, r3
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff fd5f 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	2103      	movs	r1, #3
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f9c8 	bl	800e728 <SDMMC_GetCmdResp6>
 800e398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e39a:	69fb      	ldr	r3, [r7, #28]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3720      	adds	r7, #32
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b088      	sub	sp, #32
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e3b2:	230d      	movs	r3, #13
 800e3b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff fd3d 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e3d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3d6:	210d      	movs	r1, #13
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f829 	bl	800e430 <SDMMC_GetCmdResp1>
 800e3de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3e0:	69fb      	ldr	r3, [r7, #28]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3720      	adds	r7, #32
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b088      	sub	sp, #32
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e3f6:	230d      	movs	r3, #13
 800e3f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e400:	2300      	movs	r3, #0
 800e402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff fd1b 	bl	800de4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e416:	f241 3288 	movw	r2, #5000	; 0x1388
 800e41a:	210d      	movs	r1, #13
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f807 	bl	800e430 <SDMMC_GetCmdResp1>
 800e422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e424:	69fb      	ldr	r3, [r7, #28]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
	...

0800e430 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b088      	sub	sp, #32
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	460b      	mov	r3, r1
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e43e:	4b70      	ldr	r3, [pc, #448]	; (800e600 <SDMMC_GetCmdResp1+0x1d0>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a70      	ldr	r2, [pc, #448]	; (800e604 <SDMMC_GetCmdResp1+0x1d4>)
 800e444:	fba2 2303 	umull	r2, r3, r2, r3
 800e448:	0a5a      	lsrs	r2, r3, #9
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	fb02 f303 	mul.w	r3, r2, r3
 800e450:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	1e5a      	subs	r2, r3, #1
 800e456:	61fa      	str	r2, [r7, #28]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d102      	bne.n	800e462 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e45c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e460:	e0c9      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e466:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e468:	69ba      	ldr	r2, [r7, #24]
 800e46a:	4b67      	ldr	r3, [pc, #412]	; (800e608 <SDMMC_GetCmdResp1+0x1d8>)
 800e46c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0ef      	beq.n	800e452 <SDMMC_GetCmdResp1+0x22>
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1ea      	bne.n	800e452 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e480:	f003 0304 	and.w	r3, r3, #4
 800e484:	2b00      	cmp	r3, #0
 800e486:	d004      	beq.n	800e492 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2204      	movs	r2, #4
 800e48c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e48e:	2304      	movs	r3, #4
 800e490:	e0b1      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e496:	f003 0301 	and.w	r3, r3, #1
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d004      	beq.n	800e4a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e0a6      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4a58      	ldr	r2, [pc, #352]	; (800e60c <SDMMC_GetCmdResp1+0x1dc>)
 800e4ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7ff fcf6 	bl	800dea0 <SDMMC_GetCommandResponse>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d001      	beq.n	800e4c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e099      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7ff fcf8 	bl	800deba <SDMMC_GetResponse>
 800e4ca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	4b50      	ldr	r3, [pc, #320]	; (800e610 <SDMMC_GetCmdResp1+0x1e0>)
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e08d      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	da02      	bge.n	800e4e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e4e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4e4:	e087      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e4f0:	2340      	movs	r3, #64	; 0x40
 800e4f2:	e080      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e4fe:	2380      	movs	r3, #128	; 0x80
 800e500:	e079      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e50c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e510:	e071      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e51c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e520:	e069      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d002      	beq.n	800e532 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e530:	e061      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e53c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e540:	e059      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e54c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e550:	e051      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e55c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e560:	e049      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e56c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e570:	e041      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e57c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e580:	e039      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e58c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e590:	e031      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e59c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e5a0:	e029      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e5b0:	e021      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e5bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e5c0:	e019      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e5cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e5d0:	e011      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e5dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e5e0:	e009      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	f003 0308 	and.w	r3, r3, #8
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e5ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e5f0:	e001      	b.n	800e5f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e5f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3720      	adds	r7, #32
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	24000000 	.word	0x24000000
 800e604:	10624dd3 	.word	0x10624dd3
 800e608:	00200045 	.word	0x00200045
 800e60c:	002000c5 	.word	0x002000c5
 800e610:	fdffe008 	.word	0xfdffe008

0800e614 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e61c:	4b1f      	ldr	r3, [pc, #124]	; (800e69c <SDMMC_GetCmdResp2+0x88>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a1f      	ldr	r2, [pc, #124]	; (800e6a0 <SDMMC_GetCmdResp2+0x8c>)
 800e622:	fba2 2303 	umull	r2, r3, r2, r3
 800e626:	0a5b      	lsrs	r3, r3, #9
 800e628:	f241 3288 	movw	r2, #5000	; 0x1388
 800e62c:	fb02 f303 	mul.w	r3, r2, r3
 800e630:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	1e5a      	subs	r2, r3, #1
 800e636:	60fa      	str	r2, [r7, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d102      	bne.n	800e642 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e63c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e640:	e026      	b.n	800e690 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e646:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0ef      	beq.n	800e632 <SDMMC_GetCmdResp2+0x1e>
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1ea      	bne.n	800e632 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e660:	f003 0304 	and.w	r3, r3, #4
 800e664:	2b00      	cmp	r3, #0
 800e666:	d004      	beq.n	800e672 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2204      	movs	r2, #4
 800e66c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e66e:	2304      	movs	r3, #4
 800e670:	e00e      	b.n	800e690 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e676:	f003 0301 	and.w	r3, r3, #1
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d004      	beq.n	800e688 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2201      	movs	r2, #1
 800e682:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e684:	2301      	movs	r3, #1
 800e686:	e003      	b.n	800e690 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4a06      	ldr	r2, [pc, #24]	; (800e6a4 <SDMMC_GetCmdResp2+0x90>)
 800e68c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3714      	adds	r7, #20
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	24000000 	.word	0x24000000
 800e6a0:	10624dd3 	.word	0x10624dd3
 800e6a4:	002000c5 	.word	0x002000c5

0800e6a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e6b0:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <SDMMC_GetCmdResp3+0x74>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a1a      	ldr	r2, [pc, #104]	; (800e720 <SDMMC_GetCmdResp3+0x78>)
 800e6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ba:	0a5b      	lsrs	r3, r3, #9
 800e6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6c0:	fb02 f303 	mul.w	r3, r2, r3
 800e6c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	1e5a      	subs	r2, r3, #1
 800e6ca:	60fa      	str	r2, [r7, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6d4:	e01b      	b.n	800e70e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0ef      	beq.n	800e6c6 <SDMMC_GetCmdResp3+0x1e>
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d1ea      	bne.n	800e6c6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f4:	f003 0304 	and.w	r3, r3, #4
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d004      	beq.n	800e706 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2204      	movs	r2, #4
 800e700:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e702:	2304      	movs	r3, #4
 800e704:	e003      	b.n	800e70e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a06      	ldr	r2, [pc, #24]	; (800e724 <SDMMC_GetCmdResp3+0x7c>)
 800e70a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	24000000 	.word	0x24000000
 800e720:	10624dd3 	.word	0x10624dd3
 800e724:	002000c5 	.word	0x002000c5

0800e728 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b088      	sub	sp, #32
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	460b      	mov	r3, r1
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e736:	4b35      	ldr	r3, [pc, #212]	; (800e80c <SDMMC_GetCmdResp6+0xe4>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a35      	ldr	r2, [pc, #212]	; (800e810 <SDMMC_GetCmdResp6+0xe8>)
 800e73c:	fba2 2303 	umull	r2, r3, r2, r3
 800e740:	0a5b      	lsrs	r3, r3, #9
 800e742:	f241 3288 	movw	r2, #5000	; 0x1388
 800e746:	fb02 f303 	mul.w	r3, r2, r3
 800e74a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	1e5a      	subs	r2, r3, #1
 800e750:	61fa      	str	r2, [r7, #28]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d102      	bne.n	800e75c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e75a:	e052      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e760:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0ef      	beq.n	800e74c <SDMMC_GetCmdResp6+0x24>
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1ea      	bne.n	800e74c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77a:	f003 0304 	and.w	r3, r3, #4
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d004      	beq.n	800e78c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2204      	movs	r2, #4
 800e786:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e788:	2304      	movs	r3, #4
 800e78a:	e03a      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	2b00      	cmp	r3, #0
 800e796:	d004      	beq.n	800e7a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2201      	movs	r2, #1
 800e79c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e02f      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff fb7c 	bl	800dea0 <SDMMC_GetCommandResponse>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	7afb      	ldrb	r3, [r7, #11]
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d001      	beq.n	800e7b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e025      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	4a16      	ldr	r2, [pc, #88]	; (800e814 <SDMMC_GetCmdResp6+0xec>)
 800e7ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e7bc:	2100      	movs	r1, #0
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7ff fb7b 	bl	800deba <SDMMC_GetResponse>
 800e7c4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d106      	bne.n	800e7de <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	0c1b      	lsrs	r3, r3, #16
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e011      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7ec:	e009      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7fc:	e001      	b.n	800e802 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e802:	4618      	mov	r0, r3
 800e804:	3720      	adds	r7, #32
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	24000000 	.word	0x24000000
 800e810:	10624dd3 	.word	0x10624dd3
 800e814:	002000c5 	.word	0x002000c5

0800e818 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e820:	4b22      	ldr	r3, [pc, #136]	; (800e8ac <SDMMC_GetCmdResp7+0x94>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a22      	ldr	r2, [pc, #136]	; (800e8b0 <SDMMC_GetCmdResp7+0x98>)
 800e826:	fba2 2303 	umull	r2, r3, r2, r3
 800e82a:	0a5b      	lsrs	r3, r3, #9
 800e82c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e830:	fb02 f303 	mul.w	r3, r2, r3
 800e834:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	1e5a      	subs	r2, r3, #1
 800e83a:	60fa      	str	r2, [r7, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d102      	bne.n	800e846 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e844:	e02c      	b.n	800e8a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e852:	2b00      	cmp	r3, #0
 800e854:	d0ef      	beq.n	800e836 <SDMMC_GetCmdResp7+0x1e>
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1ea      	bne.n	800e836 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e864:	f003 0304 	and.w	r3, r3, #4
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d004      	beq.n	800e876 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2204      	movs	r2, #4
 800e870:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e872:	2304      	movs	r3, #4
 800e874:	e014      	b.n	800e8a0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e87a:	f003 0301 	and.w	r3, r3, #1
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d004      	beq.n	800e88c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e888:	2301      	movs	r3, #1
 800e88a:	e009      	b.n	800e8a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2240      	movs	r2, #64	; 0x40
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0

}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	24000000 	.word	0x24000000
 800e8b0:	10624dd3 	.word	0x10624dd3

0800e8b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e8bc:	4b11      	ldr	r3, [pc, #68]	; (800e904 <SDMMC_GetCmdError+0x50>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a11      	ldr	r2, [pc, #68]	; (800e908 <SDMMC_GetCmdError+0x54>)
 800e8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c6:	0a5b      	lsrs	r3, r3, #9
 800e8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8cc:	fb02 f303 	mul.w	r3, r2, r3
 800e8d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	1e5a      	subs	r2, r3, #1
 800e8d6:	60fa      	str	r2, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8e0:	e009      	b.n	800e8f6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0f1      	beq.n	800e8d2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a06      	ldr	r2, [pc, #24]	; (800e90c <SDMMC_GetCmdError+0x58>)
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	24000000 	.word	0x24000000
 800e908:	10624dd3 	.word	0x10624dd3
 800e90c:	002000c5 	.word	0x002000c5

0800e910 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e914:	4904      	ldr	r1, [pc, #16]	; (800e928 <MX_FATFS_Init+0x18>)
 800e916:	4805      	ldr	r0, [pc, #20]	; (800e92c <MX_FATFS_Init+0x1c>)
 800e918:	f002 fffe 	bl	8011918 <FATFS_LinkDriver>
 800e91c:	4603      	mov	r3, r0
 800e91e:	461a      	mov	r2, r3
 800e920:	4b03      	ldr	r3, [pc, #12]	; (800e930 <MX_FATFS_Init+0x20>)
 800e922:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e924:	bf00      	nop
 800e926:	bd80      	pop	{r7, pc}
 800e928:	2406ef40 	.word	0x2406ef40
 800e92c:	08015d20 	.word	0x08015d20
 800e930:	2406ef3c 	.word	0x2406ef3c

0800e934 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e938:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e94e:	f000 f885 	bl	800ea5c <BSP_SD_IsDetected>
 800e952:	4603      	mov	r3, r0
 800e954:	2b01      	cmp	r3, #1
 800e956:	d001      	beq.n	800e95c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e958:	2302      	movs	r3, #2
 800e95a:	e012      	b.n	800e982 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e95c:	480b      	ldr	r0, [pc, #44]	; (800e98c <BSP_SD_Init+0x48>)
 800e95e:	f7fb fb8b 	bl	800a078 <HAL_SD_Init>
 800e962:	4603      	mov	r3, r0
 800e964:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d109      	bne.n	800e980 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e96c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e970:	4806      	ldr	r0, [pc, #24]	; (800e98c <BSP_SD_Init+0x48>)
 800e972:	f7fc fa2f 	bl	800add4 <HAL_SD_ConfigWideBusOperation>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d001      	beq.n	800e980 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e980:	79fb      	ldrb	r3, [r7, #7]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	2406eca4 	.word	0x2406eca4

0800e990 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	68f9      	ldr	r1, [r7, #12]
 800e9a6:	4806      	ldr	r0, [pc, #24]	; (800e9c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e9a8:	f7fb fc7e 	bl	800a2a8 <HAL_SD_ReadBlocks_DMA>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	2406eca4 	.word	0x2406eca4

0800e9c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	68f9      	ldr	r1, [r7, #12]
 800e9da:	4806      	ldr	r0, [pc, #24]	; (800e9f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e9dc:	f7fb fd0c 	bl	800a3f8 <HAL_SD_WriteBlocks_DMA>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3718      	adds	r7, #24
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	2406eca4 	.word	0x2406eca4

0800e9f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e9fc:	4805      	ldr	r0, [pc, #20]	; (800ea14 <BSP_SD_GetCardState+0x1c>)
 800e9fe:	f7fc faf9 	bl	800aff4 <HAL_SD_GetCardState>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b04      	cmp	r3, #4
 800ea06:	bf14      	ite	ne
 800ea08:	2301      	movne	r3, #1
 800ea0a:	2300      	moveq	r3, #0
 800ea0c:	b2db      	uxtb	r3, r3
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2406eca4 	.word	0x2406eca4

0800ea18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ea20:	6879      	ldr	r1, [r7, #4]
 800ea22:	4803      	ldr	r0, [pc, #12]	; (800ea30 <BSP_SD_GetCardInfo+0x18>)
 800ea24:	f7fc f9aa 	bl	800ad7c <HAL_SD_GetCardInfo>
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	2406eca4 	.word	0x2406eca4

0800ea34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ea3c:	f000 f9a0 	bl	800ed80 <BSP_SD_WriteCpltCallback>
}
 800ea40:	bf00      	nop
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ea50:	f000 f9a4 	bl	800ed9c <BSP_SD_ReadCpltCallback>
}
 800ea54:	bf00      	nop
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ea62:	2301      	movs	r3, #1
 800ea64:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	b2db      	uxtb	r3, r3
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b084      	sub	sp, #16
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ea7e:	f002 ffe3 	bl	8011a48 <osKernelSysTick>
 800ea82:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ea84:	e006      	b.n	800ea94 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ea86:	f7ff ffb7 	bl	800e9f8 <BSP_SD_GetCardState>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	e009      	b.n	800eaa8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ea94:	f002 ffd8 	bl	8011a48 <osKernelSysTick>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d8f0      	bhi.n	800ea86 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	4603      	mov	r3, r0
 800eab8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eaba:	4b0b      	ldr	r3, [pc, #44]	; (800eae8 <SD_CheckStatus+0x38>)
 800eabc:	2201      	movs	r2, #1
 800eabe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eac0:	f7ff ff9a 	bl	800e9f8 <BSP_SD_GetCardState>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d107      	bne.n	800eada <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800eaca:	4b07      	ldr	r3, [pc, #28]	; (800eae8 <SD_CheckStatus+0x38>)
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	f023 0301 	bic.w	r3, r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	4b04      	ldr	r3, [pc, #16]	; (800eae8 <SD_CheckStatus+0x38>)
 800ead8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800eada:	4b03      	ldr	r3, [pc, #12]	; (800eae8 <SD_CheckStatus+0x38>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	b2db      	uxtb	r3, r3
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	2400000d 	.word	0x2400000d

0800eaec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eaec:	b590      	push	{r4, r7, lr}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800eaf6:	4b20      	ldr	r3, [pc, #128]	; (800eb78 <SD_initialize+0x8c>)
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800eafc:	f002 ff98 	bl	8011a30 <osKernelRunning>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d030      	beq.n	800eb68 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800eb06:	f7ff ff1d 	bl	800e944 <BSP_SD_Init>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d107      	bne.n	800eb20 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800eb10:	79fb      	ldrb	r3, [r7, #7]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7ff ffcc 	bl	800eab0 <SD_CheckStatus>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4b16      	ldr	r3, [pc, #88]	; (800eb78 <SD_initialize+0x8c>)
 800eb1e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800eb20:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <SD_initialize+0x8c>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d01e      	beq.n	800eb68 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800eb2a:	4b14      	ldr	r3, [pc, #80]	; (800eb7c <SD_initialize+0x90>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10e      	bne.n	800eb50 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800eb32:	4b13      	ldr	r3, [pc, #76]	; (800eb80 <SD_initialize+0x94>)
 800eb34:	f107 0408 	add.w	r4, r7, #8
 800eb38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800eb3e:	f107 0308 	add.w	r3, r7, #8
 800eb42:	2100      	movs	r1, #0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f003 fa30 	bl	8011faa <osMessageCreate>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	4a0b      	ldr	r2, [pc, #44]	; (800eb7c <SD_initialize+0x90>)
 800eb4e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800eb50:	4b0a      	ldr	r3, [pc, #40]	; (800eb7c <SD_initialize+0x90>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d107      	bne.n	800eb68 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800eb58:	4b07      	ldr	r3, [pc, #28]	; (800eb78 <SD_initialize+0x8c>)
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	f043 0301 	orr.w	r3, r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	4b04      	ldr	r3, [pc, #16]	; (800eb78 <SD_initialize+0x8c>)
 800eb66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800eb68:	4b03      	ldr	r3, [pc, #12]	; (800eb78 <SD_initialize+0x8c>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	b2db      	uxtb	r3, r3
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd90      	pop	{r4, r7, pc}
 800eb76:	bf00      	nop
 800eb78:	2400000d 	.word	0x2400000d
 800eb7c:	24014900 	.word	0x24014900
 800eb80:	08015c84 	.word	0x08015c84

0800eb84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff ff8d 	bl	800eab0 <SD_CheckStatus>
 800eb96:	4603      	mov	r3, r0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60b9      	str	r1, [r7, #8]
 800eba8:	607a      	str	r2, [r7, #4]
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ebb6:	f247 5030 	movw	r0, #30000	; 0x7530
 800ebba:	f7ff ff5c 	bl	800ea76 <SD_CheckStatusWithTimeout>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	da02      	bge.n	800ebca <SD_read+0x2a>
  {
    return res;
 800ebc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebc8:	e032      	b.n	800ec30 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	68b8      	ldr	r0, [r7, #8]
 800ebd0:	f7ff fede 	bl	800e990 <BSP_SD_ReadBlocks_DMA>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ebda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d124      	bne.n	800ec2c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ebe2:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <SD_read+0x98>)
 800ebe4:	6819      	ldr	r1, [r3, #0]
 800ebe6:	f107 0314 	add.w	r3, r7, #20
 800ebea:	f247 5230 	movw	r2, #30000	; 0x7530
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f003 fa44 	bl	801207c <osMessageGet>

    if (event.status == osEventMessage)
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2b10      	cmp	r3, #16
 800ebf8:	d118      	bne.n	800ec2c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d115      	bne.n	800ec2c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ec00:	f002 ff22 	bl	8011a48 <osKernelSysTick>
 800ec04:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ec06:	e008      	b.n	800ec1a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec08:	f7ff fef6 	bl	800e9f8 <BSP_SD_GetCardState>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d103      	bne.n	800ec1a <SD_read+0x7a>
              {
                res = RES_OK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ec18:	e008      	b.n	800ec2c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ec1a:	f002 ff15 	bl	8011a48 <osKernelSysTick>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	f247 522f 	movw	r2, #29999	; 0x752f
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d9ed      	bls.n	800ec08 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ec2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3728      	adds	r7, #40	; 0x28
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	24014900 	.word	0x24014900

0800ec3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b08a      	sub	sp, #40	; 0x28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60b9      	str	r1, [r7, #8]
 800ec44:	607a      	str	r2, [r7, #4]
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec52:	f247 5030 	movw	r0, #30000	; 0x7530
 800ec56:	f7ff ff0e 	bl	800ea76 <SD_CheckStatusWithTimeout>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	da02      	bge.n	800ec66 <SD_write+0x2a>
  {
    return res;
 800ec60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec64:	e02e      	b.n	800ecc4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	6879      	ldr	r1, [r7, #4]
 800ec6a:	68b8      	ldr	r0, [r7, #8]
 800ec6c:	f7ff feaa 	bl	800e9c4 <BSP_SD_WriteBlocks_DMA>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d124      	bne.n	800ecc0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ec76:	4b15      	ldr	r3, [pc, #84]	; (800eccc <SD_write+0x90>)
 800ec78:	6819      	ldr	r1, [r3, #0]
 800ec7a:	f107 0314 	add.w	r3, r7, #20
 800ec7e:	f247 5230 	movw	r2, #30000	; 0x7530
 800ec82:	4618      	mov	r0, r3
 800ec84:	f003 f9fa 	bl	801207c <osMessageGet>

    if (event.status == osEventMessage)
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2b10      	cmp	r3, #16
 800ec8c:	d118      	bne.n	800ecc0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d115      	bne.n	800ecc0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ec94:	f002 fed8 	bl	8011a48 <osKernelSysTick>
 800ec98:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ec9a:	e008      	b.n	800ecae <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec9c:	f7ff feac 	bl	800e9f8 <BSP_SD_GetCardState>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <SD_write+0x72>
          {
            res = RES_OK;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ecac:	e008      	b.n	800ecc0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ecae:	f002 fecb 	bl	8011a48 <osKernelSysTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	f247 522f 	movw	r2, #29999	; 0x752f
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d9ed      	bls.n	800ec9c <SD_write+0x60>
    }

  }
#endif

  return res;
 800ecc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3728      	adds	r7, #40	; 0x28
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	24014900 	.word	0x24014900

0800ecd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08c      	sub	sp, #48	; 0x30
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	603a      	str	r2, [r7, #0]
 800ecda:	71fb      	strb	r3, [r7, #7]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ece6:	4b25      	ldr	r3, [pc, #148]	; (800ed7c <SD_ioctl+0xac>)
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	f003 0301 	and.w	r3, r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <SD_ioctl+0x28>
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	e03c      	b.n	800ed72 <SD_ioctl+0xa2>

  switch (cmd)
 800ecf8:	79bb      	ldrb	r3, [r7, #6]
 800ecfa:	2b03      	cmp	r3, #3
 800ecfc:	d834      	bhi.n	800ed68 <SD_ioctl+0x98>
 800ecfe:	a201      	add	r2, pc, #4	; (adr r2, 800ed04 <SD_ioctl+0x34>)
 800ed00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed04:	0800ed15 	.word	0x0800ed15
 800ed08:	0800ed1d 	.word	0x0800ed1d
 800ed0c:	0800ed35 	.word	0x0800ed35
 800ed10:	0800ed4f 	.word	0x0800ed4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ed14:	2300      	movs	r3, #0
 800ed16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed1a:	e028      	b.n	800ed6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed1c:	f107 0308 	add.w	r3, r7, #8
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fe79 	bl	800ea18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ed26:	6a3a      	ldr	r2, [r7, #32]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed32:	e01c      	b.n	800ed6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed34:	f107 0308 	add.w	r3, r7, #8
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7ff fe6d 	bl	800ea18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ed46:	2300      	movs	r3, #0
 800ed48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed4c:	e00f      	b.n	800ed6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed4e:	f107 0308 	add.w	r3, r7, #8
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fe60 	bl	800ea18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ed58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5a:	0a5a      	lsrs	r2, r3, #9
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed66:	e002      	b.n	800ed6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ed68:	2304      	movs	r3, #4
 800ed6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ed6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3730      	adds	r7, #48	; 0x30
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	2400000d 	.word	0x2400000d

0800ed80 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800ed84:	4b04      	ldr	r3, [pc, #16]	; (800ed98 <BSP_SD_WriteCpltCallback+0x18>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2102      	movs	r1, #2
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f003 f935 	bl	8011ffc <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ed92:	bf00      	nop
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	24014900 	.word	0x24014900

0800ed9c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800eda0:	4b04      	ldr	r3, [pc, #16]	; (800edb4 <BSP_SD_ReadCpltCallback+0x18>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2200      	movs	r2, #0
 800eda6:	2101      	movs	r1, #1
 800eda8:	4618      	mov	r0, r3
 800edaa:	f003 f927 	bl	8011ffc <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800edae:	bf00      	nop
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	24014900 	.word	0x24014900

0800edb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	4603      	mov	r3, r0
 800edc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	4a08      	ldr	r2, [pc, #32]	; (800ede8 <disk_status+0x30>)
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	79fa      	ldrb	r2, [r7, #7]
 800edd0:	4905      	ldr	r1, [pc, #20]	; (800ede8 <disk_status+0x30>)
 800edd2:	440a      	add	r2, r1
 800edd4:	7a12      	ldrb	r2, [r2, #8]
 800edd6:	4610      	mov	r0, r2
 800edd8:	4798      	blx	r3
 800edda:	4603      	mov	r3, r0
 800eddc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800edde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	2401492c 	.word	0x2401492c

0800edec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800edfa:	79fb      	ldrb	r3, [r7, #7]
 800edfc:	4a0d      	ldr	r2, [pc, #52]	; (800ee34 <disk_initialize+0x48>)
 800edfe:	5cd3      	ldrb	r3, [r2, r3]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d111      	bne.n	800ee28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	4a0b      	ldr	r2, [pc, #44]	; (800ee34 <disk_initialize+0x48>)
 800ee08:	2101      	movs	r1, #1
 800ee0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee0c:	79fb      	ldrb	r3, [r7, #7]
 800ee0e:	4a09      	ldr	r2, [pc, #36]	; (800ee34 <disk_initialize+0x48>)
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	4413      	add	r3, r2
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	79fa      	ldrb	r2, [r7, #7]
 800ee1a:	4906      	ldr	r1, [pc, #24]	; (800ee34 <disk_initialize+0x48>)
 800ee1c:	440a      	add	r2, r1
 800ee1e:	7a12      	ldrb	r2, [r2, #8]
 800ee20:	4610      	mov	r0, r2
 800ee22:	4798      	blx	r3
 800ee24:	4603      	mov	r3, r0
 800ee26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	2401492c 	.word	0x2401492c

0800ee38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee38:	b590      	push	{r4, r7, lr}
 800ee3a:	b087      	sub	sp, #28
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60b9      	str	r1, [r7, #8]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
 800ee4a:	4a0a      	ldr	r2, [pc, #40]	; (800ee74 <disk_read+0x3c>)
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	689c      	ldr	r4, [r3, #8]
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
 800ee56:	4a07      	ldr	r2, [pc, #28]	; (800ee74 <disk_read+0x3c>)
 800ee58:	4413      	add	r3, r2
 800ee5a:	7a18      	ldrb	r0, [r3, #8]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	68b9      	ldr	r1, [r7, #8]
 800ee62:	47a0      	blx	r4
 800ee64:	4603      	mov	r3, r0
 800ee66:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	371c      	adds	r7, #28
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd90      	pop	{r4, r7, pc}
 800ee72:	bf00      	nop
 800ee74:	2401492c 	.word	0x2401492c

0800ee78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ee78:	b590      	push	{r4, r7, lr}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60b9      	str	r1, [r7, #8]
 800ee80:	607a      	str	r2, [r7, #4]
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4a0a      	ldr	r2, [pc, #40]	; (800eeb4 <disk_write+0x3c>)
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	68dc      	ldr	r4, [r3, #12]
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
 800ee96:	4a07      	ldr	r2, [pc, #28]	; (800eeb4 <disk_write+0x3c>)
 800ee98:	4413      	add	r3, r2
 800ee9a:	7a18      	ldrb	r0, [r3, #8]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	47a0      	blx	r4
 800eea4:	4603      	mov	r3, r0
 800eea6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	371c      	adds	r7, #28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd90      	pop	{r4, r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	2401492c 	.word	0x2401492c

0800eeb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	603a      	str	r2, [r7, #0]
 800eec2:	71fb      	strb	r3, [r7, #7]
 800eec4:	460b      	mov	r3, r1
 800eec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eec8:	79fb      	ldrb	r3, [r7, #7]
 800eeca:	4a09      	ldr	r2, [pc, #36]	; (800eef0 <disk_ioctl+0x38>)
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4413      	add	r3, r2
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	79fa      	ldrb	r2, [r7, #7]
 800eed6:	4906      	ldr	r1, [pc, #24]	; (800eef0 <disk_ioctl+0x38>)
 800eed8:	440a      	add	r2, r1
 800eeda:	7a10      	ldrb	r0, [r2, #8]
 800eedc:	79b9      	ldrb	r1, [r7, #6]
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	4798      	blx	r3
 800eee2:	4603      	mov	r3, r0
 800eee4:	73fb      	strb	r3, [r7, #15]
  return res;
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	2401492c 	.word	0x2401492c

0800eef4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	3301      	adds	r3, #1
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ef04:	89fb      	ldrh	r3, [r7, #14]
 800ef06:	021b      	lsls	r3, r3, #8
 800ef08:	b21a      	sxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	b21b      	sxth	r3, r3
 800ef10:	4313      	orrs	r3, r2
 800ef12:	b21b      	sxth	r3, r3
 800ef14:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ef16:	89fb      	ldrh	r3, [r7, #14]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3714      	adds	r7, #20
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3303      	adds	r3, #3
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	021b      	lsls	r3, r3, #8
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	3202      	adds	r2, #2
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	021b      	lsls	r3, r3, #8
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	3201      	adds	r2, #1
 800ef4a:	7812      	ldrb	r2, [r2, #0]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	021b      	lsls	r3, r3, #8
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	7812      	ldrb	r2, [r2, #0]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b083      	sub	sp, #12
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	887a      	ldrh	r2, [r7, #2]
 800ef7e:	b2d2      	uxtb	r2, r2
 800ef80:	701a      	strb	r2, [r3, #0]
 800ef82:	887b      	ldrh	r3, [r7, #2]
 800ef84:	0a1b      	lsrs	r3, r3, #8
 800ef86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	607a      	str	r2, [r7, #4]
 800ef8e:	887a      	ldrh	r2, [r7, #2]
 800ef90:	b2d2      	uxtb	r2, r2
 800ef92:	701a      	strb	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	0a1b      	lsrs	r3, r3, #8
 800efba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	607a      	str	r2, [r7, #4]
 800efc2:	683a      	ldr	r2, [r7, #0]
 800efc4:	b2d2      	uxtb	r2, r2
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	0a1b      	lsrs	r3, r3, #8
 800efcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	b2d2      	uxtb	r2, r2
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	0a1b      	lsrs	r3, r3, #8
 800efde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	607a      	str	r2, [r7, #4]
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	b2d2      	uxtb	r2, r2
 800efea:	701a      	strb	r2, [r3, #0]
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eff8:	b480      	push	{r7}
 800effa:	b087      	sub	sp, #28
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00d      	beq.n	800f02e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f012:	693a      	ldr	r2, [r7, #16]
 800f014:	1c53      	adds	r3, r2, #1
 800f016:	613b      	str	r3, [r7, #16]
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	1c59      	adds	r1, r3, #1
 800f01c:	6179      	str	r1, [r7, #20]
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	3b01      	subs	r3, #1
 800f026:	607b      	str	r3, [r7, #4]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1f1      	bne.n	800f012 <mem_cpy+0x1a>
	}
}
 800f02e:	bf00      	nop
 800f030:	371c      	adds	r7, #28
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr

0800f03a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f03a:	b480      	push	{r7}
 800f03c:	b087      	sub	sp, #28
 800f03e:	af00      	add	r7, sp, #0
 800f040:	60f8      	str	r0, [r7, #12]
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	1c5a      	adds	r2, r3, #1
 800f04e:	617a      	str	r2, [r7, #20]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	b2d2      	uxtb	r2, r2
 800f054:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3b01      	subs	r3, #1
 800f05a:	607b      	str	r3, [r7, #4]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1f3      	bne.n	800f04a <mem_set+0x10>
}
 800f062:	bf00      	nop
 800f064:	bf00      	nop
 800f066:	371c      	adds	r7, #28
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f070:	b480      	push	{r7}
 800f072:	b089      	sub	sp, #36	; 0x24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	61fb      	str	r3, [r7, #28]
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	61fa      	str	r2, [r7, #28]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	4619      	mov	r1, r3
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	61ba      	str	r2, [r7, #24]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	1acb      	subs	r3, r1, r3
 800f09c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	607b      	str	r3, [r7, #4]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <mem_cmp+0x40>
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d0eb      	beq.n	800f088 <mem_cmp+0x18>

	return r;
 800f0b0:	697b      	ldr	r3, [r7, #20]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3724      	adds	r7, #36	; 0x24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f0c8:	e002      	b.n	800f0d0 <chk_chr+0x12>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	607b      	str	r3, [r7, #4]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d005      	beq.n	800f0e4 <chk_chr+0x26>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d1f2      	bne.n	800f0ca <chk_chr+0xc>
	return *str;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d009      	beq.n	800f116 <lock_fs+0x22>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	691b      	ldr	r3, [r3, #16]
 800f106:	4618      	mov	r0, r3
 800f108:	f002 fc41 	bl	801198e <ff_req_grant>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <lock_fs+0x22>
 800f112:	2301      	movs	r3, #1
 800f114:	e000      	b.n	800f118 <lock_fs+0x24>
 800f116:	2300      	movs	r3, #0
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	460b      	mov	r3, r1
 800f12a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00d      	beq.n	800f14e <unlock_fs+0x2e>
 800f132:	78fb      	ldrb	r3, [r7, #3]
 800f134:	2b0c      	cmp	r3, #12
 800f136:	d00a      	beq.n	800f14e <unlock_fs+0x2e>
 800f138:	78fb      	ldrb	r3, [r7, #3]
 800f13a:	2b0b      	cmp	r3, #11
 800f13c:	d007      	beq.n	800f14e <unlock_fs+0x2e>
 800f13e:	78fb      	ldrb	r3, [r7, #3]
 800f140:	2b0f      	cmp	r3, #15
 800f142:	d004      	beq.n	800f14e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	4618      	mov	r0, r3
 800f14a:	f002 fc35 	bl	80119b8 <ff_rel_grant>
	}
}
 800f14e:	bf00      	nop
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
	...

0800f158 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f162:	2300      	movs	r3, #0
 800f164:	60bb      	str	r3, [r7, #8]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	e029      	b.n	800f1c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f16c:	4a27      	ldr	r2, [pc, #156]	; (800f20c <chk_lock+0xb4>)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	4413      	add	r3, r2
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d01d      	beq.n	800f1b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f17a:	4a24      	ldr	r2, [pc, #144]	; (800f20c <chk_lock+0xb4>)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	011b      	lsls	r3, r3, #4
 800f180:	4413      	add	r3, r2
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d116      	bne.n	800f1ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f18c:	4a1f      	ldr	r2, [pc, #124]	; (800f20c <chk_lock+0xb4>)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	011b      	lsls	r3, r3, #4
 800f192:	4413      	add	r3, r2
 800f194:	3304      	adds	r3, #4
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d10c      	bne.n	800f1ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f1a0:	4a1a      	ldr	r2, [pc, #104]	; (800f20c <chk_lock+0xb4>)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	4413      	add	r3, r2
 800f1a8:	3308      	adds	r3, #8
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d102      	bne.n	800f1ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f1b4:	e007      	b.n	800f1c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d9d2      	bls.n	800f16c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2b02      	cmp	r3, #2
 800f1ca:	d109      	bne.n	800f1e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d102      	bne.n	800f1d8 <chk_lock+0x80>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	d101      	bne.n	800f1dc <chk_lock+0x84>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e010      	b.n	800f1fe <chk_lock+0xa6>
 800f1dc:	2312      	movs	r3, #18
 800f1de:	e00e      	b.n	800f1fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d108      	bne.n	800f1f8 <chk_lock+0xa0>
 800f1e6:	4a09      	ldr	r2, [pc, #36]	; (800f20c <chk_lock+0xb4>)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	011b      	lsls	r3, r3, #4
 800f1ec:	4413      	add	r3, r2
 800f1ee:	330c      	adds	r3, #12
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1f6:	d101      	bne.n	800f1fc <chk_lock+0xa4>
 800f1f8:	2310      	movs	r3, #16
 800f1fa:	e000      	b.n	800f1fe <chk_lock+0xa6>
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3714      	adds	r7, #20
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	2401490c 	.word	0x2401490c

0800f210 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f216:	2300      	movs	r3, #0
 800f218:	607b      	str	r3, [r7, #4]
 800f21a:	e002      	b.n	800f222 <enq_lock+0x12>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3301      	adds	r3, #1
 800f220:	607b      	str	r3, [r7, #4]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d806      	bhi.n	800f236 <enq_lock+0x26>
 800f228:	4a09      	ldr	r2, [pc, #36]	; (800f250 <enq_lock+0x40>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	011b      	lsls	r3, r3, #4
 800f22e:	4413      	add	r3, r2
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1f2      	bne.n	800f21c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b02      	cmp	r3, #2
 800f23a:	bf14      	ite	ne
 800f23c:	2301      	movne	r3, #1
 800f23e:	2300      	moveq	r3, #0
 800f240:	b2db      	uxtb	r3, r3
}
 800f242:	4618      	mov	r0, r3
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	2401490c 	.word	0x2401490c

0800f254 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e01f      	b.n	800f2a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f264:	4a41      	ldr	r2, [pc, #260]	; (800f36c <inc_lock+0x118>)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	011b      	lsls	r3, r3, #4
 800f26a:	4413      	add	r3, r2
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	429a      	cmp	r2, r3
 800f274:	d113      	bne.n	800f29e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f276:	4a3d      	ldr	r2, [pc, #244]	; (800f36c <inc_lock+0x118>)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	011b      	lsls	r3, r3, #4
 800f27c:	4413      	add	r3, r2
 800f27e:	3304      	adds	r3, #4
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f286:	429a      	cmp	r2, r3
 800f288:	d109      	bne.n	800f29e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f28a:	4a38      	ldr	r2, [pc, #224]	; (800f36c <inc_lock+0x118>)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	011b      	lsls	r3, r3, #4
 800f290:	4413      	add	r3, r2
 800f292:	3308      	adds	r3, #8
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d006      	beq.n	800f2ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d9dc      	bls.n	800f264 <inc_lock+0x10>
 800f2aa:	e000      	b.n	800f2ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f2ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d132      	bne.n	800f31a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	e002      	b.n	800f2c0 <inc_lock+0x6c>
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	60fb      	str	r3, [r7, #12]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d806      	bhi.n	800f2d4 <inc_lock+0x80>
 800f2c6:	4a29      	ldr	r2, [pc, #164]	; (800f36c <inc_lock+0x118>)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	011b      	lsls	r3, r3, #4
 800f2cc:	4413      	add	r3, r2
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1f2      	bne.n	800f2ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d101      	bne.n	800f2de <inc_lock+0x8a>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	e040      	b.n	800f360 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	4922      	ldr	r1, [pc, #136]	; (800f36c <inc_lock+0x118>)
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	011b      	lsls	r3, r3, #4
 800f2e8:	440b      	add	r3, r1
 800f2ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	491e      	ldr	r1, [pc, #120]	; (800f36c <inc_lock+0x118>)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	011b      	lsls	r3, r3, #4
 800f2f6:	440b      	add	r3, r1
 800f2f8:	3304      	adds	r3, #4
 800f2fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	695a      	ldr	r2, [r3, #20]
 800f300:	491a      	ldr	r1, [pc, #104]	; (800f36c <inc_lock+0x118>)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	011b      	lsls	r3, r3, #4
 800f306:	440b      	add	r3, r1
 800f308:	3308      	adds	r3, #8
 800f30a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f30c:	4a17      	ldr	r2, [pc, #92]	; (800f36c <inc_lock+0x118>)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	011b      	lsls	r3, r3, #4
 800f312:	4413      	add	r3, r2
 800f314:	330c      	adds	r3, #12
 800f316:	2200      	movs	r2, #0
 800f318:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d009      	beq.n	800f334 <inc_lock+0xe0>
 800f320:	4a12      	ldr	r2, [pc, #72]	; (800f36c <inc_lock+0x118>)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	011b      	lsls	r3, r3, #4
 800f326:	4413      	add	r3, r2
 800f328:	330c      	adds	r3, #12
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <inc_lock+0xe0>
 800f330:	2300      	movs	r3, #0
 800f332:	e015      	b.n	800f360 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d108      	bne.n	800f34c <inc_lock+0xf8>
 800f33a:	4a0c      	ldr	r2, [pc, #48]	; (800f36c <inc_lock+0x118>)
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	011b      	lsls	r3, r3, #4
 800f340:	4413      	add	r3, r2
 800f342:	330c      	adds	r3, #12
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	3301      	adds	r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	e001      	b.n	800f350 <inc_lock+0xfc>
 800f34c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f350:	4906      	ldr	r1, [pc, #24]	; (800f36c <inc_lock+0x118>)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	011b      	lsls	r3, r3, #4
 800f356:	440b      	add	r3, r1
 800f358:	330c      	adds	r3, #12
 800f35a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	3301      	adds	r3, #1
}
 800f360:	4618      	mov	r0, r3
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	2401490c 	.word	0x2401490c

0800f370 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	607b      	str	r3, [r7, #4]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b01      	cmp	r3, #1
 800f382:	d825      	bhi.n	800f3d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800f384:	4a17      	ldr	r2, [pc, #92]	; (800f3e4 <dec_lock+0x74>)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	011b      	lsls	r3, r3, #4
 800f38a:	4413      	add	r3, r2
 800f38c:	330c      	adds	r3, #12
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f392:	89fb      	ldrh	r3, [r7, #14]
 800f394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f398:	d101      	bne.n	800f39e <dec_lock+0x2e>
 800f39a:	2300      	movs	r3, #0
 800f39c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f39e:	89fb      	ldrh	r3, [r7, #14]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <dec_lock+0x3a>
 800f3a4:	89fb      	ldrh	r3, [r7, #14]
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f3aa:	4a0e      	ldr	r2, [pc, #56]	; (800f3e4 <dec_lock+0x74>)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	011b      	lsls	r3, r3, #4
 800f3b0:	4413      	add	r3, r2
 800f3b2:	330c      	adds	r3, #12
 800f3b4:	89fa      	ldrh	r2, [r7, #14]
 800f3b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f3b8:	89fb      	ldrh	r3, [r7, #14]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d105      	bne.n	800f3ca <dec_lock+0x5a>
 800f3be:	4a09      	ldr	r2, [pc, #36]	; (800f3e4 <dec_lock+0x74>)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	011b      	lsls	r3, r3, #4
 800f3c4:	4413      	add	r3, r2
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	737b      	strb	r3, [r7, #13]
 800f3ce:	e001      	b.n	800f3d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f3d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	2401490c 	.word	0x2401490c

0800f3e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	e010      	b.n	800f418 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f3f6:	4a0d      	ldr	r2, [pc, #52]	; (800f42c <clear_lock+0x44>)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	011b      	lsls	r3, r3, #4
 800f3fc:	4413      	add	r3, r2
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	429a      	cmp	r2, r3
 800f404:	d105      	bne.n	800f412 <clear_lock+0x2a>
 800f406:	4a09      	ldr	r2, [pc, #36]	; (800f42c <clear_lock+0x44>)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	011b      	lsls	r3, r3, #4
 800f40c:	4413      	add	r3, r2
 800f40e:	2200      	movs	r2, #0
 800f410:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	3301      	adds	r3, #1
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d9eb      	bls.n	800f3f6 <clear_lock+0xe>
	}
}
 800f41e:	bf00      	nop
 800f420:	bf00      	nop
 800f422:	3714      	adds	r7, #20
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr
 800f42c:	2401490c 	.word	0x2401490c

0800f430 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	78db      	ldrb	r3, [r3, #3]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d034      	beq.n	800f4ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	7858      	ldrb	r0, [r3, #1]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f454:	2301      	movs	r3, #1
 800f456:	697a      	ldr	r2, [r7, #20]
 800f458:	f7ff fd0e 	bl	800ee78 <disk_write>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d002      	beq.n	800f468 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f462:	2301      	movs	r3, #1
 800f464:	73fb      	strb	r3, [r7, #15]
 800f466:	e022      	b.n	800f4ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f472:	697a      	ldr	r2, [r7, #20]
 800f474:	1ad2      	subs	r2, r2, r3
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d217      	bcs.n	800f4ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	789b      	ldrb	r3, [r3, #2]
 800f482:	613b      	str	r3, [r7, #16]
 800f484:	e010      	b.n	800f4a8 <sync_window+0x78>
					wsect += fs->fsize;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6a1b      	ldr	r3, [r3, #32]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	4413      	add	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	7858      	ldrb	r0, [r3, #1]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f49a:	2301      	movs	r3, #1
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	f7ff fceb 	bl	800ee78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	613b      	str	r3, [r7, #16]
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d8eb      	bhi.n	800f486 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3718      	adds	r7, #24
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d01b      	beq.n	800f508 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff ffad 	bl	800f430 <sync_window>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f4da:	7bfb      	ldrb	r3, [r7, #15]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d113      	bne.n	800f508 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	7858      	ldrb	r0, [r3, #1]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	f7ff fca3 	bl	800ee38 <disk_read>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d004      	beq.n	800f502 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f508:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
	...

0800f514 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff ff87 	bl	800f430 <sync_window>
 800f522:	4603      	mov	r3, r0
 800f524:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d159      	bne.n	800f5e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b03      	cmp	r3, #3
 800f532:	d149      	bne.n	800f5c8 <sync_fs+0xb4>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	791b      	ldrb	r3, [r3, #4]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d145      	bne.n	800f5c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	899b      	ldrh	r3, [r3, #12]
 800f546:	461a      	mov	r2, r3
 800f548:	2100      	movs	r1, #0
 800f54a:	f7ff fd76 	bl	800f03a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	3338      	adds	r3, #56	; 0x38
 800f552:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f556:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7ff fd05 	bl	800ef6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	3338      	adds	r3, #56	; 0x38
 800f564:	4921      	ldr	r1, [pc, #132]	; (800f5ec <sync_fs+0xd8>)
 800f566:	4618      	mov	r0, r3
 800f568:	f7ff fd1a 	bl	800efa0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3338      	adds	r3, #56	; 0x38
 800f570:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f574:	491e      	ldr	r1, [pc, #120]	; (800f5f0 <sync_fs+0xdc>)
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff fd12 	bl	800efa0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3338      	adds	r3, #56	; 0x38
 800f580:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	699b      	ldr	r3, [r3, #24]
 800f588:	4619      	mov	r1, r3
 800f58a:	4610      	mov	r0, r2
 800f58c:	f7ff fd08 	bl	800efa0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3338      	adds	r3, #56	; 0x38
 800f594:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	695b      	ldr	r3, [r3, #20]
 800f59c:	4619      	mov	r1, r3
 800f59e:	4610      	mov	r0, r2
 800f5a0:	f7ff fcfe 	bl	800efa0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	7858      	ldrb	r0, [r3, #1]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5bc:	2301      	movs	r3, #1
 800f5be:	f7ff fc5b 	bl	800ee78 <disk_write>
			fs->fsi_flag = 0;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	785b      	ldrb	r3, [r3, #1]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fc71 	bl	800eeb8 <disk_ioctl>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d001      	beq.n	800f5e0 <sync_fs+0xcc>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	41615252 	.word	0x41615252
 800f5f0:	61417272 	.word	0x61417272

0800f5f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	3b02      	subs	r3, #2
 800f602:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	3b02      	subs	r3, #2
 800f60a:	683a      	ldr	r2, [r7, #0]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d301      	bcc.n	800f614 <clust2sect+0x20>
 800f610:	2300      	movs	r3, #0
 800f612:	e008      	b.n	800f626 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	895b      	ldrh	r3, [r3, #10]
 800f618:	461a      	mov	r2, r3
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	fb03 f202 	mul.w	r2, r3, r2
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f624:	4413      	add	r3, r2
}
 800f626:	4618      	mov	r0, r3
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b086      	sub	sp, #24
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d904      	bls.n	800f652 <get_fat+0x20>
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	69db      	ldr	r3, [r3, #28]
 800f64c:	683a      	ldr	r2, [r7, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d302      	bcc.n	800f658 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f652:	2301      	movs	r3, #1
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	e0bb      	b.n	800f7d0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f658:	f04f 33ff 	mov.w	r3, #4294967295
 800f65c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b03      	cmp	r3, #3
 800f664:	f000 8083 	beq.w	800f76e <get_fat+0x13c>
 800f668:	2b03      	cmp	r3, #3
 800f66a:	f300 80a7 	bgt.w	800f7bc <get_fat+0x18a>
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d002      	beq.n	800f678 <get_fat+0x46>
 800f672:	2b02      	cmp	r3, #2
 800f674:	d056      	beq.n	800f724 <get_fat+0xf2>
 800f676:	e0a1      	b.n	800f7bc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	60fb      	str	r3, [r7, #12]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	085b      	lsrs	r3, r3, #1
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	4413      	add	r3, r2
 800f684:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	899b      	ldrh	r3, [r3, #12]
 800f68e:	4619      	mov	r1, r3
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	fbb3 f3f1 	udiv	r3, r3, r1
 800f696:	4413      	add	r3, r2
 800f698:	4619      	mov	r1, r3
 800f69a:	6938      	ldr	r0, [r7, #16]
 800f69c:	f7ff ff0c 	bl	800f4b8 <move_window>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f040 808d 	bne.w	800f7c2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	60fa      	str	r2, [r7, #12]
 800f6ae:	693a      	ldr	r2, [r7, #16]
 800f6b0:	8992      	ldrh	r2, [r2, #12]
 800f6b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6b6:	fb02 f201 	mul.w	r2, r2, r1
 800f6ba:	1a9b      	subs	r3, r3, r2
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	4413      	add	r3, r2
 800f6c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f6c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	899b      	ldrh	r3, [r3, #12]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6d6:	4413      	add	r3, r2
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6938      	ldr	r0, [r7, #16]
 800f6dc:	f7ff feec 	bl	800f4b8 <move_window>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d16f      	bne.n	800f7c6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	899b      	ldrh	r3, [r3, #12]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6f2:	fb02 f201 	mul.w	r2, r2, r1
 800f6f6:	1a9b      	subs	r3, r3, r2
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f700:	021b      	lsls	r3, r3, #8
 800f702:	461a      	mov	r2, r3
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	4313      	orrs	r3, r2
 800f708:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	f003 0301 	and.w	r3, r3, #1
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <get_fat+0xe8>
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	091b      	lsrs	r3, r3, #4
 800f718:	e002      	b.n	800f720 <get_fat+0xee>
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f720:	617b      	str	r3, [r7, #20]
			break;
 800f722:	e055      	b.n	800f7d0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	899b      	ldrh	r3, [r3, #12]
 800f72c:	085b      	lsrs	r3, r3, #1
 800f72e:	b29b      	uxth	r3, r3
 800f730:	4619      	mov	r1, r3
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	fbb3 f3f1 	udiv	r3, r3, r1
 800f738:	4413      	add	r3, r2
 800f73a:	4619      	mov	r1, r3
 800f73c:	6938      	ldr	r0, [r7, #16]
 800f73e:	f7ff febb 	bl	800f4b8 <move_window>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d140      	bne.n	800f7ca <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	693a      	ldr	r2, [r7, #16]
 800f754:	8992      	ldrh	r2, [r2, #12]
 800f756:	fbb3 f0f2 	udiv	r0, r3, r2
 800f75a:	fb02 f200 	mul.w	r2, r2, r0
 800f75e:	1a9b      	subs	r3, r3, r2
 800f760:	440b      	add	r3, r1
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff fbc6 	bl	800eef4 <ld_word>
 800f768:	4603      	mov	r3, r0
 800f76a:	617b      	str	r3, [r7, #20]
			break;
 800f76c:	e030      	b.n	800f7d0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	899b      	ldrh	r3, [r3, #12]
 800f776:	089b      	lsrs	r3, r3, #2
 800f778:	b29b      	uxth	r3, r3
 800f77a:	4619      	mov	r1, r3
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f782:	4413      	add	r3, r2
 800f784:	4619      	mov	r1, r3
 800f786:	6938      	ldr	r0, [r7, #16]
 800f788:	f7ff fe96 	bl	800f4b8 <move_window>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d11d      	bne.n	800f7ce <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	8992      	ldrh	r2, [r2, #12]
 800f7a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7a4:	fb02 f200 	mul.w	r2, r2, r0
 800f7a8:	1a9b      	subs	r3, r3, r2
 800f7aa:	440b      	add	r3, r1
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7ff fbb9 	bl	800ef24 <ld_dword>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f7b8:	617b      	str	r3, [r7, #20]
			break;
 800f7ba:	e009      	b.n	800f7d0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f7bc:	2301      	movs	r3, #1
 800f7be:	617b      	str	r3, [r7, #20]
 800f7c0:	e006      	b.n	800f7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7c2:	bf00      	nop
 800f7c4:	e004      	b.n	800f7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7c6:	bf00      	nop
 800f7c8:	e002      	b.n	800f7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f7ca:	bf00      	nop
 800f7cc:	e000      	b.n	800f7d0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f7ce:	bf00      	nop
		}
	}

	return val;
 800f7d0:	697b      	ldr	r3, [r7, #20]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3718      	adds	r7, #24
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f7da:	b590      	push	{r4, r7, lr}
 800f7dc:	b089      	sub	sp, #36	; 0x24
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	60f8      	str	r0, [r7, #12]
 800f7e2:	60b9      	str	r1, [r7, #8]
 800f7e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f7e6:	2302      	movs	r3, #2
 800f7e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	f240 8102 	bls.w	800f9f6 <put_fat+0x21c>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	69db      	ldr	r3, [r3, #28]
 800f7f6:	68ba      	ldr	r2, [r7, #8]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	f080 80fc 	bcs.w	800f9f6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b03      	cmp	r3, #3
 800f804:	f000 80b6 	beq.w	800f974 <put_fat+0x19a>
 800f808:	2b03      	cmp	r3, #3
 800f80a:	f300 80fd 	bgt.w	800fa08 <put_fat+0x22e>
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d003      	beq.n	800f81a <put_fat+0x40>
 800f812:	2b02      	cmp	r3, #2
 800f814:	f000 8083 	beq.w	800f91e <put_fat+0x144>
 800f818:	e0f6      	b.n	800fa08 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	61bb      	str	r3, [r7, #24]
 800f81e:	69bb      	ldr	r3, [r7, #24]
 800f820:	085b      	lsrs	r3, r3, #1
 800f822:	69ba      	ldr	r2, [r7, #24]
 800f824:	4413      	add	r3, r2
 800f826:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	899b      	ldrh	r3, [r3, #12]
 800f830:	4619      	mov	r1, r3
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	fbb3 f3f1 	udiv	r3, r3, r1
 800f838:	4413      	add	r3, r2
 800f83a:	4619      	mov	r1, r3
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7ff fe3b 	bl	800f4b8 <move_window>
 800f842:	4603      	mov	r3, r0
 800f844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f846:	7ffb      	ldrb	r3, [r7, #31]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f040 80d6 	bne.w	800f9fa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	61ba      	str	r2, [r7, #24]
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	8992      	ldrh	r2, [r2, #12]
 800f85e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f862:	fb02 f200 	mul.w	r2, r2, r0
 800f866:	1a9b      	subs	r3, r3, r2
 800f868:	440b      	add	r3, r1
 800f86a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	f003 0301 	and.w	r3, r3, #1
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00d      	beq.n	800f892 <put_fat+0xb8>
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	b25b      	sxtb	r3, r3
 800f87c:	f003 030f 	and.w	r3, r3, #15
 800f880:	b25a      	sxtb	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	b2db      	uxtb	r3, r3
 800f886:	011b      	lsls	r3, r3, #4
 800f888:	b25b      	sxtb	r3, r3
 800f88a:	4313      	orrs	r3, r2
 800f88c:	b25b      	sxtb	r3, r3
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	e001      	b.n	800f896 <put_fat+0xbc>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	b2db      	uxtb	r3, r3
 800f896:	697a      	ldr	r2, [r7, #20]
 800f898:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2201      	movs	r2, #1
 800f89e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	899b      	ldrh	r3, [r3, #12]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7ff fdff 	bl	800f4b8 <move_window>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8be:	7ffb      	ldrb	r3, [r7, #31]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f040 809c 	bne.w	800f9fe <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	899b      	ldrh	r3, [r3, #12]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8d8:	fb02 f200 	mul.w	r2, r2, r0
 800f8dc:	1a9b      	subs	r3, r3, r2
 800f8de:	440b      	add	r3, r1
 800f8e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d003      	beq.n	800f8f4 <put_fat+0x11a>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	091b      	lsrs	r3, r3, #4
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	e00e      	b.n	800f912 <put_fat+0x138>
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	b25b      	sxtb	r3, r3
 800f8fa:	f023 030f 	bic.w	r3, r3, #15
 800f8fe:	b25a      	sxtb	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	0a1b      	lsrs	r3, r3, #8
 800f904:	b25b      	sxtb	r3, r3
 800f906:	f003 030f 	and.w	r3, r3, #15
 800f90a:	b25b      	sxtb	r3, r3
 800f90c:	4313      	orrs	r3, r2
 800f90e:	b25b      	sxtb	r3, r3
 800f910:	b2db      	uxtb	r3, r3
 800f912:	697a      	ldr	r2, [r7, #20]
 800f914:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2201      	movs	r2, #1
 800f91a:	70da      	strb	r2, [r3, #3]
			break;
 800f91c:	e074      	b.n	800fa08 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	899b      	ldrh	r3, [r3, #12]
 800f926:	085b      	lsrs	r3, r3, #1
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4619      	mov	r1, r3
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f932:	4413      	add	r3, r2
 800f934:	4619      	mov	r1, r3
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f7ff fdbe 	bl	800f4b8 <move_window>
 800f93c:	4603      	mov	r3, r0
 800f93e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f940:	7ffb      	ldrb	r3, [r7, #31]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d15d      	bne.n	800fa02 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	005b      	lsls	r3, r3, #1
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	8992      	ldrh	r2, [r2, #12]
 800f954:	fbb3 f0f2 	udiv	r0, r3, r2
 800f958:	fb02 f200 	mul.w	r2, r2, r0
 800f95c:	1a9b      	subs	r3, r3, r2
 800f95e:	440b      	add	r3, r1
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	b292      	uxth	r2, r2
 800f964:	4611      	mov	r1, r2
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff faff 	bl	800ef6a <st_word>
			fs->wflag = 1;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2201      	movs	r2, #1
 800f970:	70da      	strb	r2, [r3, #3]
			break;
 800f972:	e049      	b.n	800fa08 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	899b      	ldrh	r3, [r3, #12]
 800f97c:	089b      	lsrs	r3, r3, #2
 800f97e:	b29b      	uxth	r3, r3
 800f980:	4619      	mov	r1, r3
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	fbb3 f3f1 	udiv	r3, r3, r1
 800f988:	4413      	add	r3, r2
 800f98a:	4619      	mov	r1, r3
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff fd93 	bl	800f4b8 <move_window>
 800f992:	4603      	mov	r3, r0
 800f994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f996:	7ffb      	ldrb	r3, [r7, #31]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d134      	bne.n	800fa06 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	8992      	ldrh	r2, [r2, #12]
 800f9b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9b4:	fb02 f200 	mul.w	r2, r2, r0
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	440b      	add	r3, r1
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff fab1 	bl	800ef24 <ld_dword>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f9c8:	4323      	orrs	r3, r4
 800f9ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	8992      	ldrh	r2, [r2, #12]
 800f9da:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9de:	fb02 f200 	mul.w	r2, r2, r0
 800f9e2:	1a9b      	subs	r3, r3, r2
 800f9e4:	440b      	add	r3, r1
 800f9e6:	6879      	ldr	r1, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff fad9 	bl	800efa0 <st_dword>
			fs->wflag = 1;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	70da      	strb	r2, [r3, #3]
			break;
 800f9f4:	e008      	b.n	800fa08 <put_fat+0x22e>
		}
	}
 800f9f6:	bf00      	nop
 800f9f8:	e006      	b.n	800fa08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f9fa:	bf00      	nop
 800f9fc:	e004      	b.n	800fa08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f9fe:	bf00      	nop
 800fa00:	e002      	b.n	800fa08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fa02:	bf00      	nop
 800fa04:	e000      	b.n	800fa08 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fa06:	bf00      	nop
	return res;
 800fa08:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3724      	adds	r7, #36	; 0x24
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd90      	pop	{r4, r7, pc}

0800fa12 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b088      	sub	sp, #32
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	60f8      	str	r0, [r7, #12]
 800fa1a:	60b9      	str	r1, [r7, #8]
 800fa1c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d904      	bls.n	800fa38 <remove_chain+0x26>
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	69db      	ldr	r3, [r3, #28]
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d301      	bcc.n	800fa3c <remove_chain+0x2a>
 800fa38:	2302      	movs	r3, #2
 800fa3a:	e04b      	b.n	800fad4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00c      	beq.n	800fa5c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fa42:	f04f 32ff 	mov.w	r2, #4294967295
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	69b8      	ldr	r0, [r7, #24]
 800fa4a:	f7ff fec6 	bl	800f7da <put_fat>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fa52:	7ffb      	ldrb	r3, [r7, #31]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <remove_chain+0x4a>
 800fa58:	7ffb      	ldrb	r3, [r7, #31]
 800fa5a:	e03b      	b.n	800fad4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fa5c:	68b9      	ldr	r1, [r7, #8]
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff fde7 	bl	800f632 <get_fat>
 800fa64:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d031      	beq.n	800fad0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d101      	bne.n	800fa76 <remove_chain+0x64>
 800fa72:	2302      	movs	r3, #2
 800fa74:	e02e      	b.n	800fad4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7c:	d101      	bne.n	800fa82 <remove_chain+0x70>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e028      	b.n	800fad4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fa82:	2200      	movs	r2, #0
 800fa84:	68b9      	ldr	r1, [r7, #8]
 800fa86:	69b8      	ldr	r0, [r7, #24]
 800fa88:	f7ff fea7 	bl	800f7da <put_fat>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fa90:	7ffb      	ldrb	r3, [r7, #31]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d001      	beq.n	800fa9a <remove_chain+0x88>
 800fa96:	7ffb      	ldrb	r3, [r7, #31]
 800fa98:	e01c      	b.n	800fad4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	699a      	ldr	r2, [r3, #24]
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	69db      	ldr	r3, [r3, #28]
 800faa2:	3b02      	subs	r3, #2
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d20b      	bcs.n	800fac0 <remove_chain+0xae>
			fs->free_clst++;
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	699b      	ldr	r3, [r3, #24]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	791b      	ldrb	r3, [r3, #4]
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	69db      	ldr	r3, [r3, #28]
 800fac8:	68ba      	ldr	r2, [r7, #8]
 800faca:	429a      	cmp	r2, r3
 800facc:	d3c6      	bcc.n	800fa5c <remove_chain+0x4a>
 800face:	e000      	b.n	800fad2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fad0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3720      	adds	r7, #32
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b088      	sub	sp, #32
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10d      	bne.n	800fb0e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d004      	beq.n	800fb08 <create_chain+0x2c>
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	69ba      	ldr	r2, [r7, #24]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d31b      	bcc.n	800fb40 <create_chain+0x64>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	61bb      	str	r3, [r7, #24]
 800fb0c:	e018      	b.n	800fb40 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fb0e:	6839      	ldr	r1, [r7, #0]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff fd8e 	bl	800f632 <get_fat>
 800fb16:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d801      	bhi.n	800fb22 <create_chain+0x46>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e070      	b.n	800fc04 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb28:	d101      	bne.n	800fb2e <create_chain+0x52>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	e06a      	b.n	800fc04 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	69db      	ldr	r3, [r3, #28]
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d201      	bcs.n	800fb3c <create_chain+0x60>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	e063      	b.n	800fc04 <create_chain+0x128>
		scl = clst;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	3301      	adds	r3, #1
 800fb48:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	69db      	ldr	r3, [r3, #28]
 800fb4e:	69fa      	ldr	r2, [r7, #28]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d307      	bcc.n	800fb64 <create_chain+0x88>
				ncl = 2;
 800fb54:	2302      	movs	r3, #2
 800fb56:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fb58:	69fa      	ldr	r2, [r7, #28]
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d901      	bls.n	800fb64 <create_chain+0x88>
 800fb60:	2300      	movs	r3, #0
 800fb62:	e04f      	b.n	800fc04 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fb64:	69f9      	ldr	r1, [r7, #28]
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff fd63 	bl	800f632 <get_fat>
 800fb6c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00e      	beq.n	800fb92 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d003      	beq.n	800fb82 <create_chain+0xa6>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb80:	d101      	bne.n	800fb86 <create_chain+0xaa>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	e03e      	b.n	800fc04 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fb86:	69fa      	ldr	r2, [r7, #28]
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d1da      	bne.n	800fb44 <create_chain+0x68>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e038      	b.n	800fc04 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fb92:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fb94:	f04f 32ff 	mov.w	r2, #4294967295
 800fb98:	69f9      	ldr	r1, [r7, #28]
 800fb9a:	6938      	ldr	r0, [r7, #16]
 800fb9c:	f7ff fe1d 	bl	800f7da <put_fat>
 800fba0:	4603      	mov	r3, r0
 800fba2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fba4:	7dfb      	ldrb	r3, [r7, #23]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d109      	bne.n	800fbbe <create_chain+0xe2>
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d006      	beq.n	800fbbe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fbb0:	69fa      	ldr	r2, [r7, #28]
 800fbb2:	6839      	ldr	r1, [r7, #0]
 800fbb4:	6938      	ldr	r0, [r7, #16]
 800fbb6:	f7ff fe10 	bl	800f7da <put_fat>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d116      	bne.n	800fbf2 <create_chain+0x116>
		fs->last_clst = ncl;
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	699a      	ldr	r2, [r3, #24]
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	69db      	ldr	r3, [r3, #28]
 800fbd2:	3b02      	subs	r3, #2
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d804      	bhi.n	800fbe2 <create_chain+0x106>
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	699b      	ldr	r3, [r3, #24]
 800fbdc:	1e5a      	subs	r2, r3, #1
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	791b      	ldrb	r3, [r3, #4]
 800fbe6:	f043 0301 	orr.w	r3, r3, #1
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	711a      	strb	r2, [r3, #4]
 800fbf0:	e007      	b.n	800fc02 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d102      	bne.n	800fbfe <create_chain+0x122>
 800fbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbfc:	e000      	b.n	800fc00 <create_chain+0x124>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fc02:	69fb      	ldr	r3, [r7, #28]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3720      	adds	r7, #32
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b087      	sub	sp, #28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc20:	3304      	adds	r3, #4
 800fc22:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	899b      	ldrh	r3, [r3, #12]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	8952      	ldrh	r2, [r2, #10]
 800fc34:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	1d1a      	adds	r2, r3, #4
 800fc3e:	613a      	str	r2, [r7, #16]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d101      	bne.n	800fc4e <clmt_clust+0x42>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	e010      	b.n	800fc70 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fc4e:	697a      	ldr	r2, [r7, #20]
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d307      	bcc.n	800fc66 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fc56:	697a      	ldr	r2, [r7, #20]
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	617b      	str	r3, [r7, #20]
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	3304      	adds	r3, #4
 800fc62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc64:	e7e9      	b.n	800fc3a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fc66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	4413      	add	r3, r2
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	371c      	adds	r7, #28
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc92:	d204      	bcs.n	800fc9e <dir_sdi+0x22>
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	f003 031f 	and.w	r3, r3, #31
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fc9e:	2302      	movs	r3, #2
 800fca0:	e071      	b.n	800fd86 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d106      	bne.n	800fcc2 <dir_sdi+0x46>
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d902      	bls.n	800fcc2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10c      	bne.n	800fce2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	095b      	lsrs	r3, r3, #5
 800fccc:	693a      	ldr	r2, [r7, #16]
 800fcce:	8912      	ldrh	r2, [r2, #8]
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d301      	bcc.n	800fcd8 <dir_sdi+0x5c>
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	e056      	b.n	800fd86 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	61da      	str	r2, [r3, #28]
 800fce0:	e02d      	b.n	800fd3e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	895b      	ldrh	r3, [r3, #10]
 800fce6:	461a      	mov	r2, r3
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	899b      	ldrh	r3, [r3, #12]
 800fcec:	fb03 f302 	mul.w	r3, r3, r2
 800fcf0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fcf2:	e019      	b.n	800fd28 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6979      	ldr	r1, [r7, #20]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff fc9a 	bl	800f632 <get_fat>
 800fcfe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd06:	d101      	bne.n	800fd0c <dir_sdi+0x90>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	e03c      	b.n	800fd86 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d904      	bls.n	800fd1c <dir_sdi+0xa0>
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	69db      	ldr	r3, [r3, #28]
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d301      	bcc.n	800fd20 <dir_sdi+0xa4>
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	e032      	b.n	800fd86 <dir_sdi+0x10a>
			ofs -= csz;
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fd28:	683a      	ldr	r2, [r7, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d2e1      	bcs.n	800fcf4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fd30:	6979      	ldr	r1, [r7, #20]
 800fd32:	6938      	ldr	r0, [r7, #16]
 800fd34:	f7ff fc5e 	bl	800f5f4 <clust2sect>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	697a      	ldr	r2, [r7, #20]
 800fd42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	69db      	ldr	r3, [r3, #28]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d101      	bne.n	800fd50 <dir_sdi+0xd4>
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	e01a      	b.n	800fd86 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	69da      	ldr	r2, [r3, #28]
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	899b      	ldrh	r3, [r3, #12]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd60:	441a      	add	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	899b      	ldrh	r3, [r3, #12]
 800fd70:	461a      	mov	r2, r3
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd78:	fb02 f200 	mul.w	r2, r2, r0
 800fd7c:	1a9b      	subs	r3, r3, r2
 800fd7e:	18ca      	adds	r2, r1, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3718      	adds	r7, #24
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b086      	sub	sp, #24
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
 800fd96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	3320      	adds	r3, #32
 800fda4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	69db      	ldr	r3, [r3, #28]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d003      	beq.n	800fdb6 <dir_next+0x28>
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fdb4:	d301      	bcc.n	800fdba <dir_next+0x2c>
 800fdb6:	2304      	movs	r3, #4
 800fdb8:	e0bb      	b.n	800ff32 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	899b      	ldrh	r3, [r3, #12]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdc6:	fb02 f201 	mul.w	r2, r2, r1
 800fdca:	1a9b      	subs	r3, r3, r2
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f040 809d 	bne.w	800ff0c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	69db      	ldr	r3, [r3, #28]
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	699b      	ldr	r3, [r3, #24]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d10b      	bne.n	800fdfc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	095b      	lsrs	r3, r3, #5
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	8912      	ldrh	r2, [r2, #8]
 800fdec:	4293      	cmp	r3, r2
 800fdee:	f0c0 808d 	bcc.w	800ff0c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	61da      	str	r2, [r3, #28]
 800fdf8:	2304      	movs	r3, #4
 800fdfa:	e09a      	b.n	800ff32 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	899b      	ldrh	r3, [r3, #12]
 800fe00:	461a      	mov	r2, r3
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe08:	68fa      	ldr	r2, [r7, #12]
 800fe0a:	8952      	ldrh	r2, [r2, #10]
 800fe0c:	3a01      	subs	r2, #1
 800fe0e:	4013      	ands	r3, r2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d17b      	bne.n	800ff0c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	4610      	mov	r0, r2
 800fe1e:	f7ff fc08 	bl	800f632 <get_fat>
 800fe22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d801      	bhi.n	800fe2e <dir_next+0xa0>
 800fe2a:	2302      	movs	r3, #2
 800fe2c:	e081      	b.n	800ff32 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe34:	d101      	bne.n	800fe3a <dir_next+0xac>
 800fe36:	2301      	movs	r3, #1
 800fe38:	e07b      	b.n	800ff32 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	69db      	ldr	r3, [r3, #28]
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d359      	bcc.n	800fef8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d104      	bne.n	800fe54 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	61da      	str	r2, [r3, #28]
 800fe50:	2304      	movs	r3, #4
 800fe52:	e06e      	b.n	800ff32 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	f7ff fe3d 	bl	800fadc <create_chain>
 800fe62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d101      	bne.n	800fe6e <dir_next+0xe0>
 800fe6a:	2307      	movs	r3, #7
 800fe6c:	e061      	b.n	800ff32 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d101      	bne.n	800fe78 <dir_next+0xea>
 800fe74:	2302      	movs	r3, #2
 800fe76:	e05c      	b.n	800ff32 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe7e:	d101      	bne.n	800fe84 <dir_next+0xf6>
 800fe80:	2301      	movs	r3, #1
 800fe82:	e056      	b.n	800ff32 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fe84:	68f8      	ldr	r0, [r7, #12]
 800fe86:	f7ff fad3 	bl	800f430 <sync_window>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d001      	beq.n	800fe94 <dir_next+0x106>
 800fe90:	2301      	movs	r3, #1
 800fe92:	e04e      	b.n	800ff32 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	899b      	ldrh	r3, [r3, #12]
 800fe9e:	461a      	mov	r2, r3
 800fea0:	2100      	movs	r1, #0
 800fea2:	f7ff f8ca 	bl	800f03a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fea6:	2300      	movs	r3, #0
 800fea8:	613b      	str	r3, [r7, #16]
 800feaa:	6979      	ldr	r1, [r7, #20]
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f7ff fba1 	bl	800f5f4 <clust2sect>
 800feb2:	4602      	mov	r2, r0
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	635a      	str	r2, [r3, #52]	; 0x34
 800feb8:	e012      	b.n	800fee0 <dir_next+0x152>
						fs->wflag = 1;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2201      	movs	r2, #1
 800febe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7ff fab5 	bl	800f430 <sync_window>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <dir_next+0x142>
 800fecc:	2301      	movs	r3, #1
 800fece:	e030      	b.n	800ff32 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	3301      	adds	r3, #1
 800fed4:	613b      	str	r3, [r7, #16]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feda:	1c5a      	adds	r2, r3, #1
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	635a      	str	r2, [r3, #52]	; 0x34
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	895b      	ldrh	r3, [r3, #10]
 800fee4:	461a      	mov	r2, r3
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	4293      	cmp	r3, r2
 800feea:	d3e6      	bcc.n	800feba <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	1ad2      	subs	r2, r2, r3
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fefe:	6979      	ldr	r1, [r7, #20]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff fb77 	bl	800f5f4 <clust2sect>
 800ff06:	4602      	mov	r2, r0
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	68ba      	ldr	r2, [r7, #8]
 800ff10:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	899b      	ldrh	r3, [r3, #12]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff24:	fb02 f200 	mul.w	r2, r2, r0
 800ff28:	1a9b      	subs	r3, r3, r2
 800ff2a:	18ca      	adds	r2, r1, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3718      	adds	r7, #24
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b086      	sub	sp, #24
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7ff fe95 	bl	800fc7c <dir_sdi>
 800ff52:	4603      	mov	r3, r0
 800ff54:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d12b      	bne.n	800ffb4 <dir_alloc+0x7a>
		n = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	4619      	mov	r1, r3
 800ff66:	68f8      	ldr	r0, [r7, #12]
 800ff68:	f7ff faa6 	bl	800f4b8 <move_window>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff70:	7dfb      	ldrb	r3, [r7, #23]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d11d      	bne.n	800ffb2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6a1b      	ldr	r3, [r3, #32]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2be5      	cmp	r3, #229	; 0xe5
 800ff7e:	d004      	beq.n	800ff8a <dir_alloc+0x50>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6a1b      	ldr	r3, [r3, #32]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d107      	bne.n	800ff9a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	613b      	str	r3, [r7, #16]
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d102      	bne.n	800ff9e <dir_alloc+0x64>
 800ff98:	e00c      	b.n	800ffb4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7ff fef4 	bl	800fd8e <dir_next>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ffaa:	7dfb      	ldrb	r3, [r7, #23]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d0d7      	beq.n	800ff60 <dir_alloc+0x26>
 800ffb0:	e000      	b.n	800ffb4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ffb2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ffb4:	7dfb      	ldrb	r3, [r7, #23]
 800ffb6:	2b04      	cmp	r3, #4
 800ffb8:	d101      	bne.n	800ffbe <dir_alloc+0x84>
 800ffba:	2307      	movs	r3, #7
 800ffbc:	75fb      	strb	r3, [r7, #23]
	return res;
 800ffbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	331a      	adds	r3, #26
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fe ff8c 	bl	800eef4 <ld_word>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	2b03      	cmp	r3, #3
 800ffe6:	d109      	bne.n	800fffc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	3314      	adds	r3, #20
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe ff81 	bl	800eef4 <ld_word>
 800fff2:	4603      	mov	r3, r0
 800fff4:	041b      	lsls	r3, r3, #16
 800fff6:	68fa      	ldr	r2, [r7, #12]
 800fff8:	4313      	orrs	r3, r2
 800fffa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fffc:	68fb      	ldr	r3, [r7, #12]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b084      	sub	sp, #16
 801000a:	af00      	add	r7, sp, #0
 801000c:	60f8      	str	r0, [r7, #12]
 801000e:	60b9      	str	r1, [r7, #8]
 8010010:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	331a      	adds	r3, #26
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	b292      	uxth	r2, r2
 801001a:	4611      	mov	r1, r2
 801001c:	4618      	mov	r0, r3
 801001e:	f7fe ffa4 	bl	800ef6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	2b03      	cmp	r3, #3
 8010028:	d109      	bne.n	801003e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	f103 0214 	add.w	r2, r3, #20
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	0c1b      	lsrs	r3, r3, #16
 8010034:	b29b      	uxth	r3, r3
 8010036:	4619      	mov	r1, r3
 8010038:	4610      	mov	r0, r2
 801003a:	f7fe ff96 	bl	800ef6a <st_word>
	}
}
 801003e:	bf00      	nop
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b086      	sub	sp, #24
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010054:	2100      	movs	r1, #0
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7ff fe10 	bl	800fc7c <dir_sdi>
 801005c:	4603      	mov	r3, r0
 801005e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010060:	7dfb      	ldrb	r3, [r7, #23]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <dir_find+0x24>
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	e03e      	b.n	80100e8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	69db      	ldr	r3, [r3, #28]
 801006e:	4619      	mov	r1, r3
 8010070:	6938      	ldr	r0, [r7, #16]
 8010072:	f7ff fa21 	bl	800f4b8 <move_window>
 8010076:	4603      	mov	r3, r0
 8010078:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d12f      	bne.n	80100e0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6a1b      	ldr	r3, [r3, #32]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d102      	bne.n	8010094 <dir_find+0x4e>
 801008e:	2304      	movs	r3, #4
 8010090:	75fb      	strb	r3, [r7, #23]
 8010092:	e028      	b.n	80100e6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a1b      	ldr	r3, [r3, #32]
 8010098:	330b      	adds	r3, #11
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100a0:	b2da      	uxtb	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	330b      	adds	r3, #11
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	f003 0308 	and.w	r3, r3, #8
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10a      	bne.n	80100cc <dir_find+0x86>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6a18      	ldr	r0, [r3, #32]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3324      	adds	r3, #36	; 0x24
 80100be:	220b      	movs	r2, #11
 80100c0:	4619      	mov	r1, r3
 80100c2:	f7fe ffd5 	bl	800f070 <mem_cmp>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80100cc:	2100      	movs	r1, #0
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f7ff fe5d 	bl	800fd8e <dir_next>
 80100d4:	4603      	mov	r3, r0
 80100d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80100d8:	7dfb      	ldrb	r3, [r7, #23]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d0c5      	beq.n	801006a <dir_find+0x24>
 80100de:	e002      	b.n	80100e6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80100e0:	bf00      	nop
 80100e2:	e000      	b.n	80100e6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80100e4:	bf00      	nop

	return res;
 80100e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80100fe:	2101      	movs	r1, #1
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f7ff ff1a 	bl	800ff3a <dir_alloc>
 8010106:	4603      	mov	r3, r0
 8010108:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d11c      	bne.n	801014a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	69db      	ldr	r3, [r3, #28]
 8010114:	4619      	mov	r1, r3
 8010116:	68b8      	ldr	r0, [r7, #8]
 8010118:	f7ff f9ce 	bl	800f4b8 <move_window>
 801011c:	4603      	mov	r3, r0
 801011e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010120:	7bfb      	ldrb	r3, [r7, #15]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d111      	bne.n	801014a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a1b      	ldr	r3, [r3, #32]
 801012a:	2220      	movs	r2, #32
 801012c:	2100      	movs	r1, #0
 801012e:	4618      	mov	r0, r3
 8010130:	f7fe ff83 	bl	800f03a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a18      	ldr	r0, [r3, #32]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	3324      	adds	r3, #36	; 0x24
 801013c:	220b      	movs	r2, #11
 801013e:	4619      	mov	r1, r3
 8010140:	f7fe ff5a 	bl	800eff8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	2201      	movs	r2, #1
 8010148:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801014a:	7bfb      	ldrb	r3, [r7, #15]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3710      	adds	r7, #16
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b088      	sub	sp, #32
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	60fb      	str	r3, [r7, #12]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3324      	adds	r3, #36	; 0x24
 8010168:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801016a:	220b      	movs	r2, #11
 801016c:	2120      	movs	r1, #32
 801016e:	68b8      	ldr	r0, [r7, #8]
 8010170:	f7fe ff63 	bl	800f03a <mem_set>
	si = i = 0; ni = 8;
 8010174:	2300      	movs	r3, #0
 8010176:	613b      	str	r3, [r7, #16]
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	61fb      	str	r3, [r7, #28]
 801017c:	2308      	movs	r3, #8
 801017e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	1c5a      	adds	r2, r3, #1
 8010184:	61fa      	str	r2, [r7, #28]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	4413      	add	r3, r2
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801018e:	7efb      	ldrb	r3, [r7, #27]
 8010190:	2b20      	cmp	r3, #32
 8010192:	d94e      	bls.n	8010232 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010194:	7efb      	ldrb	r3, [r7, #27]
 8010196:	2b2f      	cmp	r3, #47	; 0x2f
 8010198:	d006      	beq.n	80101a8 <create_name+0x54>
 801019a:	7efb      	ldrb	r3, [r7, #27]
 801019c:	2b5c      	cmp	r3, #92	; 0x5c
 801019e:	d110      	bne.n	80101c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80101a0:	e002      	b.n	80101a8 <create_name+0x54>
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	3301      	adds	r3, #1
 80101a6:	61fb      	str	r3, [r7, #28]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	4413      	add	r3, r2
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	2b2f      	cmp	r3, #47	; 0x2f
 80101b2:	d0f6      	beq.n	80101a2 <create_name+0x4e>
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	4413      	add	r3, r2
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b5c      	cmp	r3, #92	; 0x5c
 80101be:	d0f0      	beq.n	80101a2 <create_name+0x4e>
			break;
 80101c0:	e038      	b.n	8010234 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80101c2:	7efb      	ldrb	r3, [r7, #27]
 80101c4:	2b2e      	cmp	r3, #46	; 0x2e
 80101c6:	d003      	beq.n	80101d0 <create_name+0x7c>
 80101c8:	693a      	ldr	r2, [r7, #16]
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d30c      	bcc.n	80101ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2b0b      	cmp	r3, #11
 80101d4:	d002      	beq.n	80101dc <create_name+0x88>
 80101d6:	7efb      	ldrb	r3, [r7, #27]
 80101d8:	2b2e      	cmp	r3, #46	; 0x2e
 80101da:	d001      	beq.n	80101e0 <create_name+0x8c>
 80101dc:	2306      	movs	r3, #6
 80101de:	e044      	b.n	801026a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80101e0:	2308      	movs	r3, #8
 80101e2:	613b      	str	r3, [r7, #16]
 80101e4:	230b      	movs	r3, #11
 80101e6:	617b      	str	r3, [r7, #20]
			continue;
 80101e8:	e022      	b.n	8010230 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80101ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	da04      	bge.n	80101fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80101f2:	7efb      	ldrb	r3, [r7, #27]
 80101f4:	3b80      	subs	r3, #128	; 0x80
 80101f6:	4a1f      	ldr	r2, [pc, #124]	; (8010274 <create_name+0x120>)
 80101f8:	5cd3      	ldrb	r3, [r2, r3]
 80101fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80101fc:	7efb      	ldrb	r3, [r7, #27]
 80101fe:	4619      	mov	r1, r3
 8010200:	481d      	ldr	r0, [pc, #116]	; (8010278 <create_name+0x124>)
 8010202:	f7fe ff5c 	bl	800f0be <chk_chr>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <create_name+0xbc>
 801020c:	2306      	movs	r3, #6
 801020e:	e02c      	b.n	801026a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010210:	7efb      	ldrb	r3, [r7, #27]
 8010212:	2b60      	cmp	r3, #96	; 0x60
 8010214:	d905      	bls.n	8010222 <create_name+0xce>
 8010216:	7efb      	ldrb	r3, [r7, #27]
 8010218:	2b7a      	cmp	r3, #122	; 0x7a
 801021a:	d802      	bhi.n	8010222 <create_name+0xce>
 801021c:	7efb      	ldrb	r3, [r7, #27]
 801021e:	3b20      	subs	r3, #32
 8010220:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	613a      	str	r2, [r7, #16]
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	4413      	add	r3, r2
 801022c:	7efa      	ldrb	r2, [r7, #27]
 801022e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010230:	e7a6      	b.n	8010180 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010232:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010234:	68fa      	ldr	r2, [r7, #12]
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	441a      	add	r2, r3
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <create_name+0xf4>
 8010244:	2306      	movs	r3, #6
 8010246:	e010      	b.n	801026a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2be5      	cmp	r3, #229	; 0xe5
 801024e:	d102      	bne.n	8010256 <create_name+0x102>
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	2205      	movs	r2, #5
 8010254:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010256:	7efb      	ldrb	r3, [r7, #27]
 8010258:	2b20      	cmp	r3, #32
 801025a:	d801      	bhi.n	8010260 <create_name+0x10c>
 801025c:	2204      	movs	r2, #4
 801025e:	e000      	b.n	8010262 <create_name+0x10e>
 8010260:	2200      	movs	r2, #0
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	330b      	adds	r3, #11
 8010266:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010268:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801026a:	4618      	mov	r0, r3
 801026c:	3720      	adds	r7, #32
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	08015d34 	.word	0x08015d34
 8010278:	08015c94 	.word	0x08015c94

0801027c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010290:	e002      	b.n	8010298 <follow_path+0x1c>
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	3301      	adds	r3, #1
 8010296:	603b      	str	r3, [r7, #0]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	2b2f      	cmp	r3, #47	; 0x2f
 801029e:	d0f8      	beq.n	8010292 <follow_path+0x16>
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	2b5c      	cmp	r3, #92	; 0x5c
 80102a6:	d0f4      	beq.n	8010292 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	2200      	movs	r2, #0
 80102ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	2b1f      	cmp	r3, #31
 80102b4:	d80a      	bhi.n	80102cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2280      	movs	r2, #128	; 0x80
 80102ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80102be:	2100      	movs	r1, #0
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7ff fcdb 	bl	800fc7c <dir_sdi>
 80102c6:	4603      	mov	r3, r0
 80102c8:	75fb      	strb	r3, [r7, #23]
 80102ca:	e048      	b.n	801035e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80102cc:	463b      	mov	r3, r7
 80102ce:	4619      	mov	r1, r3
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f7ff ff3f 	bl	8010154 <create_name>
 80102d6:	4603      	mov	r3, r0
 80102d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80102da:	7dfb      	ldrb	r3, [r7, #23]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d139      	bne.n	8010354 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7ff feb0 	bl	8010046 <dir_find>
 80102e6:	4603      	mov	r3, r0
 80102e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80102f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00a      	beq.n	801030e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80102f8:	7dfb      	ldrb	r3, [r7, #23]
 80102fa:	2b04      	cmp	r3, #4
 80102fc:	d12c      	bne.n	8010358 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80102fe:	7afb      	ldrb	r3, [r7, #11]
 8010300:	f003 0304 	and.w	r3, r3, #4
 8010304:	2b00      	cmp	r3, #0
 8010306:	d127      	bne.n	8010358 <follow_path+0xdc>
 8010308:	2305      	movs	r3, #5
 801030a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801030c:	e024      	b.n	8010358 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801030e:	7afb      	ldrb	r3, [r7, #11]
 8010310:	f003 0304 	and.w	r3, r3, #4
 8010314:	2b00      	cmp	r3, #0
 8010316:	d121      	bne.n	801035c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	799b      	ldrb	r3, [r3, #6]
 801031c:	f003 0310 	and.w	r3, r3, #16
 8010320:	2b00      	cmp	r3, #0
 8010322:	d102      	bne.n	801032a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010324:	2305      	movs	r3, #5
 8010326:	75fb      	strb	r3, [r7, #23]
 8010328:	e019      	b.n	801035e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	695b      	ldr	r3, [r3, #20]
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	8992      	ldrh	r2, [r2, #12]
 8010338:	fbb3 f0f2 	udiv	r0, r3, r2
 801033c:	fb02 f200 	mul.w	r2, r2, r0
 8010340:	1a9b      	subs	r3, r3, r2
 8010342:	440b      	add	r3, r1
 8010344:	4619      	mov	r1, r3
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7ff fe3e 	bl	800ffc8 <ld_clust>
 801034c:	4602      	mov	r2, r0
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010352:	e7bb      	b.n	80102cc <follow_path+0x50>
			if (res != FR_OK) break;
 8010354:	bf00      	nop
 8010356:	e002      	b.n	801035e <follow_path+0xe2>
				break;
 8010358:	bf00      	nop
 801035a:	e000      	b.n	801035e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801035c:	bf00      	nop
			}
		}
	}

	return res;
 801035e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3718      	adds	r7, #24
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010368:	b480      	push	{r7}
 801036a:	b087      	sub	sp, #28
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010370:	f04f 33ff 	mov.w	r3, #4294967295
 8010374:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d031      	beq.n	80103e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	617b      	str	r3, [r7, #20]
 8010384:	e002      	b.n	801038c <get_ldnumber+0x24>
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	3301      	adds	r3, #1
 801038a:	617b      	str	r3, [r7, #20]
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b20      	cmp	r3, #32
 8010392:	d903      	bls.n	801039c <get_ldnumber+0x34>
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	2b3a      	cmp	r3, #58	; 0x3a
 801039a:	d1f4      	bne.n	8010386 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	2b3a      	cmp	r3, #58	; 0x3a
 80103a2:	d11c      	bne.n	80103de <get_ldnumber+0x76>
			tp = *path;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	60fa      	str	r2, [r7, #12]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	3b30      	subs	r3, #48	; 0x30
 80103b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2b09      	cmp	r3, #9
 80103ba:	d80e      	bhi.n	80103da <get_ldnumber+0x72>
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d10a      	bne.n	80103da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d107      	bne.n	80103da <get_ldnumber+0x72>
					vol = (int)i;
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	3301      	adds	r3, #1
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	e002      	b.n	80103e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80103de:	2300      	movs	r3, #0
 80103e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80103e2:	693b      	ldr	r3, [r7, #16]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	371c      	adds	r7, #28
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	70da      	strb	r2, [r3, #3]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f04f 32ff 	mov.w	r2, #4294967295
 8010406:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010408:	6839      	ldr	r1, [r7, #0]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff f854 	bl	800f4b8 <move_window>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d001      	beq.n	801041a <check_fs+0x2a>
 8010416:	2304      	movs	r3, #4
 8010418:	e038      	b.n	801048c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	3338      	adds	r3, #56	; 0x38
 801041e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe fd66 	bl	800eef4 <ld_word>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
 801042c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010430:	429a      	cmp	r2, r3
 8010432:	d001      	beq.n	8010438 <check_fs+0x48>
 8010434:	2303      	movs	r3, #3
 8010436:	e029      	b.n	801048c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801043e:	2be9      	cmp	r3, #233	; 0xe9
 8010440:	d009      	beq.n	8010456 <check_fs+0x66>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010448:	2beb      	cmp	r3, #235	; 0xeb
 801044a:	d11e      	bne.n	801048a <check_fs+0x9a>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010452:	2b90      	cmp	r3, #144	; 0x90
 8010454:	d119      	bne.n	801048a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	3338      	adds	r3, #56	; 0x38
 801045a:	3336      	adds	r3, #54	; 0x36
 801045c:	4618      	mov	r0, r3
 801045e:	f7fe fd61 	bl	800ef24 <ld_dword>
 8010462:	4603      	mov	r3, r0
 8010464:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010468:	4a0a      	ldr	r2, [pc, #40]	; (8010494 <check_fs+0xa4>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d101      	bne.n	8010472 <check_fs+0x82>
 801046e:	2300      	movs	r3, #0
 8010470:	e00c      	b.n	801048c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3338      	adds	r3, #56	; 0x38
 8010476:	3352      	adds	r3, #82	; 0x52
 8010478:	4618      	mov	r0, r3
 801047a:	f7fe fd53 	bl	800ef24 <ld_dword>
 801047e:	4603      	mov	r3, r0
 8010480:	4a05      	ldr	r2, [pc, #20]	; (8010498 <check_fs+0xa8>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d101      	bne.n	801048a <check_fs+0x9a>
 8010486:	2300      	movs	r3, #0
 8010488:	e000      	b.n	801048c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801048a:	2302      	movs	r3, #2
}
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	00544146 	.word	0x00544146
 8010498:	33544146 	.word	0x33544146

0801049c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b096      	sub	sp, #88	; 0x58
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	4613      	mov	r3, r2
 80104a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	2200      	movs	r2, #0
 80104ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7ff ff59 	bl	8010368 <get_ldnumber>
 80104b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80104b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	da01      	bge.n	80104c2 <find_volume+0x26>
 80104be:	230b      	movs	r3, #11
 80104c0:	e26c      	b.n	801099c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80104c2:	4aa4      	ldr	r2, [pc, #656]	; (8010754 <find_volume+0x2b8>)
 80104c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80104cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d101      	bne.n	80104d6 <find_volume+0x3a>
 80104d2:	230c      	movs	r3, #12
 80104d4:	e262      	b.n	801099c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80104d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104d8:	f7fe fe0c 	bl	800f0f4 <lock_fs>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d101      	bne.n	80104e6 <find_volume+0x4a>
 80104e2:	230f      	movs	r3, #15
 80104e4:	e25a      	b.n	801099c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	f023 0301 	bic.w	r3, r3, #1
 80104f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d01a      	beq.n	8010532 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80104fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fe:	785b      	ldrb	r3, [r3, #1]
 8010500:	4618      	mov	r0, r3
 8010502:	f7fe fc59 	bl	800edb8 <disk_status>
 8010506:	4603      	mov	r3, r0
 8010508:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801050c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010510:	f003 0301 	and.w	r3, r3, #1
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10c      	bne.n	8010532 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d007      	beq.n	801052e <find_volume+0x92>
 801051e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010522:	f003 0304 	and.w	r3, r3, #4
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801052a:	230a      	movs	r3, #10
 801052c:	e236      	b.n	801099c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 801052e:	2300      	movs	r3, #0
 8010530:	e234      	b.n	801099c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	2200      	movs	r2, #0
 8010536:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801053a:	b2da      	uxtb	r2, r3
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	785b      	ldrb	r3, [r3, #1]
 8010544:	4618      	mov	r0, r3
 8010546:	f7fe fc51 	bl	800edec <disk_initialize>
 801054a:	4603      	mov	r3, r0
 801054c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010554:	f003 0301 	and.w	r3, r3, #1
 8010558:	2b00      	cmp	r3, #0
 801055a:	d001      	beq.n	8010560 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801055c:	2303      	movs	r3, #3
 801055e:	e21d      	b.n	801099c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010560:	79fb      	ldrb	r3, [r7, #7]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d007      	beq.n	8010576 <find_volume+0xda>
 8010566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801056a:	f003 0304 	and.w	r3, r3, #4
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010572:	230a      	movs	r3, #10
 8010574:	e212      	b.n	801099c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	7858      	ldrb	r0, [r3, #1]
 801057a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057c:	330c      	adds	r3, #12
 801057e:	461a      	mov	r2, r3
 8010580:	2102      	movs	r1, #2
 8010582:	f7fe fc99 	bl	800eeb8 <disk_ioctl>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <find_volume+0xf4>
 801058c:	2301      	movs	r3, #1
 801058e:	e205      	b.n	801099c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	899b      	ldrh	r3, [r3, #12]
 8010594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010598:	d80d      	bhi.n	80105b6 <find_volume+0x11a>
 801059a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059c:	899b      	ldrh	r3, [r3, #12]
 801059e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105a2:	d308      	bcc.n	80105b6 <find_volume+0x11a>
 80105a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a6:	899b      	ldrh	r3, [r3, #12]
 80105a8:	461a      	mov	r2, r3
 80105aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ac:	899b      	ldrh	r3, [r3, #12]
 80105ae:	3b01      	subs	r3, #1
 80105b0:	4013      	ands	r3, r2
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d001      	beq.n	80105ba <find_volume+0x11e>
 80105b6:	2301      	movs	r3, #1
 80105b8:	e1f0      	b.n	801099c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80105be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105c2:	f7ff ff15 	bl	80103f0 <check_fs>
 80105c6:	4603      	mov	r3, r0
 80105c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80105cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	d14b      	bne.n	801066c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80105d4:	2300      	movs	r3, #0
 80105d6:	643b      	str	r3, [r7, #64]	; 0x40
 80105d8:	e01f      	b.n	801061a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80105e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105e2:	011b      	lsls	r3, r3, #4
 80105e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80105e8:	4413      	add	r3, r2
 80105ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ee:	3304      	adds	r3, #4
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d006      	beq.n	8010604 <find_volume+0x168>
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	3308      	adds	r3, #8
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fe fc92 	bl	800ef24 <ld_dword>
 8010600:	4602      	mov	r2, r0
 8010602:	e000      	b.n	8010606 <find_volume+0x16a>
 8010604:	2200      	movs	r2, #0
 8010606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801060e:	440b      	add	r3, r1
 8010610:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010616:	3301      	adds	r3, #1
 8010618:	643b      	str	r3, [r7, #64]	; 0x40
 801061a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801061c:	2b03      	cmp	r3, #3
 801061e:	d9dc      	bls.n	80105da <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010620:	2300      	movs	r3, #0
 8010622:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <find_volume+0x194>
 801062a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801062c:	3b01      	subs	r3, #1
 801062e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010638:	4413      	add	r3, r2
 801063a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801063e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010642:	2b00      	cmp	r3, #0
 8010644:	d005      	beq.n	8010652 <find_volume+0x1b6>
 8010646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801064a:	f7ff fed1 	bl	80103f0 <check_fs>
 801064e:	4603      	mov	r3, r0
 8010650:	e000      	b.n	8010654 <find_volume+0x1b8>
 8010652:	2303      	movs	r3, #3
 8010654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801065c:	2b01      	cmp	r3, #1
 801065e:	d905      	bls.n	801066c <find_volume+0x1d0>
 8010660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010662:	3301      	adds	r3, #1
 8010664:	643b      	str	r3, [r7, #64]	; 0x40
 8010666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010668:	2b03      	cmp	r3, #3
 801066a:	d9e1      	bls.n	8010630 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801066c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010670:	2b04      	cmp	r3, #4
 8010672:	d101      	bne.n	8010678 <find_volume+0x1dc>
 8010674:	2301      	movs	r3, #1
 8010676:	e191      	b.n	801099c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801067c:	2b01      	cmp	r3, #1
 801067e:	d901      	bls.n	8010684 <find_volume+0x1e8>
 8010680:	230d      	movs	r3, #13
 8010682:	e18b      	b.n	801099c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010686:	3338      	adds	r3, #56	; 0x38
 8010688:	330b      	adds	r3, #11
 801068a:	4618      	mov	r0, r3
 801068c:	f7fe fc32 	bl	800eef4 <ld_word>
 8010690:	4603      	mov	r3, r0
 8010692:	461a      	mov	r2, r3
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	899b      	ldrh	r3, [r3, #12]
 8010698:	429a      	cmp	r2, r3
 801069a:	d001      	beq.n	80106a0 <find_volume+0x204>
 801069c:	230d      	movs	r3, #13
 801069e:	e17d      	b.n	801099c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	3338      	adds	r3, #56	; 0x38
 80106a4:	3316      	adds	r3, #22
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fe fc24 	bl	800eef4 <ld_word>
 80106ac:	4603      	mov	r3, r0
 80106ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80106b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d106      	bne.n	80106c4 <find_volume+0x228>
 80106b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b8:	3338      	adds	r3, #56	; 0x38
 80106ba:	3324      	adds	r3, #36	; 0x24
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fe fc31 	bl	800ef24 <ld_dword>
 80106c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80106c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106c8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80106d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80106d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d6:	789b      	ldrb	r3, [r3, #2]
 80106d8:	2b01      	cmp	r3, #1
 80106da:	d005      	beq.n	80106e8 <find_volume+0x24c>
 80106dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106de:	789b      	ldrb	r3, [r3, #2]
 80106e0:	2b02      	cmp	r3, #2
 80106e2:	d001      	beq.n	80106e8 <find_volume+0x24c>
 80106e4:	230d      	movs	r3, #13
 80106e6:	e159      	b.n	801099c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80106e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ea:	789b      	ldrb	r3, [r3, #2]
 80106ec:	461a      	mov	r2, r3
 80106ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106f0:	fb02 f303 	mul.w	r3, r2, r3
 80106f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80106f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	895b      	ldrh	r3, [r3, #10]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d008      	beq.n	801071c <find_volume+0x280>
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	895b      	ldrh	r3, [r3, #10]
 801070e:	461a      	mov	r2, r3
 8010710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010712:	895b      	ldrh	r3, [r3, #10]
 8010714:	3b01      	subs	r3, #1
 8010716:	4013      	ands	r3, r2
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <find_volume+0x284>
 801071c:	230d      	movs	r3, #13
 801071e:	e13d      	b.n	801099c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010722:	3338      	adds	r3, #56	; 0x38
 8010724:	3311      	adds	r3, #17
 8010726:	4618      	mov	r0, r3
 8010728:	f7fe fbe4 	bl	800eef4 <ld_word>
 801072c:	4603      	mov	r3, r0
 801072e:	461a      	mov	r2, r3
 8010730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010732:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010736:	891b      	ldrh	r3, [r3, #8]
 8010738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801073a:	8992      	ldrh	r2, [r2, #12]
 801073c:	0952      	lsrs	r2, r2, #5
 801073e:	b292      	uxth	r2, r2
 8010740:	fbb3 f1f2 	udiv	r1, r3, r2
 8010744:	fb02 f201 	mul.w	r2, r2, r1
 8010748:	1a9b      	subs	r3, r3, r2
 801074a:	b29b      	uxth	r3, r3
 801074c:	2b00      	cmp	r3, #0
 801074e:	d003      	beq.n	8010758 <find_volume+0x2bc>
 8010750:	230d      	movs	r3, #13
 8010752:	e123      	b.n	801099c <find_volume+0x500>
 8010754:	24014904 	.word	0x24014904

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	3338      	adds	r3, #56	; 0x38
 801075c:	3313      	adds	r3, #19
 801075e:	4618      	mov	r0, r3
 8010760:	f7fe fbc8 	bl	800eef4 <ld_word>
 8010764:	4603      	mov	r3, r0
 8010766:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076a:	2b00      	cmp	r3, #0
 801076c:	d106      	bne.n	801077c <find_volume+0x2e0>
 801076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010770:	3338      	adds	r3, #56	; 0x38
 8010772:	3320      	adds	r3, #32
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe fbd5 	bl	800ef24 <ld_dword>
 801077a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801077c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077e:	3338      	adds	r3, #56	; 0x38
 8010780:	330e      	adds	r3, #14
 8010782:	4618      	mov	r0, r3
 8010784:	f7fe fbb6 	bl	800eef4 <ld_word>
 8010788:	4603      	mov	r3, r0
 801078a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801078c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <find_volume+0x2fa>
 8010792:	230d      	movs	r3, #13
 8010794:	e102      	b.n	801099c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010796:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079a:	4413      	add	r3, r2
 801079c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801079e:	8911      	ldrh	r1, [r2, #8]
 80107a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107a2:	8992      	ldrh	r2, [r2, #12]
 80107a4:	0952      	lsrs	r2, r2, #5
 80107a6:	b292      	uxth	r2, r2
 80107a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80107ac:	b292      	uxth	r2, r2
 80107ae:	4413      	add	r3, r2
 80107b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80107b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d201      	bcs.n	80107be <find_volume+0x322>
 80107ba:	230d      	movs	r3, #13
 80107bc:	e0ee      	b.n	801099c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80107be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107c6:	8952      	ldrh	r2, [r2, #10]
 80107c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80107ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d101      	bne.n	80107d8 <find_volume+0x33c>
 80107d4:	230d      	movs	r3, #13
 80107d6:	e0e1      	b.n	801099c <find_volume+0x500>
		fmt = FS_FAT32;
 80107d8:	2303      	movs	r3, #3
 80107da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d802      	bhi.n	80107ee <find_volume+0x352>
 80107e8:	2302      	movs	r3, #2
 80107ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80107ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d802      	bhi.n	80107fe <find_volume+0x362>
 80107f8:	2301      	movs	r3, #1
 80107fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	1c9a      	adds	r2, r3, #2
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801080a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801080c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801080e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010810:	441a      	add	r2, r3
 8010812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010814:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010816:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081a:	441a      	add	r2, r3
 801081c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010824:	2b03      	cmp	r3, #3
 8010826:	d11e      	bne.n	8010866 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082a:	3338      	adds	r3, #56	; 0x38
 801082c:	332a      	adds	r3, #42	; 0x2a
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe fb60 	bl	800eef4 <ld_word>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <find_volume+0x3a2>
 801083a:	230d      	movs	r3, #13
 801083c:	e0ae      	b.n	801099c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	891b      	ldrh	r3, [r3, #8]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d001      	beq.n	801084a <find_volume+0x3ae>
 8010846:	230d      	movs	r3, #13
 8010848:	e0a8      	b.n	801099c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801084a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084c:	3338      	adds	r3, #56	; 0x38
 801084e:	332c      	adds	r3, #44	; 0x2c
 8010850:	4618      	mov	r0, r3
 8010852:	f7fe fb67 	bl	800ef24 <ld_dword>
 8010856:	4602      	mov	r2, r0
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	69db      	ldr	r3, [r3, #28]
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	647b      	str	r3, [r7, #68]	; 0x44
 8010864:	e01f      	b.n	80108a6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	891b      	ldrh	r3, [r3, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d101      	bne.n	8010872 <find_volume+0x3d6>
 801086e:	230d      	movs	r3, #13
 8010870:	e094      	b.n	801099c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010878:	441a      	add	r2, r3
 801087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801087e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010882:	2b02      	cmp	r3, #2
 8010884:	d103      	bne.n	801088e <find_volume+0x3f2>
 8010886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010888:	69db      	ldr	r3, [r3, #28]
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	e00a      	b.n	80108a4 <find_volume+0x408>
 801088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010890:	69da      	ldr	r2, [r3, #28]
 8010892:	4613      	mov	r3, r2
 8010894:	005b      	lsls	r3, r3, #1
 8010896:	4413      	add	r3, r2
 8010898:	085a      	lsrs	r2, r3, #1
 801089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089c:	69db      	ldr	r3, [r3, #28]
 801089e:	f003 0301 	and.w	r3, r3, #1
 80108a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80108a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	6a1a      	ldr	r2, [r3, #32]
 80108aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ac:	899b      	ldrh	r3, [r3, #12]
 80108ae:	4619      	mov	r1, r3
 80108b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108b2:	440b      	add	r3, r1
 80108b4:	3b01      	subs	r3, #1
 80108b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108b8:	8989      	ldrh	r1, [r1, #12]
 80108ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80108be:	429a      	cmp	r2, r3
 80108c0:	d201      	bcs.n	80108c6 <find_volume+0x42a>
 80108c2:	230d      	movs	r3, #13
 80108c4:	e06a      	b.n	801099c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80108c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c8:	f04f 32ff 	mov.w	r2, #4294967295
 80108cc:	619a      	str	r2, [r3, #24]
 80108ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d0:	699a      	ldr	r2, [r3, #24]
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80108d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d8:	2280      	movs	r2, #128	; 0x80
 80108da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80108dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108e0:	2b03      	cmp	r3, #3
 80108e2:	d149      	bne.n	8010978 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	3338      	adds	r3, #56	; 0x38
 80108e8:	3330      	adds	r3, #48	; 0x30
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fe fb02 	bl	800eef4 <ld_word>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d140      	bne.n	8010978 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80108f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f8:	3301      	adds	r3, #1
 80108fa:	4619      	mov	r1, r3
 80108fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108fe:	f7fe fddb 	bl	800f4b8 <move_window>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d137      	bne.n	8010978 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	2200      	movs	r2, #0
 801090c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	3338      	adds	r3, #56	; 0x38
 8010912:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010916:	4618      	mov	r0, r3
 8010918:	f7fe faec 	bl	800eef4 <ld_word>
 801091c:	4603      	mov	r3, r0
 801091e:	461a      	mov	r2, r3
 8010920:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010924:	429a      	cmp	r2, r3
 8010926:	d127      	bne.n	8010978 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	3338      	adds	r3, #56	; 0x38
 801092c:	4618      	mov	r0, r3
 801092e:	f7fe faf9 	bl	800ef24 <ld_dword>
 8010932:	4603      	mov	r3, r0
 8010934:	4a1b      	ldr	r2, [pc, #108]	; (80109a4 <find_volume+0x508>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d11e      	bne.n	8010978 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093c:	3338      	adds	r3, #56	; 0x38
 801093e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010942:	4618      	mov	r0, r3
 8010944:	f7fe faee 	bl	800ef24 <ld_dword>
 8010948:	4603      	mov	r3, r0
 801094a:	4a17      	ldr	r2, [pc, #92]	; (80109a8 <find_volume+0x50c>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d113      	bne.n	8010978 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	3338      	adds	r3, #56	; 0x38
 8010954:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010958:	4618      	mov	r0, r3
 801095a:	f7fe fae3 	bl	800ef24 <ld_dword>
 801095e:	4602      	mov	r2, r0
 8010960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010962:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010966:	3338      	adds	r3, #56	; 0x38
 8010968:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801096c:	4618      	mov	r0, r3
 801096e:	f7fe fad9 	bl	800ef24 <ld_dword>
 8010972:	4602      	mov	r2, r0
 8010974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010976:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801097e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010980:	4b0a      	ldr	r3, [pc, #40]	; (80109ac <find_volume+0x510>)
 8010982:	881b      	ldrh	r3, [r3, #0]
 8010984:	3301      	adds	r3, #1
 8010986:	b29a      	uxth	r2, r3
 8010988:	4b08      	ldr	r3, [pc, #32]	; (80109ac <find_volume+0x510>)
 801098a:	801a      	strh	r2, [r3, #0]
 801098c:	4b07      	ldr	r3, [pc, #28]	; (80109ac <find_volume+0x510>)
 801098e:	881a      	ldrh	r2, [r3, #0]
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010996:	f7fe fd27 	bl	800f3e8 <clear_lock>
#endif
	return FR_OK;
 801099a:	2300      	movs	r3, #0
}
 801099c:	4618      	mov	r0, r3
 801099e:	3758      	adds	r7, #88	; 0x58
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	41615252 	.word	0x41615252
 80109a8:	61417272 	.word	0x61417272
 80109ac:	24014908 	.word	0x24014908

080109b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80109ba:	2309      	movs	r3, #9
 80109bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d02e      	beq.n	8010a22 <validate+0x72>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d02a      	beq.n	8010a22 <validate+0x72>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d025      	beq.n	8010a22 <validate+0x72>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	889a      	ldrh	r2, [r3, #4]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	88db      	ldrh	r3, [r3, #6]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d11e      	bne.n	8010a22 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fe fb83 	bl	800f0f4 <lock_fs>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d014      	beq.n	8010a1e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	785b      	ldrb	r3, [r3, #1]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe f9dc 	bl	800edb8 <disk_status>
 8010a00:	4603      	mov	r3, r0
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d102      	bne.n	8010a10 <validate+0x60>
				res = FR_OK;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	73fb      	strb	r3, [r7, #15]
 8010a0e:	e008      	b.n	8010a22 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2100      	movs	r1, #0
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fe fb82 	bl	800f120 <unlock_fs>
 8010a1c:	e001      	b.n	8010a22 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010a1e:	230f      	movs	r3, #15
 8010a20:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010a22:	7bfb      	ldrb	r3, [r7, #15]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <validate+0x7e>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	e000      	b.n	8010a30 <validate+0x80>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	683a      	ldr	r2, [r7, #0]
 8010a32:	6013      	str	r3, [r2, #0]
	return res;
 8010a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
	...

08010a40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b088      	sub	sp, #32
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010a52:	f107 0310 	add.w	r3, r7, #16
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fc86 	bl	8010368 <get_ldnumber>
 8010a5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da01      	bge.n	8010a68 <f_mount+0x28>
 8010a64:	230b      	movs	r3, #11
 8010a66:	e048      	b.n	8010afa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010a68:	4a26      	ldr	r2, [pc, #152]	; (8010b04 <f_mount+0xc4>)
 8010a6a:	69fb      	ldr	r3, [r7, #28]
 8010a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00f      	beq.n	8010a98 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010a78:	69b8      	ldr	r0, [r7, #24]
 8010a7a:	f7fe fcb5 	bl	800f3e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f000 ff77 	bl	8011976 <ff_del_syncobj>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d101      	bne.n	8010a92 <f_mount+0x52>
 8010a8e:	2302      	movs	r3, #2
 8010a90:	e033      	b.n	8010afa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	2200      	movs	r2, #0
 8010a96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d00f      	beq.n	8010abe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	b2da      	uxtb	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	3310      	adds	r3, #16
 8010aac:	4619      	mov	r1, r3
 8010aae:	4610      	mov	r0, r2
 8010ab0:	f000 ff41 	bl	8011936 <ff_cre_syncobj>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d101      	bne.n	8010abe <f_mount+0x7e>
 8010aba:	2302      	movs	r3, #2
 8010abc:	e01d      	b.n	8010afa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010abe:	68fa      	ldr	r2, [r7, #12]
 8010ac0:	4910      	ldr	r1, [pc, #64]	; (8010b04 <f_mount+0xc4>)
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d002      	beq.n	8010ad4 <f_mount+0x94>
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d001      	beq.n	8010ad8 <f_mount+0x98>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	e010      	b.n	8010afa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010ad8:	f107 010c 	add.w	r1, r7, #12
 8010adc:	f107 0308 	add.w	r3, r7, #8
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ff fcda 	bl	801049c <find_volume>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	7dfa      	ldrb	r2, [r7, #23]
 8010af0:	4611      	mov	r1, r2
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fe fb14 	bl	800f120 <unlock_fs>
 8010af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3720      	adds	r7, #32
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	24014904 	.word	0x24014904

08010b08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b098      	sub	sp, #96	; 0x60
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	4613      	mov	r3, r2
 8010b14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d101      	bne.n	8010b20 <f_open+0x18>
 8010b1c:	2309      	movs	r3, #9
 8010b1e:	e1c2      	b.n	8010ea6 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010b20:	79fb      	ldrb	r3, [r7, #7]
 8010b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010b28:	79fa      	ldrb	r2, [r7, #7]
 8010b2a:	f107 0110 	add.w	r1, r7, #16
 8010b2e:	f107 0308 	add.w	r3, r7, #8
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ff fcb2 	bl	801049c <find_volume>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f040 819f 	bne.w	8010e86 <f_open+0x37e>
		dj.obj.fs = fs;
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010b4c:	68ba      	ldr	r2, [r7, #8]
 8010b4e:	f107 0314 	add.w	r3, r7, #20
 8010b52:	4611      	mov	r1, r2
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7ff fb91 	bl	801027c <follow_path>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d11a      	bne.n	8010b9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010b6c:	b25b      	sxtb	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	da03      	bge.n	8010b7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010b72:	2306      	movs	r3, #6
 8010b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010b78:	e011      	b.n	8010b9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	f023 0301 	bic.w	r3, r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	bf14      	ite	ne
 8010b84:	2301      	movne	r3, #1
 8010b86:	2300      	moveq	r3, #0
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	f107 0314 	add.w	r3, r7, #20
 8010b90:	4611      	mov	r1, r2
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fe fae0 	bl	800f158 <chk_lock>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010b9e:	79fb      	ldrb	r3, [r7, #7]
 8010ba0:	f003 031c 	and.w	r3, r3, #28
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d07f      	beq.n	8010ca8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d017      	beq.n	8010be0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bb4:	2b04      	cmp	r3, #4
 8010bb6:	d10e      	bne.n	8010bd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010bb8:	f7fe fb2a 	bl	800f210 <enq_lock>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d006      	beq.n	8010bd0 <f_open+0xc8>
 8010bc2:	f107 0314 	add.w	r3, r7, #20
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7ff fa92 	bl	80100f0 <dir_register>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	e000      	b.n	8010bd2 <f_open+0xca>
 8010bd0:	2312      	movs	r3, #18
 8010bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010bd6:	79fb      	ldrb	r3, [r7, #7]
 8010bd8:	f043 0308 	orr.w	r3, r3, #8
 8010bdc:	71fb      	strb	r3, [r7, #7]
 8010bde:	e010      	b.n	8010c02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010be0:	7ebb      	ldrb	r3, [r7, #26]
 8010be2:	f003 0311 	and.w	r3, r3, #17
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d003      	beq.n	8010bf2 <f_open+0xea>
					res = FR_DENIED;
 8010bea:	2307      	movs	r3, #7
 8010bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010bf0:	e007      	b.n	8010c02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010bf2:	79fb      	ldrb	r3, [r7, #7]
 8010bf4:	f003 0304 	and.w	r3, r3, #4
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d002      	beq.n	8010c02 <f_open+0xfa>
 8010bfc:	2308      	movs	r3, #8
 8010bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d168      	bne.n	8010cdc <f_open+0x1d4>
 8010c0a:	79fb      	ldrb	r3, [r7, #7]
 8010c0c:	f003 0308 	and.w	r3, r3, #8
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d063      	beq.n	8010cdc <f_open+0x1d4>
				dw = GET_FATTIME();
 8010c14:	f7fd fe8e 	bl	800e934 <get_fattime>
 8010c18:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c1c:	330e      	adds	r3, #14
 8010c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fe f9bd 	bl	800efa0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c28:	3316      	adds	r3, #22
 8010c2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fe f9b7 	bl	800efa0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c34:	330b      	adds	r3, #11
 8010c36:	2220      	movs	r2, #32
 8010c38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c3e:	4611      	mov	r1, r2
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff f9c1 	bl	800ffc8 <ld_clust>
 8010c46:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff f9d9 	bl	8010006 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c56:	331c      	adds	r3, #28
 8010c58:	2100      	movs	r1, #0
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe f9a0 	bl	800efa0 <st_dword>
					fs->wflag = 1;
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	2201      	movs	r2, #1
 8010c64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d037      	beq.n	8010cdc <f_open+0x1d4>
						dw = fs->winsect;
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c70:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010c72:	f107 0314 	add.w	r3, r7, #20
 8010c76:	2200      	movs	r2, #0
 8010c78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fe fec9 	bl	800fa12 <remove_chain>
 8010c80:	4603      	mov	r3, r0
 8010c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d126      	bne.n	8010cdc <f_open+0x1d4>
							res = move_window(fs, dw);
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fe fc10 	bl	800f4b8 <move_window>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ca2:	3a01      	subs	r2, #1
 8010ca4:	615a      	str	r2, [r3, #20]
 8010ca6:	e019      	b.n	8010cdc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d115      	bne.n	8010cdc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010cb0:	7ebb      	ldrb	r3, [r7, #26]
 8010cb2:	f003 0310 	and.w	r3, r3, #16
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d003      	beq.n	8010cc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010cba:	2304      	movs	r3, #4
 8010cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010cc0:	e00c      	b.n	8010cdc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010cc2:	79fb      	ldrb	r3, [r7, #7]
 8010cc4:	f003 0302 	and.w	r3, r3, #2
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d007      	beq.n	8010cdc <f_open+0x1d4>
 8010ccc:	7ebb      	ldrb	r3, [r7, #26]
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d002      	beq.n	8010cdc <f_open+0x1d4>
						res = FR_DENIED;
 8010cd6:	2307      	movs	r3, #7
 8010cd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d128      	bne.n	8010d36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010ce4:	79fb      	ldrb	r3, [r7, #7]
 8010ce6:	f003 0308 	and.w	r3, r3, #8
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d003      	beq.n	8010cf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010cee:	79fb      	ldrb	r3, [r7, #7]
 8010cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010d04:	79fb      	ldrb	r3, [r7, #7]
 8010d06:	f023 0301 	bic.w	r3, r3, #1
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	bf14      	ite	ne
 8010d0e:	2301      	movne	r3, #1
 8010d10:	2300      	moveq	r3, #0
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	461a      	mov	r2, r3
 8010d16:	f107 0314 	add.w	r3, r7, #20
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fe fa99 	bl	800f254 <inc_lock>
 8010d22:	4602      	mov	r2, r0
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	691b      	ldr	r3, [r3, #16]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d102      	bne.n	8010d36 <f_open+0x22e>
 8010d30:	2302      	movs	r3, #2
 8010d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f040 80a3 	bne.w	8010e86 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d44:	4611      	mov	r1, r2
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff f93e 	bl	800ffc8 <ld_clust>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d54:	331c      	adds	r3, #28
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fe f8e4 	bl	800ef24 <ld_dword>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010d68:	693a      	ldr	r2, [r7, #16]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	88da      	ldrh	r2, [r3, #6]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	79fa      	ldrb	r2, [r7, #7]
 8010d7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2200      	movs	r2, #0
 8010d86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	3330      	adds	r3, #48	; 0x30
 8010d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d96:	2100      	movs	r1, #0
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fe f94e 	bl	800f03a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010d9e:	79fb      	ldrb	r3, [r7, #7]
 8010da0:	f003 0320 	and.w	r3, r3, #32
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d06e      	beq.n	8010e86 <f_open+0x37e>
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d06a      	beq.n	8010e86 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	68da      	ldr	r2, [r3, #12]
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	895b      	ldrh	r3, [r3, #10]
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	899b      	ldrh	r3, [r3, #12]
 8010dc2:	fb03 f302 	mul.w	r3, r3, r2
 8010dc6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8010dd4:	e016      	b.n	8010e04 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe fc29 	bl	800f632 <get_fat>
 8010de0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d802      	bhi.n	8010dee <f_open+0x2e6>
 8010de8:	2302      	movs	r3, #2
 8010dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df4:	d102      	bne.n	8010dfc <f_open+0x2f4>
 8010df6:	2301      	movs	r3, #1
 8010df8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010dfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	657b      	str	r3, [r7, #84]	; 0x54
 8010e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d103      	bne.n	8010e14 <f_open+0x30c>
 8010e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d8e0      	bhi.n	8010dd6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d131      	bne.n	8010e86 <f_open+0x37e>
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	899b      	ldrh	r3, [r3, #12]
 8010e26:	461a      	mov	r2, r3
 8010e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e2e:	fb02 f201 	mul.w	r2, r2, r1
 8010e32:	1a9b      	subs	r3, r3, r2
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d026      	beq.n	8010e86 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fe fbd9 	bl	800f5f4 <clust2sect>
 8010e42:	6478      	str	r0, [r7, #68]	; 0x44
 8010e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d103      	bne.n	8010e52 <f_open+0x34a>
						res = FR_INT_ERR;
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010e50:	e019      	b.n	8010e86 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	899b      	ldrh	r3, [r3, #12]
 8010e56:	461a      	mov	r2, r3
 8010e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e60:	441a      	add	r2, r3
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	7858      	ldrb	r0, [r3, #1]
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6a1a      	ldr	r2, [r3, #32]
 8010e74:	2301      	movs	r3, #1
 8010e76:	f7fd ffdf 	bl	800ee38 <disk_read>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <f_open+0x37e>
 8010e80:	2301      	movs	r3, #1
 8010e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d002      	beq.n	8010e94 <f_open+0x38c>
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2200      	movs	r2, #0
 8010e92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8010e9a:	4611      	mov	r1, r2
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fe f93f 	bl	800f120 <unlock_fs>
 8010ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3760      	adds	r7, #96	; 0x60
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b08c      	sub	sp, #48	; 0x30
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	60f8      	str	r0, [r7, #12]
 8010eb6:	60b9      	str	r1, [r7, #8]
 8010eb8:	607a      	str	r2, [r7, #4]
 8010eba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f107 0210 	add.w	r2, r7, #16
 8010ecc:	4611      	mov	r1, r2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff fd6e 	bl	80109b0 <validate>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d107      	bne.n	8010ef2 <f_write+0x44>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	7d5b      	ldrb	r3, [r3, #21]
 8010ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d009      	beq.n	8010f06 <f_write+0x58>
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010ef8:	4611      	mov	r1, r2
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fe f910 	bl	800f120 <unlock_fs>
 8010f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f04:	e192      	b.n	801122c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	7d1b      	ldrb	r3, [r3, #20]
 8010f0a:	f003 0302 	and.w	r3, r3, #2
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d106      	bne.n	8010f20 <f_write+0x72>
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2107      	movs	r1, #7
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fe f902 	bl	800f120 <unlock_fs>
 8010f1c:	2307      	movs	r3, #7
 8010f1e:	e185      	b.n	801122c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	699a      	ldr	r2, [r3, #24]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	441a      	add	r2, r3
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	699b      	ldr	r3, [r3, #24]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	f080 816a 	bcs.w	8011206 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	699b      	ldr	r3, [r3, #24]
 8010f36:	43db      	mvns	r3, r3
 8010f38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f3a:	e164      	b.n	8011206 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	699b      	ldr	r3, [r3, #24]
 8010f40:	693a      	ldr	r2, [r7, #16]
 8010f42:	8992      	ldrh	r2, [r2, #12]
 8010f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f48:	fb02 f201 	mul.w	r2, r2, r1
 8010f4c:	1a9b      	subs	r3, r3, r2
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f040 810f 	bne.w	8011172 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	699b      	ldr	r3, [r3, #24]
 8010f58:	693a      	ldr	r2, [r7, #16]
 8010f5a:	8992      	ldrh	r2, [r2, #12]
 8010f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f60:	693a      	ldr	r2, [r7, #16]
 8010f62:	8952      	ldrh	r2, [r2, #10]
 8010f64:	3a01      	subs	r2, #1
 8010f66:	4013      	ands	r3, r2
 8010f68:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d14d      	bne.n	801100c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	699b      	ldr	r3, [r3, #24]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10c      	bne.n	8010f92 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d11a      	bne.n	8010fba <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2100      	movs	r1, #0
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fe fda7 	bl	800fadc <create_chain>
 8010f8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f90:	e013      	b.n	8010fba <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d007      	beq.n	8010faa <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	699b      	ldr	r3, [r3, #24]
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f7fe fe33 	bl	800fc0c <clmt_clust>
 8010fa6:	62b8      	str	r0, [r7, #40]	; 0x28
 8010fa8:	e007      	b.n	8010fba <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	69db      	ldr	r3, [r3, #28]
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	4610      	mov	r0, r2
 8010fb4:	f7fe fd92 	bl	800fadc <create_chain>
 8010fb8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	f000 8127 	beq.w	8011210 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d109      	bne.n	8010fdc <f_write+0x12e>
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2202      	movs	r2, #2
 8010fcc:	755a      	strb	r2, [r3, #21]
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	2102      	movs	r1, #2
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fe f8a4 	bl	800f120 <unlock_fs>
 8010fd8:	2302      	movs	r3, #2
 8010fda:	e127      	b.n	801122c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe2:	d109      	bne.n	8010ff8 <f_write+0x14a>
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	755a      	strb	r2, [r3, #21]
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	2101      	movs	r1, #1
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fe f896 	bl	800f120 <unlock_fs>
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e119      	b.n	801122c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ffc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d102      	bne.n	801100c <f_write+0x15e>
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801100a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	7d1b      	ldrb	r3, [r3, #20]
 8011010:	b25b      	sxtb	r3, r3
 8011012:	2b00      	cmp	r3, #0
 8011014:	da1d      	bge.n	8011052 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	7858      	ldrb	r0, [r3, #1]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	6a1a      	ldr	r2, [r3, #32]
 8011024:	2301      	movs	r3, #1
 8011026:	f7fd ff27 	bl	800ee78 <disk_write>
 801102a:	4603      	mov	r3, r0
 801102c:	2b00      	cmp	r3, #0
 801102e:	d009      	beq.n	8011044 <f_write+0x196>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2201      	movs	r2, #1
 8011034:	755a      	strb	r2, [r3, #21]
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	2101      	movs	r1, #1
 801103a:	4618      	mov	r0, r3
 801103c:	f7fe f870 	bl	800f120 <unlock_fs>
 8011040:	2301      	movs	r3, #1
 8011042:	e0f3      	b.n	801122c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	7d1b      	ldrb	r3, [r3, #20]
 8011048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801104c:	b2da      	uxtb	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011052:	693a      	ldr	r2, [r7, #16]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	69db      	ldr	r3, [r3, #28]
 8011058:	4619      	mov	r1, r3
 801105a:	4610      	mov	r0, r2
 801105c:	f7fe faca 	bl	800f5f4 <clust2sect>
 8011060:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d109      	bne.n	801107c <f_write+0x1ce>
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2202      	movs	r2, #2
 801106c:	755a      	strb	r2, [r3, #21]
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2102      	movs	r1, #2
 8011072:	4618      	mov	r0, r3
 8011074:	f7fe f854 	bl	800f120 <unlock_fs>
 8011078:	2302      	movs	r3, #2
 801107a:	e0d7      	b.n	801122c <f_write+0x37e>
			sect += csect;
 801107c:	697a      	ldr	r2, [r7, #20]
 801107e:	69bb      	ldr	r3, [r7, #24]
 8011080:	4413      	add	r3, r2
 8011082:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	899b      	ldrh	r3, [r3, #12]
 8011088:	461a      	mov	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011090:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d048      	beq.n	801112a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011098:	69ba      	ldr	r2, [r7, #24]
 801109a:	6a3b      	ldr	r3, [r7, #32]
 801109c:	4413      	add	r3, r2
 801109e:	693a      	ldr	r2, [r7, #16]
 80110a0:	8952      	ldrh	r2, [r2, #10]
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d905      	bls.n	80110b2 <f_write+0x204>
					cc = fs->csize - csect;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	895b      	ldrh	r3, [r3, #10]
 80110aa:	461a      	mov	r2, r3
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	7858      	ldrb	r0, [r3, #1]
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	697a      	ldr	r2, [r7, #20]
 80110ba:	69f9      	ldr	r1, [r7, #28]
 80110bc:	f7fd fedc 	bl	800ee78 <disk_write>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d009      	beq.n	80110da <f_write+0x22c>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2201      	movs	r2, #1
 80110ca:	755a      	strb	r2, [r3, #21]
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	2101      	movs	r1, #1
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fe f825 	bl	800f120 <unlock_fs>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e0a8      	b.n	801122c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6a1a      	ldr	r2, [r3, #32]
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	6a3a      	ldr	r2, [r7, #32]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d918      	bls.n	801111a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6a1a      	ldr	r2, [r3, #32]
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	693a      	ldr	r2, [r7, #16]
 80110f8:	8992      	ldrh	r2, [r2, #12]
 80110fa:	fb02 f303 	mul.w	r3, r2, r3
 80110fe:	69fa      	ldr	r2, [r7, #28]
 8011100:	18d1      	adds	r1, r2, r3
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	899b      	ldrh	r3, [r3, #12]
 8011106:	461a      	mov	r2, r3
 8011108:	f7fd ff76 	bl	800eff8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	7d1b      	ldrb	r3, [r3, #20]
 8011110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011114:	b2da      	uxtb	r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	899b      	ldrh	r3, [r3, #12]
 801111e:	461a      	mov	r2, r3
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	fb02 f303 	mul.w	r3, r2, r3
 8011126:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011128:	e050      	b.n	80111cc <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6a1b      	ldr	r3, [r3, #32]
 801112e:	697a      	ldr	r2, [r7, #20]
 8011130:	429a      	cmp	r2, r3
 8011132:	d01b      	beq.n	801116c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	699a      	ldr	r2, [r3, #24]
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801113c:	429a      	cmp	r2, r3
 801113e:	d215      	bcs.n	801116c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	7858      	ldrb	r0, [r3, #1]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801114a:	2301      	movs	r3, #1
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	f7fd fe73 	bl	800ee38 <disk_read>
 8011152:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011154:	2b00      	cmp	r3, #0
 8011156:	d009      	beq.n	801116c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2201      	movs	r2, #1
 801115c:	755a      	strb	r2, [r3, #21]
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	2101      	movs	r1, #1
 8011162:	4618      	mov	r0, r3
 8011164:	f7fd ffdc 	bl	800f120 <unlock_fs>
 8011168:	2301      	movs	r3, #1
 801116a:	e05f      	b.n	801122c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	4618      	mov	r0, r3
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	693a      	ldr	r2, [r7, #16]
 801117e:	8992      	ldrh	r2, [r2, #12]
 8011180:	fbb3 f1f2 	udiv	r1, r3, r2
 8011184:	fb02 f201 	mul.w	r2, r2, r1
 8011188:	1a9b      	subs	r3, r3, r2
 801118a:	1ac3      	subs	r3, r0, r3
 801118c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	429a      	cmp	r2, r3
 8011194:	d901      	bls.n	801119a <f_write+0x2ec>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	699b      	ldr	r3, [r3, #24]
 80111a4:	693a      	ldr	r2, [r7, #16]
 80111a6:	8992      	ldrh	r2, [r2, #12]
 80111a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80111ac:	fb02 f200 	mul.w	r2, r2, r0
 80111b0:	1a9b      	subs	r3, r3, r2
 80111b2:	440b      	add	r3, r1
 80111b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111b6:	69f9      	ldr	r1, [r7, #28]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fd ff1d 	bl	800eff8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	7d1b      	ldrb	r3, [r3, #20]
 80111c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80111cc:	69fa      	ldr	r2, [r7, #28]
 80111ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d0:	4413      	add	r3, r2
 80111d2:	61fb      	str	r3, [r7, #28]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	699a      	ldr	r2, [r3, #24]
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	441a      	add	r2, r3
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	619a      	str	r2, [r3, #24]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	699b      	ldr	r3, [r3, #24]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	bf38      	it	cc
 80111ec:	461a      	movcc	r2, r3
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	60da      	str	r2, [r3, #12]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	441a      	add	r2, r3
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	f47f ae97 	bne.w	8010f3c <f_write+0x8e>
 801120e:	e000      	b.n	8011212 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011210:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	7d1b      	ldrb	r3, [r3, #20]
 8011216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801121a:	b2da      	uxtb	r2, r3
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	2100      	movs	r1, #0
 8011224:	4618      	mov	r0, r3
 8011226:	f7fd ff7b 	bl	800f120 <unlock_fs>
 801122a:	2300      	movs	r3, #0
}
 801122c:	4618      	mov	r0, r3
 801122e:	3730      	adds	r7, #48	; 0x30
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f107 0208 	add.w	r2, r7, #8
 8011242:	4611      	mov	r1, r2
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff fbb3 	bl	80109b0 <validate>
 801124a:	4603      	mov	r3, r0
 801124c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801124e:	7dfb      	ldrb	r3, [r7, #23]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d16d      	bne.n	8011330 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	7d1b      	ldrb	r3, [r3, #20]
 8011258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801125c:	2b00      	cmp	r3, #0
 801125e:	d067      	beq.n	8011330 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	7d1b      	ldrb	r3, [r3, #20]
 8011264:	b25b      	sxtb	r3, r3
 8011266:	2b00      	cmp	r3, #0
 8011268:	da1a      	bge.n	80112a0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	7858      	ldrb	r0, [r3, #1]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6a1a      	ldr	r2, [r3, #32]
 8011278:	2301      	movs	r3, #1
 801127a:	f7fd fdfd 	bl	800ee78 <disk_write>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d006      	beq.n	8011292 <f_sync+0x5e>
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	2101      	movs	r1, #1
 8011288:	4618      	mov	r0, r3
 801128a:	f7fd ff49 	bl	800f120 <unlock_fs>
 801128e:	2301      	movs	r3, #1
 8011290:	e055      	b.n	801133e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	7d1b      	ldrb	r3, [r3, #20]
 8011296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801129a:	b2da      	uxtb	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80112a0:	f7fd fb48 	bl	800e934 <get_fattime>
 80112a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112ac:	4619      	mov	r1, r3
 80112ae:	4610      	mov	r0, r2
 80112b0:	f7fe f902 	bl	800f4b8 <move_window>
 80112b4:	4603      	mov	r3, r0
 80112b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d138      	bne.n	8011330 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	330b      	adds	r3, #11
 80112c8:	781a      	ldrb	r2, [r3, #0]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	330b      	adds	r3, #11
 80112ce:	f042 0220 	orr.w	r2, r2, #32
 80112d2:	b2d2      	uxtb	r2, r2
 80112d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6818      	ldr	r0, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	461a      	mov	r2, r3
 80112e0:	68f9      	ldr	r1, [r7, #12]
 80112e2:	f7fe fe90 	bl	8010006 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f103 021c 	add.w	r2, r3, #28
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	4619      	mov	r1, r3
 80112f2:	4610      	mov	r0, r2
 80112f4:	f7fd fe54 	bl	800efa0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	3316      	adds	r3, #22
 80112fc:	6939      	ldr	r1, [r7, #16]
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fd fe4e 	bl	800efa0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	3312      	adds	r3, #18
 8011308:	2100      	movs	r1, #0
 801130a:	4618      	mov	r0, r3
 801130c:	f7fd fe2d 	bl	800ef6a <st_word>
					fs->wflag = 1;
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	2201      	movs	r2, #1
 8011314:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	4618      	mov	r0, r3
 801131a:	f7fe f8fb 	bl	800f514 <sync_fs>
 801131e:	4603      	mov	r3, r0
 8011320:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	7d1b      	ldrb	r3, [r3, #20]
 8011326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801132a:	b2da      	uxtb	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	7dfa      	ldrb	r2, [r7, #23]
 8011334:	4611      	mov	r1, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f7fd fef2 	bl	800f120 <unlock_fs>
 801133c:	7dfb      	ldrb	r3, [r7, #23]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3718      	adds	r7, #24
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b084      	sub	sp, #16
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7ff ff70 	bl	8011234 <f_sync>
 8011354:	4603      	mov	r3, r0
 8011356:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011358:	7bfb      	ldrb	r3, [r7, #15]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d11d      	bne.n	801139a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f107 0208 	add.w	r2, r7, #8
 8011364:	4611      	mov	r1, r2
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff fb22 	bl	80109b0 <validate>
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d111      	bne.n	801139a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	691b      	ldr	r3, [r3, #16]
 801137a:	4618      	mov	r0, r3
 801137c:	f7fd fff8 	bl	800f370 <dec_lock>
 8011380:	4603      	mov	r3, r0
 8011382:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d102      	bne.n	8011390 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2200      	movs	r2, #0
 801138e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	2100      	movs	r1, #0
 8011394:	4618      	mov	r0, r3
 8011396:	f7fd fec3 	bl	800f120 <unlock_fs>
#endif
		}
	}
	return res;
 801139a:	7bfb      	ldrb	r3, [r7, #15]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b090      	sub	sp, #64	; 0x40
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f107 0208 	add.w	r2, r7, #8
 80113b4:	4611      	mov	r1, r2
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff fafa 	bl	80109b0 <validate>
 80113bc:	4603      	mov	r3, r0
 80113be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80113c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d103      	bne.n	80113d2 <f_lseek+0x2e>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	7d5b      	ldrb	r3, [r3, #21]
 80113ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80113d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d009      	beq.n	80113ee <f_lseek+0x4a>
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80113e0:	4611      	mov	r1, r2
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fd fe9c 	bl	800f120 <unlock_fs>
 80113e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113ec:	e244      	b.n	8011878 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f000 80f2 	beq.w	80115dc <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fe:	d164      	bne.n	80114ca <f_lseek+0x126>
			tbl = fp->cltbl;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011404:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	1d1a      	adds	r2, r3, #4
 801140a:	627a      	str	r2, [r7, #36]	; 0x24
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	617b      	str	r3, [r7, #20]
 8011410:	2302      	movs	r3, #2
 8011412:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141c:	2b00      	cmp	r3, #0
 801141e:	d044      	beq.n	80114aa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011422:	613b      	str	r3, [r7, #16]
 8011424:	2300      	movs	r3, #0
 8011426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142a:	3302      	adds	r3, #2
 801142c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011430:	60fb      	str	r3, [r7, #12]
 8011432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011434:	3301      	adds	r3, #1
 8011436:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801143c:	4618      	mov	r0, r3
 801143e:	f7fe f8f8 	bl	800f632 <get_fat>
 8011442:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	2b01      	cmp	r3, #1
 8011448:	d809      	bhi.n	801145e <f_lseek+0xba>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2202      	movs	r2, #2
 801144e:	755a      	strb	r2, [r3, #21]
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	2102      	movs	r1, #2
 8011454:	4618      	mov	r0, r3
 8011456:	f7fd fe63 	bl	800f120 <unlock_fs>
 801145a:	2302      	movs	r3, #2
 801145c:	e20c      	b.n	8011878 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011464:	d109      	bne.n	801147a <f_lseek+0xd6>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2201      	movs	r2, #1
 801146a:	755a      	strb	r2, [r3, #21]
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	2101      	movs	r1, #1
 8011470:	4618      	mov	r0, r3
 8011472:	f7fd fe55 	bl	800f120 <unlock_fs>
 8011476:	2301      	movs	r3, #1
 8011478:	e1fe      	b.n	8011878 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	3301      	adds	r3, #1
 801147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011480:	429a      	cmp	r2, r3
 8011482:	d0d4      	beq.n	801142e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	429a      	cmp	r2, r3
 801148a:	d809      	bhi.n	80114a0 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148e:	1d1a      	adds	r2, r3, #4
 8011490:	627a      	str	r2, [r7, #36]	; 0x24
 8011492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011494:	601a      	str	r2, [r3, #0]
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	1d1a      	adds	r2, r3, #4
 801149a:	627a      	str	r2, [r7, #36]	; 0x24
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	69db      	ldr	r3, [r3, #28]
 80114a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d3ba      	bcc.n	8011420 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80114b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d803      	bhi.n	80114c2 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80114ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114bc:	2200      	movs	r2, #0
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	e1d1      	b.n	8011866 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80114c2:	2311      	movs	r3, #17
 80114c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80114c8:	e1cd      	b.n	8011866 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	683a      	ldr	r2, [r7, #0]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d902      	bls.n	80114da <f_lseek+0x136>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	683a      	ldr	r2, [r7, #0]
 80114de:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 81bf 	beq.w	8011866 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	3b01      	subs	r3, #1
 80114ec:	4619      	mov	r1, r3
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7fe fb8c 	bl	800fc0c <clmt_clust>
 80114f4:	4602      	mov	r2, r0
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	69db      	ldr	r3, [r3, #28]
 8011500:	4619      	mov	r1, r3
 8011502:	4610      	mov	r0, r2
 8011504:	f7fe f876 	bl	800f5f4 <clust2sect>
 8011508:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d109      	bne.n	8011524 <f_lseek+0x180>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2202      	movs	r2, #2
 8011514:	755a      	strb	r2, [r3, #21]
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	2102      	movs	r1, #2
 801151a:	4618      	mov	r0, r3
 801151c:	f7fd fe00 	bl	800f120 <unlock_fs>
 8011520:	2302      	movs	r3, #2
 8011522:	e1a9      	b.n	8011878 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	3b01      	subs	r3, #1
 8011528:	68ba      	ldr	r2, [r7, #8]
 801152a:	8992      	ldrh	r2, [r2, #12]
 801152c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	8952      	ldrh	r2, [r2, #10]
 8011534:	3a01      	subs	r2, #1
 8011536:	4013      	ands	r3, r2
 8011538:	69ba      	ldr	r2, [r7, #24]
 801153a:	4413      	add	r3, r2
 801153c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	699b      	ldr	r3, [r3, #24]
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	8992      	ldrh	r2, [r2, #12]
 8011546:	fbb3 f1f2 	udiv	r1, r3, r2
 801154a:	fb02 f201 	mul.w	r2, r2, r1
 801154e:	1a9b      	subs	r3, r3, r2
 8011550:	2b00      	cmp	r3, #0
 8011552:	f000 8188 	beq.w	8011866 <f_lseek+0x4c2>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a1b      	ldr	r3, [r3, #32]
 801155a:	69ba      	ldr	r2, [r7, #24]
 801155c:	429a      	cmp	r2, r3
 801155e:	f000 8182 	beq.w	8011866 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	7d1b      	ldrb	r3, [r3, #20]
 8011566:	b25b      	sxtb	r3, r3
 8011568:	2b00      	cmp	r3, #0
 801156a:	da1d      	bge.n	80115a8 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	7858      	ldrb	r0, [r3, #1]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a1a      	ldr	r2, [r3, #32]
 801157a:	2301      	movs	r3, #1
 801157c:	f7fd fc7c 	bl	800ee78 <disk_write>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d009      	beq.n	801159a <f_lseek+0x1f6>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2201      	movs	r2, #1
 801158a:	755a      	strb	r2, [r3, #21]
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	2101      	movs	r1, #1
 8011590:	4618      	mov	r0, r3
 8011592:	f7fd fdc5 	bl	800f120 <unlock_fs>
 8011596:	2301      	movs	r3, #1
 8011598:	e16e      	b.n	8011878 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	7d1b      	ldrb	r3, [r3, #20]
 801159e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	7858      	ldrb	r0, [r3, #1]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b2:	2301      	movs	r3, #1
 80115b4:	69ba      	ldr	r2, [r7, #24]
 80115b6:	f7fd fc3f 	bl	800ee38 <disk_read>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d009      	beq.n	80115d4 <f_lseek+0x230>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2201      	movs	r2, #1
 80115c4:	755a      	strb	r2, [r3, #21]
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	2101      	movs	r1, #1
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7fd fda8 	bl	800f120 <unlock_fs>
 80115d0:	2301      	movs	r3, #1
 80115d2:	e151      	b.n	8011878 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	69ba      	ldr	r2, [r7, #24]
 80115d8:	621a      	str	r2, [r3, #32]
 80115da:	e144      	b.n	8011866 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	683a      	ldr	r2, [r7, #0]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d908      	bls.n	80115f8 <f_lseek+0x254>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	7d1b      	ldrb	r3, [r3, #20]
 80115ea:	f003 0302 	and.w	r3, r3, #2
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d102      	bne.n	80115f8 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	699b      	ldr	r3, [r3, #24]
 80115fc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	637b      	str	r3, [r7, #52]	; 0x34
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011606:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 80ce 	beq.w	80117ac <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	895b      	ldrh	r3, [r3, #10]
 8011614:	461a      	mov	r2, r3
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	899b      	ldrh	r3, [r3, #12]
 801161a:	fb03 f302 	mul.w	r3, r3, r2
 801161e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011620:	6a3b      	ldr	r3, [r7, #32]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d01b      	beq.n	801165e <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	1e5a      	subs	r2, r3, #1
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	1e59      	subs	r1, r3, #1
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801163a:	429a      	cmp	r2, r3
 801163c:	d30f      	bcc.n	801165e <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801163e:	6a3b      	ldr	r3, [r7, #32]
 8011640:	1e5a      	subs	r2, r3, #1
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	425b      	negs	r3, r3
 8011646:	401a      	ands	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	699b      	ldr	r3, [r3, #24]
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	1ad3      	subs	r3, r2, r3
 8011654:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	69db      	ldr	r3, [r3, #28]
 801165a:	63bb      	str	r3, [r7, #56]	; 0x38
 801165c:	e02c      	b.n	80116b8 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	2b00      	cmp	r3, #0
 8011668:	d123      	bne.n	80116b2 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2100      	movs	r1, #0
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe fa34 	bl	800fadc <create_chain>
 8011674:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011678:	2b01      	cmp	r3, #1
 801167a:	d109      	bne.n	8011690 <f_lseek+0x2ec>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2202      	movs	r2, #2
 8011680:	755a      	strb	r2, [r3, #21]
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	2102      	movs	r1, #2
 8011686:	4618      	mov	r0, r3
 8011688:	f7fd fd4a 	bl	800f120 <unlock_fs>
 801168c:	2302      	movs	r3, #2
 801168e:	e0f3      	b.n	8011878 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011696:	d109      	bne.n	80116ac <f_lseek+0x308>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2201      	movs	r2, #1
 801169c:	755a      	strb	r2, [r3, #21]
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	2101      	movs	r1, #1
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fd fd3c 	bl	800f120 <unlock_fs>
 80116a8:	2301      	movs	r3, #1
 80116aa:	e0e5      	b.n	8011878 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116b0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116b6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80116b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d076      	beq.n	80117ac <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 80116be:	e044      	b.n	801174a <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	1ad3      	subs	r3, r2, r3
 80116c6:	603b      	str	r3, [r7, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	699a      	ldr	r2, [r3, #24]
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	441a      	add	r2, r3
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	7d1b      	ldrb	r3, [r3, #20]
 80116d8:	f003 0302 	and.w	r3, r3, #2
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00b      	beq.n	80116f8 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fe f9f9 	bl	800fadc <create_chain>
 80116ea:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d108      	bne.n	8011704 <f_lseek+0x360>
							ofs = 0; break;
 80116f2:	2300      	movs	r3, #0
 80116f4:	603b      	str	r3, [r7, #0]
 80116f6:	e02c      	b.n	8011752 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fd ff98 	bl	800f632 <get_fat>
 8011702:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170a:	d109      	bne.n	8011720 <f_lseek+0x37c>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2201      	movs	r2, #1
 8011710:	755a      	strb	r2, [r3, #21]
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	2101      	movs	r1, #1
 8011716:	4618      	mov	r0, r3
 8011718:	f7fd fd02 	bl	800f120 <unlock_fs>
 801171c:	2301      	movs	r3, #1
 801171e:	e0ab      	b.n	8011878 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011722:	2b01      	cmp	r3, #1
 8011724:	d904      	bls.n	8011730 <f_lseek+0x38c>
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	69db      	ldr	r3, [r3, #28]
 801172a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801172c:	429a      	cmp	r2, r3
 801172e:	d309      	bcc.n	8011744 <f_lseek+0x3a0>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2202      	movs	r2, #2
 8011734:	755a      	strb	r2, [r3, #21]
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2102      	movs	r1, #2
 801173a:	4618      	mov	r0, r3
 801173c:	f7fd fcf0 	bl	800f120 <unlock_fs>
 8011740:	2302      	movs	r3, #2
 8011742:	e099      	b.n	8011878 <f_lseek+0x4d4>
					fp->clust = clst;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011748:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	429a      	cmp	r2, r3
 8011750:	d8b6      	bhi.n	80116c0 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	699a      	ldr	r2, [r3, #24]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	441a      	add	r2, r3
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	899b      	ldrh	r3, [r3, #12]
 8011762:	461a      	mov	r2, r3
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	fbb3 f1f2 	udiv	r1, r3, r2
 801176a:	fb02 f201 	mul.w	r2, r2, r1
 801176e:	1a9b      	subs	r3, r3, r2
 8011770:	2b00      	cmp	r3, #0
 8011772:	d01b      	beq.n	80117ac <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011778:	4618      	mov	r0, r3
 801177a:	f7fd ff3b 	bl	800f5f4 <clust2sect>
 801177e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011782:	2b00      	cmp	r3, #0
 8011784:	d109      	bne.n	801179a <f_lseek+0x3f6>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2202      	movs	r2, #2
 801178a:	755a      	strb	r2, [r3, #21]
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	2102      	movs	r1, #2
 8011790:	4618      	mov	r0, r3
 8011792:	f7fd fcc5 	bl	800f120 <unlock_fs>
 8011796:	2302      	movs	r3, #2
 8011798:	e06e      	b.n	8011878 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	899b      	ldrh	r3, [r3, #12]
 801179e:	461a      	mov	r2, r3
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80117a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117a8:	4413      	add	r3, r2
 80117aa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	699a      	ldr	r2, [r3, #24]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d90a      	bls.n	80117ce <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	699a      	ldr	r2, [r3, #24]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	7d1b      	ldrb	r3, [r3, #20]
 80117c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	8992      	ldrh	r2, [r2, #12]
 80117d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80117da:	fb02 f201 	mul.w	r2, r2, r1
 80117de:	1a9b      	subs	r3, r3, r2
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d040      	beq.n	8011866 <f_lseek+0x4c2>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6a1b      	ldr	r3, [r3, #32]
 80117e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d03b      	beq.n	8011866 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	7d1b      	ldrb	r3, [r3, #20]
 80117f2:	b25b      	sxtb	r3, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	da1d      	bge.n	8011834 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	7858      	ldrb	r0, [r3, #1]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6a1a      	ldr	r2, [r3, #32]
 8011806:	2301      	movs	r3, #1
 8011808:	f7fd fb36 	bl	800ee78 <disk_write>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d009      	beq.n	8011826 <f_lseek+0x482>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2201      	movs	r2, #1
 8011816:	755a      	strb	r2, [r3, #21]
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2101      	movs	r1, #1
 801181c:	4618      	mov	r0, r3
 801181e:	f7fd fc7f 	bl	800f120 <unlock_fs>
 8011822:	2301      	movs	r3, #1
 8011824:	e028      	b.n	8011878 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	7d1b      	ldrb	r3, [r3, #20]
 801182a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801182e:	b2da      	uxtb	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	7858      	ldrb	r0, [r3, #1]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801183e:	2301      	movs	r3, #1
 8011840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011842:	f7fd faf9 	bl	800ee38 <disk_read>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d009      	beq.n	8011860 <f_lseek+0x4bc>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2201      	movs	r2, #1
 8011850:	755a      	strb	r2, [r3, #21]
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2101      	movs	r1, #1
 8011856:	4618      	mov	r0, r3
 8011858:	f7fd fc62 	bl	800f120 <unlock_fs>
 801185c:	2301      	movs	r3, #1
 801185e:	e00b      	b.n	8011878 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011864:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801186c:	4611      	mov	r1, r2
 801186e:	4618      	mov	r0, r3
 8011870:	f7fd fc56 	bl	800f120 <unlock_fs>
 8011874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011878:	4618      	mov	r0, r3
 801187a:	3740      	adds	r7, #64	; 0x40
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011880:	b480      	push	{r7}
 8011882:	b087      	sub	sp, #28
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	4613      	mov	r3, r2
 801188c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801188e:	2301      	movs	r3, #1
 8011890:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011892:	2300      	movs	r3, #0
 8011894:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011896:	4b1f      	ldr	r3, [pc, #124]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 8011898:	7a5b      	ldrb	r3, [r3, #9]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d131      	bne.n	8011904 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80118a0:	4b1c      	ldr	r3, [pc, #112]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118a2:	7a5b      	ldrb	r3, [r3, #9]
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	461a      	mov	r2, r3
 80118a8:	4b1a      	ldr	r3, [pc, #104]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118aa:	2100      	movs	r1, #0
 80118ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80118ae:	4b19      	ldr	r3, [pc, #100]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118b0:	7a5b      	ldrb	r3, [r3, #9]
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	4a17      	ldr	r2, [pc, #92]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	4413      	add	r3, r2
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80118be:	4b15      	ldr	r3, [pc, #84]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118c0:	7a5b      	ldrb	r3, [r3, #9]
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	461a      	mov	r2, r3
 80118c6:	4b13      	ldr	r3, [pc, #76]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118c8:	4413      	add	r3, r2
 80118ca:	79fa      	ldrb	r2, [r7, #7]
 80118cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80118ce:	4b11      	ldr	r3, [pc, #68]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118d0:	7a5b      	ldrb	r3, [r3, #9]
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	1c5a      	adds	r2, r3, #1
 80118d6:	b2d1      	uxtb	r1, r2
 80118d8:	4a0e      	ldr	r2, [pc, #56]	; (8011914 <FATFS_LinkDriverEx+0x94>)
 80118da:	7251      	strb	r1, [r2, #9]
 80118dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80118de:	7dbb      	ldrb	r3, [r7, #22]
 80118e0:	3330      	adds	r3, #48	; 0x30
 80118e2:	b2da      	uxtb	r2, r3
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	3301      	adds	r3, #1
 80118ec:	223a      	movs	r2, #58	; 0x3a
 80118ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	3302      	adds	r3, #2
 80118f4:	222f      	movs	r2, #47	; 0x2f
 80118f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	3303      	adds	r3, #3
 80118fc:	2200      	movs	r2, #0
 80118fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011900:	2300      	movs	r3, #0
 8011902:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011904:	7dfb      	ldrb	r3, [r7, #23]
}
 8011906:	4618      	mov	r0, r3
 8011908:	371c      	adds	r7, #28
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	2401492c 	.word	0x2401492c

08011918 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011922:	2200      	movs	r2, #0
 8011924:	6839      	ldr	r1, [r7, #0]
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7ff ffaa 	bl	8011880 <FATFS_LinkDriverEx>
 801192c:	4603      	mov	r3, r0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3708      	adds	r7, #8
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b086      	sub	sp, #24
 801193a:	af00      	add	r7, sp, #0
 801193c:	4603      	mov	r3, r0
 801193e:	6039      	str	r1, [r7, #0]
 8011940:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011942:	2300      	movs	r3, #0
 8011944:	60fb      	str	r3, [r7, #12]
 8011946:	2300      	movs	r3, #0
 8011948:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801194a:	f107 030c 	add.w	r3, r7, #12
 801194e:	2101      	movs	r1, #1
 8011950:	4618      	mov	r0, r3
 8011952:	f000 f961 	bl	8011c18 <osSemaphoreCreate>
 8011956:	4602      	mov	r2, r0
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	bf14      	ite	ne
 8011964:	2301      	movne	r3, #1
 8011966:	2300      	moveq	r3, #0
 8011968:	b2db      	uxtb	r3, r3
 801196a:	617b      	str	r3, [r7, #20]

    return ret;
 801196c:	697b      	ldr	r3, [r7, #20]
}
 801196e:	4618      	mov	r0, r3
 8011970:	3718      	adds	r7, #24
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b082      	sub	sp, #8
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f000 fa00 	bl	8011d84 <osSemaphoreDelete>
#endif
    return 1;
 8011984:	2301      	movs	r3, #1
}
 8011986:	4618      	mov	r0, r3
 8011988:	3708      	adds	r7, #8
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801198e:	b580      	push	{r7, lr}
 8011990:	b084      	sub	sp, #16
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011996:	2300      	movs	r3, #0
 8011998:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801199a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f000 f96c 	bl	8011c7c <osSemaphoreWait>
 80119a4:	4603      	mov	r3, r0
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d101      	bne.n	80119ae <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80119aa:	2301      	movs	r3, #1
 80119ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80119ae:	68fb      	ldr	r3, [r7, #12]
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3710      	adds	r7, #16
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 f9a9 	bl	8011d18 <osSemaphoreRelease>
#endif
}
 80119c6:	bf00      	nop
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80119ce:	b480      	push	{r7}
 80119d0:	b085      	sub	sp, #20
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	4603      	mov	r3, r0
 80119d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80119d8:	2300      	movs	r3, #0
 80119da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80119dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119e0:	2b84      	cmp	r3, #132	; 0x84
 80119e2:	d005      	beq.n	80119f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80119e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	4413      	add	r3, r2
 80119ec:	3303      	adds	r3, #3
 80119ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80119f0:	68fb      	ldr	r3, [r7, #12]
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3714      	adds	r7, #20
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr

080119fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80119fe:	b480      	push	{r7}
 8011a00:	b083      	sub	sp, #12
 8011a02:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a04:	f3ef 8305 	mrs	r3, IPSR
 8011a08:	607b      	str	r3, [r7, #4]
  return(result);
 8011a0a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	bf14      	ite	ne
 8011a10:	2301      	movne	r3, #1
 8011a12:	2300      	moveq	r3, #0
 8011a14:	b2db      	uxtb	r3, r3
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	370c      	adds	r7, #12
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr

08011a22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011a26:	f002 f81f 	bl	8013a68 <vTaskStartScheduler>
  
  return osOK;
 8011a2a:	2300      	movs	r3, #0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011a34:	f002 fc38 	bl	80142a8 <xTaskGetSchedulerState>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d101      	bne.n	8011a42 <osKernelRunning+0x12>
    return 0;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	e000      	b.n	8011a44 <osKernelRunning+0x14>
  else
    return 1;
 8011a42:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011a4c:	f7ff ffd7 	bl	80119fe <inHandlerMode>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011a56:	f002 f921 	bl	8013c9c <xTaskGetTickCountFromISR>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	e002      	b.n	8011a64 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011a5e:	f002 f90d 	bl	8013c7c <xTaskGetTickCount>
 8011a62:	4603      	mov	r3, r0
  }
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6a:	b089      	sub	sp, #36	; 0x24
 8011a6c:	af04      	add	r7, sp, #16
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	695b      	ldr	r3, [r3, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d020      	beq.n	8011abc <osThreadCreate+0x54>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	699b      	ldr	r3, [r3, #24]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d01c      	beq.n	8011abc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	685c      	ldr	r4, [r3, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681d      	ldr	r5, [r3, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	691e      	ldr	r6, [r3, #16]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff ff9a 	bl	80119ce <makeFreeRtosPriority>
 8011a9a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	695b      	ldr	r3, [r3, #20]
 8011aa0:	687a      	ldr	r2, [r7, #4]
 8011aa2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011aa4:	9202      	str	r2, [sp, #8]
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	9100      	str	r1, [sp, #0]
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	4632      	mov	r2, r6
 8011aae:	4629      	mov	r1, r5
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	f001 fcb1 	bl	8013418 <xTaskCreateStatic>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	60fb      	str	r3, [r7, #12]
 8011aba:	e01c      	b.n	8011af6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	685c      	ldr	r4, [r3, #4]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ac8:	b29e      	uxth	r6, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff ff7c 	bl	80119ce <makeFreeRtosPriority>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	f107 030c 	add.w	r3, r7, #12
 8011adc:	9301      	str	r3, [sp, #4]
 8011ade:	9200      	str	r2, [sp, #0]
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	4632      	mov	r2, r6
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f001 fcf3 	bl	80134d2 <xTaskCreate>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d001      	beq.n	8011af6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011af2:	2300      	movs	r3, #0
 8011af4:	e000      	b.n	8011af8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011af6:	68fb      	ldr	r3, [r7, #12]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3714      	adds	r7, #20
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b00 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b086      	sub	sp, #24
 8011b04:	af02      	add	r7, sp, #8
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011b12:	f7ff ff74 	bl	80119fe <inHandlerMode>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d01c      	beq.n	8011b56 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011b1c:	6839      	ldr	r1, [r7, #0]
 8011b1e:	f107 0208 	add.w	r2, r7, #8
 8011b22:	f107 030c 	add.w	r3, r7, #12
 8011b26:	9300      	str	r3, [sp, #0]
 8011b28:	4613      	mov	r3, r2
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f002 fe87 	bl	8014840 <xTaskGenericNotifyFromISR>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d002      	beq.n	8011b3e <osSignalSet+0x3e>
      return 0x80000000;
 8011b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b3c:	e019      	b.n	8011b72 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d015      	beq.n	8011b70 <osSignalSet+0x70>
 8011b44:	4b0d      	ldr	r3, [pc, #52]	; (8011b7c <osSignalSet+0x7c>)
 8011b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b4a:	601a      	str	r2, [r3, #0]
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	f3bf 8f6f 	isb	sy
 8011b54:	e00c      	b.n	8011b70 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011b56:	6839      	ldr	r1, [r7, #0]
 8011b58:	f107 0308 	add.w	r3, r7, #8
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f002 fdb8 	bl	80146d4 <xTaskGenericNotify>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d002      	beq.n	8011b70 <osSignalSet+0x70>
    return 0x80000000;
 8011b6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b6e:	e000      	b.n	8011b72 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011b70:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	e000ed04 	.word	0xe000ed04

08011b80 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011b80:	b590      	push	{r4, r7, lr}
 8011b82:	b089      	sub	sp, #36	; 0x24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011b90:	2300      	movs	r3, #0
 8011b92:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9a:	d103      	bne.n	8011ba4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba0:	61fb      	str	r3, [r7, #28]
 8011ba2:	e009      	b.n	8011bb8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d006      	beq.n	8011bb8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d101      	bne.n	8011bb8 <osSignalWait+0x38>
      ticks = 1;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011bb8:	f7ff ff21 	bl	80119fe <inHandlerMode>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d002      	beq.n	8011bc8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011bc2:	2382      	movs	r3, #130	; 0x82
 8011bc4:	613b      	str	r3, [r7, #16]
 8011bc6:	e01b      	b.n	8011c00 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011bc8:	68b9      	ldr	r1, [r7, #8]
 8011bca:	f107 0310 	add.w	r3, r7, #16
 8011bce:	1d1a      	adds	r2, r3, #4
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	f002 fd24 	bl	8014620 <xTaskNotifyWait>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d008      	beq.n	8011bf0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d102      	bne.n	8011bea <osSignalWait+0x6a>
 8011be4:	2300      	movs	r3, #0
 8011be6:	613b      	str	r3, [r7, #16]
 8011be8:	e00a      	b.n	8011c00 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011bea:	2340      	movs	r3, #64	; 0x40
 8011bec:	613b      	str	r3, [r7, #16]
 8011bee:	e007      	b.n	8011c00 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	da02      	bge.n	8011bfc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011bf6:	2386      	movs	r3, #134	; 0x86
 8011bf8:	613b      	str	r3, [r7, #16]
 8011bfa:	e001      	b.n	8011c00 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011bfc:	2308      	movs	r3, #8
 8011bfe:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	461c      	mov	r4, r3
 8011c04:	f107 0310 	add.w	r3, r7, #16
 8011c08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	3724      	adds	r7, #36	; 0x24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd90      	pop	{r4, r7, pc}

08011c18 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b086      	sub	sp, #24
 8011c1c:	af02      	add	r7, sp, #8
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00f      	beq.n	8011c4a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d10a      	bne.n	8011c46 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	2203      	movs	r2, #3
 8011c36:	9200      	str	r2, [sp, #0]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	2001      	movs	r0, #1
 8011c3e:	f000 fd11 	bl	8012664 <xQueueGenericCreateStatic>
 8011c42:	4603      	mov	r3, r0
 8011c44:	e016      	b.n	8011c74 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011c46:	2300      	movs	r3, #0
 8011c48:	e014      	b.n	8011c74 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d110      	bne.n	8011c72 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011c50:	2203      	movs	r2, #3
 8011c52:	2100      	movs	r1, #0
 8011c54:	2001      	movs	r0, #1
 8011c56:	f000 fd7d 	bl	8012754 <xQueueGenericCreate>
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d005      	beq.n	8011c6e <osSemaphoreCreate+0x56>
 8011c62:	2300      	movs	r3, #0
 8011c64:	2200      	movs	r2, #0
 8011c66:	2100      	movs	r1, #0
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 fdcd 	bl	8012808 <xQueueGenericSend>
      return sema;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	e000      	b.n	8011c74 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011c72:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011c86:	2300      	movs	r3, #0
 8011c88:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d101      	bne.n	8011c94 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011c90:	2380      	movs	r3, #128	; 0x80
 8011c92:	e03a      	b.n	8011d0a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011c94:	2300      	movs	r3, #0
 8011c96:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9e:	d103      	bne.n	8011ca8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca4:	60fb      	str	r3, [r7, #12]
 8011ca6:	e009      	b.n	8011cbc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d006      	beq.n	8011cbc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d101      	bne.n	8011cbc <osSemaphoreWait+0x40>
      ticks = 1;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011cbc:	f7ff fe9f 	bl	80119fe <inHandlerMode>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d017      	beq.n	8011cf6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011cc6:	f107 0308 	add.w	r3, r7, #8
 8011cca:	461a      	mov	r2, r3
 8011ccc:	2100      	movs	r1, #0
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f001 f9ac 	bl	801302c <xQueueReceiveFromISR>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d001      	beq.n	8011cde <osSemaphoreWait+0x62>
      return osErrorOS;
 8011cda:	23ff      	movs	r3, #255	; 0xff
 8011cdc:	e015      	b.n	8011d0a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d011      	beq.n	8011d08 <osSemaphoreWait+0x8c>
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	; (8011d14 <osSemaphoreWait+0x98>)
 8011ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cea:	601a      	str	r2, [r3, #0]
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	e008      	b.n	8011d08 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011cf6:	68f9      	ldr	r1, [r7, #12]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f001 f88b 	bl	8012e14 <xQueueSemaphoreTake>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d001      	beq.n	8011d08 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011d04:	23ff      	movs	r3, #255	; 0xff
 8011d06:	e000      	b.n	8011d0a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	e000ed04 	.word	0xe000ed04

08011d18 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011d24:	2300      	movs	r3, #0
 8011d26:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011d28:	f7ff fe69 	bl	80119fe <inHandlerMode>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d016      	beq.n	8011d60 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011d32:	f107 0308 	add.w	r3, r7, #8
 8011d36:	4619      	mov	r1, r3
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 fefe 	bl	8012b3a <xQueueGiveFromISR>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d001      	beq.n	8011d48 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011d44:	23ff      	movs	r3, #255	; 0xff
 8011d46:	e017      	b.n	8011d78 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d013      	beq.n	8011d76 <osSemaphoreRelease+0x5e>
 8011d4e:	4b0c      	ldr	r3, [pc, #48]	; (8011d80 <osSemaphoreRelease+0x68>)
 8011d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d54:	601a      	str	r2, [r3, #0]
 8011d56:	f3bf 8f4f 	dsb	sy
 8011d5a:	f3bf 8f6f 	isb	sy
 8011d5e:	e00a      	b.n	8011d76 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011d60:	2300      	movs	r3, #0
 8011d62:	2200      	movs	r2, #0
 8011d64:	2100      	movs	r1, #0
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fd4e 	bl	8012808 <xQueueGenericSend>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d001      	beq.n	8011d76 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011d72:	23ff      	movs	r3, #255	; 0xff
 8011d74:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011d76:	68fb      	ldr	r3, [r7, #12]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	e000ed04 	.word	0xe000ed04

08011d84 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011d8c:	f7ff fe37 	bl	80119fe <inHandlerMode>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d001      	beq.n	8011d9a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011d96:	2382      	movs	r3, #130	; 0x82
 8011d98:	e003      	b.n	8011da2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f001 f9c6 	bl	801312c <vQueueDelete>

  return osOK; 
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3708      	adds	r7, #8
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b086      	sub	sp, #24
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	3303      	adds	r3, #3
 8011db8:	f023 0303 	bic.w	r3, r3, #3
 8011dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011dbe:	2014      	movs	r0, #20
 8011dc0:	f003 f8ca 	bl	8014f58 <pvPortMalloc>
 8011dc4:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d046      	beq.n	8011e5a <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011dd4:	68fa      	ldr	r2, [r7, #12]
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	4618      	mov	r0, r3
 8011de6:	f003 f8b7 	bl	8014f58 <pvPortMalloc>
 8011dea:	4602      	mov	r2, r0
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d02b      	beq.n	8011e50 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	fb02 f303 	mul.w	r3, r2, r3
 8011e02:	4618      	mov	r0, r3
 8011e04:	f003 f8a8 	bl	8014f58 <pvPortMalloc>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d011      	beq.n	8011e3a <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011e16:	2300      	movs	r3, #0
 8011e18:	613b      	str	r3, [r7, #16]
 8011e1a:	e008      	b.n	8011e2e <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	685a      	ldr	r2, [r3, #4]
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	4413      	add	r3, r2
 8011e24:	2200      	movs	r2, #0
 8011e26:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	613b      	str	r3, [r7, #16]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	693a      	ldr	r2, [r7, #16]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d3f1      	bcc.n	8011e1c <osPoolCreate+0x72>
 8011e38:	e00f      	b.n	8011e5a <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f003 f956 	bl	80150f0 <vPortFree>
        vPortFree(thePool);
 8011e44:	6978      	ldr	r0, [r7, #20]
 8011e46:	f003 f953 	bl	80150f0 <vPortFree>
        thePool = NULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	617b      	str	r3, [r7, #20]
 8011e4e:	e004      	b.n	8011e5a <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011e50:	6978      	ldr	r0, [r7, #20]
 8011e52:	f003 f94d 	bl	80150f0 <vPortFree>
      thePool = NULL;
 8011e56:	2300      	movs	r3, #0
 8011e58:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011e5a:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08a      	sub	sp, #40	; 0x28
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011e70:	2300      	movs	r3, #0
 8011e72:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011e74:	f7ff fdc3 	bl	80119fe <inHandlerMode>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00e      	beq.n	8011e9c <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8011e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e86:	f383 8811 	msr	BASEPRI, r3
 8011e8a:	f3bf 8f6f 	isb	sy
 8011e8e:	f3bf 8f4f 	dsb	sy
 8011e92:	617a      	str	r2, [r7, #20]
 8011e94:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011e96:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e98:	627b      	str	r3, [r7, #36]	; 0x24
 8011e9a:	e001      	b.n	8011ea0 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011e9c:	f002 ff3a 	bl	8014d14 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	61fb      	str	r3, [r7, #28]
 8011ea4:	e029      	b.n	8011efa <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	691a      	ldr	r2, [r3, #16]
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	4413      	add	r3, r2
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	6892      	ldr	r2, [r2, #8]
 8011eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eb6:	fb02 f201 	mul.w	r2, r2, r1
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	685a      	ldr	r2, [r3, #4]
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d113      	bne.n	8011ef4 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	685a      	ldr	r2, [r3, #4]
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4619      	mov	r1, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	69ba      	ldr	r2, [r7, #24]
 8011ee4:	fb02 f303 	mul.w	r3, r2, r3
 8011ee8:	440b      	add	r3, r1
 8011eea:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	69ba      	ldr	r2, [r7, #24]
 8011ef0:	611a      	str	r2, [r3, #16]
      break;
 8011ef2:	e007      	b.n	8011f04 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	61fb      	str	r3, [r7, #28]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	69fa      	ldr	r2, [r7, #28]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d3d0      	bcc.n	8011ea6 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8011f04:	f7ff fd7b 	bl	80119fe <inHandlerMode>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d005      	beq.n	8011f1a <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011f18:	e001      	b.n	8011f1e <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8011f1a:	f002 ff2b 	bl	8014d74 <vPortExitCritical>
  }
  
  return p;
 8011f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3728      	adds	r7, #40	; 0x28
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d101      	bne.n	8011f3c <osPoolFree+0x14>
    return osErrorParameter;
 8011f38:	2380      	movs	r3, #128	; 0x80
 8011f3a:	e030      	b.n	8011f9e <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d101      	bne.n	8011f46 <osPoolFree+0x1e>
    return osErrorParameter;
 8011f42:	2380      	movs	r3, #128	; 0x80
 8011f44:	e02b      	b.n	8011f9e <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	683a      	ldr	r2, [r7, #0]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d201      	bcs.n	8011f54 <osPoolFree+0x2c>
    return osErrorParameter;
 8011f50:	2380      	movs	r3, #128	; 0x80
 8011f52:	e024      	b.n	8011f9e <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	6812      	ldr	r2, [r2, #0]
 8011f5a:	1a9b      	subs	r3, r3, r2
 8011f5c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	68da      	ldr	r2, [r3, #12]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f68:	fb02 f201 	mul.w	r2, r2, r1
 8011f6c:	1a9b      	subs	r3, r3, r2
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <osPoolFree+0x4e>
    return osErrorParameter;
 8011f72:	2380      	movs	r3, #128	; 0x80
 8011f74:	e013      	b.n	8011f9e <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f80:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	689b      	ldr	r3, [r3, #8]
 8011f86:	68fa      	ldr	r2, [r7, #12]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d301      	bcc.n	8011f90 <osPoolFree+0x68>
    return osErrorParameter;
 8011f8c:	2380      	movs	r3, #128	; 0x80
 8011f8e:	e006      	b.n	8011f9e <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	685a      	ldr	r2, [r3, #4]
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	4413      	add	r3, r2
 8011f98:	2200      	movs	r2, #0
 8011f9a:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011faa:	b590      	push	{r4, r7, lr}
 8011fac:	b085      	sub	sp, #20
 8011fae:	af02      	add	r7, sp, #8
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d011      	beq.n	8011fe0 <osMessageCreate+0x36>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	68db      	ldr	r3, [r3, #12]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d00d      	beq.n	8011fe0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6818      	ldr	r0, [r3, #0]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6859      	ldr	r1, [r3, #4]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	689a      	ldr	r2, [r3, #8]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	2400      	movs	r4, #0
 8011fd6:	9400      	str	r4, [sp, #0]
 8011fd8:	f000 fb44 	bl	8012664 <xQueueGenericCreateStatic>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	e008      	b.n	8011ff2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6818      	ldr	r0, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	2200      	movs	r2, #0
 8011fea:	4619      	mov	r1, r3
 8011fec:	f000 fbb2 	bl	8012754 <xQueueGenericCreate>
 8011ff0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd90      	pop	{r4, r7, pc}
	...

08011ffc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b086      	sub	sp, #24
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012008:	2300      	movs	r3, #0
 801200a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <osMessagePut+0x1e>
    ticks = 1;
 8012016:	2301      	movs	r3, #1
 8012018:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801201a:	f7ff fcf0 	bl	80119fe <inHandlerMode>
 801201e:	4603      	mov	r3, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	d018      	beq.n	8012056 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012024:	f107 0210 	add.w	r2, r7, #16
 8012028:	f107 0108 	add.w	r1, r7, #8
 801202c:	2300      	movs	r3, #0
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f000 fce8 	bl	8012a04 <xQueueGenericSendFromISR>
 8012034:	4603      	mov	r3, r0
 8012036:	2b01      	cmp	r3, #1
 8012038:	d001      	beq.n	801203e <osMessagePut+0x42>
      return osErrorOS;
 801203a:	23ff      	movs	r3, #255	; 0xff
 801203c:	e018      	b.n	8012070 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d014      	beq.n	801206e <osMessagePut+0x72>
 8012044:	4b0c      	ldr	r3, [pc, #48]	; (8012078 <osMessagePut+0x7c>)
 8012046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801204a:	601a      	str	r2, [r3, #0]
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	f3bf 8f6f 	isb	sy
 8012054:	e00b      	b.n	801206e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012056:	f107 0108 	add.w	r1, r7, #8
 801205a:	2300      	movs	r3, #0
 801205c:	697a      	ldr	r2, [r7, #20]
 801205e:	68f8      	ldr	r0, [r7, #12]
 8012060:	f000 fbd2 	bl	8012808 <xQueueGenericSend>
 8012064:	4603      	mov	r3, r0
 8012066:	2b01      	cmp	r3, #1
 8012068:	d001      	beq.n	801206e <osMessagePut+0x72>
      return osErrorOS;
 801206a:	23ff      	movs	r3, #255	; 0xff
 801206c:	e000      	b.n	8012070 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	e000ed04 	.word	0xe000ed04

0801207c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801207c:	b590      	push	{r4, r7, lr}
 801207e:	b08b      	sub	sp, #44	; 0x2c
 8012080:	af00      	add	r7, sp, #0
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	60b9      	str	r1, [r7, #8]
 8012086:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801208c:	2300      	movs	r3, #0
 801208e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d10a      	bne.n	80120ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012096:	2380      	movs	r3, #128	; 0x80
 8012098:	617b      	str	r3, [r7, #20]
    return event;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	461c      	mov	r4, r3
 801209e:	f107 0314 	add.w	r3, r7, #20
 80120a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80120a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80120aa:	e054      	b.n	8012156 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80120ac:	2300      	movs	r3, #0
 80120ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ba:	d103      	bne.n	80120c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80120bc:	f04f 33ff 	mov.w	r3, #4294967295
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
 80120c2:	e009      	b.n	80120d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d006      	beq.n	80120d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80120ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d101      	bne.n	80120d8 <osMessageGet+0x5c>
      ticks = 1;
 80120d4:	2301      	movs	r3, #1
 80120d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80120d8:	f7ff fc91 	bl	80119fe <inHandlerMode>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d01c      	beq.n	801211c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80120e2:	f107 0220 	add.w	r2, r7, #32
 80120e6:	f107 0314 	add.w	r3, r7, #20
 80120ea:	3304      	adds	r3, #4
 80120ec:	4619      	mov	r1, r3
 80120ee:	68b8      	ldr	r0, [r7, #8]
 80120f0:	f000 ff9c 	bl	801302c <xQueueReceiveFromISR>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d102      	bne.n	8012100 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80120fa:	2310      	movs	r3, #16
 80120fc:	617b      	str	r3, [r7, #20]
 80120fe:	e001      	b.n	8012104 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012104:	6a3b      	ldr	r3, [r7, #32]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d01d      	beq.n	8012146 <osMessageGet+0xca>
 801210a:	4b15      	ldr	r3, [pc, #84]	; (8012160 <osMessageGet+0xe4>)
 801210c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	f3bf 8f4f 	dsb	sy
 8012116:	f3bf 8f6f 	isb	sy
 801211a:	e014      	b.n	8012146 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801211c:	f107 0314 	add.w	r3, r7, #20
 8012120:	3304      	adds	r3, #4
 8012122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012124:	4619      	mov	r1, r3
 8012126:	68b8      	ldr	r0, [r7, #8]
 8012128:	f000 fd94 	bl	8012c54 <xQueueReceive>
 801212c:	4603      	mov	r3, r0
 801212e:	2b01      	cmp	r3, #1
 8012130:	d102      	bne.n	8012138 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012132:	2310      	movs	r3, #16
 8012134:	617b      	str	r3, [r7, #20]
 8012136:	e006      	b.n	8012146 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213a:	2b00      	cmp	r3, #0
 801213c:	d101      	bne.n	8012142 <osMessageGet+0xc6>
 801213e:	2300      	movs	r3, #0
 8012140:	e000      	b.n	8012144 <osMessageGet+0xc8>
 8012142:	2340      	movs	r3, #64	; 0x40
 8012144:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	461c      	mov	r4, r3
 801214a:	f107 0314 	add.w	r3, r7, #20
 801214e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	372c      	adds	r7, #44	; 0x2c
 801215a:	46bd      	mov	sp, r7
 801215c:	bd90      	pop	{r4, r7, pc}
 801215e:	bf00      	nop
 8012160:	e000ed04 	.word	0xe000ed04

08012164 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012164:	b590      	push	{r4, r7, lr}
 8012166:	b087      	sub	sp, #28
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	60fb      	str	r3, [r7, #12]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	613b      	str	r3, [r7, #16]
 801217a:	2300      	movs	r3, #0
 801217c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	689c      	ldr	r4, [r3, #8]
 8012182:	200c      	movs	r0, #12
 8012184:	f002 fee8 	bl	8014f58 <pvPortMalloc>
 8012188:	4603      	mov	r3, r0
 801218a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	689b      	ldr	r3, [r3, #8]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <osMailCreate+0x36>
    return NULL;
 8012196:	2300      	movs	r3, #0
 8012198:	e038      	b.n	801220c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6818      	ldr	r0, [r3, #0]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	681c      	ldr	r4, [r3, #0]
 80121ae:	2200      	movs	r2, #0
 80121b0:	2104      	movs	r1, #4
 80121b2:	f000 facf 	bl	8012754 <xQueueGenericCreate>
 80121b6:	4603      	mov	r3, r0
 80121b8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	689b      	ldr	r3, [r3, #8]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d107      	bne.n	80121d6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	689b      	ldr	r3, [r3, #8]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f002 ff8f 	bl	80150f0 <vPortFree>
    return NULL;
 80121d2:	2300      	movs	r3, #0
 80121d4:	e01a      	b.n	801220c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	681c      	ldr	r4, [r3, #0]
 80121dc:	f107 030c 	add.w	r3, r7, #12
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7ff fde2 	bl	8011daa <osPoolCreate>
 80121e6:	4603      	mov	r3, r0
 80121e8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	689b      	ldr	r3, [r3, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d107      	bne.n	8012206 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	689b      	ldr	r3, [r3, #8]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f002 ff77 	bl	80150f0 <vPortFree>
    return NULL;
 8012202:	2300      	movs	r3, #0
 8012204:	e002      	b.n	801220c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 801220c:	4618      	mov	r0, r3
 801220e:	371c      	adds	r7, #28
 8012210:	46bd      	mov	sp, r7
 8012212:	bd90      	pop	{r4, r7, pc}

08012214 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d101      	bne.n	8012228 <osMailAlloc+0x14>
    return NULL;
 8012224:	2300      	movs	r3, #0
 8012226:	e006      	b.n	8012236 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	4618      	mov	r0, r3
 801222e:	f7ff fe19 	bl	8011e64 <osPoolAlloc>
 8012232:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012234:	68fb      	ldr	r3, [r7, #12]
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
	...

08012240 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <osMailPut+0x14>
    return osErrorParameter;
 8012250:	2380      	movs	r3, #128	; 0x80
 8012252:	e02c      	b.n	80122ae <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012254:	2300      	movs	r3, #0
 8012256:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012258:	f7ff fbd1 	bl	80119fe <inHandlerMode>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d018      	beq.n	8012294 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6858      	ldr	r0, [r3, #4]
 8012266:	f107 020c 	add.w	r2, r7, #12
 801226a:	4639      	mov	r1, r7
 801226c:	2300      	movs	r3, #0
 801226e:	f000 fbc9 	bl	8012a04 <xQueueGenericSendFromISR>
 8012272:	4603      	mov	r3, r0
 8012274:	2b01      	cmp	r3, #1
 8012276:	d001      	beq.n	801227c <osMailPut+0x3c>
      return osErrorOS;
 8012278:	23ff      	movs	r3, #255	; 0xff
 801227a:	e018      	b.n	80122ae <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d014      	beq.n	80122ac <osMailPut+0x6c>
 8012282:	4b0d      	ldr	r3, [pc, #52]	; (80122b8 <osMailPut+0x78>)
 8012284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012288:	601a      	str	r2, [r3, #0]
 801228a:	f3bf 8f4f 	dsb	sy
 801228e:	f3bf 8f6f 	isb	sy
 8012292:	e00b      	b.n	80122ac <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6858      	ldr	r0, [r3, #4]
 8012298:	4639      	mov	r1, r7
 801229a:	2300      	movs	r3, #0
 801229c:	2200      	movs	r2, #0
 801229e:	f000 fab3 	bl	8012808 <xQueueGenericSend>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d001      	beq.n	80122ac <osMailPut+0x6c>
      return osErrorOS;
 80122a8:	23ff      	movs	r3, #255	; 0xff
 80122aa:	e000      	b.n	80122ae <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80122ac:	2300      	movs	r3, #0
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3710      	adds	r7, #16
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	bf00      	nop
 80122b8:	e000ed04 	.word	0xe000ed04

080122bc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80122bc:	b590      	push	{r4, r7, lr}
 80122be:	b08b      	sub	sp, #44	; 0x2c
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d10a      	bne.n	80122e8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80122d2:	2380      	movs	r3, #128	; 0x80
 80122d4:	617b      	str	r3, [r7, #20]
    return event;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	461c      	mov	r4, r3
 80122da:	f107 0314 	add.w	r3, r7, #20
 80122de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80122e6:	e056      	b.n	8012396 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80122e8:	2300      	movs	r3, #0
 80122ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80122ec:	2300      	movs	r3, #0
 80122ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122f6:	d103      	bne.n	8012300 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80122f8:	f04f 33ff 	mov.w	r3, #4294967295
 80122fc:	627b      	str	r3, [r7, #36]	; 0x24
 80122fe:	e009      	b.n	8012314 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d006      	beq.n	8012314 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	2b00      	cmp	r3, #0
 801230e:	d101      	bne.n	8012314 <osMailGet+0x58>
      ticks = 1;
 8012310:	2301      	movs	r3, #1
 8012312:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012314:	f7ff fb73 	bl	80119fe <inHandlerMode>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d01d      	beq.n	801235a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	6858      	ldr	r0, [r3, #4]
 8012322:	f107 0220 	add.w	r2, r7, #32
 8012326:	f107 0314 	add.w	r3, r7, #20
 801232a:	3304      	adds	r3, #4
 801232c:	4619      	mov	r1, r3
 801232e:	f000 fe7d 	bl	801302c <xQueueReceiveFromISR>
 8012332:	4603      	mov	r3, r0
 8012334:	2b01      	cmp	r3, #1
 8012336:	d102      	bne.n	801233e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8012338:	2320      	movs	r3, #32
 801233a:	617b      	str	r3, [r7, #20]
 801233c:	e001      	b.n	8012342 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 801233e:	2300      	movs	r3, #0
 8012340:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012342:	6a3b      	ldr	r3, [r7, #32]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d01e      	beq.n	8012386 <osMailGet+0xca>
 8012348:	4b15      	ldr	r3, [pc, #84]	; (80123a0 <osMailGet+0xe4>)
 801234a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801234e:	601a      	str	r2, [r3, #0]
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	f3bf 8f6f 	isb	sy
 8012358:	e015      	b.n	8012386 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	6858      	ldr	r0, [r3, #4]
 801235e:	f107 0314 	add.w	r3, r7, #20
 8012362:	3304      	adds	r3, #4
 8012364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012366:	4619      	mov	r1, r3
 8012368:	f000 fc74 	bl	8012c54 <xQueueReceive>
 801236c:	4603      	mov	r3, r0
 801236e:	2b01      	cmp	r3, #1
 8012370:	d102      	bne.n	8012378 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012372:	2320      	movs	r3, #32
 8012374:	617b      	str	r3, [r7, #20]
 8012376:	e006      	b.n	8012386 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237a:	2b00      	cmp	r3, #0
 801237c:	d101      	bne.n	8012382 <osMailGet+0xc6>
 801237e:	2300      	movs	r3, #0
 8012380:	e000      	b.n	8012384 <osMailGet+0xc8>
 8012382:	2340      	movs	r3, #64	; 0x40
 8012384:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	461c      	mov	r4, r3
 801238a:	f107 0314 	add.w	r3, r7, #20
 801238e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012396:	68f8      	ldr	r0, [r7, #12]
 8012398:	372c      	adds	r7, #44	; 0x2c
 801239a:	46bd      	mov	sp, r7
 801239c:	bd90      	pop	{r4, r7, pc}
 801239e:	bf00      	nop
 80123a0:	e000ed04 	.word	0xe000ed04

080123a4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d101      	bne.n	80123b8 <osMailFree+0x14>
    return osErrorParameter;
 80123b4:	2380      	movs	r3, #128	; 0x80
 80123b6:	e006      	b.n	80123c6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	4618      	mov	r0, r3
 80123c0:	f7ff fdb2 	bl	8011f28 <osPoolFree>
 80123c4:	4603      	mov	r3, r0
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3708      	adds	r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}

080123ce <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80123ce:	b580      	push	{r7, lr}
 80123d0:	b082      	sub	sp, #8
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f001 f9b2 	bl	8013740 <vTaskSuspend>
  
  return osOK;
 80123dc:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3708      	adds	r7, #8
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
	...

080123e8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80123f0:	f7ff fb05 	bl	80119fe <inHandlerMode>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d00e      	beq.n	8012418 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f001 fac2 	bl	8013984 <xTaskResumeFromISR>
 8012400:	4603      	mov	r3, r0
 8012402:	2b01      	cmp	r3, #1
 8012404:	d10b      	bne.n	801241e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8012406:	4b08      	ldr	r3, [pc, #32]	; (8012428 <osThreadResume+0x40>)
 8012408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	f3bf 8f4f 	dsb	sy
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	e002      	b.n	801241e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f001 fa55 	bl	80138c8 <vTaskResume>
  }
  return osOK;
 801241e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8012420:	4618      	mov	r0, r3
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	e000ed04 	.word	0xe000ed04

0801242c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f103 0208 	add.w	r2, r3, #8
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f04f 32ff 	mov.w	r2, #4294967295
 8012444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f103 0208 	add.w	r2, r3, #8
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f103 0208 	add.w	r2, r3, #8
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012460:	bf00      	nop
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801247a:	bf00      	nop
 801247c:	370c      	adds	r7, #12
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr

08012486 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012486:	b480      	push	{r7}
 8012488:	b085      	sub	sp, #20
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
 801248e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	689a      	ldr	r2, [r3, #8]
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	1c5a      	adds	r2, r3, #1
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	601a      	str	r2, [r3, #0]
}
 80124c2:	bf00      	nop
 80124c4:	3714      	adds	r7, #20
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr

080124ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80124ce:	b480      	push	{r7}
 80124d0:	b085      	sub	sp, #20
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
 80124d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e4:	d103      	bne.n	80124ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	691b      	ldr	r3, [r3, #16]
 80124ea:	60fb      	str	r3, [r7, #12]
 80124ec:	e00c      	b.n	8012508 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	3308      	adds	r3, #8
 80124f2:	60fb      	str	r3, [r7, #12]
 80124f4:	e002      	b.n	80124fc <vListInsert+0x2e>
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	60fb      	str	r3, [r7, #12]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	68ba      	ldr	r2, [r7, #8]
 8012504:	429a      	cmp	r2, r3
 8012506:	d2f6      	bcs.n	80124f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	683a      	ldr	r2, [r7, #0]
 8012516:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	683a      	ldr	r2, [r7, #0]
 8012522:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	1c5a      	adds	r2, r3, #1
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	601a      	str	r2, [r3, #0]
}
 8012534:	bf00      	nop
 8012536:	3714      	adds	r7, #20
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012540:	b480      	push	{r7}
 8012542:	b085      	sub	sp, #20
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	691b      	ldr	r3, [r3, #16]
 801254c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	6892      	ldr	r2, [r2, #8]
 8012556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	6852      	ldr	r2, [r2, #4]
 8012560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	429a      	cmp	r2, r3
 801256a:	d103      	bne.n	8012574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	689a      	ldr	r2, [r3, #8]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	1e5a      	subs	r2, r3, #1
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3714      	adds	r7, #20
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d10a      	bne.n	80125be <xQueueGenericReset+0x2a>
	__asm volatile
 80125a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ac:	f383 8811 	msr	BASEPRI, r3
 80125b0:	f3bf 8f6f 	isb	sy
 80125b4:	f3bf 8f4f 	dsb	sy
 80125b8:	60bb      	str	r3, [r7, #8]
}
 80125ba:	bf00      	nop
 80125bc:	e7fe      	b.n	80125bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80125be:	f002 fba9 	bl	8014d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ca:	68f9      	ldr	r1, [r7, #12]
 80125cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80125ce:	fb01 f303 	mul.w	r3, r1, r3
 80125d2:	441a      	add	r2, r3
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	2200      	movs	r2, #0
 80125dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ee:	3b01      	subs	r3, #1
 80125f0:	68f9      	ldr	r1, [r7, #12]
 80125f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80125f4:	fb01 f303 	mul.w	r3, r1, r3
 80125f8:	441a      	add	r2, r3
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	22ff      	movs	r2, #255	; 0xff
 8012602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	22ff      	movs	r2, #255	; 0xff
 801260a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d114      	bne.n	801263e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	691b      	ldr	r3, [r3, #16]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d01a      	beq.n	8012652 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	3310      	adds	r3, #16
 8012620:	4618      	mov	r0, r3
 8012622:	f001 fc85 	bl	8013f30 <xTaskRemoveFromEventList>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d012      	beq.n	8012652 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801262c:	4b0c      	ldr	r3, [pc, #48]	; (8012660 <xQueueGenericReset+0xcc>)
 801262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012632:	601a      	str	r2, [r3, #0]
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	f3bf 8f6f 	isb	sy
 801263c:	e009      	b.n	8012652 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	3310      	adds	r3, #16
 8012642:	4618      	mov	r0, r3
 8012644:	f7ff fef2 	bl	801242c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	3324      	adds	r3, #36	; 0x24
 801264c:	4618      	mov	r0, r3
 801264e:	f7ff feed 	bl	801242c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012652:	f002 fb8f 	bl	8014d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012656:	2301      	movs	r3, #1
}
 8012658:	4618      	mov	r0, r3
 801265a:	3710      	adds	r7, #16
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	e000ed04 	.word	0xe000ed04

08012664 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012664:	b580      	push	{r7, lr}
 8012666:	b08e      	sub	sp, #56	; 0x38
 8012668:	af02      	add	r7, sp, #8
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	607a      	str	r2, [r7, #4]
 8012670:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d10a      	bne.n	801268e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267c:	f383 8811 	msr	BASEPRI, r3
 8012680:	f3bf 8f6f 	isb	sy
 8012684:	f3bf 8f4f 	dsb	sy
 8012688:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801268a:	bf00      	nop
 801268c:	e7fe      	b.n	801268c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10a      	bne.n	80126aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126a6:	bf00      	nop
 80126a8:	e7fe      	b.n	80126a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <xQueueGenericCreateStatic+0x52>
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <xQueueGenericCreateStatic+0x56>
 80126b6:	2301      	movs	r3, #1
 80126b8:	e000      	b.n	80126bc <xQueueGenericCreateStatic+0x58>
 80126ba:	2300      	movs	r3, #0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d10a      	bne.n	80126d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80126c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c4:	f383 8811 	msr	BASEPRI, r3
 80126c8:	f3bf 8f6f 	isb	sy
 80126cc:	f3bf 8f4f 	dsb	sy
 80126d0:	623b      	str	r3, [r7, #32]
}
 80126d2:	bf00      	nop
 80126d4:	e7fe      	b.n	80126d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <xQueueGenericCreateStatic+0x7e>
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d101      	bne.n	80126e6 <xQueueGenericCreateStatic+0x82>
 80126e2:	2301      	movs	r3, #1
 80126e4:	e000      	b.n	80126e8 <xQueueGenericCreateStatic+0x84>
 80126e6:	2300      	movs	r3, #0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d10a      	bne.n	8012702 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80126ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f0:	f383 8811 	msr	BASEPRI, r3
 80126f4:	f3bf 8f6f 	isb	sy
 80126f8:	f3bf 8f4f 	dsb	sy
 80126fc:	61fb      	str	r3, [r7, #28]
}
 80126fe:	bf00      	nop
 8012700:	e7fe      	b.n	8012700 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012702:	2348      	movs	r3, #72	; 0x48
 8012704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	2b48      	cmp	r3, #72	; 0x48
 801270a:	d00a      	beq.n	8012722 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012710:	f383 8811 	msr	BASEPRI, r3
 8012714:	f3bf 8f6f 	isb	sy
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	61bb      	str	r3, [r7, #24]
}
 801271e:	bf00      	nop
 8012720:	e7fe      	b.n	8012720 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012722:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00d      	beq.n	801274a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012730:	2201      	movs	r2, #1
 8012732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012736:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	9300      	str	r3, [sp, #0]
 801273e:	4613      	mov	r3, r2
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	68b9      	ldr	r1, [r7, #8]
 8012744:	68f8      	ldr	r0, [r7, #12]
 8012746:	f000 f83f 	bl	80127c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801274c:	4618      	mov	r0, r3
 801274e:	3730      	adds	r7, #48	; 0x30
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012754:	b580      	push	{r7, lr}
 8012756:	b08a      	sub	sp, #40	; 0x28
 8012758:	af02      	add	r7, sp, #8
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	4613      	mov	r3, r2
 8012760:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d10a      	bne.n	801277e <xQueueGenericCreate+0x2a>
	__asm volatile
 8012768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276c:	f383 8811 	msr	BASEPRI, r3
 8012770:	f3bf 8f6f 	isb	sy
 8012774:	f3bf 8f4f 	dsb	sy
 8012778:	613b      	str	r3, [r7, #16]
}
 801277a:	bf00      	nop
 801277c:	e7fe      	b.n	801277c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	68ba      	ldr	r2, [r7, #8]
 8012782:	fb02 f303 	mul.w	r3, r2, r3
 8012786:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	3348      	adds	r3, #72	; 0x48
 801278c:	4618      	mov	r0, r3
 801278e:	f002 fbe3 	bl	8014f58 <pvPortMalloc>
 8012792:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d011      	beq.n	80127be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	3348      	adds	r3, #72	; 0x48
 80127a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127ac:	79fa      	ldrb	r2, [r7, #7]
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	4613      	mov	r3, r2
 80127b4:	697a      	ldr	r2, [r7, #20]
 80127b6:	68b9      	ldr	r1, [r7, #8]
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f000 f805 	bl	80127c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80127be:	69bb      	ldr	r3, [r7, #24]
	}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3720      	adds	r7, #32
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
 80127d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d103      	bne.n	80127e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	69ba      	ldr	r2, [r7, #24]
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	e002      	b.n	80127ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80127e4:	69bb      	ldr	r3, [r7, #24]
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80127ea:	69bb      	ldr	r3, [r7, #24]
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	68ba      	ldr	r2, [r7, #8]
 80127f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80127f6:	2101      	movs	r1, #1
 80127f8:	69b8      	ldr	r0, [r7, #24]
 80127fa:	f7ff fecb 	bl	8012594 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80127fe:	bf00      	nop
 8012800:	3710      	adds	r7, #16
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
	...

08012808 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b08e      	sub	sp, #56	; 0x38
 801280c:	af00      	add	r7, sp, #0
 801280e:	60f8      	str	r0, [r7, #12]
 8012810:	60b9      	str	r1, [r7, #8]
 8012812:	607a      	str	r2, [r7, #4]
 8012814:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012816:	2300      	movs	r3, #0
 8012818:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012820:	2b00      	cmp	r3, #0
 8012822:	d10a      	bne.n	801283a <xQueueGenericSend+0x32>
	__asm volatile
 8012824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012828:	f383 8811 	msr	BASEPRI, r3
 801282c:	f3bf 8f6f 	isb	sy
 8012830:	f3bf 8f4f 	dsb	sy
 8012834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012836:	bf00      	nop
 8012838:	e7fe      	b.n	8012838 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d103      	bne.n	8012848 <xQueueGenericSend+0x40>
 8012840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012844:	2b00      	cmp	r3, #0
 8012846:	d101      	bne.n	801284c <xQueueGenericSend+0x44>
 8012848:	2301      	movs	r3, #1
 801284a:	e000      	b.n	801284e <xQueueGenericSend+0x46>
 801284c:	2300      	movs	r3, #0
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10a      	bne.n	8012868 <xQueueGenericSend+0x60>
	__asm volatile
 8012852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012856:	f383 8811 	msr	BASEPRI, r3
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012864:	bf00      	nop
 8012866:	e7fe      	b.n	8012866 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	2b02      	cmp	r3, #2
 801286c:	d103      	bne.n	8012876 <xQueueGenericSend+0x6e>
 801286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012872:	2b01      	cmp	r3, #1
 8012874:	d101      	bne.n	801287a <xQueueGenericSend+0x72>
 8012876:	2301      	movs	r3, #1
 8012878:	e000      	b.n	801287c <xQueueGenericSend+0x74>
 801287a:	2300      	movs	r3, #0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d10a      	bne.n	8012896 <xQueueGenericSend+0x8e>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	623b      	str	r3, [r7, #32]
}
 8012892:	bf00      	nop
 8012894:	e7fe      	b.n	8012894 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012896:	f001 fd07 	bl	80142a8 <xTaskGetSchedulerState>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d102      	bne.n	80128a6 <xQueueGenericSend+0x9e>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d101      	bne.n	80128aa <xQueueGenericSend+0xa2>
 80128a6:	2301      	movs	r3, #1
 80128a8:	e000      	b.n	80128ac <xQueueGenericSend+0xa4>
 80128aa:	2300      	movs	r3, #0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d10a      	bne.n	80128c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80128b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b4:	f383 8811 	msr	BASEPRI, r3
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	61fb      	str	r3, [r7, #28]
}
 80128c2:	bf00      	nop
 80128c4:	e7fe      	b.n	80128c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128c6:	f002 fa25 	bl	8014d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80128ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d302      	bcc.n	80128dc <xQueueGenericSend+0xd4>
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d129      	bne.n	8012930 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	68b9      	ldr	r1, [r7, #8]
 80128e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128e2:	f000 fc5e 	bl	80131a2 <prvCopyDataToQueue>
 80128e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d010      	beq.n	8012912 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f2:	3324      	adds	r3, #36	; 0x24
 80128f4:	4618      	mov	r0, r3
 80128f6:	f001 fb1b 	bl	8013f30 <xTaskRemoveFromEventList>
 80128fa:	4603      	mov	r3, r0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d013      	beq.n	8012928 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012900:	4b3f      	ldr	r3, [pc, #252]	; (8012a00 <xQueueGenericSend+0x1f8>)
 8012902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012906:	601a      	str	r2, [r3, #0]
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	f3bf 8f6f 	isb	sy
 8012910:	e00a      	b.n	8012928 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012914:	2b00      	cmp	r3, #0
 8012916:	d007      	beq.n	8012928 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012918:	4b39      	ldr	r3, [pc, #228]	; (8012a00 <xQueueGenericSend+0x1f8>)
 801291a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	f3bf 8f4f 	dsb	sy
 8012924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012928:	f002 fa24 	bl	8014d74 <vPortExitCritical>
				return pdPASS;
 801292c:	2301      	movs	r3, #1
 801292e:	e063      	b.n	80129f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d103      	bne.n	801293e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012936:	f002 fa1d 	bl	8014d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801293a:	2300      	movs	r3, #0
 801293c:	e05c      	b.n	80129f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012940:	2b00      	cmp	r3, #0
 8012942:	d106      	bne.n	8012952 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012944:	f107 0314 	add.w	r3, r7, #20
 8012948:	4618      	mov	r0, r3
 801294a:	f001 fb53 	bl	8013ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801294e:	2301      	movs	r3, #1
 8012950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012952:	f002 fa0f 	bl	8014d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012956:	f001 f8e7 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801295a:	f002 f9db 	bl	8014d14 <vPortEnterCritical>
 801295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012964:	b25b      	sxtb	r3, r3
 8012966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801296a:	d103      	bne.n	8012974 <xQueueGenericSend+0x16c>
 801296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296e:	2200      	movs	r2, #0
 8012970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801297a:	b25b      	sxtb	r3, r3
 801297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012980:	d103      	bne.n	801298a <xQueueGenericSend+0x182>
 8012982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012984:	2200      	movs	r2, #0
 8012986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801298a:	f002 f9f3 	bl	8014d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801298e:	1d3a      	adds	r2, r7, #4
 8012990:	f107 0314 	add.w	r3, r7, #20
 8012994:	4611      	mov	r1, r2
 8012996:	4618      	mov	r0, r3
 8012998:	f001 fb42 	bl	8014020 <xTaskCheckForTimeOut>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d124      	bne.n	80129ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80129a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129a4:	f000 fcf5 	bl	8013392 <prvIsQueueFull>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d018      	beq.n	80129e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80129ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b0:	3310      	adds	r3, #16
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4611      	mov	r1, r2
 80129b6:	4618      	mov	r0, r3
 80129b8:	f001 fa96 	bl	8013ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80129bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129be:	f000 fc80 	bl	80132c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80129c2:	f001 f8bf 	bl	8013b44 <xTaskResumeAll>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f47f af7c 	bne.w	80128c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80129ce:	4b0c      	ldr	r3, [pc, #48]	; (8012a00 <xQueueGenericSend+0x1f8>)
 80129d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129d4:	601a      	str	r2, [r3, #0]
 80129d6:	f3bf 8f4f 	dsb	sy
 80129da:	f3bf 8f6f 	isb	sy
 80129de:	e772      	b.n	80128c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80129e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129e2:	f000 fc6e 	bl	80132c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129e6:	f001 f8ad 	bl	8013b44 <xTaskResumeAll>
 80129ea:	e76c      	b.n	80128c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80129ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129ee:	f000 fc68 	bl	80132c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129f2:	f001 f8a7 	bl	8013b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80129f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3738      	adds	r7, #56	; 0x38
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	e000ed04 	.word	0xe000ed04

08012a04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b090      	sub	sp, #64	; 0x40
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	60b9      	str	r1, [r7, #8]
 8012a0e:	607a      	str	r2, [r7, #4]
 8012a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d10a      	bne.n	8012a32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a20:	f383 8811 	msr	BASEPRI, r3
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012a2e:	bf00      	nop
 8012a30:	e7fe      	b.n	8012a30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d103      	bne.n	8012a40 <xQueueGenericSendFromISR+0x3c>
 8012a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d101      	bne.n	8012a44 <xQueueGenericSendFromISR+0x40>
 8012a40:	2301      	movs	r3, #1
 8012a42:	e000      	b.n	8012a46 <xQueueGenericSendFromISR+0x42>
 8012a44:	2300      	movs	r3, #0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d10a      	bne.n	8012a60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4e:	f383 8811 	msr	BASEPRI, r3
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	f3bf 8f4f 	dsb	sy
 8012a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012a5c:	bf00      	nop
 8012a5e:	e7fe      	b.n	8012a5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	2b02      	cmp	r3, #2
 8012a64:	d103      	bne.n	8012a6e <xQueueGenericSendFromISR+0x6a>
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d101      	bne.n	8012a72 <xQueueGenericSendFromISR+0x6e>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e000      	b.n	8012a74 <xQueueGenericSendFromISR+0x70>
 8012a72:	2300      	movs	r3, #0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d10a      	bne.n	8012a8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7c:	f383 8811 	msr	BASEPRI, r3
 8012a80:	f3bf 8f6f 	isb	sy
 8012a84:	f3bf 8f4f 	dsb	sy
 8012a88:	623b      	str	r3, [r7, #32]
}
 8012a8a:	bf00      	nop
 8012a8c:	e7fe      	b.n	8012a8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a8e:	f002 fa23 	bl	8014ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8012a92:	f3ef 8211 	mrs	r2, BASEPRI
 8012a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9a:	f383 8811 	msr	BASEPRI, r3
 8012a9e:	f3bf 8f6f 	isb	sy
 8012aa2:	f3bf 8f4f 	dsb	sy
 8012aa6:	61fa      	str	r2, [r7, #28]
 8012aa8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8012aaa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012aac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d302      	bcc.n	8012ac0 <xQueueGenericSendFromISR+0xbc>
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	2b02      	cmp	r3, #2
 8012abe:	d12f      	bne.n	8012b20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ace:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012ad0:	683a      	ldr	r2, [r7, #0]
 8012ad2:	68b9      	ldr	r1, [r7, #8]
 8012ad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ad6:	f000 fb64 	bl	80131a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012ada:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae2:	d112      	bne.n	8012b0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d016      	beq.n	8012b1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aee:	3324      	adds	r3, #36	; 0x24
 8012af0:	4618      	mov	r0, r3
 8012af2:	f001 fa1d 	bl	8013f30 <xTaskRemoveFromEventList>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00e      	beq.n	8012b1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d00b      	beq.n	8012b1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2201      	movs	r2, #1
 8012b06:	601a      	str	r2, [r3, #0]
 8012b08:	e007      	b.n	8012b1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b0e:	3301      	adds	r3, #1
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	b25a      	sxtb	r2, r3
 8012b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012b1e:	e001      	b.n	8012b24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b20:	2300      	movs	r3, #0
 8012b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b26:	617b      	str	r3, [r7, #20]
	__asm volatile
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	f383 8811 	msr	BASEPRI, r3
}
 8012b2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3740      	adds	r7, #64	; 0x40
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b08e      	sub	sp, #56	; 0x38
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10a      	bne.n	8012b64 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b52:	f383 8811 	msr	BASEPRI, r3
 8012b56:	f3bf 8f6f 	isb	sy
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	623b      	str	r3, [r7, #32]
}
 8012b60:	bf00      	nop
 8012b62:	e7fe      	b.n	8012b62 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00a      	beq.n	8012b82 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	61fb      	str	r3, [r7, #28]
}
 8012b7e:	bf00      	nop
 8012b80:	e7fe      	b.n	8012b80 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d103      	bne.n	8012b92 <xQueueGiveFromISR+0x58>
 8012b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d101      	bne.n	8012b96 <xQueueGiveFromISR+0x5c>
 8012b92:	2301      	movs	r3, #1
 8012b94:	e000      	b.n	8012b98 <xQueueGiveFromISR+0x5e>
 8012b96:	2300      	movs	r3, #0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d10a      	bne.n	8012bb2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8012b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	61bb      	str	r3, [r7, #24]
}
 8012bae:	bf00      	nop
 8012bb0:	e7fe      	b.n	8012bb0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012bb2:	f002 f991 	bl	8014ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8012bb6:	f3ef 8211 	mrs	r2, BASEPRI
 8012bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	617a      	str	r2, [r7, #20]
 8012bcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012bce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d22b      	bcs.n	8012c3a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	1c5a      	adds	r2, r3, #1
 8012bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bfc:	d112      	bne.n	8012c24 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d016      	beq.n	8012c34 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c08:	3324      	adds	r3, #36	; 0x24
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 f990 	bl	8013f30 <xTaskRemoveFromEventList>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d00e      	beq.n	8012c34 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00b      	beq.n	8012c34 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	2201      	movs	r2, #1
 8012c20:	601a      	str	r2, [r3, #0]
 8012c22:	e007      	b.n	8012c34 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c28:	3301      	adds	r3, #1
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	b25a      	sxtb	r2, r3
 8012c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012c34:	2301      	movs	r3, #1
 8012c36:	637b      	str	r3, [r7, #52]	; 0x34
 8012c38:	e001      	b.n	8012c3e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8012c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f383 8811 	msr	BASEPRI, r3
}
 8012c48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3738      	adds	r7, #56	; 0x38
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}

08012c54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b08c      	sub	sp, #48	; 0x30
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012c60:	2300      	movs	r3, #0
 8012c62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10a      	bne.n	8012c84 <xQueueReceive+0x30>
	__asm volatile
 8012c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c72:	f383 8811 	msr	BASEPRI, r3
 8012c76:	f3bf 8f6f 	isb	sy
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	623b      	str	r3, [r7, #32]
}
 8012c80:	bf00      	nop
 8012c82:	e7fe      	b.n	8012c82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d103      	bne.n	8012c92 <xQueueReceive+0x3e>
 8012c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d101      	bne.n	8012c96 <xQueueReceive+0x42>
 8012c92:	2301      	movs	r3, #1
 8012c94:	e000      	b.n	8012c98 <xQueueReceive+0x44>
 8012c96:	2300      	movs	r3, #0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d10a      	bne.n	8012cb2 <xQueueReceive+0x5e>
	__asm volatile
 8012c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca0:	f383 8811 	msr	BASEPRI, r3
 8012ca4:	f3bf 8f6f 	isb	sy
 8012ca8:	f3bf 8f4f 	dsb	sy
 8012cac:	61fb      	str	r3, [r7, #28]
}
 8012cae:	bf00      	nop
 8012cb0:	e7fe      	b.n	8012cb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012cb2:	f001 faf9 	bl	80142a8 <xTaskGetSchedulerState>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d102      	bne.n	8012cc2 <xQueueReceive+0x6e>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d101      	bne.n	8012cc6 <xQueueReceive+0x72>
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	e000      	b.n	8012cc8 <xQueueReceive+0x74>
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d10a      	bne.n	8012ce2 <xQueueReceive+0x8e>
	__asm volatile
 8012ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd0:	f383 8811 	msr	BASEPRI, r3
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	61bb      	str	r3, [r7, #24]
}
 8012cde:	bf00      	nop
 8012ce0:	e7fe      	b.n	8012ce0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ce2:	f002 f817 	bl	8014d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d01f      	beq.n	8012d32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012cf2:	68b9      	ldr	r1, [r7, #8]
 8012cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cf6:	f000 fabe 	bl	8013276 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfc:	1e5a      	subs	r2, r3, #1
 8012cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d04:	691b      	ldr	r3, [r3, #16]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00f      	beq.n	8012d2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	3310      	adds	r3, #16
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f001 f90e 	bl	8013f30 <xTaskRemoveFromEventList>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d007      	beq.n	8012d2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012d1a:	4b3d      	ldr	r3, [pc, #244]	; (8012e10 <xQueueReceive+0x1bc>)
 8012d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d20:	601a      	str	r2, [r3, #0]
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012d2a:	f002 f823 	bl	8014d74 <vPortExitCritical>
				return pdPASS;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e069      	b.n	8012e06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d103      	bne.n	8012d40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012d38:	f002 f81c 	bl	8014d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	e062      	b.n	8012e06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d46:	f107 0310 	add.w	r3, r7, #16
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f001 f952 	bl	8013ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d50:	2301      	movs	r3, #1
 8012d52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012d54:	f002 f80e 	bl	8014d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d58:	f000 fee6 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d5c:	f001 ffda 	bl	8014d14 <vPortEnterCritical>
 8012d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d66:	b25b      	sxtb	r3, r3
 8012d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d6c:	d103      	bne.n	8012d76 <xQueueReceive+0x122>
 8012d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d70:	2200      	movs	r2, #0
 8012d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d7c:	b25b      	sxtb	r3, r3
 8012d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d82:	d103      	bne.n	8012d8c <xQueueReceive+0x138>
 8012d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d86:	2200      	movs	r2, #0
 8012d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d8c:	f001 fff2 	bl	8014d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d90:	1d3a      	adds	r2, r7, #4
 8012d92:	f107 0310 	add.w	r3, r7, #16
 8012d96:	4611      	mov	r1, r2
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f001 f941 	bl	8014020 <xTaskCheckForTimeOut>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d123      	bne.n	8012dec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012da6:	f000 fade 	bl	8013366 <prvIsQueueEmpty>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d017      	beq.n	8012de0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db2:	3324      	adds	r3, #36	; 0x24
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	4611      	mov	r1, r2
 8012db8:	4618      	mov	r0, r3
 8012dba:	f001 f895 	bl	8013ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dc0:	f000 fa7f 	bl	80132c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012dc4:	f000 febe 	bl	8013b44 <xTaskResumeAll>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d189      	bne.n	8012ce2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012dce:	4b10      	ldr	r3, [pc, #64]	; (8012e10 <xQueueReceive+0x1bc>)
 8012dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	f3bf 8f6f 	isb	sy
 8012dde:	e780      	b.n	8012ce2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012de2:	f000 fa6e 	bl	80132c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012de6:	f000 fead 	bl	8013b44 <xTaskResumeAll>
 8012dea:	e77a      	b.n	8012ce2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dee:	f000 fa68 	bl	80132c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012df2:	f000 fea7 	bl	8013b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012df8:	f000 fab5 	bl	8013366 <prvIsQueueEmpty>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	f43f af6f 	beq.w	8012ce2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3730      	adds	r7, #48	; 0x30
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	e000ed04 	.word	0xe000ed04

08012e14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b08e      	sub	sp, #56	; 0x38
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012e26:	2300      	movs	r3, #0
 8012e28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d10a      	bne.n	8012e46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e34:	f383 8811 	msr	BASEPRI, r3
 8012e38:	f3bf 8f6f 	isb	sy
 8012e3c:	f3bf 8f4f 	dsb	sy
 8012e40:	623b      	str	r3, [r7, #32]
}
 8012e42:	bf00      	nop
 8012e44:	e7fe      	b.n	8012e44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00a      	beq.n	8012e64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	61fb      	str	r3, [r7, #28]
}
 8012e60:	bf00      	nop
 8012e62:	e7fe      	b.n	8012e62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e64:	f001 fa20 	bl	80142a8 <xTaskGetSchedulerState>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d102      	bne.n	8012e74 <xQueueSemaphoreTake+0x60>
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d101      	bne.n	8012e78 <xQueueSemaphoreTake+0x64>
 8012e74:	2301      	movs	r3, #1
 8012e76:	e000      	b.n	8012e7a <xQueueSemaphoreTake+0x66>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10a      	bne.n	8012e94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	61bb      	str	r3, [r7, #24]
}
 8012e90:	bf00      	nop
 8012e92:	e7fe      	b.n	8012e92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012e94:	f001 ff3e 	bl	8014d14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d024      	beq.n	8012eee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea6:	1e5a      	subs	r2, r3, #1
 8012ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d104      	bne.n	8012ebe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012eb4:	f001 fba0 	bl	80145f8 <pvTaskIncrementMutexHeldCount>
 8012eb8:	4602      	mov	r2, r0
 8012eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ebc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec0:	691b      	ldr	r3, [r3, #16]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d00f      	beq.n	8012ee6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec8:	3310      	adds	r3, #16
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f001 f830 	bl	8013f30 <xTaskRemoveFromEventList>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d007      	beq.n	8012ee6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012ed6:	4b54      	ldr	r3, [pc, #336]	; (8013028 <xQueueSemaphoreTake+0x214>)
 8012ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012ee6:	f001 ff45 	bl	8014d74 <vPortExitCritical>
				return pdPASS;
 8012eea:	2301      	movs	r3, #1
 8012eec:	e097      	b.n	801301e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d111      	bne.n	8012f18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d00a      	beq.n	8012f10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efe:	f383 8811 	msr	BASEPRI, r3
 8012f02:	f3bf 8f6f 	isb	sy
 8012f06:	f3bf 8f4f 	dsb	sy
 8012f0a:	617b      	str	r3, [r7, #20]
}
 8012f0c:	bf00      	nop
 8012f0e:	e7fe      	b.n	8012f0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012f10:	f001 ff30 	bl	8014d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012f14:	2300      	movs	r3, #0
 8012f16:	e082      	b.n	801301e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d106      	bne.n	8012f2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f1e:	f107 030c 	add.w	r3, r7, #12
 8012f22:	4618      	mov	r0, r3
 8012f24:	f001 f866 	bl	8013ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f2c:	f001 ff22 	bl	8014d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f30:	f000 fdfa 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f34:	f001 feee 	bl	8014d14 <vPortEnterCritical>
 8012f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f3e:	b25b      	sxtb	r3, r3
 8012f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f44:	d103      	bne.n	8012f4e <xQueueSemaphoreTake+0x13a>
 8012f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f48:	2200      	movs	r2, #0
 8012f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f54:	b25b      	sxtb	r3, r3
 8012f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f5a:	d103      	bne.n	8012f64 <xQueueSemaphoreTake+0x150>
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	2200      	movs	r2, #0
 8012f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f64:	f001 ff06 	bl	8014d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012f68:	463a      	mov	r2, r7
 8012f6a:	f107 030c 	add.w	r3, r7, #12
 8012f6e:	4611      	mov	r1, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f001 f855 	bl	8014020 <xTaskCheckForTimeOut>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d132      	bne.n	8012fe2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f7e:	f000 f9f2 	bl	8013366 <prvIsQueueEmpty>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d026      	beq.n	8012fd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d109      	bne.n	8012fa4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012f90:	f001 fec0 	bl	8014d14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f001 f9a3 	bl	80142e4 <xTaskPriorityInherit>
 8012f9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012fa0:	f001 fee8 	bl	8014d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa6:	3324      	adds	r3, #36	; 0x24
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	4611      	mov	r1, r2
 8012fac:	4618      	mov	r0, r3
 8012fae:	f000 ff9b 	bl	8013ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fb4:	f000 f985 	bl	80132c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012fb8:	f000 fdc4 	bl	8013b44 <xTaskResumeAll>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f47f af68 	bne.w	8012e94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012fc4:	4b18      	ldr	r3, [pc, #96]	; (8013028 <xQueueSemaphoreTake+0x214>)
 8012fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	f3bf 8f6f 	isb	sy
 8012fd4:	e75e      	b.n	8012e94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fd8:	f000 f973 	bl	80132c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012fdc:	f000 fdb2 	bl	8013b44 <xTaskResumeAll>
 8012fe0:	e758      	b.n	8012e94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fe4:	f000 f96d 	bl	80132c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012fe8:	f000 fdac 	bl	8013b44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fee:	f000 f9ba 	bl	8013366 <prvIsQueueEmpty>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f43f af4d 	beq.w	8012e94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d00d      	beq.n	801301c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013000:	f001 fe88 	bl	8014d14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013006:	f000 f8b4 	bl	8013172 <prvGetDisinheritPriorityAfterTimeout>
 801300a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013012:	4618      	mov	r0, r3
 8013014:	f001 fa62 	bl	80144dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013018:	f001 feac 	bl	8014d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801301c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801301e:	4618      	mov	r0, r3
 8013020:	3738      	adds	r7, #56	; 0x38
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	e000ed04 	.word	0xe000ed04

0801302c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b08e      	sub	sp, #56	; 0x38
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303e:	2b00      	cmp	r3, #0
 8013040:	d10a      	bne.n	8013058 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013046:	f383 8811 	msr	BASEPRI, r3
 801304a:	f3bf 8f6f 	isb	sy
 801304e:	f3bf 8f4f 	dsb	sy
 8013052:	623b      	str	r3, [r7, #32]
}
 8013054:	bf00      	nop
 8013056:	e7fe      	b.n	8013056 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d103      	bne.n	8013066 <xQueueReceiveFromISR+0x3a>
 801305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013062:	2b00      	cmp	r3, #0
 8013064:	d101      	bne.n	801306a <xQueueReceiveFromISR+0x3e>
 8013066:	2301      	movs	r3, #1
 8013068:	e000      	b.n	801306c <xQueueReceiveFromISR+0x40>
 801306a:	2300      	movs	r3, #0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10a      	bne.n	8013086 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	61fb      	str	r3, [r7, #28]
}
 8013082:	bf00      	nop
 8013084:	e7fe      	b.n	8013084 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013086:	f001 ff27 	bl	8014ed8 <vPortValidateInterruptPriority>
	__asm volatile
 801308a:	f3ef 8211 	mrs	r2, BASEPRI
 801308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013092:	f383 8811 	msr	BASEPRI, r3
 8013096:	f3bf 8f6f 	isb	sy
 801309a:	f3bf 8f4f 	dsb	sy
 801309e:	61ba      	str	r2, [r7, #24]
 80130a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80130a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80130a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80130ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d02f      	beq.n	8013112 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80130b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80130bc:	68b9      	ldr	r1, [r7, #8]
 80130be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130c0:	f000 f8d9 	bl	8013276 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80130c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c6:	1e5a      	subs	r2, r3, #1
 80130c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80130cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80130d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130d4:	d112      	bne.n	80130fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d8:	691b      	ldr	r3, [r3, #16]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d016      	beq.n	801310c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	3310      	adds	r3, #16
 80130e2:	4618      	mov	r0, r3
 80130e4:	f000 ff24 	bl	8013f30 <xTaskRemoveFromEventList>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00e      	beq.n	801310c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00b      	beq.n	801310c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2201      	movs	r2, #1
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	e007      	b.n	801310c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80130fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013100:	3301      	adds	r3, #1
 8013102:	b2db      	uxtb	r3, r3
 8013104:	b25a      	sxtb	r2, r3
 8013106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801310c:	2301      	movs	r3, #1
 801310e:	637b      	str	r3, [r7, #52]	; 0x34
 8013110:	e001      	b.n	8013116 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013112:	2300      	movs	r3, #0
 8013114:	637b      	str	r3, [r7, #52]	; 0x34
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	613b      	str	r3, [r7, #16]
	__asm volatile
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	f383 8811 	msr	BASEPRI, r3
}
 8013120:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013124:	4618      	mov	r0, r3
 8013126:	3738      	adds	r7, #56	; 0x38
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b084      	sub	sp, #16
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10a      	bne.n	8013154 <vQueueDelete+0x28>
	__asm volatile
 801313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	60bb      	str	r3, [r7, #8]
}
 8013150:	bf00      	nop
 8013152:	e7fe      	b.n	8013152 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f000 f935 	bl	80133c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013160:	2b00      	cmp	r3, #0
 8013162:	d102      	bne.n	801316a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8013164:	68f8      	ldr	r0, [r7, #12]
 8013166:	f001 ffc3 	bl	80150f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801316a:	bf00      	nop
 801316c:	3710      	adds	r7, #16
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013172:	b480      	push	{r7}
 8013174:	b085      	sub	sp, #20
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801317e:	2b00      	cmp	r3, #0
 8013180:	d006      	beq.n	8013190 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f1c3 0307 	rsb	r3, r3, #7
 801318c:	60fb      	str	r3, [r7, #12]
 801318e:	e001      	b.n	8013194 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013190:	2300      	movs	r3, #0
 8013192:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013194:	68fb      	ldr	r3, [r7, #12]
	}
 8013196:	4618      	mov	r0, r3
 8013198:	3714      	adds	r7, #20
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b086      	sub	sp, #24
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	60f8      	str	r0, [r7, #12]
 80131aa:	60b9      	str	r1, [r7, #8]
 80131ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80131ae:	2300      	movs	r3, #0
 80131b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d10d      	bne.n	80131dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d14d      	bne.n	8013264 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	689b      	ldr	r3, [r3, #8]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f001 f8ff 	bl	80143d0 <xTaskPriorityDisinherit>
 80131d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2200      	movs	r2, #0
 80131d8:	609a      	str	r2, [r3, #8]
 80131da:	e043      	b.n	8013264 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d119      	bne.n	8013216 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	6858      	ldr	r0, [r3, #4]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131ea:	461a      	mov	r2, r3
 80131ec:	68b9      	ldr	r1, [r7, #8]
 80131ee:	f002 f8c7 	bl	8015380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	685a      	ldr	r2, [r3, #4]
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131fa:	441a      	add	r2, r3
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	685a      	ldr	r2, [r3, #4]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	429a      	cmp	r2, r3
 801320a:	d32b      	bcc.n	8013264 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	605a      	str	r2, [r3, #4]
 8013214:	e026      	b.n	8013264 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	68d8      	ldr	r0, [r3, #12]
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801321e:	461a      	mov	r2, r3
 8013220:	68b9      	ldr	r1, [r7, #8]
 8013222:	f002 f8ad 	bl	8015380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	68da      	ldr	r2, [r3, #12]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801322e:	425b      	negs	r3, r3
 8013230:	441a      	add	r2, r3
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	68da      	ldr	r2, [r3, #12]
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	429a      	cmp	r2, r3
 8013240:	d207      	bcs.n	8013252 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	689a      	ldr	r2, [r3, #8]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801324a:	425b      	negs	r3, r3
 801324c:	441a      	add	r2, r3
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b02      	cmp	r3, #2
 8013256:	d105      	bne.n	8013264 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	3b01      	subs	r3, #1
 8013262:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	1c5a      	adds	r2, r3, #1
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801326c:	697b      	ldr	r3, [r7, #20]
}
 801326e:	4618      	mov	r0, r3
 8013270:	3718      	adds	r7, #24
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b082      	sub	sp, #8
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
 801327e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013284:	2b00      	cmp	r3, #0
 8013286:	d018      	beq.n	80132ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	68da      	ldr	r2, [r3, #12]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013290:	441a      	add	r2, r3
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68da      	ldr	r2, [r3, #12]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	689b      	ldr	r3, [r3, #8]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d303      	bcc.n	80132aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681a      	ldr	r2, [r3, #0]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	68d9      	ldr	r1, [r3, #12]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132b2:	461a      	mov	r2, r3
 80132b4:	6838      	ldr	r0, [r7, #0]
 80132b6:	f002 f863 	bl	8015380 <memcpy>
	}
}
 80132ba:	bf00      	nop
 80132bc:	3708      	adds	r7, #8
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}

080132c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80132c2:	b580      	push	{r7, lr}
 80132c4:	b084      	sub	sp, #16
 80132c6:	af00      	add	r7, sp, #0
 80132c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80132ca:	f001 fd23 	bl	8014d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80132d6:	e011      	b.n	80132fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d012      	beq.n	8013306 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	3324      	adds	r3, #36	; 0x24
 80132e4:	4618      	mov	r0, r3
 80132e6:	f000 fe23 	bl	8013f30 <xTaskRemoveFromEventList>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d001      	beq.n	80132f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80132f0:	f000 fef8 	bl	80140e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80132f4:	7bfb      	ldrb	r3, [r7, #15]
 80132f6:	3b01      	subs	r3, #1
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80132fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013300:	2b00      	cmp	r3, #0
 8013302:	dce9      	bgt.n	80132d8 <prvUnlockQueue+0x16>
 8013304:	e000      	b.n	8013308 <prvUnlockQueue+0x46>
					break;
 8013306:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	22ff      	movs	r2, #255	; 0xff
 801330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013310:	f001 fd30 	bl	8014d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013314:	f001 fcfe 	bl	8014d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801331e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013320:	e011      	b.n	8013346 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	691b      	ldr	r3, [r3, #16]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d012      	beq.n	8013350 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	3310      	adds	r3, #16
 801332e:	4618      	mov	r0, r3
 8013330:	f000 fdfe 	bl	8013f30 <xTaskRemoveFromEventList>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d001      	beq.n	801333e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801333a:	f000 fed3 	bl	80140e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801333e:	7bbb      	ldrb	r3, [r7, #14]
 8013340:	3b01      	subs	r3, #1
 8013342:	b2db      	uxtb	r3, r3
 8013344:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801334a:	2b00      	cmp	r3, #0
 801334c:	dce9      	bgt.n	8013322 <prvUnlockQueue+0x60>
 801334e:	e000      	b.n	8013352 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013350:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	22ff      	movs	r2, #255	; 0xff
 8013356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801335a:	f001 fd0b 	bl	8014d74 <vPortExitCritical>
}
 801335e:	bf00      	nop
 8013360:	3710      	adds	r7, #16
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013366:	b580      	push	{r7, lr}
 8013368:	b084      	sub	sp, #16
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801336e:	f001 fcd1 	bl	8014d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013376:	2b00      	cmp	r3, #0
 8013378:	d102      	bne.n	8013380 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801337a:	2301      	movs	r3, #1
 801337c:	60fb      	str	r3, [r7, #12]
 801337e:	e001      	b.n	8013384 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013380:	2300      	movs	r3, #0
 8013382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013384:	f001 fcf6 	bl	8014d74 <vPortExitCritical>

	return xReturn;
 8013388:	68fb      	ldr	r3, [r7, #12]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b084      	sub	sp, #16
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801339a:	f001 fcbb 	bl	8014d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d102      	bne.n	80133b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80133aa:	2301      	movs	r3, #1
 80133ac:	60fb      	str	r3, [r7, #12]
 80133ae:	e001      	b.n	80133b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80133b0:	2300      	movs	r3, #0
 80133b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80133b4:	f001 fcde 	bl	8014d74 <vPortExitCritical>

	return xReturn;
 80133b8:	68fb      	ldr	r3, [r7, #12]
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	3710      	adds	r7, #16
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
	...

080133c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80133c4:	b480      	push	{r7}
 80133c6:	b085      	sub	sp, #20
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80133cc:	2300      	movs	r3, #0
 80133ce:	60fb      	str	r3, [r7, #12]
 80133d0:	e016      	b.n	8013400 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80133d2:	4a10      	ldr	r2, [pc, #64]	; (8013414 <vQueueUnregisterQueue+0x50>)
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	4413      	add	r3, r2
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d10b      	bne.n	80133fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80133e2:	4a0c      	ldr	r2, [pc, #48]	; (8013414 <vQueueUnregisterQueue+0x50>)
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2100      	movs	r1, #0
 80133e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80133ec:	4a09      	ldr	r2, [pc, #36]	; (8013414 <vQueueUnregisterQueue+0x50>)
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	00db      	lsls	r3, r3, #3
 80133f2:	4413      	add	r3, r2
 80133f4:	2200      	movs	r2, #0
 80133f6:	605a      	str	r2, [r3, #4]
				break;
 80133f8:	e006      	b.n	8013408 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	3301      	adds	r3, #1
 80133fe:	60fb      	str	r3, [r7, #12]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2b07      	cmp	r3, #7
 8013404:	d9e5      	bls.n	80133d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013406:	bf00      	nop
 8013408:	bf00      	nop
 801340a:	3714      	adds	r7, #20
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr
 8013414:	24070fac 	.word	0x24070fac

08013418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013418:	b580      	push	{r7, lr}
 801341a:	b08e      	sub	sp, #56	; 0x38
 801341c:	af04      	add	r7, sp, #16
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	607a      	str	r2, [r7, #4]
 8013424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013428:	2b00      	cmp	r3, #0
 801342a:	d10a      	bne.n	8013442 <xTaskCreateStatic+0x2a>
	__asm volatile
 801342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013430:	f383 8811 	msr	BASEPRI, r3
 8013434:	f3bf 8f6f 	isb	sy
 8013438:	f3bf 8f4f 	dsb	sy
 801343c:	623b      	str	r3, [r7, #32]
}
 801343e:	bf00      	nop
 8013440:	e7fe      	b.n	8013440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013444:	2b00      	cmp	r3, #0
 8013446:	d10a      	bne.n	801345e <xTaskCreateStatic+0x46>
	__asm volatile
 8013448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344c:	f383 8811 	msr	BASEPRI, r3
 8013450:	f3bf 8f6f 	isb	sy
 8013454:	f3bf 8f4f 	dsb	sy
 8013458:	61fb      	str	r3, [r7, #28]
}
 801345a:	bf00      	nop
 801345c:	e7fe      	b.n	801345c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801345e:	2354      	movs	r3, #84	; 0x54
 8013460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	2b54      	cmp	r3, #84	; 0x54
 8013466:	d00a      	beq.n	801347e <xTaskCreateStatic+0x66>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	61bb      	str	r3, [r7, #24]
}
 801347a:	bf00      	nop
 801347c:	e7fe      	b.n	801347c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801347e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013482:	2b00      	cmp	r3, #0
 8013484:	d01e      	beq.n	80134c4 <xTaskCreateStatic+0xac>
 8013486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013488:	2b00      	cmp	r3, #0
 801348a:	d01b      	beq.n	80134c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801348e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013494:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013498:	2202      	movs	r2, #2
 801349a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801349e:	2300      	movs	r3, #0
 80134a0:	9303      	str	r3, [sp, #12]
 80134a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a4:	9302      	str	r3, [sp, #8]
 80134a6:	f107 0314 	add.w	r3, r7, #20
 80134aa:	9301      	str	r3, [sp, #4]
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f000 f850 	bl	801355c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80134bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134be:	f000 f8d5 	bl	801366c <prvAddNewTaskToReadyList>
 80134c2:	e001      	b.n	80134c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80134c4:	2300      	movs	r3, #0
 80134c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80134c8:	697b      	ldr	r3, [r7, #20]
	}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3728      	adds	r7, #40	; 0x28
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}

080134d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80134d2:	b580      	push	{r7, lr}
 80134d4:	b08c      	sub	sp, #48	; 0x30
 80134d6:	af04      	add	r7, sp, #16
 80134d8:	60f8      	str	r0, [r7, #12]
 80134da:	60b9      	str	r1, [r7, #8]
 80134dc:	603b      	str	r3, [r7, #0]
 80134de:	4613      	mov	r3, r2
 80134e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80134e2:	88fb      	ldrh	r3, [r7, #6]
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4618      	mov	r0, r3
 80134e8:	f001 fd36 	bl	8014f58 <pvPortMalloc>
 80134ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d00e      	beq.n	8013512 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80134f4:	2054      	movs	r0, #84	; 0x54
 80134f6:	f001 fd2f 	bl	8014f58 <pvPortMalloc>
 80134fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d003      	beq.n	801350a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013502:	69fb      	ldr	r3, [r7, #28]
 8013504:	697a      	ldr	r2, [r7, #20]
 8013506:	631a      	str	r2, [r3, #48]	; 0x30
 8013508:	e005      	b.n	8013516 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801350a:	6978      	ldr	r0, [r7, #20]
 801350c:	f001 fdf0 	bl	80150f0 <vPortFree>
 8013510:	e001      	b.n	8013516 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013512:	2300      	movs	r3, #0
 8013514:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d017      	beq.n	801354c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801351c:	69fb      	ldr	r3, [r7, #28]
 801351e:	2200      	movs	r2, #0
 8013520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013524:	88fa      	ldrh	r2, [r7, #6]
 8013526:	2300      	movs	r3, #0
 8013528:	9303      	str	r3, [sp, #12]
 801352a:	69fb      	ldr	r3, [r7, #28]
 801352c:	9302      	str	r3, [sp, #8]
 801352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	68b9      	ldr	r1, [r7, #8]
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f000 f80e 	bl	801355c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013540:	69f8      	ldr	r0, [r7, #28]
 8013542:	f000 f893 	bl	801366c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013546:	2301      	movs	r3, #1
 8013548:	61bb      	str	r3, [r7, #24]
 801354a:	e002      	b.n	8013552 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801354c:	f04f 33ff 	mov.w	r3, #4294967295
 8013550:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013552:	69bb      	ldr	r3, [r7, #24]
	}
 8013554:	4618      	mov	r0, r3
 8013556:	3720      	adds	r7, #32
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b088      	sub	sp, #32
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
 8013568:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801356e:	6879      	ldr	r1, [r7, #4]
 8013570:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013574:	440b      	add	r3, r1
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	4413      	add	r3, r2
 801357a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801357c:	69bb      	ldr	r3, [r7, #24]
 801357e:	f023 0307 	bic.w	r3, r3, #7
 8013582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	f003 0307 	and.w	r3, r3, #7
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00a      	beq.n	80135a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 801358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013592:	f383 8811 	msr	BASEPRI, r3
 8013596:	f3bf 8f6f 	isb	sy
 801359a:	f3bf 8f4f 	dsb	sy
 801359e:	617b      	str	r3, [r7, #20]
}
 80135a0:	bf00      	nop
 80135a2:	e7fe      	b.n	80135a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d01f      	beq.n	80135ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135aa:	2300      	movs	r3, #0
 80135ac:	61fb      	str	r3, [r7, #28]
 80135ae:	e012      	b.n	80135d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80135b0:	68ba      	ldr	r2, [r7, #8]
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	4413      	add	r3, r2
 80135b6:	7819      	ldrb	r1, [r3, #0]
 80135b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	4413      	add	r3, r2
 80135be:	3334      	adds	r3, #52	; 0x34
 80135c0:	460a      	mov	r2, r1
 80135c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80135c4:	68ba      	ldr	r2, [r7, #8]
 80135c6:	69fb      	ldr	r3, [r7, #28]
 80135c8:	4413      	add	r3, r2
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d006      	beq.n	80135de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	3301      	adds	r3, #1
 80135d4:	61fb      	str	r3, [r7, #28]
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	2b0f      	cmp	r3, #15
 80135da:	d9e9      	bls.n	80135b0 <prvInitialiseNewTask+0x54>
 80135dc:	e000      	b.n	80135e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80135de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80135e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e2:	2200      	movs	r2, #0
 80135e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80135e8:	e003      	b.n	80135f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80135ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ec:	2200      	movs	r2, #0
 80135ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	2b06      	cmp	r3, #6
 80135f6:	d901      	bls.n	80135fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80135f8:	2306      	movs	r3, #6
 80135fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013606:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360a:	2200      	movs	r2, #0
 801360c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013610:	3304      	adds	r3, #4
 8013612:	4618      	mov	r0, r3
 8013614:	f7fe ff2a 	bl	801246c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361a:	3318      	adds	r3, #24
 801361c:	4618      	mov	r0, r3
 801361e:	f7fe ff25 	bl	801246c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	f1c3 0207 	rsb	r2, r3, #7
 801362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363a:	2200      	movs	r2, #0
 801363c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	68f9      	ldr	r1, [r7, #12]
 801364a:	69b8      	ldr	r0, [r7, #24]
 801364c:	f001 fa38 	bl	8014ac0 <pxPortInitialiseStack>
 8013650:	4602      	mov	r2, r0
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013658:	2b00      	cmp	r3, #0
 801365a:	d002      	beq.n	8013662 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013662:	bf00      	nop
 8013664:	3720      	adds	r7, #32
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
	...

0801366c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013674:	f001 fb4e 	bl	8014d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013678:	4b2a      	ldr	r3, [pc, #168]	; (8013724 <prvAddNewTaskToReadyList+0xb8>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	3301      	adds	r3, #1
 801367e:	4a29      	ldr	r2, [pc, #164]	; (8013724 <prvAddNewTaskToReadyList+0xb8>)
 8013680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013682:	4b29      	ldr	r3, [pc, #164]	; (8013728 <prvAddNewTaskToReadyList+0xbc>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d109      	bne.n	801369e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801368a:	4a27      	ldr	r2, [pc, #156]	; (8013728 <prvAddNewTaskToReadyList+0xbc>)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013690:	4b24      	ldr	r3, [pc, #144]	; (8013724 <prvAddNewTaskToReadyList+0xb8>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d110      	bne.n	80136ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013698:	f000 fd48 	bl	801412c <prvInitialiseTaskLists>
 801369c:	e00d      	b.n	80136ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801369e:	4b23      	ldr	r3, [pc, #140]	; (801372c <prvAddNewTaskToReadyList+0xc0>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d109      	bne.n	80136ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80136a6:	4b20      	ldr	r3, [pc, #128]	; (8013728 <prvAddNewTaskToReadyList+0xbc>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d802      	bhi.n	80136ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80136b4:	4a1c      	ldr	r2, [pc, #112]	; (8013728 <prvAddNewTaskToReadyList+0xbc>)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80136ba:	4b1d      	ldr	r3, [pc, #116]	; (8013730 <prvAddNewTaskToReadyList+0xc4>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	3301      	adds	r3, #1
 80136c0:	4a1b      	ldr	r2, [pc, #108]	; (8013730 <prvAddNewTaskToReadyList+0xc4>)
 80136c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c8:	2201      	movs	r2, #1
 80136ca:	409a      	lsls	r2, r3
 80136cc:	4b19      	ldr	r3, [pc, #100]	; (8013734 <prvAddNewTaskToReadyList+0xc8>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4313      	orrs	r3, r2
 80136d2:	4a18      	ldr	r2, [pc, #96]	; (8013734 <prvAddNewTaskToReadyList+0xc8>)
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136da:	4613      	mov	r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	4a15      	ldr	r2, [pc, #84]	; (8013738 <prvAddNewTaskToReadyList+0xcc>)
 80136e4:	441a      	add	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	3304      	adds	r3, #4
 80136ea:	4619      	mov	r1, r3
 80136ec:	4610      	mov	r0, r2
 80136ee:	f7fe feca 	bl	8012486 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80136f2:	f001 fb3f 	bl	8014d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80136f6:	4b0d      	ldr	r3, [pc, #52]	; (801372c <prvAddNewTaskToReadyList+0xc0>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d00e      	beq.n	801371c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80136fe:	4b0a      	ldr	r3, [pc, #40]	; (8013728 <prvAddNewTaskToReadyList+0xbc>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013708:	429a      	cmp	r2, r3
 801370a:	d207      	bcs.n	801371c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801370c:	4b0b      	ldr	r3, [pc, #44]	; (801373c <prvAddNewTaskToReadyList+0xd0>)
 801370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013712:	601a      	str	r2, [r3, #0]
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801371c:	bf00      	nop
 801371e:	3708      	adds	r7, #8
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	24014a38 	.word	0x24014a38
 8013728:	24014938 	.word	0x24014938
 801372c:	24014a44 	.word	0x24014a44
 8013730:	24014a54 	.word	0x24014a54
 8013734:	24014a40 	.word	0x24014a40
 8013738:	2401493c 	.word	0x2401493c
 801373c:	e000ed04 	.word	0xe000ed04

08013740 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013748:	f001 fae4 	bl	8014d14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d102      	bne.n	8013758 <vTaskSuspend+0x18>
 8013752:	4b3c      	ldr	r3, [pc, #240]	; (8013844 <vTaskSuspend+0x104>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	e000      	b.n	801375a <vTaskSuspend+0x1a>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	3304      	adds	r3, #4
 8013760:	4618      	mov	r0, r3
 8013762:	f7fe feed 	bl	8012540 <uxListRemove>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d115      	bne.n	8013798 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013770:	4935      	ldr	r1, [pc, #212]	; (8013848 <vTaskSuspend+0x108>)
 8013772:	4613      	mov	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	440b      	add	r3, r1
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d10a      	bne.n	8013798 <vTaskSuspend+0x58>
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013786:	2201      	movs	r2, #1
 8013788:	fa02 f303 	lsl.w	r3, r2, r3
 801378c:	43da      	mvns	r2, r3
 801378e:	4b2f      	ldr	r3, [pc, #188]	; (801384c <vTaskSuspend+0x10c>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4013      	ands	r3, r2
 8013794:	4a2d      	ldr	r2, [pc, #180]	; (801384c <vTaskSuspend+0x10c>)
 8013796:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801379c:	2b00      	cmp	r3, #0
 801379e:	d004      	beq.n	80137aa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	3318      	adds	r3, #24
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7fe fecb 	bl	8012540 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	3304      	adds	r3, #4
 80137ae:	4619      	mov	r1, r3
 80137b0:	4827      	ldr	r0, [pc, #156]	; (8013850 <vTaskSuspend+0x110>)
 80137b2:	f7fe fe68 	bl	8012486 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80137bc:	b2db      	uxtb	r3, r3
 80137be:	2b01      	cmp	r3, #1
 80137c0:	d103      	bne.n	80137ca <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	2200      	movs	r2, #0
 80137c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80137ca:	f001 fad3 	bl	8014d74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80137ce:	4b21      	ldr	r3, [pc, #132]	; (8013854 <vTaskSuspend+0x114>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d005      	beq.n	80137e2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80137d6:	f001 fa9d 	bl	8014d14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80137da:	f000 fd45 	bl	8014268 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80137de:	f001 fac9 	bl	8014d74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80137e2:	4b18      	ldr	r3, [pc, #96]	; (8013844 <vTaskSuspend+0x104>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	68fa      	ldr	r2, [r7, #12]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d127      	bne.n	801383c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80137ec:	4b19      	ldr	r3, [pc, #100]	; (8013854 <vTaskSuspend+0x114>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d017      	beq.n	8013824 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80137f4:	4b18      	ldr	r3, [pc, #96]	; (8013858 <vTaskSuspend+0x118>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00a      	beq.n	8013812 <vTaskSuspend+0xd2>
	__asm volatile
 80137fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013800:	f383 8811 	msr	BASEPRI, r3
 8013804:	f3bf 8f6f 	isb	sy
 8013808:	f3bf 8f4f 	dsb	sy
 801380c:	60bb      	str	r3, [r7, #8]
}
 801380e:	bf00      	nop
 8013810:	e7fe      	b.n	8013810 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8013812:	4b12      	ldr	r3, [pc, #72]	; (801385c <vTaskSuspend+0x11c>)
 8013814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	f3bf 8f4f 	dsb	sy
 801381e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013822:	e00b      	b.n	801383c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013824:	4b0a      	ldr	r3, [pc, #40]	; (8013850 <vTaskSuspend+0x110>)
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	4b0d      	ldr	r3, [pc, #52]	; (8013860 <vTaskSuspend+0x120>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	429a      	cmp	r2, r3
 801382e:	d103      	bne.n	8013838 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8013830:	4b04      	ldr	r3, [pc, #16]	; (8013844 <vTaskSuspend+0x104>)
 8013832:	2200      	movs	r2, #0
 8013834:	601a      	str	r2, [r3, #0]
	}
 8013836:	e001      	b.n	801383c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8013838:	f000 fafa 	bl	8013e30 <vTaskSwitchContext>
	}
 801383c:	bf00      	nop
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	24014938 	.word	0x24014938
 8013848:	2401493c 	.word	0x2401493c
 801384c:	24014a40 	.word	0x24014a40
 8013850:	24014a24 	.word	0x24014a24
 8013854:	24014a44 	.word	0x24014a44
 8013858:	24014a60 	.word	0x24014a60
 801385c:	e000ed04 	.word	0xe000ed04
 8013860:	24014a38 	.word	0x24014a38

08013864 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013864:	b480      	push	{r7}
 8013866:	b087      	sub	sp, #28
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801386c:	2300      	movs	r3, #0
 801386e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d10a      	bne.n	8013890 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801387e:	f383 8811 	msr	BASEPRI, r3
 8013882:	f3bf 8f6f 	isb	sy
 8013886:	f3bf 8f4f 	dsb	sy
 801388a:	60fb      	str	r3, [r7, #12]
}
 801388c:	bf00      	nop
 801388e:	e7fe      	b.n	801388e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	695b      	ldr	r3, [r3, #20]
 8013894:	4a0a      	ldr	r2, [pc, #40]	; (80138c0 <prvTaskIsTaskSuspended+0x5c>)
 8013896:	4293      	cmp	r3, r2
 8013898:	d10a      	bne.n	80138b0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801389e:	4a09      	ldr	r2, [pc, #36]	; (80138c4 <prvTaskIsTaskSuspended+0x60>)
 80138a0:	4293      	cmp	r3, r2
 80138a2:	d005      	beq.n	80138b0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d101      	bne.n	80138b0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80138ac:	2301      	movs	r3, #1
 80138ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138b0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80138b2:	4618      	mov	r0, r3
 80138b4:	371c      	adds	r7, #28
 80138b6:	46bd      	mov	sp, r7
 80138b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop
 80138c0:	24014a24 	.word	0x24014a24
 80138c4:	240149f8 	.word	0x240149f8

080138c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d10a      	bne.n	80138f0 <vTaskResume+0x28>
	__asm volatile
 80138da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138de:	f383 8811 	msr	BASEPRI, r3
 80138e2:	f3bf 8f6f 	isb	sy
 80138e6:	f3bf 8f4f 	dsb	sy
 80138ea:	60bb      	str	r3, [r7, #8]
}
 80138ec:	bf00      	nop
 80138ee:	e7fe      	b.n	80138ee <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80138f0:	4b20      	ldr	r3, [pc, #128]	; (8013974 <vTaskResume+0xac>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d037      	beq.n	801396a <vTaskResume+0xa2>
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d034      	beq.n	801396a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8013900:	f001 fa08 	bl	8014d14 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f7ff ffad 	bl	8013864 <prvTaskIsTaskSuspended>
 801390a:	4603      	mov	r3, r0
 801390c:	2b00      	cmp	r3, #0
 801390e:	d02a      	beq.n	8013966 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	3304      	adds	r3, #4
 8013914:	4618      	mov	r0, r3
 8013916:	f7fe fe13 	bl	8012540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801391e:	2201      	movs	r2, #1
 8013920:	409a      	lsls	r2, r3
 8013922:	4b15      	ldr	r3, [pc, #84]	; (8013978 <vTaskResume+0xb0>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4313      	orrs	r3, r2
 8013928:	4a13      	ldr	r2, [pc, #76]	; (8013978 <vTaskResume+0xb0>)
 801392a:	6013      	str	r3, [r2, #0]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013930:	4613      	mov	r3, r2
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	4413      	add	r3, r2
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4a10      	ldr	r2, [pc, #64]	; (801397c <vTaskResume+0xb4>)
 801393a:	441a      	add	r2, r3
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	3304      	adds	r3, #4
 8013940:	4619      	mov	r1, r3
 8013942:	4610      	mov	r0, r2
 8013944:	f7fe fd9f 	bl	8012486 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801394c:	4b09      	ldr	r3, [pc, #36]	; (8013974 <vTaskResume+0xac>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013952:	429a      	cmp	r2, r3
 8013954:	d307      	bcc.n	8013966 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013956:	4b0a      	ldr	r3, [pc, #40]	; (8013980 <vTaskResume+0xb8>)
 8013958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	f3bf 8f4f 	dsb	sy
 8013962:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013966:	f001 fa05 	bl	8014d74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801396a:	bf00      	nop
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	24014938 	.word	0x24014938
 8013978:	24014a40 	.word	0x24014a40
 801397c:	2401493c 	.word	0x2401493c
 8013980:	e000ed04 	.word	0xe000ed04

08013984 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8013984:	b580      	push	{r7, lr}
 8013986:	b08a      	sub	sp, #40	; 0x28
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801398c:	2300      	movs	r3, #0
 801398e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10a      	bne.n	80139b0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 801399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801399e:	f383 8811 	msr	BASEPRI, r3
 80139a2:	f3bf 8f6f 	isb	sy
 80139a6:	f3bf 8f4f 	dsb	sy
 80139aa:	61bb      	str	r3, [r7, #24]
}
 80139ac:	bf00      	nop
 80139ae:	e7fe      	b.n	80139ae <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139b0:	f001 fa92 	bl	8014ed8 <vPortValidateInterruptPriority>
	__asm volatile
 80139b4:	f3ef 8211 	mrs	r2, BASEPRI
 80139b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139bc:	f383 8811 	msr	BASEPRI, r3
 80139c0:	f3bf 8f6f 	isb	sy
 80139c4:	f3bf 8f4f 	dsb	sy
 80139c8:	617a      	str	r2, [r7, #20]
 80139ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80139cc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139ce:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80139d0:	6a38      	ldr	r0, [r7, #32]
 80139d2:	f7ff ff47 	bl	8013864 <prvTaskIsTaskSuspended>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d02f      	beq.n	8013a3c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80139dc:	4b1d      	ldr	r3, [pc, #116]	; (8013a54 <xTaskResumeFromISR+0xd0>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d125      	bne.n	8013a30 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80139e4:	6a3b      	ldr	r3, [r7, #32]
 80139e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139e8:	4b1b      	ldr	r3, [pc, #108]	; (8013a58 <xTaskResumeFromISR+0xd4>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d301      	bcc.n	80139f6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80139f2:	2301      	movs	r3, #1
 80139f4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	3304      	adds	r3, #4
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fe fda0 	bl	8012540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013a00:	6a3b      	ldr	r3, [r7, #32]
 8013a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a04:	2201      	movs	r2, #1
 8013a06:	409a      	lsls	r2, r3
 8013a08:	4b14      	ldr	r3, [pc, #80]	; (8013a5c <xTaskResumeFromISR+0xd8>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	4313      	orrs	r3, r2
 8013a0e:	4a13      	ldr	r2, [pc, #76]	; (8013a5c <xTaskResumeFromISR+0xd8>)
 8013a10:	6013      	str	r3, [r2, #0]
 8013a12:	6a3b      	ldr	r3, [r7, #32]
 8013a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a16:	4613      	mov	r3, r2
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	4413      	add	r3, r2
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	4a10      	ldr	r2, [pc, #64]	; (8013a60 <xTaskResumeFromISR+0xdc>)
 8013a20:	441a      	add	r2, r3
 8013a22:	6a3b      	ldr	r3, [r7, #32]
 8013a24:	3304      	adds	r3, #4
 8013a26:	4619      	mov	r1, r3
 8013a28:	4610      	mov	r0, r2
 8013a2a:	f7fe fd2c 	bl	8012486 <vListInsertEnd>
 8013a2e:	e005      	b.n	8013a3c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	3318      	adds	r3, #24
 8013a34:	4619      	mov	r1, r3
 8013a36:	480b      	ldr	r0, [pc, #44]	; (8013a64 <xTaskResumeFromISR+0xe0>)
 8013a38:	f7fe fd25 	bl	8012486 <vListInsertEnd>
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f383 8811 	msr	BASEPRI, r3
}
 8013a46:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8013a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3728      	adds	r7, #40	; 0x28
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	24014a60 	.word	0x24014a60
 8013a58:	24014938 	.word	0x24014938
 8013a5c:	24014a40 	.word	0x24014a40
 8013a60:	2401493c 	.word	0x2401493c
 8013a64:	240149f8 	.word	0x240149f8

08013a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b08a      	sub	sp, #40	; 0x28
 8013a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a76:	463a      	mov	r2, r7
 8013a78:	1d39      	adds	r1, r7, #4
 8013a7a:	f107 0308 	add.w	r3, r7, #8
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7ec ff04 	bl	800088c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a84:	6839      	ldr	r1, [r7, #0]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	68ba      	ldr	r2, [r7, #8]
 8013a8a:	9202      	str	r2, [sp, #8]
 8013a8c:	9301      	str	r3, [sp, #4]
 8013a8e:	2300      	movs	r3, #0
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	2300      	movs	r3, #0
 8013a94:	460a      	mov	r2, r1
 8013a96:	491e      	ldr	r1, [pc, #120]	; (8013b10 <vTaskStartScheduler+0xa8>)
 8013a98:	481e      	ldr	r0, [pc, #120]	; (8013b14 <vTaskStartScheduler+0xac>)
 8013a9a:	f7ff fcbd 	bl	8013418 <xTaskCreateStatic>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	4a1d      	ldr	r2, [pc, #116]	; (8013b18 <vTaskStartScheduler+0xb0>)
 8013aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013aa4:	4b1c      	ldr	r3, [pc, #112]	; (8013b18 <vTaskStartScheduler+0xb0>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d002      	beq.n	8013ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013aac:	2301      	movs	r3, #1
 8013aae:	617b      	str	r3, [r7, #20]
 8013ab0:	e001      	b.n	8013ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	2b01      	cmp	r3, #1
 8013aba:	d116      	bne.n	8013aea <vTaskStartScheduler+0x82>
	__asm volatile
 8013abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac0:	f383 8811 	msr	BASEPRI, r3
 8013ac4:	f3bf 8f6f 	isb	sy
 8013ac8:	f3bf 8f4f 	dsb	sy
 8013acc:	613b      	str	r3, [r7, #16]
}
 8013ace:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ad0:	4b12      	ldr	r3, [pc, #72]	; (8013b1c <vTaskStartScheduler+0xb4>)
 8013ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013ad8:	4b11      	ldr	r3, [pc, #68]	; (8013b20 <vTaskStartScheduler+0xb8>)
 8013ada:	2201      	movs	r2, #1
 8013adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013ade:	4b11      	ldr	r3, [pc, #68]	; (8013b24 <vTaskStartScheduler+0xbc>)
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013ae4:	f001 f874 	bl	8014bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013ae8:	e00e      	b.n	8013b08 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af0:	d10a      	bne.n	8013b08 <vTaskStartScheduler+0xa0>
	__asm volatile
 8013af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af6:	f383 8811 	msr	BASEPRI, r3
 8013afa:	f3bf 8f6f 	isb	sy
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	60fb      	str	r3, [r7, #12]
}
 8013b04:	bf00      	nop
 8013b06:	e7fe      	b.n	8013b06 <vTaskStartScheduler+0x9e>
}
 8013b08:	bf00      	nop
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	08015cd8 	.word	0x08015cd8
 8013b14:	080140fd 	.word	0x080140fd
 8013b18:	24014a5c 	.word	0x24014a5c
 8013b1c:	24014a58 	.word	0x24014a58
 8013b20:	24014a44 	.word	0x24014a44
 8013b24:	24014a3c 	.word	0x24014a3c

08013b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013b2c:	4b04      	ldr	r3, [pc, #16]	; (8013b40 <vTaskSuspendAll+0x18>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	3301      	adds	r3, #1
 8013b32:	4a03      	ldr	r2, [pc, #12]	; (8013b40 <vTaskSuspendAll+0x18>)
 8013b34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013b36:	bf00      	nop
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr
 8013b40:	24014a60 	.word	0x24014a60

08013b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b52:	4b41      	ldr	r3, [pc, #260]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d10a      	bne.n	8013b70 <xTaskResumeAll+0x2c>
	__asm volatile
 8013b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5e:	f383 8811 	msr	BASEPRI, r3
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	603b      	str	r3, [r7, #0]
}
 8013b6c:	bf00      	nop
 8013b6e:	e7fe      	b.n	8013b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b70:	f001 f8d0 	bl	8014d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b74:	4b38      	ldr	r3, [pc, #224]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	4a37      	ldr	r2, [pc, #220]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b7e:	4b36      	ldr	r3, [pc, #216]	; (8013c58 <xTaskResumeAll+0x114>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d161      	bne.n	8013c4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013b86:	4b35      	ldr	r3, [pc, #212]	; (8013c5c <xTaskResumeAll+0x118>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d05d      	beq.n	8013c4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b8e:	e02e      	b.n	8013bee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b90:	4b33      	ldr	r3, [pc, #204]	; (8013c60 <xTaskResumeAll+0x11c>)
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	3318      	adds	r3, #24
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7fe fccf 	bl	8012540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	3304      	adds	r3, #4
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fe fcca 	bl	8012540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	409a      	lsls	r2, r3
 8013bb4:	4b2b      	ldr	r3, [pc, #172]	; (8013c64 <xTaskResumeAll+0x120>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4313      	orrs	r3, r2
 8013bba:	4a2a      	ldr	r2, [pc, #168]	; (8013c64 <xTaskResumeAll+0x120>)
 8013bbc:	6013      	str	r3, [r2, #0]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	4413      	add	r3, r2
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	4a27      	ldr	r2, [pc, #156]	; (8013c68 <xTaskResumeAll+0x124>)
 8013bcc:	441a      	add	r2, r3
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	3304      	adds	r3, #4
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	4610      	mov	r0, r2
 8013bd6:	f7fe fc56 	bl	8012486 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bde:	4b23      	ldr	r3, [pc, #140]	; (8013c6c <xTaskResumeAll+0x128>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d302      	bcc.n	8013bee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013be8:	4b21      	ldr	r3, [pc, #132]	; (8013c70 <xTaskResumeAll+0x12c>)
 8013bea:	2201      	movs	r2, #1
 8013bec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bee:	4b1c      	ldr	r3, [pc, #112]	; (8013c60 <xTaskResumeAll+0x11c>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d1cc      	bne.n	8013b90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d001      	beq.n	8013c00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013bfc:	f000 fb34 	bl	8014268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013c00:	4b1c      	ldr	r3, [pc, #112]	; (8013c74 <xTaskResumeAll+0x130>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d010      	beq.n	8013c2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c0c:	f000 f858 	bl	8013cc0 <xTaskIncrementTick>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d002      	beq.n	8013c1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013c16:	4b16      	ldr	r3, [pc, #88]	; (8013c70 <xTaskResumeAll+0x12c>)
 8013c18:	2201      	movs	r2, #1
 8013c1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1f1      	bne.n	8013c0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8013c28:	4b12      	ldr	r3, [pc, #72]	; (8013c74 <xTaskResumeAll+0x130>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c2e:	4b10      	ldr	r3, [pc, #64]	; (8013c70 <xTaskResumeAll+0x12c>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d009      	beq.n	8013c4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c36:	2301      	movs	r3, #1
 8013c38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c3a:	4b0f      	ldr	r3, [pc, #60]	; (8013c78 <xTaskResumeAll+0x134>)
 8013c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	f3bf 8f4f 	dsb	sy
 8013c46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c4a:	f001 f893 	bl	8014d74 <vPortExitCritical>

	return xAlreadyYielded;
 8013c4e:	68bb      	ldr	r3, [r7, #8]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3710      	adds	r7, #16
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	24014a60 	.word	0x24014a60
 8013c5c:	24014a38 	.word	0x24014a38
 8013c60:	240149f8 	.word	0x240149f8
 8013c64:	24014a40 	.word	0x24014a40
 8013c68:	2401493c 	.word	0x2401493c
 8013c6c:	24014938 	.word	0x24014938
 8013c70:	24014a4c 	.word	0x24014a4c
 8013c74:	24014a48 	.word	0x24014a48
 8013c78:	e000ed04 	.word	0xe000ed04

08013c7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013c82:	4b05      	ldr	r3, [pc, #20]	; (8013c98 <xTaskGetTickCount+0x1c>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013c88:	687b      	ldr	r3, [r7, #4]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	370c      	adds	r7, #12
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	24014a3c 	.word	0x24014a3c

08013c9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ca2:	f001 f919 	bl	8014ed8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013caa:	4b04      	ldr	r3, [pc, #16]	; (8013cbc <xTaskGetTickCountFromISR+0x20>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cb0:	683b      	ldr	r3, [r7, #0]
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	24014a3c 	.word	0x24014a3c

08013cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b086      	sub	sp, #24
 8013cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cca:	4b4e      	ldr	r3, [pc, #312]	; (8013e04 <xTaskIncrementTick+0x144>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	f040 808e 	bne.w	8013df0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013cd4:	4b4c      	ldr	r3, [pc, #304]	; (8013e08 <xTaskIncrementTick+0x148>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013cdc:	4a4a      	ldr	r2, [pc, #296]	; (8013e08 <xTaskIncrementTick+0x148>)
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d120      	bne.n	8013d2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013ce8:	4b48      	ldr	r3, [pc, #288]	; (8013e0c <xTaskIncrementTick+0x14c>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00a      	beq.n	8013d08 <xTaskIncrementTick+0x48>
	__asm volatile
 8013cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf6:	f383 8811 	msr	BASEPRI, r3
 8013cfa:	f3bf 8f6f 	isb	sy
 8013cfe:	f3bf 8f4f 	dsb	sy
 8013d02:	603b      	str	r3, [r7, #0]
}
 8013d04:	bf00      	nop
 8013d06:	e7fe      	b.n	8013d06 <xTaskIncrementTick+0x46>
 8013d08:	4b40      	ldr	r3, [pc, #256]	; (8013e0c <xTaskIncrementTick+0x14c>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	60fb      	str	r3, [r7, #12]
 8013d0e:	4b40      	ldr	r3, [pc, #256]	; (8013e10 <xTaskIncrementTick+0x150>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4a3e      	ldr	r2, [pc, #248]	; (8013e0c <xTaskIncrementTick+0x14c>)
 8013d14:	6013      	str	r3, [r2, #0]
 8013d16:	4a3e      	ldr	r2, [pc, #248]	; (8013e10 <xTaskIncrementTick+0x150>)
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6013      	str	r3, [r2, #0]
 8013d1c:	4b3d      	ldr	r3, [pc, #244]	; (8013e14 <xTaskIncrementTick+0x154>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	3301      	adds	r3, #1
 8013d22:	4a3c      	ldr	r2, [pc, #240]	; (8013e14 <xTaskIncrementTick+0x154>)
 8013d24:	6013      	str	r3, [r2, #0]
 8013d26:	f000 fa9f 	bl	8014268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d2a:	4b3b      	ldr	r3, [pc, #236]	; (8013e18 <xTaskIncrementTick+0x158>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	693a      	ldr	r2, [r7, #16]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d348      	bcc.n	8013dc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d34:	4b35      	ldr	r3, [pc, #212]	; (8013e0c <xTaskIncrementTick+0x14c>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d104      	bne.n	8013d48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d3e:	4b36      	ldr	r3, [pc, #216]	; (8013e18 <xTaskIncrementTick+0x158>)
 8013d40:	f04f 32ff 	mov.w	r2, #4294967295
 8013d44:	601a      	str	r2, [r3, #0]
					break;
 8013d46:	e03e      	b.n	8013dc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d48:	4b30      	ldr	r3, [pc, #192]	; (8013e0c <xTaskIncrementTick+0x14c>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d58:	693a      	ldr	r2, [r7, #16]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d203      	bcs.n	8013d68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d60:	4a2d      	ldr	r2, [pc, #180]	; (8013e18 <xTaskIncrementTick+0x158>)
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d66:	e02e      	b.n	8013dc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	3304      	adds	r3, #4
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fe fbe7 	bl	8012540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d004      	beq.n	8013d84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	3318      	adds	r3, #24
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7fe fbde 	bl	8012540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d88:	2201      	movs	r2, #1
 8013d8a:	409a      	lsls	r2, r3
 8013d8c:	4b23      	ldr	r3, [pc, #140]	; (8013e1c <xTaskIncrementTick+0x15c>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4313      	orrs	r3, r2
 8013d92:	4a22      	ldr	r2, [pc, #136]	; (8013e1c <xTaskIncrementTick+0x15c>)
 8013d94:	6013      	str	r3, [r2, #0]
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	4413      	add	r3, r2
 8013da0:	009b      	lsls	r3, r3, #2
 8013da2:	4a1f      	ldr	r2, [pc, #124]	; (8013e20 <xTaskIncrementTick+0x160>)
 8013da4:	441a      	add	r2, r3
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	3304      	adds	r3, #4
 8013daa:	4619      	mov	r1, r3
 8013dac:	4610      	mov	r0, r2
 8013dae:	f7fe fb6a 	bl	8012486 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013db6:	4b1b      	ldr	r3, [pc, #108]	; (8013e24 <xTaskIncrementTick+0x164>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d3b9      	bcc.n	8013d34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dc4:	e7b6      	b.n	8013d34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013dc6:	4b17      	ldr	r3, [pc, #92]	; (8013e24 <xTaskIncrementTick+0x164>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dcc:	4914      	ldr	r1, [pc, #80]	; (8013e20 <xTaskIncrementTick+0x160>)
 8013dce:	4613      	mov	r3, r2
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	4413      	add	r3, r2
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	440b      	add	r3, r1
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2b01      	cmp	r3, #1
 8013ddc:	d901      	bls.n	8013de2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8013dde:	2301      	movs	r3, #1
 8013de0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013de2:	4b11      	ldr	r3, [pc, #68]	; (8013e28 <xTaskIncrementTick+0x168>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d007      	beq.n	8013dfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013dea:	2301      	movs	r3, #1
 8013dec:	617b      	str	r3, [r7, #20]
 8013dee:	e004      	b.n	8013dfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013df0:	4b0e      	ldr	r3, [pc, #56]	; (8013e2c <xTaskIncrementTick+0x16c>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	3301      	adds	r3, #1
 8013df6:	4a0d      	ldr	r2, [pc, #52]	; (8013e2c <xTaskIncrementTick+0x16c>)
 8013df8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013dfa:	697b      	ldr	r3, [r7, #20]
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3718      	adds	r7, #24
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	24014a60 	.word	0x24014a60
 8013e08:	24014a3c 	.word	0x24014a3c
 8013e0c:	240149f0 	.word	0x240149f0
 8013e10:	240149f4 	.word	0x240149f4
 8013e14:	24014a50 	.word	0x24014a50
 8013e18:	24014a58 	.word	0x24014a58
 8013e1c:	24014a40 	.word	0x24014a40
 8013e20:	2401493c 	.word	0x2401493c
 8013e24:	24014938 	.word	0x24014938
 8013e28:	24014a4c 	.word	0x24014a4c
 8013e2c:	24014a48 	.word	0x24014a48

08013e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e30:	b480      	push	{r7}
 8013e32:	b087      	sub	sp, #28
 8013e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e36:	4b27      	ldr	r3, [pc, #156]	; (8013ed4 <vTaskSwitchContext+0xa4>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d003      	beq.n	8013e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e3e:	4b26      	ldr	r3, [pc, #152]	; (8013ed8 <vTaskSwitchContext+0xa8>)
 8013e40:	2201      	movs	r2, #1
 8013e42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e44:	e03f      	b.n	8013ec6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8013e46:	4b24      	ldr	r3, [pc, #144]	; (8013ed8 <vTaskSwitchContext+0xa8>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e4c:	4b23      	ldr	r3, [pc, #140]	; (8013edc <vTaskSwitchContext+0xac>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	fab3 f383 	clz	r3, r3
 8013e58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e5a:	7afb      	ldrb	r3, [r7, #11]
 8013e5c:	f1c3 031f 	rsb	r3, r3, #31
 8013e60:	617b      	str	r3, [r7, #20]
 8013e62:	491f      	ldr	r1, [pc, #124]	; (8013ee0 <vTaskSwitchContext+0xb0>)
 8013e64:	697a      	ldr	r2, [r7, #20]
 8013e66:	4613      	mov	r3, r2
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	4413      	add	r3, r2
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	440b      	add	r3, r1
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10a      	bne.n	8013e8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8013e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7a:	f383 8811 	msr	BASEPRI, r3
 8013e7e:	f3bf 8f6f 	isb	sy
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	607b      	str	r3, [r7, #4]
}
 8013e88:	bf00      	nop
 8013e8a:	e7fe      	b.n	8013e8a <vTaskSwitchContext+0x5a>
 8013e8c:	697a      	ldr	r2, [r7, #20]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4413      	add	r3, r2
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	4a12      	ldr	r2, [pc, #72]	; (8013ee0 <vTaskSwitchContext+0xb0>)
 8013e98:	4413      	add	r3, r2
 8013e9a:	613b      	str	r3, [r7, #16]
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	605a      	str	r2, [r3, #4]
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	685a      	ldr	r2, [r3, #4]
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	3308      	adds	r3, #8
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d104      	bne.n	8013ebc <vTaskSwitchContext+0x8c>
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	685a      	ldr	r2, [r3, #4]
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	605a      	str	r2, [r3, #4]
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	68db      	ldr	r3, [r3, #12]
 8013ec2:	4a08      	ldr	r2, [pc, #32]	; (8013ee4 <vTaskSwitchContext+0xb4>)
 8013ec4:	6013      	str	r3, [r2, #0]
}
 8013ec6:	bf00      	nop
 8013ec8:	371c      	adds	r7, #28
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr
 8013ed2:	bf00      	nop
 8013ed4:	24014a60 	.word	0x24014a60
 8013ed8:	24014a4c 	.word	0x24014a4c
 8013edc:	24014a40 	.word	0x24014a40
 8013ee0:	2401493c 	.word	0x2401493c
 8013ee4:	24014938 	.word	0x24014938

08013ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d10a      	bne.n	8013f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efc:	f383 8811 	msr	BASEPRI, r3
 8013f00:	f3bf 8f6f 	isb	sy
 8013f04:	f3bf 8f4f 	dsb	sy
 8013f08:	60fb      	str	r3, [r7, #12]
}
 8013f0a:	bf00      	nop
 8013f0c:	e7fe      	b.n	8013f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f0e:	4b07      	ldr	r3, [pc, #28]	; (8013f2c <vTaskPlaceOnEventList+0x44>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	3318      	adds	r3, #24
 8013f14:	4619      	mov	r1, r3
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f7fe fad9 	bl	80124ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f1c:	2101      	movs	r1, #1
 8013f1e:	6838      	ldr	r0, [r7, #0]
 8013f20:	f000 fd68 	bl	80149f4 <prvAddCurrentTaskToDelayedList>
}
 8013f24:	bf00      	nop
 8013f26:	3710      	adds	r7, #16
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	24014938 	.word	0x24014938

08013f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	68db      	ldr	r3, [r3, #12]
 8013f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d10a      	bne.n	8013f5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4a:	f383 8811 	msr	BASEPRI, r3
 8013f4e:	f3bf 8f6f 	isb	sy
 8013f52:	f3bf 8f4f 	dsb	sy
 8013f56:	60fb      	str	r3, [r7, #12]
}
 8013f58:	bf00      	nop
 8013f5a:	e7fe      	b.n	8013f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	3318      	adds	r3, #24
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fe faed 	bl	8012540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f66:	4b1d      	ldr	r3, [pc, #116]	; (8013fdc <xTaskRemoveFromEventList+0xac>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d11c      	bne.n	8013fa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	3304      	adds	r3, #4
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fe fae4 	bl	8012540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	409a      	lsls	r2, r3
 8013f80:	4b17      	ldr	r3, [pc, #92]	; (8013fe0 <xTaskRemoveFromEventList+0xb0>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4313      	orrs	r3, r2
 8013f86:	4a16      	ldr	r2, [pc, #88]	; (8013fe0 <xTaskRemoveFromEventList+0xb0>)
 8013f88:	6013      	str	r3, [r2, #0]
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f8e:	4613      	mov	r3, r2
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	4413      	add	r3, r2
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	4a13      	ldr	r2, [pc, #76]	; (8013fe4 <xTaskRemoveFromEventList+0xb4>)
 8013f98:	441a      	add	r2, r3
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	3304      	adds	r3, #4
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	4610      	mov	r0, r2
 8013fa2:	f7fe fa70 	bl	8012486 <vListInsertEnd>
 8013fa6:	e005      	b.n	8013fb4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	3318      	adds	r3, #24
 8013fac:	4619      	mov	r1, r3
 8013fae:	480e      	ldr	r0, [pc, #56]	; (8013fe8 <xTaskRemoveFromEventList+0xb8>)
 8013fb0:	f7fe fa69 	bl	8012486 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb8:	4b0c      	ldr	r3, [pc, #48]	; (8013fec <xTaskRemoveFromEventList+0xbc>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d905      	bls.n	8013fce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013fc6:	4b0a      	ldr	r3, [pc, #40]	; (8013ff0 <xTaskRemoveFromEventList+0xc0>)
 8013fc8:	2201      	movs	r2, #1
 8013fca:	601a      	str	r2, [r3, #0]
 8013fcc:	e001      	b.n	8013fd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013fd2:	697b      	ldr	r3, [r7, #20]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3718      	adds	r7, #24
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	24014a60 	.word	0x24014a60
 8013fe0:	24014a40 	.word	0x24014a40
 8013fe4:	2401493c 	.word	0x2401493c
 8013fe8:	240149f8 	.word	0x240149f8
 8013fec:	24014938 	.word	0x24014938
 8013ff0:	24014a4c 	.word	0x24014a4c

08013ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b083      	sub	sp, #12
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013ffc:	4b06      	ldr	r3, [pc, #24]	; (8014018 <vTaskInternalSetTimeOutState+0x24>)
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014004:	4b05      	ldr	r3, [pc, #20]	; (801401c <vTaskInternalSetTimeOutState+0x28>)
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	605a      	str	r2, [r3, #4]
}
 801400c:	bf00      	nop
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr
 8014018:	24014a50 	.word	0x24014a50
 801401c:	24014a3c 	.word	0x24014a3c

08014020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b088      	sub	sp, #32
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d10a      	bne.n	8014046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014034:	f383 8811 	msr	BASEPRI, r3
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	613b      	str	r3, [r7, #16]
}
 8014042:	bf00      	nop
 8014044:	e7fe      	b.n	8014044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d10a      	bne.n	8014062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014050:	f383 8811 	msr	BASEPRI, r3
 8014054:	f3bf 8f6f 	isb	sy
 8014058:	f3bf 8f4f 	dsb	sy
 801405c:	60fb      	str	r3, [r7, #12]
}
 801405e:	bf00      	nop
 8014060:	e7fe      	b.n	8014060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014062:	f000 fe57 	bl	8014d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014066:	4b1d      	ldr	r3, [pc, #116]	; (80140dc <xTaskCheckForTimeOut+0xbc>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	69ba      	ldr	r2, [r7, #24]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801407e:	d102      	bne.n	8014086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014080:	2300      	movs	r3, #0
 8014082:	61fb      	str	r3, [r7, #28]
 8014084:	e023      	b.n	80140ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	4b15      	ldr	r3, [pc, #84]	; (80140e0 <xTaskCheckForTimeOut+0xc0>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	429a      	cmp	r2, r3
 8014090:	d007      	beq.n	80140a2 <xTaskCheckForTimeOut+0x82>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	69ba      	ldr	r2, [r7, #24]
 8014098:	429a      	cmp	r2, r3
 801409a:	d302      	bcc.n	80140a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801409c:	2301      	movs	r3, #1
 801409e:	61fb      	str	r3, [r7, #28]
 80140a0:	e015      	b.n	80140ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	697a      	ldr	r2, [r7, #20]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d20b      	bcs.n	80140c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	1ad2      	subs	r2, r2, r3
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7ff ff9b 	bl	8013ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140be:	2300      	movs	r3, #0
 80140c0:	61fb      	str	r3, [r7, #28]
 80140c2:	e004      	b.n	80140ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	2200      	movs	r2, #0
 80140c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140ca:	2301      	movs	r3, #1
 80140cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140ce:	f000 fe51 	bl	8014d74 <vPortExitCritical>

	return xReturn;
 80140d2:	69fb      	ldr	r3, [r7, #28]
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3720      	adds	r7, #32
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	24014a3c 	.word	0x24014a3c
 80140e0:	24014a50 	.word	0x24014a50

080140e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80140e4:	b480      	push	{r7}
 80140e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80140e8:	4b03      	ldr	r3, [pc, #12]	; (80140f8 <vTaskMissedYield+0x14>)
 80140ea:	2201      	movs	r2, #1
 80140ec:	601a      	str	r2, [r3, #0]
}
 80140ee:	bf00      	nop
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr
 80140f8:	24014a4c 	.word	0x24014a4c

080140fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014104:	f000 f852 	bl	80141ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014108:	4b06      	ldr	r3, [pc, #24]	; (8014124 <prvIdleTask+0x28>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	2b01      	cmp	r3, #1
 801410e:	d9f9      	bls.n	8014104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014110:	4b05      	ldr	r3, [pc, #20]	; (8014128 <prvIdleTask+0x2c>)
 8014112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014116:	601a      	str	r2, [r3, #0]
 8014118:	f3bf 8f4f 	dsb	sy
 801411c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014120:	e7f0      	b.n	8014104 <prvIdleTask+0x8>
 8014122:	bf00      	nop
 8014124:	2401493c 	.word	0x2401493c
 8014128:	e000ed04 	.word	0xe000ed04

0801412c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014132:	2300      	movs	r3, #0
 8014134:	607b      	str	r3, [r7, #4]
 8014136:	e00c      	b.n	8014152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	4613      	mov	r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	4413      	add	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	4a12      	ldr	r2, [pc, #72]	; (801418c <prvInitialiseTaskLists+0x60>)
 8014144:	4413      	add	r3, r2
 8014146:	4618      	mov	r0, r3
 8014148:	f7fe f970 	bl	801242c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	3301      	adds	r3, #1
 8014150:	607b      	str	r3, [r7, #4]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b06      	cmp	r3, #6
 8014156:	d9ef      	bls.n	8014138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014158:	480d      	ldr	r0, [pc, #52]	; (8014190 <prvInitialiseTaskLists+0x64>)
 801415a:	f7fe f967 	bl	801242c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801415e:	480d      	ldr	r0, [pc, #52]	; (8014194 <prvInitialiseTaskLists+0x68>)
 8014160:	f7fe f964 	bl	801242c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014164:	480c      	ldr	r0, [pc, #48]	; (8014198 <prvInitialiseTaskLists+0x6c>)
 8014166:	f7fe f961 	bl	801242c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801416a:	480c      	ldr	r0, [pc, #48]	; (801419c <prvInitialiseTaskLists+0x70>)
 801416c:	f7fe f95e 	bl	801242c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014170:	480b      	ldr	r0, [pc, #44]	; (80141a0 <prvInitialiseTaskLists+0x74>)
 8014172:	f7fe f95b 	bl	801242c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014176:	4b0b      	ldr	r3, [pc, #44]	; (80141a4 <prvInitialiseTaskLists+0x78>)
 8014178:	4a05      	ldr	r2, [pc, #20]	; (8014190 <prvInitialiseTaskLists+0x64>)
 801417a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801417c:	4b0a      	ldr	r3, [pc, #40]	; (80141a8 <prvInitialiseTaskLists+0x7c>)
 801417e:	4a05      	ldr	r2, [pc, #20]	; (8014194 <prvInitialiseTaskLists+0x68>)
 8014180:	601a      	str	r2, [r3, #0]
}
 8014182:	bf00      	nop
 8014184:	3708      	adds	r7, #8
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	2401493c 	.word	0x2401493c
 8014190:	240149c8 	.word	0x240149c8
 8014194:	240149dc 	.word	0x240149dc
 8014198:	240149f8 	.word	0x240149f8
 801419c:	24014a0c 	.word	0x24014a0c
 80141a0:	24014a24 	.word	0x24014a24
 80141a4:	240149f0 	.word	0x240149f0
 80141a8:	240149f4 	.word	0x240149f4

080141ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141b2:	e019      	b.n	80141e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141b4:	f000 fdae 	bl	8014d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141b8:	4b10      	ldr	r3, [pc, #64]	; (80141fc <prvCheckTasksWaitingTermination+0x50>)
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3304      	adds	r3, #4
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fe f9bb 	bl	8012540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141ca:	4b0d      	ldr	r3, [pc, #52]	; (8014200 <prvCheckTasksWaitingTermination+0x54>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	3b01      	subs	r3, #1
 80141d0:	4a0b      	ldr	r2, [pc, #44]	; (8014200 <prvCheckTasksWaitingTermination+0x54>)
 80141d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141d4:	4b0b      	ldr	r3, [pc, #44]	; (8014204 <prvCheckTasksWaitingTermination+0x58>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	3b01      	subs	r3, #1
 80141da:	4a0a      	ldr	r2, [pc, #40]	; (8014204 <prvCheckTasksWaitingTermination+0x58>)
 80141dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80141de:	f000 fdc9 	bl	8014d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f000 f810 	bl	8014208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141e8:	4b06      	ldr	r3, [pc, #24]	; (8014204 <prvCheckTasksWaitingTermination+0x58>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d1e1      	bne.n	80141b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141f0:	bf00      	nop
 80141f2:	bf00      	nop
 80141f4:	3708      	adds	r7, #8
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	24014a0c 	.word	0x24014a0c
 8014200:	24014a38 	.word	0x24014a38
 8014204:	24014a20 	.word	0x24014a20

08014208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014208:	b580      	push	{r7, lr}
 801420a:	b084      	sub	sp, #16
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014216:	2b00      	cmp	r3, #0
 8014218:	d108      	bne.n	801422c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801421e:	4618      	mov	r0, r3
 8014220:	f000 ff66 	bl	80150f0 <vPortFree>
				vPortFree( pxTCB );
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f000 ff63 	bl	80150f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801422a:	e018      	b.n	801425e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014232:	2b01      	cmp	r3, #1
 8014234:	d103      	bne.n	801423e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 ff5a 	bl	80150f0 <vPortFree>
	}
 801423c:	e00f      	b.n	801425e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014244:	2b02      	cmp	r3, #2
 8014246:	d00a      	beq.n	801425e <prvDeleteTCB+0x56>
	__asm volatile
 8014248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424c:	f383 8811 	msr	BASEPRI, r3
 8014250:	f3bf 8f6f 	isb	sy
 8014254:	f3bf 8f4f 	dsb	sy
 8014258:	60fb      	str	r3, [r7, #12]
}
 801425a:	bf00      	nop
 801425c:	e7fe      	b.n	801425c <prvDeleteTCB+0x54>
	}
 801425e:	bf00      	nop
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
	...

08014268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014268:	b480      	push	{r7}
 801426a:	b083      	sub	sp, #12
 801426c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801426e:	4b0c      	ldr	r3, [pc, #48]	; (80142a0 <prvResetNextTaskUnblockTime+0x38>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d104      	bne.n	8014282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014278:	4b0a      	ldr	r3, [pc, #40]	; (80142a4 <prvResetNextTaskUnblockTime+0x3c>)
 801427a:	f04f 32ff 	mov.w	r2, #4294967295
 801427e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014280:	e008      	b.n	8014294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014282:	4b07      	ldr	r3, [pc, #28]	; (80142a0 <prvResetNextTaskUnblockTime+0x38>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	68db      	ldr	r3, [r3, #12]
 801428a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	4a04      	ldr	r2, [pc, #16]	; (80142a4 <prvResetNextTaskUnblockTime+0x3c>)
 8014292:	6013      	str	r3, [r2, #0]
}
 8014294:	bf00      	nop
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr
 80142a0:	240149f0 	.word	0x240149f0
 80142a4:	24014a58 	.word	0x24014a58

080142a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80142ae:	4b0b      	ldr	r3, [pc, #44]	; (80142dc <xTaskGetSchedulerState+0x34>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d102      	bne.n	80142bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142b6:	2301      	movs	r3, #1
 80142b8:	607b      	str	r3, [r7, #4]
 80142ba:	e008      	b.n	80142ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142bc:	4b08      	ldr	r3, [pc, #32]	; (80142e0 <xTaskGetSchedulerState+0x38>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d102      	bne.n	80142ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142c4:	2302      	movs	r3, #2
 80142c6:	607b      	str	r3, [r7, #4]
 80142c8:	e001      	b.n	80142ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142ca:	2300      	movs	r3, #0
 80142cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142ce:	687b      	ldr	r3, [r7, #4]
	}
 80142d0:	4618      	mov	r0, r3
 80142d2:	370c      	adds	r7, #12
 80142d4:	46bd      	mov	sp, r7
 80142d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142da:	4770      	bx	lr
 80142dc:	24014a44 	.word	0x24014a44
 80142e0:	24014a60 	.word	0x24014a60

080142e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80142f0:	2300      	movs	r3, #0
 80142f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d05e      	beq.n	80143b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142fe:	4b31      	ldr	r3, [pc, #196]	; (80143c4 <xTaskPriorityInherit+0xe0>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014304:	429a      	cmp	r2, r3
 8014306:	d24e      	bcs.n	80143a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	699b      	ldr	r3, [r3, #24]
 801430c:	2b00      	cmp	r3, #0
 801430e:	db06      	blt.n	801431e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014310:	4b2c      	ldr	r3, [pc, #176]	; (80143c4 <xTaskPriorityInherit+0xe0>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014316:	f1c3 0207 	rsb	r2, r3, #7
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	6959      	ldr	r1, [r3, #20]
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014326:	4613      	mov	r3, r2
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	4413      	add	r3, r2
 801432c:	009b      	lsls	r3, r3, #2
 801432e:	4a26      	ldr	r2, [pc, #152]	; (80143c8 <xTaskPriorityInherit+0xe4>)
 8014330:	4413      	add	r3, r2
 8014332:	4299      	cmp	r1, r3
 8014334:	d12f      	bne.n	8014396 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	3304      	adds	r3, #4
 801433a:	4618      	mov	r0, r3
 801433c:	f7fe f900 	bl	8012540 <uxListRemove>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d10a      	bne.n	801435c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801434a:	2201      	movs	r2, #1
 801434c:	fa02 f303 	lsl.w	r3, r2, r3
 8014350:	43da      	mvns	r2, r3
 8014352:	4b1e      	ldr	r3, [pc, #120]	; (80143cc <xTaskPriorityInherit+0xe8>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	4013      	ands	r3, r2
 8014358:	4a1c      	ldr	r2, [pc, #112]	; (80143cc <xTaskPriorityInherit+0xe8>)
 801435a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801435c:	4b19      	ldr	r3, [pc, #100]	; (80143c4 <xTaskPriorityInherit+0xe0>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801436a:	2201      	movs	r2, #1
 801436c:	409a      	lsls	r2, r3
 801436e:	4b17      	ldr	r3, [pc, #92]	; (80143cc <xTaskPriorityInherit+0xe8>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	4313      	orrs	r3, r2
 8014374:	4a15      	ldr	r2, [pc, #84]	; (80143cc <xTaskPriorityInherit+0xe8>)
 8014376:	6013      	str	r3, [r2, #0]
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437c:	4613      	mov	r3, r2
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	4413      	add	r3, r2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	4a10      	ldr	r2, [pc, #64]	; (80143c8 <xTaskPriorityInherit+0xe4>)
 8014386:	441a      	add	r2, r3
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	3304      	adds	r3, #4
 801438c:	4619      	mov	r1, r3
 801438e:	4610      	mov	r0, r2
 8014390:	f7fe f879 	bl	8012486 <vListInsertEnd>
 8014394:	e004      	b.n	80143a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014396:	4b0b      	ldr	r3, [pc, #44]	; (80143c4 <xTaskPriorityInherit+0xe0>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80143a0:	2301      	movs	r3, #1
 80143a2:	60fb      	str	r3, [r7, #12]
 80143a4:	e008      	b.n	80143b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143aa:	4b06      	ldr	r3, [pc, #24]	; (80143c4 <xTaskPriorityInherit+0xe0>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d201      	bcs.n	80143b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80143b4:	2301      	movs	r3, #1
 80143b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80143b8:	68fb      	ldr	r3, [r7, #12]
	}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3710      	adds	r7, #16
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	24014938 	.word	0x24014938
 80143c8:	2401493c 	.word	0x2401493c
 80143cc:	24014a40 	.word	0x24014a40

080143d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b086      	sub	sp, #24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80143dc:	2300      	movs	r3, #0
 80143de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d06e      	beq.n	80144c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80143e6:	4b3a      	ldr	r3, [pc, #232]	; (80144d0 <xTaskPriorityDisinherit+0x100>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	693a      	ldr	r2, [r7, #16]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d00a      	beq.n	8014406 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80143f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f4:	f383 8811 	msr	BASEPRI, r3
 80143f8:	f3bf 8f6f 	isb	sy
 80143fc:	f3bf 8f4f 	dsb	sy
 8014400:	60fb      	str	r3, [r7, #12]
}
 8014402:	bf00      	nop
 8014404:	e7fe      	b.n	8014404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801440a:	2b00      	cmp	r3, #0
 801440c:	d10a      	bne.n	8014424 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014412:	f383 8811 	msr	BASEPRI, r3
 8014416:	f3bf 8f6f 	isb	sy
 801441a:	f3bf 8f4f 	dsb	sy
 801441e:	60bb      	str	r3, [r7, #8]
}
 8014420:	bf00      	nop
 8014422:	e7fe      	b.n	8014422 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014428:	1e5a      	subs	r2, r3, #1
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014436:	429a      	cmp	r2, r3
 8014438:	d044      	beq.n	80144c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801443e:	2b00      	cmp	r3, #0
 8014440:	d140      	bne.n	80144c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	3304      	adds	r3, #4
 8014446:	4618      	mov	r0, r3
 8014448:	f7fe f87a 	bl	8012540 <uxListRemove>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d115      	bne.n	801447e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014456:	491f      	ldr	r1, [pc, #124]	; (80144d4 <xTaskPriorityDisinherit+0x104>)
 8014458:	4613      	mov	r3, r2
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	4413      	add	r3, r2
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	440b      	add	r3, r1
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d10a      	bne.n	801447e <xTaskPriorityDisinherit+0xae>
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446c:	2201      	movs	r2, #1
 801446e:	fa02 f303 	lsl.w	r3, r2, r3
 8014472:	43da      	mvns	r2, r3
 8014474:	4b18      	ldr	r3, [pc, #96]	; (80144d8 <xTaskPriorityDisinherit+0x108>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4013      	ands	r3, r2
 801447a:	4a17      	ldr	r2, [pc, #92]	; (80144d8 <xTaskPriorityDisinherit+0x108>)
 801447c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801448a:	f1c3 0207 	rsb	r2, r3, #7
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014496:	2201      	movs	r2, #1
 8014498:	409a      	lsls	r2, r3
 801449a:	4b0f      	ldr	r3, [pc, #60]	; (80144d8 <xTaskPriorityDisinherit+0x108>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	4313      	orrs	r3, r2
 80144a0:	4a0d      	ldr	r2, [pc, #52]	; (80144d8 <xTaskPriorityDisinherit+0x108>)
 80144a2:	6013      	str	r3, [r2, #0]
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144a8:	4613      	mov	r3, r2
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	4413      	add	r3, r2
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	4a08      	ldr	r2, [pc, #32]	; (80144d4 <xTaskPriorityDisinherit+0x104>)
 80144b2:	441a      	add	r2, r3
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	3304      	adds	r3, #4
 80144b8:	4619      	mov	r1, r3
 80144ba:	4610      	mov	r0, r2
 80144bc:	f7fd ffe3 	bl	8012486 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80144c0:	2301      	movs	r3, #1
 80144c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144c4:	697b      	ldr	r3, [r7, #20]
	}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3718      	adds	r7, #24
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
 80144ce:	bf00      	nop
 80144d0:	24014938 	.word	0x24014938
 80144d4:	2401493c 	.word	0x2401493c
 80144d8:	24014a40 	.word	0x24014a40

080144dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b088      	sub	sp, #32
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80144ea:	2301      	movs	r3, #1
 80144ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d077      	beq.n	80145e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80144f4:	69bb      	ldr	r3, [r7, #24]
 80144f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d10a      	bne.n	8014512 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	60fb      	str	r3, [r7, #12]
}
 801450e:	bf00      	nop
 8014510:	e7fe      	b.n	8014510 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	429a      	cmp	r2, r3
 801451a:	d902      	bls.n	8014522 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801451c:	683b      	ldr	r3, [r7, #0]
 801451e:	61fb      	str	r3, [r7, #28]
 8014520:	e002      	b.n	8014528 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014522:	69bb      	ldr	r3, [r7, #24]
 8014524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014526:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801452c:	69fa      	ldr	r2, [r7, #28]
 801452e:	429a      	cmp	r2, r3
 8014530:	d058      	beq.n	80145e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014536:	697a      	ldr	r2, [r7, #20]
 8014538:	429a      	cmp	r2, r3
 801453a:	d153      	bne.n	80145e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801453c:	4b2b      	ldr	r3, [pc, #172]	; (80145ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	69ba      	ldr	r2, [r7, #24]
 8014542:	429a      	cmp	r2, r3
 8014544:	d10a      	bne.n	801455c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8014546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801454a:	f383 8811 	msr	BASEPRI, r3
 801454e:	f3bf 8f6f 	isb	sy
 8014552:	f3bf 8f4f 	dsb	sy
 8014556:	60bb      	str	r3, [r7, #8]
}
 8014558:	bf00      	nop
 801455a:	e7fe      	b.n	801455a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801455c:	69bb      	ldr	r3, [r7, #24]
 801455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014560:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014562:	69bb      	ldr	r3, [r7, #24]
 8014564:	69fa      	ldr	r2, [r7, #28]
 8014566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	699b      	ldr	r3, [r3, #24]
 801456c:	2b00      	cmp	r3, #0
 801456e:	db04      	blt.n	801457a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	f1c3 0207 	rsb	r2, r3, #7
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801457a:	69bb      	ldr	r3, [r7, #24]
 801457c:	6959      	ldr	r1, [r3, #20]
 801457e:	693a      	ldr	r2, [r7, #16]
 8014580:	4613      	mov	r3, r2
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	4413      	add	r3, r2
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	4a19      	ldr	r2, [pc, #100]	; (80145f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801458a:	4413      	add	r3, r2
 801458c:	4299      	cmp	r1, r3
 801458e:	d129      	bne.n	80145e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	3304      	adds	r3, #4
 8014594:	4618      	mov	r0, r3
 8014596:	f7fd ffd3 	bl	8012540 <uxListRemove>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d10a      	bne.n	80145b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a4:	2201      	movs	r2, #1
 80145a6:	fa02 f303 	lsl.w	r3, r2, r3
 80145aa:	43da      	mvns	r2, r3
 80145ac:	4b11      	ldr	r3, [pc, #68]	; (80145f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	4013      	ands	r3, r2
 80145b2:	4a10      	ldr	r2, [pc, #64]	; (80145f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80145b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ba:	2201      	movs	r2, #1
 80145bc:	409a      	lsls	r2, r3
 80145be:	4b0d      	ldr	r3, [pc, #52]	; (80145f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	4313      	orrs	r3, r2
 80145c4:	4a0b      	ldr	r2, [pc, #44]	; (80145f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80145c6:	6013      	str	r3, [r2, #0]
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145cc:	4613      	mov	r3, r2
 80145ce:	009b      	lsls	r3, r3, #2
 80145d0:	4413      	add	r3, r2
 80145d2:	009b      	lsls	r3, r3, #2
 80145d4:	4a06      	ldr	r2, [pc, #24]	; (80145f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80145d6:	441a      	add	r2, r3
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	3304      	adds	r3, #4
 80145dc:	4619      	mov	r1, r3
 80145de:	4610      	mov	r0, r2
 80145e0:	f7fd ff51 	bl	8012486 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145e4:	bf00      	nop
 80145e6:	3720      	adds	r7, #32
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	24014938 	.word	0x24014938
 80145f0:	2401493c 	.word	0x2401493c
 80145f4:	24014a40 	.word	0x24014a40

080145f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80145f8:	b480      	push	{r7}
 80145fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80145fc:	4b07      	ldr	r3, [pc, #28]	; (801461c <pvTaskIncrementMutexHeldCount+0x24>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d004      	beq.n	801460e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014604:	4b05      	ldr	r3, [pc, #20]	; (801461c <pvTaskIncrementMutexHeldCount+0x24>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801460a:	3201      	adds	r2, #1
 801460c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801460e:	4b03      	ldr	r3, [pc, #12]	; (801461c <pvTaskIncrementMutexHeldCount+0x24>)
 8014610:	681b      	ldr	r3, [r3, #0]
	}
 8014612:	4618      	mov	r0, r3
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr
 801461c:	24014938 	.word	0x24014938

08014620 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
 801462c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801462e:	f000 fb71 	bl	8014d14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014632:	4b26      	ldr	r3, [pc, #152]	; (80146cc <xTaskNotifyWait+0xac>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801463a:	b2db      	uxtb	r3, r3
 801463c:	2b02      	cmp	r3, #2
 801463e:	d01a      	beq.n	8014676 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014640:	4b22      	ldr	r3, [pc, #136]	; (80146cc <xTaskNotifyWait+0xac>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014646:	68fa      	ldr	r2, [r7, #12]
 8014648:	43d2      	mvns	r2, r2
 801464a:	400a      	ands	r2, r1
 801464c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801464e:	4b1f      	ldr	r3, [pc, #124]	; (80146cc <xTaskNotifyWait+0xac>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2201      	movs	r2, #1
 8014654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00b      	beq.n	8014676 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801465e:	2101      	movs	r1, #1
 8014660:	6838      	ldr	r0, [r7, #0]
 8014662:	f000 f9c7 	bl	80149f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014666:	4b1a      	ldr	r3, [pc, #104]	; (80146d0 <xTaskNotifyWait+0xb0>)
 8014668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801466c:	601a      	str	r2, [r3, #0]
 801466e:	f3bf 8f4f 	dsb	sy
 8014672:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014676:	f000 fb7d 	bl	8014d74 <vPortExitCritical>

		taskENTER_CRITICAL();
 801467a:	f000 fb4b 	bl	8014d14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d004      	beq.n	801468e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014684:	4b11      	ldr	r3, [pc, #68]	; (80146cc <xTaskNotifyWait+0xac>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801468e:	4b0f      	ldr	r3, [pc, #60]	; (80146cc <xTaskNotifyWait+0xac>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014696:	b2db      	uxtb	r3, r3
 8014698:	2b02      	cmp	r3, #2
 801469a:	d002      	beq.n	80146a2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801469c:	2300      	movs	r3, #0
 801469e:	617b      	str	r3, [r7, #20]
 80146a0:	e008      	b.n	80146b4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80146a2:	4b0a      	ldr	r3, [pc, #40]	; (80146cc <xTaskNotifyWait+0xac>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80146a8:	68ba      	ldr	r2, [r7, #8]
 80146aa:	43d2      	mvns	r2, r2
 80146ac:	400a      	ands	r2, r1
 80146ae:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80146b0:	2301      	movs	r3, #1
 80146b2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80146b4:	4b05      	ldr	r3, [pc, #20]	; (80146cc <xTaskNotifyWait+0xac>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2200      	movs	r2, #0
 80146ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80146be:	f000 fb59 	bl	8014d74 <vPortExitCritical>

		return xReturn;
 80146c2:	697b      	ldr	r3, [r7, #20]
	}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	24014938 	.word	0x24014938
 80146d0:	e000ed04 	.word	0xe000ed04

080146d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08a      	sub	sp, #40	; 0x28
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	603b      	str	r3, [r7, #0]
 80146e0:	4613      	mov	r3, r2
 80146e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80146e4:	2301      	movs	r3, #1
 80146e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d10a      	bne.n	8014704 <xTaskGenericNotify+0x30>
	__asm volatile
 80146ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f2:	f383 8811 	msr	BASEPRI, r3
 80146f6:	f3bf 8f6f 	isb	sy
 80146fa:	f3bf 8f4f 	dsb	sy
 80146fe:	61bb      	str	r3, [r7, #24]
}
 8014700:	bf00      	nop
 8014702:	e7fe      	b.n	8014702 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014708:	f000 fb04 	bl	8014d14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d003      	beq.n	801471a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014712:	6a3b      	ldr	r3, [r7, #32]
 8014714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801471a:	6a3b      	ldr	r3, [r7, #32]
 801471c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014720:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014722:	6a3b      	ldr	r3, [r7, #32]
 8014724:	2202      	movs	r2, #2
 8014726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801472a:	79fb      	ldrb	r3, [r7, #7]
 801472c:	2b04      	cmp	r3, #4
 801472e:	d828      	bhi.n	8014782 <xTaskGenericNotify+0xae>
 8014730:	a201      	add	r2, pc, #4	; (adr r2, 8014738 <xTaskGenericNotify+0x64>)
 8014732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014736:	bf00      	nop
 8014738:	080147a3 	.word	0x080147a3
 801473c:	0801474d 	.word	0x0801474d
 8014740:	0801475b 	.word	0x0801475b
 8014744:	08014767 	.word	0x08014767
 8014748:	0801476f 	.word	0x0801476f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	431a      	orrs	r2, r3
 8014754:	6a3b      	ldr	r3, [r7, #32]
 8014756:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014758:	e026      	b.n	80147a8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801475a:	6a3b      	ldr	r3, [r7, #32]
 801475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801475e:	1c5a      	adds	r2, r3, #1
 8014760:	6a3b      	ldr	r3, [r7, #32]
 8014762:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014764:	e020      	b.n	80147a8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014766:	6a3b      	ldr	r3, [r7, #32]
 8014768:	68ba      	ldr	r2, [r7, #8]
 801476a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801476c:	e01c      	b.n	80147a8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801476e:	7ffb      	ldrb	r3, [r7, #31]
 8014770:	2b02      	cmp	r3, #2
 8014772:	d003      	beq.n	801477c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014774:	6a3b      	ldr	r3, [r7, #32]
 8014776:	68ba      	ldr	r2, [r7, #8]
 8014778:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801477a:	e015      	b.n	80147a8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 801477c:	2300      	movs	r3, #0
 801477e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014780:	e012      	b.n	80147a8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014782:	6a3b      	ldr	r3, [r7, #32]
 8014784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801478a:	d00c      	beq.n	80147a6 <xTaskGenericNotify+0xd2>
	__asm volatile
 801478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014790:	f383 8811 	msr	BASEPRI, r3
 8014794:	f3bf 8f6f 	isb	sy
 8014798:	f3bf 8f4f 	dsb	sy
 801479c:	617b      	str	r3, [r7, #20]
}
 801479e:	bf00      	nop
 80147a0:	e7fe      	b.n	80147a0 <xTaskGenericNotify+0xcc>
					break;
 80147a2:	bf00      	nop
 80147a4:	e000      	b.n	80147a8 <xTaskGenericNotify+0xd4>

					break;
 80147a6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80147a8:	7ffb      	ldrb	r3, [r7, #31]
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	d139      	bne.n	8014822 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147ae:	6a3b      	ldr	r3, [r7, #32]
 80147b0:	3304      	adds	r3, #4
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fd fec4 	bl	8012540 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80147b8:	6a3b      	ldr	r3, [r7, #32]
 80147ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147bc:	2201      	movs	r2, #1
 80147be:	409a      	lsls	r2, r3
 80147c0:	4b1b      	ldr	r3, [pc, #108]	; (8014830 <xTaskGenericNotify+0x15c>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4313      	orrs	r3, r2
 80147c6:	4a1a      	ldr	r2, [pc, #104]	; (8014830 <xTaskGenericNotify+0x15c>)
 80147c8:	6013      	str	r3, [r2, #0]
 80147ca:	6a3b      	ldr	r3, [r7, #32]
 80147cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147ce:	4613      	mov	r3, r2
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	4413      	add	r3, r2
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	4a17      	ldr	r2, [pc, #92]	; (8014834 <xTaskGenericNotify+0x160>)
 80147d8:	441a      	add	r2, r3
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	3304      	adds	r3, #4
 80147de:	4619      	mov	r1, r3
 80147e0:	4610      	mov	r0, r2
 80147e2:	f7fd fe50 	bl	8012486 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80147e6:	6a3b      	ldr	r3, [r7, #32]
 80147e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00a      	beq.n	8014804 <xTaskGenericNotify+0x130>
	__asm volatile
 80147ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f2:	f383 8811 	msr	BASEPRI, r3
 80147f6:	f3bf 8f6f 	isb	sy
 80147fa:	f3bf 8f4f 	dsb	sy
 80147fe:	613b      	str	r3, [r7, #16]
}
 8014800:	bf00      	nop
 8014802:	e7fe      	b.n	8014802 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014804:	6a3b      	ldr	r3, [r7, #32]
 8014806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014808:	4b0b      	ldr	r3, [pc, #44]	; (8014838 <xTaskGenericNotify+0x164>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801480e:	429a      	cmp	r2, r3
 8014810:	d907      	bls.n	8014822 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014812:	4b0a      	ldr	r3, [pc, #40]	; (801483c <xTaskGenericNotify+0x168>)
 8014814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014818:	601a      	str	r2, [r3, #0]
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014822:	f000 faa7 	bl	8014d74 <vPortExitCritical>

		return xReturn;
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014828:	4618      	mov	r0, r3
 801482a:	3728      	adds	r7, #40	; 0x28
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	24014a40 	.word	0x24014a40
 8014834:	2401493c 	.word	0x2401493c
 8014838:	24014938 	.word	0x24014938
 801483c:	e000ed04 	.word	0xe000ed04

08014840 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014840:	b580      	push	{r7, lr}
 8014842:	b08e      	sub	sp, #56	; 0x38
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	603b      	str	r3, [r7, #0]
 801484c:	4613      	mov	r3, r2
 801484e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014850:	2301      	movs	r3, #1
 8014852:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d10a      	bne.n	8014870 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801485e:	f383 8811 	msr	BASEPRI, r3
 8014862:	f3bf 8f6f 	isb	sy
 8014866:	f3bf 8f4f 	dsb	sy
 801486a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801486c:	bf00      	nop
 801486e:	e7fe      	b.n	801486e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014870:	f000 fb32 	bl	8014ed8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014878:	f3ef 8211 	mrs	r2, BASEPRI
 801487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014880:	f383 8811 	msr	BASEPRI, r3
 8014884:	f3bf 8f6f 	isb	sy
 8014888:	f3bf 8f4f 	dsb	sy
 801488c:	623a      	str	r2, [r7, #32]
 801488e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014890:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014892:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d003      	beq.n	80148a2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801489c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80148a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80148a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80148ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ae:	2202      	movs	r2, #2
 80148b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80148b4:	79fb      	ldrb	r3, [r7, #7]
 80148b6:	2b04      	cmp	r3, #4
 80148b8:	d828      	bhi.n	801490c <xTaskGenericNotifyFromISR+0xcc>
 80148ba:	a201      	add	r2, pc, #4	; (adr r2, 80148c0 <xTaskGenericNotifyFromISR+0x80>)
 80148bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148c0:	0801492d 	.word	0x0801492d
 80148c4:	080148d5 	.word	0x080148d5
 80148c8:	080148e3 	.word	0x080148e3
 80148cc:	080148ef 	.word	0x080148ef
 80148d0:	080148f7 	.word	0x080148f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80148d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	431a      	orrs	r2, r3
 80148dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148de:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148e0:	e027      	b.n	8014932 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80148e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148e6:	1c5a      	adds	r2, r3, #1
 80148e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148ec:	e021      	b.n	8014932 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80148ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f0:	68ba      	ldr	r2, [r7, #8]
 80148f2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80148f4:	e01d      	b.n	8014932 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80148f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80148fa:	2b02      	cmp	r3, #2
 80148fc:	d003      	beq.n	8014906 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014900:	68ba      	ldr	r2, [r7, #8]
 8014902:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014904:	e015      	b.n	8014932 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014906:	2300      	movs	r3, #0
 8014908:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801490a:	e012      	b.n	8014932 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014914:	d00c      	beq.n	8014930 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801491a:	f383 8811 	msr	BASEPRI, r3
 801491e:	f3bf 8f6f 	isb	sy
 8014922:	f3bf 8f4f 	dsb	sy
 8014926:	61bb      	str	r3, [r7, #24]
}
 8014928:	bf00      	nop
 801492a:	e7fe      	b.n	801492a <xTaskGenericNotifyFromISR+0xea>
					break;
 801492c:	bf00      	nop
 801492e:	e000      	b.n	8014932 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014930:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014936:	2b01      	cmp	r3, #1
 8014938:	d145      	bne.n	80149c6 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00a      	beq.n	8014958 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014946:	f383 8811 	msr	BASEPRI, r3
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	617b      	str	r3, [r7, #20]
}
 8014954:	bf00      	nop
 8014956:	e7fe      	b.n	8014956 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014958:	4b20      	ldr	r3, [pc, #128]	; (80149dc <xTaskGenericNotifyFromISR+0x19c>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d11c      	bne.n	801499a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	3304      	adds	r3, #4
 8014964:	4618      	mov	r0, r3
 8014966:	f7fd fdeb 	bl	8012540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801496e:	2201      	movs	r2, #1
 8014970:	409a      	lsls	r2, r3
 8014972:	4b1b      	ldr	r3, [pc, #108]	; (80149e0 <xTaskGenericNotifyFromISR+0x1a0>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	4313      	orrs	r3, r2
 8014978:	4a19      	ldr	r2, [pc, #100]	; (80149e0 <xTaskGenericNotifyFromISR+0x1a0>)
 801497a:	6013      	str	r3, [r2, #0]
 801497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014980:	4613      	mov	r3, r2
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	4413      	add	r3, r2
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	4a16      	ldr	r2, [pc, #88]	; (80149e4 <xTaskGenericNotifyFromISR+0x1a4>)
 801498a:	441a      	add	r2, r3
 801498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498e:	3304      	adds	r3, #4
 8014990:	4619      	mov	r1, r3
 8014992:	4610      	mov	r0, r2
 8014994:	f7fd fd77 	bl	8012486 <vListInsertEnd>
 8014998:	e005      	b.n	80149a6 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499c:	3318      	adds	r3, #24
 801499e:	4619      	mov	r1, r3
 80149a0:	4811      	ldr	r0, [pc, #68]	; (80149e8 <xTaskGenericNotifyFromISR+0x1a8>)
 80149a2:	f7fd fd70 	bl	8012486 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149aa:	4b10      	ldr	r3, [pc, #64]	; (80149ec <xTaskGenericNotifyFromISR+0x1ac>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d908      	bls.n	80149c6 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80149b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d002      	beq.n	80149c0 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80149ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149bc:	2201      	movs	r2, #1
 80149be:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80149c0:	4b0b      	ldr	r3, [pc, #44]	; (80149f0 <xTaskGenericNotifyFromISR+0x1b0>)
 80149c2:	2201      	movs	r2, #1
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	f383 8811 	msr	BASEPRI, r3
}
 80149d0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80149d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3738      	adds	r7, #56	; 0x38
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	24014a60 	.word	0x24014a60
 80149e0:	24014a40 	.word	0x24014a40
 80149e4:	2401493c 	.word	0x2401493c
 80149e8:	240149f8 	.word	0x240149f8
 80149ec:	24014938 	.word	0x24014938
 80149f0:	24014a4c 	.word	0x24014a4c

080149f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80149fe:	4b29      	ldr	r3, [pc, #164]	; (8014aa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a04:	4b28      	ldr	r3, [pc, #160]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3304      	adds	r3, #4
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7fd fd98 	bl	8012540 <uxListRemove>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d10b      	bne.n	8014a2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014a16:	4b24      	ldr	r3, [pc, #144]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014a22:	43da      	mvns	r2, r3
 8014a24:	4b21      	ldr	r3, [pc, #132]	; (8014aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4013      	ands	r3, r2
 8014a2a:	4a20      	ldr	r2, [pc, #128]	; (8014aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a34:	d10a      	bne.n	8014a4c <prvAddCurrentTaskToDelayedList+0x58>
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d007      	beq.n	8014a4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a3c:	4b1a      	ldr	r3, [pc, #104]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	3304      	adds	r3, #4
 8014a42:	4619      	mov	r1, r3
 8014a44:	481a      	ldr	r0, [pc, #104]	; (8014ab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014a46:	f7fd fd1e 	bl	8012486 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a4a:	e026      	b.n	8014a9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	4413      	add	r3, r2
 8014a52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a54:	4b14      	ldr	r3, [pc, #80]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	68ba      	ldr	r2, [r7, #8]
 8014a5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014a5c:	68ba      	ldr	r2, [r7, #8]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d209      	bcs.n	8014a78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a64:	4b13      	ldr	r3, [pc, #76]	; (8014ab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	4b0f      	ldr	r3, [pc, #60]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	3304      	adds	r3, #4
 8014a6e:	4619      	mov	r1, r3
 8014a70:	4610      	mov	r0, r2
 8014a72:	f7fd fd2c 	bl	80124ce <vListInsert>
}
 8014a76:	e010      	b.n	8014a9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a78:	4b0f      	ldr	r3, [pc, #60]	; (8014ab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	4b0a      	ldr	r3, [pc, #40]	; (8014aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	3304      	adds	r3, #4
 8014a82:	4619      	mov	r1, r3
 8014a84:	4610      	mov	r0, r2
 8014a86:	f7fd fd22 	bl	80124ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014a8a:	4b0c      	ldr	r3, [pc, #48]	; (8014abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	68ba      	ldr	r2, [r7, #8]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d202      	bcs.n	8014a9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014a94:	4a09      	ldr	r2, [pc, #36]	; (8014abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	6013      	str	r3, [r2, #0]
}
 8014a9a:	bf00      	nop
 8014a9c:	3710      	adds	r7, #16
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	24014a3c 	.word	0x24014a3c
 8014aa8:	24014938 	.word	0x24014938
 8014aac:	24014a40 	.word	0x24014a40
 8014ab0:	24014a24 	.word	0x24014a24
 8014ab4:	240149f4 	.word	0x240149f4
 8014ab8:	240149f0 	.word	0x240149f0
 8014abc:	24014a58 	.word	0x24014a58

08014ac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b085      	sub	sp, #20
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	3b04      	subs	r3, #4
 8014ad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	3b04      	subs	r3, #4
 8014ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	f023 0201 	bic.w	r2, r3, #1
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	3b04      	subs	r3, #4
 8014aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014af0:	4a0c      	ldr	r2, [pc, #48]	; (8014b24 <pxPortInitialiseStack+0x64>)
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	3b14      	subs	r3, #20
 8014afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	3b04      	subs	r3, #4
 8014b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	f06f 0202 	mvn.w	r2, #2
 8014b0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	3b20      	subs	r3, #32
 8014b14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b16:	68fb      	ldr	r3, [r7, #12]
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3714      	adds	r7, #20
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr
 8014b24:	08014b29 	.word	0x08014b29

08014b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b32:	4b12      	ldr	r3, [pc, #72]	; (8014b7c <prvTaskExitError+0x54>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b3a:	d00a      	beq.n	8014b52 <prvTaskExitError+0x2a>
	__asm volatile
 8014b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b40:	f383 8811 	msr	BASEPRI, r3
 8014b44:	f3bf 8f6f 	isb	sy
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	60fb      	str	r3, [r7, #12]
}
 8014b4e:	bf00      	nop
 8014b50:	e7fe      	b.n	8014b50 <prvTaskExitError+0x28>
	__asm volatile
 8014b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b56:	f383 8811 	msr	BASEPRI, r3
 8014b5a:	f3bf 8f6f 	isb	sy
 8014b5e:	f3bf 8f4f 	dsb	sy
 8014b62:	60bb      	str	r3, [r7, #8]
}
 8014b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b66:	bf00      	nop
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d0fc      	beq.n	8014b68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b6e:	bf00      	nop
 8014b70:	bf00      	nop
 8014b72:	3714      	adds	r7, #20
 8014b74:	46bd      	mov	sp, r7
 8014b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7a:	4770      	bx	lr
 8014b7c:	24000010 	.word	0x24000010

08014b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b80:	4b07      	ldr	r3, [pc, #28]	; (8014ba0 <pxCurrentTCBConst2>)
 8014b82:	6819      	ldr	r1, [r3, #0]
 8014b84:	6808      	ldr	r0, [r1, #0]
 8014b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b8a:	f380 8809 	msr	PSP, r0
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f04f 0000 	mov.w	r0, #0
 8014b96:	f380 8811 	msr	BASEPRI, r0
 8014b9a:	4770      	bx	lr
 8014b9c:	f3af 8000 	nop.w

08014ba0 <pxCurrentTCBConst2>:
 8014ba0:	24014938 	.word	0x24014938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014ba4:	bf00      	nop
 8014ba6:	bf00      	nop

08014ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014ba8:	4808      	ldr	r0, [pc, #32]	; (8014bcc <prvPortStartFirstTask+0x24>)
 8014baa:	6800      	ldr	r0, [r0, #0]
 8014bac:	6800      	ldr	r0, [r0, #0]
 8014bae:	f380 8808 	msr	MSP, r0
 8014bb2:	f04f 0000 	mov.w	r0, #0
 8014bb6:	f380 8814 	msr	CONTROL, r0
 8014bba:	b662      	cpsie	i
 8014bbc:	b661      	cpsie	f
 8014bbe:	f3bf 8f4f 	dsb	sy
 8014bc2:	f3bf 8f6f 	isb	sy
 8014bc6:	df00      	svc	0
 8014bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014bca:	bf00      	nop
 8014bcc:	e000ed08 	.word	0xe000ed08

08014bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b086      	sub	sp, #24
 8014bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014bd6:	4b46      	ldr	r3, [pc, #280]	; (8014cf0 <xPortStartScheduler+0x120>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	4a46      	ldr	r2, [pc, #280]	; (8014cf4 <xPortStartScheduler+0x124>)
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d10a      	bne.n	8014bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8014be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be4:	f383 8811 	msr	BASEPRI, r3
 8014be8:	f3bf 8f6f 	isb	sy
 8014bec:	f3bf 8f4f 	dsb	sy
 8014bf0:	613b      	str	r3, [r7, #16]
}
 8014bf2:	bf00      	nop
 8014bf4:	e7fe      	b.n	8014bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014bf6:	4b3e      	ldr	r3, [pc, #248]	; (8014cf0 <xPortStartScheduler+0x120>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4a3f      	ldr	r2, [pc, #252]	; (8014cf8 <xPortStartScheduler+0x128>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d10a      	bne.n	8014c16 <xPortStartScheduler+0x46>
	__asm volatile
 8014c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c04:	f383 8811 	msr	BASEPRI, r3
 8014c08:	f3bf 8f6f 	isb	sy
 8014c0c:	f3bf 8f4f 	dsb	sy
 8014c10:	60fb      	str	r3, [r7, #12]
}
 8014c12:	bf00      	nop
 8014c14:	e7fe      	b.n	8014c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c16:	4b39      	ldr	r3, [pc, #228]	; (8014cfc <xPortStartScheduler+0x12c>)
 8014c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	22ff      	movs	r2, #255	; 0xff
 8014c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c30:	78fb      	ldrb	r3, [r7, #3]
 8014c32:	b2db      	uxtb	r3, r3
 8014c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c38:	b2da      	uxtb	r2, r3
 8014c3a:	4b31      	ldr	r3, [pc, #196]	; (8014d00 <xPortStartScheduler+0x130>)
 8014c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c3e:	4b31      	ldr	r3, [pc, #196]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c40:	2207      	movs	r2, #7
 8014c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c44:	e009      	b.n	8014c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014c46:	4b2f      	ldr	r3, [pc, #188]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	3b01      	subs	r3, #1
 8014c4c:	4a2d      	ldr	r2, [pc, #180]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c50:	78fb      	ldrb	r3, [r7, #3]
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	005b      	lsls	r3, r3, #1
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c5a:	78fb      	ldrb	r3, [r7, #3]
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c62:	2b80      	cmp	r3, #128	; 0x80
 8014c64:	d0ef      	beq.n	8014c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c66:	4b27      	ldr	r3, [pc, #156]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f1c3 0307 	rsb	r3, r3, #7
 8014c6e:	2b04      	cmp	r3, #4
 8014c70:	d00a      	beq.n	8014c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8014c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c76:	f383 8811 	msr	BASEPRI, r3
 8014c7a:	f3bf 8f6f 	isb	sy
 8014c7e:	f3bf 8f4f 	dsb	sy
 8014c82:	60bb      	str	r3, [r7, #8]
}
 8014c84:	bf00      	nop
 8014c86:	e7fe      	b.n	8014c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c88:	4b1e      	ldr	r3, [pc, #120]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	021b      	lsls	r3, r3, #8
 8014c8e:	4a1d      	ldr	r2, [pc, #116]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c92:	4b1c      	ldr	r3, [pc, #112]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014c9a:	4a1a      	ldr	r2, [pc, #104]	; (8014d04 <xPortStartScheduler+0x134>)
 8014c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	b2da      	uxtb	r2, r3
 8014ca2:	697b      	ldr	r3, [r7, #20]
 8014ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014ca6:	4b18      	ldr	r3, [pc, #96]	; (8014d08 <xPortStartScheduler+0x138>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	4a17      	ldr	r2, [pc, #92]	; (8014d08 <xPortStartScheduler+0x138>)
 8014cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014cb2:	4b15      	ldr	r3, [pc, #84]	; (8014d08 <xPortStartScheduler+0x138>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4a14      	ldr	r2, [pc, #80]	; (8014d08 <xPortStartScheduler+0x138>)
 8014cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014cbe:	f000 f8dd 	bl	8014e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cc2:	4b12      	ldr	r3, [pc, #72]	; (8014d0c <xPortStartScheduler+0x13c>)
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cc8:	f000 f8fc 	bl	8014ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014ccc:	4b10      	ldr	r3, [pc, #64]	; (8014d10 <xPortStartScheduler+0x140>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	4a0f      	ldr	r2, [pc, #60]	; (8014d10 <xPortStartScheduler+0x140>)
 8014cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cd8:	f7ff ff66 	bl	8014ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014cdc:	f7ff f8a8 	bl	8013e30 <vTaskSwitchContext>
	prvTaskExitError();
 8014ce0:	f7ff ff22 	bl	8014b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014ce4:	2300      	movs	r3, #0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	e000ed00 	.word	0xe000ed00
 8014cf4:	410fc271 	.word	0x410fc271
 8014cf8:	410fc270 	.word	0x410fc270
 8014cfc:	e000e400 	.word	0xe000e400
 8014d00:	24014a64 	.word	0x24014a64
 8014d04:	24014a68 	.word	0x24014a68
 8014d08:	e000ed20 	.word	0xe000ed20
 8014d0c:	24000010 	.word	0x24000010
 8014d10:	e000ef34 	.word	0xe000ef34

08014d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
	__asm volatile
 8014d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	607b      	str	r3, [r7, #4]
}
 8014d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d2e:	4b0f      	ldr	r3, [pc, #60]	; (8014d6c <vPortEnterCritical+0x58>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	3301      	adds	r3, #1
 8014d34:	4a0d      	ldr	r2, [pc, #52]	; (8014d6c <vPortEnterCritical+0x58>)
 8014d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d38:	4b0c      	ldr	r3, [pc, #48]	; (8014d6c <vPortEnterCritical+0x58>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	d10f      	bne.n	8014d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d40:	4b0b      	ldr	r3, [pc, #44]	; (8014d70 <vPortEnterCritical+0x5c>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d00a      	beq.n	8014d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8014d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d4e:	f383 8811 	msr	BASEPRI, r3
 8014d52:	f3bf 8f6f 	isb	sy
 8014d56:	f3bf 8f4f 	dsb	sy
 8014d5a:	603b      	str	r3, [r7, #0]
}
 8014d5c:	bf00      	nop
 8014d5e:	e7fe      	b.n	8014d5e <vPortEnterCritical+0x4a>
	}
}
 8014d60:	bf00      	nop
 8014d62:	370c      	adds	r7, #12
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr
 8014d6c:	24000010 	.word	0x24000010
 8014d70:	e000ed04 	.word	0xe000ed04

08014d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d74:	b480      	push	{r7}
 8014d76:	b083      	sub	sp, #12
 8014d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d7a:	4b12      	ldr	r3, [pc, #72]	; (8014dc4 <vPortExitCritical+0x50>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d10a      	bne.n	8014d98 <vPortExitCritical+0x24>
	__asm volatile
 8014d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d86:	f383 8811 	msr	BASEPRI, r3
 8014d8a:	f3bf 8f6f 	isb	sy
 8014d8e:	f3bf 8f4f 	dsb	sy
 8014d92:	607b      	str	r3, [r7, #4]
}
 8014d94:	bf00      	nop
 8014d96:	e7fe      	b.n	8014d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014d98:	4b0a      	ldr	r3, [pc, #40]	; (8014dc4 <vPortExitCritical+0x50>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	4a09      	ldr	r2, [pc, #36]	; (8014dc4 <vPortExitCritical+0x50>)
 8014da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014da2:	4b08      	ldr	r3, [pc, #32]	; (8014dc4 <vPortExitCritical+0x50>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d105      	bne.n	8014db6 <vPortExitCritical+0x42>
 8014daa:	2300      	movs	r3, #0
 8014dac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	f383 8811 	msr	BASEPRI, r3
}
 8014db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014db6:	bf00      	nop
 8014db8:	370c      	adds	r7, #12
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop
 8014dc4:	24000010 	.word	0x24000010
	...

08014dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014dd0:	f3ef 8009 	mrs	r0, PSP
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	4b15      	ldr	r3, [pc, #84]	; (8014e30 <pxCurrentTCBConst>)
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	f01e 0f10 	tst.w	lr, #16
 8014de0:	bf08      	it	eq
 8014de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dea:	6010      	str	r0, [r2, #0]
 8014dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014df4:	f380 8811 	msr	BASEPRI, r0
 8014df8:	f3bf 8f4f 	dsb	sy
 8014dfc:	f3bf 8f6f 	isb	sy
 8014e00:	f7ff f816 	bl	8013e30 <vTaskSwitchContext>
 8014e04:	f04f 0000 	mov.w	r0, #0
 8014e08:	f380 8811 	msr	BASEPRI, r0
 8014e0c:	bc09      	pop	{r0, r3}
 8014e0e:	6819      	ldr	r1, [r3, #0]
 8014e10:	6808      	ldr	r0, [r1, #0]
 8014e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e16:	f01e 0f10 	tst.w	lr, #16
 8014e1a:	bf08      	it	eq
 8014e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e20:	f380 8809 	msr	PSP, r0
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	f3af 8000 	nop.w

08014e30 <pxCurrentTCBConst>:
 8014e30:	24014938 	.word	0x24014938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop

08014e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e42:	f383 8811 	msr	BASEPRI, r3
 8014e46:	f3bf 8f6f 	isb	sy
 8014e4a:	f3bf 8f4f 	dsb	sy
 8014e4e:	607b      	str	r3, [r7, #4]
}
 8014e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e52:	f7fe ff35 	bl	8013cc0 <xTaskIncrementTick>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d003      	beq.n	8014e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e5c:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <SysTick_Handler+0x40>)
 8014e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e62:	601a      	str	r2, [r3, #0]
 8014e64:	2300      	movs	r3, #0
 8014e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	f383 8811 	msr	BASEPRI, r3
}
 8014e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	e000ed04 	.word	0xe000ed04

08014e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e80:	4b0b      	ldr	r3, [pc, #44]	; (8014eb0 <vPortSetupTimerInterrupt+0x34>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e86:	4b0b      	ldr	r3, [pc, #44]	; (8014eb4 <vPortSetupTimerInterrupt+0x38>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e8c:	4b0a      	ldr	r3, [pc, #40]	; (8014eb8 <vPortSetupTimerInterrupt+0x3c>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4a0a      	ldr	r2, [pc, #40]	; (8014ebc <vPortSetupTimerInterrupt+0x40>)
 8014e92:	fba2 2303 	umull	r2, r3, r2, r3
 8014e96:	099b      	lsrs	r3, r3, #6
 8014e98:	4a09      	ldr	r2, [pc, #36]	; (8014ec0 <vPortSetupTimerInterrupt+0x44>)
 8014e9a:	3b01      	subs	r3, #1
 8014e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e9e:	4b04      	ldr	r3, [pc, #16]	; (8014eb0 <vPortSetupTimerInterrupt+0x34>)
 8014ea0:	2207      	movs	r2, #7
 8014ea2:	601a      	str	r2, [r3, #0]
}
 8014ea4:	bf00      	nop
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr
 8014eae:	bf00      	nop
 8014eb0:	e000e010 	.word	0xe000e010
 8014eb4:	e000e018 	.word	0xe000e018
 8014eb8:	24000000 	.word	0x24000000
 8014ebc:	10624dd3 	.word	0x10624dd3
 8014ec0:	e000e014 	.word	0xe000e014

08014ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ed4 <vPortEnableVFP+0x10>
 8014ec8:	6801      	ldr	r1, [r0, #0]
 8014eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014ece:	6001      	str	r1, [r0, #0]
 8014ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ed2:	bf00      	nop
 8014ed4:	e000ed88 	.word	0xe000ed88

08014ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ed8:	b480      	push	{r7}
 8014eda:	b085      	sub	sp, #20
 8014edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014ede:	f3ef 8305 	mrs	r3, IPSR
 8014ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2b0f      	cmp	r3, #15
 8014ee8:	d914      	bls.n	8014f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014eea:	4a17      	ldr	r2, [pc, #92]	; (8014f48 <vPortValidateInterruptPriority+0x70>)
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	4413      	add	r3, r2
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ef4:	4b15      	ldr	r3, [pc, #84]	; (8014f4c <vPortValidateInterruptPriority+0x74>)
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	7afa      	ldrb	r2, [r7, #11]
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d20a      	bcs.n	8014f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f02:	f383 8811 	msr	BASEPRI, r3
 8014f06:	f3bf 8f6f 	isb	sy
 8014f0a:	f3bf 8f4f 	dsb	sy
 8014f0e:	607b      	str	r3, [r7, #4]
}
 8014f10:	bf00      	nop
 8014f12:	e7fe      	b.n	8014f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f14:	4b0e      	ldr	r3, [pc, #56]	; (8014f50 <vPortValidateInterruptPriority+0x78>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f1c:	4b0d      	ldr	r3, [pc, #52]	; (8014f54 <vPortValidateInterruptPriority+0x7c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d90a      	bls.n	8014f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f28:	f383 8811 	msr	BASEPRI, r3
 8014f2c:	f3bf 8f6f 	isb	sy
 8014f30:	f3bf 8f4f 	dsb	sy
 8014f34:	603b      	str	r3, [r7, #0]
}
 8014f36:	bf00      	nop
 8014f38:	e7fe      	b.n	8014f38 <vPortValidateInterruptPriority+0x60>
	}
 8014f3a:	bf00      	nop
 8014f3c:	3714      	adds	r7, #20
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr
 8014f46:	bf00      	nop
 8014f48:	e000e3f0 	.word	0xe000e3f0
 8014f4c:	24014a64 	.word	0x24014a64
 8014f50:	e000ed0c 	.word	0xe000ed0c
 8014f54:	24014a68 	.word	0x24014a68

08014f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b08a      	sub	sp, #40	; 0x28
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f60:	2300      	movs	r3, #0
 8014f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f64:	f7fe fde0 	bl	8013b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f68:	4b5b      	ldr	r3, [pc, #364]	; (80150d8 <pvPortMalloc+0x180>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d101      	bne.n	8014f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f70:	f000 f920 	bl	80151b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f74:	4b59      	ldr	r3, [pc, #356]	; (80150dc <pvPortMalloc+0x184>)
 8014f76:	681a      	ldr	r2, [r3, #0]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	4013      	ands	r3, r2
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f040 8093 	bne.w	80150a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d01d      	beq.n	8014fc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014f88:	2208      	movs	r2, #8
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f003 0307 	and.w	r3, r3, #7
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d014      	beq.n	8014fc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f023 0307 	bic.w	r3, r3, #7
 8014fa0:	3308      	adds	r3, #8
 8014fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f003 0307 	and.w	r3, r3, #7
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d00a      	beq.n	8014fc4 <pvPortMalloc+0x6c>
	__asm volatile
 8014fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb2:	f383 8811 	msr	BASEPRI, r3
 8014fb6:	f3bf 8f6f 	isb	sy
 8014fba:	f3bf 8f4f 	dsb	sy
 8014fbe:	617b      	str	r3, [r7, #20]
}
 8014fc0:	bf00      	nop
 8014fc2:	e7fe      	b.n	8014fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d06e      	beq.n	80150a8 <pvPortMalloc+0x150>
 8014fca:	4b45      	ldr	r3, [pc, #276]	; (80150e0 <pvPortMalloc+0x188>)
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d869      	bhi.n	80150a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014fd4:	4b43      	ldr	r3, [pc, #268]	; (80150e4 <pvPortMalloc+0x18c>)
 8014fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fd8:	4b42      	ldr	r3, [pc, #264]	; (80150e4 <pvPortMalloc+0x18c>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fde:	e004      	b.n	8014fea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d903      	bls.n	8014ffc <pvPortMalloc+0xa4>
 8014ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d1f1      	bne.n	8014fe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ffc:	4b36      	ldr	r3, [pc, #216]	; (80150d8 <pvPortMalloc+0x180>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015002:	429a      	cmp	r2, r3
 8015004:	d050      	beq.n	80150a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015006:	6a3b      	ldr	r3, [r7, #32]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	2208      	movs	r2, #8
 801500c:	4413      	add	r3, r2
 801500e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	6a3b      	ldr	r3, [r7, #32]
 8015016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501a:	685a      	ldr	r2, [r3, #4]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	1ad2      	subs	r2, r2, r3
 8015020:	2308      	movs	r3, #8
 8015022:	005b      	lsls	r3, r3, #1
 8015024:	429a      	cmp	r2, r3
 8015026:	d91f      	bls.n	8015068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4413      	add	r3, r2
 801502e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	f003 0307 	and.w	r3, r3, #7
 8015036:	2b00      	cmp	r3, #0
 8015038:	d00a      	beq.n	8015050 <pvPortMalloc+0xf8>
	__asm volatile
 801503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801503e:	f383 8811 	msr	BASEPRI, r3
 8015042:	f3bf 8f6f 	isb	sy
 8015046:	f3bf 8f4f 	dsb	sy
 801504a:	613b      	str	r3, [r7, #16]
}
 801504c:	bf00      	nop
 801504e:	e7fe      	b.n	801504e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015052:	685a      	ldr	r2, [r3, #4]
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	1ad2      	subs	r2, r2, r3
 8015058:	69bb      	ldr	r3, [r7, #24]
 801505a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015062:	69b8      	ldr	r0, [r7, #24]
 8015064:	f000 f908 	bl	8015278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015068:	4b1d      	ldr	r3, [pc, #116]	; (80150e0 <pvPortMalloc+0x188>)
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	4a1b      	ldr	r2, [pc, #108]	; (80150e0 <pvPortMalloc+0x188>)
 8015074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015076:	4b1a      	ldr	r3, [pc, #104]	; (80150e0 <pvPortMalloc+0x188>)
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	4b1b      	ldr	r3, [pc, #108]	; (80150e8 <pvPortMalloc+0x190>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	429a      	cmp	r2, r3
 8015080:	d203      	bcs.n	801508a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015082:	4b17      	ldr	r3, [pc, #92]	; (80150e0 <pvPortMalloc+0x188>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	4a18      	ldr	r2, [pc, #96]	; (80150e8 <pvPortMalloc+0x190>)
 8015088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	685a      	ldr	r2, [r3, #4]
 801508e:	4b13      	ldr	r3, [pc, #76]	; (80150dc <pvPortMalloc+0x184>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	431a      	orrs	r2, r3
 8015094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509a:	2200      	movs	r2, #0
 801509c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801509e:	4b13      	ldr	r3, [pc, #76]	; (80150ec <pvPortMalloc+0x194>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	3301      	adds	r3, #1
 80150a4:	4a11      	ldr	r2, [pc, #68]	; (80150ec <pvPortMalloc+0x194>)
 80150a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150a8:	f7fe fd4c 	bl	8013b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	f003 0307 	and.w	r3, r3, #7
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d00a      	beq.n	80150cc <pvPortMalloc+0x174>
	__asm volatile
 80150b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ba:	f383 8811 	msr	BASEPRI, r3
 80150be:	f3bf 8f6f 	isb	sy
 80150c2:	f3bf 8f4f 	dsb	sy
 80150c6:	60fb      	str	r3, [r7, #12]
}
 80150c8:	bf00      	nop
 80150ca:	e7fe      	b.n	80150ca <pvPortMalloc+0x172>
	return pvReturn;
 80150cc:	69fb      	ldr	r3, [r7, #28]
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3728      	adds	r7, #40	; 0x28
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	24064a74 	.word	0x24064a74
 80150dc:	24064a88 	.word	0x24064a88
 80150e0:	24064a78 	.word	0x24064a78
 80150e4:	24064a6c 	.word	0x24064a6c
 80150e8:	24064a7c 	.word	0x24064a7c
 80150ec:	24064a80 	.word	0x24064a80

080150f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b086      	sub	sp, #24
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d04d      	beq.n	801519e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015102:	2308      	movs	r3, #8
 8015104:	425b      	negs	r3, r3
 8015106:	697a      	ldr	r2, [r7, #20]
 8015108:	4413      	add	r3, r2
 801510a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	685a      	ldr	r2, [r3, #4]
 8015114:	4b24      	ldr	r3, [pc, #144]	; (80151a8 <vPortFree+0xb8>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4013      	ands	r3, r2
 801511a:	2b00      	cmp	r3, #0
 801511c:	d10a      	bne.n	8015134 <vPortFree+0x44>
	__asm volatile
 801511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015122:	f383 8811 	msr	BASEPRI, r3
 8015126:	f3bf 8f6f 	isb	sy
 801512a:	f3bf 8f4f 	dsb	sy
 801512e:	60fb      	str	r3, [r7, #12]
}
 8015130:	bf00      	nop
 8015132:	e7fe      	b.n	8015132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d00a      	beq.n	8015152 <vPortFree+0x62>
	__asm volatile
 801513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015140:	f383 8811 	msr	BASEPRI, r3
 8015144:	f3bf 8f6f 	isb	sy
 8015148:	f3bf 8f4f 	dsb	sy
 801514c:	60bb      	str	r3, [r7, #8]
}
 801514e:	bf00      	nop
 8015150:	e7fe      	b.n	8015150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	685a      	ldr	r2, [r3, #4]
 8015156:	4b14      	ldr	r3, [pc, #80]	; (80151a8 <vPortFree+0xb8>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4013      	ands	r3, r2
 801515c:	2b00      	cmp	r3, #0
 801515e:	d01e      	beq.n	801519e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d11a      	bne.n	801519e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015168:	693b      	ldr	r3, [r7, #16]
 801516a:	685a      	ldr	r2, [r3, #4]
 801516c:	4b0e      	ldr	r3, [pc, #56]	; (80151a8 <vPortFree+0xb8>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	43db      	mvns	r3, r3
 8015172:	401a      	ands	r2, r3
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015178:	f7fe fcd6 	bl	8013b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	685a      	ldr	r2, [r3, #4]
 8015180:	4b0a      	ldr	r3, [pc, #40]	; (80151ac <vPortFree+0xbc>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4413      	add	r3, r2
 8015186:	4a09      	ldr	r2, [pc, #36]	; (80151ac <vPortFree+0xbc>)
 8015188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801518a:	6938      	ldr	r0, [r7, #16]
 801518c:	f000 f874 	bl	8015278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015190:	4b07      	ldr	r3, [pc, #28]	; (80151b0 <vPortFree+0xc0>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	3301      	adds	r3, #1
 8015196:	4a06      	ldr	r2, [pc, #24]	; (80151b0 <vPortFree+0xc0>)
 8015198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801519a:	f7fe fcd3 	bl	8013b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801519e:	bf00      	nop
 80151a0:	3718      	adds	r7, #24
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	24064a88 	.word	0x24064a88
 80151ac:	24064a78 	.word	0x24064a78
 80151b0:	24064a84 	.word	0x24064a84

080151b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151b4:	b480      	push	{r7}
 80151b6:	b085      	sub	sp, #20
 80151b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80151be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151c0:	4b27      	ldr	r3, [pc, #156]	; (8015260 <prvHeapInit+0xac>)
 80151c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f003 0307 	and.w	r3, r3, #7
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d00c      	beq.n	80151e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	3307      	adds	r3, #7
 80151d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f023 0307 	bic.w	r3, r3, #7
 80151da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	1ad3      	subs	r3, r2, r3
 80151e2:	4a1f      	ldr	r2, [pc, #124]	; (8015260 <prvHeapInit+0xac>)
 80151e4:	4413      	add	r3, r2
 80151e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151ec:	4a1d      	ldr	r2, [pc, #116]	; (8015264 <prvHeapInit+0xb0>)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151f2:	4b1c      	ldr	r3, [pc, #112]	; (8015264 <prvHeapInit+0xb0>)
 80151f4:	2200      	movs	r2, #0
 80151f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	68ba      	ldr	r2, [r7, #8]
 80151fc:	4413      	add	r3, r2
 80151fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015200:	2208      	movs	r2, #8
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	1a9b      	subs	r3, r3, r2
 8015206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f023 0307 	bic.w	r3, r3, #7
 801520e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	4a15      	ldr	r2, [pc, #84]	; (8015268 <prvHeapInit+0xb4>)
 8015214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015216:	4b14      	ldr	r3, [pc, #80]	; (8015268 <prvHeapInit+0xb4>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	2200      	movs	r2, #0
 801521c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801521e:	4b12      	ldr	r3, [pc, #72]	; (8015268 <prvHeapInit+0xb4>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2200      	movs	r2, #0
 8015224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	68fa      	ldr	r2, [r7, #12]
 801522e:	1ad2      	subs	r2, r2, r3
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015234:	4b0c      	ldr	r3, [pc, #48]	; (8015268 <prvHeapInit+0xb4>)
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	4a0a      	ldr	r2, [pc, #40]	; (801526c <prvHeapInit+0xb8>)
 8015242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	4a09      	ldr	r2, [pc, #36]	; (8015270 <prvHeapInit+0xbc>)
 801524a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801524c:	4b09      	ldr	r3, [pc, #36]	; (8015274 <prvHeapInit+0xc0>)
 801524e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015252:	601a      	str	r2, [r3, #0]
}
 8015254:	bf00      	nop
 8015256:	3714      	adds	r7, #20
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr
 8015260:	24014a6c 	.word	0x24014a6c
 8015264:	24064a6c 	.word	0x24064a6c
 8015268:	24064a74 	.word	0x24064a74
 801526c:	24064a7c 	.word	0x24064a7c
 8015270:	24064a78 	.word	0x24064a78
 8015274:	24064a88 	.word	0x24064a88

08015278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015278:	b480      	push	{r7}
 801527a:	b085      	sub	sp, #20
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015280:	4b28      	ldr	r3, [pc, #160]	; (8015324 <prvInsertBlockIntoFreeList+0xac>)
 8015282:	60fb      	str	r3, [r7, #12]
 8015284:	e002      	b.n	801528c <prvInsertBlockIntoFreeList+0x14>
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	60fb      	str	r3, [r7, #12]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	429a      	cmp	r2, r3
 8015294:	d8f7      	bhi.n	8015286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	685b      	ldr	r3, [r3, #4]
 801529e:	68ba      	ldr	r2, [r7, #8]
 80152a0:	4413      	add	r3, r2
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d108      	bne.n	80152ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	685a      	ldr	r2, [r3, #4]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	685b      	ldr	r3, [r3, #4]
 80152b0:	441a      	add	r2, r3
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	68ba      	ldr	r2, [r7, #8]
 80152c4:	441a      	add	r2, r3
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d118      	bne.n	8015300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	4b15      	ldr	r3, [pc, #84]	; (8015328 <prvInsertBlockIntoFreeList+0xb0>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d00d      	beq.n	80152f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	685a      	ldr	r2, [r3, #4]
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	441a      	add	r2, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	681a      	ldr	r2, [r3, #0]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	601a      	str	r2, [r3, #0]
 80152f4:	e008      	b.n	8015308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152f6:	4b0c      	ldr	r3, [pc, #48]	; (8015328 <prvInsertBlockIntoFreeList+0xb0>)
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	601a      	str	r2, [r3, #0]
 80152fe:	e003      	b.n	8015308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015308:	68fa      	ldr	r2, [r7, #12]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	429a      	cmp	r2, r3
 801530e:	d002      	beq.n	8015316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015316:	bf00      	nop
 8015318:	3714      	adds	r7, #20
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	24064a6c 	.word	0x24064a6c
 8015328:	24064a74 	.word	0x24064a74

0801532c <__errno>:
 801532c:	4b01      	ldr	r3, [pc, #4]	; (8015334 <__errno+0x8>)
 801532e:	6818      	ldr	r0, [r3, #0]
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	24000014 	.word	0x24000014

08015338 <__libc_init_array>:
 8015338:	b570      	push	{r4, r5, r6, lr}
 801533a:	4d0d      	ldr	r5, [pc, #52]	; (8015370 <__libc_init_array+0x38>)
 801533c:	4c0d      	ldr	r4, [pc, #52]	; (8015374 <__libc_init_array+0x3c>)
 801533e:	1b64      	subs	r4, r4, r5
 8015340:	10a4      	asrs	r4, r4, #2
 8015342:	2600      	movs	r6, #0
 8015344:	42a6      	cmp	r6, r4
 8015346:	d109      	bne.n	801535c <__libc_init_array+0x24>
 8015348:	4d0b      	ldr	r5, [pc, #44]	; (8015378 <__libc_init_array+0x40>)
 801534a:	4c0c      	ldr	r4, [pc, #48]	; (801537c <__libc_init_array+0x44>)
 801534c:	f000 fc62 	bl	8015c14 <_init>
 8015350:	1b64      	subs	r4, r4, r5
 8015352:	10a4      	asrs	r4, r4, #2
 8015354:	2600      	movs	r6, #0
 8015356:	42a6      	cmp	r6, r4
 8015358:	d105      	bne.n	8015366 <__libc_init_array+0x2e>
 801535a:	bd70      	pop	{r4, r5, r6, pc}
 801535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015360:	4798      	blx	r3
 8015362:	3601      	adds	r6, #1
 8015364:	e7ee      	b.n	8015344 <__libc_init_array+0xc>
 8015366:	f855 3b04 	ldr.w	r3, [r5], #4
 801536a:	4798      	blx	r3
 801536c:	3601      	adds	r6, #1
 801536e:	e7f2      	b.n	8015356 <__libc_init_array+0x1e>
 8015370:	08015df0 	.word	0x08015df0
 8015374:	08015df0 	.word	0x08015df0
 8015378:	08015df0 	.word	0x08015df0
 801537c:	08015df4 	.word	0x08015df4

08015380 <memcpy>:
 8015380:	440a      	add	r2, r1
 8015382:	4291      	cmp	r1, r2
 8015384:	f100 33ff 	add.w	r3, r0, #4294967295
 8015388:	d100      	bne.n	801538c <memcpy+0xc>
 801538a:	4770      	bx	lr
 801538c:	b510      	push	{r4, lr}
 801538e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015396:	4291      	cmp	r1, r2
 8015398:	d1f9      	bne.n	801538e <memcpy+0xe>
 801539a:	bd10      	pop	{r4, pc}

0801539c <memset>:
 801539c:	4402      	add	r2, r0
 801539e:	4603      	mov	r3, r0
 80153a0:	4293      	cmp	r3, r2
 80153a2:	d100      	bne.n	80153a6 <memset+0xa>
 80153a4:	4770      	bx	lr
 80153a6:	f803 1b01 	strb.w	r1, [r3], #1
 80153aa:	e7f9      	b.n	80153a0 <memset+0x4>

080153ac <sniprintf>:
 80153ac:	b40c      	push	{r2, r3}
 80153ae:	b530      	push	{r4, r5, lr}
 80153b0:	4b17      	ldr	r3, [pc, #92]	; (8015410 <sniprintf+0x64>)
 80153b2:	1e0c      	subs	r4, r1, #0
 80153b4:	681d      	ldr	r5, [r3, #0]
 80153b6:	b09d      	sub	sp, #116	; 0x74
 80153b8:	da08      	bge.n	80153cc <sniprintf+0x20>
 80153ba:	238b      	movs	r3, #139	; 0x8b
 80153bc:	602b      	str	r3, [r5, #0]
 80153be:	f04f 30ff 	mov.w	r0, #4294967295
 80153c2:	b01d      	add	sp, #116	; 0x74
 80153c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153c8:	b002      	add	sp, #8
 80153ca:	4770      	bx	lr
 80153cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80153d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80153d4:	bf14      	ite	ne
 80153d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80153da:	4623      	moveq	r3, r4
 80153dc:	9304      	str	r3, [sp, #16]
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153e4:	9002      	str	r0, [sp, #8]
 80153e6:	9006      	str	r0, [sp, #24]
 80153e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80153ee:	ab21      	add	r3, sp, #132	; 0x84
 80153f0:	a902      	add	r1, sp, #8
 80153f2:	4628      	mov	r0, r5
 80153f4:	9301      	str	r3, [sp, #4]
 80153f6:	f000 f869 	bl	80154cc <_svfiprintf_r>
 80153fa:	1c43      	adds	r3, r0, #1
 80153fc:	bfbc      	itt	lt
 80153fe:	238b      	movlt	r3, #139	; 0x8b
 8015400:	602b      	strlt	r3, [r5, #0]
 8015402:	2c00      	cmp	r4, #0
 8015404:	d0dd      	beq.n	80153c2 <sniprintf+0x16>
 8015406:	9b02      	ldr	r3, [sp, #8]
 8015408:	2200      	movs	r2, #0
 801540a:	701a      	strb	r2, [r3, #0]
 801540c:	e7d9      	b.n	80153c2 <sniprintf+0x16>
 801540e:	bf00      	nop
 8015410:	24000014 	.word	0x24000014

08015414 <__ssputs_r>:
 8015414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015418:	688e      	ldr	r6, [r1, #8]
 801541a:	429e      	cmp	r6, r3
 801541c:	4682      	mov	sl, r0
 801541e:	460c      	mov	r4, r1
 8015420:	4690      	mov	r8, r2
 8015422:	461f      	mov	r7, r3
 8015424:	d838      	bhi.n	8015498 <__ssputs_r+0x84>
 8015426:	898a      	ldrh	r2, [r1, #12]
 8015428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801542c:	d032      	beq.n	8015494 <__ssputs_r+0x80>
 801542e:	6825      	ldr	r5, [r4, #0]
 8015430:	6909      	ldr	r1, [r1, #16]
 8015432:	eba5 0901 	sub.w	r9, r5, r1
 8015436:	6965      	ldr	r5, [r4, #20]
 8015438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801543c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015440:	3301      	adds	r3, #1
 8015442:	444b      	add	r3, r9
 8015444:	106d      	asrs	r5, r5, #1
 8015446:	429d      	cmp	r5, r3
 8015448:	bf38      	it	cc
 801544a:	461d      	movcc	r5, r3
 801544c:	0553      	lsls	r3, r2, #21
 801544e:	d531      	bpl.n	80154b4 <__ssputs_r+0xa0>
 8015450:	4629      	mov	r1, r5
 8015452:	f000 fb39 	bl	8015ac8 <_malloc_r>
 8015456:	4606      	mov	r6, r0
 8015458:	b950      	cbnz	r0, 8015470 <__ssputs_r+0x5c>
 801545a:	230c      	movs	r3, #12
 801545c:	f8ca 3000 	str.w	r3, [sl]
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015466:	81a3      	strh	r3, [r4, #12]
 8015468:	f04f 30ff 	mov.w	r0, #4294967295
 801546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015470:	6921      	ldr	r1, [r4, #16]
 8015472:	464a      	mov	r2, r9
 8015474:	f7ff ff84 	bl	8015380 <memcpy>
 8015478:	89a3      	ldrh	r3, [r4, #12]
 801547a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015482:	81a3      	strh	r3, [r4, #12]
 8015484:	6126      	str	r6, [r4, #16]
 8015486:	6165      	str	r5, [r4, #20]
 8015488:	444e      	add	r6, r9
 801548a:	eba5 0509 	sub.w	r5, r5, r9
 801548e:	6026      	str	r6, [r4, #0]
 8015490:	60a5      	str	r5, [r4, #8]
 8015492:	463e      	mov	r6, r7
 8015494:	42be      	cmp	r6, r7
 8015496:	d900      	bls.n	801549a <__ssputs_r+0x86>
 8015498:	463e      	mov	r6, r7
 801549a:	4632      	mov	r2, r6
 801549c:	6820      	ldr	r0, [r4, #0]
 801549e:	4641      	mov	r1, r8
 80154a0:	f000 faa8 	bl	80159f4 <memmove>
 80154a4:	68a3      	ldr	r3, [r4, #8]
 80154a6:	6822      	ldr	r2, [r4, #0]
 80154a8:	1b9b      	subs	r3, r3, r6
 80154aa:	4432      	add	r2, r6
 80154ac:	60a3      	str	r3, [r4, #8]
 80154ae:	6022      	str	r2, [r4, #0]
 80154b0:	2000      	movs	r0, #0
 80154b2:	e7db      	b.n	801546c <__ssputs_r+0x58>
 80154b4:	462a      	mov	r2, r5
 80154b6:	f000 fb61 	bl	8015b7c <_realloc_r>
 80154ba:	4606      	mov	r6, r0
 80154bc:	2800      	cmp	r0, #0
 80154be:	d1e1      	bne.n	8015484 <__ssputs_r+0x70>
 80154c0:	6921      	ldr	r1, [r4, #16]
 80154c2:	4650      	mov	r0, sl
 80154c4:	f000 fab0 	bl	8015a28 <_free_r>
 80154c8:	e7c7      	b.n	801545a <__ssputs_r+0x46>
	...

080154cc <_svfiprintf_r>:
 80154cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d0:	4698      	mov	r8, r3
 80154d2:	898b      	ldrh	r3, [r1, #12]
 80154d4:	061b      	lsls	r3, r3, #24
 80154d6:	b09d      	sub	sp, #116	; 0x74
 80154d8:	4607      	mov	r7, r0
 80154da:	460d      	mov	r5, r1
 80154dc:	4614      	mov	r4, r2
 80154de:	d50e      	bpl.n	80154fe <_svfiprintf_r+0x32>
 80154e0:	690b      	ldr	r3, [r1, #16]
 80154e2:	b963      	cbnz	r3, 80154fe <_svfiprintf_r+0x32>
 80154e4:	2140      	movs	r1, #64	; 0x40
 80154e6:	f000 faef 	bl	8015ac8 <_malloc_r>
 80154ea:	6028      	str	r0, [r5, #0]
 80154ec:	6128      	str	r0, [r5, #16]
 80154ee:	b920      	cbnz	r0, 80154fa <_svfiprintf_r+0x2e>
 80154f0:	230c      	movs	r3, #12
 80154f2:	603b      	str	r3, [r7, #0]
 80154f4:	f04f 30ff 	mov.w	r0, #4294967295
 80154f8:	e0d1      	b.n	801569e <_svfiprintf_r+0x1d2>
 80154fa:	2340      	movs	r3, #64	; 0x40
 80154fc:	616b      	str	r3, [r5, #20]
 80154fe:	2300      	movs	r3, #0
 8015500:	9309      	str	r3, [sp, #36]	; 0x24
 8015502:	2320      	movs	r3, #32
 8015504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015508:	f8cd 800c 	str.w	r8, [sp, #12]
 801550c:	2330      	movs	r3, #48	; 0x30
 801550e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80156b8 <_svfiprintf_r+0x1ec>
 8015512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015516:	f04f 0901 	mov.w	r9, #1
 801551a:	4623      	mov	r3, r4
 801551c:	469a      	mov	sl, r3
 801551e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015522:	b10a      	cbz	r2, 8015528 <_svfiprintf_r+0x5c>
 8015524:	2a25      	cmp	r2, #37	; 0x25
 8015526:	d1f9      	bne.n	801551c <_svfiprintf_r+0x50>
 8015528:	ebba 0b04 	subs.w	fp, sl, r4
 801552c:	d00b      	beq.n	8015546 <_svfiprintf_r+0x7a>
 801552e:	465b      	mov	r3, fp
 8015530:	4622      	mov	r2, r4
 8015532:	4629      	mov	r1, r5
 8015534:	4638      	mov	r0, r7
 8015536:	f7ff ff6d 	bl	8015414 <__ssputs_r>
 801553a:	3001      	adds	r0, #1
 801553c:	f000 80aa 	beq.w	8015694 <_svfiprintf_r+0x1c8>
 8015540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015542:	445a      	add	r2, fp
 8015544:	9209      	str	r2, [sp, #36]	; 0x24
 8015546:	f89a 3000 	ldrb.w	r3, [sl]
 801554a:	2b00      	cmp	r3, #0
 801554c:	f000 80a2 	beq.w	8015694 <_svfiprintf_r+0x1c8>
 8015550:	2300      	movs	r3, #0
 8015552:	f04f 32ff 	mov.w	r2, #4294967295
 8015556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801555a:	f10a 0a01 	add.w	sl, sl, #1
 801555e:	9304      	str	r3, [sp, #16]
 8015560:	9307      	str	r3, [sp, #28]
 8015562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015566:	931a      	str	r3, [sp, #104]	; 0x68
 8015568:	4654      	mov	r4, sl
 801556a:	2205      	movs	r2, #5
 801556c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015570:	4851      	ldr	r0, [pc, #324]	; (80156b8 <_svfiprintf_r+0x1ec>)
 8015572:	f7ea feb5 	bl	80002e0 <memchr>
 8015576:	9a04      	ldr	r2, [sp, #16]
 8015578:	b9d8      	cbnz	r0, 80155b2 <_svfiprintf_r+0xe6>
 801557a:	06d0      	lsls	r0, r2, #27
 801557c:	bf44      	itt	mi
 801557e:	2320      	movmi	r3, #32
 8015580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015584:	0711      	lsls	r1, r2, #28
 8015586:	bf44      	itt	mi
 8015588:	232b      	movmi	r3, #43	; 0x2b
 801558a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801558e:	f89a 3000 	ldrb.w	r3, [sl]
 8015592:	2b2a      	cmp	r3, #42	; 0x2a
 8015594:	d015      	beq.n	80155c2 <_svfiprintf_r+0xf6>
 8015596:	9a07      	ldr	r2, [sp, #28]
 8015598:	4654      	mov	r4, sl
 801559a:	2000      	movs	r0, #0
 801559c:	f04f 0c0a 	mov.w	ip, #10
 80155a0:	4621      	mov	r1, r4
 80155a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155a6:	3b30      	subs	r3, #48	; 0x30
 80155a8:	2b09      	cmp	r3, #9
 80155aa:	d94e      	bls.n	801564a <_svfiprintf_r+0x17e>
 80155ac:	b1b0      	cbz	r0, 80155dc <_svfiprintf_r+0x110>
 80155ae:	9207      	str	r2, [sp, #28]
 80155b0:	e014      	b.n	80155dc <_svfiprintf_r+0x110>
 80155b2:	eba0 0308 	sub.w	r3, r0, r8
 80155b6:	fa09 f303 	lsl.w	r3, r9, r3
 80155ba:	4313      	orrs	r3, r2
 80155bc:	9304      	str	r3, [sp, #16]
 80155be:	46a2      	mov	sl, r4
 80155c0:	e7d2      	b.n	8015568 <_svfiprintf_r+0x9c>
 80155c2:	9b03      	ldr	r3, [sp, #12]
 80155c4:	1d19      	adds	r1, r3, #4
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	9103      	str	r1, [sp, #12]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	bfbb      	ittet	lt
 80155ce:	425b      	neglt	r3, r3
 80155d0:	f042 0202 	orrlt.w	r2, r2, #2
 80155d4:	9307      	strge	r3, [sp, #28]
 80155d6:	9307      	strlt	r3, [sp, #28]
 80155d8:	bfb8      	it	lt
 80155da:	9204      	strlt	r2, [sp, #16]
 80155dc:	7823      	ldrb	r3, [r4, #0]
 80155de:	2b2e      	cmp	r3, #46	; 0x2e
 80155e0:	d10c      	bne.n	80155fc <_svfiprintf_r+0x130>
 80155e2:	7863      	ldrb	r3, [r4, #1]
 80155e4:	2b2a      	cmp	r3, #42	; 0x2a
 80155e6:	d135      	bne.n	8015654 <_svfiprintf_r+0x188>
 80155e8:	9b03      	ldr	r3, [sp, #12]
 80155ea:	1d1a      	adds	r2, r3, #4
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	9203      	str	r2, [sp, #12]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	bfb8      	it	lt
 80155f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80155f8:	3402      	adds	r4, #2
 80155fa:	9305      	str	r3, [sp, #20]
 80155fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80156c8 <_svfiprintf_r+0x1fc>
 8015600:	7821      	ldrb	r1, [r4, #0]
 8015602:	2203      	movs	r2, #3
 8015604:	4650      	mov	r0, sl
 8015606:	f7ea fe6b 	bl	80002e0 <memchr>
 801560a:	b140      	cbz	r0, 801561e <_svfiprintf_r+0x152>
 801560c:	2340      	movs	r3, #64	; 0x40
 801560e:	eba0 000a 	sub.w	r0, r0, sl
 8015612:	fa03 f000 	lsl.w	r0, r3, r0
 8015616:	9b04      	ldr	r3, [sp, #16]
 8015618:	4303      	orrs	r3, r0
 801561a:	3401      	adds	r4, #1
 801561c:	9304      	str	r3, [sp, #16]
 801561e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015622:	4826      	ldr	r0, [pc, #152]	; (80156bc <_svfiprintf_r+0x1f0>)
 8015624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015628:	2206      	movs	r2, #6
 801562a:	f7ea fe59 	bl	80002e0 <memchr>
 801562e:	2800      	cmp	r0, #0
 8015630:	d038      	beq.n	80156a4 <_svfiprintf_r+0x1d8>
 8015632:	4b23      	ldr	r3, [pc, #140]	; (80156c0 <_svfiprintf_r+0x1f4>)
 8015634:	bb1b      	cbnz	r3, 801567e <_svfiprintf_r+0x1b2>
 8015636:	9b03      	ldr	r3, [sp, #12]
 8015638:	3307      	adds	r3, #7
 801563a:	f023 0307 	bic.w	r3, r3, #7
 801563e:	3308      	adds	r3, #8
 8015640:	9303      	str	r3, [sp, #12]
 8015642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015644:	4433      	add	r3, r6
 8015646:	9309      	str	r3, [sp, #36]	; 0x24
 8015648:	e767      	b.n	801551a <_svfiprintf_r+0x4e>
 801564a:	fb0c 3202 	mla	r2, ip, r2, r3
 801564e:	460c      	mov	r4, r1
 8015650:	2001      	movs	r0, #1
 8015652:	e7a5      	b.n	80155a0 <_svfiprintf_r+0xd4>
 8015654:	2300      	movs	r3, #0
 8015656:	3401      	adds	r4, #1
 8015658:	9305      	str	r3, [sp, #20]
 801565a:	4619      	mov	r1, r3
 801565c:	f04f 0c0a 	mov.w	ip, #10
 8015660:	4620      	mov	r0, r4
 8015662:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015666:	3a30      	subs	r2, #48	; 0x30
 8015668:	2a09      	cmp	r2, #9
 801566a:	d903      	bls.n	8015674 <_svfiprintf_r+0x1a8>
 801566c:	2b00      	cmp	r3, #0
 801566e:	d0c5      	beq.n	80155fc <_svfiprintf_r+0x130>
 8015670:	9105      	str	r1, [sp, #20]
 8015672:	e7c3      	b.n	80155fc <_svfiprintf_r+0x130>
 8015674:	fb0c 2101 	mla	r1, ip, r1, r2
 8015678:	4604      	mov	r4, r0
 801567a:	2301      	movs	r3, #1
 801567c:	e7f0      	b.n	8015660 <_svfiprintf_r+0x194>
 801567e:	ab03      	add	r3, sp, #12
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	462a      	mov	r2, r5
 8015684:	4b0f      	ldr	r3, [pc, #60]	; (80156c4 <_svfiprintf_r+0x1f8>)
 8015686:	a904      	add	r1, sp, #16
 8015688:	4638      	mov	r0, r7
 801568a:	f3af 8000 	nop.w
 801568e:	1c42      	adds	r2, r0, #1
 8015690:	4606      	mov	r6, r0
 8015692:	d1d6      	bne.n	8015642 <_svfiprintf_r+0x176>
 8015694:	89ab      	ldrh	r3, [r5, #12]
 8015696:	065b      	lsls	r3, r3, #25
 8015698:	f53f af2c 	bmi.w	80154f4 <_svfiprintf_r+0x28>
 801569c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801569e:	b01d      	add	sp, #116	; 0x74
 80156a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a4:	ab03      	add	r3, sp, #12
 80156a6:	9300      	str	r3, [sp, #0]
 80156a8:	462a      	mov	r2, r5
 80156aa:	4b06      	ldr	r3, [pc, #24]	; (80156c4 <_svfiprintf_r+0x1f8>)
 80156ac:	a904      	add	r1, sp, #16
 80156ae:	4638      	mov	r0, r7
 80156b0:	f000 f87a 	bl	80157a8 <_printf_i>
 80156b4:	e7eb      	b.n	801568e <_svfiprintf_r+0x1c2>
 80156b6:	bf00      	nop
 80156b8:	08015db4 	.word	0x08015db4
 80156bc:	08015dbe 	.word	0x08015dbe
 80156c0:	00000000 	.word	0x00000000
 80156c4:	08015415 	.word	0x08015415
 80156c8:	08015dba 	.word	0x08015dba

080156cc <_printf_common>:
 80156cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156d0:	4616      	mov	r6, r2
 80156d2:	4699      	mov	r9, r3
 80156d4:	688a      	ldr	r2, [r1, #8]
 80156d6:	690b      	ldr	r3, [r1, #16]
 80156d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80156dc:	4293      	cmp	r3, r2
 80156de:	bfb8      	it	lt
 80156e0:	4613      	movlt	r3, r2
 80156e2:	6033      	str	r3, [r6, #0]
 80156e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80156e8:	4607      	mov	r7, r0
 80156ea:	460c      	mov	r4, r1
 80156ec:	b10a      	cbz	r2, 80156f2 <_printf_common+0x26>
 80156ee:	3301      	adds	r3, #1
 80156f0:	6033      	str	r3, [r6, #0]
 80156f2:	6823      	ldr	r3, [r4, #0]
 80156f4:	0699      	lsls	r1, r3, #26
 80156f6:	bf42      	ittt	mi
 80156f8:	6833      	ldrmi	r3, [r6, #0]
 80156fa:	3302      	addmi	r3, #2
 80156fc:	6033      	strmi	r3, [r6, #0]
 80156fe:	6825      	ldr	r5, [r4, #0]
 8015700:	f015 0506 	ands.w	r5, r5, #6
 8015704:	d106      	bne.n	8015714 <_printf_common+0x48>
 8015706:	f104 0a19 	add.w	sl, r4, #25
 801570a:	68e3      	ldr	r3, [r4, #12]
 801570c:	6832      	ldr	r2, [r6, #0]
 801570e:	1a9b      	subs	r3, r3, r2
 8015710:	42ab      	cmp	r3, r5
 8015712:	dc26      	bgt.n	8015762 <_printf_common+0x96>
 8015714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015718:	1e13      	subs	r3, r2, #0
 801571a:	6822      	ldr	r2, [r4, #0]
 801571c:	bf18      	it	ne
 801571e:	2301      	movne	r3, #1
 8015720:	0692      	lsls	r2, r2, #26
 8015722:	d42b      	bmi.n	801577c <_printf_common+0xb0>
 8015724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015728:	4649      	mov	r1, r9
 801572a:	4638      	mov	r0, r7
 801572c:	47c0      	blx	r8
 801572e:	3001      	adds	r0, #1
 8015730:	d01e      	beq.n	8015770 <_printf_common+0xa4>
 8015732:	6823      	ldr	r3, [r4, #0]
 8015734:	68e5      	ldr	r5, [r4, #12]
 8015736:	6832      	ldr	r2, [r6, #0]
 8015738:	f003 0306 	and.w	r3, r3, #6
 801573c:	2b04      	cmp	r3, #4
 801573e:	bf08      	it	eq
 8015740:	1aad      	subeq	r5, r5, r2
 8015742:	68a3      	ldr	r3, [r4, #8]
 8015744:	6922      	ldr	r2, [r4, #16]
 8015746:	bf0c      	ite	eq
 8015748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801574c:	2500      	movne	r5, #0
 801574e:	4293      	cmp	r3, r2
 8015750:	bfc4      	itt	gt
 8015752:	1a9b      	subgt	r3, r3, r2
 8015754:	18ed      	addgt	r5, r5, r3
 8015756:	2600      	movs	r6, #0
 8015758:	341a      	adds	r4, #26
 801575a:	42b5      	cmp	r5, r6
 801575c:	d11a      	bne.n	8015794 <_printf_common+0xc8>
 801575e:	2000      	movs	r0, #0
 8015760:	e008      	b.n	8015774 <_printf_common+0xa8>
 8015762:	2301      	movs	r3, #1
 8015764:	4652      	mov	r2, sl
 8015766:	4649      	mov	r1, r9
 8015768:	4638      	mov	r0, r7
 801576a:	47c0      	blx	r8
 801576c:	3001      	adds	r0, #1
 801576e:	d103      	bne.n	8015778 <_printf_common+0xac>
 8015770:	f04f 30ff 	mov.w	r0, #4294967295
 8015774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015778:	3501      	adds	r5, #1
 801577a:	e7c6      	b.n	801570a <_printf_common+0x3e>
 801577c:	18e1      	adds	r1, r4, r3
 801577e:	1c5a      	adds	r2, r3, #1
 8015780:	2030      	movs	r0, #48	; 0x30
 8015782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015786:	4422      	add	r2, r4
 8015788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801578c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015790:	3302      	adds	r3, #2
 8015792:	e7c7      	b.n	8015724 <_printf_common+0x58>
 8015794:	2301      	movs	r3, #1
 8015796:	4622      	mov	r2, r4
 8015798:	4649      	mov	r1, r9
 801579a:	4638      	mov	r0, r7
 801579c:	47c0      	blx	r8
 801579e:	3001      	adds	r0, #1
 80157a0:	d0e6      	beq.n	8015770 <_printf_common+0xa4>
 80157a2:	3601      	adds	r6, #1
 80157a4:	e7d9      	b.n	801575a <_printf_common+0x8e>
	...

080157a8 <_printf_i>:
 80157a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157ac:	460c      	mov	r4, r1
 80157ae:	4691      	mov	r9, r2
 80157b0:	7e27      	ldrb	r7, [r4, #24]
 80157b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157b4:	2f78      	cmp	r7, #120	; 0x78
 80157b6:	4680      	mov	r8, r0
 80157b8:	469a      	mov	sl, r3
 80157ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80157be:	d807      	bhi.n	80157d0 <_printf_i+0x28>
 80157c0:	2f62      	cmp	r7, #98	; 0x62
 80157c2:	d80a      	bhi.n	80157da <_printf_i+0x32>
 80157c4:	2f00      	cmp	r7, #0
 80157c6:	f000 80d8 	beq.w	801597a <_printf_i+0x1d2>
 80157ca:	2f58      	cmp	r7, #88	; 0x58
 80157cc:	f000 80a3 	beq.w	8015916 <_printf_i+0x16e>
 80157d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80157d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80157d8:	e03a      	b.n	8015850 <_printf_i+0xa8>
 80157da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80157de:	2b15      	cmp	r3, #21
 80157e0:	d8f6      	bhi.n	80157d0 <_printf_i+0x28>
 80157e2:	a001      	add	r0, pc, #4	; (adr r0, 80157e8 <_printf_i+0x40>)
 80157e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80157e8:	08015841 	.word	0x08015841
 80157ec:	08015855 	.word	0x08015855
 80157f0:	080157d1 	.word	0x080157d1
 80157f4:	080157d1 	.word	0x080157d1
 80157f8:	080157d1 	.word	0x080157d1
 80157fc:	080157d1 	.word	0x080157d1
 8015800:	08015855 	.word	0x08015855
 8015804:	080157d1 	.word	0x080157d1
 8015808:	080157d1 	.word	0x080157d1
 801580c:	080157d1 	.word	0x080157d1
 8015810:	080157d1 	.word	0x080157d1
 8015814:	08015961 	.word	0x08015961
 8015818:	08015885 	.word	0x08015885
 801581c:	08015943 	.word	0x08015943
 8015820:	080157d1 	.word	0x080157d1
 8015824:	080157d1 	.word	0x080157d1
 8015828:	08015983 	.word	0x08015983
 801582c:	080157d1 	.word	0x080157d1
 8015830:	08015885 	.word	0x08015885
 8015834:	080157d1 	.word	0x080157d1
 8015838:	080157d1 	.word	0x080157d1
 801583c:	0801594b 	.word	0x0801594b
 8015840:	680b      	ldr	r3, [r1, #0]
 8015842:	1d1a      	adds	r2, r3, #4
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	600a      	str	r2, [r1, #0]
 8015848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801584c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015850:	2301      	movs	r3, #1
 8015852:	e0a3      	b.n	801599c <_printf_i+0x1f4>
 8015854:	6825      	ldr	r5, [r4, #0]
 8015856:	6808      	ldr	r0, [r1, #0]
 8015858:	062e      	lsls	r6, r5, #24
 801585a:	f100 0304 	add.w	r3, r0, #4
 801585e:	d50a      	bpl.n	8015876 <_printf_i+0xce>
 8015860:	6805      	ldr	r5, [r0, #0]
 8015862:	600b      	str	r3, [r1, #0]
 8015864:	2d00      	cmp	r5, #0
 8015866:	da03      	bge.n	8015870 <_printf_i+0xc8>
 8015868:	232d      	movs	r3, #45	; 0x2d
 801586a:	426d      	negs	r5, r5
 801586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015870:	485e      	ldr	r0, [pc, #376]	; (80159ec <_printf_i+0x244>)
 8015872:	230a      	movs	r3, #10
 8015874:	e019      	b.n	80158aa <_printf_i+0x102>
 8015876:	f015 0f40 	tst.w	r5, #64	; 0x40
 801587a:	6805      	ldr	r5, [r0, #0]
 801587c:	600b      	str	r3, [r1, #0]
 801587e:	bf18      	it	ne
 8015880:	b22d      	sxthne	r5, r5
 8015882:	e7ef      	b.n	8015864 <_printf_i+0xbc>
 8015884:	680b      	ldr	r3, [r1, #0]
 8015886:	6825      	ldr	r5, [r4, #0]
 8015888:	1d18      	adds	r0, r3, #4
 801588a:	6008      	str	r0, [r1, #0]
 801588c:	0628      	lsls	r0, r5, #24
 801588e:	d501      	bpl.n	8015894 <_printf_i+0xec>
 8015890:	681d      	ldr	r5, [r3, #0]
 8015892:	e002      	b.n	801589a <_printf_i+0xf2>
 8015894:	0669      	lsls	r1, r5, #25
 8015896:	d5fb      	bpl.n	8015890 <_printf_i+0xe8>
 8015898:	881d      	ldrh	r5, [r3, #0]
 801589a:	4854      	ldr	r0, [pc, #336]	; (80159ec <_printf_i+0x244>)
 801589c:	2f6f      	cmp	r7, #111	; 0x6f
 801589e:	bf0c      	ite	eq
 80158a0:	2308      	moveq	r3, #8
 80158a2:	230a      	movne	r3, #10
 80158a4:	2100      	movs	r1, #0
 80158a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80158aa:	6866      	ldr	r6, [r4, #4]
 80158ac:	60a6      	str	r6, [r4, #8]
 80158ae:	2e00      	cmp	r6, #0
 80158b0:	bfa2      	ittt	ge
 80158b2:	6821      	ldrge	r1, [r4, #0]
 80158b4:	f021 0104 	bicge.w	r1, r1, #4
 80158b8:	6021      	strge	r1, [r4, #0]
 80158ba:	b90d      	cbnz	r5, 80158c0 <_printf_i+0x118>
 80158bc:	2e00      	cmp	r6, #0
 80158be:	d04d      	beq.n	801595c <_printf_i+0x1b4>
 80158c0:	4616      	mov	r6, r2
 80158c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80158c6:	fb03 5711 	mls	r7, r3, r1, r5
 80158ca:	5dc7      	ldrb	r7, [r0, r7]
 80158cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158d0:	462f      	mov	r7, r5
 80158d2:	42bb      	cmp	r3, r7
 80158d4:	460d      	mov	r5, r1
 80158d6:	d9f4      	bls.n	80158c2 <_printf_i+0x11a>
 80158d8:	2b08      	cmp	r3, #8
 80158da:	d10b      	bne.n	80158f4 <_printf_i+0x14c>
 80158dc:	6823      	ldr	r3, [r4, #0]
 80158de:	07df      	lsls	r7, r3, #31
 80158e0:	d508      	bpl.n	80158f4 <_printf_i+0x14c>
 80158e2:	6923      	ldr	r3, [r4, #16]
 80158e4:	6861      	ldr	r1, [r4, #4]
 80158e6:	4299      	cmp	r1, r3
 80158e8:	bfde      	ittt	le
 80158ea:	2330      	movle	r3, #48	; 0x30
 80158ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80158f4:	1b92      	subs	r2, r2, r6
 80158f6:	6122      	str	r2, [r4, #16]
 80158f8:	f8cd a000 	str.w	sl, [sp]
 80158fc:	464b      	mov	r3, r9
 80158fe:	aa03      	add	r2, sp, #12
 8015900:	4621      	mov	r1, r4
 8015902:	4640      	mov	r0, r8
 8015904:	f7ff fee2 	bl	80156cc <_printf_common>
 8015908:	3001      	adds	r0, #1
 801590a:	d14c      	bne.n	80159a6 <_printf_i+0x1fe>
 801590c:	f04f 30ff 	mov.w	r0, #4294967295
 8015910:	b004      	add	sp, #16
 8015912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015916:	4835      	ldr	r0, [pc, #212]	; (80159ec <_printf_i+0x244>)
 8015918:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801591c:	6823      	ldr	r3, [r4, #0]
 801591e:	680e      	ldr	r6, [r1, #0]
 8015920:	061f      	lsls	r7, r3, #24
 8015922:	f856 5b04 	ldr.w	r5, [r6], #4
 8015926:	600e      	str	r6, [r1, #0]
 8015928:	d514      	bpl.n	8015954 <_printf_i+0x1ac>
 801592a:	07d9      	lsls	r1, r3, #31
 801592c:	bf44      	itt	mi
 801592e:	f043 0320 	orrmi.w	r3, r3, #32
 8015932:	6023      	strmi	r3, [r4, #0]
 8015934:	b91d      	cbnz	r5, 801593e <_printf_i+0x196>
 8015936:	6823      	ldr	r3, [r4, #0]
 8015938:	f023 0320 	bic.w	r3, r3, #32
 801593c:	6023      	str	r3, [r4, #0]
 801593e:	2310      	movs	r3, #16
 8015940:	e7b0      	b.n	80158a4 <_printf_i+0xfc>
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	f043 0320 	orr.w	r3, r3, #32
 8015948:	6023      	str	r3, [r4, #0]
 801594a:	2378      	movs	r3, #120	; 0x78
 801594c:	4828      	ldr	r0, [pc, #160]	; (80159f0 <_printf_i+0x248>)
 801594e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015952:	e7e3      	b.n	801591c <_printf_i+0x174>
 8015954:	065e      	lsls	r6, r3, #25
 8015956:	bf48      	it	mi
 8015958:	b2ad      	uxthmi	r5, r5
 801595a:	e7e6      	b.n	801592a <_printf_i+0x182>
 801595c:	4616      	mov	r6, r2
 801595e:	e7bb      	b.n	80158d8 <_printf_i+0x130>
 8015960:	680b      	ldr	r3, [r1, #0]
 8015962:	6826      	ldr	r6, [r4, #0]
 8015964:	6960      	ldr	r0, [r4, #20]
 8015966:	1d1d      	adds	r5, r3, #4
 8015968:	600d      	str	r5, [r1, #0]
 801596a:	0635      	lsls	r5, r6, #24
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	d501      	bpl.n	8015974 <_printf_i+0x1cc>
 8015970:	6018      	str	r0, [r3, #0]
 8015972:	e002      	b.n	801597a <_printf_i+0x1d2>
 8015974:	0671      	lsls	r1, r6, #25
 8015976:	d5fb      	bpl.n	8015970 <_printf_i+0x1c8>
 8015978:	8018      	strh	r0, [r3, #0]
 801597a:	2300      	movs	r3, #0
 801597c:	6123      	str	r3, [r4, #16]
 801597e:	4616      	mov	r6, r2
 8015980:	e7ba      	b.n	80158f8 <_printf_i+0x150>
 8015982:	680b      	ldr	r3, [r1, #0]
 8015984:	1d1a      	adds	r2, r3, #4
 8015986:	600a      	str	r2, [r1, #0]
 8015988:	681e      	ldr	r6, [r3, #0]
 801598a:	6862      	ldr	r2, [r4, #4]
 801598c:	2100      	movs	r1, #0
 801598e:	4630      	mov	r0, r6
 8015990:	f7ea fca6 	bl	80002e0 <memchr>
 8015994:	b108      	cbz	r0, 801599a <_printf_i+0x1f2>
 8015996:	1b80      	subs	r0, r0, r6
 8015998:	6060      	str	r0, [r4, #4]
 801599a:	6863      	ldr	r3, [r4, #4]
 801599c:	6123      	str	r3, [r4, #16]
 801599e:	2300      	movs	r3, #0
 80159a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159a4:	e7a8      	b.n	80158f8 <_printf_i+0x150>
 80159a6:	6923      	ldr	r3, [r4, #16]
 80159a8:	4632      	mov	r2, r6
 80159aa:	4649      	mov	r1, r9
 80159ac:	4640      	mov	r0, r8
 80159ae:	47d0      	blx	sl
 80159b0:	3001      	adds	r0, #1
 80159b2:	d0ab      	beq.n	801590c <_printf_i+0x164>
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	079b      	lsls	r3, r3, #30
 80159b8:	d413      	bmi.n	80159e2 <_printf_i+0x23a>
 80159ba:	68e0      	ldr	r0, [r4, #12]
 80159bc:	9b03      	ldr	r3, [sp, #12]
 80159be:	4298      	cmp	r0, r3
 80159c0:	bfb8      	it	lt
 80159c2:	4618      	movlt	r0, r3
 80159c4:	e7a4      	b.n	8015910 <_printf_i+0x168>
 80159c6:	2301      	movs	r3, #1
 80159c8:	4632      	mov	r2, r6
 80159ca:	4649      	mov	r1, r9
 80159cc:	4640      	mov	r0, r8
 80159ce:	47d0      	blx	sl
 80159d0:	3001      	adds	r0, #1
 80159d2:	d09b      	beq.n	801590c <_printf_i+0x164>
 80159d4:	3501      	adds	r5, #1
 80159d6:	68e3      	ldr	r3, [r4, #12]
 80159d8:	9903      	ldr	r1, [sp, #12]
 80159da:	1a5b      	subs	r3, r3, r1
 80159dc:	42ab      	cmp	r3, r5
 80159de:	dcf2      	bgt.n	80159c6 <_printf_i+0x21e>
 80159e0:	e7eb      	b.n	80159ba <_printf_i+0x212>
 80159e2:	2500      	movs	r5, #0
 80159e4:	f104 0619 	add.w	r6, r4, #25
 80159e8:	e7f5      	b.n	80159d6 <_printf_i+0x22e>
 80159ea:	bf00      	nop
 80159ec:	08015dc5 	.word	0x08015dc5
 80159f0:	08015dd6 	.word	0x08015dd6

080159f4 <memmove>:
 80159f4:	4288      	cmp	r0, r1
 80159f6:	b510      	push	{r4, lr}
 80159f8:	eb01 0402 	add.w	r4, r1, r2
 80159fc:	d902      	bls.n	8015a04 <memmove+0x10>
 80159fe:	4284      	cmp	r4, r0
 8015a00:	4623      	mov	r3, r4
 8015a02:	d807      	bhi.n	8015a14 <memmove+0x20>
 8015a04:	1e43      	subs	r3, r0, #1
 8015a06:	42a1      	cmp	r1, r4
 8015a08:	d008      	beq.n	8015a1c <memmove+0x28>
 8015a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a12:	e7f8      	b.n	8015a06 <memmove+0x12>
 8015a14:	4402      	add	r2, r0
 8015a16:	4601      	mov	r1, r0
 8015a18:	428a      	cmp	r2, r1
 8015a1a:	d100      	bne.n	8015a1e <memmove+0x2a>
 8015a1c:	bd10      	pop	{r4, pc}
 8015a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a26:	e7f7      	b.n	8015a18 <memmove+0x24>

08015a28 <_free_r>:
 8015a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a2a:	2900      	cmp	r1, #0
 8015a2c:	d048      	beq.n	8015ac0 <_free_r+0x98>
 8015a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a32:	9001      	str	r0, [sp, #4]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f1a1 0404 	sub.w	r4, r1, #4
 8015a3a:	bfb8      	it	lt
 8015a3c:	18e4      	addlt	r4, r4, r3
 8015a3e:	f000 f8d3 	bl	8015be8 <__malloc_lock>
 8015a42:	4a20      	ldr	r2, [pc, #128]	; (8015ac4 <_free_r+0x9c>)
 8015a44:	9801      	ldr	r0, [sp, #4]
 8015a46:	6813      	ldr	r3, [r2, #0]
 8015a48:	4615      	mov	r5, r2
 8015a4a:	b933      	cbnz	r3, 8015a5a <_free_r+0x32>
 8015a4c:	6063      	str	r3, [r4, #4]
 8015a4e:	6014      	str	r4, [r2, #0]
 8015a50:	b003      	add	sp, #12
 8015a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a56:	f000 b8cd 	b.w	8015bf4 <__malloc_unlock>
 8015a5a:	42a3      	cmp	r3, r4
 8015a5c:	d90b      	bls.n	8015a76 <_free_r+0x4e>
 8015a5e:	6821      	ldr	r1, [r4, #0]
 8015a60:	1862      	adds	r2, r4, r1
 8015a62:	4293      	cmp	r3, r2
 8015a64:	bf04      	itt	eq
 8015a66:	681a      	ldreq	r2, [r3, #0]
 8015a68:	685b      	ldreq	r3, [r3, #4]
 8015a6a:	6063      	str	r3, [r4, #4]
 8015a6c:	bf04      	itt	eq
 8015a6e:	1852      	addeq	r2, r2, r1
 8015a70:	6022      	streq	r2, [r4, #0]
 8015a72:	602c      	str	r4, [r5, #0]
 8015a74:	e7ec      	b.n	8015a50 <_free_r+0x28>
 8015a76:	461a      	mov	r2, r3
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	b10b      	cbz	r3, 8015a80 <_free_r+0x58>
 8015a7c:	42a3      	cmp	r3, r4
 8015a7e:	d9fa      	bls.n	8015a76 <_free_r+0x4e>
 8015a80:	6811      	ldr	r1, [r2, #0]
 8015a82:	1855      	adds	r5, r2, r1
 8015a84:	42a5      	cmp	r5, r4
 8015a86:	d10b      	bne.n	8015aa0 <_free_r+0x78>
 8015a88:	6824      	ldr	r4, [r4, #0]
 8015a8a:	4421      	add	r1, r4
 8015a8c:	1854      	adds	r4, r2, r1
 8015a8e:	42a3      	cmp	r3, r4
 8015a90:	6011      	str	r1, [r2, #0]
 8015a92:	d1dd      	bne.n	8015a50 <_free_r+0x28>
 8015a94:	681c      	ldr	r4, [r3, #0]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	6053      	str	r3, [r2, #4]
 8015a9a:	4421      	add	r1, r4
 8015a9c:	6011      	str	r1, [r2, #0]
 8015a9e:	e7d7      	b.n	8015a50 <_free_r+0x28>
 8015aa0:	d902      	bls.n	8015aa8 <_free_r+0x80>
 8015aa2:	230c      	movs	r3, #12
 8015aa4:	6003      	str	r3, [r0, #0]
 8015aa6:	e7d3      	b.n	8015a50 <_free_r+0x28>
 8015aa8:	6825      	ldr	r5, [r4, #0]
 8015aaa:	1961      	adds	r1, r4, r5
 8015aac:	428b      	cmp	r3, r1
 8015aae:	bf04      	itt	eq
 8015ab0:	6819      	ldreq	r1, [r3, #0]
 8015ab2:	685b      	ldreq	r3, [r3, #4]
 8015ab4:	6063      	str	r3, [r4, #4]
 8015ab6:	bf04      	itt	eq
 8015ab8:	1949      	addeq	r1, r1, r5
 8015aba:	6021      	streq	r1, [r4, #0]
 8015abc:	6054      	str	r4, [r2, #4]
 8015abe:	e7c7      	b.n	8015a50 <_free_r+0x28>
 8015ac0:	b003      	add	sp, #12
 8015ac2:	bd30      	pop	{r4, r5, pc}
 8015ac4:	24064a8c 	.word	0x24064a8c

08015ac8 <_malloc_r>:
 8015ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aca:	1ccd      	adds	r5, r1, #3
 8015acc:	f025 0503 	bic.w	r5, r5, #3
 8015ad0:	3508      	adds	r5, #8
 8015ad2:	2d0c      	cmp	r5, #12
 8015ad4:	bf38      	it	cc
 8015ad6:	250c      	movcc	r5, #12
 8015ad8:	2d00      	cmp	r5, #0
 8015ada:	4606      	mov	r6, r0
 8015adc:	db01      	blt.n	8015ae2 <_malloc_r+0x1a>
 8015ade:	42a9      	cmp	r1, r5
 8015ae0:	d903      	bls.n	8015aea <_malloc_r+0x22>
 8015ae2:	230c      	movs	r3, #12
 8015ae4:	6033      	str	r3, [r6, #0]
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aea:	f000 f87d 	bl	8015be8 <__malloc_lock>
 8015aee:	4921      	ldr	r1, [pc, #132]	; (8015b74 <_malloc_r+0xac>)
 8015af0:	680a      	ldr	r2, [r1, #0]
 8015af2:	4614      	mov	r4, r2
 8015af4:	b99c      	cbnz	r4, 8015b1e <_malloc_r+0x56>
 8015af6:	4f20      	ldr	r7, [pc, #128]	; (8015b78 <_malloc_r+0xb0>)
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	b923      	cbnz	r3, 8015b06 <_malloc_r+0x3e>
 8015afc:	4621      	mov	r1, r4
 8015afe:	4630      	mov	r0, r6
 8015b00:	f000 f862 	bl	8015bc8 <_sbrk_r>
 8015b04:	6038      	str	r0, [r7, #0]
 8015b06:	4629      	mov	r1, r5
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f000 f85d 	bl	8015bc8 <_sbrk_r>
 8015b0e:	1c43      	adds	r3, r0, #1
 8015b10:	d123      	bne.n	8015b5a <_malloc_r+0x92>
 8015b12:	230c      	movs	r3, #12
 8015b14:	6033      	str	r3, [r6, #0]
 8015b16:	4630      	mov	r0, r6
 8015b18:	f000 f86c 	bl	8015bf4 <__malloc_unlock>
 8015b1c:	e7e3      	b.n	8015ae6 <_malloc_r+0x1e>
 8015b1e:	6823      	ldr	r3, [r4, #0]
 8015b20:	1b5b      	subs	r3, r3, r5
 8015b22:	d417      	bmi.n	8015b54 <_malloc_r+0x8c>
 8015b24:	2b0b      	cmp	r3, #11
 8015b26:	d903      	bls.n	8015b30 <_malloc_r+0x68>
 8015b28:	6023      	str	r3, [r4, #0]
 8015b2a:	441c      	add	r4, r3
 8015b2c:	6025      	str	r5, [r4, #0]
 8015b2e:	e004      	b.n	8015b3a <_malloc_r+0x72>
 8015b30:	6863      	ldr	r3, [r4, #4]
 8015b32:	42a2      	cmp	r2, r4
 8015b34:	bf0c      	ite	eq
 8015b36:	600b      	streq	r3, [r1, #0]
 8015b38:	6053      	strne	r3, [r2, #4]
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f000 f85a 	bl	8015bf4 <__malloc_unlock>
 8015b40:	f104 000b 	add.w	r0, r4, #11
 8015b44:	1d23      	adds	r3, r4, #4
 8015b46:	f020 0007 	bic.w	r0, r0, #7
 8015b4a:	1ac2      	subs	r2, r0, r3
 8015b4c:	d0cc      	beq.n	8015ae8 <_malloc_r+0x20>
 8015b4e:	1a1b      	subs	r3, r3, r0
 8015b50:	50a3      	str	r3, [r4, r2]
 8015b52:	e7c9      	b.n	8015ae8 <_malloc_r+0x20>
 8015b54:	4622      	mov	r2, r4
 8015b56:	6864      	ldr	r4, [r4, #4]
 8015b58:	e7cc      	b.n	8015af4 <_malloc_r+0x2c>
 8015b5a:	1cc4      	adds	r4, r0, #3
 8015b5c:	f024 0403 	bic.w	r4, r4, #3
 8015b60:	42a0      	cmp	r0, r4
 8015b62:	d0e3      	beq.n	8015b2c <_malloc_r+0x64>
 8015b64:	1a21      	subs	r1, r4, r0
 8015b66:	4630      	mov	r0, r6
 8015b68:	f000 f82e 	bl	8015bc8 <_sbrk_r>
 8015b6c:	3001      	adds	r0, #1
 8015b6e:	d1dd      	bne.n	8015b2c <_malloc_r+0x64>
 8015b70:	e7cf      	b.n	8015b12 <_malloc_r+0x4a>
 8015b72:	bf00      	nop
 8015b74:	24064a8c 	.word	0x24064a8c
 8015b78:	24064a90 	.word	0x24064a90

08015b7c <_realloc_r>:
 8015b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b7e:	4607      	mov	r7, r0
 8015b80:	4614      	mov	r4, r2
 8015b82:	460e      	mov	r6, r1
 8015b84:	b921      	cbnz	r1, 8015b90 <_realloc_r+0x14>
 8015b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015b8a:	4611      	mov	r1, r2
 8015b8c:	f7ff bf9c 	b.w	8015ac8 <_malloc_r>
 8015b90:	b922      	cbnz	r2, 8015b9c <_realloc_r+0x20>
 8015b92:	f7ff ff49 	bl	8015a28 <_free_r>
 8015b96:	4625      	mov	r5, r4
 8015b98:	4628      	mov	r0, r5
 8015b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b9c:	f000 f830 	bl	8015c00 <_malloc_usable_size_r>
 8015ba0:	42a0      	cmp	r0, r4
 8015ba2:	d20f      	bcs.n	8015bc4 <_realloc_r+0x48>
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	4638      	mov	r0, r7
 8015ba8:	f7ff ff8e 	bl	8015ac8 <_malloc_r>
 8015bac:	4605      	mov	r5, r0
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	d0f2      	beq.n	8015b98 <_realloc_r+0x1c>
 8015bb2:	4631      	mov	r1, r6
 8015bb4:	4622      	mov	r2, r4
 8015bb6:	f7ff fbe3 	bl	8015380 <memcpy>
 8015bba:	4631      	mov	r1, r6
 8015bbc:	4638      	mov	r0, r7
 8015bbe:	f7ff ff33 	bl	8015a28 <_free_r>
 8015bc2:	e7e9      	b.n	8015b98 <_realloc_r+0x1c>
 8015bc4:	4635      	mov	r5, r6
 8015bc6:	e7e7      	b.n	8015b98 <_realloc_r+0x1c>

08015bc8 <_sbrk_r>:
 8015bc8:	b538      	push	{r3, r4, r5, lr}
 8015bca:	4d06      	ldr	r5, [pc, #24]	; (8015be4 <_sbrk_r+0x1c>)
 8015bcc:	2300      	movs	r3, #0
 8015bce:	4604      	mov	r4, r0
 8015bd0:	4608      	mov	r0, r1
 8015bd2:	602b      	str	r3, [r5, #0]
 8015bd4:	f7eb fc88 	bl	80014e8 <_sbrk>
 8015bd8:	1c43      	adds	r3, r0, #1
 8015bda:	d102      	bne.n	8015be2 <_sbrk_r+0x1a>
 8015bdc:	682b      	ldr	r3, [r5, #0]
 8015bde:	b103      	cbz	r3, 8015be2 <_sbrk_r+0x1a>
 8015be0:	6023      	str	r3, [r4, #0]
 8015be2:	bd38      	pop	{r3, r4, r5, pc}
 8015be4:	24070fec 	.word	0x24070fec

08015be8 <__malloc_lock>:
 8015be8:	4801      	ldr	r0, [pc, #4]	; (8015bf0 <__malloc_lock+0x8>)
 8015bea:	f000 b811 	b.w	8015c10 <__retarget_lock_acquire_recursive>
 8015bee:	bf00      	nop
 8015bf0:	24070ff4 	.word	0x24070ff4

08015bf4 <__malloc_unlock>:
 8015bf4:	4801      	ldr	r0, [pc, #4]	; (8015bfc <__malloc_unlock+0x8>)
 8015bf6:	f000 b80c 	b.w	8015c12 <__retarget_lock_release_recursive>
 8015bfa:	bf00      	nop
 8015bfc:	24070ff4 	.word	0x24070ff4

08015c00 <_malloc_usable_size_r>:
 8015c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c04:	1f18      	subs	r0, r3, #4
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	bfbc      	itt	lt
 8015c0a:	580b      	ldrlt	r3, [r1, r0]
 8015c0c:	18c0      	addlt	r0, r0, r3
 8015c0e:	4770      	bx	lr

08015c10 <__retarget_lock_acquire_recursive>:
 8015c10:	4770      	bx	lr

08015c12 <__retarget_lock_release_recursive>:
 8015c12:	4770      	bx	lr

08015c14 <_init>:
 8015c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c16:	bf00      	nop
 8015c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c1a:	bc08      	pop	{r3}
 8015c1c:	469e      	mov	lr, r3
 8015c1e:	4770      	bx	lr

08015c20 <_fini>:
 8015c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c22:	bf00      	nop
 8015c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c26:	bc08      	pop	{r3}
 8015c28:	469e      	mov	lr, r3
 8015c2a:	4770      	bx	lr
